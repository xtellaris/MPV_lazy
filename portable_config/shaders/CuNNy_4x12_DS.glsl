// CuNNy 4x12 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x12_DS] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(3.784e-03, 2.878e-02, 1.310e-02, 3.181e-02) * s0_0_0;
	r1 += V4(1.423e-02, 2.974e-01, -5.921e-02, -3.269e-02) * s0_0_0;
	r2 += V4(-3.253e-02, 2.153e-02, 9.754e-02, -9.600e-02) * s0_0_0;
	r0 += V4(-4.267e-03, -2.637e-02, 8.383e-02, 1.175e-02) * s0_0_1;
	r1 += V4(-5.755e-02, 4.639e-01, -9.260e-02, 8.113e-02) * s0_0_1;
	r2 += V4(2.072e-01, -4.626e-02, -3.316e-01, -1.103e-01) * s0_0_1;
	r0 += V4(-5.380e-03, -1.846e-03, -4.640e-03, -6.695e-03) * s0_0_2;
	r1 += V4(2.981e-02, -4.418e-02, -7.535e-03, 4.705e-03) * s0_0_2;
	r2 += V4(-1.822e-01, 2.190e-02, -2.397e-01, -7.827e-02) * s0_0_2;
	r0 += V4(-3.009e-02, -4.213e-01, -3.297e-03, -2.304e-01) * s0_1_0;
	r1 += V4(-2.459e-02, -4.995e-01, -5.588e-02, 3.010e-01) * s0_1_0;
	r2 += V4(8.849e-02, -9.909e-03, 8.058e-03, -5.064e-02) * s0_1_0;
	r0 += V4(4.809e-02, 6.116e-02, -7.441e-02, -4.964e-01) * s0_1_1;
	r1 += V4(-5.414e-01, -1.279e-01, 6.292e-01, -9.353e-02) * s0_1_1;
	r2 += V4(3.351e-01, 7.431e-01, 4.173e-01, 7.653e-01) * s0_1_1;
	r0 += V4(-1.554e-02, 4.508e-03, 1.568e-02, 3.992e-02) * s0_1_2;
	r1 += V4(5.915e-01, 1.837e-02, -6.292e-02, -2.405e-02) * s0_1_2;
	r2 += V4(-3.975e-01, 4.744e-03, -8.364e-02, -1.082e-01) * s0_1_2;
	r0 += V4(-7.698e-01, -3.383e-01, -7.153e-02, 1.930e-01) * s0_2_0;
	r1 += V4(1.947e-02, -1.678e-02, 2.146e-02, -4.921e-03) * s0_2_0;
	r2 += V4(-5.359e-02, -2.203e-02, -6.667e-02, -7.913e-02) * s0_2_0;
	r0 += V4(7.678e-01, 7.121e-01, 3.682e-01, 4.621e-01) * s0_2_1;
	r1 += V4(-7.412e-02, -1.294e-01, -1.382e-01, 6.511e-02) * s0_2_1;
	r2 += V4(6.506e-02, -6.676e-01, 5.399e-02, -1.494e-01) * s0_2_1;
	r0 += V4(7.820e-03, -1.407e-02, -1.151e-01, -1.668e-02) * s0_2_2;
	r1 += V4(5.652e-02, 2.831e-02, 2.951e-02, 7.576e-03) * s0_2_2;
	r2 += V4(-2.300e-02, -3.980e-02, 1.538e-01, -7.682e-02) * s0_2_2;
	r0 += V4(5.994e-03, -3.772e-03, -1.085e-03, 3.500e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.663e-02, 3.577e-02, 1.182e-02, 7.855e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(2.404e-02, 8.369e-04, 1.091e-02, 7.886e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12_DS] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.817e-02, 9.204e-02, 1.891e-01, -4.744e-02, 1.321e-01, 5.646e-02, -2.280e-01, 1.554e-01, -2.281e-01, -2.181e-01, 1.813e-02, -2.409e-01, 1.238e-01, -2.103e-02, -3.347e-03, -1.680e-01) * s0_0_0;
	r1 += M4(-3.568e-01, 1.984e-01, 2.400e-01, -4.450e-02, 2.251e-01, -2.762e-01, -1.801e-01, -2.355e-02, -1.715e-01, 3.121e-02, -2.055e-01, 2.061e-01, -2.650e-01, 1.231e-01, 2.994e-01, -1.484e-01) * s0_0_0;
	r2 += M4(-7.385e-02, -1.317e-01, -1.413e-01, 6.678e-02, 2.107e-01, 1.065e-01, -1.424e-01, -1.101e-02, 2.779e-02, 5.424e-01, 6.370e-01, 7.545e-03, 3.312e-01, -3.270e-01, -4.851e-03, 4.866e-02) * s0_0_0;
	r0 += M4(5.975e-03, 8.920e-02, 8.106e-01, -1.909e-01, 1.060e-01, -2.250e-02, 5.682e-02, 4.638e-02, 2.531e-01, 6.144e-01, -4.104e-01, -2.205e-01, -8.088e-02, 1.806e-01, 1.210e-01, 1.656e-01) * s0_0_1;
	r1 += M4(3.987e-01, 7.869e-01, -5.596e-01, -5.892e-01, 2.379e-01, -6.558e-01, -9.335e-01, -2.649e-01, -2.996e-02, -2.471e-01, -8.869e-02, 9.167e-01, 7.324e-01, -2.924e-03, -4.709e-01, -5.049e-01) * s0_0_1;
	r2 += M4(-1.000e+00, 5.021e-01, -1.000e+00, 2.237e-02, -1.000e+00, 3.193e-01, -2.325e-01, 3.687e-02, 3.953e-02, -2.221e-01, -4.569e-01, 2.956e-01, 1.419e-01, 5.456e-01, 1.352e-01, -9.212e-02) * s0_0_1;
	r0 += M4(2.026e-01, 4.188e-01, -9.100e-03, -1.974e-01, -2.330e-01, -3.548e-01, 3.148e-01, -5.450e-03, 3.634e-02, -6.291e-02, -3.230e-01, -3.939e-02, -3.399e-02, -2.696e-02, -1.710e-01, -4.154e-02) * s0_0_2;
	r1 += M4(5.406e-01, 2.321e-01, -1.000e+00, -8.628e-02, -3.761e-01, -1.092e-01, -5.273e-01, -1.292e-01, 1.567e-01, 2.787e-01, 4.607e-01, 3.742e-01, -1.660e-01, -2.316e-01, 2.171e-01, -3.138e-02) * s0_0_2;
	r2 += M4(-7.324e-01, -7.112e-02, 1.591e-01, 4.281e-02, -8.449e-02, 3.606e-01, -3.032e-02, -2.530e-01, -8.839e-02, -1.488e-01, 5.768e-02, 5.831e-02, -9.011e-03, 1.049e-01, 9.226e-02, -1.984e-02) * s0_0_2;
	r0 += M4(1.467e-02, 1.371e-01, 1.158e-02, 1.304e-01, 4.774e-02, -1.266e-01, -7.966e-02, -8.121e-02, -1.372e-01, 5.891e-03, 3.096e-01, -7.391e-02, -5.684e-03, -7.718e-02, -1.724e-01, -1.073e-01) * s0_1_0;
	r1 += M4(-2.230e-01, -2.626e-01, 2.209e-01, -3.228e-02, 2.959e-01, 1.476e-01, -4.148e-02, 1.333e-01, 1.724e-02, -4.579e-01, -2.407e-01, -2.214e-01, 1.458e-01, 2.016e-02, 3.042e-01, -8.909e-02) * s0_1_0;
	r2 += M4(1.869e-01, 1.557e-02, -1.139e-02, 2.016e-02, -1.218e-01, 4.577e-02, -1.022e-01, 5.809e-02, -2.762e-01, 8.011e-02, -4.923e-02, 1.685e-01, -9.784e-02, -2.573e-01, 5.216e-02, 7.925e-02) * s0_1_0;
	r0 += M4(3.466e-02, 1.825e-01, -3.467e-01, 1.896e-01, 2.214e-02, -3.009e-01, -7.642e-02, -9.097e-02, 5.531e-02, -3.818e-01, 1.904e-01, 3.777e-01, 1.988e-01, 4.399e-01, 2.693e-01, 5.022e-01) * s0_1_1;
	r1 += M4(-2.122e-02, -9.342e-01, 2.818e-01, 2.357e-01, 3.048e-01, 1.954e-01, 2.396e-01, -1.973e-01, -6.770e-02, 6.091e-01, 1.650e-01, -2.996e-01, -4.898e-01, 6.108e-01, -8.340e-01, 1.000e+00) * s0_1_1;
	r2 += M4(-2.618e-02, 2.425e-01, -1.046e-01, -1.773e-01, -1.245e-01, 3.406e-02, -6.389e-02, 5.470e-03, -2.599e-01, -1.234e-01, 4.630e-04, -4.387e-01, 5.105e-01, 1.701e-01, -2.502e-02, -4.345e-01) * s0_1_1;
	r0 += M4(2.612e-01, 5.136e-02, -3.183e-01, 2.343e-02, 1.853e-01, 1.910e-03, 2.022e-01, -7.528e-02, 5.383e-02, -1.005e-01, 1.582e-01, -2.255e-01, -1.882e-01, 2.513e-01, 1.224e-02, 7.324e-02) * s0_1_2;
	r1 += M4(-4.541e-01, -7.186e-01, 6.465e-01, 2.242e-01, 3.142e-01, 8.156e-01, -7.187e-01, -1.461e-01, -7.511e-01, 1.801e-01, -1.072e-02, 8.525e-02, 8.032e-01, -3.122e-01, 1.123e-02, -8.511e-02) * s0_1_2;
	r2 += M4(3.343e-01, -7.356e-02, -1.809e-01, -4.914e-01, 9.004e-02, 2.673e-01, 2.136e-01, 2.744e-01, -2.232e-01, -2.006e-01, -4.848e-02, -4.665e-03, -2.742e-02, 1.702e-01, 1.042e-01, -1.184e-01) * s0_1_2;
	r0 += M4(1.144e-03, 1.048e-01, -9.496e-02, 1.513e-02, -4.931e-02, -1.195e-01, 1.871e-02, -5.111e-02, 3.105e-02, -1.403e-02, 2.722e-01, 3.934e-01, 7.619e-02, 1.204e-01, -8.533e-02, 1.954e-02) * s0_2_0;
	r1 += M4(-6.689e-02, -2.878e-02, 1.480e-01, -5.045e-02, 1.604e-01, 8.201e-02, -6.177e-02, 8.450e-04, 4.292e-01, -2.943e-01, -4.863e-01, -1.731e-01, -1.666e-01, 7.428e-02, 1.997e-01, -6.681e-02) * s0_2_0;
	r2 += M4(1.149e-02, -1.957e-02, -1.042e-03, 1.251e-01, -6.181e-02, -6.548e-03, 2.484e-02, -1.540e-01, 2.605e-01, 1.684e-02, 5.952e-02, -9.005e-02, 4.404e-03, -1.134e-01, -6.856e-03, 5.809e-02) * s0_2_0;
	r0 += M4(1.102e-02, 5.977e-02, -9.903e-03, 3.003e-01, 2.500e-02, -1.516e-01, -8.531e-02, -2.861e-01, 5.723e-02, 1.523e-01, -3.348e-01, -1.693e-01, -8.729e-02, -8.950e-02, 1.054e-01, 2.584e-01) * s0_2_1;
	r1 += M4(3.824e-02, 2.106e-02, 1.754e-02, -4.158e-02, -1.117e-01, 2.145e-01, -5.235e-03, 8.250e-02, 4.534e-01, 1.862e-01, 2.766e-01, -3.047e-01, -3.003e-01, 1.097e-01, -1.125e-01, 2.927e-01) * s0_2_1;
	r2 += M4(2.172e-02, -3.801e-02, 5.130e-04, 5.230e-02, -2.263e-01, -6.543e-02, -7.244e-02, -1.195e-01, 5.837e-01, -1.297e-01, -2.383e-02, 2.837e-01, -1.382e-03, 1.577e-01, 5.807e-02, -8.477e-02) * s0_2_1;
	r0 += M4(4.359e-02, 8.810e-03, 8.595e-02, 4.807e-02, 8.172e-02, -4.986e-02, -1.576e-01, 9.907e-02, -1.834e-01, 8.528e-03, 7.023e-02, 1.461e-01, 1.217e-01, -7.306e-02, -5.575e-02, -3.150e-01) * s0_2_2;
	r1 += M4(-3.193e-01, -4.854e-02, 3.281e-02, -5.318e-03, 4.386e-01, 5.384e-01, -9.182e-02, -6.306e-02, -2.098e-01, -2.610e-01, 9.687e-02, -6.015e-02, -6.531e-02, -6.402e-01, 1.269e-01, -7.387e-02) * s0_2_2;
	r2 += M4(-3.285e-02, -4.816e-02, 3.543e-02, 2.716e-02, 1.613e-01, 1.035e-01, 6.198e-02, -1.220e-02, 1.219e-01, -7.824e-02, -1.981e-01, -2.509e-01, 3.844e-03, -3.760e-02, -3.332e-02, 3.509e-01) * s0_2_2;
	r0 += M4(-1.139e-01, 9.554e-02, -9.407e-02, 3.232e-03, 1.071e-02, -2.329e-02, 1.030e-01, 1.315e-02, -1.349e-01, -8.923e-03, -1.368e-02, -1.709e-01, 1.836e-01, 1.655e-01, 1.138e-02, -3.828e-03) * s1_0_0;
	r1 += M4(-2.967e-01, 4.380e-03, -2.971e-01, -1.392e-01, 8.746e-03, -1.312e-01, 7.110e-02, 3.085e-02, -1.960e-01, -1.141e-02, -5.381e-01, -2.235e-01, -2.587e-01, -4.085e-02, -5.488e-01, 5.683e-03) * s1_0_0;
	r2 += M4(-3.324e-01, 2.113e-01, 2.034e-01, 9.522e-02, -9.152e-02, 3.031e-02, 2.347e-02, -3.913e-02, 1.729e-01, 2.415e-01, 2.024e-01, -1.392e-01, 3.133e-01, 2.832e-01, 2.114e-01, 2.346e-02) * s1_0_0;
	r0 += M4(3.358e-02, -1.294e-01, -2.395e-01, 8.410e-02, -6.685e-02, -1.568e-01, -2.256e-02, -1.647e-02, 3.573e-02, -1.637e-01, 4.164e-02, 4.352e-02, 1.932e-01, -2.554e-01, -4.307e-01, -3.615e-01) * s1_0_1;
	r1 += M4(1.898e-02, 2.859e-01, 9.635e-02, 8.704e-02, 4.209e-02, 1.037e-01, 3.001e-01, 4.996e-02, 2.259e-01, -4.125e-02, -2.610e-01, 2.372e-01, 1.115e-01, -1.867e-01, 2.173e-01, -6.918e-02) * s1_0_1;
	r2 += M4(-2.532e-01, -1.221e-01, -1.801e-02, 1.388e-01, 6.572e-02, -1.615e-01, 1.800e-02, 5.404e-02, 8.437e-02, -8.717e-02, -1.934e-01, 9.952e-02, -3.861e-02, -8.548e-01, 9.142e-02, 4.658e-01) * s1_0_1;
	r0 += M4(3.400e-02, 7.708e-02, -2.563e-02, 6.378e-02, -2.362e-02, 4.171e-02, 1.465e-01, 1.002e-01, -1.652e-01, -6.431e-03, -2.417e-01, 1.812e-02, -1.955e-01, 3.135e-01, -1.590e-01, 2.297e-02) * s1_0_2;
	r1 += M4(1.560e-03, 1.469e-01, -7.787e-03, 6.935e-03, -6.206e-02, -1.160e-01, -3.062e-01, -9.147e-02, -1.832e-01, 3.362e-01, -3.672e-02, -1.274e-01, -4.466e-01, -8.424e-02, -3.372e-01, -1.222e-01) * s1_0_2;
	r2 += M4(5.442e-02, 8.377e-02, 4.360e-02, 9.273e-03, 1.897e-01, 1.548e-01, -1.648e-02, -3.271e-02, -3.966e-02, -1.666e-02, -5.476e-02, 1.564e-01, 7.121e-02, 3.318e-01, -1.909e-02, 8.471e-02) * s1_0_2;
	r0 += M4(9.777e-02, 3.140e-01, -7.465e-03, 4.749e-02, -8.186e-02, -6.019e-02, -4.871e-02, 7.609e-02, 7.300e-02, 2.245e-03, 4.172e-02, 1.337e-01, -4.064e-02, 1.171e-01, 2.722e-02, 4.685e-02) * s1_1_0;
	r1 += M4(-1.693e-01, -4.206e-01, 1.000e+00, 2.654e-01, 2.358e-01, 8.037e-02, -2.207e-01, 3.021e-02, 8.520e-03, 7.280e-02, -9.729e-02, 2.175e-01, 4.372e-01, 6.994e-02, 1.598e-01, -7.146e-02) * s1_1_0;
	r2 += M4(-3.106e-01, 3.446e-01, -1.000e+00, 4.227e-03, -1.442e-02, 3.825e-02, 1.217e-01, -1.096e-01, -2.086e-01, 6.185e-01, 7.151e-01, -1.973e-02, -2.512e-02, 3.222e-01, -1.057e-01, 3.789e-02) * s1_1_0;
	r0 += M4(5.689e-01, 5.003e-02, 1.429e-01, 1.882e-01, -4.532e-02, -2.132e-01, 2.394e-02, 3.012e-02, 7.801e-02, 6.691e-01, -1.895e-01, -6.146e-01, 4.621e-01, -5.423e-01, 2.812e-01, -1.341e-01) * s1_1_1;
	r1 += M4(3.251e-01, 1.706e-01, 9.060e-01, 3.081e-01, -7.273e-01, 1.615e-02, 7.274e-02, -2.538e-02, 1.768e-01, -1.965e-01, 3.176e-01, 1.000e+00, 3.350e-01, 1.088e-01, 2.119e-01, 2.941e-01) * s1_1_1;
	r2 += M4(4.256e-01, 2.824e-03, -2.768e-01, 2.537e-01, 3.696e-01, -2.579e-01, -3.616e-01, 1.276e-01, -4.329e-01, -5.191e-01, -4.714e-01, 6.640e-01, -1.763e-01, 5.375e-01, 8.745e-02, -4.087e-02) * s1_1_1;
	r0 += M4(2.198e-02, 5.493e-02, -1.111e-02, -3.527e-02, 1.679e-01, 1.301e-01, -3.114e-02, 2.257e-01, 2.225e-01, -9.384e-02, 1.995e-01, -6.567e-02, -2.861e-01, 7.647e-01, 7.405e-02, -1.235e-01) * s1_1_2;
	r1 += M4(-1.720e-01, -2.696e-01, 1.568e-01, 9.503e-02, -3.498e-01, 1.225e-01, 7.714e-01, 2.526e-01, 4.461e-01, 3.128e-01, -2.076e-01, 4.060e-02, -4.335e-01, 3.448e-01, 2.490e-01, -1.000e+00) * s1_1_2;
	r2 += M4(-7.638e-02, -8.264e-02, -1.077e-01, 7.973e-02, 1.827e-01, 2.630e-01, 9.554e-02, 1.052e-01, 4.533e-02, -9.185e-02, -1.229e-01, 3.389e-01, -1.743e-01, -4.589e-02, -3.278e-01, 9.928e-02) * s1_1_2;
	r0 += M4(-2.228e-02, 6.779e-02, 2.136e-01, 9.494e-02, 7.521e-02, 4.118e-02, -1.021e-02, 2.552e-02, 2.720e-02, -4.346e-02, -1.294e-02, -1.400e-01, 3.324e-03, 3.818e-03, 3.538e-02, 2.924e-01) * s1_2_0;
	r1 += M4(4.675e-01, -3.333e-01, -6.541e-01, -2.530e-01, -1.627e-02, -2.038e-02, 1.190e-01, 5.480e-02, -4.082e-02, -5.000e-01, 2.247e-01, -3.011e-01, 6.375e-02, -2.199e-01, 3.056e-01, 1.204e-01) * s1_2_0;
	r2 += M4(3.590e-02, -2.021e-01, 2.207e-01, -1.607e-01, 5.433e-02, 1.130e-01, 7.938e-02, -3.744e-02, 6.597e-02, 4.509e-02, 2.890e-01, -5.375e-02, 2.154e-01, 2.152e-01, 3.239e-01, -1.674e-02) * s1_2_0;
	r0 += M4(-2.354e-02, -1.021e-01, -8.608e-02, 6.067e-02, 1.768e-02, 4.109e-02, -3.354e-01, -1.788e-01, -1.205e-02, -3.914e-01, 4.077e-01, 5.874e-01, -1.239e-01, -2.898e-01, -8.555e-02, 5.362e-02) * s1_2_1;
	r1 += M4(2.899e-01, -3.050e-01, -3.881e-01, 4.493e-02, -1.913e-01, -7.220e-02, 2.107e-01, -2.292e-01, -5.881e-02, 2.284e-01, 2.903e-01, -9.730e-02, 6.718e-01, -3.503e-01, -6.526e-02, -4.053e-01) * s1_2_1;
	r2 += M4(-3.363e-01, 4.871e-02, 1.826e-01, -6.158e-02, 2.118e-01, -1.023e-01, -1.311e-02, 6.533e-01, 5.491e-02, -1.323e-01, -1.257e-01, -9.202e-01, -5.902e-02, -1.779e-01, -2.510e-01, -2.386e-01) * s1_2_1;
	r0 += M4(4.397e-03, 2.232e-02, 2.749e-02, 3.186e-02, 7.686e-02, -4.128e-02, -5.485e-01, -1.943e-01, -9.449e-02, -2.446e-01, 8.959e-02, 1.610e-01, -1.741e-01, 1.784e-01, -1.642e-02, 3.179e-01) * s1_2_2;
	r1 += M4(-9.838e-02, 1.388e-01, -1.372e-01, -3.068e-02, -1.712e-01, -1.079e-01, 2.440e-02, -1.852e-01, -3.098e-01, -1.813e-01, 1.596e-01, -4.177e-01, -3.858e-01, 3.057e-01, -1.105e-02, -1.444e-01) * s1_2_2;
	r2 += M4(4.780e-02, -2.529e-03, 6.526e-02, -6.964e-02, -1.012e-01, -3.286e-02, -9.894e-02, 2.813e-01, 2.642e-01, -1.029e-01, -2.026e-01, -2.774e-01, -1.741e-01, -3.636e-01, 1.261e-02, -2.438e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.466e-01, 1.497e-01, -1.085e-01, 1.701e-01, 4.660e-02, 6.277e-02, 4.932e-01, -2.184e-02, 2.621e-02, 1.399e-01, 4.128e-03, 7.199e-04, 6.823e-02, 2.272e-02, 1.759e-02, 5.740e-02) * s0_0_0;
	r1 += M4(4.275e-01, 2.052e-01, -3.350e-01, -1.254e-01, 1.706e-01, -1.110e-02, 3.758e-01, 1.722e-01, -1.917e-02, -5.236e-02, 1.598e-01, -6.921e-02, 7.059e-02, 5.946e-02, 1.450e-01, 2.507e-01) * s0_0_0;
	r2 += M4(8.921e-02, 1.629e-01, -2.807e-01, -1.555e-01, -8.655e-02, 2.596e-01, 6.635e-02, 7.088e-02, 1.729e-01, 3.696e-02, 3.519e-02, -3.093e-02, -1.252e-01, 3.274e-01, -3.092e-02, 1.951e-02) * s0_0_0;
	r0 += M4(-5.050e-02, -3.079e-03, 3.816e-02, 6.226e-02, 6.791e-01, 1.866e-01, 5.581e-01, -7.346e-02, -3.289e-02, 2.875e-02, -1.230e-01, -1.859e-02, 6.217e-02, -1.471e-01, -3.564e-01, -9.731e-02) * s0_0_1;
	r1 += M4(3.073e-01, -1.820e-01, 9.697e-02, -1.135e-01, 4.158e-01, 2.924e-01, -2.503e-01, 1.627e-02, -2.277e-01, -1.483e-01, 1.049e-01, 9.399e-02, -2.746e-03, -1.646e-01, 8.787e-03, 2.022e-01) * s0_0_1;
	r2 += M4(-1.265e-01, 1.623e-01, -1.264e-01, -1.010e-03, -1.000e+00, -1.728e-01, 2.532e-02, -2.940e-01, 3.842e-02, -2.988e-01, 2.796e-02, 8.818e-02, 8.087e-02, 1.399e-01, 1.286e-02, -1.353e-02) * s0_0_1;
	r0 += M4(-4.975e-03, -1.047e-01, -1.015e-01, 6.225e-03, 1.025e-01, 7.377e-03, 3.559e-01, -1.951e-01, 4.844e-02, 8.854e-02, 3.718e-02, 5.596e-02, 1.168e-02, -5.576e-02, 2.125e-01, -1.306e-01) * s0_0_2;
	r1 += M4(-7.278e-02, -1.247e-02, 1.319e-01, -3.516e-02, 2.094e-02, -6.543e-01, -3.150e-01, -9.182e-02, -5.509e-03, -4.451e-02, 1.591e-03, -6.566e-02, 2.788e-01, 1.719e-01, -1.733e-01, 2.058e-01) * s0_0_2;
	r2 += M4(3.878e-02, -3.122e-02, -9.533e-02, 1.853e-02, 1.531e-02, -7.778e-02, -3.907e-03, -4.960e-02, -4.401e-02, 1.062e-01, 3.355e-02, 3.650e-02, -1.450e-01, -1.997e-01, 6.610e-02, -3.026e-02) * s0_0_2;
	r0 += M4(-3.766e-01, -1.280e-01, -4.329e-01, -1.298e-01, 2.695e-02, -4.485e-02, 4.033e-01, 1.520e-01, 3.643e-02, -6.761e-02, -4.173e-01, -1.859e-02, -9.913e-02, 5.331e-02, 1.051e-01, -1.565e-01) * s0_1_0;
	r1 += M4(-4.751e-01, 1.073e-01, -1.637e-01, 5.760e-01, 1.181e-01, -2.516e-01, 3.343e-01, -3.781e-02, -1.792e-01, 2.075e-01, -2.992e-02, 1.511e-01, -5.100e-02, 3.406e-01, -8.307e-01, -6.955e-02) * s0_1_0;
	r2 += M4(2.825e-01, -6.116e-02, 4.555e-01, 1.743e-01, 9.764e-02, 3.480e-02, -3.489e-01, -1.622e-01, 8.307e-02, 2.589e-01, 5.052e-02, -8.585e-02, 4.380e-01, 1.009e-01, 7.607e-01, 5.436e-02) * s0_1_0;
	r0 += M4(-9.807e-02, 3.018e-01, 4.090e-02, -2.557e-02, -5.267e-02, -2.584e-02, -7.441e-02, -1.000e+00, -3.545e-01, -1.823e-01, 7.078e-02, -4.088e-02, -2.360e-01, 4.663e-02, -7.695e-01, -3.382e-01) * s0_1_1;
	r1 += M4(-4.794e-01, -7.765e-01, -2.793e-01, -1.150e-01, 4.789e-01, 5.934e-01, 1.759e-01, -7.211e-01, -3.408e-02, -2.718e-01, -3.215e-01, -9.266e-02, -1.000e+00, -6.285e-01, 5.215e-01, -3.292e-01) * s0_1_1;
	r2 += M4(1.352e-01, -3.326e-02, 3.513e-01, -5.857e-02, -1.470e-01, -2.183e-01, 9.208e-02, 3.420e-02, -5.089e-02, -1.665e-01, -1.191e-01, -2.412e-02, 1.914e-01, -1.484e-01, -4.656e-01, 4.049e-01) * s0_1_1;
	r0 += M4(-2.329e-01, -3.245e-02, -7.807e-02, 3.769e-02, -1.105e-02, 7.743e-02, 9.533e-02, -1.563e-01, 2.576e-01, 1.484e-01, 1.210e-01, 5.679e-02, 2.641e-01, -6.245e-02, 2.721e-02, 8.884e-02) * s0_1_2;
	r1 += M4(-2.521e-01, -8.753e-02, -2.427e-01, -6.237e-03, -5.453e-01, -6.489e-01, -1.856e-01, -1.381e-01, -2.505e-01, -2.216e-01, 8.835e-03, -6.300e-02, 5.965e-01, 1.562e-01, 1.246e-01, 1.483e-01) * s0_1_2;
	r2 += M4(1.382e-01, 1.509e-01, 1.018e-01, -2.504e-01, 1.059e-01, 2.270e-02, 8.035e-02, -3.431e-01, -4.617e-02, 1.232e-01, 1.018e-01, 6.992e-02, -4.052e-02, -1.953e-01, -7.093e-02, 1.075e-02) * s0_1_2;
	r0 += M4(2.583e-01, 1.499e-01, 2.739e-02, -2.446e-01, -4.906e-02, -4.556e-02, -4.623e-02, 2.322e-02, 2.830e-02, 2.684e-02, 1.402e-01, 7.579e-02, 9.200e-02, 3.316e-02, 2.468e-01, 7.031e-02) * s0_2_0;
	r1 += M4(-5.637e-01, 2.868e-01, 2.597e-01, 1.243e-01, 1.687e-01, -1.271e-01, -2.181e-01, -4.601e-02, -4.471e-01, 4.468e-02, 2.761e-01, 1.594e-01, 5.501e-02, 2.838e-01, -1.400e-01, 2.389e-01) * s0_2_0;
	r2 += M4(1.287e-01, 4.702e-02, -1.707e-01, 2.862e-01, 2.329e-01, 9.322e-02, 3.628e-03, 1.368e-01, -1.871e-01, 7.787e-02, 3.490e-02, 1.572e-02, -4.273e-02, -1.048e-01, 5.424e-02, -1.488e-01) * s0_2_0;
	r0 += M4(-5.917e-02, 1.908e-01, 1.247e-01, 1.384e-02, -1.086e-02, 9.344e-02, -2.744e-01, -3.265e-01, -1.087e-01, 8.550e-03, 3.558e-01, 4.269e-01, -1.522e-02, -9.673e-03, 4.922e-01, 5.841e-01) * s0_2_1;
	r1 += M4(-5.122e-01, 2.627e-01, 7.328e-02, -5.346e-01, 1.851e-01, 8.543e-02, 2.307e-01, -1.318e-01, 9.330e-02, -9.410e-02, 1.140e-01, 3.277e-01, 2.044e-01, -3.722e-01, -7.183e-02, 1.564e-01) * s0_2_1;
	r2 += M4(-4.745e-02, 2.215e-02, -1.880e-01, 1.776e-01, 1.638e-02, -1.479e-02, -4.706e-02, 2.053e-01, -5.686e-02, 1.814e-02, -3.610e-02, -4.654e-01, -1.601e-01, -1.311e-01, -6.318e-02, -3.532e-01) * s0_2_1;
	r0 += M4(1.213e-01, 1.376e-01, -8.254e-03, -2.932e-02, -9.200e-03, 8.685e-02, 2.638e-02, 1.889e-01, 8.119e-03, 1.215e-01, 4.725e-02, -4.304e-02, -5.458e-02, -5.052e-02, 1.141e-01, 2.157e-02) * s0_2_2;
	r1 += M4(3.876e-01, 1.147e-01, 1.014e-01, -1.090e-01, -1.384e-01, 9.819e-02, -5.147e-02, -3.972e-02, -4.323e-01, -1.469e-01, -1.724e-02, 4.014e-02, -1.758e-01, -2.890e-01, -1.049e-02, 2.726e-01) * s0_2_2;
	r2 += M4(-1.119e-02, 1.243e-01, 1.828e-02, 3.252e-01, 3.276e-02, 1.911e-02, 2.206e-02, -1.123e-01, 3.418e-02, -7.217e-03, -1.218e-02, 2.496e-02, -9.273e-02, -1.182e-01, 3.119e-02, -1.722e-01) * s0_2_2;
	r0 += V4(1.031e-02, -3.331e-02, -3.744e-03, -1.394e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.039e-02, 5.579e-02, -3.812e-02, -2.826e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.685e-03, -5.849e-02, 1.366e-02, -2.078e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12_DS] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-4.036e-02, 1.289e-02, -9.738e-02, 1.509e-01, -2.858e-01, 1.336e-01, -5.912e-02, 3.533e-03, 8.211e-02, 2.862e-02, -7.145e-03, -8.458e-02, -1.505e-01, 1.314e-01, -2.316e-01, 1.694e-01) * s0_0_0;
	r1 += M4(-1.873e-01, -7.450e-02, 8.913e-02, -1.412e-01, 2.725e-01, -6.254e-02, 2.665e-02, -5.697e-02, 7.349e-02, 4.359e-02, -5.828e-03, -5.704e-02, 3.057e-01, -1.263e-01, 1.757e-01, -1.067e-01) * s0_0_0;
	r2 += M4(-8.957e-02, 2.577e-01, -8.135e-02, 2.452e-01, 1.918e-01, -8.349e-02, -1.254e-01, 6.662e-02, 2.514e-02, -1.962e-02, 9.150e-02, -7.038e-02, 1.115e-02, 1.646e-01, -8.808e-03, 2.999e-02) * s0_0_0;
	r0 += M4(-2.261e-01, -1.951e-02, -1.048e-01, 2.529e-03, 1.232e-01, 1.850e-01, -1.085e-01, -9.857e-03, -1.103e-01, -2.205e-02, 1.213e-01, 3.520e-02, 1.987e-01, 4.405e-02, -1.475e-01, -9.612e-02) * s0_0_1;
	r1 += M4(3.343e-02, -1.102e-01, 1.352e-01, -6.449e-01, 6.109e-03, 2.730e-01, 6.618e-02, -2.697e-01, 1.581e-01, 7.257e-02, -1.066e-01, 4.006e-01, -5.890e-01, -1.034e-02, 1.189e-01, -6.111e-01) * s0_0_1;
	r2 += M4(-3.416e-01, 1.033e-01, 1.745e-01, 2.485e-01, -4.180e-01, 1.767e-02, 7.354e-02, -5.026e-02, 1.851e-01, -1.908e-01, -6.155e-02, -1.538e-01, 6.184e-01, 1.001e-01, 2.479e-01, 4.552e-01) * s0_0_1;
	r0 += M4(-1.288e-01, -9.852e-02, -1.735e-01, 2.165e-02, -1.913e-01, 2.320e-02, -4.494e-02, 4.787e-02, 1.601e-01, 1.429e-02, 7.695e-02, -2.915e-02, -2.627e-01, -1.387e-01, -8.709e-03, 8.003e-02) * s0_0_2;
	r1 += M4(-7.476e-02, -5.554e-03, -3.752e-03, 1.415e-02, -8.081e-02, 2.804e-03, 1.876e-02, -9.083e-03, 6.222e-02, 6.842e-03, 4.673e-03, 1.928e-01, 7.939e-02, -5.121e-02, 2.501e-02, -3.847e-02) * s0_0_2;
	r2 += M4(1.324e-01, 1.269e-01, -4.760e-02, 7.719e-02, 4.590e-02, -1.696e-03, 2.752e-02, -7.009e-02, -8.802e-02, 6.208e-02, 7.362e-02, -6.869e-02, 5.253e-02, -3.212e-02, 9.447e-02, 1.811e-01) * s0_0_2;
	r0 += M4(6.606e-02, 1.770e-01, -1.179e-01, 7.343e-01, 3.321e-01, -1.483e-01, 1.460e-01, -2.167e-01, -4.746e-02, 1.026e-01, 1.929e-01, -2.290e-01, -2.659e-01, 2.255e-01, -4.913e-02, -3.670e-01) * s0_1_0;
	r1 += M4(5.578e-01, -5.772e-02, 2.542e-02, -5.035e-01, -4.056e-01, 1.213e-01, 5.114e-02, 8.789e-02, 4.149e-02, -5.219e-02, -5.614e-02, -7.238e-02, 1.606e-01, 1.600e-02, 1.160e-01, 1.265e-02) * s0_1_0;
	r2 += M4(-2.766e-02, 1.663e-01, -6.810e-02, 8.026e-02, -1.264e-01, -1.120e-01, 7.961e-02, 8.920e-02, 1.168e-02, -1.715e-01, -1.450e-02, 2.800e-02, 1.255e-02, 1.213e-01, -4.127e-02, 1.272e-03) * s0_1_0;
	r0 += M4(-2.277e-02, -1.747e-01, 3.375e-01, -4.520e-02, 3.585e-01, -5.862e-02, 2.222e-01, 3.264e-01, 4.725e-01, 1.167e-01, -3.691e-02, 7.438e-02, 3.837e-01, 3.888e-01, 3.582e-01, 3.535e-01) * s0_1_1;
	r1 += M4(5.409e-02, 1.146e-01, 1.984e-01, 1.861e-01, -7.760e-02, -3.525e-01, -2.835e-01, 1.145e-01, 1.218e-01, 1.537e-01, 1.461e-01, 9.729e-02, -1.964e-01, -3.902e-01, 3.018e-01, -3.824e-01) * s0_1_1;
	r2 += M4(-7.158e-02, -3.630e-01, -3.407e-01, -1.417e-01, 3.918e-01, -6.508e-01, -9.166e-03, 5.930e-03, -2.224e-01, -9.894e-02, 5.979e-02, -2.051e-02, 3.035e-01, -1.000e+00, -1.916e-01, -2.990e-01) * s0_1_1;
	r0 += M4(8.234e-02, 8.052e-02, 5.416e-02, -1.890e-01, 6.963e-02, -5.736e-03, 1.343e-01, -9.621e-02, 1.143e-01, 3.416e-02, 1.305e-01, 5.436e-02, -4.381e-02, -2.548e-01, 1.627e-02, -1.489e-03) * s0_1_2;
	r1 += M4(-9.090e-02, 8.390e-02, -4.973e-02, 1.181e-01, 1.095e-01, 5.551e-03, 1.526e-01, -2.962e-02, -1.953e-02, 8.354e-02, -4.800e-02, -3.465e-02, 7.944e-02, -3.215e-02, 1.174e-01, 1.505e-01) * s0_1_2;
	r2 += M4(-7.447e-02, 2.420e-01, -1.520e-01, 1.300e-01, 5.221e-02, -5.263e-02, 8.575e-02, 2.719e-02, 2.178e-02, -5.414e-02, 2.307e-01, 6.948e-02, -1.780e-01, 7.608e-02, -1.114e-02, 1.621e-02) * s0_1_2;
	r0 += M4(-6.365e-02, 3.507e-02, 2.813e-01, 5.686e-02, -6.093e-02, -1.420e-01, -1.997e-01, -1.889e-01, 4.604e-02, 7.745e-02, 1.246e-01, -9.599e-02, -5.142e-02, -4.805e-03, -6.240e-02, -7.506e-03) * s0_2_0;
	r1 += M4(-2.165e-01, 3.579e-02, 8.579e-02, 1.336e-01, 1.668e-01, 7.142e-03, -6.606e-02, 2.239e-02, -4.297e-03, 2.179e-05, -1.143e-02, 6.904e-02, -9.392e-02, 4.581e-02, -7.619e-03, -1.790e-02) * s0_2_0;
	r2 += M4(3.630e-02, -1.781e-01, 9.459e-02, 1.535e-01, -2.874e-02, 3.797e-01, 9.730e-02, -2.280e-01, 1.853e-02, -1.659e-01, 1.652e-02, 5.894e-02, -3.971e-02, 2.295e-02, -5.506e-02, 9.597e-03) * s0_2_0;
	r0 += M4(1.045e-01, -4.246e-02, -4.071e-01, 2.769e-01, 1.343e-01, 1.324e-01, 4.492e-01, 1.729e-01, -9.604e-02, -2.899e-02, 7.766e-02, -3.225e-03, -4.658e-02, 8.960e-02, 1.219e-01, 2.994e-03) * s0_2_1;
	r1 += M4(1.992e-01, -1.401e-01, -1.096e-01, 4.600e-01, 9.738e-02, 1.773e-01, -9.404e-02, 5.020e-01, 4.273e-01, -1.189e-01, 3.978e-02, 8.209e-02, -1.087e-01, 1.258e-02, 1.828e-02, 3.099e-02) * s0_2_1;
	r2 += M4(-2.786e-03, 4.123e-01, 3.485e-01, -2.960e-01, -2.672e-03, 6.024e-01, -9.406e-02, 3.962e-01, 4.034e-02, -5.421e-01, 1.083e-01, -1.666e-01, 9.839e-03, 1.523e-01, 2.065e-02, 1.382e-01) * s0_2_1;
	r0 += M4(8.400e-02, 1.769e-01, -1.124e-01, -7.987e-03, -8.030e-02, -1.479e-01, -1.697e-01, -2.997e-02, 3.158e-01, 1.316e-01, -5.560e-02, -7.983e-02, -1.310e-01, 2.193e-03, -5.397e-02, 4.901e-02) * s0_2_2;
	r1 += M4(1.565e-02, -2.699e-04, -5.075e-04, -5.602e-02, 9.816e-02, 1.017e-02, -7.923e-02, -3.916e-01, -1.071e-01, -5.488e-03, -5.529e-02, -6.290e-02, 4.961e-02, -3.745e-05, 2.043e-02, 6.180e-02) * s0_2_2;
	r2 += M4(1.009e-02, -3.049e-01, 9.893e-02, -1.227e-01, 2.326e-02, 2.251e-02, -1.414e-01, 9.717e-02, -2.428e-02, -4.547e-01, 7.679e-02, -9.445e-02, 1.700e-02, 1.779e-01, -4.559e-02, -1.895e-02) * s0_2_2;
	r0 += M4(-1.753e-01, -1.002e-01, 1.876e-01, 2.930e-02, 2.843e-01, 3.331e-02, 2.434e-02, -5.542e-02, -9.455e-02, 6.394e-02, -2.146e-02, -5.067e-03, -1.385e-02, -3.264e-02, 1.102e-01, 3.013e-02) * s1_0_0;
	r1 += M4(-2.338e-01, 2.723e-02, -3.529e-02, 7.494e-02, 8.959e-02, 6.317e-03, -4.919e-02, -8.704e-02, 8.369e-02, 1.701e-02, 7.785e-03, -1.581e-02, 4.669e-02, 5.884e-02, 1.558e-02, -1.063e-01) * s1_0_0;
	r2 += M4(1.682e-01, -5.871e-02, -2.602e-02, 5.199e-02, 2.443e-02, 1.652e-02, -6.978e-02, -1.020e-02, 2.418e-02, -1.444e-01, -2.047e-02, 5.039e-02, -1.097e-01, -7.272e-03, 7.057e-02, -5.290e-02) * s1_0_0;
	r0 += M4(-2.332e-01, -1.029e-01, 8.211e-02, 8.035e-02, 3.662e-01, -9.502e-02, 1.336e-01, 1.299e-01, 2.034e-01, 3.063e-02, 5.429e-03, -1.998e-02, 1.650e-01, 1.738e-01, 3.968e-02, -2.686e-02) * s1_0_1;
	r1 += M4(1.708e-01, 2.087e-02, 5.671e-02, 1.520e-01, -1.213e-01, -3.545e-02, -1.767e-02, 2.510e-01, 1.435e-01, 1.077e-01, -1.833e-02, -5.210e-02, -1.098e-01, 3.530e-02, 1.704e-02, -3.403e-02) * s1_0_1;
	r2 += M4(-4.326e-01, -7.820e-02, -5.659e-03, 6.312e-02, 8.618e-02, -1.311e-01, -2.037e-03, -1.023e-01, -1.095e-01, 1.277e-01, -5.021e-02, 1.431e-02, 5.129e-01, -2.278e-01, -5.161e-02, 2.366e-01) * s1_0_1;
	r0 += M4(7.108e-02, -1.467e-01, 8.870e-02, 8.708e-02, 1.047e-01, 6.846e-02, 1.165e-01, -3.275e-02, 1.183e-01, -6.665e-02, 1.093e-02, 5.308e-02, 8.328e-02, 1.348e-01, 1.948e-01, -1.039e-02) * s1_0_2;
	r1 += M4(-2.602e-01, 3.214e-02, 4.744e-02, 2.593e-01, 1.171e-01, -2.001e-02, 3.127e-03, 9.291e-02, -5.166e-02, -4.293e-02, 4.362e-02, -9.999e-03, -9.125e-02, 3.118e-02, -2.562e-02, -8.717e-02) * s1_0_2;
	r2 += M4(-1.892e-01, -7.504e-02, 1.461e-01, -8.002e-03, 4.383e-02, -1.558e-02, 3.968e-03, -7.620e-02, -4.931e-02, 5.888e-02, 7.449e-02, -5.543e-02, -6.616e-02, -4.882e-02, -1.892e-02, 5.382e-02) * s1_0_2;
	r0 += M4(2.125e-01, -2.790e-01, -3.118e-01, -4.204e-02, -3.682e-01, -6.779e-02, 2.943e-01, -6.992e-02, 8.523e-02, 4.185e-03, -1.374e-01, 6.944e-02, -3.471e-01, -5.982e-02, 1.031e-01, 9.022e-02) * s1_1_0;
	r1 += M4(-6.796e-01, 1.319e-01, 3.737e-02, 2.301e-01, 2.959e-01, -8.908e-02, -1.343e-01, 1.968e-01, -7.998e-02, 6.079e-02, 5.766e-03, -6.662e-02, 1.281e-01, -8.521e-03, 4.497e-02, 1.403e-03) * s1_1_0;
	r2 += M4(8.521e-02, -1.631e-01, -1.984e-01, 3.829e-02, -4.593e-02, -1.262e-01, 1.065e-02, -3.047e-02, 1.649e-02, 1.209e-01, 5.842e-02, 7.728e-02, 2.769e-02, 9.089e-02, 6.320e-02, -2.097e-01) * s1_1_0;
	r0 += M4(-3.203e-01, -2.416e-01, -1.675e-01, 2.407e-01, 1.299e-01, -2.007e-01, 6.470e-02, -1.353e-01, 1.776e-01, -3.140e-02, 1.067e-01, 2.271e-01, -1.000e+00, -2.648e-01, -4.001e-01, -1.566e-01) * s1_1_1;
	r1 += M4(-4.013e-02, 2.281e-01, 3.736e-01, -1.235e-03, 8.833e-02, -3.044e-02, -1.763e-01, -3.058e-02, -1.632e-01, 9.897e-03, -1.903e-02, -1.096e-01, -8.692e-01, 2.266e-01, 5.422e-02, -7.218e-01) * s1_1_1;
	r2 += M4(-2.529e-01, 2.247e-01, 3.569e-01, -5.280e-01, 9.532e-02, -2.375e-02, -1.392e-01, 5.104e-02, -3.233e-01, -9.508e-02, -7.490e-02, 1.778e-01, -4.301e-01, -1.368e-01, -3.374e-01, 5.917e-01) * s1_1_1;
	r0 += M4(1.467e-01, 8.667e-02, 1.120e-01, 5.513e-02, -5.085e-02, -1.708e-01, -3.425e-02, 3.782e-02, -4.030e-01, 1.215e-01, 1.519e-02, -2.093e-01, 2.547e-01, -8.013e-02, -3.575e-02, 9.216e-02) * s1_1_2;
	r1 += M4(-5.470e-01, -2.259e-02, 8.251e-02, 2.141e-01, 1.685e-01, -3.292e-02, -8.899e-03, -1.711e-01, 4.774e-01, 1.704e-01, 1.970e-02, -6.197e-02, 5.314e-02, 8.283e-02, -1.590e-02, 2.624e-01) * s1_1_2;
	r2 += M4(6.609e-02, 2.757e-02, 8.503e-02, -2.110e-01, 2.256e-02, 2.768e-02, 2.955e-02, 2.815e-03, -2.010e-02, 6.744e-02, 1.601e-01, 8.183e-02, 1.645e-01, 2.483e-01, 9.054e-02, 2.154e-02) * s1_1_2;
	r0 += M4(-2.459e-01, -2.327e-01, 4.714e-02, -6.677e-02, -1.098e-01, -2.883e-02, 4.470e-02, 3.604e-01, -8.134e-02, 6.836e-03, 3.476e-02, 1.393e-01, -3.430e-02, -1.915e-02, 3.587e-02, 1.938e-01) * s1_2_0;
	r1 += M4(-7.469e-02, 1.420e-02, 8.427e-02, 1.701e-01, -5.717e-02, 6.664e-02, -5.053e-02, 9.316e-02, 1.229e-01, 6.523e-03, -4.535e-02, -5.930e-02, 1.694e-02, -1.538e-02, 4.001e-03, -2.725e-02) * s1_2_0;
	r2 += M4(5.645e-03, 2.842e-01, -1.077e-01, 1.500e-01, -2.655e-02, -5.818e-03, 2.475e-02, 4.756e-02, -1.799e-02, 5.836e-02, -5.573e-02, 8.311e-02, -4.504e-02, -1.930e-01, 1.789e-02, -5.397e-02) * s1_2_0;
	r0 += M4(-6.345e-01, 1.948e-01, 3.638e-01, -2.437e-01, 3.011e-01, -2.751e-01, 5.402e-02, 1.522e-02, 3.040e-01, 2.317e-01, -3.454e-01, -1.938e-01, -1.169e-01, 3.479e-02, -7.415e-01, 1.969e-01) * s1_2_1;
	r1 += M4(-1.066e-01, 7.587e-02, 1.264e-01, 1.560e-01, 2.897e-02, 1.728e-02, -1.458e-01, -3.741e-02, 2.287e-01, 7.934e-02, -1.026e-01, -2.490e-01, 6.064e-02, 9.286e-02, -6.311e-02, 7.185e-02) * s1_2_1;
	r2 += M4(6.523e-02, 3.017e-02, 1.410e-02, 9.694e-02, 5.405e-02, 6.323e-02, -5.827e-02, 1.168e-01, -1.057e-01, 3.212e-01, -2.550e-01, 1.785e-01, 6.650e-02, 6.106e-02, 1.112e-01, 9.691e-02) * s1_2_1;
	r0 += M4(-2.262e-01, 4.705e-02, -5.075e-02, 3.367e-02, 8.928e-02, -1.318e-01, 1.188e-02, 4.488e-02, 4.081e-03, -1.116e-01, -2.290e-01, -2.400e-01, 8.178e-02, 1.515e-01, -1.499e-01, 3.071e-02) * s1_2_2;
	r1 += M4(-1.917e-02, -4.872e-02, 1.645e-02, -2.242e-01, 3.661e-02, 2.355e-03, 3.694e-03, -5.727e-02, -2.518e-02, 1.311e-01, -1.598e-02, -5.461e-01, 8.133e-04, -1.978e-02, -9.940e-02, 2.186e-01) * s1_2_2;
	r2 += M4(-6.712e-02, -2.199e-01, -1.819e-01, 1.558e-01, -1.752e-02, 3.888e-02, 1.162e-01, -1.047e-01, 5.733e-02, -6.267e-01, -1.452e-01, 4.733e-01, -6.474e-02, -8.043e-02, -9.247e-02, -1.303e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-2.138e-01, 1.655e-02, 4.874e-02, 6.068e-02, 1.421e-01, 3.727e-02, 4.217e-02, 1.040e-02, -1.806e-02, 4.645e-02, -7.813e-02, -5.397e-04, 2.729e-02, -9.522e-02, 4.388e-02, -1.461e-01) * s0_0_0;
	r1 += M4(2.946e-02, -4.695e-02, -3.207e-02, 6.988e-03, 7.557e-03, 6.443e-03, 3.442e-02, 2.027e-01, 1.806e-01, 9.169e-03, 5.726e-02, -2.301e-01, -4.551e-01, 1.519e-01, -1.015e-01, 2.317e-01) * s0_0_0;
	r2 += M4(4.125e-02, 9.005e-02, -3.167e-02, -4.251e-02, 1.288e-01, 6.360e-02, 3.133e-02, -3.784e-02, -1.252e-01, 2.514e-03, -6.075e-02, 1.062e-01, 4.165e-02, -8.696e-02, 7.172e-02, -1.365e-01) * s0_0_0;
	r0 += M4(-2.403e-01, 9.082e-03, 8.117e-02, -8.019e-04, 1.340e-01, 5.106e-02, -3.630e-02, 6.199e-02, 2.711e-01, -5.959e-02, -7.508e-02, -3.114e-02, -3.896e-01, 1.414e-02, 5.086e-03, 6.456e-02) * s0_0_1;
	r1 += M4(1.381e-01, 6.199e-02, -8.319e-02, -3.264e-03, 1.710e-01, -5.887e-02, 1.321e-01, 6.193e-02, -1.425e-01, 1.141e-01, 8.179e-02, -2.755e-01, 3.590e-01, 3.719e-01, -6.216e-02, 4.346e-01) * s0_0_1;
	r2 += M4(1.177e-01, -1.185e-01, -7.426e-02, 4.366e-02, -3.771e-02, -1.309e-02, -4.551e-02, -5.988e-02, -2.384e-01, 3.119e-01, 1.533e-01, 7.245e-02, -6.575e-01, -4.105e-02, 1.997e-01, -1.776e-01) * s0_0_1;
	r0 += M4(-1.012e-01, -1.711e-02, -2.453e-02, 7.405e-02, 1.880e-01, -9.744e-02, 1.646e-02, -1.221e-01, -4.949e-02, -1.079e-01, 2.854e-02, -1.571e-02, 1.590e-01, -7.119e-02, 2.115e-02, 3.047e-02) * s0_0_2;
	r1 += M4(2.373e-01, -4.590e-02, -2.517e-02, 5.497e-02, 1.163e-01, 1.302e-01, 4.954e-02, 7.678e-02, -2.861e-01, -1.179e-01, 1.840e-02, -1.093e-01, -2.370e-01, 4.803e-02, -6.891e-02, -3.417e-03) * s0_0_2;
	r2 += M4(1.811e-01, -3.896e-02, -3.834e-02, 4.541e-02, -5.459e-03, 1.814e-01, 9.815e-02, -7.379e-02, -1.527e-01, 3.742e-02, 1.757e-02, -6.278e-02, 1.034e-01, -1.645e-01, 1.856e-03, -1.831e-02) * s0_0_2;
	r0 += M4(-4.408e-02, -4.487e-02, 8.318e-02, 6.478e-02, 1.943e-01, -8.178e-02, -3.919e-02, -4.851e-02, -1.455e-01, 1.338e-01, -6.790e-02, -1.180e-01, -2.464e-01, 8.878e-02, -3.523e-02, -5.293e-01) * s0_1_0;
	r1 += M4(-5.428e-02, 4.272e-02, -3.974e-02, 1.028e-01, -3.431e-01, -2.532e-02, -4.859e-03, 1.632e-01, 2.668e-01, -2.316e-02, 6.689e-02, -2.667e-01, -3.255e-02, -2.533e-02, -2.096e-02, -1.470e-01) * s0_1_0;
	r2 += M4(5.077e-02, -1.229e-01, 7.813e-02, 3.384e-02, -4.060e-02, 1.605e-01, -6.963e-02, 2.633e-01, -4.216e-02, 1.108e-01, 9.539e-04, -1.273e-01, 8.206e-02, -1.309e-01, -9.268e-02, -1.123e-01) * s0_1_0;
	r0 += M4(4.709e-02, -1.500e-01, -1.125e-01, 8.571e-02, -3.366e-01, 1.462e-01, 2.352e-01, -4.501e-01, 6.536e-01, 1.942e-01, -1.297e-01, -7.611e-02, -3.963e-01, 1.210e-01, -6.458e-02, 5.238e-01) * s0_1_1;
	r1 += M4(-4.521e-01, 1.393e-01, -5.750e-02, 8.540e-02, 2.038e-01, 1.290e-01, -7.638e-02, -3.747e-01, -8.129e-03, 4.302e-01, -3.679e-02, 6.314e-01, 2.677e-01, 1.302e-01, 1.546e-01, 3.242e-01) * s0_1_1;
	r2 += M4(1.372e-01, -2.607e-01, 3.215e-02, 1.499e-01, 1.189e-01, 1.554e-01, 7.634e-02, 1.770e-01, 2.496e-01, 1.936e-02, -2.724e-01, -4.369e-01, -2.294e-01, 4.940e-01, 3.174e-01, 8.667e-02) * s0_1_1;
	r0 += M4(-8.617e-02, -1.710e-01, -2.238e-01, 6.351e-02, 8.707e-02, 2.438e-01, -2.496e-01, 1.194e-01, 3.968e-01, -1.088e-03, 3.740e-01, -1.300e-01, 1.547e-01, 1.651e-01, -1.079e-01, 1.038e-01) * s0_1_2;
	r1 += M4(-5.294e-01, 7.205e-02, -7.967e-02, -2.212e-01, 1.644e-01, -5.300e-02, -1.530e-01, 1.199e-01, 1.636e-01, 3.452e-02, 2.331e-01, 6.319e-01, 1.429e-02, -3.125e-02, -1.235e-01, -1.469e-01) * s0_1_2;
	r2 += M4(2.365e-01, 2.434e-01, 3.484e-02, 4.500e-01, 2.249e-01, -2.834e-01, -2.934e-01, 2.447e-01, -2.686e-01, -3.496e-02, 8.400e-02, -8.742e-01, -3.674e-02, -3.281e-01, -9.007e-02, 5.614e-02) * s0_1_2;
	r0 += M4(1.528e-01, 2.238e-02, -1.480e-01, -5.590e-02, 1.769e-01, -1.180e-01, -9.527e-02, 3.585e-01, -2.319e-01, 5.499e-02, 1.917e-01, -4.604e-01, -1.920e-02, 9.105e-02, 1.323e-01, -3.990e-02) * s0_2_0;
	r1 += M4(-1.690e-02, 7.048e-02, -3.951e-03, -5.232e-02, 1.558e-01, 7.835e-02, -2.811e-02, 3.460e-01, -1.131e-01, -7.073e-02, -2.335e-02, -8.423e-02, -8.375e-02, -4.176e-02, 3.874e-02, -1.746e-03) * s0_2_0;
	r2 += M4(-2.820e-02, 4.666e-02, -4.135e-02, 1.182e-02, 1.123e-01, 8.015e-02, 3.059e-03, -1.513e-02, -4.309e-02, -7.020e-02, -5.348e-03, -5.595e-02, -6.071e-03, -2.758e-01, -3.583e-02, -6.506e-02) * s0_2_0;
	r0 += M4(4.031e-01, -1.160e-01, -5.455e-02, -2.408e-01, -6.421e-02, -3.369e-01, 1.515e-01, -8.614e-02, -3.186e-01, 2.875e-01, 5.913e-02, -8.052e-01, -1.323e-01, -5.582e-02, -7.472e-02, 1.590e-02) * s0_2_1;
	r1 += M4(-7.326e-02, 9.759e-02, 3.850e-02, -3.421e-01, -2.178e-01, 8.927e-02, -2.618e-02, -1.527e-01, 1.223e-02, 6.135e-03, 5.965e-02, 2.825e-01, -2.380e-02, -4.608e-02, 8.715e-02, -2.378e-02) * s0_2_1;
	r2 += M4(3.966e-02, -1.790e-01, -5.375e-03, 2.185e-01, 3.048e-02, -2.123e-01, -5.924e-02, 1.377e-01, 2.967e-02, 1.360e-01, -1.885e-01, 3.976e-02, 2.967e-02, -2.039e-01, -3.137e-02, -1.597e-02) * s0_2_1;
	r0 += M4(7.642e-02, -5.386e-02, -2.580e-01, -3.056e-02, -4.682e-01, -1.397e-01, 4.854e-01, 7.506e-02, 3.356e-02, 4.422e-02, -1.975e-01, -1.803e-01, -2.258e-02, 7.025e-02, 5.694e-02, 2.142e-02) * s0_2_2;
	r1 += M4(-1.341e-01, 6.897e-02, -1.642e-01, -2.117e-02, -5.589e-01, 1.483e-02, 1.670e-01, -5.410e-01, 4.290e-01, -1.233e-01, 7.676e-02, 3.641e-02, -3.796e-02, -5.925e-03, 3.637e-02, -8.079e-02) * s0_2_2;
	r2 += M4(2.781e-02, -6.038e-02, -5.058e-02, 1.880e-01, 8.186e-03, -5.522e-02, 1.558e-01, 3.478e-01, -9.728e-02, 3.031e-01, -3.784e-02, -2.924e-01, -1.053e-02, -8.510e-04, 7.862e-02, -1.574e-02) * s0_2_2;
	r0 += V4(-5.476e-02, 1.584e-02, -1.279e-02, -2.738e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.246e-02, -2.097e-02, 3.247e-02, -2.286e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.297e-02, 9.459e-03, -4.096e-04, -3.904e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12_DS] -conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.422e-03, 1.223e-01, 7.969e-02, -9.743e-02, 1.542e-02, -1.610e-01, 2.763e-02, -1.941e-02, 1.787e-02, 1.392e-01, -1.412e-01, -1.940e-02, 6.315e-03, -1.165e-01, -4.123e-02, 3.108e-02) * s0_0_0;
	r1 += M4(3.235e-02, 5.296e-02, -1.484e-01, 8.098e-02, 5.744e-02, -1.811e-01, 1.014e-01, 8.921e-02, 4.334e-02, 8.174e-03, -1.675e-01, -6.110e-03, -3.212e-02, -1.291e-02, -6.518e-02, -1.239e-02) * s0_0_0;
	r2 += M4(-2.057e-02, 6.752e-02, -7.494e-03, -1.056e-01, 2.191e-02, 1.575e-01, -4.460e-02, 7.006e-02, 2.351e-02, -5.529e-02, -7.637e-02, 2.839e-01, -6.400e-03, -1.048e-01, -4.724e-03, -3.830e-02) * s0_0_0;
	r0 += M4(-1.199e-01, 1.866e-01, 3.369e-02, -9.271e-02, 3.019e-02, -6.846e-02, -6.934e-02, 9.550e-02, -7.225e-02, 2.783e-01, -2.016e-01, -5.223e-02, 1.237e-01, -2.822e-01, -7.712e-02, 1.538e-01) * s0_0_1;
	r1 += M4(6.991e-02, -1.679e-01, 1.862e-01, 2.601e-01, 5.333e-02, -4.994e-02, 1.351e-01, 2.250e-01, -1.079e-01, -2.313e-02, -6.113e-01, -4.014e-01, 2.541e-02, 3.879e-02, 1.298e-02, 8.708e-03) * s0_0_1;
	r2 += M4(6.156e-02, 2.964e-01, 1.345e-01, -1.786e-01, 7.379e-02, 6.431e-02, 1.110e-01, 4.991e-02, -1.303e-01, 2.438e-01, -5.919e-02, -1.734e-01, 1.646e-01, -2.364e-01, 1.160e-01, -4.417e-02) * s0_0_1;
	r0 += M4(2.081e-02, 7.549e-02, 5.784e-03, -1.094e-01, -6.398e-03, -1.191e-01, 1.907e-01, -2.327e-02, -7.563e-02, -8.513e-02, 3.974e-02, -6.498e-03, 1.040e-01, -7.256e-01, 2.045e-03, 1.831e-01) * s0_0_2;
	r1 += M4(2.056e-02, -8.896e-02, 3.926e-02, 8.300e-02, 2.478e-02, 2.017e-02, -7.484e-02, 1.099e-02, 1.653e-02, -3.298e-02, 7.545e-03, 3.252e-02, -9.303e-03, 1.974e-01, 2.803e-01, 9.933e-02) * s0_0_2;
	r2 += M4(-5.318e-02, -2.067e-01, -1.519e-01, -1.265e-01, -2.064e-02, -9.685e-02, -1.411e-01, 1.015e-01, 1.529e-01, 2.332e-01, 1.559e-01, 4.722e-03, 1.907e-01, 1.967e-02, 1.337e-01, 9.547e-02) * s0_0_2;
	r0 += M4(2.474e-02, -3.128e-02, 1.159e-01, -1.333e-01, 1.883e-02, -2.249e-01, 1.746e-01, 1.035e-03, 1.497e-02, 1.458e-01, -7.539e-03, -5.580e-02, -4.621e-02, -1.084e-01, 5.331e-03, -6.734e-03) * s0_1_0;
	r1 += M4(2.054e-01, 7.414e-02, -1.346e-01, 3.224e-02, -1.121e-01, -1.577e-01, -1.772e-01, -3.174e-01, 1.787e-01, 3.282e-02, -3.298e-02, 8.323e-02, -1.433e-02, 2.766e-02, -5.183e-02, -4.781e-02) * s0_1_0;
	r2 += M4(-7.866e-02, -2.455e-01, -8.255e-02, -3.945e-01, 2.881e-02, -2.612e-01, 7.341e-02, -2.418e-01, -3.835e-03, -1.220e-01, -1.122e-01, 1.792e-01, -1.538e-03, -1.154e-01, 5.017e-02, -1.346e-01) * s0_1_0;
	r0 += M4(7.466e-03, 1.826e-01, 1.521e-01, 5.087e-02, 1.055e-01, -1.459e-01, 3.375e-01, -1.780e-01, -1.051e-01, 1.142e-01, -9.240e-02, -3.039e-01, -3.283e-02, -3.682e-01, -5.303e-02, -1.558e-01) * s0_1_1;
	r1 += M4(-2.203e-01, -8.764e-02, -7.264e-02, -3.503e-01, 6.247e-02, 4.181e-02, 2.388e-01, -2.232e-01, 1.450e-01, 3.806e-01, -1.523e-01, 4.925e-01, -5.483e-02, 2.163e-01, -2.715e-02, 1.762e-01) * s0_1_1;
	r2 += M4(1.712e-01, 4.365e-01, 3.741e-01, -2.788e-01, 2.823e-02, -2.484e-02, -2.099e-02, 1.539e-01, 7.690e-02, 1.228e-01, 3.720e-02, 3.330e-01, 5.818e-02, -2.587e-01, 1.155e-01, -3.213e-01) * s0_1_1;
	r0 += M4(1.330e-02, 1.827e-01, 5.514e-01, 8.719e-02, 5.687e-02, 1.221e-01, 2.700e-01, -4.832e-02, 7.051e-02, -7.545e-02, -3.295e-01, -2.217e-01, 8.867e-02, -3.115e-01, 3.168e-02, -4.254e-02) * s0_1_2;
	r1 += M4(5.742e-02, 1.246e-01, -1.315e-01, -3.120e-01, -5.505e-02, -5.441e-03, -7.712e-02, 7.792e-02, 3.717e-02, 3.884e-02, 2.168e-01, -1.300e-02, -7.808e-02, 3.204e-01, 3.858e-01, -7.060e-02) * s0_1_2;
	r2 += M4(7.725e-03, 5.844e-03, -8.228e-02, -8.390e-01, 3.071e-03, 4.300e-02, -8.130e-02, 4.267e-01, 1.977e-01, 1.273e-01, 6.133e-02, 2.893e-01, 1.431e-01, 6.459e-02, 1.345e-01, -1.799e-01) * s0_1_2;
	r0 += M4(-2.084e-02, 7.040e-02, 2.522e-01, -6.320e-02, -4.956e-02, -4.681e-02, 2.186e-02, -3.952e-02, 5.002e-02, 1.620e-02, 3.857e-02, -4.594e-02, -2.827e-05, -1.023e-01, 3.719e-02, 1.825e-02) * s0_2_0;
	r1 += M4(9.811e-03, 1.026e-01, -9.261e-02, 1.350e-01, 2.741e-01, 5.335e-02, 6.522e-02, 1.537e-01, -1.415e-02, -1.305e-02, 2.692e-02, 1.822e-01, -1.650e-02, 1.377e-02, 1.129e-02, -5.386e-02) * s0_2_0;
	r2 += M4(-8.667e-02, -1.029e-01, 2.759e-02, -5.002e-01, 2.993e-02, -1.088e-01, -5.650e-02, -1.136e-02, -4.538e-02, -2.388e-02, -3.159e-02, 1.912e-01, 3.153e-03, -3.728e-02, 1.183e-02, 2.804e-02) * s0_2_0;
	r0 += M4(-5.377e-02, -7.541e-02, -2.208e-01, -9.826e-02, -9.542e-04, -8.780e-03, 1.394e-01, -8.139e-02, -5.251e-02, 1.768e-02, 9.240e-02, -9.356e-02, 2.013e-02, -1.544e-01, 4.898e-03, 2.059e-02) * s0_2_1;
	r1 += M4(3.141e-01, 1.295e-01, -3.381e-03, 5.994e-02, -3.656e-02, 2.624e-02, 2.553e-02, 2.410e-01, 1.446e-01, 4.131e-02, -8.033e-02, -1.839e-01, -1.169e-03, 2.678e-02, 7.110e-04, -7.056e-02) * s0_2_1;
	r2 += M4(1.173e-01, 4.218e-02, -2.353e-02, -3.851e-01, -6.863e-02, -2.206e-04, 1.615e-02, 2.137e-01, -4.067e-02, -4.606e-02, 3.613e-02, -7.843e-02, -1.524e-02, -4.486e-02, 2.282e-02, -2.057e-01) * s0_2_1;
	r0 += M4(-3.187e-02, 1.183e-01, 1.255e-01, -5.674e-02, -3.671e-03, -5.049e-02, -6.165e-02, -7.819e-02, 5.541e-05, -9.593e-02, -1.584e-01, -1.156e-01, -2.129e-02, -1.167e-01, -7.326e-02, -1.908e-02) * s0_2_2;
	r1 += M4(-2.816e-02, 1.302e-01, 3.192e-02, -1.529e-01, 6.095e-02, -2.992e-02, -3.222e-02, 5.953e-02, 5.280e-02, 1.135e-01, 1.361e-01, 2.280e-01, -1.175e-01, 1.470e-01, 9.926e-02, -1.331e-01) * s0_2_2;
	r2 += M4(3.543e-02, 7.402e-02, -8.824e-03, -4.567e-01, -2.154e-02, -2.705e-02, -4.921e-02, 8.811e-02, 1.087e-02, 7.781e-03, 6.717e-02, -1.188e-01, 1.932e-02, 3.067e-02, -1.408e-02, -2.036e-01) * s0_2_2;
	r0 += M4(6.740e-02, 5.223e-02, 9.936e-02, -1.401e-02, 1.426e-03, 7.187e-02, -4.451e-02, 2.894e-03, 5.134e-02, 1.621e-01, 8.431e-02, 2.354e-02, -4.832e-02, 1.404e-01, -4.358e-01, -2.013e-02) * s1_0_0;
	r1 += M4(-5.020e-02, 1.792e-02, -7.484e-02, -1.374e-01, -2.109e-02, -6.958e-02, -6.288e-02, -4.398e-02, 1.124e-02, -4.090e-02, -9.165e-02, -7.052e-02, -5.049e-02, -3.163e-02, -1.807e-01, -8.580e-04) * s1_0_0;
	r2 += M4(4.261e-02, -3.371e-02, 1.663e-02, -2.823e-01, 2.568e-02, -3.675e-03, 5.443e-03, 1.824e-02, -2.192e-02, -4.812e-02, -8.147e-02, 5.797e-02, -1.143e-02, -1.320e-01, -5.723e-02, 3.682e-02) * s1_0_0;
	r0 += M4(6.321e-02, -1.453e-01, 1.365e-01, 8.409e-02, -6.979e-02, -1.538e-01, 1.742e-01, -1.227e-02, -2.135e-01, -1.525e-01, -2.732e-01, -8.149e-02, 1.480e-01, -9.237e-02, -3.858e-01, 2.291e-01) * s1_0_1;
	r1 += M4(-1.174e-01, 5.263e-02, -4.367e-02, -2.183e-01, 6.956e-05, -3.047e-02, 3.666e-02, -1.537e-02, 3.935e-02, -5.061e-02, -2.312e-01, -1.350e-01, -6.006e-02, 8.210e-02, -1.451e-01, -1.156e-01) * s1_0_1;
	r2 += M4(5.725e-02, 8.673e-02, 8.237e-02, -4.727e-01, -7.983e-02, -4.027e-02, -3.596e-02, -3.404e-02, -7.421e-02, -9.623e-02, 9.941e-03, 4.943e-03, 2.378e-01, 1.942e-01, 2.069e-01, -3.816e-02) * s1_0_1;
	r0 += M4(2.453e-02, -4.326e-02, 1.592e-01, 8.573e-02, -6.283e-03, -4.993e-02, -1.012e-01, 3.098e-02, -5.410e-03, -1.033e-01, -1.248e-01, -5.473e-02, 2.777e-02, 3.149e-02, -2.948e-01, 1.029e-02) * s1_0_2;
	r1 += M4(-9.965e-03, 2.985e-02, -2.390e-02, -5.542e-02, -1.520e-02, 5.647e-02, 6.451e-02, -7.692e-02, 2.574e-02, 1.239e-01, 1.362e-01, 2.529e-02, -1.996e-02, 1.157e-01, 7.977e-02, -1.696e-02) * s1_0_2;
	r2 += M4(-1.247e-02, 2.048e-02, -2.764e-02, -4.259e-01, -3.058e-03, 1.207e-02, 8.090e-02, -2.624e-02, -1.024e-02, -1.710e-02, 1.142e-02, -4.369e-02, 1.164e-01, 1.753e-01, 5.498e-02, 1.352e-01) * s1_0_2;
	r0 += M4(-7.991e-03, 1.856e-01, 8.605e-02, 3.836e-03, 9.356e-02, -3.904e-02, 6.834e-02, 5.818e-03, -1.748e-02, 2.559e-01, -4.489e-01, 3.845e-02, 6.533e-02, 7.140e-02, -2.666e-01, -4.383e-02) * s1_1_0;
	r1 += M4(1.411e-01, 1.489e-02, 1.387e-01, 9.448e-02, 5.127e-02, 7.542e-02, 6.575e-02, 1.467e-01, 7.224e-03, 9.099e-03, -5.706e-02, -1.163e-02, 5.997e-02, 5.422e-03, -2.278e-01, -7.467e-02) * s1_1_0;
	r2 += M4(1.028e-01, 1.842e-02, 7.345e-02, -2.052e-01, 3.230e-02, -8.601e-03, 3.837e-02, -6.960e-02, 3.144e-02, 6.327e-02, 1.587e-02, 1.255e-01, 2.471e-04, -2.133e-01, -1.040e-02, -1.264e-01) * s1_1_0;
	r0 += M4(4.296e-02, 7.702e-02, 1.404e-01, -3.530e-01, 3.083e-01, -1.000e+00, -2.147e-02, 5.409e-01, 4.573e-01, -6.301e-01, -8.470e-02, 2.824e-01, -1.499e-01, 1.654e-01, -9.077e-01, -1.174e-01) * s1_1_1;
	r1 += M4(2.645e-01, 2.674e-01, -2.819e-01, 4.176e-01, 3.948e-02, 1.504e-01, 2.153e-01, 1.040e-01, 1.710e-01, 4.362e-01, 5.025e-01, 6.338e-01, 1.625e-01, 9.615e-02, 2.997e-01, 6.074e-01) * s1_1_1;
	r2 += M4(7.415e-02, -1.088e-01, -2.348e-01, -2.229e-01, 4.133e-01, -6.735e-01, 2.671e-01, 3.286e-01, 9.295e-02, -7.011e-02, 4.674e-01, 5.020e-01, 4.247e-01, 5.983e-01, 5.483e-01, 2.430e-01) * s1_1_1;
	r0 += M4(1.336e-01, -1.305e-01, -3.622e-01, 6.214e-02, 6.752e-02, -9.250e-02, -3.924e-01, 9.181e-02, 7.576e-02, 4.149e-02, -1.463e-01, 1.695e-01, 4.432e-02, 2.244e-02, -3.814e-01, -2.112e-01) * s1_1_2;
	r1 += M4(-5.184e-02, -1.739e-01, 2.112e-01, -2.363e-02, -8.221e-03, -2.783e-01, -6.583e-02, 2.201e-02, -2.432e-03, -3.364e-01, -1.073e-01, 3.215e-01, 2.859e-03, 1.871e-01, 1.997e-01, 2.881e-01) * s1_1_2;
	r2 += M4(1.689e-01, 1.859e-01, 1.840e-01, -6.426e-01, -3.746e-02, 2.997e-01, 2.072e-01, -3.701e-01, -2.319e-01, -2.596e-01, -5.192e-02, -4.113e-01, 1.042e-01, 1.352e-01, -1.469e-01, 1.995e-01) * s1_1_2;
	r0 += M4(-1.664e-02, -1.225e-02, -3.306e-02, -2.705e-02, -6.541e-03, -1.623e-01, -1.344e-01, -8.552e-03, 4.122e-03, -1.480e-01, -1.217e-02, 3.847e-02, -1.922e-02, 1.057e-01, -9.356e-02, -1.335e-01) * s1_2_0;
	r1 += M4(1.766e-01, 5.231e-02, -9.859e-03, -1.708e-01, -8.379e-02, -3.649e-02, 6.535e-02, -4.786e-02, -6.161e-02, 2.845e-03, -1.090e-01, -3.174e-01, -1.122e-02, 1.281e-01, -1.193e-01, 3.058e-01) * s1_2_0;
	r2 += M4(-4.926e-04, 3.445e-02, -5.409e-02, -1.265e-01, -3.822e-03, -1.148e-01, 2.530e-02, -6.345e-02, 1.596e-03, -4.589e-02, 1.155e-01, -3.350e-01, -4.443e-02, -4.045e-02, -1.002e-02, -4.487e-02) * s1_2_0;
	r0 += M4(-6.665e-03, 1.116e-01, 5.636e-01, -1.889e-02, -1.686e-01, -1.961e-01, -3.895e-01, -8.210e-02, -8.935e-02, -2.202e-01, -6.314e-01, 5.660e-02, 5.706e-02, 4.510e-02, -3.370e-01, -2.761e-01) * s1_2_1;
	r1 += M4(-2.211e-02, 1.003e-01, -2.646e-01, -1.149e-01, -2.531e-01, -9.473e-02, 5.272e-02, -4.933e-01, -4.584e-01, 8.154e-02, 2.739e-01, -1.328e-01, 1.795e-01, 1.654e-01, 3.630e-02, -4.263e-02) * s1_2_1;
	r2 += M4(-5.735e-02, -2.863e-02, 1.556e-01, -5.684e-01, 9.157e-02, 9.449e-02, 1.816e-02, -1.478e-01, 1.518e-01, 1.831e-01, -1.398e-01, -1.046e-01, -6.067e-02, 1.599e-01, 2.194e-02, 4.282e-02) * s1_2_1;
	r0 += M4(5.326e-02, 4.795e-02, 9.901e-02, -2.592e-02, -2.812e-02, 6.812e-02, 3.538e-01, 1.440e-01, -3.260e-02, 3.115e-01, 3.696e-01, 1.358e-01, -6.360e-03, 8.563e-02, -4.044e-01, -2.714e-02) * s1_2_2;
	r1 += M4(6.972e-02, 1.753e-01, 1.694e-01, -2.608e-01, -2.885e-02, 2.511e-02, 5.251e-02, -1.678e-01, -6.794e-02, -2.787e-01, -2.746e-01, -3.255e-01, -2.413e-02, 3.047e-03, -9.694e-03, 5.832e-02) * s1_2_2;
	r2 += M4(9.060e-02, 9.611e-03, 1.116e-01, -5.318e-01, 2.797e-02, -8.262e-02, 1.053e-01, 2.232e-01, -1.065e-01, -5.188e-02, -9.681e-02, 3.801e-01, 4.047e-02, 4.636e-02, -7.444e-02, -2.462e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-5.723e-02, -1.413e-01, 3.506e-03, 4.310e-02, -1.410e-01, 8.694e-03, 4.017e-01, 4.155e-02, 1.236e-01, 4.256e-02, 3.115e-01, 4.070e-02, 3.360e-02, 2.816e-01, -1.450e-01, -5.751e-02) * s0_0_0;
	r1 += M4(-7.494e-03, 2.948e-02, -6.308e-02, -1.063e-01, -8.957e-02, 2.952e-02, -1.506e-02, -5.886e-02, -2.187e-02, -7.303e-03, 1.001e-01, -1.439e-01, -1.545e-03, -2.581e-02, 8.933e-02, 2.157e-01) * s0_0_0;
	r2 += M4(-2.648e-02, -6.896e-02, -9.135e-03, -6.203e-02, -3.759e-02, -1.006e-01, 1.085e-02, 1.989e-01, 5.217e-02, 1.353e-01, 9.737e-02, -2.843e-03, -2.100e-02, 4.544e-02, -5.337e-02, 1.033e-01) * s0_0_0;
	r0 += M4(1.268e-02, -7.820e-02, 1.790e-02, 1.168e-01, -2.510e-01, 3.250e-02, 2.843e-01, -2.422e-02, 2.568e-01, 3.857e-01, 2.832e-01, 2.436e-01, -1.169e-01, 1.428e-01, -1.936e-01, -1.634e-01) * s0_0_1;
	r1 += M4(3.368e-03, 3.475e-02, -7.931e-02, -1.450e-01, -7.812e-02, 9.382e-02, 2.372e-02, -1.972e-01, 6.257e-03, -3.325e-01, 2.774e-02, -1.003e-02, -4.995e-02, -6.017e-02, -8.914e-03, 5.845e-02) * s0_0_1;
	r2 += M4(7.692e-02, 1.346e-03, 1.145e-01, -1.777e-02, -6.613e-02, 1.276e-01, 5.290e-02, 1.763e-01, 8.259e-02, -6.056e-02, -1.012e-01, 1.569e-01, -1.597e-01, 7.869e-02, -1.510e-01, -7.633e-02) * s0_0_1;
	r0 += M4(-1.770e-02, -5.192e-02, -2.303e-02, 3.422e-02, -1.724e-01, 1.924e-02, 3.525e-01, -4.365e-02, -3.300e-02, 1.075e-01, 1.546e-01, 1.257e-02, 1.121e-02, -1.871e-02, 3.308e-02, -5.428e-02) * s0_0_2;
	r1 += M4(-2.534e-02, 1.210e-02, 9.151e-02, -5.785e-02, -1.018e-01, 7.657e-02, -2.772e-02, -3.099e-01, -5.161e-02, -7.139e-02, -2.112e-01, -1.916e-01, 6.650e-02, -7.045e-03, -9.374e-02, 9.408e-02) * s0_0_2;
	r2 += M4(2.368e-02, 1.479e-01, 5.238e-02, 6.172e-03, -4.969e-02, 7.647e-02, -2.527e-02, 5.332e-01, -1.146e-01, -1.226e-01, -1.100e-01, 1.569e-01, 3.376e-02, -1.012e-01, -1.285e-02, -1.234e-01) * s0_0_2;
	r0 += M4(-1.736e-02, -2.925e-01, 1.909e-02, 4.161e-02, -1.243e-01, 9.975e-02, 2.174e-01, -6.679e-02, -6.173e-02, 3.546e-01, 1.264e-01, -1.376e-01, 3.631e-03, 9.786e-02, -1.581e-01, -4.139e-02) * s0_1_0;
	r1 += M4(1.927e-03, 8.390e-03, -7.870e-02, -6.987e-02, -1.631e-01, 5.810e-02, -3.920e-02, -1.313e-01, -2.281e-01, 2.758e-02, 1.397e-01, 3.692e-01, 1.687e-03, -4.039e-02, 2.202e-03, -2.965e-02) * s0_1_0;
	r2 += M4(-2.293e-02, -1.755e-01, -2.679e-02, -4.115e-02, -8.046e-02, -3.504e-02, -1.018e-01, 1.804e-01, 1.145e-02, 1.013e-01, -7.438e-02, -1.853e-01, -2.738e-02, 2.032e-01, -1.316e-02, -1.924e-01) * s0_1_0;
	r0 += M4(2.822e-01, -3.511e-01, 2.233e-01, 3.563e-01, -1.688e-01, 1.770e-01, 1.997e-01, 6.716e-03, 1.169e-01, 1.000e+00, -1.031e-01, -1.189e-01, -6.167e-02, 6.015e-01, -3.263e-02, 8.569e-02) * s0_1_1;
	r1 += M4(-8.483e-02, 2.256e-01, 1.351e-01, -1.164e-01, -1.550e-01, 7.097e-02, 2.623e-02, -5.675e-01, -1.041e-01, -1.337e-01, -9.162e-02, -3.552e-01, 5.528e-02, -7.739e-02, 5.972e-02, -9.766e-02) * s0_1_1;
	r2 += M4(2.744e-01, 1.119e-01, 5.527e-01, -3.906e-01, -1.281e-02, -9.712e-02, 4.539e-02, 3.026e-01, -2.117e-02, -1.416e-01, -3.545e-01, 6.399e-02, -1.838e-01, 3.973e-02, -2.716e-01, 2.952e-01) * s0_1_1;
	r0 += M4(-5.522e-03, -1.698e-01, 3.352e-02, 5.560e-02, -1.022e-01, 1.965e-01, 3.894e-01, -3.769e-02, 1.724e-02, -9.598e-03, 1.102e-02, -4.340e-02, -4.602e-02, 1.796e-01, 1.862e-01, 2.083e-02) * s0_1_2;
	r1 += M4(-7.438e-02, 9.424e-03, 1.113e-01, 2.120e-02, -2.650e-01, -4.724e-02, -2.311e-02, -1.890e-01, 3.280e-02, -1.141e-01, -2.294e-01, 1.619e-01, 2.823e-02, 9.604e-02, -1.510e-01, -1.134e-01) * s0_1_2;
	r2 += M4(-1.795e-02, 1.416e-01, 4.314e-02, -2.909e-01, -2.373e-02, -1.578e-02, -8.178e-02, 5.176e-01, -2.378e-02, 1.393e-01, -8.833e-02, 3.916e-01, -2.449e-03, -1.296e-01, 1.141e-02, 2.066e-01) * s0_1_2;
	r0 += M4(1.262e-03, -4.657e-01, 1.831e-01, -1.278e-02, -5.457e-02, 6.212e-02, 1.545e-01, -1.568e-02, -7.715e-04, 7.835e-02, 8.076e-02, 8.041e-02, -9.031e-04, 2.246e-01, 1.084e-01, 8.804e-03) * s0_2_0;
	r1 += M4(9.216e-02, -2.141e-02, 5.042e-02, -7.976e-02, -1.087e-01, 4.900e-02, -8.112e-02, -1.843e-01, 2.024e-01, -1.385e-01, 8.889e-02, -1.254e-01, -8.164e-02, 4.228e-02, 1.893e-03, 6.548e-02) * s0_2_0;
	r2 += M4(-2.826e-02, -1.334e-01, 2.561e-02, 7.741e-02, -6.207e-02, -2.976e-02, -8.382e-02, 1.428e-01, 1.201e-02, 1.598e-01, 5.017e-02, 8.823e-02, 1.073e-02, 1.262e-01, 1.256e-02, -3.668e-02) * s0_2_0;
	r0 += M4(1.187e-01, -1.000e+00, 2.224e-01, -1.362e-01, -9.997e-02, 9.016e-02, 4.927e-02, 1.686e-02, 3.682e-02, 2.686e-01, 3.122e-01, -4.651e-02, 5.992e-02, 3.104e-01, 2.226e-02, 1.487e-01) * s0_2_1;
	r1 += M4(2.529e-01, 9.172e-02, 8.455e-02, 3.021e-01, -3.547e-01, -4.782e-02, -1.202e-01, -6.579e-01, 3.272e-01, -6.931e-02, 1.562e-02, -1.877e-01, -1.071e-01, -1.369e-01, 4.010e-02, -2.612e-01) * s0_2_1;
	r2 += M4(-3.199e-02, -3.318e-01, 1.552e-01, -3.037e-01, -3.316e-02, -2.883e-03, -1.171e-02, 1.199e-01, -6.692e-02, -2.181e-01, -9.344e-03, 1.236e-01, 2.121e-03, -2.926e-02, -7.999e-02, 1.784e-01) * s0_2_1;
	r0 += M4(3.616e-02, -2.651e-01, -3.269e-02, -8.744e-04, -4.089e-02, 9.586e-02, 3.429e-01, 2.040e-02, -2.984e-02, -7.715e-02, -5.992e-02, -1.392e-03, -1.339e-02, -2.653e-02, -2.821e-01, 8.386e-02) * s0_2_2;
	r1 += M4(1.484e-02, -1.772e-01, 1.212e-01, 5.613e-02, -9.243e-02, 2.323e-03, -2.338e-02, -8.733e-02, 1.176e-01, 7.932e-02, -1.998e-02, 1.106e-01, 5.228e-03, -7.489e-03, -1.519e-01, -2.724e-04) * s0_2_2;
	r2 += M4(-2.106e-02, 6.807e-02, 7.326e-02, -5.179e-01, 3.577e-02, 1.922e-02, 6.459e-02, 2.792e-01, 6.703e-02, 9.840e-02, 2.197e-02, 5.745e-03, -1.753e-03, 3.668e-03, -7.447e-03, -2.520e-02) * s0_2_2;
	r0 += V4(-2.093e-02, -1.508e-02, 1.871e-02, -2.984e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(5.939e-03, 9.683e-03, -1.087e-02, -2.021e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(4.071e-03, 1.729e-02, 5.548e-03, -3.845e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12_DS] -conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.840e-02, -2.825e-02, 2.767e-02, 2.298e-02, 1.986e-02, 1.632e-02, -9.103e-03, 2.034e-04, -1.443e-01, 1.767e-02, -6.508e-02, -3.649e-02, -3.374e-02, -1.439e-03, -2.940e-02, -1.454e-02) * s0_0_0;
	r1 += M4(-8.898e-02, -1.090e-02, 1.535e-02, 1.490e-02, -1.213e-02, -1.006e-01, 4.335e-03, 4.266e-02, 1.752e-01, 1.511e-01, 1.778e-01, -1.228e-02, 3.758e-02, 6.409e-02, -1.876e-02, -8.835e-02) * s0_0_0;
	r2 += M4(-1.012e-01, 1.372e-02, 1.858e-02, -7.834e-02, -2.313e-02, -3.632e-04, -9.481e-03, -1.590e-01, 2.144e-01, -2.405e-02, -5.734e-02, 7.055e-02, 1.161e-02, -1.548e-02, -1.175e-02, -2.793e-02) * s0_0_0;
	r0 += M4(-6.768e-02, 1.490e-02, -7.324e-02, 4.867e-02, -1.461e-01, -1.432e-02, -1.408e-01, 4.405e-04, 1.431e-01, -4.676e-02, 8.079e-02, -2.528e-02, -6.427e-02, -5.951e-03, -4.330e-02, -9.489e-03) * s0_0_1;
	r1 += M4(-2.124e-01, -2.808e-02, 1.710e-02, 3.875e-03, -1.539e-03, -1.448e-01, 5.648e-02, -1.143e-01, 3.546e-02, 1.014e-01, -2.919e-01, -4.352e-02, 6.348e-02, 9.668e-02, -1.042e-01, -8.108e-02) * s0_0_1;
	r2 += M4(1.280e-01, -4.504e-02, 1.304e-01, 1.391e-01, -9.755e-02, -3.631e-02, -4.145e-02, -7.681e-02, -2.571e-01, -4.996e-02, -2.391e-03, -9.231e-02, -3.597e-02, 7.269e-03, -2.892e-02, 2.146e-02) * s0_0_1;
	r0 += M4(8.555e-03, -2.082e-02, 1.160e-01, 2.790e-02, -1.401e-02, 3.580e-02, -7.201e-02, 1.788e-02, 4.029e-02, -3.526e-02, -2.374e-02, -1.265e-02, -1.013e-02, 4.463e-03, -6.121e-02, -2.259e-02) * s0_0_2;
	r1 += M4(-2.748e-02, 4.248e-02, -1.065e-01, -2.724e-01, -1.096e-02, -2.127e-02, -1.757e-01, -4.112e-01, 2.231e-02, -7.730e-03, 1.645e-01, -6.970e-02, -2.836e-02, 4.541e-03, 3.284e-02, 9.939e-02) * s0_0_2;
	r2 += M4(9.563e-03, 6.427e-02, 8.075e-02, 8.083e-02, 5.992e-02, -5.326e-03, 9.443e-03, 4.343e-02, 3.672e-02, 9.306e-03, -2.557e-02, -1.087e-02, -2.928e-02, -1.667e-02, -4.356e-02, -5.848e-02) * s0_0_2;
	r0 += M4(-4.937e-02, -9.009e-02, 3.590e-02, 3.491e-02, -3.514e-02, 4.718e-03, -5.727e-04, -5.215e-02, 9.546e-02, -7.798e-02, 2.077e-02, 5.335e-02, -5.824e-02, 1.140e-01, 5.604e-02, -3.512e-02) * s0_1_0;
	r1 += M4(1.539e-01, 2.952e-01, -1.795e-02, -7.392e-02, 1.193e-02, -7.144e-02, 1.940e-03, 6.449e-02, -2.454e-01, -2.307e-01, 9.025e-02, 1.022e-02, -9.352e-02, -3.055e-01, 6.004e-02, 1.048e-01) * s0_1_0;
	r2 += M4(-2.686e-01, 5.095e-02, 1.591e-01, -5.145e-02, -3.503e-01, 6.927e-03, -1.519e-01, 4.964e-02, 1.823e-01, -4.523e-02, 7.068e-02, -1.189e-01, 6.432e-02, 1.653e-02, -1.208e-01, 7.298e-02) * s0_1_0;
	r0 += M4(3.769e-01, 5.501e-02, 6.096e-01, 3.575e-03, 1.899e-01, -3.311e-01, -3.408e-01, -1.241e-01, 6.625e-02, 8.014e-02, -2.861e-02, -4.476e-03, 8.179e-02, -3.972e-01, -5.657e-02, -9.294e-02) * s0_1_1;
	r1 += M4(7.843e-01, 8.266e-01, 9.219e-03, -1.538e-01, 7.883e-02, -1.000e+00, 1.763e-01, -1.444e-01, -1.859e-01, -3.704e-01, -3.118e-01, -7.834e-02, -2.361e-01, -7.161e-01, -3.733e-02, -3.445e-01) * s0_1_1;
	r2 += M4(3.984e-02, 8.864e-02, 2.646e-01, 5.715e-01, -9.885e-01, -4.860e-01, -5.017e-01, -1.000e+00, -3.838e-01, 1.415e-01, -2.347e-02, 5.238e-02, -4.658e-01, -3.514e-01, -2.475e-01, -5.159e-01) * s0_1_1;
	r0 += M4(5.838e-02, 2.753e-01, 1.567e-01, 1.152e-01, -1.360e-01, -8.337e-02, -6.491e-02, 2.262e-03, -5.814e-02, 2.143e-02, -5.826e-02, -2.577e-03, 6.527e-03, -9.544e-02, -1.087e-02, -3.700e-02) * s0_1_2;
	r1 += M4(5.958e-02, 3.991e-01, -4.889e-01, 1.479e-02, 1.900e-02, -9.499e-02, -9.713e-01, -2.996e-01, -2.685e-02, 5.338e-04, 1.715e-01, 2.797e-02, 3.110e-02, -2.087e-01, -3.294e-01, 1.137e-01) * s0_1_2;
	r2 += M4(-2.544e-01, 1.412e-01, 1.018e-01, -2.824e-01, 3.881e-02, -2.384e-01, 6.062e-02, 7.890e-02, 2.065e-01, -5.760e-02, 1.606e-02, 3.829e-02, 4.551e-02, -8.543e-03, -4.197e-02, 8.558e-02) * s0_1_2;
	r0 += M4(7.905e-03, -7.792e-02, 2.177e-02, 9.232e-02, -4.582e-02, 6.240e-02, 4.203e-03, -1.253e-01, 3.058e-02, 1.698e-03, 1.597e-03, 1.625e-02, -1.560e-03, 1.154e-01, -2.249e-02, 1.197e-04) * s0_2_0;
	r1 += M4(1.460e-01, -5.260e-02, 8.957e-02, 6.832e-03, -1.941e-01, 9.351e-02, 1.748e-04, 2.227e-02, 8.276e-02, 3.550e-02, -2.629e-02, -6.598e-04, -1.784e-01, 1.962e-02, 1.358e-02, -3.931e-02) * s0_2_0;
	r2 += M4(-9.611e-02, 5.946e-02, 7.485e-02, 1.235e-01, -3.907e-02, -4.807e-03, -5.102e-02, 4.678e-02, -1.970e-02, -1.927e-03, -2.673e-02, 5.399e-02, -3.957e-02, 9.189e-03, 3.887e-02, 7.655e-03) * s0_2_0;
	r0 += M4(-4.776e-02, -1.965e-01, -2.802e-02, 6.670e-01, -4.216e-02, -4.785e-01, 4.029e-02, -6.523e-01, -5.463e-02, 3.471e-03, 3.375e-03, -5.667e-02, -6.212e-02, -2.547e-01, 2.820e-02, 7.170e-02) * s0_2_1;
	r1 += M4(1.186e-01, -1.626e-01, -2.021e-01, 4.467e-02, -1.000e+00, 1.286e-01, 1.128e-01, -9.951e-03, 2.153e-01, 1.952e-01, 3.937e-02, 1.222e-02, -4.730e-01, -4.790e-02, 7.845e-02, -8.960e-02) * s0_2_1;
	r2 += M4(-2.312e-01, 4.085e-01, 5.230e-01, -3.936e-01, -1.175e-01, -2.647e-01, -1.921e-01, 1.630e-01, -1.940e-03, -5.539e-02, -4.978e-02, 9.938e-03, 3.568e-02, 1.641e-01, 2.428e-01, 4.785e-02) * s0_2_1;
	r0 += M4(3.457e-02, -2.572e-01, -9.239e-03, -9.917e-03, -4.927e-02, -1.493e-01, 7.210e-03, 5.688e-02, 7.066e-03, -1.392e-01, -2.807e-03, -4.236e-02, 2.262e-02, 1.743e-01, -2.305e-02, 9.709e-03) * s0_2_2;
	r1 += M4(1.719e-01, -7.197e-02, -1.181e-01, -1.148e-01, -4.318e-02, 1.301e-01, -1.523e-01, 4.210e-02, -6.621e-02, 1.041e-02, -1.396e-01, -4.291e-02, 1.174e-02, 2.109e-02, -2.443e-01, 5.146e-02) * s0_2_2;
	r2 += M4(-2.642e-02, 5.392e-02, 5.461e-04, 2.686e-01, 2.383e-02, 1.185e-02, 2.193e-02, -1.412e-01, -4.616e-02, -5.219e-02, -3.527e-02, 2.335e-02, -2.013e-02, -7.641e-03, -2.227e-02, -7.651e-02) * s0_2_2;
	r0 += M4(-4.040e-02, 1.252e-03, -4.643e-02, -5.416e-03, 3.185e-02, 4.783e-03, -6.080e-02, 1.836e-02, -1.400e-02, 4.808e-03, -1.843e-02, -2.102e-03, -5.683e-03, 1.819e-02, -2.361e-02, 2.284e-02) * s1_0_0;
	r1 += M4(1.202e-01, 1.158e-01, -2.229e-02, 3.342e-03, -3.539e-02, -2.291e-01, -1.266e-01, 2.915e-02, 5.901e-02, -5.748e-02, 6.317e-02, 4.930e-02, -3.313e-02, 2.007e-01, -4.093e-02, 3.561e-02) * s1_0_0;
	r2 += M4(1.258e-01, -5.092e-02, 3.287e-02, -3.935e-02, -1.068e-01, -1.570e-02, 6.469e-02, -3.560e-02, 7.156e-02, 1.131e-02, -1.825e-02, 3.591e-02, -1.449e-01, 9.782e-02, 3.455e-02, 9.206e-02) * s1_0_0;
	r0 += M4(-2.191e-01, 1.714e-01, 1.362e-01, 8.909e-02, -6.762e-02, -2.241e-02, -7.780e-02, 2.581e-02, -3.639e-02, 4.646e-03, -5.993e-02, -2.331e-02, 2.033e-02, -2.600e-01, 8.931e-02, -7.780e-02) * s1_0_1;
	r1 += M4(4.687e-02, 1.958e-01, -1.818e-02, -1.665e-01, 4.587e-02, -4.814e-02, 3.288e-02, -8.640e-02, 6.275e-02, -7.008e-02, -4.762e-02, -1.632e-03, 6.111e-03, -2.399e-03, 7.954e-02, -2.368e-02) * s1_0_1;
	r2 += M4(-3.654e-01, -1.849e-01, -5.215e-01, 1.144e-01, 2.576e-01, -5.280e-03, 4.162e-02, -1.475e-01, -1.930e-01, -1.163e-02, 2.082e-02, -2.949e-02, 2.679e-02, -1.392e-01, -1.890e-01, -5.813e-01) * s1_0_1;
	r0 += M4(-8.298e-02, -5.508e-02, -2.607e-01, -6.665e-02, -7.495e-02, 1.050e-01, -6.247e-03, 1.039e-02, 2.459e-02, -8.562e-02, -3.539e-02, -2.480e-02, -5.051e-02, 1.043e-01, 7.757e-02, 7.299e-02) * s1_0_2;
	r1 += M4(-7.690e-02, 6.692e-02, -2.078e-02, 2.317e-02, -1.050e-02, 6.642e-03, 1.191e-02, 9.396e-02, 5.536e-02, -3.628e-02, -2.281e-02, -2.085e-01, 1.350e-01, 2.509e-01, -1.989e-01, 9.692e-02) * s1_0_2;
	r2 += M4(8.295e-02, -2.234e-01, -4.193e-02, 8.732e-02, -6.137e-02, -1.608e-02, 3.841e-02, 2.440e-02, -5.158e-02, -3.389e-02, -2.629e-02, -1.007e-01, -9.172e-02, 3.008e-02, 6.569e-02, -1.814e-02) * s1_0_2;
	r0 += M4(-1.364e-03, 6.429e-02, -7.750e-03, -5.482e-03, -1.703e-02, 1.192e-02, 5.212e-02, -9.950e-02, -1.898e-02, -1.100e-01, -1.581e-01, 2.813e-02, -2.877e-02, 1.065e-01, 4.256e-02, -9.606e-02) * s1_1_0;
	r1 += M4(2.885e-02, -4.259e-02, 8.862e-02, 4.860e-03, 1.058e-01, 5.925e-02, -1.144e-01, 1.078e-01, 2.607e-02, -8.886e-02, 2.657e-02, -4.524e-02, -1.400e-03, -4.240e-02, 7.996e-03, 1.166e-02) * s1_1_0;
	r2 += M4(7.680e-02, -3.863e-02, -8.336e-02, 1.106e-02, -8.927e-02, -5.090e-02, -1.978e-01, 1.529e-01, 6.838e-02, -1.082e-01, 4.644e-02, -4.617e-02, 2.074e-02, 5.138e-02, 1.167e-01, -7.886e-02) * s1_1_0;
	r0 += M4(1.008e-02, -8.742e-02, -1.426e-01, -2.697e-01, -7.680e-02, 1.892e-01, 2.491e-02, 2.188e-01, -6.724e-02, 1.596e-01, -2.170e-01, 1.259e-02, -3.750e-02, -1.259e-01, -1.284e-01, 4.228e-01) * s1_1_1;
	r1 += M4(-3.669e-01, -2.639e-01, -3.910e-02, -3.079e-02, -6.377e-02, 1.002e-01, 3.657e-01, -4.909e-02, -1.478e-01, -5.303e-01, -2.998e-01, 3.177e-02, -1.135e-01, -3.033e-01, -7.451e-02, 4.181e-02) * s1_1_1;
	r2 += M4(-3.198e-02, 1.568e-01, 2.783e-01, -1.399e-01, 6.176e-01, -1.049e-01, 3.677e-01, 1.475e-01, -1.000e+00, -1.965e-02, -1.714e-01, -2.089e-01, -1.342e-01, 3.838e-01, 3.557e-01, -1.589e-01) * s1_1_1;
	r0 += M4(1.875e-02, -1.145e-01, 1.090e-01, -1.439e-01, -3.947e-02, 1.014e-01, 1.651e-02, 2.570e-02, -3.176e-03, -3.623e-02, -2.223e-02, -9.618e-03, -6.323e-02, -2.153e-01, -9.158e-02, -2.751e-02) * s1_1_2;
	r1 += M4(-7.376e-02, -2.393e-02, -1.607e-01, 7.745e-03, -2.099e-02, -4.708e-02, -3.628e-02, 1.291e-01, -8.911e-02, -1.577e-01, -3.278e-01, -7.816e-02, 6.256e-02, -2.376e-01, 1.437e-01, -4.330e-02) * s1_1_2;
	r2 += M4(-3.880e-02, 6.850e-02, -7.237e-02, 1.204e-01, -8.806e-02, -1.706e-02, -1.108e-02, -7.397e-02, -2.174e-02, 1.979e-02, 2.935e-03, 1.545e-01, 5.637e-02, -5.069e-02, -2.812e-02, 1.538e-02) * s1_1_2;
	r0 += M4(-1.708e-02, 4.114e-02, -1.104e-02, -8.688e-03, 6.387e-03, 2.950e-02, -2.141e-02, 2.062e-02, 7.913e-03, -1.169e-01, -3.212e-03, -4.332e-02, -3.851e-02, 3.120e-02, -7.429e-03, 4.407e-02) * s1_2_0;
	r1 += M4(-2.339e-02, 8.805e-04, 1.486e-02, -4.294e-03, -2.521e-01, -5.277e-02, -4.853e-02, -4.986e-02, -1.595e-01, 3.814e-02, 1.009e-01, -1.304e-03, 1.535e-01, 6.142e-03, -6.966e-03, 3.474e-03) * s1_2_0;
	r2 += M4(1.993e-02, -1.194e-02, -1.028e-02, -3.507e-02, -1.241e-01, 3.371e-02, 7.593e-02, -1.022e-01, 5.822e-02, -8.762e-02, -6.807e-02, -9.203e-04, 6.714e-02, -5.326e-03, -3.147e-02, -3.657e-02) * s1_2_0;
	r0 += M4(1.700e-02, -5.467e-02, 2.076e-05, -1.239e-01, -1.311e-02, 2.816e-02, -2.550e-02, 1.651e-01, 2.271e-02, -1.194e-02, -1.181e-02, -2.062e-01, 2.087e-02, 1.831e-02, 8.929e-03, -1.739e-01) * s1_2_1;
	r1 += M4(1.003e-01, 3.278e-02, -5.389e-02, 1.275e-02, -1.407e-01, -1.646e-01, 4.339e-02, -6.132e-02, -2.038e-01, 1.704e-01, -2.996e-02, 6.517e-03, 8.695e-02, 1.746e-01, 1.070e-01, -2.222e-02) * s1_2_1;
	r2 += M4(6.397e-04, -8.032e-02, -1.189e-01, 4.876e-02, 1.929e-01, 4.555e-02, 1.284e-01, -5.605e-02, -8.880e-02, -1.895e-01, -8.916e-02, 1.368e-01, -1.803e-02, -1.440e-01, -1.362e-01, 9.557e-02) * s1_2_1;
	r0 += M4(9.300e-03, 9.037e-02, 1.627e-03, 6.940e-02, -3.077e-03, 5.901e-02, -9.915e-03, -1.254e-02, -1.294e-02, -9.517e-03, -1.908e-02, -3.362e-02, -1.277e-02, 7.287e-02, 1.134e-02, -4.601e-02) * s1_2_2;
	r1 += M4(2.225e-02, -5.060e-02, -2.480e-02, -1.691e-02, -3.452e-02, -3.967e-02, -7.673e-02, -4.777e-03, -1.194e-01, 3.669e-02, -6.523e-02, 2.137e-02, -3.768e-02, 2.587e-03, -6.277e-04, 1.917e-02) * s1_2_2;
	r2 += M4(2.942e-02, 3.435e-02, 3.126e-02, -3.188e-02, -2.962e-02, 1.900e-02, 5.042e-03, 3.756e-02, 8.844e-04, -4.302e-02, -5.264e-02, -9.678e-02, 6.339e-02, -2.531e-02, -4.187e-02, -6.610e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-6.749e-02, -1.235e-02, -1.234e-01, 1.060e-02, 1.293e-03, 2.216e-02, 3.502e-02, -1.632e-03, 1.470e-01, 3.203e-02, 1.355e-01, -1.875e-02, -5.726e-02, -2.361e-02, 1.497e-02, 1.390e-02) * s0_0_0;
	r1 += M4(6.206e-02, 5.030e-02, 3.204e-02, 1.186e-01, 4.228e-02, 3.741e-02, 2.352e-02, 1.469e-02, -4.065e-02, -1.051e-01, -1.219e-02, -7.369e-02, -3.555e-02, -1.214e-01, -3.358e-02, 1.091e-02) * s0_0_0;
	r2 += M4(1.360e-01, -6.468e-02, -2.264e-02, 5.003e-02, 5.252e-02, 7.050e-03, -2.408e-02, -2.325e-02, -1.104e-01, 6.860e-02, 2.086e-02, 2.813e-02, -1.386e-01, -1.439e-03, 1.935e-02, -1.154e-01) * s0_0_0;
	r0 += M4(9.546e-02, -1.413e-02, 1.455e-01, -3.967e-02, -2.988e-02, -5.384e-02, -3.689e-02, 2.440e-02, 8.387e-02, 5.261e-02, -5.855e-03, 1.803e-02, 8.419e-02, -5.988e-02, -9.974e-02, 1.885e-02) * s0_0_1;
	r1 += M4(2.202e-01, 7.478e-03, -1.812e-01, -3.603e-01, 5.144e-02, 6.094e-02, 2.205e-02, -2.789e-02, -1.779e-01, -1.100e-01, 1.414e-01, 3.531e-01, -1.144e-01, -1.978e-01, 1.909e-01, -2.975e-02) * s0_0_1;
	r2 += M4(-1.284e-01, 3.308e-02, -4.171e-02, -1.720e-01, -1.905e-01, 5.459e-03, 4.578e-02, 3.970e-02, 1.297e-01, 1.472e-02, -2.008e-02, 2.215e-02, 2.580e-01, 1.894e-02, 1.056e-02, -5.434e-02) * s0_0_1;
	r0 += M4(1.334e-02, 5.638e-02, -5.212e-02, -9.605e-04, -2.055e-02, 2.882e-03, -7.288e-03, -2.239e-03, 1.540e-02, -7.602e-03, 3.992e-02, 1.365e-02, 9.252e-02, 5.959e-02, 7.591e-02, -2.472e-02) * s0_0_2;
	r1 += M4(3.652e-02, 1.178e-02, 1.909e-01, 3.092e-01, 2.550e-02, 5.815e-02, -2.313e-02, -3.330e-01, -8.245e-02, -9.703e-02, 8.835e-03, -7.244e-02, 1.947e-02, 2.398e-03, -2.590e-01, 2.936e-02) * s0_0_2;
	r2 += M4(9.187e-02, -3.747e-02, -6.153e-02, 3.348e-02, 9.694e-03, 2.367e-02, 3.476e-03, 1.366e-02, -5.250e-03, 2.425e-02, 3.580e-02, -1.135e-02, -2.348e-01, 1.706e-02, -1.571e-02, -3.293e-01) * s0_0_2;
	r0 += M4(2.413e-02, -1.101e-01, -1.421e-01, 2.559e-03, 5.771e-02, 1.862e-02, 5.088e-02, -7.602e-03, -3.520e-03, -1.370e-02, 7.366e-03, 2.928e-02, 4.626e-02, 3.430e-02, 3.312e-02, -5.636e-02) * s0_1_0;
	r1 += M4(-1.396e-01, -1.159e-01, 2.310e-03, 3.973e-02, -6.707e-03, -7.190e-02, 5.177e-02, 6.306e-03, -1.627e-02, 1.314e-01, -3.026e-02, -3.242e-02, 1.285e-01, 2.730e-01, -1.790e-01, -5.488e-03) * s0_1_0;
	r2 += M4(-3.933e-02, -1.855e-01, -4.766e-02, -2.456e-01, 8.821e-02, 3.364e-02, 7.684e-02, 8.973e-02, -1.629e-01, 1.265e-01, 5.099e-02, 7.511e-02, -1.755e-01, 3.172e-02, -7.929e-02, 1.137e-01) * s0_1_0;
	r0 += M4(6.124e-01, 4.637e-01, -1.316e-02, 7.788e-02, -2.172e-01, -4.991e-02, -3.525e-01, -2.338e-01, -5.909e-02, -1.080e-01, 5.208e-01, -3.666e-02, -1.101e-01, -1.167e-01, 3.878e-02, -1.233e-02) * s0_1_1;
	r1 += M4(-9.218e-01, -1.504e-01, -1.440e-01, 9.635e-02, -2.284e-02, -4.154e-01, -1.739e-02, 1.370e-01, 4.843e-01, 4.175e-01, -1.937e-01, 3.306e-01, 2.204e-01, 2.510e-01, 2.463e-01, -6.214e-02) * s0_1_1;
	r2 += M4(4.306e-01, 1.419e-01, 6.310e-02, 3.477e-01, -4.952e-01, -2.007e-01, -4.813e-01, -7.832e-01, 1.478e-01, 2.758e-01, 1.149e-01, 1.170e-01, 1.262e-01, -1.363e-01, 1.578e-02, -3.418e-02) * s0_1_1;
	r0 += M4(1.032e-01, -3.758e-01, -8.437e-02, -8.472e-02, 1.416e-02, -7.906e-02, 5.095e-03, -4.721e-02, -7.478e-02, 1.327e-01, 2.889e-02, 5.679e-02, 2.956e-02, 4.065e-02, -2.620e-02, 1.260e-02) * s0_1_2;
	r1 += M4(-1.860e-01, -3.195e-03, 5.312e-01, -8.792e-04, 7.784e-02, -5.802e-02, -7.440e-01, -1.208e-01, 1.353e-01, 1.262e-01, 6.390e-01, -1.100e-01, -5.024e-02, -8.005e-02, -1.449e-01, -2.175e-03) * s0_1_2;
	r2 += M4(1.838e-01, -2.982e-03, -1.260e-01, 2.415e-02, -2.137e-01, 8.287e-03, -8.069e-02, -7.836e-02, 1.911e-01, -3.169e-02, 8.189e-02, 2.951e-02, -6.890e-02, 4.368e-02, 2.223e-04, -5.178e-02) * s0_1_2;
	r0 += M4(3.776e-02, -3.351e-02, 1.202e-02, -1.280e-01, 1.036e-02, 4.214e-03, -4.676e-03, 2.208e-03, 1.690e-02, -7.642e-02, 1.196e-02, 3.216e-02, 1.140e-01, -7.835e-02, -4.559e-02, 3.842e-02) * s0_2_0;
	r1 += M4(2.963e-01, 4.648e-02, -3.427e-02, 4.078e-03, 4.940e-02, 6.972e-03, 3.898e-02, 2.762e-02, -2.238e-01, -1.204e-01, 1.436e-02, -2.850e-02, -1.862e-01, -1.790e-01, 3.882e-02, -2.906e-02) * s0_2_0;
	r2 += M4(-3.487e-02, -7.592e-02, -1.542e-01, 6.729e-02, 2.929e-02, 3.119e-02, -2.511e-02, -5.345e-02, 3.700e-03, 8.106e-03, 4.360e-02, -5.750e-02, 1.274e-01, -2.199e-02, 4.655e-02, -3.112e-01) * s0_2_0;
	r0 += M4(-2.337e-02, 1.232e-01, -1.825e-02, -1.093e-01, -1.556e-02, -1.103e-01, 4.498e-02, -2.839e-01, -1.472e-02, 2.568e-01, 2.143e-02, 1.479e-01, 1.953e-03, 8.528e-02, -7.890e-03, -5.441e-03) * s0_2_1;
	r1 += M4(8.131e-01, 9.700e-02, -5.793e-02, -5.262e-02, -3.370e-01, -8.502e-03, 7.589e-02, -3.322e-02, -2.649e-01, -1.197e-01, -1.548e-01, 5.774e-02, -9.450e-02, -1.294e-01, -7.860e-02, 4.015e-02) * s0_2_1;
	r2 += M4(-1.163e-01, -1.248e-01, -2.026e-01, -2.263e-01, -3.337e-01, -1.203e-01, -2.232e-01, 1.063e-02, 1.306e-02, 2.627e-01, 1.078e-01, 6.642e-02, -1.078e-01, 3.885e-02, -1.937e-02, -1.161e-02) * s0_2_1;
	r0 += M4(1.995e-02, -1.817e-02, -3.494e-02, -7.230e-02, -9.300e-03, -6.676e-02, 1.337e-02, -3.418e-02, -4.629e-02, -3.644e-02, 4.434e-02, 9.711e-02, 1.206e-02, -1.370e-03, 1.409e-02, 1.715e-02) * s0_2_2;
	r1 += M4(3.247e-01, 9.399e-02, 3.380e-02, 3.366e-03, -3.460e-02, 2.018e-02, -1.758e-01, -4.941e-02, -1.578e-01, -4.570e-02, 2.609e-01, 5.275e-02, 2.460e-02, -5.141e-03, 1.052e-01, 6.952e-03) * s0_2_2;
	r2 += M4(5.092e-02, -9.204e-02, -5.597e-02, 1.562e-02, -3.912e-02, 1.028e-02, -2.399e-02, -8.064e-02, 9.195e-02, 6.712e-02, 1.008e-01, -3.651e-02, 6.939e-02, -9.676e-04, 1.156e-02, -2.340e-02) * s0_2_2;
	r0 += V4(-2.452e-03, -2.264e-02, -4.130e-03, -2.051e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.186e-02, -9.394e-03, -3.528e-02, -2.472e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.111e-02, -3.587e-03, -3.537e-03, -1.180e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12_DS] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-9.863e-03, 6.995e-04, 4.123e-03, 2.740e-05, 1.974e-01, 2.618e-02, 4.899e-02, 7.146e-03, 1.874e-02, 1.822e-03, -2.352e-03, -2.460e-03, 8.276e-02, -3.787e-03, 3.600e-02, 4.651e-04) * s0_0_0;
	r0 += M4(-7.020e-02, -8.130e-02, -5.072e-03, -8.817e-03, 4.787e-02, -3.057e-01, 5.459e-03, -7.411e-02, 7.201e-02, 8.912e-02, 6.973e-03, 8.400e-03, -5.008e-01, 1.091e-01, 7.096e-02, 3.137e-02) * s0_0_1;
	r0 += M4(1.329e-02, 2.711e-03, -8.845e-04, 9.307e-03, -4.322e-03, 3.094e-02, -2.776e-03, 1.616e-02, -5.198e-03, 1.016e-02, 5.780e-04, -4.303e-03, 1.769e-02, -1.033e-01, -1.297e-02, -5.177e-02) * s0_0_2;
	r0 += M4(1.754e-03, 2.032e-02, -1.936e-02, 8.576e-03, 1.566e-02, -1.774e-04, 1.665e-01, 2.434e-02, -1.158e-01, 1.245e-02, 1.385e-02, 2.508e-03, -5.090e-03, 1.996e-03, 5.208e-02, 2.065e-02) * s0_1_0;
	r0 += M4(-3.506e-02, -8.371e-02, -1.860e-01, -1.997e-01, 2.770e-03, -1.248e-02, 5.285e-02, -2.462e-01, 9.156e-02, -4.733e-01, 1.158e-01, 1.698e-01, 1.860e-02, -3.325e-04, 1.891e-01, 2.919e-02) * s0_1_1;
	r0 += M4(3.135e-02, 3.729e-02, 3.600e-02, 2.796e-02, -4.282e-03, 1.775e-02, 2.255e-03, 2.689e-02, -1.301e-02, 7.886e-02, -4.628e-03, 4.897e-02, 1.232e-02, -2.697e-02, 2.556e-03, -2.076e-02) * s0_1_2;
	r0 += M4(3.071e-02, -6.457e-03, 3.118e-02, 1.387e-02, -5.050e-03, -1.233e-03, -2.277e-02, -1.290e-02, -2.236e-02, -7.341e-03, -5.721e-02, -1.178e-02, 3.093e-05, -1.749e-03, 9.528e-04, -1.622e-03) * s0_2_0;
	r0 += M4(6.647e-02, 9.635e-02, 1.194e-01, 1.243e-01, -1.352e-03, -9.307e-03, -3.531e-03, 2.726e-03, -5.604e-02, -3.079e-02, -7.085e-03, 9.877e-02, -8.026e-03, -7.616e-04, 1.120e-02, 1.922e-02) * s0_2_1;
	r0 += M4(-1.285e-02, 3.392e-03, 3.226e-03, 2.264e-02, 1.984e-03, -1.937e-04, 7.970e-04, 6.786e-03, 7.620e-03, -4.686e-03, 7.606e-03, 3.799e-02, -3.072e-04, -6.243e-03, 1.912e-03, 2.073e-03) * s0_2_2;
	r0 += M4(2.297e-02, -5.998e-03, -3.116e-02, -4.103e-03, 3.552e-02, 4.222e-03, -7.092e-03, 2.768e-03, 5.439e-02, -5.705e-02, -5.670e-03, 1.523e-02, 1.052e-02, 3.529e-03, -3.281e-03, 9.043e-03) * s1_0_0;
	r0 += M4(2.966e-01, 2.861e-01, -2.446e-01, -1.953e-01, 3.584e-02, 5.088e-02, -1.727e-02, -2.800e-02, -1.664e-03, -3.387e-03, 6.040e-03, 8.410e-04, -1.213e-03, 1.002e-02, -3.720e-03, 5.258e-03) * s1_0_1;
	r0 += M4(-9.917e-03, 3.401e-02, 6.967e-03, -4.937e-02, -1.902e-03, 9.185e-03, 3.291e-03, 3.139e-03, 3.252e-04, -1.741e-03, 2.354e-04, -1.621e-03, -4.085e-04, 7.262e-03, -1.656e-04, 2.933e-03) * s1_0_2;
	r0 += M4(-1.108e-02, 4.130e-03, 1.005e-02, 1.554e-03, -8.911e-02, 1.065e-02, 6.073e-02, 1.248e-02, 2.450e-01, -1.831e-01, 2.565e-01, -2.324e-01, -2.869e-01, 5.897e-02, -5.420e-02, 1.301e-02) * s1_1_0;
	r0 += M4(-6.904e-02, -6.567e-02, 4.458e-02, 2.889e-02, -2.592e-01, -3.291e-01, 2.005e-01, 2.417e-01, -2.367e-02, -2.169e-03, -2.370e-02, -7.492e-03, 1.988e-02, 1.912e-01, 2.109e-02, 9.253e-02) * s1_1_1;
	r0 += M4(7.238e-03, -1.273e-02, -6.119e-03, 1.291e-02, 2.781e-04, -2.413e-02, 3.537e-03, 2.051e-02, 2.827e-04, -1.825e-03, 1.007e-03, 7.436e-05, 2.419e-03, -6.703e-03, 1.937e-04, 2.292e-03) * s1_1_2;
	r0 += M4(-6.391e-04, -9.942e-04, -2.871e-03, -2.023e-03, 1.871e-02, 4.029e-03, 2.165e-02, -1.825e-02, -2.095e-02, -4.715e-03, 3.085e-02, -3.536e-02, -2.275e-02, -2.816e-02, -2.023e-01, -8.829e-03) * s1_2_0;
	r0 += M4(2.210e-03, 2.915e-03, 1.352e-04, -8.111e-04, 2.032e-02, 2.143e-02, -6.211e-03, 2.884e-02, 7.631e-03, 3.580e-03, -9.259e-03, -2.721e-04, -6.718e-03, 3.864e-02, -4.345e-03, 1.476e-01) * s1_2_1;
	r0 += M4(6.857e-05, -6.138e-05, -1.655e-03, -3.891e-03, -7.130e-05, 1.371e-02, -9.720e-03, -1.787e-02, 1.444e-05, 3.490e-04, -4.827e-04, -9.716e-04, -2.017e-03, 6.366e-04, -1.041e-03, -6.003e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.106e-02, -8.995e-03, 7.862e-03, 1.732e-04, -1.982e-02, -6.335e-03, -1.551e-02, -3.176e-03, 3.775e-02, 1.139e-02, 2.872e-03, 9.214e-04, -1.739e-02, -1.050e-02, -4.878e-04, 1.591e-02) * s0_0_0;
	r0 += M4(-7.978e-02, 7.202e-02, 6.676e-03, -7.618e-03, 4.993e-02, 1.743e-01, 1.504e-02, 2.557e-02, 1.724e-01, 5.610e-02, 3.014e-02, 1.185e-02, 4.919e-02, 3.036e-02, -7.920e-03, 2.985e-02) * s0_0_1;
	r0 += M4(7.303e-03, 3.865e-03, -2.086e-03, -8.694e-03, 1.092e-02, 4.153e-02, -2.216e-07, 2.202e-03, -1.546e-02, -2.910e-02, -6.668e-03, -1.531e-02, -1.531e-02, -1.386e-02, -1.590e-03, -6.515e-03) * s0_0_2;
	r0 += M4(-1.901e-04, -1.617e-02, -8.695e-03, -2.003e-02, -2.502e-02, -1.203e-03, -9.741e-02, 1.215e-02, 4.521e-02, 4.055e-03, 1.003e-01, 3.306e-03, 1.135e-01, -1.035e-02, -3.381e-02, 9.249e-04) * s0_1_0;
	r0 += M4(-2.172e-01, 2.329e-01, -2.666e-01, 2.529e-01, 1.910e-02, 9.020e-02, 9.971e-02, -5.091e-01, 3.284e-02, -1.175e-02, -4.342e-01, 1.086e-01, -2.954e-01, 2.016e-01, 1.411e-01, -2.504e-01) * s0_1_1;
	r0 += M4(8.396e-03, 1.283e-02, 2.007e-02, 1.856e-02, -1.474e-02, 3.040e-02, -1.035e-02, 6.212e-02, 3.115e-03, -8.803e-03, 2.196e-03, -5.724e-02, 1.543e-02, -8.155e-03, -1.364e-02, 4.238e-02) * s0_1_2;
	r0 += M4(6.875e-03, 8.927e-04, 3.936e-03, -4.910e-03, 5.398e-03, -1.484e-03, -5.784e-03, -4.430e-04, -2.907e-03, 6.983e-04, 4.451e-03, -4.333e-03, -7.008e-03, 6.912e-03, -3.307e-03, -6.985e-03) * s0_2_0;
	r0 += M4(1.490e-02, -1.259e-02, -2.897e-02, 3.505e-02, 1.514e-02, -8.337e-03, -1.075e-02, 6.515e-03, 1.435e-03, 1.124e-02, 3.458e-03, -1.648e-02, 2.147e-02, -2.466e-02, 5.764e-04, 5.887e-02) * s0_2_1;
	r0 += M4(1.453e-03, -3.450e-03, 6.481e-03, 1.991e-04, 3.945e-04, 4.677e-03, 2.245e-04, 1.016e-02, -3.221e-03, 6.550e-03, -2.781e-03, -2.048e-02, 2.857e-02, -8.715e-03, 1.235e-02, -4.370e-02) * s0_2_2;
	r0 += V4(-6.136e-05, -5.852e-05, -5.821e-05, -6.116e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
