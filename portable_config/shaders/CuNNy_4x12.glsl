// CuNNy 4x12
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x12] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.012e-02, 3.409e-02, 2.003e-02, 2.149e-02) * s0_0_0;
	r1 += V4(1.332e-02, -1.546e-03, -2.167e-02, 4.247e-03) * s0_0_0;
	r2 += V4(-3.831e-02, 5.725e-02, -1.723e-02, -9.611e-04) * s0_0_0;
	r0 += V4(5.948e-03, -1.790e-01, -7.113e-01, -5.762e-01) * s0_0_1;
	r1 += V4(-1.763e-01, 6.230e-01, 6.170e-02, 5.957e-01) * s0_0_1;
	r2 += V4(2.924e-02, -9.287e-02, 5.798e-02, -8.915e-03) * s0_0_1;
	r0 += V4(-1.618e-02, 4.424e-02, 1.642e-03, -2.212e-01) * s0_0_2;
	r1 += V4(1.433e-01, 1.243e-01, -4.078e-02, -5.934e-01) * s0_0_2;
	r2 += V4(-2.993e-02, 1.788e-02, 6.303e-02, 3.710e-04) * s0_0_2;
	r0 += V4(8.472e-02, -1.248e-01, -2.251e-02, 3.462e-02) * s0_1_0;
	r1 += V4(-9.073e-02, -8.324e-03, 3.989e-02, -4.260e-02) * s0_1_0;
	r2 += V4(-2.655e-02, 8.505e-01, 3.367e-02, -7.721e-03) * s0_1_0;
	r0 += V4(-1.527e-01, 3.251e-01, 1.194e-02, 5.362e-01) * s0_1_1;
	r1 += V4(-5.765e-01, -6.300e-01, -1.876e-01, -5.195e-01) * s0_1_1;
	r2 += V4(4.352e-01, -8.340e-01, 7.430e-02, -8.301e-01) * s0_1_1;
	r0 += V4(3.108e-01, -7.590e-02, 6.973e-01, 1.981e-01) * s0_1_2;
	r1 += V4(7.084e-01, -1.057e-01, 1.557e-01, 5.599e-01) * s0_1_2;
	r2 += V4(-1.362e-01, -7.918e-03, -4.514e-01, -8.818e-03) * s0_1_2;
	r0 += V4(-1.370e-02, 3.357e-02, -9.465e-03, -7.160e-02) * s0_2_0;
	r1 += V4(4.683e-02, -5.313e-03, -1.703e-02, 3.918e-02) * s0_2_0;
	r2 += V4(-1.328e-02, -3.637e-03, -1.572e-03, 1.077e-02) * s0_2_0;
	r0 += V4(8.350e-02, -9.353e-02, 3.341e-02, 8.667e-02) * s0_2_1;
	r1 += V4(-5.833e-02, 1.627e-02, 5.711e-01, -4.602e-02) * s0_2_1;
	r2 += V4(-7.077e-02, 2.292e-02, 5.385e-03, 8.406e-01) * s0_2_1;
	r0 += V4(-1.665e-01, 4.454e-02, -2.348e-02, -1.594e-03) * s0_2_2;
	r1 += V4(-5.277e-03, -1.593e-02, -5.351e-01, 6.424e-03) * s0_2_2;
	r2 += V4(4.407e-02, -1.204e-02, 8.571e-03, 5.629e-03) * s0_2_2;
	r0 += V4(-4.380e-03, 9.884e-02, 3.921e-06, 1.640e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.702e-02, 4.461e-03, 1.353e-02, 2.207e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.932e-02, 9.612e-03, 2.204e-01, 2.222e-04);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.830e-01, 9.400e-02, -2.500e-01, 1.126e-01, 2.689e-01, 1.297e-01, 5.839e-02, 3.394e-01, 6.439e-02, 4.575e-02, 6.406e-02, 3.078e-01, -6.771e-02, -6.212e-02, -4.285e-02, -3.892e-01) * s0_0_0;
	r1 += M4(3.657e-02, -2.289e-01, -1.019e-01, -4.399e-01, -2.343e-01, -1.578e-01, -6.813e-03, -1.427e-02, -8.049e-02, -1.328e-01, -3.758e-03, 1.227e-01, 7.472e-02, 1.070e-01, 3.965e-02, 1.056e-01) * s0_0_0;
	r2 += M4(-3.251e-01, 1.589e-01, 3.324e-01, -1.690e-01, -1.891e-01, 9.611e-02, -9.071e-02, 1.173e-01, -4.665e-02, -3.614e-02, -4.646e-02, 1.264e-01, 1.204e-01, -6.022e-02, 3.862e-02, -6.209e-02) * s0_0_0;
	r0 += M4(-2.841e-02, -9.140e-02, 9.102e-02, -4.033e-01, 6.894e-01, 7.715e-03, 1.635e-01, 3.357e-01, 2.906e-01, -7.965e-02, 9.828e-05, 1.274e-01, -5.134e-01, 7.695e-02, -2.801e-02, -1.910e-01) * s0_0_1;
	r1 += M4(1.528e-01, 5.085e-02, -1.982e-02, -3.658e-01, -1.926e-02, -2.169e-01, -1.154e-01, -2.243e-01, -7.330e-02, -4.241e-01, -1.990e-02, -9.546e-02, 4.440e-02, -2.018e-01, 2.242e-04, 9.536e-02) * s0_0_1;
	r2 += M4(1.683e-01, 1.669e-01, -6.260e-02, 8.021e-02, 2.290e-01, 1.736e-01, 1.224e-01, -4.703e-01, -5.423e-02, -2.515e-02, 2.190e-02, -6.945e-02, 1.897e-02, 5.987e-02, -5.420e-02, 9.296e-02) * s0_0_1;
	r0 += M4(-2.068e-01, 1.901e-01, -5.596e-02, 2.871e-01, -1.805e-01, -2.514e-01, -1.212e-01, 4.340e-01, 9.660e-02, 1.855e-02, 1.686e-02, 6.832e-02, 5.777e-02, -8.841e-03, -9.666e-04, -1.350e-02) * s0_0_2;
	r1 += M4(-4.597e-02, 2.711e-01, 2.205e-01, -2.536e-01, 5.523e-02, -1.399e-01, 9.631e-02, 2.085e-01, -3.516e-02, -3.486e-01, -2.699e-02, -4.722e-02, 3.874e-02, 1.000e+00, 7.945e-03, -5.572e-02) * s0_0_2;
	r2 += M4(2.029e-01, -1.994e-01, 1.401e-01, 4.469e-01, 1.087e-01, -1.611e-01, 1.547e-01, -1.461e-01, -2.938e-02, 1.155e-02, 4.579e-02, -5.778e-02, -3.731e-03, 2.128e-03, -4.428e-02, 1.009e-01) * s0_0_2;
	r0 += M4(3.695e-02, -3.291e-01, 2.086e-01, -3.962e-01, 2.947e-01, 4.921e-02, 8.846e-02, -1.595e-01, 1.537e-01, 6.156e-02, 1.839e-01, 3.143e-01, 4.424e-03, 2.803e-02, -2.017e-01, -8.301e-01) * s0_1_0;
	r1 += M4(-1.695e-01, -4.142e-01, -1.675e-01, 8.479e-02, 7.223e-02, -1.997e-02, 1.654e-01, -7.162e-02, -3.550e-02, 2.110e-01, 7.686e-02, -3.711e-02, -3.601e-02, -5.152e-01, -1.273e-01, -1.921e-01) * s0_1_0;
	r2 += M4(3.152e-01, -2.448e-01, -3.583e-01, -1.103e-01, 5.020e-01, 1.689e-01, -1.302e-01, 4.539e-01, -5.880e-01, 3.190e-01, 2.315e-01, 5.853e-02, 1.256e-01, -1.383e-01, -1.478e-01, -9.486e-02) * s0_1_0;
	r0 += M4(-8.855e-02, 3.504e-01, 3.223e-02, 4.497e-01, -9.311e-02, -1.723e-02, -2.722e-01, -1.087e-01, 3.319e-02, 1.854e-01, 7.485e-02, -1.038e-01, -1.708e-01, -1.228e-01, -1.372e-03, 8.119e-02) * s0_1_1;
	r1 += M4(1.814e-02, 4.351e-01, 2.197e-01, 5.382e-01, -5.229e-01, -3.907e-01, -5.605e-01, -2.563e-02, -1.280e-02, -7.466e-01, 1.386e-01, 3.517e-02, 1.030e-01, -1.000e+00, -8.999e-02, 9.326e-02) * s0_1_1;
	r2 += M4(-1.901e-01, -4.357e-02, -9.871e-02, 1.000e+00, 3.080e-01, 1.132e-02, 2.022e-01, -3.055e-01, 9.299e-02, 2.359e-01, 3.384e-02, -4.406e-01, 1.636e-01, -4.632e-02, -1.740e-01, -4.846e-02) * s0_1_1;
	r0 += M4(1.361e-01, -3.342e-01, 8.475e-02, -4.999e-02, 5.733e-02, 3.620e-01, 2.192e-01, -1.927e-01, 2.622e-01, 6.107e-02, 1.114e-01, 1.860e-01, -1.083e-01, -6.665e-02, -1.342e-01, -1.136e-03) * s0_1_2;
	r1 += M4(-5.631e-02, 7.363e-02, -1.319e-01, 3.799e-01, 5.155e-01, 3.412e-01, 5.389e-01, -4.132e-02, 2.744e-02, -5.222e-01, -9.786e-02, -2.947e-01, 1.597e-01, -1.337e-01, 1.514e-01, 1.462e-01) * s0_1_2;
	r2 += M4(-4.589e-02, -8.376e-02, -1.708e-01, -4.545e-01, -7.883e-02, -9.819e-03, -1.152e-02, 4.971e-01, 3.826e-02, 1.280e-01, -4.561e-02, -1.635e-01, -1.016e-01, -2.680e-01, 3.818e-01, 9.082e-02) * s0_1_2;
	r0 += M4(-1.780e-01, 1.420e-01, 7.875e-02, -1.132e-01, 1.234e-01, 1.158e-01, 9.065e-02, -5.899e-01, 2.146e-01, -4.018e-02, 1.706e-01, 2.450e-01, 9.539e-02, 1.918e-03, -7.357e-03, -6.465e-01) * s0_2_0;
	r1 += M4(1.214e-01, 1.372e-01, -3.209e-02, -1.653e-01, -2.287e-01, 3.667e-01, 5.919e-02, 3.113e-01, -8.613e-02, 3.396e-01, 8.559e-02, -2.121e-01, 1.388e-01, 1.824e-01, -5.965e-02, -2.908e-02) * s0_2_0;
	r2 += M4(2.649e-02, 2.492e-02, 2.095e-01, -1.279e-01, -1.296e-01, 2.355e-02, 4.133e-01, 8.065e-02, 6.224e-02, -1.612e-01, -7.754e-01, 6.844e-02, -8.956e-02, 1.334e-01, 5.021e-01, -5.959e-02) * s0_2_0;
	r0 += M4(-1.233e-01, -1.605e-02, 6.394e-02, -6.614e-02, -4.855e-01, -3.245e-01, -1.478e-01, -1.302e-01, 9.048e-01, 3.391e-01, 1.741e-01, 1.065e-01, -3.562e-01, -1.802e-01, 1.480e-01, 1.000e+00) * s0_2_1;
	r1 += M4(-7.190e-02, -2.296e-01, -1.267e-01, 8.505e-02, 5.546e-01, -6.116e-02, -2.901e-01, 1.764e-01, -8.680e-02, 1.041e-01, 2.312e-01, 2.081e-01, -6.518e-02, -3.549e-01, -3.000e-01, -2.263e-01) * s0_2_1;
	r2 += M4(1.715e-01, 2.281e-01, 1.051e-01, 2.548e-01, -2.089e-01, -1.066e-01, -7.940e-01, -3.149e-01, -1.000e+00, 2.962e-01, 1.000e+00, 4.646e-02, 3.575e-01, -3.399e-01, -1.000e+00, -6.381e-02) * s0_2_1;
	r0 += M4(3.744e-01, 6.601e-03, -7.864e-02, 3.541e-01, -4.321e-01, -6.471e-02, -2.031e-01, 9.110e-02, 3.968e-01, 9.641e-02, 4.483e-03, 2.311e-01, -3.623e-01, -4.504e-01, 5.969e-02, 6.361e-02) * s0_2_2;
	r1 += M4(-4.494e-02, -3.371e-02, 2.273e-01, -9.700e-02, -3.377e-02, 3.686e-01, 2.860e-01, -1.031e-01, -7.069e-02, -1.932e-02, 8.552e-02, -1.000e+00, 2.437e-01, 4.010e-01, 2.130e-01, 3.257e-01) * s0_2_2;
	r2 += M4(-9.323e-02, -6.239e-04, -5.607e-02, 2.447e-01, -1.791e-01, -3.690e-01, 7.690e-02, 5.477e-01, -7.034e-02, 7.610e-03, -1.599e-01, -6.098e-02, -1.239e-02, -6.782e-02, 1.556e-01, 7.431e-02) * s0_2_2;
	r0 += M4(-2.038e-01, 2.944e-02, -2.023e-02, -5.549e-01, -3.514e-02, 7.394e-02, 1.057e-01, 9.013e-03, 1.012e-01, -3.387e-02, -2.074e-01, -3.210e-02, 1.264e-01, 2.549e-03, -1.632e-02, -1.714e-01) * s1_0_0;
	r1 += M4(-4.966e-02, 1.609e-01, -6.846e-02, 1.150e-01, 4.196e-02, -4.135e-01, 1.964e-02, 8.941e-02, -1.086e-01, -5.521e-01, -1.422e-01, -8.200e-02, -1.655e-01, 2.830e-01, -2.066e-02, 2.823e-01) * s1_0_0;
	r2 += M4(1.295e-01, 1.558e-01, -1.006e-01, -1.734e-01, -3.882e-02, 9.866e-02, 5.433e-02, 1.086e-02, 2.752e-01, -8.050e-02, 6.998e-02, -1.446e-02, 5.047e-02, -6.598e-02, -1.509e-01, 3.049e-02) * s1_0_0;
	r0 += M4(-5.158e-01, 9.773e-02, 1.203e-01, 1.959e-03, 2.777e-01, 1.290e-01, 8.960e-02, 1.102e-01, -3.050e-03, -3.175e-01, -2.232e-01, -6.895e-01, -2.564e-01, -8.674e-02, -2.181e-02, 1.694e-01) * s1_0_1;
	r1 += M4(1.871e-01, -3.062e-01, -2.298e-01, -1.330e-01, 6.085e-02, 1.992e-01, 1.322e-02, -2.783e-01, -4.944e-02, -5.595e-01, -7.937e-01, -4.789e-01, -1.226e-01, -1.000e+00, -2.382e-03, 1.772e-01) * s1_0_1;
	r2 += M4(5.536e-02, 6.004e-02, -1.509e-02, -3.088e-03, -1.809e-02, 4.415e-03, 7.347e-02, -7.877e-02, -6.286e-02, 3.553e-02, 8.058e-02, 2.388e-01, -3.010e-02, 5.092e-03, 2.320e-02, -1.460e-01) * s1_0_1;
	r0 += M4(-2.551e-01, -3.040e-02, -4.471e-02, -2.499e-01, -2.781e-01, 1.811e-02, -1.864e-02, 8.382e-02, 1.919e-01, -7.475e-02, -5.406e-02, 3.762e-01, -1.247e-01, -8.557e-02, -6.519e-02, -5.272e-03) * s1_0_2;
	r1 += M4(4.729e-02, -8.782e-02, -8.597e-03, 5.747e-02, -3.793e-02, -7.632e-01, -1.316e-02, 3.544e-01, 6.909e-02, -3.916e-01, 2.244e-01, -7.061e-02, -2.818e-02, -2.685e-01, -4.649e-02, 2.934e-01) * s1_0_2;
	r2 += M4(1.204e-02, -3.957e-02, -8.699e-02, -8.834e-02, 6.936e-02, -3.347e-02, -1.095e-02, -3.319e-02, -5.735e-02, 9.589e-02, -1.576e-01, -6.430e-01, -3.855e-04, -3.189e-02, -1.540e-01, -4.116e-02) * s1_0_2;
	r0 += M4(-3.007e-01, -2.700e-01, -8.428e-02, 1.053e-01, 1.031e-01, 1.642e-03, -4.957e-02, 3.579e-02, -2.723e-01, -1.677e-01, 6.194e-02, 3.682e-01, 3.532e-01, 1.191e-02, 9.750e-03, -1.031e-01) * s1_1_0;
	r1 += M4(3.620e-01, -1.676e-01, -5.087e-02, -1.692e-01, 2.390e-01, -4.246e-02, -7.169e-02, 1.019e-01, 2.228e-01, 4.191e-01, 1.100e-01, 2.033e-01, -3.322e-01, 5.764e-01, 4.131e-02, 7.676e-02) * s1_1_0;
	r2 += M4(2.593e-01, -3.726e-01, 1.584e-01, 1.174e-01, -1.593e-01, 2.652e-01, 1.042e-01, -6.116e-02, 3.358e-01, -7.841e-02, -1.598e-01, -4.022e-01, -2.748e-02, 3.849e-02, 2.187e-01, -8.315e-02) * s1_1_0;
	r0 += M4(5.442e-01, 2.874e-01, -1.055e-01, 3.579e-01, 1.192e-01, 6.570e-02, -2.922e-02, -4.076e-01, -1.358e-01, 4.774e-01, 2.616e-01, 1.138e-01, -3.577e-01, 6.042e-02, 1.946e-02, 1.663e-01) * s1_1_1;
	r1 += M4(1.900e-01, 1.000e+00, 1.000e+00, 2.954e-02, 5.306e-01, 3.096e-01, -1.545e-01, -3.466e-01, 2.641e-01, -1.596e-01, 7.361e-02, 4.389e-01, -9.563e-02, 5.883e-01, 3.437e-01, -5.358e-02) * s1_1_1;
	r2 += M4(-2.765e-01, -3.176e-01, 2.419e-01, -5.577e-01, -1.000e+00, 3.000e-01, -1.431e-01, 1.631e-01, -8.770e-04, 1.826e-01, -3.513e-01, 2.076e-02, 7.777e-02, 4.346e-01, 5.023e-01, 3.402e-01) * s1_1_1;
	r0 += M4(-2.349e-01, -1.297e-02, 6.138e-04, -2.682e-01, -4.372e-01, 1.358e-01, 1.145e-01, -5.735e-01, -1.455e-02, 1.989e-01, 3.897e-02, 1.685e-02, -1.670e-01, 7.201e-02, 3.010e-02, -2.409e-01) * s1_1_2;
	r1 += M4(2.073e-02, 2.381e-01, -1.952e-04, -1.299e-01, -4.646e-02, 3.034e-01, 1.832e-01, 6.484e-01, 8.889e-02, 2.278e-01, 1.256e-01, -2.427e-01, -5.409e-03, -3.328e-01, -3.092e-02, -3.300e-01) * s1_1_2;
	r2 += M4(4.190e-02, -1.035e-01, 9.142e-02, 4.464e-01, 1.436e-02, 1.307e-01, -1.060e-01, 4.960e-01, -7.147e-02, -1.145e-01, 2.696e-01, 1.079e-01, 1.530e-01, 5.076e-02, 6.372e-02, 4.112e-01) * s1_1_2;
	r0 += M4(3.300e-02, 8.868e-02, -1.335e-01, -3.089e-02, -1.221e-02, -6.722e-02, 3.551e-02, -7.314e-02, 1.360e-01, 9.115e-02, 4.749e-02, 4.714e-03, 1.631e-01, 2.606e-02, 1.787e-01, 1.562e-01) * s1_2_0;
	r1 += M4(6.770e-03, -2.062e-01, -1.966e-02, 3.922e-01, 1.181e-01, 2.549e-01, 1.033e-01, -1.721e-01, -1.198e-01, 5.723e-03, 5.255e-02, 2.845e-01, -3.657e-01, 1.093e-01, -8.033e-02, 9.400e-02) * s1_2_0;
	r2 += M4(1.089e-01, 2.031e-01, 2.003e-01, -1.510e-01, -3.420e-02, -1.263e-01, -5.796e-01, -2.472e-02, 2.201e-02, -2.777e-02, -5.617e-02, -6.397e-03, 1.125e-01, -9.879e-02, 7.688e-02, 9.709e-02) * s1_2_0;
	r0 += M4(-7.422e-02, 3.233e-02, -6.824e-02, -3.160e-01, -2.680e-02, 4.271e-01, -4.269e-01, -1.559e-01, 2.580e-02, 3.875e-02, -2.695e-02, -2.170e-01, 3.677e-01, -1.039e-02, 3.448e-01, 9.116e-02) * s1_2_1;
	r1 += M4(1.123e-01, -5.226e-01, -5.216e-02, -1.908e-01, 6.031e-02, 1.888e-02, -2.050e-03, 1.566e-01, -5.705e-02, -7.052e-02, 7.321e-03, -5.036e-02, -5.885e-02, 6.152e-01, 4.648e-03, -8.288e-01) * s1_2_1;
	r2 += M4(-1.045e-01, -1.282e-01, -5.550e-01, -1.615e-01, 3.528e-02, 5.482e-02, 9.607e-01, -2.577e-01, -1.267e-01, 5.239e-03, -3.302e-02, -1.049e-01, 2.683e-01, 5.011e-01, 4.321e-01, 3.444e-01) * s1_2_1;
	r0 += M4(-3.048e-02, -1.335e-02, 2.196e-02, -1.552e-01, 1.294e-01, 4.932e-01, 7.694e-02, 1.282e-01, -1.051e-01, -4.687e-02, 2.860e-02, -6.149e-03, 9.019e-02, 3.315e-01, 1.085e-01, -1.768e-01) * s1_2_2;
	r1 += M4(-4.464e-02, -1.833e-01, -1.478e-01, 2.605e-01, -2.227e-01, 3.971e-02, -4.865e-02, -6.713e-01, 8.851e-03, 2.162e-02, -6.285e-03, 1.870e-01, -5.718e-02, 2.415e-01, -3.691e-02, -1.956e-01) * s1_2_2;
	r2 += M4(1.149e-01, 4.245e-02, 5.372e-03, -2.046e-01, 7.542e-03, 1.203e-01, -5.849e-02, -3.556e-01, 5.100e-02, -2.037e-02, 1.027e-01, -2.711e-02, 1.422e-01, 5.902e-02, 5.065e-02, 2.219e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.389e-01, 9.937e-02, -2.158e-03, 6.905e-03, -7.235e-03, -1.943e-04, 4.983e-02, 5.756e-02, -3.617e-01, 1.186e-02, 4.194e-02, 1.284e-01, -6.980e-02, -1.825e-02, 6.315e-02, 3.262e-01) * s0_0_0;
	r1 += M4(4.116e-02, -2.990e-01, -7.442e-02, -6.269e-02, 1.663e-03, 1.189e-01, 3.473e-02, 5.879e-02, 1.284e-01, 1.531e-01, 6.677e-03, -2.526e-01, 4.748e-02, 4.512e-01, 1.089e-01, 1.292e-01) * s0_0_0;
	r2 += M4(-2.113e-01, 7.691e-02, -1.539e-01, -7.339e-02, -4.395e-02, 1.696e-02, -1.064e-01, -3.186e-02, 2.477e-01, 3.004e-02, 1.916e-01, 2.003e-01, 7.454e-03, -1.381e-01, 2.537e-02, 4.164e-02) * s0_0_0;
	r0 += M4(8.777e-02, 1.589e-01, 1.731e-01, 2.812e-01, -7.010e-02, 1.149e-01, 1.271e-01, 1.671e-01, 1.543e-01, 1.342e-01, -8.687e-02, -4.156e-01, -1.892e-02, 2.325e-01, 1.656e-01, 8.043e-01) * s0_0_1;
	r1 += M4(3.023e-01, -3.084e-01, 7.990e-02, -1.333e-01, 1.936e-01, -5.507e-01, 2.034e-02, -5.523e-02, 1.606e-02, 1.730e-01, 8.937e-02, 1.557e-01, 2.521e-01, 6.752e-02, 1.851e-01, 2.033e-01) * s0_0_1;
	r2 += M4(-5.630e-02, 2.634e-01, 3.090e-01, -3.164e-01, -9.074e-02, 3.030e-02, 3.095e-02, 8.568e-02, -6.562e-02, -1.412e-01, 2.645e-01, 1.920e-01, -1.319e-01, 4.072e-01, 3.162e-01, -2.211e-01) * s0_0_1;
	r0 += M4(5.373e-01, 1.343e-01, -9.262e-02, -4.373e-01, 2.709e-02, -5.770e-02, 7.804e-03, -1.229e-02, 7.542e-02, -1.311e-01, -3.788e-03, -3.185e-01, -5.039e-01, 3.219e-01, -6.765e-02, -3.403e-02) * s0_0_2;
	r1 += M4(2.013e-01, 4.977e-01, 2.949e-01, -2.044e-01, -4.390e-02, -2.776e-01, -8.694e-02, 5.158e-02, -1.510e-01, 3.523e-01, -2.444e-02, 1.007e-01, 1.697e-01, -6.236e-01, -2.764e-01, -3.780e-01) * s0_0_2;
	r2 += M4(-1.066e-01, 1.379e-02, 4.447e-01, -4.675e-01, 1.088e-02, -1.261e-01, -6.862e-02, -1.135e-01, 2.491e-02, -6.071e-03, -3.532e-01, -1.030e-01, 8.932e-02, -1.941e-02, -1.937e-01, -1.000e+00) * s0_0_2;
	r0 += M4(-2.974e-01, -1.860e-01, -2.962e-01, 2.783e-01, 3.500e-02, -1.326e-02, -5.367e-02, -3.770e-02, -6.038e-02, -1.005e-01, -2.882e-01, -5.047e-02, -6.243e-02, 1.131e-01, -2.832e-01, 3.630e-01) * s0_1_0;
	r1 += M4(1.030e-01, 1.301e-02, -4.794e-04, -1.146e-01, -8.471e-02, -1.036e-01, -1.911e-02, 2.008e-02, 2.568e-01, -2.093e-01, 4.519e-02, -1.506e-02, -8.791e-02, -2.871e-01, -1.507e-02, 1.464e-01) * s0_1_0;
	r2 += M4(-1.137e-02, 7.216e-02, -1.029e-01, -4.690e-01, 3.382e-02, -4.270e-02, 3.899e-02, 4.940e-02, 1.000e+00, -1.810e-01, -2.698e-01, -1.767e-01, -1.884e-02, 6.563e-02, -6.729e-01, -2.563e-02) * s0_1_0;
	r0 += M4(-2.568e-01, -1.085e-01, -1.285e-01, -4.974e-01, 3.293e-01, 1.319e-01, -1.178e-01, -2.180e-01, 1.005e-01, 1.890e-01, 1.949e-01, 7.747e-01, -3.331e-01, -9.037e-02, 1.000e+00, -4.680e-01) * s0_1_1;
	r1 += M4(-2.511e-01, -3.750e-01, -4.446e-01, -1.841e-01, 4.610e-01, 2.645e-01, -2.015e-02, 3.171e-01, 1.999e-01, -7.227e-02, 1.433e-01, -4.432e-02, 4.522e-01, 2.082e-01, 1.660e-01, -5.747e-01) * s0_1_1;
	r2 += M4(1.000e+00, 1.661e-01, 4.459e-02, -3.673e-01, -1.000e+00, 1.000e+00, 4.626e-01, -1.175e-01, -5.174e-02, 2.758e-03, -5.582e-02, 1.000e+00, -1.000e+00, 4.138e-01, -1.000e+00, 1.173e-01) * s0_1_1;
	r0 += M4(6.249e-02, 3.650e-01, 2.015e-01, 2.493e-01, -1.036e-01, 2.869e-02, 2.965e-01, -1.000e+00, -4.630e-02, 2.285e-02, 1.775e-02, -1.546e-01, -1.462e-01, 5.015e-01, -3.224e-02, -1.000e+00) * s0_1_2;
	r1 += M4(1.414e-01, 2.361e-01, 4.081e-02, 1.990e-01, 2.421e-02, -1.000e+00, -1.000e+00, -5.200e-01, -5.585e-02, -3.015e-01, -4.092e-01, -2.133e-01, 1.206e-02, -7.713e-01, -3.462e-01, -1.000e+00) * s0_1_2;
	r2 += M4(3.438e-01, -4.063e-01, 2.604e-02, 1.000e+00, 2.265e-01, 3.778e-01, 2.616e-01, 6.301e-01, -1.617e-01, -1.335e-02, 2.473e-01, -3.651e-01, 2.117e-02, -4.689e-02, -3.242e-01, -4.864e-02) * s0_1_2;
	r0 += M4(1.227e-01, -5.824e-02, 1.526e-01, 2.820e-01, -4.419e-05, -2.151e-02, -3.385e-02, 3.258e-02, -2.053e-03, -1.036e-02, 2.587e-01, 1.036e-01, 6.150e-02, 1.019e-02, 3.171e-02, 5.020e-02) * s0_2_0;
	r1 += M4(4.610e-02, -1.244e-01, -2.201e-01, -2.094e-01, 1.332e-02, 8.773e-02, 5.011e-03, 7.384e-02, -1.180e-01, -2.555e-02, -1.383e-01, 5.338e-02, -1.997e-02, -1.651e-02, -3.204e-02, -5.626e-02) * s0_2_0;
	r2 += M4(1.391e-01, -1.902e-01, -1.337e-01, -1.626e-01, -2.574e-02, 1.753e-02, 4.131e-02, 1.289e-02, -3.906e-01, 1.862e-02, -1.032e-01, -1.821e-01, 3.302e-02, 2.421e-02, 3.980e-02, 3.682e-03) * s0_2_0;
	r0 += M4(1.259e-01, 5.188e-02, 5.447e-02, 1.316e-02, 1.091e-01, -9.289e-02, 6.146e-02, -3.408e-01, 6.609e-02, -6.795e-03, -4.246e-02, -1.363e-01, -5.590e-02, 1.131e-01, -3.732e-02, -5.323e-02) * s0_2_1;
	r1 += M4(-3.806e-01, -4.151e-01, -1.124e-01, -1.533e-01, 7.997e-02, -8.287e-02, 1.126e-02, -1.461e-01, 9.107e-02, -2.029e-01, 1.769e-01, -6.531e-02, 1.704e-01, 7.601e-02, -1.935e-05, -7.249e-02) * s0_2_1;
	r2 += M4(1.769e-01, -1.135e-01, -1.300e-01, -2.380e-01, -2.622e-01, -7.831e-02, -1.000e+00, 3.096e-01, 2.746e-01, 6.078e-02, 2.940e-01, 1.844e-01, -5.287e-02, 5.161e-02, -2.124e-01, -5.113e-02) * s0_2_1;
	r0 += M4(-1.466e-01, -2.564e-01, -7.658e-03, -2.980e-02, -1.897e-02, -3.155e-01, -4.369e-02, -2.080e-01, 1.730e-01, 5.115e-02, 4.168e-02, 2.364e-01, -7.207e-04, 1.018e-01, 5.861e-02, -1.000e-01) * s0_2_2;
	r1 += M4(1.377e-01, 4.520e-01, 2.727e-01, 6.787e-01, -1.614e-02, 3.993e-01, -1.005e-01, -3.195e-01, -6.349e-02, -2.212e-01, -1.011e-02, 6.895e-03, -4.856e-02, 2.865e-02, 1.644e-02, 4.632e-03) * s0_2_2;
	r2 += M4(-9.216e-03, -9.782e-03, -2.646e-01, 3.169e-01, -1.156e-02, -1.555e-01, -7.110e-02, 8.311e-02, 2.184e-01, 8.276e-02, -1.926e-01, -8.250e-02, 2.018e-02, -2.098e-02, -4.292e-02, 1.008e-01) * s0_2_2;
	r0 += V4(-1.053e-02, 1.007e-02, 5.474e-03, -2.785e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.505e-02, 9.005e-02, 2.859e-02, 5.969e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.490e-01, 7.216e-02, 1.111e-02, -1.668e-01);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.080e-02, 8.224e-03, -6.515e-03, -1.504e-01, 1.033e-01, 1.512e-01, 4.135e-01, 1.825e-01, 2.017e-02, 1.199e-01, -2.403e-02, 6.242e-02, 2.715e-02, 1.032e-01, 5.932e-02, -6.011e-02) * s0_0_0;
	r1 += M4(-1.088e-01, 1.472e-01, -7.630e-02, -1.246e-02, 2.810e-03, 8.565e-02, 5.453e-02, 1.031e-01, -2.520e-02, -2.671e-02, -1.355e-01, -1.571e-01, -1.464e-01, 4.686e-02, -6.271e-02, -2.084e-01) * s0_0_0;
	r2 += M4(1.875e-01, -1.448e-01, -3.569e-02, 2.040e-01, -4.997e-01, -7.651e-02, -1.236e-01, -3.566e-02, 9.859e-02, 8.350e-02, -1.359e-01, 1.656e-01, 3.354e-01, 1.172e-01, 5.187e-02, -5.485e-03) * s0_0_0;
	r0 += M4(-5.450e-02, -5.899e-02, 8.496e-01, -3.082e-01, -5.944e-02, 2.915e-02, 2.323e-01, -3.384e-01, -1.286e-01, -1.401e-01, -6.368e-01, 8.590e-02, 6.602e-02, 1.338e-01, -1.371e-01, 9.619e-02) * s0_0_1;
	r1 += M4(2.259e-01, 4.190e-02, -1.961e-02, 1.394e-01, -1.705e-01, 1.721e-01, 2.437e-01, 1.171e-01, 2.662e-01, -2.237e-01, 1.702e-01, 2.055e-01, 1.026e-01, -1.734e-01, 1.872e-01, 9.029e-02) * s0_0_1;
	r2 += M4(-1.173e-01, -6.254e-01, 5.038e-02, -4.621e-02, -4.180e-01, -1.512e-01, -1.382e-01, -1.040e-01, 9.892e-01, 2.422e-01, 6.728e-01, -1.287e-01, -8.942e-02, -1.215e-01, 8.224e-02, 2.424e-01) * s0_0_1;
	r0 += M4(-8.894e-03, 8.895e-03, -1.464e-01, 1.169e-01, -1.170e-01, -1.861e-02, 5.705e-02, 3.461e-01, 1.977e-02, -7.215e-02, -5.658e-02, -1.000e+00, 2.196e-02, 3.045e-02, -6.557e-03, -7.232e-02) * s0_0_2;
	r1 += M4(6.153e-02, 1.022e-02, 1.121e-01, -5.571e-02, 8.973e-02, 9.886e-02, 1.097e-01, 9.844e-02, 8.464e-02, 1.849e-01, -1.559e-01, -1.272e-01, 2.598e-02, -1.410e-01, -5.516e-02, 1.399e-01) * s0_0_2;
	r2 += M4(9.671e-02, 1.240e-01, 2.536e-02, -7.275e-03, 3.468e-02, 1.463e-01, -4.091e-02, 4.067e-02, -8.621e-02, 1.566e-01, -1.384e-01, 2.018e-02, 9.209e-02, -3.209e-01, 6.937e-02, -1.101e-01) * s0_0_2;
	r0 += M4(-1.319e-02, -7.690e-02, -2.166e-01, -1.062e-01, 9.564e-02, -1.641e-01, 3.898e-01, -9.298e-02, 1.211e-02, -4.048e-02, 1.068e-01, 2.053e-01, -4.901e-02, 1.980e-02, 1.270e-01, 1.523e-01) * s0_1_0;
	r1 += M4(-1.804e-02, 2.415e-01, -7.019e-02, 2.471e-02, -2.662e-02, -2.629e-01, -2.011e-01, -3.288e-01, -5.162e-02, -3.992e-02, 2.139e-01, -1.615e-01, 7.449e-03, 7.020e-01, -1.653e-02, 3.514e-01) * s0_1_0;
	r2 += M4(1.250e-02, 2.723e-01, -1.066e-01, 1.253e-01, 2.102e-01, 2.430e-01, 9.352e-02, -5.272e-04, 4.027e-02, -7.885e-03, 1.410e-02, 6.967e-02, 6.277e-02, -3.470e-01, 3.121e-02, 4.554e-01) * s0_1_0;
	r0 += M4(-7.617e-02, 7.343e-02, -8.918e-01, 5.330e-01, -4.913e-01, 8.906e-03, -6.359e-02, -1.000e+00, 2.638e-02, 1.969e-01, -5.492e-01, 6.448e-01, 3.190e-01, 2.838e-01, 5.083e-01, 2.442e-01) * s0_1_1;
	r1 += M4(-7.629e-03, -1.233e-02, 1.812e-01, -5.340e-02, 3.527e-01, 3.333e-01, 2.487e-01, 6.776e-01, -3.757e-02, -1.579e-01, 2.964e-01, 3.698e-02, 1.822e-01, -5.098e-01, 2.354e-01, -1.702e-01) * s0_1_1;
	r2 += M4(-2.580e-01, -4.417e-01, 2.287e-01, -2.281e-01, 1.165e-01, -4.288e-01, -1.746e-01, -4.444e-01, 1.999e-02, -2.650e-01, 1.333e-01, 1.262e-01, -1.179e-01, 6.377e-03, 7.114e-01, 1.810e-01) * s0_1_1;
	r0 += M4(-9.742e-02, 5.370e-03, -1.892e-01, 9.833e-02, -1.972e-02, -3.626e-02, -1.145e-01, 3.800e-01, -1.312e-01, -5.899e-02, 1.076e-01, -4.017e-01, 6.470e-02, -3.221e-02, 1.605e-01, -1.742e-01) * s0_1_2;
	r1 += M4(2.964e-01, -3.444e-02, 3.312e-02, 9.854e-02, -9.088e-03, 3.967e-02, -2.005e-03, -9.719e-02, -4.621e-01, 2.433e-01, 3.554e-02, -1.159e-01, 3.472e-01, -8.760e-02, -1.705e-01, 1.627e-01) * s0_1_2;
	r2 += M4(1.145e-02, -2.661e-01, 1.097e-01, 8.573e-02, 1.258e-02, 1.666e-01, -6.212e-02, -1.373e-01, 3.830e-04, 7.363e-01, -5.939e-02, -6.983e-03, 7.237e-02, -1.722e-01, 7.188e-02, 7.260e-02) * s0_1_2;
	r0 += M4(-4.969e-02, -5.986e-02, 5.711e-02, 1.239e-01, 3.273e-02, 2.605e-02, 1.500e-02, -1.041e-01, -1.345e-03, 4.111e-03, 6.390e-02, 1.127e-01, 4.526e-02, 8.080e-02, 2.348e-01, -8.774e-02) * s0_2_0;
	r1 += M4(1.229e-01, 7.183e-03, -1.381e-02, 2.079e-01, -8.611e-02, 1.811e-01, -1.298e-01, -1.577e-01, 9.215e-02, 8.792e-02, 3.466e-02, 6.102e-02, 1.566e-01, -8.314e-02, -1.176e-01, -2.882e-01) * s0_2_0;
	r2 += M4(-8.745e-02, 9.397e-02, 5.863e-02, -2.611e-02, -2.960e-02, -3.192e-02, -5.923e-02, 3.578e-02, 2.489e-02, -1.564e-01, 4.273e-04, 3.979e-02, -1.031e-01, -7.156e-02, 7.959e-02, 3.540e-01) * s0_2_0;
	r0 += M4(-1.211e-02, 4.674e-02, -2.445e-01, -2.904e-03, -1.006e-01, 5.814e-03, -4.729e-02, 5.926e-02, 9.789e-02, -4.575e-02, -1.009e-01, 2.692e-01, 1.609e-02, -4.546e-02, 3.769e-01, -3.744e-02) * s0_2_1;
	r1 += M4(-1.744e-01, -1.263e-01, -6.607e-02, -8.140e-02, 6.285e-02, -5.848e-02, 4.252e-02, 4.772e-04, 4.611e-02, 2.503e-02, 3.186e-02, -2.777e-02, 2.313e-01, 1.180e-01, -8.452e-02, 9.246e-02) * s0_2_1;
	r2 += M4(1.548e-01, -2.213e-01, -1.183e-01, 2.930e-02, 2.292e-02, 5.304e-02, 3.927e-02, -2.132e-01, 2.257e-02, -9.656e-03, 8.560e-03, -1.170e-01, 9.357e-02, -6.012e-01, -1.104e-01, 6.531e-02) * s0_2_1;
	r0 += M4(1.841e-02, -3.576e-02, 4.889e-01, 4.194e-02, -1.233e-03, 2.392e-02, -7.544e-02, 4.423e-02, 5.693e-03, 1.288e-02, 9.580e-02, -6.812e-03, -5.816e-02, -4.960e-02, 2.151e-01, 5.492e-02) * s0_2_2;
	r1 += M4(3.834e-02, 2.334e-02, -1.734e-01, -1.019e-02, 8.068e-02, 1.508e-02, 4.026e-02, 5.022e-02, 2.183e-01, 2.468e-01, 7.202e-02, 3.289e-02, -4.326e-02, 1.372e-01, -6.735e-02, 2.960e-01) * s0_2_2;
	r2 += M4(9.774e-03, 6.030e-03, 3.517e-03, -4.676e-02, 2.203e-02, 8.067e-02, -2.543e-02, -3.635e-04, -3.868e-02, -2.017e-01, 3.597e-02, 3.689e-02, 6.304e-02, -5.684e-01, -6.452e-02, 8.158e-02) * s0_2_2;
	r0 += M4(1.119e-02, -2.136e-01, 1.545e-01, -3.310e-01, -4.485e-02, -1.029e-01, -2.261e-01, -4.636e-02, -8.964e-02, -2.005e-02, -3.042e-01, 3.327e-02, 7.346e-02, 1.352e-01, 2.024e-01, 7.355e-04) * s1_0_0;
	r1 += M4(-9.912e-02, 9.289e-02, 2.509e-02, -2.772e-02, 1.810e-01, -1.832e-02, 1.201e-01, 5.734e-02, 1.328e-01, -1.772e-01, 2.944e-02, 5.885e-02, 5.083e-02, 6.715e-03, -7.704e-02, -1.656e-01) * s1_0_0;
	r2 += M4(-1.423e-02, -7.982e-02, -7.654e-02, 4.816e-02, 4.132e-02, 3.545e-01, 3.798e-02, -1.020e-01, -1.076e-01, 4.176e-02, 5.528e-02, 4.538e-02, -1.209e-02, -7.470e-02, 4.409e-03, 4.032e-02) * s1_0_0;
	r0 += M4(2.684e-02, -1.239e-01, 3.778e-01, 1.879e-01, -3.307e-03, 6.498e-03, -7.027e-01, 5.046e-02, -3.942e-03, -6.681e-02, -1.963e-01, 5.773e-02, -9.482e-02, -5.774e-02, 8.914e-02, 4.777e-01) * s1_0_1;
	r1 += M4(1.011e-01, -8.350e-02, -5.340e-02, -7.013e-02, 2.208e-02, 4.297e-02, 9.460e-02, -8.361e-02, 7.714e-02, -8.645e-02, -4.848e-01, -8.789e-02, 3.364e-01, 4.985e-02, -3.589e-03, 1.966e-01) * s1_0_1;
	r2 += M4(1.325e-01, -2.661e-01, 2.701e-02, 7.282e-02, 1.220e-01, 3.631e-01, -8.665e-02, 6.382e-02, 1.166e-01, 9.064e-02, -2.472e-01, 1.987e-02, 3.732e-02, -1.426e-01, -4.255e-02, -8.281e-03) * s1_0_1;
	r0 += M4(1.695e-01, 9.369e-02, -2.627e-01, -2.806e-01, -3.059e-02, -1.585e-02, -2.475e-01, -1.337e-01, 1.627e-02, -2.676e-02, 8.041e-02, -4.440e-02, 3.627e-02, 1.211e-02, -3.437e-01, -4.689e-02) * s1_0_2;
	r1 += M4(-2.057e-01, -1.349e-01, -6.422e-02, -2.015e-01, -6.772e-02, 3.115e-02, 6.911e-02, 8.723e-02, 9.420e-03, -1.560e-02, -1.774e-01, -1.204e-01, 1.215e-01, -2.120e-02, -4.397e-02, -1.078e-01) * s1_0_2;
	r2 += M4(-9.378e-02, -7.011e-02, 6.732e-02, -6.214e-02, -1.116e-01, -2.442e-02, 5.639e-02, -1.177e-01, -5.289e-02, 3.374e-02, 1.215e-02, 1.668e-02, 9.366e-02, 3.650e-01, -8.215e-02, 1.504e-02) * s1_0_2;
	r0 += M4(2.294e-02, -5.671e-02, -2.655e-01, -1.821e-01, -2.899e-02, -5.510e-02, -2.256e-01, -1.819e-02, -6.088e-02, 1.773e-01, -4.161e-02, -1.385e-03, 6.405e-02, 1.972e-02, 1.919e-01, 3.024e-01) * s1_1_0;
	r1 += M4(-1.546e-01, 2.534e-01, -1.567e-01, -1.306e-01, 5.514e-02, -3.517e-02, 1.135e-01, 1.484e-01, -7.750e-03, -7.252e-01, 1.352e-01, 1.367e-01, 2.303e-01, 1.511e-01, -2.303e-02, -2.173e-02) * s1_1_0;
	r2 += M4(1.205e-01, 3.865e-01, 1.326e-02, -1.003e-01, -1.729e-01, 7.069e-03, -3.071e-02, -7.373e-02, 8.872e-02, -2.442e-01, -5.598e-02, 1.162e-01, 1.674e-01, 1.540e-01, 9.410e-02, 9.945e-02) * s1_1_0;
	r0 += M4(-4.557e-01, 4.786e-01, -6.456e-01, -4.692e-02, -1.191e-01, -3.967e-02, 2.460e-01, -2.326e-01, 2.152e-01, 1.324e-01, -4.041e-01, -1.000e+00, -8.768e-03, 2.566e-02, -7.029e-02, 2.518e-01) * s1_1_1;
	r1 += M4(3.498e-01, 5.157e-01, 6.151e-01, 2.927e-01, 3.681e-01, -9.363e-02, -1.518e-02, 1.385e-01, -4.353e-01, 2.153e-01, -3.143e-01, 8.107e-01, 4.466e-01, 2.961e-01, 7.213e-03, 1.998e-01) * s1_1_1;
	r2 += M4(-6.694e-02, -1.220e-01, 4.051e-02, 1.166e-01, -2.075e-01, -2.410e-01, -7.819e-03, -1.772e-01, 3.021e-02, -4.047e-02, -8.009e-02, 2.766e-01, 5.895e-02, -1.000e+00, 2.422e-01, -5.353e-02) * s1_1_1;
	r0 += M4(2.564e-01, 1.374e-01, -1.419e-01, 2.569e-01, 5.883e-02, 4.713e-02, -5.588e-02, 1.159e-01, -7.457e-02, -4.759e-02, 1.292e-01, -6.208e-01, -6.863e-02, -1.594e-02, -3.527e-01, 1.918e-01) * s1_1_2;
	r1 += M4(-6.485e-01, -6.692e-01, -8.993e-02, -1.148e-01, -4.531e-01, -1.343e-01, -8.650e-02, -8.376e-02, -1.000e+00, 3.758e-03, -6.260e-02, -2.628e-01, 3.752e-01, -1.293e-01, 1.016e-01, -3.367e-02) * s1_1_2;
	r2 += M4(-1.016e-01, -4.326e-01, 3.768e-01, 7.509e-02, -2.070e-02, 2.036e-01, -6.118e-03, -3.359e-02, 7.904e-02, 1.192e-01, -2.039e-01, -1.761e-02, 9.196e-02, -3.263e-01, 1.002e-01, 9.826e-02) * s1_1_2;
	r0 += M4(-9.218e-03, -2.204e-02, -1.050e-01, -1.041e-01, 5.512e-02, 1.461e-01, -2.155e-01, 8.805e-02, 2.424e-02, -2.115e-02, 3.780e-01, 1.227e-01, -4.327e-02, -1.599e-02, -2.180e-01, -4.360e-02) * s1_2_0;
	r1 += M4(-1.967e-01, 9.216e-02, -1.292e-01, 1.001e-02, 9.384e-02, 6.721e-02, 4.966e-02, 6.035e-02, 6.648e-02, -3.286e-01, 9.903e-02, -1.018e-01, -8.394e-04, 1.267e-01, 5.052e-02, -3.527e-02) * s1_2_0;
	r2 += M4(-4.599e-02, 1.325e-01, -1.068e-01, 5.388e-02, 7.542e-02, 5.601e-03, -1.340e-02, -2.195e-01, -1.916e-02, -2.449e-01, 8.197e-02, 7.408e-02, -7.087e-03, 1.134e-01, -4.507e-02, -2.196e-01) * s1_2_0;
	r0 += M4(-5.339e-02, -9.813e-03, -2.835e-01, -2.538e-02, -1.413e-01, 2.316e-02, -2.964e-01, 4.657e-02, 1.299e-01, 1.262e-02, 4.505e-01, 4.241e-02, 2.773e-02, 2.667e-02, -3.527e-01, 1.136e-01) * s1_2_1;
	r1 += M4(-7.954e-02, 5.270e-02, 6.959e-02, -4.774e-02, 2.792e-01, -9.504e-02, -1.055e-01, 1.028e-01, -1.500e-01, 3.648e-02, -2.769e-02, 5.967e-03, 1.948e-01, 2.515e-02, -6.538e-02, -2.649e-01) * s1_2_1;
	r2 += M4(-8.515e-02, 2.800e-01, 5.109e-02, 9.889e-02, -1.695e-01, 3.885e-01, 2.624e-01, -2.399e-01, 6.484e-02, -5.524e-01, 6.419e-02, 2.549e-01, -1.816e-02, 6.350e-01, -2.697e-02, 1.504e-02) * s1_2_1;
	r0 += M4(1.764e-01, 1.554e-02, 3.736e-01, -1.057e-02, 1.687e-02, -3.491e-02, -1.449e-01, -2.859e-01, 1.125e-01, 1.247e-02, -6.595e-02, 1.206e-01, 1.596e-02, -1.946e-02, 2.587e-01, -7.564e-03) * s1_2_2;
	r1 += M4(-3.205e-02, -2.431e-01, -2.468e-03, 3.988e-02, 1.497e-01, -9.632e-03, -1.059e-01, -1.228e-02, 6.982e-07, 2.063e-01, 1.340e-02, -1.311e-01, 5.419e-02, -9.555e-02, -1.013e-01, -1.264e-01) * s1_2_2;
	r2 += M4(1.152e-01, -7.534e-02, -5.087e-02, 4.787e-02, -3.257e-02, 3.368e-01, 1.699e-02, -1.919e-01, -6.804e-02, -9.945e-02, -1.762e-02, 1.212e-01, 7.891e-02, 2.177e-02, 4.554e-02, -9.190e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-3.702e-02, 8.186e-02, -1.285e-01, -8.561e-03, -4.314e-02, 8.879e-02, -2.820e-01, 2.133e-01, -2.026e-02, 2.507e-02, -1.516e-01, 1.128e-01, 5.383e-02, 1.949e-02, 1.334e-01, 8.192e-03) * s0_0_0;
	r1 += M4(7.429e-02, -1.734e-01, 1.031e-01, -4.001e-02, 6.952e-02, -1.576e-01, -1.029e-01, 6.590e-02, -7.894e-02, 1.755e-01, 7.571e-02, -9.239e-02, -6.878e-02, 1.471e-01, 3.075e-01, -6.540e-02) * s0_0_0;
	r2 += M4(2.996e-01, -9.158e-02, -3.985e-02, 5.133e-02, 4.821e-02, 1.082e-01, 1.864e-02, -2.800e-02, -6.461e-03, -1.354e-01, -1.629e-02, -3.922e-02, -3.457e-02, -2.555e-02, 1.485e-01, 2.857e-02) * s0_0_0;
	r0 += M4(4.124e-02, 1.736e-01, -2.691e-01, -5.817e-02, 2.205e-02, 8.434e-02, -2.561e-01, -1.416e-01, 9.888e-02, 1.918e-01, -1.898e-01, 4.413e-01, 7.349e-02, 5.445e-02, -5.526e-02, -1.634e-02) * s0_0_1;
	r1 += M4(2.301e-01, 2.950e-02, 1.829e-01, 4.327e-01, -1.599e-02, -5.684e-02, -8.031e-02, -5.975e-03, -1.689e-01, 3.014e-01, 8.885e-02, -9.453e-02, 7.414e-02, -6.107e-03, 1.511e-01, 6.200e-02) * s0_0_1;
	r2 += M4(-5.373e-02, -2.596e-01, 1.960e-01, 8.732e-02, -7.104e-02, 3.058e-01, -4.668e-02, 2.689e-02, -8.393e-03, -2.133e-01, -2.350e-01, -1.738e-01, 2.043e-01, -6.015e-02, 8.231e-02, -4.045e-02) * s0_0_1;
	r0 += M4(1.709e-01, 1.313e-01, 3.979e-01, -2.322e-01, -1.122e-01, -3.953e-03, 3.134e-02, 5.334e-01, -1.447e-04, 2.648e-02, -5.372e-01, 3.399e-01, 3.934e-02, 7.975e-03, 1.204e-01, -1.738e-01) * s0_0_2;
	r1 += M4(6.152e-02, 1.023e-01, -1.754e-01, 1.329e-01, 2.055e-01, -1.912e-02, -8.567e-02, 2.954e-02, -4.851e-01, 2.579e-01, 2.131e-01, 2.989e-01, 8.474e-02, -9.356e-02, -6.992e-03, 1.090e-01) * s0_0_2;
	r2 += M4(5.221e-02, -1.249e-01, 2.246e-02, -6.123e-02, 1.739e-01, 1.898e-03, -9.367e-02, 5.479e-02, -4.561e-02, 2.112e-02, 1.077e-01, -9.950e-02, -4.553e-02, 3.107e-01, -4.042e-02, -1.450e-02) * s0_0_2;
	r0 += M4(-5.506e-02, 1.182e-01, -1.707e-01, -2.370e-02, -2.580e-04, 2.783e-01, 2.510e-01, 2.588e-01, -2.889e-02, -3.221e-02, -2.161e-01, 9.109e-02, 7.613e-02, 9.382e-02, -3.249e-01, 1.406e-01) * s0_1_0;
	r1 += M4(4.746e-02, 2.047e-02, -1.405e-01, 1.098e-01, 2.058e-01, -2.804e-01, 3.585e-01, 1.631e-01, -1.251e-04, 5.568e-02, 1.647e-01, -6.861e-03, -3.274e-01, 8.522e-01, 6.335e-03, -2.497e-01) * s0_1_0;
	r2 += M4(2.057e-02, -8.415e-02, -5.425e-02, 4.013e-02, -2.167e-01, -2.609e-01, 7.539e-02, 2.863e-02, 5.416e-02, -3.793e-02, -1.094e-02, 4.676e-02, -2.815e-01, -5.449e-01, -1.820e-01, 1.646e-01) * s0_1_0;
	r0 += M4(-2.608e-02, -2.263e-01, 3.371e-01, -2.965e-01, 3.377e-01, 5.981e-02, 1.379e-01, -1.368e-01, 1.656e-01, 2.423e-02, 1.420e-01, 3.308e-01, 2.567e-02, 3.636e-02, -6.075e-01, 5.605e-01) * s0_1_1;
	r1 += M4(1.978e-01, -7.733e-02, -3.309e-02, -6.286e-01, -6.987e-01, -2.873e-01, -3.866e-01, -3.367e-01, 8.561e-02, 3.006e-02, 3.024e-01, -4.645e-02, -1.000e+00, -2.723e-01, -1.520e-01, -1.000e+00) * s0_1_1;
	r2 += M4(8.134e-02, 7.769e-01, 3.541e-01, 4.099e-01, 4.573e-02, 2.879e-01, 8.720e-02, 3.521e-02, 9.229e-02, -1.685e-01, -6.611e-02, -2.936e-02, 3.174e-02, -9.830e-01, 1.720e-01, 9.880e-02) * s0_1_1;
	r0 += M4(1.505e-01, 3.190e-02, -6.973e-01, 6.131e-01, 3.996e-01, -8.109e-02, 6.741e-01, -8.034e-01, 1.335e-01, 2.243e-02, -2.126e-02, 1.401e-01, 7.396e-02, 1.253e-02, 1.111e-01, 1.787e-03) * s0_1_2;
	r1 += M4(1.000e+00, -1.764e-01, -2.242e-01, -1.088e-01, -8.070e-01, -2.169e-01, -3.450e-01, -3.368e-01, -1.045e-01, 2.951e-01, 1.454e-01, 6.349e-02, 1.508e-01, 2.528e-02, -1.136e-01, 2.601e-01) * s0_1_2;
	r2 += M4(1.236e-01, -8.322e-01, 3.643e-01, 1.175e-02, -1.238e-01, 4.524e-01, -1.883e-02, -7.214e-02, 8.626e-02, -5.493e-02, -1.242e-01, 2.035e-01, -5.133e-02, 7.718e-02, 3.355e-02, 1.902e-01) * s0_1_2;
	r0 += M4(2.955e-02, 9.321e-02, -3.006e-03, 8.805e-02, -2.859e-02, -3.562e-02, 6.604e-02, 1.431e-01, 4.808e-03, -5.146e-03, -3.193e-02, 4.644e-02, -3.479e-02, -2.241e-02, 5.009e-02, -8.987e-02) * s0_2_0;
	r1 += M4(5.302e-02, -4.138e-02, -2.207e-02, -9.714e-02, 1.392e-01, -1.540e-01, 2.949e-01, -2.510e-03, -7.412e-03, 3.944e-02, 5.316e-02, 8.210e-02, -9.808e-03, 3.288e-02, -5.982e-02, 1.060e-02) * s0_2_0;
	r2 += M4(1.448e-01, -3.624e-01, -2.430e-02, 1.613e-02, 4.548e-02, -3.735e-01, 8.759e-02, -6.244e-02, 2.146e-02, 2.734e-02, 4.690e-03, 4.601e-02, -1.044e-01, 1.510e-01, -7.324e-02, -4.147e-02) * s0_2_0;
	r0 += M4(-3.588e-02, 4.903e-02, -1.591e-02, -2.148e-02, 1.777e-01, 1.422e-02, 3.958e-01, -1.596e-01, 2.210e-02, -9.384e-03, -1.194e-01, 1.337e-01, -7.581e-02, -4.720e-02, 2.145e-01, -1.781e-01) * s0_2_1;
	r1 += M4(-3.650e-02, 5.683e-01, -1.304e-01, 3.263e-02, 6.807e-02, -2.889e-01, 1.592e-01, 5.420e-02, 2.517e-02, 1.118e-01, 5.890e-02, -2.294e-02, -1.300e-01, -1.340e-01, -4.665e-03, -1.413e-01) * s0_2_1;
	r2 += M4(-1.675e-01, -7.391e-02, 3.075e-01, -9.473e-02, 8.190e-02, -2.644e-01, -2.787e-02, 2.549e-01, -1.428e-02, 6.205e-02, 1.752e-02, -5.628e-02, 3.446e-02, -1.973e-02, 1.512e-03, 8.887e-02) * s0_2_1;
	r0 += M4(-1.406e-01, -1.658e-02, -4.091e-02, -9.438e-02, 1.229e-01, 3.520e-02, -3.126e-01, -8.059e-02, 3.177e-02, -1.625e-02, -1.610e-01, 1.419e-01, 4.261e-02, -6.682e-03, 2.518e-01, -3.355e-01) * s0_2_2;
	r1 += M4(5.238e-02, -2.753e-01, -1.438e-01, 9.058e-02, 1.007e-01, -5.278e-02, -1.194e-02, -1.138e-01, -8.166e-03, 1.969e-01, 4.614e-02, -6.301e-02, 5.232e-02, -1.769e-02, -6.613e-03, 1.071e-01) * s0_2_2;
	r2 += M4(7.443e-02, 4.741e-01, -4.110e-02, -3.757e-02, -7.958e-02, -1.636e-01, 1.081e-01, 3.311e-01, -3.119e-02, 2.781e-01, -3.037e-02, -3.852e-02, 6.983e-02, 1.423e-01, -3.553e-02, 5.565e-02) * s0_2_2;
	r0 += V4(1.504e-02, -2.305e-02, 2.327e-02, 5.573e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.184e-02, -5.303e-03, -2.836e-02, -9.337e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.755e-02, -7.069e-03, -1.208e-02, 1.337e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12] -conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.794e-02, -2.655e-02, -1.734e-03, 6.068e-02, -6.046e-02, -2.793e-03, 1.653e-02, 1.132e-02, -1.120e-02, 5.729e-03, -9.837e-02, -2.387e-01, 6.895e-02, 5.848e-03, 1.191e-01, 1.110e-01) * s0_0_0;
	r1 += M4(1.255e-01, -1.391e-01, 1.871e-02, 3.159e-02, -3.000e-02, -1.003e-02, -2.734e-04, -4.647e-02, -3.572e-02, -8.494e-02, 6.869e-02, -5.849e-02, -4.153e-02, 3.033e-02, 3.257e-02, 1.247e-02) * s0_0_0;
	r2 += M4(7.367e-02, 1.147e-01, -1.696e-04, 1.277e-01, -4.506e-02, 1.363e-02, -4.306e-02, -1.371e-02, 1.874e-01, 7.051e-02, 7.079e-02, -1.746e-01, -1.207e-01, -2.556e-02, -6.765e-02, -1.532e-01) * s0_0_0;
	r0 += M4(1.384e-01, 9.831e-02, 4.352e-01, -1.715e-03, 4.065e-02, -1.024e-02, -1.433e-01, -2.704e-01, -3.414e-02, -7.147e-02, 2.144e-01, 5.574e-02, -8.381e-02, -5.923e-02, -4.764e-02, 1.848e-01) * s0_0_1;
	r1 += M4(1.273e-01, -1.661e-01, -8.911e-02, -1.648e-02, -8.719e-02, 8.661e-02, -4.846e-02, -1.531e-01, 1.044e-01, 4.020e-02, 6.225e-03, -1.400e-01, 3.011e-02, 3.859e-03, 3.377e-02, 4.314e-02) * s0_0_1;
	r2 += M4(-2.251e-01, 1.816e-01, -2.141e-01, 2.711e-03, 1.017e-01, -5.609e-02, 4.164e-02, -2.056e-02, 1.606e-01, 5.054e-02, -2.405e-01, -1.091e-01, -9.551e-02, -4.620e-02, 7.256e-02, 6.992e-02) * s0_0_1;
	r0 += M4(4.003e-03, -6.343e-02, 1.214e-01, 9.452e-02, 2.144e-02, -3.644e-02, 5.456e-02, 1.674e-01, 1.411e-02, 1.379e-02, 1.160e-01, -1.197e-02, -3.180e-02, 6.707e-02, -2.319e-01, -2.144e-01) * s0_0_2;
	r1 += M4(-7.351e-02, -1.027e-01, -6.421e-02, 3.587e-02, 5.318e-02, 1.100e-01, 5.804e-02, 3.748e-02, -1.926e-02, 4.053e-03, 1.202e-02, -1.478e-01, -7.955e-03, 1.340e-02, -1.956e-02, 7.466e-02) * s0_0_2;
	r2 += M4(-9.825e-02, -1.579e-02, 9.827e-02, 1.634e-01, 1.052e-01, 6.342e-02, -1.410e-01, -5.470e-02, 5.288e-02, -8.362e-02, -2.273e-01, -6.303e-02, -9.104e-02, -1.349e-02, 1.922e-02, -3.187e-02) * s0_0_2;
	r0 += M4(-3.797e-01, 5.085e-02, -1.285e-02, -2.915e-01, -2.804e-02, -3.997e-02, 1.884e-02, 3.625e-02, -1.753e-01, -1.060e-03, 2.567e-01, 7.903e-03, -1.128e-01, -1.382e-01, -1.972e-02, 1.659e-01) * s0_1_0;
	r1 += M4(7.357e-02, 6.938e-02, -3.628e-02, 1.502e-01, 8.907e-02, -9.059e-02, -8.539e-02, 8.591e-03, 2.487e-01, 1.436e-01, 4.270e-02, 3.049e-02, -1.966e-01, 5.784e-02, -2.608e-01, 5.669e-02) * s0_1_0;
	r2 += M4(-2.306e-01, -2.594e-01, 2.061e-01, -5.996e-01, 3.430e-01, 4.257e-02, -4.783e-03, 5.179e-02, 5.803e-02, -6.504e-02, -1.472e-01, -1.543e-04, -2.358e-01, -4.933e-03, -7.060e-02, -3.153e-01) * s0_1_0;
	r0 += M4(-1.564e-01, 5.177e-02, -1.650e-01, -8.826e-02, -3.794e-01, 2.988e-01, 3.691e-02, -9.327e-01, 1.244e-01, 1.689e-02, -3.924e-02, 5.602e-01, -1.857e-01, -2.913e-01, -3.487e-01, 2.283e-01) * s0_1_1;
	r1 += M4(4.072e-01, -3.402e-01, -5.663e-02, 1.795e-02, -1.732e-01, 5.722e-01, 8.854e-02, -7.781e-02, 2.189e-02, 7.023e-02, -2.167e-02, 2.566e-01, 1.109e-02, 4.166e-02, 2.557e-02, 9.887e-02) * s0_1_1;
	r2 += M4(-4.423e-01, 6.293e-01, 5.566e-01, 2.325e-01, -4.731e-01, -5.379e-01, -4.243e-01, 2.379e-01, -5.461e-02, -2.957e-02, -5.969e-01, -1.763e-01, -9.637e-02, -4.923e-01, -1.383e-01, -1.821e-01) * s0_1_1;
	r0 += M4(1.296e-02, 1.565e-02, 2.592e-01, -4.938e-02, -3.743e-01, -3.334e-01, -4.599e-01, -9.034e-02, 1.150e-03, -7.895e-02, 1.855e-01, -1.722e-02, -7.928e-02, 1.020e-01, -4.067e-01, -6.431e-02) * s0_1_2;
	r1 += M4(3.606e-02, -3.242e-03, 1.205e-02, -1.811e-01, -4.044e-02, 1.623e-01, 4.074e-02, 1.455e-01, 3.138e-02, 4.458e-02, -2.698e-02, 2.589e-01, -2.880e-02, -3.070e-02, 5.574e-03, -7.109e-02) * s0_1_2;
	r2 += M4(-2.681e-02, -7.848e-02, 2.234e-01, 1.447e-01, 2.910e-01, 1.904e-01, 1.094e-01, -2.699e-01, -7.154e-03, -1.135e-01, -7.726e-02, -5.928e-02, -1.002e-01, 2.299e-02, -6.644e-02, 5.717e-02) * s0_1_2;
	r0 += M4(7.201e-02, 4.693e-04, -4.927e-03, 1.818e-03, 4.155e-02, 4.275e-02, -2.872e-02, 7.139e-03, -2.354e-02, 9.864e-03, 2.956e-01, -1.647e-02, -1.534e-01, -8.235e-03, -8.443e-02, -1.024e-01) * s0_2_0;
	r1 += M4(3.477e-02, -6.352e-02, -1.502e-01, -3.037e-01, 5.141e-02, -1.383e-01, 1.194e-01, -1.676e-02, 3.770e-02, 7.482e-02, 9.790e-02, 1.853e-02, -9.158e-02, 9.648e-02, -2.317e-01, -2.936e-01) * s0_2_0;
	r2 += M4(-1.209e-01, 6.379e-02, 1.757e-01, 3.453e-01, 1.333e-01, 5.635e-02, 4.194e-02, -2.780e-02, 4.073e-02, -3.734e-02, -1.534e-01, -3.390e-01, 3.490e-02, -4.086e-03, -4.292e-02, 1.830e-02) * s0_2_0;
	r0 += M4(1.824e-01, 8.326e-02, -1.114e-01, 6.519e-02, 4.723e-01, 1.234e-01, 1.134e-01, 1.624e-01, -9.509e-02, -3.613e-02, 2.753e-01, 1.460e-01, -3.083e-01, -1.191e-01, -4.532e-01, -1.196e-02) * s0_2_1;
	r1 += M4(-4.644e-03, -2.335e-02, 1.353e-01, 2.790e-02, 4.728e-01, -1.913e-01, -2.891e-01, -9.052e-02, -1.713e-02, -1.332e-02, -1.474e-02, 1.600e-01, 7.971e-02, 5.653e-02, -6.493e-02, -3.138e-01) * s0_2_1;
	r2 += M4(-2.967e-04, 7.405e-02, 1.149e-04, 8.338e-02, 1.119e-02, 4.923e-02, 2.420e-03, 6.207e-01, 1.680e-03, -3.725e-02, -5.649e-02, -9.816e-02, 2.826e-02, -6.439e-02, -1.251e-01, -7.062e-02) * s0_2_1;
	r0 += M4(2.864e-02, 1.015e-01, -1.809e-01, 9.145e-02, 2.805e-01, -1.234e-01, -4.082e-01, -1.373e-01, -2.965e-02, -5.847e-02, -4.944e-02, -8.145e-02, -7.067e-02, 8.112e-02, 2.129e-01, -1.139e-01) * s0_2_2;
	r1 += M4(4.010e-02, -4.591e-02, 1.057e-01, 1.362e-01, -1.468e-02, 1.069e-01, -2.059e-01, -3.700e-01, 1.725e-03, 5.608e-02, -5.530e-02, -1.053e-01, 7.507e-03, 2.399e-02, 5.732e-02, -1.086e-01) * s0_2_2;
	r2 += M4(-1.015e-01, -1.004e-02, 5.317e-02, 1.489e-01, 1.542e-01, -1.227e-01, -7.619e-02, -6.456e-02, -1.201e-02, -1.091e-02, -8.632e-02, -9.975e-02, -4.851e-02, -4.187e-02, -1.177e-01, -5.660e-03) * s0_2_2;
	r0 += M4(1.147e-01, -1.130e-01, 1.185e-01, 2.585e-01, 6.222e-02, 4.807e-02, 1.116e-01, 1.151e-01, -6.112e-02, -3.026e-02, -9.759e-02, -1.097e-01, -1.083e-01, 3.042e-02, -1.724e-01, -3.446e-01) * s1_0_0;
	r1 += M4(5.205e-02, -7.203e-02, -1.566e-01, 9.765e-02, 3.004e-02, 6.802e-03, 4.957e-03, 1.234e-02, -2.115e-02, 2.224e-02, 3.107e-02, 3.057e-02, -4.894e-02, -6.518e-02, -4.622e-02, -4.294e-02) * s1_0_0;
	r2 += M4(1.178e-01, 1.234e-01, -1.027e-01, 1.164e-01, -1.376e-02, 1.164e-01, -5.429e-02, 2.399e-02, 2.558e-02, -2.698e-02, 1.070e-01, 7.265e-02, 6.144e-02, -4.384e-02, 1.816e-01, 8.466e-02) * s1_0_0;
	r0 += M4(1.517e-01, -4.940e-02, -2.550e-01, 2.858e-01, 6.728e-02, 3.763e-02, -6.212e-03, 3.361e-01, -3.693e-02, 4.201e-03, 1.820e-02, 7.751e-02, 5.278e-02, 1.694e-01, -7.903e-03, -5.492e-01) * s1_0_1;
	r1 += M4(-8.913e-03, -5.747e-02, -3.264e-02, 1.145e-01, -1.003e-01, 8.071e-02, 1.044e-01, 2.208e-02, 1.087e-01, -4.254e-02, -9.638e-03, 1.556e-01, -5.129e-03, 3.441e-02, -3.117e-02, -1.785e-01) * s1_0_1;
	r2 += M4(1.716e-01, -9.070e-02, 1.678e-01, -5.562e-02, -1.419e-01, -6.102e-02, -1.377e-01, -4.625e-02, 3.232e-02, -1.253e-01, 7.086e-02, -2.552e-02, 2.511e-02, 1.140e-01, 7.590e-02, 1.603e-02) * s1_0_1;
	r0 += M4(6.883e-03, 3.098e-02, 1.010e-01, 4.717e-02, -3.815e-04, -4.364e-02, -2.363e-01, 6.110e-02, -3.018e-03, 1.828e-02, -8.752e-02, 3.362e-02, 2.004e-02, 6.662e-02, 1.753e-01, 7.467e-02) * s1_0_2;
	r1 += M4(2.903e-02, -6.346e-02, 1.102e-02, 3.438e-02, -5.093e-02, 4.860e-02, 1.320e-02, 3.548e-03, -5.554e-02, -9.067e-02, -3.819e-02, 4.217e-02, 1.747e-02, -4.796e-02, -5.010e-03, -2.310e-02) * s1_0_2;
	r2 += M4(2.430e-02, 1.687e-02, -1.437e-02, 4.534e-02, -6.529e-02, -1.342e-02, 9.087e-02, -3.083e-03, 9.532e-02, -6.900e-02, 5.899e-02, 1.209e-01, -2.332e-02, -4.118e-02, -1.187e-01, 2.551e-02) * s1_0_2;
	r0 += M4(2.580e-01, -1.707e-01, -1.697e-01, 9.561e-02, 4.716e-02, 7.331e-02, -3.602e-01, 1.345e-02, -7.402e-02, -1.667e-04, 5.220e-02, -1.159e-01, 4.786e-02, -2.121e-02, -4.440e-02, -1.031e-01) * s1_1_0;
	r1 += M4(-3.874e-01, -1.253e-01, -1.363e-01, -6.817e-02, -1.833e-01, 9.646e-02, 1.266e-01, -1.182e-01, 5.275e-02, 4.352e-02, 6.763e-02, -2.105e-02, 1.506e-01, -5.010e-02, -8.407e-02, 1.669e-01) * s1_1_0;
	r2 += M4(3.786e-01, -1.889e-02, 2.958e-02, -1.412e-01, -7.119e-02, 8.527e-02, 7.436e-02, 3.057e-01, -1.983e-01, -1.031e-01, -1.250e-02, 2.477e-02, 1.111e-01, -3.039e-02, 1.756e-01, 1.190e-01) * s1_1_0;
	r0 += M4(5.059e-01, -1.099e-01, -2.091e-01, 3.876e-01, -2.774e-01, 7.271e-02, 3.742e-01, 6.744e-02, 5.020e-01, -3.239e-02, 3.426e-01, 3.443e-01, 1.069e-01, 3.680e-01, -9.864e-02, -2.203e-01) * s1_1_1;
	r1 += M4(-2.286e-01, -1.062e-02, -3.902e-01, -1.705e-01, -1.902e-01, 1.366e-01, -9.787e-02, 6.864e-02, -2.096e-01, 1.642e-01, 3.802e-01, -2.295e-01, 1.213e-01, 8.385e-02, 1.963e-01, 3.025e-01) * s1_1_1;
	r2 += M4(2.121e-01, -3.795e-02, -1.675e-01, 1.003e-01, 6.059e-02, -2.580e-01, -1.092e-01, -3.199e-01, -9.003e-03, 2.307e-01, -1.538e-01, 2.446e-02, -3.960e-01, 8.944e-02, 1.175e-01, 1.875e-01) * s1_1_1;
	r0 += M4(-7.381e-02, -3.261e-02, 3.450e-01, 1.140e-01, 3.023e-02, -5.676e-02, -8.039e-02, -3.559e-02, -1.251e-01, -2.162e-01, 3.484e-02, 1.296e-01, -8.901e-03, 2.698e-02, 1.556e-01, 1.251e-01) * s1_1_2;
	r1 += M4(2.415e-02, -3.536e-02, -2.901e-02, 1.772e-01, -5.275e-02, 6.964e-02, -1.286e-01, -1.343e-01, 2.351e-01, -1.787e-02, -5.405e-02, 1.254e-01, 1.822e-02, -4.875e-02, 5.328e-02, 8.736e-02) * s1_1_2;
	r2 += M4(1.802e-02, -2.096e-02, 9.922e-02, -2.460e-02, 4.528e-02, -1.660e-01, -2.053e-01, -2.661e-02, -3.902e-02, -1.078e-01, 7.168e-02, 3.708e-03, -2.056e-01, 1.004e-01, 1.866e-01, 8.690e-02) * s1_1_2;
	r0 += M4(7.634e-02, -1.582e-01, 3.307e-02, 1.076e-01, 7.005e-03, 2.321e-02, -4.793e-03, 1.322e-02, 6.979e-02, -3.886e-03, 7.930e-02, 2.558e-02, -4.991e-02, 5.484e-02, 9.448e-03, -1.537e-01) * s1_2_0;
	r1 += M4(-3.307e-02, 2.413e-02, -1.374e-01, -1.566e-01, -3.343e-02, -4.925e-02, 8.202e-02, 9.701e-02, 2.970e-02, 2.084e-02, -4.553e-02, 1.126e-01, -1.483e-02, 5.548e-02, -2.024e-03, -5.608e-02) * s1_2_0;
	r2 += M4(1.698e-01, 1.426e-01, 3.378e-02, -2.533e-01, -3.191e-02, 4.488e-02, 9.287e-02, 2.050e-02, -7.966e-02, 1.211e-02, -7.650e-03, 5.293e-02, -3.034e-02, -8.946e-02, -5.980e-02, -7.068e-02) * s1_2_0;
	r0 += M4(3.214e-01, -6.267e-02, 3.161e-01, 1.508e-01, -7.588e-02, 8.823e-02, 3.109e-02, 2.115e-02, -4.679e-02, -1.270e-01, -1.042e-01, 1.057e-01, 1.265e-01, 1.149e-01, -2.470e-02, 1.057e-02) * s1_2_1;
	r1 += M4(1.258e-02, 9.406e-02, -1.159e-01, -2.666e-01, 2.651e-02, 4.031e-02, -7.526e-02, -2.500e-01, -1.141e-01, -5.858e-02, -8.548e-02, 5.713e-01, -1.272e-01, -2.635e-02, 1.671e-01, 8.905e-02) * s1_2_1;
	r2 += M4(1.123e-01, 1.052e-01, -1.450e-02, -6.222e-02, -1.099e-01, -5.557e-02, 7.936e-02, 7.460e-02, 4.304e-02, -9.640e-03, -5.093e-02, -3.010e-01, -5.139e-02, -1.226e-02, 1.141e-02, -9.107e-04) * s1_2_1;
	r0 += M4(-2.528e-02, -3.578e-02, 2.537e-02, -1.502e-02, -7.753e-02, 4.844e-03, 1.922e-02, 7.503e-02, -6.958e-02, -1.226e-01, -5.306e-03, -5.975e-02, 3.611e-02, 6.432e-02, -1.423e-02, 3.084e-03) * s1_2_2;
	r1 += M4(5.232e-02, 3.478e-02, -8.085e-02, -1.825e-01, -8.147e-03, -6.813e-02, -7.941e-03, -7.354e-02, -5.419e-02, 8.189e-02, -3.470e-02, -1.290e-01, 6.617e-03, 2.830e-02, 1.659e-02, -2.043e-02) * s1_2_2;
	r2 += M4(-7.783e-03, 8.162e-04, 8.820e-02, 1.828e-02, 1.720e-02, -1.518e-02, 2.423e-02, 5.305e-02, -6.042e-02, -2.386e-02, 3.139e-03, -1.284e-01, -7.757e-02, -2.558e-02, 6.330e-02, 6.152e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-9.019e-02, -1.834e-02, -1.474e-01, -2.122e-01, 5.646e-02, 7.427e-03, -1.308e-02, 2.825e-02, 8.919e-02, -3.264e-02, 1.423e-01, 3.345e-01, 9.416e-02, 7.323e-02, 5.702e-02, 6.501e-02) * s0_0_0;
	r1 += M4(-5.186e-02, -4.116e-02, 5.461e-02, -5.105e-02, -1.117e-01, -8.773e-02, -9.161e-02, 1.223e-01, 2.509e-02, -9.863e-03, -4.943e-02, -1.287e-02, -5.187e-02, 4.969e-02, 3.635e-02, 2.876e-02) * s0_0_0;
	r2 += M4(1.519e-01, -8.857e-03, -7.966e-03, 1.490e-01, 2.998e-02, 7.152e-02, 6.420e-02, 9.275e-02, -2.390e-01, 1.241e-01, 6.422e-02, -6.151e-02, -1.598e-01, 7.222e-03, 5.703e-02, -9.615e-02) * s0_0_0;
	r0 += M4(-5.953e-02, 2.653e-02, 2.087e-01, -1.954e-01, -2.985e-02, -1.029e-01, -4.481e-01, 2.892e-01, 2.839e-02, -4.357e-02, -1.516e-01, 1.134e-01, 2.280e-01, -2.170e-02, -3.117e-03, 3.590e-01) * s0_0_1;
	r1 += M4(1.489e-01, 1.502e-02, -3.535e-02, -1.418e-01, -4.093e-02, -8.103e-02, -1.790e-02, 3.098e-01, -1.007e-01, -9.848e-02, -6.295e-02, 1.390e-02, -1.608e-02, 8.383e-02, -2.949e-02, 1.782e-01) * s0_0_1;
	r2 += M4(-3.772e-02, 8.293e-03, -6.549e-02, -4.068e-02, 7.201e-02, -3.007e-04, 3.359e-01, -2.675e-02, 1.163e-01, 1.459e-02, 6.634e-02, 9.636e-02, 5.787e-02, -3.448e-02, -2.318e-01, -3.683e-02) * s0_0_1;
	r0 += M4(1.407e-02, 1.982e-02, 2.856e-02, 1.258e-01, -7.021e-03, -2.755e-02, -1.951e-02, -3.086e-02, 5.798e-03, 2.936e-02, -8.093e-02, -8.406e-02, -1.046e-03, -2.545e-02, -8.666e-02, 8.542e-02) * s0_0_2;
	r1 += M4(-4.376e-02, 1.603e-02, -8.938e-03, -7.380e-03, 2.568e-02, -2.946e-02, 2.901e-02, 2.026e-02, 9.697e-03, 3.488e-02, 4.662e-02, -1.048e-02, 6.019e-02, 1.134e-01, -2.022e-02, 3.652e-01) * s0_0_2;
	r2 += M4(1.622e-02, -5.185e-02, -7.774e-02, 2.957e-03, 2.582e-02, 7.301e-03, 1.077e-03, 1.855e-02, -1.618e-02, -4.472e-02, -2.117e-02, -6.990e-02, -3.263e-02, -5.154e-02, -5.201e-02, -1.467e-01) * s0_0_2;
	r0 += M4(-5.586e-02, 3.338e-02, -5.124e-02, 4.456e-02, -1.616e-01, 4.640e-02, 3.787e-01, -2.751e-01, -1.075e-02, -1.305e-01, -2.629e-01, -4.042e-02, -1.257e-01, 2.927e-02, -1.235e-01, -1.572e-01) * s0_1_0;
	r1 += M4(1.073e-01, -8.345e-02, 2.485e-02, 2.741e-02, -6.577e-02, -1.500e-01, -4.149e-02, -4.827e-02, -1.709e-01, -3.423e-02, -1.048e-01, 1.245e-02, 2.330e-02, 7.776e-02, -1.246e-01, 3.125e-03) * s0_1_0;
	r2 += M4(1.554e-01, -3.116e-02, 7.604e-02, 1.538e-01, 7.636e-02, -2.703e-02, 2.668e-02, 6.470e-02, 5.540e-02, 2.262e-01, -9.453e-03, 3.270e-02, 2.522e-02, -3.532e-02, -2.548e-02, -1.439e-01) * s0_1_0;
	r0 += M4(-1.850e-01, 1.160e-01, 4.063e-01, -6.619e-01, 4.367e-01, -5.029e-02, 7.236e-02, -7.060e-02, -7.335e-03, -2.387e-01, -5.723e-01, -2.920e-01, 9.916e-02, -1.172e-01, 3.492e-01, 3.531e-01) * s0_1_1;
	r1 += M4(3.130e-01, -4.256e-02, 2.455e-01, -1.411e-01, -1.673e-01, 4.872e-02, 7.267e-05, -5.332e-01, -6.751e-02, -5.957e-02, -2.604e-01, -1.086e-01, -1.561e-01, 1.128e-01, 4.727e-02, -1.532e-01) * s0_1_1;
	r2 += M4(1.653e-01, 2.133e-02, 8.798e-02, -1.563e-01, 8.009e-02, 2.140e-01, 1.870e-01, 1.593e-01, 1.651e-01, 3.039e-01, 3.195e-01, 1.193e-01, 3.001e-01, -1.969e-02, -4.641e-01, -2.514e-01) * s0_1_1;
	r0 += M4(9.223e-02, 7.570e-02, 5.401e-01, 2.046e-01, -7.943e-02, -7.459e-02, -2.067e-01, 5.240e-02, 4.291e-03, 1.158e-01, -1.084e-01, -1.052e-01, 2.119e-02, -2.481e-02, 2.213e-01, -7.252e-02) * s0_1_2;
	r1 += M4(-6.763e-02, -1.199e-02, 1.863e-01, -4.603e-01, 3.237e-02, -4.732e-02, 2.508e-02, -1.006e-01, -4.402e-02, 6.491e-02, 8.479e-03, -1.899e-01, -1.118e-01, 1.313e-01, 3.559e-03, -1.555e-01) * s0_1_2;
	r2 += M4(-9.535e-04, -3.378e-02, -2.920e-01, 2.013e-02, 7.791e-02, 4.340e-02, 8.807e-02, 3.944e-02, -1.691e-02, -1.015e-01, -8.912e-02, -2.374e-02, 1.034e-01, 1.862e-02, -3.859e-02, -2.723e-01) * s0_1_2;
	r0 += M4(-3.968e-02, -5.725e-02, -3.821e-02, -2.541e-03, 5.715e-02, 4.182e-02, 1.567e-02, 1.044e-01, -1.492e-01, 1.086e-01, 2.733e-02, -6.654e-02, 3.936e-02, 1.756e-03, 2.227e-03, -2.469e-02) * s0_2_0;
	r1 += M4(1.516e-02, -2.003e-02, 1.185e-01, 1.757e-01, 3.605e-02, -8.716e-02, -1.068e-01, -1.890e-02, -9.372e-02, 3.784e-02, 1.210e-01, 5.124e-02, 3.991e-02, 6.811e-02, 6.859e-02, -2.203e-01) * s0_2_0;
	r2 += M4(3.332e-02, -2.363e-03, 3.672e-02, 4.079e-02, -1.435e-03, 8.117e-02, 1.450e-01, 1.970e-01, -1.708e-01, -1.338e-01, 3.808e-03, -1.140e-01, -4.358e-02, 1.571e-02, 5.867e-02, 8.988e-02) * s0_2_0;
	r0 += M4(-1.053e-01, 5.046e-02, 1.246e-01, 1.666e-01, 1.099e-01, -9.402e-02, -2.266e-01, 1.071e-01, -1.392e-01, 1.951e-01, -1.342e-01, -3.335e-02, -2.479e-02, 6.676e-02, 6.002e-02, -2.859e-02) * s0_2_1;
	r1 += M4(1.077e-01, 1.411e-01, 5.227e-01, 5.034e-01, 5.758e-04, -7.256e-02, 5.179e-02, 9.002e-02, -1.215e-01, -2.381e-03, 3.720e-01, 1.663e-01, -5.857e-02, -1.364e-02, -1.889e-01, -2.012e-01) * s0_2_1;
	r2 += M4(-2.245e-01, -2.611e-02, 1.067e-01, -8.064e-02, -1.755e-02, 4.178e-02, 8.484e-02, 1.160e-01, -2.071e-01, -3.491e-02, 2.222e-01, 1.054e-02, 1.446e-01, 4.100e-02, 1.669e-02, 8.779e-02) * s0_2_1;
	r0 += M4(-2.678e-01, 6.215e-02, 2.105e-01, 1.703e-01, 3.756e-02, -2.122e-03, -1.504e-01, 1.206e-02, -7.684e-02, 6.015e-02, -2.423e-01, -8.102e-02, -1.291e-01, -9.508e-02, 2.304e-01, 5.412e-02) * s0_2_2;
	r1 += M4(-4.321e-02, -6.568e-02, 1.464e-01, 3.208e-01, 2.773e-02, -3.938e-02, -1.010e-02, 9.282e-03, -5.855e-02, -5.479e-02, 2.215e-02, 2.081e-01, 2.455e-02, 2.346e-02, -6.242e-02, -1.782e-01) * s0_2_2;
	r2 += M4(-8.244e-02, -8.800e-02, 1.456e-02, 2.264e-02, 2.335e-02, 6.715e-02, 6.229e-02, 9.506e-02, -9.988e-02, -3.729e-02, -2.789e-02, -2.629e-02, 5.047e-02, 7.148e-02, -3.378e-02, -1.301e-01) * s0_2_2;
	r0 += V4(-2.658e-03, -1.399e-02, -3.580e-02, -1.218e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.820e-02, 6.694e-04, -1.869e-02, -1.414e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-7.460e-03, -1.156e-02, -4.827e-03, -1.352e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12] -conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.172e-01, -5.847e-02, -9.526e-02, 9.885e-02, -1.518e-01, -8.647e-03, 1.784e-01, 1.050e-01, -5.996e-02, -7.172e-02, 1.811e-02, 7.037e-02, 1.277e-02, 1.569e-02, -1.642e-02, -5.509e-02) * s0_0_0;
	r1 += M4(6.335e-02, -1.180e-01, 5.381e-02, 1.049e-02, -3.173e-02, 2.209e-01, -2.473e-02, 2.229e-02, -3.149e-02, 6.242e-03, 6.003e-03, -3.211e-02, 7.723e-03, 3.080e-02, 5.127e-03, 3.759e-03) * s0_0_0;
	r2 += M4(-3.112e-02, 4.927e-02, 8.371e-02, 1.630e-02, 7.125e-03, 2.712e-02, 3.255e-02, 1.370e-03, -7.892e-04, -7.782e-02, -1.403e-02, -2.389e-02, 1.234e-02, -5.831e-03, 5.041e-04, 1.649e-02) * s0_0_0;
	r0 += M4(6.606e-02, -3.527e-04, 9.701e-02, 2.149e-01, 3.311e-02, 1.928e-01, -1.328e-01, -2.733e-01, 5.091e-02, 3.607e-02, -3.593e-02, 4.231e-02, 6.685e-02, -9.584e-04, 2.532e-02, -6.630e-03) * s0_0_1;
	r1 += M4(1.165e-01, 3.060e-01, 7.412e-02, -4.567e-02, 1.741e-02, -2.177e-01, 6.958e-02, -2.864e-02, -5.649e-03, 1.213e-01, -5.531e-02, 2.027e-02, -2.742e-02, -6.858e-02, 2.516e-02, 1.484e-02) * s0_0_1;
	r2 += M4(-9.209e-02, 1.668e-01, 1.047e-01, 7.488e-02, 1.030e-01, 1.482e-02, 4.826e-02, 7.878e-02, 6.142e-02, -3.120e-02, -1.630e-02, -1.279e-03, 2.868e-02, -4.816e-02, -1.354e-02, 1.962e-03) * s0_0_1;
	r0 += M4(-3.795e-02, -3.533e-02, -4.196e-02, -6.992e-02, 5.584e-02, 1.101e-02, 7.222e-02, 2.704e-02, -1.001e-02, -3.216e-02, 3.616e-02, 1.775e-02, -2.450e-02, 5.290e-03, -2.855e-02, -4.593e-02) * s0_0_2;
	r1 += M4(9.279e-02, 3.133e-01, -3.315e-03, -1.210e-02, -1.340e-02, -2.382e-01, 2.638e-02, 1.001e-02, 6.670e-02, 1.560e-01, 4.239e-03, -1.365e-02, 4.521e-02, 7.844e-02, 7.612e-03, 1.347e-02) * s0_0_2;
	r2 += M4(2.582e-02, 1.008e-01, 2.930e-02, 1.376e-02, 4.493e-02, -1.822e-02, 2.168e-02, 3.944e-02, -1.886e-02, 1.523e-02, -1.691e-02, -1.701e-02, 4.368e-03, -2.286e-02, -5.537e-03, 3.426e-03) * s0_0_2;
	r0 += M4(-1.910e-01, -1.458e-01, -4.917e-01, -2.518e-02, 2.405e-02, 3.897e-01, 2.790e-01, -4.097e-01, 3.169e-01, -1.956e-01, 3.475e-01, -2.115e-01, -3.327e-01, -7.637e-02, -5.371e-01, -3.492e-02) * s0_1_0;
	r1 += M4(3.962e-02, -2.204e-01, -8.917e-02, -1.333e-01, 6.301e-03, -1.391e-02, 5.845e-04, 5.197e-02, -2.326e-02, -3.830e-02, -2.721e-01, -4.018e-02, -1.185e-02, 2.277e-02, 2.967e-02, -2.460e-02) * s0_1_0;
	r2 += M4(4.797e-02, 2.602e-02, -1.008e-01, -6.586e-02, 1.761e-01, 7.389e-03, -1.126e-01, -1.738e-02, 1.979e-02, 3.733e-02, -9.294e-02, 5.236e-02, -1.363e-02, -3.137e-02, -2.547e-02, -4.871e-02) * s0_1_0;
	r0 += M4(-9.671e-02, -4.014e-01, -1.821e-01, -3.748e-01, -4.308e-01, 4.297e-01, 9.089e-02, 8.918e-02, 1.382e-01, 2.247e-01, -2.104e-01, -2.108e-01, -4.612e-01, -1.024e-01, -2.570e-01, -3.213e-01) * s0_1_1;
	r1 += M4(-5.836e-01, -2.949e-01, -2.979e-01, -1.018e-01, -3.357e-02, -8.183e-03, -9.277e-02, 2.703e-01, -6.926e-02, 3.604e-01, 3.623e-02, 3.405e-02, 3.999e-04, -6.227e-01, -1.626e-01, -1.203e-01) * s0_1_1;
	r2 += M4(-4.523e-01, 1.462e-02, -1.071e-01, 1.398e-02, 3.076e-01, -5.758e-02, 3.924e-01, 4.223e-01, 2.744e-01, 4.599e-02, 1.995e-02, -1.418e-02, -2.022e-01, -1.426e-01, -3.231e-02, -1.072e-01) * s0_1_1;
	r0 += M4(-5.623e-03, -2.431e-02, 4.784e-03, 1.490e-01, -7.795e-02, -9.695e-02, 3.680e-02, -1.590e-01, 2.809e-02, -6.977e-03, 3.145e-02, 5.781e-02, -4.086e-02, -2.138e-02, 6.082e-02, -4.887e-03) * s0_1_2;
	r1 += M4(2.378e-02, -1.848e-01, 3.522e-03, -1.236e-02, -2.493e-01, 5.676e-02, -3.820e-02, 1.394e-02, 9.094e-02, 3.667e-02, 9.042e-03, 1.666e-02, -3.311e-01, -2.738e-01, -2.657e-02, -2.006e-02) * s0_1_2;
	r2 += M4(1.447e-02, -3.171e-02, 4.138e-02, 4.480e-02, -7.111e-02, -7.055e-02, -3.528e-02, 2.003e-02, -1.159e-01, -9.040e-03, 2.137e-02, 2.283e-02, -7.374e-02, -3.528e-02, -7.662e-03, -1.198e-02) * s0_1_2;
	r0 += M4(4.114e-02, 9.052e-03, 1.663e-02, 1.311e-02, 1.200e-02, 3.241e-02, -4.256e-02, -5.653e-02, -1.968e-01, 2.252e-02, 1.081e-02, -2.658e-02, -8.293e-02, -8.716e-02, -2.182e-01, -1.615e-01) * s0_2_0;
	r1 += M4(3.402e-02, 8.438e-02, 9.944e-03, -2.435e-02, -4.338e-02, -4.428e-02, -1.782e-02, -2.708e-02, 5.310e-02, 2.224e-01, 4.529e-02, 4.871e-03, -7.239e-03, -1.160e-01, -4.048e-02, -3.748e-02) * s0_2_0;
	r2 += M4(-3.290e-02, -1.101e-02, 2.368e-02, 2.901e-03, -1.568e-02, -2.579e-02, -1.404e-02, -1.155e-02, -9.461e-02, -1.966e-03, 3.487e-02, 2.288e-02, 3.115e-02, 1.551e-03, -5.335e-02, -5.343e-02) * s0_2_0;
	r0 += M4(-2.943e-02, -6.665e-02, 5.185e-02, 3.107e-02, -5.061e-02, 7.444e-02, 8.489e-02, -1.024e-01, 5.144e-02, -1.386e-02, -1.358e-02, 2.004e-01, -1.127e-01, -7.226e-02, -7.696e-02, -1.527e-01) * s0_2_1;
	r1 += M4(-9.182e-03, 1.714e-01, -5.699e-02, -4.586e-03, -3.030e-02, -8.183e-02, 2.653e-02, -3.527e-02, 1.316e-02, -2.457e-01, -3.440e-02, -1.823e-02, -4.816e-01, -2.421e-01, -1.179e-01, -8.966e-02) * s0_2_1;
	r2 += M4(-5.779e-02, -1.589e-02, 3.396e-03, -8.300e-03, 7.983e-02, -1.656e-02, 1.558e-02, 1.707e-02, 2.216e-01, -3.410e-02, -2.063e-02, -2.547e-02, -5.448e-01, -1.209e-02, -6.653e-02, -5.774e-02) * s0_2_1;
	r0 += M4(-2.494e-02, -6.259e-03, -3.403e-02, -1.147e-02, -2.725e-02, -1.178e-02, -2.512e-02, 3.427e-02, 2.189e-02, 2.259e-03, 2.265e-02, -4.072e-02, 1.485e-02, -2.198e-02, -2.986e-02, -1.400e-01) * s0_2_2;
	r1 += M4(1.251e-02, 1.062e-03, 2.251e-02, -7.622e-03, 6.789e-02, 4.694e-02, -1.052e-02, -8.925e-03, -1.660e-02, 3.986e-02, -6.709e-03, 4.626e-03, -2.144e-01, -5.825e-02, 1.585e-04, 1.341e-02) * s0_2_2;
	r2 += M4(7.774e-02, -2.302e-02, 6.857e-03, 6.067e-03, 1.746e-01, 2.988e-03, -2.472e-02, 7.395e-04, -7.593e-02, 1.003e-03, -1.033e-02, 6.807e-03, -1.349e-01, -3.384e-03, -1.698e-02, 6.168e-04) * s0_2_2;
	r0 += M4(-2.374e-02, -1.751e-02, -7.974e-02, -1.953e-02, 8.350e-03, 8.511e-02, -1.144e-01, 2.866e-02, 7.891e-02, 5.973e-03, -5.678e-02, 1.685e-01, 4.604e-02, 5.328e-02, -3.755e-02, -1.071e-01) * s1_0_0;
	r1 += M4(-1.389e-02, 1.305e-01, 6.482e-03, -9.857e-03, 1.426e-02, 1.399e-02, 3.876e-02, 1.922e-02, -2.507e-03, -8.781e-02, 3.510e-02, 4.205e-02, -2.224e-02, 1.801e-01, -9.707e-02, 4.478e-02) * s1_0_0;
	r2 += M4(5.610e-04, 2.810e-02, -6.762e-03, 8.734e-03, 3.688e-02, -3.698e-02, 7.663e-03, 2.194e-02, -1.667e-02, 4.331e-03, 8.989e-03, 1.762e-02, 7.147e-02, 1.416e-01, -6.138e-02, -2.482e-02) * s1_0_0;
	r0 += M4(9.399e-02, 2.692e-02, 2.180e-02, -6.980e-02, 1.729e-02, -1.067e-01, 2.441e-01, -1.284e-01, 1.136e-01, -5.355e-02, 1.868e-01, 2.680e-01, 1.656e-01, -1.502e-01, 1.877e-02, 9.838e-02) * s1_0_1;
	r1 += M4(2.561e-02, -1.224e-01, 4.180e-03, 1.284e-02, 8.799e-02, 5.011e-02, -7.850e-03, 7.039e-03, 7.617e-02, 3.233e-01, -1.028e-01, 2.670e-02, -1.264e-01, -2.886e-01, -1.955e-01, -2.866e-02) * s1_0_1;
	r2 += M4(-5.270e-02, 5.665e-01, 1.073e-01, 9.031e-02, -6.402e-02, -1.844e-01, -5.479e-02, -2.044e-02, -6.687e-02, 2.900e-01, 4.646e-02, 5.864e-02, -2.976e-01, 2.416e-01, -1.152e-01, -3.503e-02) * s1_0_1;
	r0 += M4(-5.810e-02, -9.124e-02, 6.190e-03, -1.864e-01, 1.627e-02, 3.526e-02, -1.365e-01, -8.032e-02, 3.419e-02, -8.501e-03, -4.351e-02, -9.109e-02, 7.505e-02, -1.609e-02, -4.682e-03, 2.089e-04) * s1_0_2;
	r1 += M4(-8.589e-02, 2.178e-01, 2.630e-02, -1.951e-04, -1.319e-01, -1.650e-01, -2.182e-04, 4.705e-02, 1.243e-01, 2.266e-01, 4.106e-02, 2.723e-02, -1.349e-02, -8.529e-02, -2.246e-03, -2.176e-02) * s1_0_2;
	r2 += M4(-2.124e-02, 1.392e-01, 3.719e-02, 7.575e-03, 4.445e-03, 1.380e-05, 4.215e-03, 3.508e-03, 6.693e-02, -1.867e-02, -5.205e-03, 1.493e-02, 5.804e-02, -6.820e-03, -3.498e-02, -2.771e-02) * s1_0_2;
	r0 += M4(2.398e-01, -1.173e-01, 8.877e-03, 1.979e-02, 1.765e-02, 2.583e-02, -1.109e-01, -2.167e-02, 3.251e-01, 7.844e-03, -7.547e-02, -1.423e-02, -4.977e-01, -1.175e-01, -2.431e-02, -1.509e-01) * s1_1_0;
	r1 += M4(1.387e-02, 5.790e-02, -2.807e-02, -3.918e-02, 3.581e-02, -2.715e-01, -1.503e-02, -3.232e-02, -2.197e-02, -1.642e-02, 4.451e-02, 2.572e-02, -1.143e-03, 4.053e-01, 8.039e-02, 2.319e-02) * s1_1_0;
	r2 += M4(7.361e-02, 2.414e-02, 1.343e-01, -1.933e-02, 3.133e-02, -1.151e-02, -4.919e-02, 4.839e-03, -4.529e-02, 3.805e-02, 4.054e-02, 2.387e-02, -2.529e-02, -1.386e-01, 9.106e-02, 2.569e-02) * s1_1_0;
	r0 += M4(1.392e-01, 2.762e-01, -2.303e-01, -1.103e-01, -1.040e-02, -7.876e-02, 1.936e-01, 1.425e-01, 9.531e-02, -7.961e-02, -6.866e-02, -9.574e-02, 2.323e-02, 1.252e-01, -6.500e-03, 2.746e-01) * s1_1_1;
	r1 += M4(1.346e-01, 4.540e-01, 6.465e-01, 1.646e-01, -1.547e-01, -5.792e-01, -1.606e-01, 8.004e-02, 5.769e-02, -1.651e-02, 5.910e-01, 4.755e-01, 1.377e-01, -4.278e-02, 2.553e-01, 7.448e-02) * s1_1_1;
	r2 += M4(-1.543e-01, 2.771e-02, 4.782e-02, 2.212e-02, -1.432e-01, 2.830e-01, 2.156e-01, 1.834e-01, -9.324e-02, -6.311e-02, 2.894e-01, 5.215e-01, 2.497e-01, -7.544e-02, 1.246e-01, 6.981e-02) * s1_1_1;
	r0 += M4(-3.055e-02, -8.112e-02, 7.244e-02, 3.428e-01, -1.559e-01, 1.271e-01, -2.252e-02, -9.706e-02, 1.131e-01, -8.563e-03, -3.921e-02, -1.024e-02, -6.288e-02, -8.598e-03, 2.148e-02, 1.028e-01) * s1_1_2;
	r1 += M4(4.678e-01, -7.380e-02, 6.160e-02, 3.002e-03, 2.319e-02, 1.661e-01, 3.195e-02, -3.873e-02, -6.313e-02, 1.935e-02, 2.909e-02, 6.686e-02, 5.660e-02, 5.321e-02, 2.106e-05, -3.904e-03) * s1_1_2;
	r2 += M4(-1.158e-01, -5.810e-02, 7.682e-02, 4.995e-02, 1.615e-01, 9.496e-02, -1.666e-02, -6.646e-02, -6.304e-02, 2.602e-02, -2.713e-03, 1.958e-02, -1.449e-01, -3.945e-03, -7.117e-03, -1.379e-02) * s1_1_2;
	r0 += M4(-6.900e-02, 1.575e-02, 7.028e-03, -2.884e-02, -2.530e-01, -4.685e-02, 4.967e-02, -1.455e-01, 3.365e-02, 3.277e-02, -7.647e-03, 1.470e-02, 1.399e-01, 1.702e-02, 6.619e-02, 8.206e-02) * s1_2_0;
	r1 += M4(-1.700e-02, 2.312e-02, 3.181e-02, 1.458e-02, -7.646e-02, 2.153e-01, -4.475e-02, -9.221e-03, 2.144e-02, 1.017e-02, 5.524e-02, 1.742e-02, -6.284e-02, -2.437e-01, -7.886e-02, 4.445e-03) * s1_2_0;
	r2 += M4(-3.052e-02, -7.666e-04, 4.834e-02, -6.533e-03, -4.873e-02, -1.118e-02, 4.969e-02, 3.218e-02, 4.328e-03, -7.808e-03, -1.588e-02, 4.862e-04, 2.676e-02, 2.534e-02, -3.409e-03, 1.224e-02) * s1_2_0;
	r0 += M4(1.675e-02, 3.681e-02, -1.204e-02, 7.417e-02, -1.479e-01, 2.707e-03, -7.843e-02, 9.343e-02, 4.561e-02, -5.532e-02, -7.128e-03, -5.318e-02, -9.031e-03, 3.858e-02, 1.734e-02, -1.792e-02) * s1_2_1;
	r1 += M4(-5.168e-02, -1.674e-01, 1.844e-02, 4.209e-02, 1.860e-01, 1.076e-01, 8.325e-02, -4.936e-02, 5.732e-03, -3.200e-02, -3.055e-02, 8.025e-03, 4.382e-02, 1.881e-01, -2.456e-02, -5.516e-03) * s1_2_1;
	r2 += M4(1.188e-01, 1.183e-02, -3.599e-02, -6.128e-03, -1.284e-02, -3.507e-02, 1.058e-01, -2.101e-02, -3.715e-02, 1.762e-03, -3.866e-02, 1.014e-02, 3.838e-02, 1.926e-02, 1.678e-02, -1.407e-02) * s1_2_1;
	r0 += M4(-3.455e-02, -6.607e-02, 4.571e-02, -3.562e-02, 1.031e-01, -1.708e-02, 3.590e-02, 3.748e-02, -8.530e-02, 7.371e-03, -2.853e-02, -1.288e-02, 6.820e-02, -3.456e-03, 9.673e-05, 3.623e-02) * s1_2_2;
	r1 += M4(8.612e-03, 5.605e-02, 6.298e-03, 1.183e-02, -3.701e-02, -1.720e-01, 2.709e-02, 7.852e-03, -2.892e-02, 8.035e-02, 1.454e-02, 9.555e-03, -6.831e-03, -6.081e-02, -2.376e-03, -2.625e-03) * s1_2_2;
	r2 += M4(-1.628e-01, 1.281e-02, -6.104e-03, -5.097e-03, -1.858e-02, -1.480e-02, 4.184e-02, -2.449e-02, 1.706e-02, -2.601e-03, -7.235e-03, 1.240e-02, 9.576e-03, -5.586e-03, 8.741e-03, -1.006e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.222e-02, -1.371e-03, 2.111e-02, -3.848e-02, -5.534e-02, 9.251e-02, 1.140e-02, -5.662e-02, -2.072e-01, 4.824e-03, -4.640e-02, 2.049e-01, 5.185e-02, 6.615e-03, -1.484e-01, -7.674e-03) * s0_0_0;
	r1 += M4(-3.234e-02, 5.525e-02, 1.488e-03, 3.304e-03, -6.103e-02, -8.233e-02, 2.725e-02, 3.311e-02, 6.806e-02, -2.194e-01, -6.405e-03, 7.642e-02, -2.787e-02, -1.986e-01, -1.112e-02, -8.524e-03) * s0_0_0;
	r2 += M4(2.550e-03, -1.400e-02, -4.814e-03, -3.600e-03, -2.624e-02, -2.264e-02, -2.441e-02, -8.714e-03, 2.000e-02, 7.165e-03, 6.690e-03, -1.778e-02, 4.614e-02, 4.529e-02, 2.383e-02, 1.838e-02) * s0_0_0;
	r0 += M4(1.367e-01, -5.114e-02, -2.163e-01, -1.395e-01, -1.265e-01, -2.300e-02, 6.491e-03, 5.337e-02, 1.375e-02, -5.066e-02, 3.924e-02, 8.683e-02, 7.784e-02, 1.093e-02, 1.066e-01, -2.576e-01) * s0_0_1;
	r1 += M4(-8.547e-03, -1.073e-01, -2.825e-02, -1.752e-02, -7.524e-02, 1.280e-02, 3.456e-02, -2.760e-03, 5.024e-02, 2.312e-01, 2.741e-02, -3.708e-02, 1.856e-02, -3.663e-01, -2.217e-02, 3.470e-03) * s0_0_1;
	r2 += M4(-9.814e-04, -4.093e-02, -3.697e-02, 7.696e-03, 6.274e-02, -3.899e-02, -7.442e-03, -4.484e-02, -8.289e-02, -1.438e-01, -2.374e-02, -3.096e-02, -9.343e-02, 2.646e-01, 3.770e-02, 8.194e-02) * s0_0_1;
	r0 += M4(-1.321e-02, -1.217e-02, 5.983e-02, 7.551e-03, -2.189e-02, 2.941e-02, -7.745e-03, 3.446e-02, 7.186e-03, -4.136e-02, 2.808e-03, -7.306e-02, 3.760e-02, -1.134e-02, -9.983e-02, 9.416e-02) * s0_0_2;
	r1 += M4(7.204e-03, 4.952e-03, 2.191e-02, -1.486e-02, 4.617e-02, -5.832e-02, 2.036e-04, -1.434e-02, 8.427e-02, 1.417e-01, 1.922e-02, 1.050e-02, -3.350e-01, -3.659e-01, -3.258e-02, 2.176e-02) * s0_0_2;
	r2 += M4(-7.407e-02, -8.166e-02, 6.011e-04, -2.352e-03, 3.784e-02, -1.216e-02, -1.197e-03, -8.758e-03, -2.417e-02, -1.892e-02, -1.036e-02, 2.002e-03, 2.656e-02, 4.794e-03, -2.561e-02, -3.052e-02) * s0_0_2;
	r0 += M4(-2.314e-01, -5.698e-02, -6.095e-02, -2.736e-01, -1.813e-01, 4.541e-01, 8.166e-01, -9.302e-02, 3.954e-01, -6.862e-02, 1.519e-01, -9.759e-02, -1.072e-01, 8.688e-02, 6.226e-02, 1.035e-01) * s0_1_0;
	r1 += M4(-1.906e-03, 6.737e-02, -1.686e-02, -2.275e-02, 6.419e-03, -1.194e-01, 7.353e-02, 5.444e-01, 9.053e-03, -1.726e-01, 5.520e-02, -5.018e-02, 3.757e-02, 1.018e-01, 4.817e-02, 5.810e-02) * s0_1_0;
	r2 += M4(2.797e-02, -6.131e-02, -4.745e-02, -4.702e-02, 2.411e-02, 1.014e-01, 3.209e-01, 2.169e-02, -1.003e-01, -1.534e-01, -6.890e-02, 3.182e-02, -2.710e-02, -3.653e-04, 5.926e-02, 8.842e-04) * s0_1_0;
	r0 += M4(-6.071e-01, -3.173e-01, -5.410e-01, -4.322e-01, -6.464e-01, -4.733e-02, 5.235e-02, -1.013e-01, 3.560e-01, -3.076e-02, -3.621e-01, -3.011e-01, -2.446e-01, -2.281e-01, 2.607e-01, 5.474e-01) * s0_1_1;
	r1 += M4(-1.255e-01, -3.650e-01, 1.840e-02, -2.972e-01, 6.556e-02, -3.365e-01, -1.880e-01, -7.343e-02, -8.831e-03, -3.828e-01, -2.107e-01, 1.811e-01, 1.052e-01, 5.501e-01, 1.345e-01, -1.715e-01) * s0_1_1;
	r2 += M4(-1.676e-01, -8.053e-01, -9.442e-03, -1.137e-01, 6.502e-01, -2.080e-01, -5.271e-02, -6.533e-02, 8.521e-02, 2.680e-01, -1.046e-01, -3.688e-02, -1.726e-01, -2.842e-01, 1.015e-01, 5.996e-02) * s0_1_1;
	r0 += M4(1.021e-01, -1.502e-02, 6.159e-02, 2.086e-02, -4.215e-02, 1.938e-02, -2.419e-02, -1.122e-01, 2.707e-02, 7.238e-04, 1.321e-01, 5.556e-02, -7.300e-02, 2.672e-01, -9.302e-02, 1.377e-01) * s0_1_2;
	r1 += M4(-2.861e-01, -3.691e-01, -1.000e-01, 7.056e-02, -3.929e-01, -1.142e-01, -1.108e-02, 4.108e-03, -2.277e-01, -2.719e-01, -7.202e-02, -2.079e-02, 5.200e-01, 3.235e-01, 1.013e-01, -5.491e-03) * s0_1_2;
	r2 += M4(-7.113e-01, -8.716e-02, 1.076e-02, 6.010e-02, 6.803e-02, -6.012e-02, -2.570e-02, -3.034e-02, -1.266e-01, -7.750e-02, -2.374e-03, 2.902e-03, 4.143e-01, 8.093e-02, 5.426e-02, -2.184e-02) * s0_1_2;
	r0 += M4(1.087e-01, 2.415e-02, 2.359e-03, 1.276e-01, 1.589e-02, 2.010e-01, -6.047e-03, -6.616e-02, -4.398e-01, -2.104e-01, -2.373e-04, -1.141e-01, 1.122e-01, 4.839e-02, 1.932e-03, 5.035e-02) * s0_2_0;
	r1 += M4(-9.418e-03, -2.242e-02, -1.574e-02, 1.685e-02, -1.958e-02, 4.789e-02, 7.211e-02, -1.474e-02, -8.461e-02, 3.277e-02, -1.606e-01, -8.667e-04, -1.592e-02, -1.354e-01, 2.421e-02, 2.206e-04) * s0_2_0;
	r2 += M4(-3.565e-04, 1.549e-02, -1.167e-02, 3.436e-04, 1.973e-02, -3.046e-02, -5.798e-02, -1.803e-02, 1.043e-02, 8.517e-03, 3.227e-02, 9.556e-03, -6.145e-04, 1.469e-03, -6.914e-03, 1.105e-02) * s0_2_0;
	r0 += M4(1.522e-01, -1.636e-01, 4.500e-02, 2.291e-01, 2.076e-01, -2.112e-02, 4.515e-03, -1.266e-02, -1.275e-01, 2.409e-01, 2.022e-02, 1.803e-01, 2.271e-01, -1.559e-01, -5.487e-02, 1.153e-01) * s0_2_1;
	r1 += M4(4.729e-02, -3.572e-03, -9.790e-02, 9.955e-02, -1.023e-01, -1.215e-01, 1.405e-02, 6.408e-02, 6.863e-02, 8.419e-02, 1.354e-01, -3.199e-02, 4.378e-02, -3.977e-01, -1.002e-01, 2.661e-02) * s0_2_1;
	r2 += M4(-1.396e-02, 8.378e-02, -8.587e-02, 7.483e-02, 1.360e-01, 5.873e-02, -5.630e-02, -1.558e-02, -9.059e-03, -8.437e-02, -6.086e-03, -4.238e-02, 1.206e-02, 1.042e-01, -2.906e-02, 1.267e-02) * s0_2_1;
	r0 += M4(1.890e-02, -1.311e-02, 6.530e-03, -1.129e-01, 7.935e-02, 3.537e-02, -4.986e-02, -9.736e-02, -2.266e-02, -1.940e-01, 1.053e-01, 8.795e-02, 1.216e-01, 1.247e-01, -5.850e-02, -1.382e-01) * s0_2_2;
	r1 += M4(1.334e-01, 1.716e-01, -3.514e-04, 1.018e-02, -5.668e-02, 2.367e-02, -1.045e-02, -8.700e-03, 1.255e-01, -1.502e-04, -2.460e-02, 1.694e-02, -1.044e-01, -1.243e-01, -1.735e-02, -1.869e-02) * s0_2_2;
	r2 += M4(-1.339e-01, 3.050e-03, -2.070e-03, 2.830e-02, 3.308e-02, 1.553e-02, -6.485e-03, -1.180e-02, -2.940e-01, 1.932e-02, -2.993e-02, -2.318e-02, 8.260e-02, 3.023e-03, 2.984e-02, 1.845e-02) * s0_2_2;
	r0 += V4(-1.449e-02, -1.040e-02, -7.748e-03, -1.456e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.329e-02, -1.964e-02, -3.285e-03, -1.136e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.163e-02, -6.243e-03, -2.814e-03, -2.440e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_4x12] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.318e-03, -2.012e-03, -5.236e-03, -1.779e-04, 8.346e-03, 3.452e-03, -1.703e-02, 1.770e-03, -7.092e-03, -6.424e-03, -3.243e-03, 3.940e-05, -7.984e-02, 1.241e-02, 3.988e-02, 9.481e-03) * s0_0_0;
	r0 += M4(-1.118e-02, -1.661e-02, -2.289e-02, -1.638e-02, 5.579e-02, -1.208e-01, -1.114e-02, 1.255e-02, 1.899e-02, -2.446e-04, -2.728e-02, -2.451e-03, 5.221e-02, -2.617e-02, 7.109e-04, 1.655e-02) * s0_0_1;
	r0 += M4(-3.950e-03, 1.016e-02, -2.925e-03, -1.020e-02, -5.869e-03, 2.459e-02, -2.535e-04, -2.988e-03, -8.093e-04, -6.482e-03, -4.731e-04, -4.024e-03, 5.158e-03, 6.365e-04, -1.583e-03, 5.126e-03) * s0_0_2;
	r0 += M4(-1.889e-03, -6.386e-03, -2.004e-03, 1.334e-03, 8.657e-02, 8.423e-03, 1.019e-01, 1.629e-02, -3.652e-03, -1.668e-02, -1.935e-02, -9.869e-03, 2.397e-02, -2.444e-03, 3.136e-02, 2.533e-02) * s0_1_0;
	r0 += M4(-3.384e-01, -9.825e-02, 3.175e-01, 7.416e-02, 2.114e-01, -2.388e-01, 3.483e-01, -4.034e-01, -4.844e-01, 2.880e-01, 8.738e-02, 6.761e-02, 6.913e-02, 2.743e-01, -1.053e-01, -3.596e-01) * s0_1_1;
	r0 += M4(2.218e-03, -9.974e-02, -4.951e-04, 1.519e-01, -5.294e-03, 2.853e-02, -1.194e-02, 5.450e-02, 2.247e-02, 8.435e-02, 1.821e-02, 2.252e-02, -1.616e-02, -2.104e-02, -1.534e-02, -2.289e-02) * s0_1_2;
	r0 += M4(-9.692e-04, -1.569e-03, -8.208e-03, 9.646e-04, -1.082e-02, 9.927e-04, 1.058e-02, 8.486e-03, 2.456e-03, -3.407e-03, 1.432e-02, -8.627e-03, -1.252e-03, 8.853e-04, -4.801e-03, -1.818e-03) * s0_2_0;
	r0 += M4(2.168e-02, 3.896e-03, -1.657e-02, -7.228e-03, 1.204e-02, 7.399e-03, 2.371e-02, -2.356e-02, 4.260e-02, -8.090e-03, -6.345e-02, 8.032e-02, -1.495e-02, -1.025e-02, 5.702e-02, 4.181e-02) * s0_2_1;
	r0 += M4(-4.472e-03, -7.679e-03, -2.392e-02, -2.132e-02, 1.001e-03, 3.290e-03, -2.539e-03, 5.697e-03, 7.319e-03, 2.711e-03, 4.933e-03, -2.553e-03, -9.479e-04, -1.366e-02, 5.673e-03, 2.164e-02) * s0_2_2;
	r0 += M4(1.585e-02, 4.833e-03, 1.110e-02, -1.155e-02, 3.740e-02, 1.975e-03, -5.813e-03, 8.132e-05, 3.789e-02, -5.097e-03, -7.365e-03, 6.329e-03, -2.020e-03, -1.993e-03, 1.359e-03, 1.567e-03) * s1_0_0;
	r0 += M4(-2.961e-02, 4.544e-03, -1.027e-02, -7.093e-03, -6.402e-02, 1.536e-02, 2.193e-02, 1.449e-02, 1.173e-01, 1.671e-01, 2.110e-04, 1.230e-02, 4.948e-02, 1.003e-01, 4.108e-03, -1.089e-02) * s1_0_1;
	r0 += M4(-3.476e-03, -2.463e-03, -1.256e-03, -5.746e-04, 1.070e-02, -2.714e-02, 2.779e-03, 9.172e-03, 2.138e-05, 1.044e-02, -6.495e-04, 4.295e-04, -7.608e-05, 2.073e-02, 9.759e-04, -2.553e-04) * s1_0_2;
	r0 += M4(3.597e-01, 1.362e-02, -3.972e-01, 6.271e-02, 5.365e-02, -2.374e-02, -6.404e-02, 2.158e-02, -1.185e-01, 3.526e-02, -2.080e-01, 3.594e-02, -9.822e-02, 4.624e-03, -6.323e-02, -8.314e-03) * s1_1_0;
	r0 += M4(-1.401e-02, -7.033e-03, 4.381e-02, 5.066e-02, 1.018e-01, 2.408e-01, -2.982e-02, -3.291e-01, 9.922e-02, 1.536e-01, 3.237e-02, -4.248e-01, 2.779e-01, -4.485e-01, 1.987e-01, 1.633e-01) * s1_1_1;
	r0 += M4(2.024e-03, 2.739e-03, 4.065e-03, -1.438e-02, -6.121e-03, 5.840e-03, -9.841e-03, 2.644e-02, 3.251e-04, 2.753e-02, -1.539e-02, 3.101e-02, -3.388e-03, 1.022e-01, 4.001e-05, 8.479e-02) * s1_1_2;
	r0 += M4(-1.054e-02, -3.762e-04, 2.353e-02, -2.001e-03, -2.575e-02, -1.304e-02, 4.968e-02, -1.400e-02, 1.108e-02, -4.055e-03, -5.798e-03, 5.042e-03, -1.122e-02, 5.872e-03, -6.665e-02, -3.138e-03) * s1_2_0;
	r0 += M4(2.907e-03, 3.875e-03, -6.179e-03, -4.501e-03, -9.327e-04, -1.119e-02, -1.528e-02, 3.671e-02, 1.265e-03, 5.264e-03, 2.297e-02, 6.640e-02, -5.676e-02, -2.568e-02, -7.882e-02, -2.140e-01) * s1_2_1;
	r0 += M4(1.452e-06, -4.576e-04, 8.682e-04, -6.055e-03, -1.209e-04, -9.293e-04, -2.496e-03, -6.731e-03, 1.251e-04, -1.538e-03, -2.260e-03, 1.212e-02, 1.288e-03, 1.470e-02, -1.357e-02, 2.043e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-5.399e-02, 4.579e-02, 4.268e-02, 3.272e-03, -1.345e-02, -6.087e-03, -3.922e-03, -1.467e-03, 1.135e-03, 9.551e-03, 7.965e-03, -1.232e-03, 4.456e-02, 3.399e-03, -2.091e-03, -9.246e-05) * s0_0_0;
	r0 += M4(-7.805e-03, 2.117e-02, -5.268e-03, -9.139e-03, 2.057e-02, 2.118e-02, -7.168e-05, 8.951e-04, -1.996e-01, -1.683e-01, -6.719e-03, -9.152e-03, 1.794e-01, 1.411e-01, 3.284e-02, 1.818e-02) * s0_0_1;
	r0 += M4(-1.181e-04, -2.878e-03, -2.659e-04, 4.850e-04, -8.367e-04, 5.828e-03, -1.450e-03, -6.853e-04, -4.296e-03, -1.767e-02, 1.852e-03, -8.275e-03, 1.286e-02, -6.385e-03, -1.359e-03, 1.368e-02) * s0_0_2;
	r0 += M4(-1.248e-02, 1.362e-01, -5.252e-01, 2.505e-01, -1.237e-01, 3.960e-02, -3.000e-02, -1.769e-03, 7.515e-02, 1.602e-02, 6.065e-02, 1.023e-02, 1.792e-01, -1.870e-02, 1.743e-01, -6.081e-03) * s0_1_0;
	r0 += M4(-1.393e-02, 1.393e-02, -6.068e-03, 1.116e-01, -9.985e-02, -3.723e-01, 8.179e-02, 4.675e-02, 7.513e-02, -4.100e-02, -3.768e-01, -4.065e-01, -4.971e-01, 1.851e-01, -1.466e-01, 2.933e-01) * s0_1_1;
	r0 += M4(5.579e-04, -4.744e-03, 5.190e-04, -6.021e-03, -1.326e-02, 1.581e-02, 4.705e-03, 4.015e-03, 1.595e-02, 8.116e-02, 1.802e-02, 9.950e-02, -1.321e-02, -1.665e-01, -1.200e-02, -1.924e-01) * s0_1_2;
	r0 += M4(-3.259e-02, 2.030e-03, 2.455e-02, 1.703e-02, -2.031e-03, -1.399e-02, 1.116e-01, 1.396e-02, 7.795e-04, -6.109e-04, 2.547e-02, 1.059e-02, -8.101e-06, 1.383e-04, 4.235e-02, -9.675e-03) * s0_2_0;
	r0 += M4(-2.839e-03, -2.935e-03, 1.657e-03, 4.984e-03, 3.491e-02, 6.907e-02, 1.440e-01, 2.744e-01, -2.068e-02, -4.908e-03, 1.134e-01, 6.266e-02, 6.815e-02, 2.423e-02, -2.484e-02, 7.202e-02) * s0_2_1;
	r0 += M4(-3.869e-04, 8.949e-04, -2.543e-04, -7.565e-05, -5.071e-03, -1.395e-02, 1.725e-02, 1.056e-02, 1.246e-04, 4.654e-03, 4.375e-03, 3.860e-02, -1.197e-03, -1.585e-02, 7.811e-03, -5.628e-02) * s0_2_2;
	r0 += V4(-2.639e-08, -1.492e-08, -2.905e-08, -1.491e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
