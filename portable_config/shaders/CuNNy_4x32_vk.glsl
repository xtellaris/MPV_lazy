// CuNNy 4x32
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x32_vk] -in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-8.547e-03, -8.281e-01, -4.112e-01, -1.538e-01) * s0_0_0;
	r1 += V4(8.178e-02, -5.830e-03, 2.467e-02, -3.034e-02) * s0_0_0;
	r2 += V4(1.184e-01, 1.151e-02, 2.734e-02, 4.604e-03) * s0_0_0;
	r3 += V4(1.841e-01, 1.343e-01, 4.232e-03, 3.965e-03) * s0_0_0;
	r4 += V4(-5.161e-02, -3.043e-01, -2.244e-01, -4.800e-02) * s0_0_0;
	r5 += V4(8.567e-02, -6.212e-04, 2.588e-01, 3.149e-02) * s0_0_0;
	r6 += V4(-7.466e-04, 2.417e-02, -3.067e-02, -1.230e-02) * s0_0_0;
	r7 += V4(-1.360e-01, 4.894e-02, -9.175e-02, -3.835e-02) * s0_0_0;
	r0 += V4(-3.988e-02, 1.769e-01, -1.805e-01, -1.518e-01) * s0_0_1;
	r1 += V4(-7.194e-02, 2.220e-01, 8.068e-04, 3.586e-02) * s0_0_1;
	r2 += V4(5.315e-02, -7.544e-03, -4.670e-02, 1.193e-01) * s0_0_1;
	r3 += V4(-3.287e-01, 2.711e-02, 1.286e-03, 1.157e-03) * s0_0_1;
	r4 += V4(1.565e-01, 7.926e-02, 1.687e-01, 1.051e-01) * s0_0_1;
	r5 += V4(4.014e-01, 9.943e-03, 2.158e-01, 1.978e-01) * s0_0_1;
	r6 += V4(-1.354e-02, 6.613e-02, 1.903e-01, 1.143e-02) * s0_0_1;
	r7 += V4(-2.785e-02, -4.801e-02, 1.729e-01, 5.583e-02) * s0_0_1;
	r0 += V4(4.391e-02, -2.111e-02, 1.725e-02, 5.563e-03) * s0_0_2;
	r1 += V4(-5.756e-02, -2.105e-01, -2.209e-02, -7.883e-03) * s0_0_2;
	r2 += V4(-1.668e-01, 4.730e-03, 1.558e-02, -1.088e-01) * s0_0_2;
	r3 += V4(-1.802e-01, 2.833e-02, -6.773e-03, -5.197e-03) * s0_0_2;
	r4 += V4(-5.286e-02, -1.714e-02, 8.852e-02, -7.684e-02) * s0_0_2;
	r5 += V4(-6.008e-03, 2.122e-02, 6.841e-02, -1.450e-02) * s0_0_2;
	r6 += V4(2.265e-02, -8.971e-02, -1.733e-01, -2.299e-03) * s0_0_2;
	r7 += V4(2.827e-02, 1.369e-02, 5.047e-02, -1.394e-02) * s0_0_2;
	r0 += V4(1.728e-02, 2.417e-01, 4.097e-01, 3.600e-01) * s0_1_0;
	r1 += V4(7.398e-02, -6.860e-02, -3.971e-02, -1.733e-01) * s0_1_0;
	r2 += V4(-2.655e-01, 5.590e-02, 4.063e-02, 2.529e-01) * s0_1_0;
	r3 += V4(1.467e-01, 7.102e-02, -2.038e-02, 2.652e-04) * s0_1_0;
	r4 += V4(7.667e-02, 3.676e-01, 1.031e-01, 5.144e-02) * s0_1_0;
	r5 += V4(-1.104e-01, 6.545e-03, -3.325e-02, -1.016e-01) * s0_1_0;
	r6 += V4(-9.721e-03, -1.615e-02, 3.277e-02, 1.874e-02) * s0_1_0;
	r7 += V4(-1.890e-01, -4.001e-01, -3.311e-02, -4.619e-01) * s0_1_0;
	r0 += V4(-5.279e-01, 1.175e-01, 1.747e-01, 2.026e-01) * s0_1_1;
	r1 += V4(-1.403e-01, -3.916e-01, 1.151e-01, -9.552e-02) * s0_1_1;
	r2 += V4(3.154e-01, 7.457e-03, -1.636e-01, -3.684e-01) * s0_1_1;
	r3 += V4(3.213e-01, 2.402e-01, 5.449e-01, 4.788e-01) * s0_1_1;
	r4 += V4(-8.264e-02, -1.034e-01, 8.819e-02, -4.112e-01) * s0_1_1;
	r5 += V4(-3.127e-01, 2.059e-02, -3.764e-01, -4.085e-01) * s0_1_1;
	r6 += V4(1.301e-01, 3.295e-01, 3.057e-01, -1.531e-01) * s0_1_1;
	r7 += V4(3.721e-01, 1.504e-01, 5.863e-02, 4.614e-01) * s0_1_1;
	r0 += V4(5.137e-01, -1.744e-02, -1.761e-02, -6.792e-03) * s0_1_2;
	r1 += V4(2.653e-01, 4.541e-01, 3.037e-01, 4.896e-01) * s0_1_2;
	r2 += V4(3.967e-02, 7.475e-03, 1.150e-01, 1.150e-01) * s0_1_2;
	r3 += V4(-1.422e-01, -1.248e-01, -5.023e-01, 3.588e-03) * s0_1_2;
	r4 += V4(1.472e-01, 2.398e-02, 6.265e-02, 3.669e-01) * s0_1_2;
	r5 += V4(2.300e-02, -2.703e-01, -1.307e-01, 7.948e-03) * s0_1_2;
	r6 += V4(-4.996e-01, -3.117e-01, -3.090e-01, -3.701e-01) * s0_1_2;
	r7 += V4(-3.646e-02, 3.664e-02, -8.181e-02, -7.606e-03) * s0_1_2;
	r0 += V4(-1.194e-02, -2.722e-02, 7.280e-03, -2.418e-01) * s0_2_0;
	r1 += V4(3.424e-02, 7.323e-02, 9.091e-03, 6.127e-04) * s0_2_0;
	r2 += V4(-2.358e-01, -2.206e-01, -3.651e-01, -2.388e-01) * s0_2_0;
	r3 += V4(-1.310e-01, -2.689e-01, 1.529e-02, -4.675e-01) * s0_2_0;
	r4 += V4(-5.722e-02, -3.145e-02, -2.960e-02, -6.778e-03) * s0_2_0;
	r5 += V4(-1.240e-04, -3.542e-03, 2.496e-03, 6.147e-02) * s0_2_0;
	r6 += V4(-5.281e-03, -9.623e-03, 1.897e-03, -5.478e-03) * s0_2_0;
	r7 += V4(3.271e-01, 8.740e-02, 7.414e-02, 5.927e-02) * s0_2_0;
	r0 += V4(-2.142e-02, -2.173e-02, -2.603e-03, -1.142e-02) * s0_2_1;
	r1 += V4(-3.642e-02, 1.859e-01, -5.067e-02, -1.274e-01) * s0_2_1;
	r2 += V4(5.231e-02, 1.648e-02, 3.512e-01, 2.647e-01) * s0_2_1;
	r3 += V4(5.674e-02, -2.037e-01, -2.015e-02, -1.715e-02) * s0_2_1;
	r4 += V4(1.351e-01, 1.493e-02, -8.072e-02, -5.786e-02) * s0_2_1;
	r5 += V4(-6.542e-02, 1.866e-02, -6.042e-02, 2.502e-01) * s0_2_1;
	r6 += V4(7.303e-02, -3.936e-01, -7.703e-02, 6.834e-03) * s0_2_1;
	r7 += V4(-3.373e-01, -5.849e-02, -6.512e-02, -5.988e-02) * s0_2_1;
	r0 += V4(3.119e-02, 7.530e-03, 2.413e-03, 1.553e-03) * s0_2_2;
	r1 += V4(-5.286e-02, -2.558e-01, -3.237e-01, -8.656e-02) * s0_2_2;
	r2 += V4(8.990e-02, -7.498e-04, 2.830e-02, -4.367e-02) * s0_2_2;
	r3 += V4(7.450e-02, 1.039e-01, -1.380e-02, 1.636e-03) * s0_2_2;
	r4 += V4(-6.159e-02, 3.773e-03, -1.479e-01, 6.796e-02) * s0_2_2;
	r5 += V4(-1.705e-02, 3.021e-02, 5.489e-02, -6.384e-04) * s0_2_2;
	r6 += V4(3.894e-01, 4.013e-01, 6.514e-02, 5.071e-01) * s0_2_2;
	r7 += V4(3.345e-03, 3.852e-02, 1.854e-03, 1.101e-02) * s0_2_2;
	r0 += V4(5.481e-03, 6.979e-03, 1.043e-02, 1.094e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.578e-02, -4.925e-03, 1.200e-02, 1.282e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(4.041e-05, 1.205e-01, 6.601e-03, 1.309e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(1.355e-03, 2.688e-03, 9.243e-04, 2.357e-05);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(-1.336e-01, 6.793e-03, -3.220e-02, 3.237e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(1.511e-02, 1.616e-01, 5.262e-03, 4.901e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(-9.505e-02, 3.900e-04, 1.909e-02, 3.650e-03);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(5.671e-03, 2.680e-02, -3.308e-02, 1.092e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC [CuNNy_4x32_vk] -conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04EB1127, 0xFBE7FEFC, 0xFFFDF419, 0xE417F1F5);
	r1 = D(r1, s0_0_0, 0xFEFBF91B, 0xF91401D2, 0xF906FF03, 0xF402F0E7);
	r2 = D(r2, s0_0_0, 0xE5FEF081, 0xFCFF03ED, 0xF1070312, 0xFE0200BC);
	r3 = D(r3, s0_0_0, 0x050201D6, 0xEA0FFCE7, 0xF5F6124F, 0xF5F605F4);
	r4 = D(r4, s0_0_0, 0xF90FF6E7, 0x06ED0103, 0x0804FED0, 0xFDFAF910);
	r5 = D(r5, s0_0_0, 0xFC08EE33, 0x06F60B03, 0x20FC04D0, 0x01FDF8F2);
	r6 = D(r6, s0_0_0, 0x04F9FC13, 0x0116FA11, 0x0FFDF32D, 0xFE1C06F2);
	r7 = D(r7, s0_0_0, 0xFA08FBFE, 0x0611060D, 0xFEFA0403, 0xEC19EE22);
	r0 = D(r0, s0_0_1, 0x12D90711, 0x26ED0ACE, 0xE30AF624, 0xFFFDE903);
	r1 = D(r1, s0_0_1, 0x09F109F1, 0xEC08F1E9, 0xE811F4F5, 0xE8FC08E4);
	r2 = D(r2, s0_0_1, 0xFB0DFBDE, 0x1EF5FDEF, 0xF605FFFF, 0xF7FAEDD2);
	r3 = D(r3, s0_0_1, 0x24F3FA1C, 0xFCED1404, 0x10EA0B2E, 0xF9FBFC0F);
	r4 = D(r4, s0_0_1, 0x1E07F31B, 0xF0F514FD, 0xFB32DFDF, 0x10EA03E8);
	r5 = D(r5, s0_0_1, 0x21F6071F, 0x0A22E3F4, 0xF6EF0DCF, 0xF704F621);
	r6 = D(r6, s0_0_1, 0x0618FD11, 0x08F4022C, 0xEDF51321, 0xF61DF331);
	r7 = D(r7, s0_0_1, 0xF6FD030B, 0x06FA11EB, 0xE50405C5, 0x42D105F7);
	r0 = D(r0, s0_0_2, 0x11E5FCEE, 0xF0F5100A, 0xCE11E50A, 0xDB071101);
	r1 = D(r1, s0_0_2, 0x07F006F4, 0xF9F01412, 0x0402F9FF, 0xBE2F20FC);
	r2 = D(r2, s0_0_2, 0x25F910FD, 0x14EBFE0C, 0xFA0CF00A, 0xF0EC1408);
	r3 = D(r3, s0_0_2, 0xE80D14F1, 0xF222FD13, 0x9D132FFF, 0xF8010AFD);
	r4 = D(r4, s0_0_2, 0xFF00F20E, 0xEF0500FD, 0xF0E408ED, 0x03E90BFF);
	r5 = D(r5, s0_0_2, 0xC6070A2E, 0xF9F313F8, 0x1406F4FF, 0xE402F70C);
	r6 = D(r6, s0_0_2, 0xD21AF722, 0x090107FF, 0x071D0711, 0x0CE4F70D);
	r7 = D(r7, s0_0_2, 0xE50EFE08, 0x0006FE09, 0xCB2302F2, 0xEFF6F2E3);
	r0 = D(r0, s0_1_0, 0x04EE110C, 0xEFFEF9DB, 0xF1EEFF0A, 0x0B14F1FC);
	r1 = D(r1, s0_1_0, 0xF4FF0134, 0xF41AFFC4, 0xF10C0748, 0x1EFDE9F8);
	r2 = D(r2, s0_1_0, 0xF3001681, 0xFC040622, 0xEC06060A, 0x0309E81B);
	r3 = D(r3, s0_1_0, 0xF70500F8, 0x21FC0120, 0x03120FE3, 0xED0A0C18);
	r4 = D(r4, s0_1_0, 0x1DFD1381, 0x12F60627, 0x0BFAFC24, 0xFDFF0ADB);
	r5 = D(r5, s0_1_0, 0x0800F5D1, 0xF3050921, 0x24110726, 0x03F6F209);
	r6 = D(r6, s0_1_0, 0x0CFCF3B5, 0xE7FFEEDF, 0x1E02FA1F, 0xFF19EAB1);
	r7 = D(r7, s0_1_0, 0xF904FB03, 0xEAF806DF, 0x01FDF2C6, 0x2FD912EB);
	r0 = D(r0, s0_1_1, 0xFE160419, 0xEC2214E1, 0x05F9F60F, 0xFCDB2334);
	r1 = D(r1, s0_1_1, 0xFE16122A, 0xF8CBF4DC, 0x04F607F2, 0xF8F60ADE);
	r2 = D(r2, s0_1_1, 0xF381EDE0, 0xEDB0020E, 0xF4FB0F19, 0x4E90FFFC);
	r3 = D(r3, s0_1_1, 0x04F60B1D, 0x35FFEF13, 0x17FDE441, 0x01F1EF31);
	r4 = D(r4, s0_1_1, 0x1F1C160E, 0x023FF810, 0xF9FF1B17, 0x02F612D2);
	r5 = D(r5, s0_1_1, 0xF5280904, 0xF6EA1EE9, 0x11EB0C26, 0x080BDBE9);
	r6 = D(r6, s0_1_1, 0xFEFF0B81, 0xE3FC0A0B, 0x16F6DAF4, 0xFEDAEB81);
	r7 = D(r7, s0_1_1, 0x18F70492, 0x1A00E00E, 0x071EFE81, 0xE981FBE6);
	r0 = D(r0, s0_1_2, 0x22FE00C6, 0x0CF9F604, 0xDB091A03, 0x01EF10FF);
	r1 = D(r1, s0_1_2, 0xE713F8DA, 0x1CDDFA00, 0xEEFF1202, 0x2AF3FFD4);
	r2 = D(r2, s0_1_2, 0xDD8181F4, 0xC38100F8, 0x000CE023, 0x14CF81FE);
	r3 = D(r3, s0_1_2, 0x1D0BEA16, 0x36E6140E, 0xF11BF3DF, 0xFD09ECE3);
	r4 = D(r4, s0_1_2, 0xF7EAE500, 0xD5F900CD, 0x26E419F7, 0xD004FF07);
	r5 = D(r5, s0_1_2, 0xBB14FE03, 0x24F1F402, 0xFC10EE05, 0xBF27F413);
	r6 = D(r6, s0_1_2, 0x0AE60AD4, 0x280BFA16, 0xFB11F036, 0x1307D90F);
	r7 = D(r7, s0_1_2, 0xE006F810, 0xFE19E235, 0x21FBE6DB, 0xECD43012);
	r0 = D(r0, s0_2_0, 0xF8EDF700, 0xFB04EC4F, 0xFEF90100, 0x0A070298);
	r1 = D(r1, s0_2_0, 0x080EFE1D, 0xEEFC0827, 0xFF11002D, 0xFD07FE09);
	r2 = D(r2, s0_2_0, 0x01011F2A, 0xF703F804, 0xF9110F04, 0x0004011C);
	r3 = D(r3, s0_2_0, 0x02E8EBFC, 0x032FD220, 0x1FD801EA, 0x0CF70302);
	r4 = D(r4, s0_2_0, 0xE60B1881, 0x26F1F70B, 0xFE1AE6FF, 0xFAFF28D6);
	r5 = D(r5, s0_2_0, 0x001303DB, 0xF304DF28, 0x0E0104EF, 0x0AEEFC0D);
	r6 = D(r6, s0_2_0, 0x080206F8, 0x0516F6FF, 0xF6F713F3, 0xEF04F202);
	r7 = D(r7, s0_2_0, 0xFEFE0827, 0x04E6EAF6, 0x0BF8F113, 0xF0DB22FD);
	r0 = D(r0, s0_2_1, 0x050515DF, 0x18145FF3, 0xFC002C05, 0xD4F3D918);
	r1 = D(r1, s0_2_1, 0x252D14F9, 0xF2CBDC14, 0xFBEB0611, 0xFB0FF71F);
	r2 = D(r2, s0_2_1, 0x01BB0F28, 0xFEFE01EE, 0x0B17F902, 0x09F03001);
	r3 = D(r3, s0_2_1, 0x2CFA042E, 0xC3C01A1B, 0x3081931C, 0x03DF1904);
	r4 = D(r4, s0_2_1, 0xB9B87F3B, 0x030DF9E3, 0xE7EFE9F4, 0x2A15F7E3);
	r5 = D(r5, s0_2_1, 0xD50FF52D, 0xF7DE0508, 0x132FDA30, 0xEABC05F9);
	r6 = D(r6, s0_2_1, 0xFC0AC8DB, 0xF1FFD3FF, 0xEF092AE4, 0x0C07CBE0);
	r7 = D(r7, s0_2_1, 0xF7EFF481, 0xF0EA2FFC, 0x0F150A09, 0xE9F87F07);
	r0 = D(r0, s0_2_2, 0xF0F20FE3, 0x0BDF7FF5, 0xFF22F2FC, 0x2DE2EAFD);
	r1 = D(r1, s0_2_2, 0x2E36F604, 0x13E2220A, 0x00F9FF00, 0x0716001B);
	r2 = D(r2, s0_2_2, 0x201500FB, 0x0B13FDFB, 0x13120AF5, 0xEF110A0D);
	r3 = D(r3, s0_2_2, 0xEA34E629, 0xE496FCF7, 0xD613B7EB, 0x0BF7FDF8);
	r4 = D(r4, s0_2_2, 0xF7FD5C13, 0xFCFAD0F8, 0x1004FCF9, 0x060A1C01);
	r5 = D(r5, s0_2_2, 0xD20A561A, 0xEBF2FB0A, 0x08E10517, 0xE081C11F);
	r6 = D(r6, s0_2_2, 0xF4FBF114, 0xE4ED32E0, 0x07EF790A, 0xF71DFB09);
	r7 = D(r7, s0_2_2, 0x4310F7FA, 0x1F0CF8EB, 0x1B29F30F, 0xF3F52E19);
	r0 = D(r0, s1_0_0, 0x0F1234FE, 0x02F74714, 0xEFCBD8F4, 0xFBF62620);
	r1 = D(r1, s1_0_0, 0x08FC070E, 0x0F44D6F1, 0x0FF7F206, 0xFF05090F);
	r2 = D(r2, s1_0_0, 0x5014DC20, 0x053C0505, 0xEC0905E9, 0xD01AEEE9);
	r3 = D(r3, s1_0_0, 0xFF040BFF, 0x0B1AFF1A, 0xE9FA1B08, 0x0EF3EBFC);
	r4 = D(r4, s1_0_0, 0xF11B31F2, 0xEAF44AE6, 0xFB1C53E7, 0x000BFBFF);
	r5 = D(r5, s1_0_0, 0xE8E8E909, 0x150B22FA, 0xF3D7FD06, 0xE7EFF9F7);
	r6 = D(r6, s1_0_0, 0x140E0B0A, 0xECF62BDD, 0xE81DC00F, 0x12052D0D);
	r7 = D(r7, s1_0_0, 0xFB19FC04, 0x07051C06, 0xFAF90304, 0xF410FB01);
	r0 = D(r0, s1_0_1, 0xE300FF0E, 0x0E040118, 0x03E3C3F6, 0xD10005FB);
	r1 = D(r1, s1_0_1, 0x05FE07F7, 0x082CF2FB, 0x0AEB0CFD, 0xFDEB3714);
	r2 = D(r2, s1_0_1, 0xFBE9F218, 0x17370503, 0x010AEFFD, 0x27054ADE);
	r3 = D(r3, s1_0_1, 0x18F8300F, 0x05E1F8F5, 0x21101821, 0xF20DFFE1);
	r4 = D(r4, s1_0_1, 0xFDF11E02, 0xFEE4EF0B, 0x070D41EE, 0x18F81823);
	r5 = D(r5, s1_0_1, 0x09DA04FD, 0x01ED1A01, 0xE50A2607, 0xD7ECF8FD);
	r6 = D(r6, s1_0_1, 0x03F919F0, 0xFDFB3605, 0x02F509EF, 0x10081828);
	r7 = D(r7, s1_0_1, 0x04FE0B04, 0x04E9F30E, 0xEFE7F001, 0xECF30306);
	r0 = D(r0, s1_0_2, 0xE510000F, 0x05EF24F7, 0x0624F9E8, 0xF8F3EE16);
	r1 = D(r1, s1_0_2, 0x08FEFC0C, 0x0621F3E3, 0xF6060203, 0xF6FEFFD0);
	r2 = D(r2, s1_0_2, 0xFBF407EC, 0x01F5F805, 0x0105F9F4, 0x1DE5160E);
	r3 = D(r3, s1_0_2, 0xF910DD11, 0xFC031A00, 0xE60B1326, 0xFC14FA03);
	r4 = D(r4, s1_0_2, 0xF9F31208, 0xFA1BB63D, 0x16120AEB, 0x010F0210);
	r5 = D(r5, s1_0_2, 0x09F50000, 0xFBFA0417, 0x12E0EE08, 0xF7FE0706);
	r6 = D(r6, s1_0_2, 0x0DF6F21A, 0x04F90D17, 0xEB1FECF2, 0x06FA1D00);
	r7 = D(r7, s1_0_2, 0xFC0101FC, 0x010003F0, 0x0209F301, 0x15F81906);
	r0 = D(r0, s1_1_0, 0x14C91E24, 0x031023FE, 0x04D512FD, 0x34090CE8);
	r1 = D(r1, s1_1_0, 0xF6E10BF2, 0x1CE63203, 0x04130D13, 0xE9FA0F06);
	r2 = D(r2, s1_1_0, 0xE11A98E3, 0x05E8EDFE, 0xFDFF0BFB, 0xF6CBFC1B);
	r3 = D(r3, s1_1_0, 0xFF1C3108, 0xF025D1FD, 0x13E92EE7, 0x070AE518);
	r4 = D(r4, s1_1_0, 0x96F21502, 0xE212F001, 0x11F5F800, 0xEDF115F5);
	r5 = D(r5, s1_1_0, 0x1C18E007, 0x3A1EF707, 0x1224F8ED, 0x0F15CA0C);
	r6 = D(r6, s1_1_0, 0x121A1510, 0x1E260BFB, 0xECEAB4E9, 0x2E082DE2);
	r7 = D(r7, s1_1_0, 0xE2F3FBF6, 0xECF831F3, 0x14082A05, 0x0F2AA9FA);
	r0 = D(r0, s1_1_1, 0x1412D721, 0xEC0114E3, 0x1910FA13, 0xF5141E15);
	r1 = D(r1, s1_1_1, 0x07F8020A, 0xE4C03710, 0xE6F507EE, 0x1C2B1112);
	r2 = D(r2, s1_1_1, 0xF0EE4201, 0x0EE807F8, 0xF2F604F9, 0xE5F41B14);
	r3 = D(r3, s1_1_1, 0xFEE4F7FB, 0x0CF2F7F0, 0xFCE9A601, 0x0BEC2715);
	r4 = D(r4, s1_1_1, 0x030DF6FE, 0xE5F205F5, 0x04E85FFC, 0xE4F22BE1);
	r5 = D(r5, s1_1_1, 0xE21DC3D7, 0x0806F2F9, 0xBF081E16, 0x3343EE0B);
	r6 = D(r6, s1_1_1, 0xC71B0DF0, 0xE9CE20EB, 0xD20014EB, 0x221131D5);
	r7 = D(r7, s1_1_1, 0x0C130AF5, 0x06033AFC, 0xD6F8030A, 0xF00F40E8);
	r0 = D(r0, s1_1_2, 0xFCFF0402, 0xEE0BFD09, 0xF4050B0D, 0x1BE6FCF2);
	r1 = D(r1, s1_1_2, 0x1016FBF8, 0xFBF51F04, 0xF7FEF9FF, 0xE60405FF);
	r2 = D(r2, s1_1_2, 0x070E2802, 0x07060103, 0xFEF7F206, 0xE3FC1DF8);
	r3 = D(r3, s1_1_2, 0x0AF4F3EB, 0xF8090004, 0x361CBBD1, 0x0A040A08);
	r4 = D(r4, s1_1_2, 0x071BF6FF, 0x3E170DD0, 0x08EB2C21, 0x09E60CFA);
	r5 = D(r5, s1_1_2, 0xFE11F215, 0x1000040C, 0x1AF8F0DD, 0x0404FC0A);
	r6 = D(r6, s1_1_2, 0x00FB2802, 0xFF02FF12, 0xD2050219, 0xF8120BE3);
	r7 = D(r7, s1_1_2, 0x0CF5F803, 0xFCE8FFF8, 0xFF0CF6ED, 0x0009FE10);
	r0 = D(r0, s1_2_0, 0xE70AF2DF, 0xEDF91709, 0x0D00FCF0, 0xFC2A0B24);
	r1 = D(r1, s1_2_0, 0x060FEEEE, 0xE9EA1DF9, 0x0BEEF8F6, 0x0FE011F3);
	r2 = D(r2, s1_2_0, 0xFAFA04EE, 0xF606FBFC, 0xF90CF0FB, 0xFB39F5FB);
	r3 = D(r3, s1_2_0, 0x12DB0AF8, 0xF4E3FB29, 0xF40A3401, 0xFEF2F504);
	r4 = D(r4, s1_2_0, 0x041F0611, 0xFF0430FF, 0xECF11313, 0xFDF80FFE);
	r5 = D(r5, s1_2_0, 0x0804D9FF, 0x1CEF1EF2, 0xF3182BEB, 0x14F0E00A);
	r6 = D(r6, s1_2_0, 0xFBDF1603, 0xFFF6F8FA, 0x0DF3F621, 0xF7EB3F10);
	r7 = D(r7, s1_2_0, 0xF206D30B, 0xEE02F808, 0x05F914FB, 0x1203C212);
	r0 = D(r0, s1_2_1, 0xE506D8F5, 0xF5FA07FD, 0xF4130809, 0xD0E605E3);
	r1 = D(r1, s1_2_1, 0xEF05F20A, 0xE1EC2412, 0xEA020F06, 0x22EB060F);
	r2 = D(r2, s1_2_1, 0xE6EF210F, 0x08F40DFB, 0x0908FA13, 0x1724F0E2);
	r3 = D(r3, s1_2_1, 0xF417C816, 0x00F3E5ED, 0x10E5DDD8, 0xEFE8FB17);
	r4 = D(r4, s1_2_1, 0xF3ED06FB, 0xCC002412, 0xF3FB27FD, 0xED130B0C);
	r5 = D(r5, s1_2_1, 0x0F09E0F6, 0x1A081400, 0xFF06F5FB, 0x020CF4F2);
	r6 = D(r6, s1_2_1, 0x05DE1BDE, 0x3315CF22, 0xC7D54CEB, 0x06E62EF1);
	r7 = D(r7, s1_2_1, 0x032717F6, 0x0AEA0AFE, 0x2C04F41A, 0xF812EE04);
	r0 = D(r0, s1_2_2, 0xFA0D0FF3, 0xFF1C00DD, 0x09F31004, 0x18F51CE5);
	r1 = D(r1, s1_2_2, 0xFF07FE03, 0x0B0E030B, 0xFF09EF01, 0xF4030B05);
	r2 = D(r2, s1_2_2, 0x0804FA02, 0x01F70803, 0x04FEF202, 0xDB0C050A);
	r3 = D(r3, s1_2_2, 0xCD140104, 0xFDFA01FA, 0xEE0BF61C, 0xFD0EFEF8);
	r4 = D(r4, s1_2_2, 0x03F812FC, 0x141AF7E8, 0x09FC03FC, 0x0501F4FC);
	r5 = D(r5, s1_2_2, 0x0010D9FA, 0xF8020509, 0xF000F814, 0xF314F3FF);
	r6 = D(r6, s1_2_2, 0x1035F3F8, 0xEA08FA29, 0x150B0302, 0x06041206);
	r7 = D(r7, s1_2_2, 0xF2F22CF4, 0xEDF81D1D, 0xF3F40CF8, 0xFFF5060E);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEF51107, 0x08F2EFFB, 0xFDF8F832, 0x010E1B07);
	r1 = D(r1, s0_0_0, 0xFC0AF9FD, 0x17EFF91B, 0x0104F109, 0x230D00FA);
	r2 = D(r2, s0_0_0, 0xED011CE6, 0x0D06FB00, 0x01E80D04, 0x11D3EFF2);
	r3 = D(r3, s0_0_0, 0xEE04F9F9, 0xF50F030E, 0x07D1F520, 0xF7FFFE0D);
	r4 = D(r4, s0_0_0, 0x073DFFFE, 0x1806DA1F, 0xF915F0F6, 0xFD15ED0B);
	r5 = D(r5, s0_0_0, 0x07F60302, 0x0401F6F6, 0x1A17FCFB, 0x0AFAF501);
	r6 = D(r6, s0_0_0, 0xFDF3FAFF, 0x090206F2, 0x1805E1E6, 0x04FDFB18);
	r7 = D(r7, s0_0_0, 0xF7000FFF, 0xE5EE1E1B, 0x0404EFEE, 0x0A03FA26);
	r0 = D(r0, s0_0_1, 0xF2FCF7F0, 0x12EA31E4, 0x26FF0910, 0x0EE51AF6);
	r1 = D(r1, s0_0_1, 0x04EE02F7, 0x01090318, 0x0B13FB01, 0xFA28F702);
	r2 = D(r2, s0_0_1, 0x1B9C099A, 0xEDE5F0FC, 0xEEEA0812, 0x0C101BCA);
	r3 = D(r3, s0_0_1, 0xF0E11DFD, 0x1B01F903, 0xDB3611CD, 0x070E05EE);
	r4 = D(r4, s0_0_1, 0xFBC9FB12, 0xF2160814, 0xFD2DF501, 0xFE0F0CFA);
	r5 = D(r5, s0_0_1, 0xFFF5EE2D, 0x02071513, 0x21F91DE2, 0xF12102EE);
	r6 = D(r6, s0_0_1, 0xE9FF000F, 0xF3EFF304, 0x1F26190F, 0xFAD9F112);
	r7 = D(r7, s0_0_1, 0xFEF6EB09, 0x08E5E610, 0x0A0FFE19, 0x0AF818E6);
	r0 = D(r0, s0_0_2, 0xF8127902, 0xF810E4FB, 0xD3EB3414, 0xF4CFC8FA);
	r1 = D(r1, s0_0_2, 0xEFF90203, 0xF7F2FA26, 0x090803ED, 0x4E1BEB03);
	r2 = D(r2, s0_0_2, 0x00E0E4CA, 0x1C00E8FB, 0x0D13F103, 0x0FE9FAEF);
	r3 = D(r3, s0_0_2, 0xFEF9EEF5, 0xEDDF11ED, 0xDA21F3F5, 0xFFFD00F4);
	r4 = D(r4, s0_0_2, 0xE2D5E6F6, 0x51F0FF10, 0x10D7A9E8, 0x010019EB);
	r5 = D(r5, s0_0_2, 0x04FAC525, 0x090831FA, 0xE9FCBCC5, 0xFEED6F03);
	r6 = D(r6, s0_0_2, 0x06BC1017, 0xECE57210, 0xF8F61D2F, 0xE2F11EFF);
	r7 = D(r7, s0_0_2, 0x0F1C01F6, 0xFA11CBFC, 0x0AF7090A, 0xFEEDF803);
	r0 = D(r0, s0_1_0, 0x1604CB13, 0x12FF19E9, 0x1702ED18, 0x100CF6F5);
	r1 = D(r1, s0_1_0, 0x171307FD, 0xF9D10A02, 0x0E08030F, 0xD9F723FD);
	r2 = D(r2, s0_1_0, 0x0E220ADD, 0xFBF709F9, 0x08FD0FFC, 0x19140309);
	r3 = D(r3, s0_1_0, 0x011A05E6, 0x0937100B, 0x15D6ED1D, 0x0D1AFFFD);
	r4 = D(r4, s0_1_0, 0xEFF1F31F, 0xFBFBF2EC, 0x0AFA180C, 0x1B00061C);
	r5 = D(r5, s0_1_0, 0xFE041D21, 0x11EFE802, 0xC6211DC6, 0x1800E207);
	r6 = D(r6, s0_1_0, 0x21F70410, 0x1219F8F1, 0xF7C2F8F2, 0x1306FA0B);
	r7 = D(r7, s0_1_0, 0xFA0AFC06, 0x1CF62A07, 0x0BFAEDDC, 0xFEDDE52F);
	r0 = D(r0, s0_1_1, 0xC10CD910, 0x0EE41C13, 0xFDFDE116, 0x143103E6);
	r1 = D(r1, s0_1_1, 0x120905FD, 0x0CEE1B03, 0xFDE01608, 0xFFFB1615);
	r2 = D(r2, s0_1_1, 0x1211EBC0, 0x030003FD, 0x2AEF0D11, 0xFFF91313);
	r3 = D(r3, s0_1_1, 0x2DFBC5E5, 0x0612F2FA, 0x110D02E1, 0xF41919E4);
	r4 = D(r4, s0_1_1, 0x2BEB25E3, 0xC9EBF60E, 0x0AF31019, 0xFCF62835);
	r5 = D(r5, s0_1_1, 0x54132022, 0xFD0FFBF9, 0xF9C613F8, 0xF3F000E7);
	r6 = D(r6, s0_1_1, 0x04E8EE0C, 0x0AF8F3F0, 0x07EDEACB, 0x06F5FA10);
	r7 = D(r7, s0_1_1, 0x2E1006E8, 0xF8E80BEF, 0xFD0719FB, 0xF00DF1F3);
	r0 = D(r0, s0_1_2, 0x16101423, 0x0D060520, 0x01FD00F1, 0x07F726E2);
	r1 = D(r1, s0_1_2, 0x02031E12, 0xF704FE09, 0x0EF6F8F9, 0x1CF9E6CF);
	r2 = D(r2, s0_1_2, 0x0FF80C02, 0x06081B04, 0x02FD0600, 0xF7090E35);
	r3 = D(r3, s0_1_2, 0x073209C9, 0x0B08F4DF, 0x190D04D8, 0x0D01F405);
	r4 = D(r4, s0_1_2, 0xE6F811E6, 0xD5DA0CFC, 0x07F41DFF, 0x0DF60BF4);
	r5 = D(r5, s0_1_2, 0xE71DF411, 0xFC00F1FA, 0x11EBE506, 0x04F6061C);
	r6 = D(r6, s0_1_2, 0x2911EC07, 0x13F0CBEA, 0x0107FD1A, 0xF9FAE1FE);
	r7 = D(r7, s0_1_2, 0xD9811311, 0xE9D6DAFA, 0xFDFD25D9, 0x090EDBFF);
	r0 = D(r0, s0_2_0, 0x15F6060A, 0xFE04F7FB, 0xFDFEE6FF, 0x0EEF0E1A);
	r1 = D(r1, s0_2_0, 0xF90EFAF2, 0x0002FAF3, 0xF1FB080A, 0xED03FEFD);
	r2 = D(r2, s0_2_0, 0xEB1004E5, 0x0102FCFA, 0xF102FF0B, 0xEA0609EE);
	r3 = D(r3, s0_2_0, 0xFDFD0BD6, 0xF21803DC, 0xF12F05E3, 0xFFFDFD07);
	r4 = D(r4, s0_2_0, 0x1C1FF0F6, 0x12FC11FD, 0xFEFC03FF, 0xFCF5F4F9);
	r5 = D(r5, s0_2_0, 0xF8F6050B, 0x0502FEF0, 0xFE0AD603, 0x1CF6F11B);
	r6 = D(r6, s0_2_0, 0x070CF400, 0x0400F7FA, 0xED110212, 0x01FC0A04);
	r7 = D(r7, s0_2_0, 0xEF0FF3F4, 0x060602E3, 0xFF12F9E7, 0x1DF11803);
	r0 = D(r0, s0_2_1, 0x0904FF18, 0xFB0FF1F6, 0xF508FC05, 0xE0F20808);
	r1 = D(r1, s0_2_1, 0xF4FCE112, 0xEA07F5FF, 0xFAFFED0D, 0xF90FFDE9);
	r2 = D(r2, s0_2_1, 0xDC0AEAEF, 0xED020AFC, 0xEE13FB0C, 0xE1FBF30F);
	r3 = D(r3, s0_2_1, 0xDD1F05AA, 0xF005E80D, 0x090208F5, 0x0A070404);
	r4 = D(r4, s0_2_1, 0x13180AFF, 0x170722F0, 0xD30AF008, 0x090CFB04);
	r5 = D(r5, s0_2_1, 0x060BDFE4, 0xDF00EAF5, 0xFCF4090A, 0xFEFB102E);
	r6 = D(r6, s0_2_1, 0x0B12110B, 0x12090508, 0x0710031C, 0xFCFC0FFC);
	r7 = D(r7, s0_2_1, 0xFB11E7EB, 0x19FA0DE5, 0x1D10F1E3, 0x0921040E);
	r0 = D(r0, s0_2_2, 0x0901F217, 0xD112EFF7, 0xFAF20401, 0xE435EFF2);
	r1 = D(r1, s0_2_2, 0xED0502F6, 0xFFEAF40B, 0xF100F718, 0xDC050CC8);
	r2 = D(r2, s0_2_2, 0xE503140C, 0x060209FB, 0x0216D702, 0x1126E302);
	r3 = D(r3, s0_2_2, 0x20F640CF, 0xF0FB02E9, 0xF4EB10D7, 0x07F80B09);
	r4 = D(r4, s0_2_2, 0xEE1004DC, 0xF917FE10, 0x00FF0309, 0x0403F60F);
	r5 = D(r5, s0_2_2, 0xD30A19F1, 0x03020EFA, 0x02FD06DA, 0xF71EBE08);
	r6 = D(r6, s0_2_2, 0xCE00FEE7, 0x0829D9F5, 0xF1EAFAF9, 0xF4FE0601);
	r7 = D(r7, s0_2_2, 0x17060BF1, 0xE5F20BF9, 0x0F1004EC, 0xE2FD0C02);
	r0 = D(r0, s1_0_0, 0xF605F302, 0x0EFFF616, 0xD7D00A0E, 0xF5010019);
	r1 = D(r1, s1_0_0, 0x05000605, 0xF6D6F80E, 0x050FFB08, 0x064DF306);
	r2 = D(r2, s1_0_0, 0xCDDD0AD5, 0x02FBFAFB, 0x0E07FB05, 0x030DF610);
	r3 = D(r3, s1_0_0, 0x09E905F1, 0x092102FC, 0xE33B06F8, 0xED30FB02);
	r4 = D(r4, s1_0_0, 0xEC331108, 0x013312FD, 0x02021FFB, 0x0A0E050B);
	r5 = D(r5, s1_0_0, 0xFD170715, 0xF4E012F0, 0x1109ED0C, 0x04410008);
	r6 = D(r6, s1_0_0, 0x1AADFBF5, 0x0C0E0B02, 0xF61537FB, 0xFC81020B);
	r7 = D(r7, s1_0_0, 0xFCFEFE01, 0xEBEA0BFD, 0x05D80CFC, 0x1E4FDC06);
	r0 = D(r0, s1_0_1, 0x26E1EC0C, 0x37F3EAF2, 0xDCD3F515, 0x1D00F1FB);
	r1 = D(r1, s1_0_1, 0xF9F6EC07, 0xEEF1331B, 0xF1EC1105, 0xFB19EB01);
	r2 = D(r2, s1_0_1, 0x901124E9, 0x040C2107, 0x02211005, 0x14122112);
	r3 = D(r3, s1_0_1, 0x0BF1FFE7, 0x0012D4F7, 0xD90FA9B7, 0xFE2A0C05);
	r4 = D(r4, s1_0_1, 0xF309EC05, 0x0DF521FE, 0xDDEFF027, 0xF4F610FD);
	r5 = D(r5, s1_0_1, 0x0BE816FD, 0xEC2405FF, 0x1FE6FBE7, 0x0CFD0614);
	r6 = D(r6, s1_0_1, 0xE5F91BFF, 0x1AF2EF04, 0xF9F6F901, 0x20BF170E);
	r7 = D(r7, s1_0_1, 0xFEF7F1FC, 0x1DF302F7, 0xDEE6EB09, 0xFB0AFB0D);
	r0 = D(r0, s1_0_2, 0xB7E71601, 0x38E1FB00, 0xD0EC0213, 0x57E0DA0A);
	r1 = D(r1, s1_0_2, 0x000EF6FB, 0x2403FE06, 0x1E010C00, 0x81120CF4);
	r2 = D(r2, s1_0_2, 0x141DF5F9, 0xEEF607FD, 0x2C031E08, 0x1209F3FE);
	r3 = D(r3, s1_0_2, 0xCC2FF0FA, 0xDE13F5ED, 0x8803DC2A, 0x150903FF);
	r4 = D(r4, s1_0_2, 0x25FEE306, 0x30ECFD1F, 0x4FE711FC, 0x070D08FF);
	r5 = D(r5, s1_0_2, 0xF5E91C12, 0xDB1613FF, 0x4FE6E8F4, 0x36EEF912);
	r6 = D(r6, s1_0_2, 0xF8F7F110, 0xD00F1AF6, 0x0C04E9ED, 0x0BF8E704);
	r7 = D(r7, s1_0_2, 0xEA0AF110, 0x20FC18FD, 0xBE0816F8, 0xEF030209);
	r0 = D(r0, s1_1_0, 0x031D13F9, 0x046814EF, 0xF808FC16, 0xEFF303E8);
	r1 = D(r1, s1_1_0, 0x0C250AFA, 0x0BCF181B, 0x0EF6EA10, 0x04D0F501);
	r2 = D(r2, s1_1_0, 0xF9120AE8, 0x030506FA, 0x1121F012, 0x0CFEF610);
	r3 = D(r3, s1_1_0, 0x0EF914F5, 0xFDBCE9E1, 0xEDDDED1A, 0x0B6BF312);
	r4 = D(r4, s1_1_0, 0xF9810CDD, 0xF4261015, 0xEA8AF8FD, 0x1448E712);
	r5 = D(r5, s1_1_0, 0xE7F3EA00, 0xFC81F0FA, 0x287701FF, 0xF4ED1B03);
	r6 = D(r6, s1_1_0, 0x05AEE202, 0x0EDF04F9, 0x05FCDE14, 0x0C810201);
	r7 = D(r7, s1_1_0, 0xF815060A, 0x19560A1D, 0x0EFE05EC, 0xFAABEAF2);
	r0 = D(r0, s1_1_1, 0x130109F6, 0x0D1AFBEA, 0x1E10E615, 0x5138FC08);
	r1 = D(r1, s1_1_1, 0x1EFBF4EC, 0x2BF8211B, 0x1A4808F8, 0xE78117FD);
	r2 = D(r2, s1_1_1, 0x0929D3C5, 0xFAEF05C7, 0xF9FF0815, 0xF527E7C5);
	r3 = D(r3, s1_1_1, 0xF348FCF5, 0xD41B0B0D, 0x12AA4EEE, 0xFBF101EB);
	r4 = D(r4, s1_1_1, 0x8109DEEC, 0xEA4423D7, 0xF1F50CF2, 0x014AED09);
	r5 = D(r5, s1_1_1, 0xF4E8EC22, 0xF3F6E60B, 0xDE122200, 0xDD0A0DDE);
	r6 = D(r6, s1_1_1, 0x00151123, 0x1709E508, 0x03F604EF, 0xF1F6F44E);
	r7 = D(r7, s1_1_1, 0xF1E40005, 0x3A32DAFE, 0xDB31FDD3, 0xBBEE2EE9);
	r0 = D(r0, s1_1_2, 0xE4EDF901, 0xEA140EFA, 0x2F09EAE9, 0xD0E10C2E);
	r1 = D(r1, s1_1_2, 0xDE1506FE, 0x37F8E612, 0x1F06F9FF, 0xBD020BD9);
	r2 = D(r2, s1_1_2, 0x2918F4EC, 0x080B0CF5, 0x29E5EDF7, 0x0AFAE315);
	r3 = D(r3, s1_1_2, 0x062BFBF6, 0xDE110AEB, 0xB208280A, 0xFF1DF1F4);
	r4 = D(r4, s1_1_2, 0xF62AFE01, 0x2127FE0B, 0x18FF0016, 0x3709FBFA);
	r5 = D(r5, s1_1_2, 0xFA14E8FA, 0xE01012E6, 0xC7F2E3EB, 0x9B032B18);
	r6 = D(r6, s1_1_2, 0xDDFEE31B, 0x371405D6, 0x48000514, 0xFF03FB18);
	r7 = D(r7, s1_1_2, 0x0CF3FCFD, 0x06E803F2, 0xD1FF0607, 0xFF0233E0);
	r0 = D(r0, s1_2_0, 0x0BFAF8ED, 0x070AFDF6, 0x14EBFF02, 0xEF0E0DF8);
	r1 = D(r1, s1_2_0, 0xFACC0FFA, 0x212AF52C, 0xF80B0D03, 0x0DF70312);
	r2 = D(r2, s1_2_0, 0xFD1D1BC6, 0x030B0607, 0xFDF7FD05, 0xF3FF0D07);
	r3 = D(r3, s1_2_0, 0x0B0E17D7, 0x0AD6190C, 0x1F30C9ED, 0xFF20FAFA);
	r4 = D(r4, s1_2_0, 0xF3AF25F0, 0x01E7DC02, 0x12EFFA1F, 0x0804F703);
	r5 = D(r5, s1_2_0, 0xFF290826, 0x0ACA1B00, 0x0BF1E5F7, 0x01EEF602);
	r6 = D(r6, s1_2_0, 0x02ECFF18, 0x00FC05EE, 0x0411F819, 0x01ED04FE);
	r7 = D(r7, s1_2_0, 0xFE041216, 0x0AFE0019, 0x09F805E4, 0x1523EA18);
	r0 = D(r0, s1_2_1, 0xE9F5F72D, 0xFCB7F215, 0xEF1318FA, 0xF90EEDF9);
	r1 = D(r1, s1_2_1, 0xDF120BFC, 0x220F0518, 0xF4ED03F5, 0x020712EE);
	r2 = D(r2, s1_2_1, 0x0ADEE625, 0xFF10F907, 0xFF060111, 0xF9EAE3F0);
	r3 = D(r3, s1_2_1, 0xFA580488, 0x00EF32D5, 0xFC0E30A9, 0xF109FFF4);
	r4 = D(r4, s1_2_1, 0xEFF92DD2, 0x0D00F7E3, 0x0C1C0568, 0xF2091516);
	r5 = D(r5, s1_2_1, 0xF91B3910, 0xF5EF24F6, 0x02F426F5, 0xFBE2EEE4);
	r6 = D(r6, s1_2_1, 0xF9F51A41, 0x07FA0000, 0x2F16E4F8, 0x0AFBFE11);
	r7 = D(r7, s1_2_1, 0x01B806EC, 0x00DD0DF9, 0xF60D1E02, 0xE5F2EBD9);
	r0 = D(r0, s1_2_2, 0x0D02F707, 0xFCFA0CFD, 0x11FBFB03, 0x0718F4E8);
	r1 = D(r1, s1_2_2, 0xFAEFFCFE, 0x20FEEE1C, 0xFF050A13, 0x190602DA);
	r2 = D(r2, s1_2_2, 0xEAE60806, 0x02FEF9F8, 0xF20B040A, 0xD7FA2415);
	r3 = D(r3, s1_2_2, 0xF707DDF1, 0x060815E6, 0xF60BDB9A, 0x17F00304);
	r4 = D(r4, s1_2_2, 0x020CF5ED, 0xFFD8E8FB, 0x1905EC0C, 0xF0F60BFF);
	r5 = D(r5, s1_2_2, 0xFA14F808, 0xFF04F5FA, 0xDD0117E5, 0x09151514);
	r6 = D(r6, s1_2_2, 0x17F30300, 0xE6FB1206, 0x3DFFF41E, 0x1CF5FA11);
	r7 = D(r7, s1_2_2, 0xC3F7112E, 0x1917E40F, 0xDBF006F5, 0x07F60023);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF2121AF5, 0x040C21EC, 0x13E807E2, 0xF3140605);
	r1 = D(r1, s0_0_0, 0x0EFC0AF8, 0xF603EFEB, 0x08F503F9, 0x24FD1A05);
	r2 = D(r2, s0_0_0, 0x1AFA0921, 0x13F80409, 0xFEFEF8FF, 0x06DB1E1B);
	r3 = D(r3, s0_0_0, 0x0013EE0F, 0x0A0BF911, 0xF7221100, 0xFB0C0F14);
	r4 = D(r4, s0_0_0, 0x1101E807, 0xEA080EE6, 0xF9F1E808, 0x18FC0FF6);
	r5 = D(r5, s0_0_0, 0x09FB112D, 0xFF010506, 0x180D01FC, 0xF40B0000);
	r6 = D(r6, s0_0_0, 0x0AF4031C, 0x07EFF4E8, 0x1CF7F20E, 0xE104ED0A);
	r7 = D(r7, s0_0_0, 0x0705F909, 0x0D18D806, 0xED1DFAFA, 0x21FEFC2F);
	r0 = D(r0, s0_0_1, 0x2FF3461A, 0x08D81C18, 0xC9F00F2B, 0x0E1802FD);
	r1 = D(r1, s0_0_1, 0xEB05150E, 0xFBE6F704, 0xE6F701F3, 0xCE11E608);
	r2 = D(r2, s0_0_1, 0x26E3400D, 0xFDFFFA00, 0xFAF9F7F6, 0xF7F40CEB);
	r3 = D(r3, s0_0_1, 0x090F01E1, 0xF918301F, 0x1A0413E0, 0xEC170BFB);
	r4 = D(r4, s0_0_1, 0xFEFB0206, 0xFD062AC7, 0xF1E1FCD4, 0xE9F02AFB);
	r5 = D(r5, s0_0_1, 0xFD0FE70F, 0x0D0CEDF8, 0x05F2000C, 0xECF101FC);
	r6 = D(r6, s0_0_1, 0xECFAF417, 0xFFF9F117, 0xF50213FB, 0x12E6DF20);
	r7 = D(r7, s0_0_1, 0xF9030803, 0x07F5FFE6, 0x071E13F5, 0xFF030C19);
	r0 = D(r0, s0_0_2, 0xFA07FDEC, 0xF8F1E501, 0xF3E50D18, 0x05080D0F);
	r1 = D(r1, s0_0_2, 0x03FD0900, 0xF1081F11, 0x0EF9E7FD, 0xF921F1E6);
	r2 = D(r2, s0_0_2, 0x0A2007F2, 0xFE0924FE, 0xEC020203, 0xECFDF6F6);
	r3 = D(r3, s0_0_2, 0xFF061C03, 0xF812ECFB, 0xDFF00CE0, 0x0D0A08FE);
	r4 = D(r4, s0_0_2, 0x150DEA11, 0x2D04F41F, 0x2B020410, 0xF2F813F4);
	r5 = D(r5, s0_0_2, 0xD6051E0D, 0xF2080004, 0xF1F4F306, 0xFA14F7F5);
	r6 = D(r6, s0_0_2, 0xDB15000E, 0x0606F3F8, 0x0B0ADEF3, 0xF0FBF908);
	r7 = D(r7, s0_0_2, 0xEBFEFFFA, 0x11FEF5FB, 0x1916F8F7, 0xFE2015F5);
	r0 = D(r0, s0_1_0, 0xECFF1056, 0xF0DE0602, 0xF7FB0AF6, 0x14E6FE1D);
	r1 = D(r1, s0_1_0, 0x1105FFEE, 0xFFE8FF14, 0x35EE0B0D, 0x120D160E);
	r2 = D(r2, s0_1_0, 0xC0FEDBFA, 0x0500FEFC, 0x01F5FB0E, 0xD410F101);
	r3 = D(r3, s0_1_0, 0xE712E2E1, 0x11ED16F1, 0xF1F3E8F4, 0x0009FEF6);
	r4 = D(r4, s0_1_0, 0xD8250003, 0x1E06011F, 0x1D12E30C, 0x0FF802FF);
	r5 = D(r5, s0_1_0, 0x2D1B08F0, 0x17150116, 0x0004F9F6, 0x23050AFB);
	r6 = D(r6, s0_1_0, 0xFB0CFA04, 0xD7F71908, 0x2009F1E8, 0x070301FB);
	r7 = D(r7, s0_1_0, 0x27EC0AFA, 0xBAE917EF, 0xF409F9FA, 0x02F02DD7);
	r0 = D(r0, s0_1_1, 0x0411F107, 0x03E10EFA, 0x2D19FD0E, 0x02F2E3F3);
	r1 = D(r1, s0_1_1, 0xF803F40B, 0x1AE50C04, 0xFDE5F617, 0x08EFECDC);
	r2 = D(r2, s0_1_1, 0xCE0C4BFD, 0x060A3008, 0x13FB160C, 0x2F19FED0);
	r3 = D(r3, s0_1_1, 0xF4E62000, 0x180AD6FB, 0x1B33EA1A, 0x1AFE17F3);
	r4 = D(r4, s0_1_1, 0xF8F0FDFE, 0xEFD9FA37, 0x0818F11A, 0x0DCC2228);
	r5 = D(r5, s0_1_1, 0x190FDAD5, 0x1E133503, 0xEF0B0012, 0xF712EE16);
	r6 = D(r6, s0_1_1, 0xE7181805, 0xDEF42905, 0x001BED18, 0xFA060EE3);
	r7 = D(r7, s0_1_1, 0xE8F70503, 0xE6EAE3E6, 0xD222DE0E, 0x05E8CCF2);
	r0 = D(r0, s0_1_2, 0x3D0CED00, 0x07FC20F2, 0x040410DE, 0x11CB182C);
	r1 = D(r1, s0_1_2, 0x020CF9F5, 0x0BE30E0C, 0x1609150F, 0x2C2006F6);
	r2 = D(r2, s0_1_2, 0xDFFFA6FF, 0xF1F39C10, 0x0110060F, 0x0108F6E5);
	r3 = D(r3, s0_1_2, 0x0B070B13, 0xEE0D03E4, 0xFFE7F217, 0x000FFDFC);
	r4 = D(r4, s0_1_2, 0xDCEC0EFB, 0xCDF0FA02, 0xD9F5120C, 0xE0F80510);
	r5 = D(r5, s0_1_2, 0xEAFCFC03, 0xF1FCFDF5, 0xF115EF11, 0xFB10260B);
	r6 = D(r6, s0_1_2, 0xFC10F0D7, 0xE9FAF5EB, 0xCEE60DFA, 0xFBCE0204);
	r7 = D(r7, s0_1_2, 0x17F7FB09, 0xFEFB1536, 0x183730F6, 0x131EF9FC);
	r0 = D(r0, s0_2_0, 0x111808E9, 0xDF13E913, 0x03FE1511, 0x2E1BE904);
	r1 = D(r1, s0_2_0, 0xFF04F802, 0x1CE1100E, 0xE9160200, 0xE6F703FD);
	r2 = D(r2, s0_2_0, 0xE407FBE7, 0xFC0DFBF7, 0x0905FDFA, 0xDE0CF505);
	r3 = D(r3, s0_2_0, 0x312DEC08, 0xEF1CFCE8, 0x03F625F8, 0xF1030800);
	r4 = D(r4, s0_2_0, 0x321DEAF3, 0x011F040F, 0xE5F203E7, 0x2118EE01);
	r5 = D(r5, s0_2_0, 0x0BE60DE6, 0xFBE804DE, 0x23FCFDFC, 0x14FFFDF6);
	r6 = D(r6, s0_2_0, 0x06E8F8FC, 0x04FEE5FC, 0x09FA3104, 0x13F41DFE);
	r7 = D(r7, s0_2_0, 0x0A021104, 0x33E01E0E, 0x17FBF3FD, 0x060104E4);
	r0 = D(r0, s0_2_1, 0xF423ED15, 0xFD09D106, 0xF4DD11F3, 0x0D1913DB);
	r1 = D(r1, s0_2_1, 0x09EEF801, 0xD9F905E3, 0xE70011E6, 0xD0E80AF7);
	r2 = D(r2, s0_2_1, 0x0F19DEF1, 0xED03FBF5, 0xF9EE18FB, 0x04031023);
	r3 = D(r3, s0_2_1, 0x1300E0F9, 0x130BEB0B, 0xFD2AF31B, 0xEAFF06F5);
	r4 = D(r4, s0_2_1, 0xEB1A15F8, 0x0AF715E9, 0x06FD05D8, 0x1BE0E1F6);
	r5 = D(r5, s0_2_1, 0xF2F8FDF5, 0x0B04E803, 0x35E113EF, 0x1B160807);
	r6 = D(r6, s0_2_1, 0x05FF03E3, 0x24051627, 0xF9EF102F, 0x090518FA);
	r7 = D(r7, s0_2_1, 0xABFE0603, 0xF221DA12, 0xF203090B, 0xFB160DF6);
	r0 = D(r0, s0_2_2, 0x14FA13E0, 0x0D08F0F6, 0xFDFCFC01, 0xABEFE1CD);
	r1 = D(r1, s0_2_2, 0x1702FC08, 0xF5E9EFF7, 0xF410E2FC, 0x09FED32E);
	r2 = D(r2, s0_2_2, 0x2F19FB0E, 0x0102FCF9, 0xF71007FC, 0x2906DE23);
	r3 = D(r3, s0_2_2, 0xFEF90A1B, 0x050CE10D, 0xFF10E9F4, 0x27FED913);
	r4 = D(r4, s0_2_2, 0xE9041E0D, 0x1CE9E2FE, 0x02FF0229, 0xF406E0F6);
	r5 = D(r5, s0_2_2, 0xE2FF1215, 0xF1E5F00B, 0xF1E7F602, 0xD2FBEFFE);
	r6 = D(r6, s0_2_2, 0x0DDC0404, 0x270CEAFD, 0xE8C300CD, 0xE7F202FC);
	r7 = D(r7, s0_2_2, 0x0325FDFA, 0x08F635ED, 0x0B01F300, 0xF5FAFE21);
	r0 = D(r0, s1_0_0, 0x0500B903, 0x0CF5EA00, 0x16EDE109, 0x10031CF4);
	r1 = D(r1, s1_0_0, 0xF107FFFE, 0xFEF504E3, 0x0B02FAFE, 0xF01FF7FE);
	r2 = D(r2, s1_0_0, 0x26183FE5, 0xFE04FDFA, 0xEEFCF909, 0xFB05E804);
	r3 = D(r3, s1_0_0, 0xF70A0006, 0x0517EAF6, 0xD41B0216, 0x0302140C);
	r4 = D(r4, s1_0_0, 0xDC040301, 0xE3E827D0, 0xE0EAFA14, 0xF9F4E907);
	r5 = D(r5, s1_0_0, 0xEFFC0810, 0xFBFC1305, 0xF30B34F1, 0xF80AC902);
	r6 = D(r6, s1_0_0, 0x0B070BF7, 0xEE0AB7F3, 0x18EFE5FF, 0xF5FCEC00);
	r7 = D(r7, s1_0_0, 0x0402FBFC, 0xF0EF0615, 0xF409FCFF, 0xF412FFFA);
	r0 = D(r0, s1_0_1, 0x0011231B, 0x3CFC03F2, 0x28E63AEA, 0x1A0603FA);
	r1 = D(r1, s1_0_1, 0xF0021007, 0x08EFFA12, 0x160100F5, 0x08FBFBFD);
	r2 = D(r2, s1_0_1, 0xE6F0EFFB, 0xEA00ECEC, 0x18F2F0F8, 0xD805E20C);
	r3 = D(r3, s1_0_1, 0xD412FBF1, 0xE41D0EFB, 0xFAF40614, 0xE9FCE7FD);
	r4 = D(r4, s1_0_1, 0x0D26F7E9, 0x01C11518, 0xE9EF22FD, 0x14F41311);
	r5 = D(r5, s1_0_1, 0xFBF809E8, 0xE4F1D60E, 0x092408E4, 0xFDF8ED15);
	r6 = D(r6, s1_0_1, 0x06DB0411, 0x1E00E524, 0xF2EB0018, 0xFF0712FF);
	r7 = D(r7, s1_0_1, 0xEF0BF805, 0x0BF409F6, 0xFB1001F7, 0xF6180F07);
	r0 = D(r0, s1_0_2, 0xE7ECC6FC, 0xE91C04F9, 0x1AF9FEEF, 0xFD12F5F5);
	r1 = D(r1, s1_0_2, 0xFE02F20A, 0x1EE70717, 0xF80E00FD, 0xE318F9E9);
	r2 = D(r2, s1_0_2, 0x0009E2D9, 0x060614FF, 0xF7FB0C02, 0x062CFFE4);
	r3 = D(r3, s1_0_2, 0xFF15F5EE, 0x091DF4E3, 0xE84004E3, 0x1704FA09);
	r4 = D(r4, s1_0_2, 0xF10614FA, 0xF6A5F518, 0x00F51C22, 0x0C0CF6F7);
	r5 = D(r5, s1_0_2, 0xF4032B0C, 0x21F4EC0C, 0x001924FF, 0x020AFAFB);
	r6 = D(r6, s1_0_2, 0x180CFAFD, 0x01FD08FD, 0x08FA150B, 0xF3F50C19);
	r7 = D(r7, s1_0_2, 0x16E90813, 0x000514FA, 0xEB0BF301, 0x0423EFDC);
	r0 = D(r0, s1_1_0, 0x01F85EED, 0x2CF901E5, 0x05E01547, 0xFBF7E20F);
	r1 = D(r1, s1_1_0, 0x0AFBEDFF, 0xF0F114DB, 0xE10818F4, 0xE01DFCEA);
	r2 = D(r2, s1_1_0, 0x2FF9F031, 0x07FAF9FF, 0xD41EF0EA, 0x16DEFF0C);
	r3 = D(r3, s1_1_0, 0xF7100400, 0xFB00141F, 0x0DEC020C, 0xFAF902F4);
	r4 = D(r4, s1_1_0, 0xF9111CF7, 0x10FEFCE6, 0xECF3CDFD, 0xE7FB20ED);
	r5 = D(r5, s1_1_0, 0x1216AC1F, 0x031930FB, 0x1307B7EE, 0x28F736F1);
	r6 = D(r6, s1_1_0, 0x170F3309, 0x100F7FEA, 0xF7044DF7, 0x01EF3C1D);
	r7 = D(r7, s1_1_0, 0x150500FF, 0x0B00DA12, 0x091518FF, 0x0C0415FA);
	r0 = D(r0, s1_1_1, 0x060773C2, 0x30BDC7E8, 0xE0B707D3, 0x350003F3);
	r1 = D(r1, s1_1_1, 0x2AFA0CE4, 0xF90100EC, 0x1319F204, 0x391B1328);
	r2 = D(r2, s1_1_1, 0xE304F022, 0x152A0F67, 0x3D271B22, 0x0E170047);
	r3 = D(r3, s1_1_1, 0x11F3DFF1, 0xFC0DEAEF, 0xD9F2F1DC, 0xF7020FFF);
	r4 = D(r4, s1_1_1, 0x0619E711, 0x0AF1F20D, 0x01D506A9, 0x040BC111);
	r5 = D(r5, s1_1_1, 0xB50301C1, 0xFB181134, 0x49F30C03, 0xADDBFBF2);
	r6 = D(r6, s1_1_1, 0xD50FE729, 0xCB06D302, 0x0E0AE9FE, 0x079EE6FD);
	r7 = D(r7, s1_1_1, 0x0403010D, 0x00E0F8DC, 0x101DFED6, 0xF2FA1522);
	r0 = D(r0, s1_1_2, 0x03FAC9E4, 0xCC04121F, 0xF8B9E7FB, 0xE7EE21F3);
	r1 = D(r1, s1_1_2, 0x0402F4FF, 0x0F06F809, 0xE7060CFA, 0xE732FBE5);
	r2 = D(r2, s1_1_2, 0xFB20140F, 0xF00BF726, 0xF022F8FE, 0x110A10FB);
	r3 = D(r3, s1_1_2, 0x2C181BD6, 0x1F15FFFE, 0x76B8F5F8, 0x06F9FBF1);
	r4 = D(r4, s1_1_2, 0x1BF60712, 0x13E006F6, 0x2EE801FE, 0xFAE7EE04);
	r5 = D(r5, s1_1_2, 0x1D331410, 0x120BF807, 0xEC142508, 0x16E4FE0A);
	r6 = D(r6, s1_1_2, 0xF323FDF1, 0xEDFF00F9, 0xE2FAFEF0, 0x02FBE8FE);
	r7 = D(r7, s1_1_2, 0xF5FF0B1A, 0x010E2AF9, 0x0118F9E8, 0xFA042AFA);
	r0 = D(r0, s1_2_0, 0x0BF40516, 0xFFFA27F7, 0xFB1024F8, 0xFBE4F20E);
	r1 = D(r1, s1_2_0, 0xFF050C09, 0xFC02E0F1, 0x0902F30F, 0x0908F0F1);
	r2 = D(r2, s1_2_0, 0xE7FAE91E, 0x040603FF, 0xF60EF2E9, 0x16E302FC);
	r3 = D(r3, s1_2_0, 0xE417FB00, 0x1908E3FD, 0xEE33081A, 0x0FFBF302);
	r4 = D(r4, s1_2_0, 0x240F092A, 0x253C071E, 0xFE09240E, 0xDE0227EE);
	r5 = D(r5, s1_2_0, 0xFA000CFE, 0xF6F7F5F2, 0xEC22E8D2, 0x1AF0210C);
	r6 = D(r6, s1_2_0, 0xF9E9E10B, 0x0B10D2D2, 0xFFF7E5FE, 0xFBD1EFFA);
	r7 = D(r7, s1_2_0, 0x0101F90C, 0x2706D5ED, 0xFC09F612, 0x21F8D812);
	r0 = D(r0, s1_2_1, 0x07F61302, 0xF2E8031A, 0xF309F8DA, 0xF3F3E21D);
	r1 = D(r1, s1_2_1, 0x020E12F2, 0xF0FA002A, 0x07E00CF2, 0x00EDFA13);
	r2 = D(r2, s1_2_1, 0xECFC09EC, 0xF9FA0209, 0xECF01103, 0xD2292005);
	r3 = D(r3, s1_2_1, 0x292DF1E9, 0xEB2923EF, 0xEE04F4E1, 0xFBEB1CFD);
	r4 = D(r4, s1_2_1, 0xF10FF2F4, 0xE7ECE1E7, 0x01120B07, 0x170E06E4);
	r5 = D(r5, s1_2_1, 0x0ED5F5CD, 0x130E0435, 0xF9E90628, 0xFBF21704);
	r6 = D(r6, s1_2_1, 0x0BF5FD19, 0x1F053951, 0x0906EA22, 0x17EA0723);
	r7 = D(r7, s1_2_1, 0xFBF316E6, 0xECF61700, 0x0707E8FE, 0x21B6E82B);
	r0 = D(r0, s1_2_2, 0x2B13DBFE, 0xFF1408FE, 0xE612E412, 0xD625FEFB);
	r1 = D(r1, s1_2_2, 0xF80CEEDE, 0xFD1D171D, 0x140BFD09, 0xDAF5081C);
	r2 = D(r2, s1_2_2, 0x242712E0, 0x09FCF804, 0x00050B0B, 0x1AEDF4CC);
	r3 = D(r3, s1_2_2, 0xE40115D4, 0xECE50505, 0x06F8F7CC, 0xF6FBF0F9);
	r4 = D(r4, s1_2_2, 0x0300F80B, 0xCE29F4D1, 0x1001E9F6, 0x0B02FEEF);
	r5 = D(r5, s1_2_2, 0x0CE0F63F, 0xF204FA02, 0xF7F4FC1B, 0x07E7F52F);
	r6 = D(r6, s1_2_2, 0xE6260810, 0xE20F09D8, 0x1621F8EA, 0xFC17FCFF);
	r7 = D(r7, s1_2_2, 0x1138FEFC, 0xF4380915, 0xE8FB0CE5, 0xF9FE0DF4);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x25FA030D, 0x10110BFE, 0x1B15CB07, 0xECED21F0);
	r1 = D(r1, s0_0_0, 0x0A21F00C, 0xA9EFB936, 0x0407F8F2, 0x0CEEE6DA);
	r2 = D(r2, s0_0_0, 0x812CF87F, 0x81FBEF35, 0x00F9F3F7, 0x8107DEC7);
	r3 = D(r3, s0_0_0, 0x0C0FE903, 0x212CE4C7, 0xE62CEDEF, 0xF0F0FC03);
	r4 = D(r4, s0_0_0, 0xFA1CB6F7, 0xA2050C1D, 0x3A0CDC0B, 0x17FBF70B);
	r5 = D(r5, s0_0_0, 0x19F7E4CD, 0xDDF91421, 0xD5050CF4, 0x3CE005F7);
	r6 = D(r6, s0_0_0, 0xF0F3FD30, 0x1E012DF8, 0xFF17F5DE, 0xF9FAF92D);
	r7 = D(r7, s0_0_0, 0xF4FFF6FA, 0xFAF131DD, 0x3B08F712, 0x0C0120DE);
	r0 = D(r0, s0_0_1, 0xF4E9FA58, 0xEFF30D02, 0xFDEC2119, 0xEFF5FCED);
	r1 = D(r1, s0_0_1, 0x141114FC, 0xE1FC1AEF, 0x16FDFC01, 0xF531ACE6);
	r2 = D(r2, s0_0_1, 0x57041528, 0xDF201DFF, 0xEFFFE812, 0xDAEE3FB1);
	r3 = D(r3, s0_0_1, 0x17010AFA, 0x0E0911EC, 0xFF23EE09, 0xE4FE3A06);
	r4 = D(r4, s0_0_1, 0x12FBF213, 0x980F0FE4, 0x001409E5, 0x25ED0CEE);
	r5 = D(r5, s0_0_1, 0xF70DEEFC, 0x0A10E50D, 0xF0EA455F, 0xDE06F80A);
	r6 = D(r6, s0_0_1, 0xD7E608E0, 0xDA041204, 0xFA0EE816, 0x070DEC10);
	r7 = D(r7, s0_0_1, 0x0BFBE50F, 0xF3EE102C, 0x10E613FF, 0xF5082324);
	r0 = D(r0, s0_0_2, 0xEB06F92A, 0x0C0808FB, 0xD7FE0D12, 0x0D12D207);
	r1 = D(r1, s0_0_2, 0xF5FD0008, 0xFAEAFBF1, 0x06050B02, 0x080FE0FB);
	r2 = D(r2, s0_0_2, 0x0FFB0BFA, 0x04FC06FD, 0xF4F605FE, 0x190BCEE1);
	r3 = D(r3, s0_0_2, 0x01FA06F4, 0x250C04ED, 0x31ECF1FA, 0xDDFF0907);
	r4 = D(r4, s0_0_2, 0x08F7140A, 0xB5E50544, 0xEC090DF4, 0x05FB14FA);
	r5 = D(r5, s0_0_2, 0x0BE20E00, 0xF9FAFC0C, 0x3735F4D2, 0xF6FB1203);
	r6 = D(r6, s0_0_2, 0x0BEDEF07, 0x00F40E15, 0xF107E5F7, 0x130103F9);
	r7 = D(r7, s0_0_2, 0xFCE812FD, 0xF706FF12, 0x1AFFED0C, 0xD407071A);
	r0 = D(r0, s0_1_0, 0x1B0B43EF, 0xC9290327, 0x0F20FEFA, 0x1033374C);
	r1 = D(r1, s0_1_0, 0x3DF1DE10, 0xF721F710, 0x1FD8F806, 0x06F3DC02);
	r2 = D(r2, s0_1_0, 0x091030FA, 0xF1EE1D08, 0x1606F1EC, 0x010DFD11);
	r3 = D(r3, s0_1_0, 0x0343D8FD, 0xD3E1F05E, 0xCEDBEF2B, 0x15FD22FF);
	r4 = D(r4, s0_1_0, 0x81DE8143, 0x3AD8F0EB, 0xBDFA1026, 0x050D3601);
	r5 = D(r5, s0_1_0, 0xE414D5F3, 0xE1ECDB5C, 0xCCBEF4C2, 0x8404E7B9);
	r6 = D(r6, s0_1_0, 0xC321EB2F, 0xE70F17FF, 0xFBD926F3, 0xC6E9012A);
	r7 = D(r7, s0_1_0, 0x05FDCF09, 0xDA0E0CC3, 0x173FD7EB, 0xEE030E04);
	r0 = D(r0, s0_1_1, 0xF609FD06, 0xE61FF5DF, 0xC4043D29, 0xBCC5DAF0);
	r1 = D(r1, s0_1_1, 0x04EEF60E, 0x0EF4010E, 0x1116F717, 0x15CC11EB);
	r2 = D(r2, s0_1_1, 0xFA34FE0D, 0x00050210, 0xE4E2FBF8, 0xF915F707);
	r3 = D(r3, s0_1_1, 0x5002EDFE, 0x4401CE0C, 0xBB158A8A, 0x27EF1AEF);
	r4 = D(r4, s0_1_1, 0x36170CEC, 0x0BFC2F07, 0x00E0200D, 0x17180A1F);
	r5 = D(r5, s0_1_1, 0xC4010AFE, 0x07F905FB, 0x0000D004, 0x81190921);
	r6 = D(r6, s0_1_1, 0xB2300F06, 0x181015FB, 0xF1F72BEB, 0xD506FFFF);
	r7 = D(r7, s0_1_1, 0xBC202F06, 0x06ED0F16, 0x02250B02, 0xFA15E8E7);
	r0 = D(r0, s0_1_2, 0xDC31F22B, 0x1819E710, 0xF3391801, 0x0E040322);
	r1 = D(r1, s0_1_2, 0xF807EEF6, 0xFDFA10FB, 0xF7E91405, 0xFD0FF8F8);
	r2 = D(r2, s0_1_2, 0x03E5F6E8, 0x02060203, 0x09FF1E03, 0xF9EAB2F7);
	r3 = D(r3, s0_1_2, 0xFCB30605, 0x14F50CF9, 0x1A1A0F07, 0xE3FD0602);
	r4 = D(r4, s0_1_2, 0x0AEE0AF1, 0xFB1ED6F5, 0xF7F8EF04, 0x08EE0EFA);
	r5 = D(r5, s0_1_2, 0x18031E07, 0x11FA06F9, 0x3504DAE3, 0x01F6180E);
	r6 = D(r6, s0_1_2, 0x0926DC07, 0x1FEC18FC, 0x0CC906FB, 0x08EC0AF9);
	r7 = D(r7, s0_1_2, 0x1E0FD3F3, 0x07DF2703, 0xFE1EECFB, 0xEE06E113);
	r0 = D(r0, s0_2_0, 0xE3F3E628, 0x03D71CF7, 0x09070A0A, 0xEF0DEF1A);
	r1 = D(r1, s0_2_0, 0x0AE1FEE6, 0x081D14FE, 0xF7EE0514, 0xF4E5161A);
	r2 = D(r2, s0_2_0, 0x1EF00FF5, 0xFE0406FE, 0x0019E40E, 0x0305200B);
	r3 = D(r3, s0_2_0, 0x07FFFDDE, 0xF502EE04, 0xFFDA2EF8, 0x00091102);
	r4 = D(r4, s0_2_0, 0xDE0EFC18, 0x09F2FA19, 0x0329F50D, 0xF423E611);
	r5 = D(r5, s0_2_0, 0x0BF9EF01, 0x1C0F0AFF, 0x1013FDE2, 0xEE33E81C);
	r6 = D(r6, s0_2_0, 0x1401E902, 0x0D03F607, 0xCC32C608, 0xFCC911FF);
	r7 = D(r7, s0_2_0, 0xFDD807F7, 0x0A2AF6FD, 0x0BF6F6EF, 0xEC01FA09);
	r0 = D(r0, s0_2_1, 0xECD60DEA, 0x0F2D06E1, 0x0CF20E0C, 0x1FEED1C9);
	r1 = D(r1, s0_2_1, 0x04F00D01, 0x18F617F9, 0xFB2C0309, 0x261828EB);
	r2 = D(r2, s0_2_1, 0xF1D1020D, 0x06E102F9, 0xECEBFEF7, 0xD4C30005);
	r3 = D(r3, s0_2_1, 0x40AFEDEC, 0x01DBF913, 0x4BEBF6BC, 0x1204FFFF);
	r4 = D(r4, s0_2_1, 0x0710F2FE, 0x130108FD, 0xE6E7040A, 0xF606F807);
	r5 = D(r5, s0_2_1, 0xCEFE0E1F, 0xFA00FD06, 0x150FD9F5, 0xC80C0816);
	r6 = D(r6, s0_2_1, 0x20EE1F00, 0xC10AFD2F, 0x2EF806FE, 0x08060400);
	r7 = D(r7, s0_2_1, 0xD93E011B, 0x0C210F13, 0xFCE8EA0B, 0xEE0D1B2F);
	r0 = D(r0, s0_2_2, 0xF32B0108, 0xF3EA0D01, 0xFFF5FC06, 0x3307C2F7);
	r1 = D(r1, s0_2_2, 0xF9030004, 0xFFF70FF0, 0xF4F20604, 0x04F71BF7);
	r2 = D(r2, s0_2_2, 0x070BF3E9, 0x0406FBFF, 0x0011FE06, 0x05FBE5FA);
	r3 = D(r3, s0_2_2, 0xE6E1050C, 0x160311F1, 0x05071F05, 0xF9F30702);
	r4 = D(r4, s0_2_2, 0x0FEA1301, 0x0B03FCEB, 0xFC030007, 0x021AF4FF);
	r5 = D(r5, s0_2_2, 0x04E71106, 0x0903FD04, 0x120AF3F9, 0x00E90FFE);
	r6 = D(r6, s0_2_2, 0xFAF720F0, 0xF80EF816, 0x0C0AF0E1, 0x061700FB);
	r7 = D(r7, s0_2_2, 0x12F2DFFF, 0x0105FE03, 0x1C04ECF1, 0xFAD703F3);
	r0 = D(r0, s1_0_0, 0xFDEEE0E7, 0x07E90A03, 0x1601FD24, 0x0B100EEE);
	r1 = D(r1, s1_0_0, 0x02020BFD, 0xE6000CFE, 0xF30B040A, 0xEE090F03);
	r2 = D(r2, s1_0_0, 0x0117F806, 0xFE09F8FB, 0xFD04FFFD, 0x03FD1A06);
	r3 = D(r3, s1_0_0, 0xF8111012, 0x02FE0AED, 0x14EFFE02, 0xF2E5E602);
	r4 = D(r4, s1_0_0, 0x170BF512, 0xFC1C0AF0, 0x07FE0911, 0xFEF0F302);
	r5 = D(r5, s1_0_0, 0x0A1E20FA, 0xF7EF09F9, 0xF3D0FA14, 0x0BF7030F);
	r6 = D(r6, s1_0_0, 0x0A00DC06, 0x11FB1E02, 0x1808FB09, 0xF8F900F3);
	r7 = D(r7, s1_0_0, 0x0502F3FF, 0x01F9DE06, 0xFDEE1912, 0x0FE1E61C);
	r0 = D(r0, s1_0_1, 0xEE12EA1C, 0x02F4F609, 0xDEFC17E6, 0x0708FBF2);
	r1 = D(r1, s1_0_1, 0xD3F0FBF8, 0x26FFEDEC, 0xE5E90A04, 0xE007FC2F);
	r2 = D(r2, s1_0_1, 0x27047103, 0x2D090327, 0xF2FD0034, 0x08F4F128);
	r3 = D(r3, s1_0_1, 0x21E6FBFD, 0xE20D18F4, 0x02F100F0, 0xECEE0F0D);
	r4 = D(r4, s1_0_1, 0x092AFFEA, 0x100F03F2, 0xF01EF1E1, 0xF2FFC7FE);
	r5 = D(r5, s1_0_1, 0xE01FEBF7, 0x03F9DEF5, 0x2127EEF4, 0x0EFF1A1C);
	r6 = D(r6, s1_0_1, 0x1D0DF9F4, 0xF9F10202, 0xD908F7F8, 0x1A12FFED);
	r7 = D(r7, s1_0_1, 0x0AF9FB03, 0x0D0A05E7, 0x15FB00F0, 0x150207F6);
	r0 = D(r0, s1_0_2, 0x301ADA1D, 0x3015E924, 0x1811062C, 0x2406EC0C);
	r1 = D(r1, s1_0_2, 0x0BFF0E02, 0xF0F7FED3, 0x0E021EEB, 0xC50D1EE2);
	r2 = D(r2, s1_0_2, 0xDAFBEDFD, 0xF61311D8, 0x190DFEDD, 0xF3F782F2);
	r3 = D(r3, s1_0_2, 0xDC0AEBCB, 0x02EE07ED, 0xF411F517, 0xE2DFF8F4);
	r4 = D(r4, s1_0_2, 0xF5040700, 0xEB17F6FB, 0xEEFBDBF3, 0x290816F1);
	r5 = D(r5, s1_0_2, 0xECF91AFF, 0x05FD160A, 0x19DA321A, 0xE5F3E0F3);
	r6 = D(r6, s1_0_2, 0xFEFBF5FB, 0xEA0925FA, 0xFDE6ED0E, 0x0A16EDFB);
	r7 = D(r7, s1_0_2, 0x06061100, 0x23F7F4FA, 0x0DF31EFC, 0x0308E80D);
	r0 = D(r0, s1_1_0, 0xFE1DF4F3, 0x1B1300F9, 0x00E1FB04, 0xF8EFE5F5);
	r1 = D(r1, s1_1_0, 0xFBF6F5F5, 0xFCEA091C, 0xEE05FCFD, 0x1E0AF82A);
	r2 = D(r2, s1_1_0, 0x1FFAF70C, 0xF5F50D0C, 0xF90FF7FE, 0x44041105);
	r3 = D(r3, s1_1_0, 0xFFEA1D02, 0xE7FE0CFB, 0xDA082906, 0x030AFE01);
	r4 = D(r4, s1_1_0, 0xF9EDF3FA, 0x0D00EBF8, 0xEEF607FA, 0xDFFAE90C);
	r5 = D(r5, s1_1_0, 0xF7E7FC12, 0xFAFCFCE0, 0x2E04BCF9, 0x01FCF014);
	r6 = D(r6, s1_1_0, 0xE60B0106, 0xFCF60307, 0x2AFDEFFB, 0xE30CFEED);
	r7 = D(r7, s1_1_0, 0x071304FF, 0xFB151610, 0x00FD0D11, 0xC012E31C);
	r0 = D(r0, s1_1_1, 0x0FDBDEFC, 0xC3F31F10, 0x020700EB, 0x2B16E336);
	r1 = D(r1, s1_1_1, 0xFF05F900, 0xF5F6F7EB, 0x2F022019, 0x1AECF416);
	r2 = D(r2, s1_1_1, 0x9E0FA7FE, 0xECF0ECF4, 0xF9FA16FD, 0x03E6BDE1);
	r3 = D(r3, s1_1_1, 0x2AF5FE08, 0x3AF41212, 0x05EA04E1, 0x1F0E1423);
	r4 = D(r4, s1_1_1, 0x38F71415, 0x15CC2BCB, 0x2DDA1AF8, 0x1600EF00);
	r5 = D(r5, s1_1_1, 0xFCEDE7C8, 0x180C0B13, 0x0E56F0F1, 0xFB140A15);
	r6 = D(r6, s1_1_1, 0xF4FE27FE, 0x15E9D90A, 0x2B0F23EF, 0x01EDF906);
	r7 = D(r7, s1_1_1, 0xFDE1EDFC, 0xE0140DFE, 0xDC0B03EB, 0x0CF81EC1);
	r0 = D(r0, s1_1_2, 0x02131EF8, 0xCCED0DDF, 0x18F4E7F1, 0x07F01405);
	r1 = D(r1, s1_1_2, 0x0006F30E, 0x1A021912, 0x0913FCF1, 0x4208FAE2);
	r2 = D(r2, s1_1_2, 0xEB1602CA, 0x07F0FFFD, 0x240D10F3, 0xE2FE3418);
	r3 = D(r3, s1_1_2, 0x03FCF8F8, 0xEA09FBE8, 0xF8F2E9FD, 0x1E1BEFFD);
	r4 = D(r4, s1_1_2, 0xE7FA07F4, 0x130FDBFF, 0x240A0DEE, 0xF50F01FC);
	r5 = D(r5, s1_1_2, 0x01132BFE, 0x1DE60A24, 0xEB1154F9, 0xF119E204);
	r6 = D(r6, s1_1_2, 0xACE927CE, 0xFA04280D, 0x1EEE1300, 0x05F3F7EF);
	r7 = D(r7, s1_1_2, 0xF91C1127, 0x0FFFC9F7, 0x9BF60E1C, 0x2B0822C5);
	r0 = D(r0, s1_2_0, 0xE013040E, 0xFF070100, 0x03F0F304, 0xFC0113F8);
	r1 = D(r1, s1_2_0, 0xEE16FAF8, 0x1A080C06, 0xEC08FD09, 0x00F3F315);
	r2 = D(r2, s1_2_0, 0x09F80209, 0x0C0A00FA, 0xF6F40203, 0xF01300F4);
	r3 = D(r3, s1_2_0, 0xE9F9E912, 0xEEFEF32D, 0x0C171823, 0xF80BEB0A);
	r4 = D(r4, s1_2_0, 0xE7180D02, 0x160CF70D, 0x08130806, 0xDDEC0EF1);
	r5 = D(r5, s1_2_0, 0xFFE5F716, 0x120D0600, 0xC50ED2F0, 0x0DEEFB12);
	r6 = D(r6, s1_2_0, 0xFFFCF70F, 0xF9EA0B03, 0x0CFA0A15, 0xEDFB1511);
	r7 = D(r7, s1_2_0, 0x1A01EFFA, 0x060E09F7, 0x2301F8FF, 0xD9E41B33);
	r0 = D(r0, s1_2_1, 0xF206F60E, 0xF501FDEE, 0x073127EC, 0xB7F10C09);
	r1 = D(r1, s1_2_1, 0x34F80007, 0xCE2106FF, 0x0DF1FDF7, 0x06FC06F5);
	r2 = D(r2, s1_2_1, 0x04F2EB17, 0xEAFE0207, 0xFDFF0510, 0xFCFAEBF6);
	r3 = D(r3, s1_2_1, 0x2107F5FF, 0xEBF8E41D, 0x1D0B1519, 0x0DF0FBF6);
	r4 = D(r4, s1_2_1, 0x00FCFCF9, 0xDAEE0E1C, 0xE9E8FA14, 0xF504F60C);
	r5 = D(r5, s1_2_1, 0x05F3FEFF, 0xFD0CD509, 0xF5D708E5, 0xF9171112);
	r6 = D(r6, s1_2_1, 0x040F200C, 0xF922ED15, 0xC11535FA, 0xDF1B0EE9);
	r7 = D(r7, s1_2_1, 0x3FFC05F7, 0xDAF5EFFB, 0x3B16000B, 0xF31A0E00);
	r0 = D(r0, s1_2_2, 0x25EC0106, 0xF4192BDD, 0xEEFA1008, 0xDA0817CF);
	r1 = D(r1, s1_2_2, 0x1BF10616, 0xF3FCFEFE, 0xECFD19F6, 0x010B20FD);
	r2 = D(r2, s1_2_2, 0x0DF3FEEB, 0x11050301, 0xF9E31BE7, 0x171602ED);
	r3 = D(r3, s1_2_2, 0x2122FB33, 0x2B07E224, 0x010305FD, 0x130C0618);
	r4 = D(r4, s1_2_2, 0xE4DDDD25, 0xECF6DA09, 0xF01A1E02, 0xF9010EED);
	r5 = D(r5, s1_2_2, 0xEAF1F414, 0xFB040AFE, 0x14F3F91F, 0x1AF10DDA);
	r6 = D(r6, s1_2_2, 0x01F3DD02, 0x0400FF06, 0xD00110FF, 0xFDF9EDFA);
	r7 = D(r7, s1_2_2, 0x81FB1DF8, 0x02EC1B0A, 0xED04F612, 0x19F5E50E);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.176e-01, -1.179e-02, -4.650e-03, 2.348e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.641e-02, 2.616e-02, 1.326e-02, 3.744e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.412e-02, 4.104e-03, 3.971e-05, 9.596e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.264e-02, 3.086e-02, 3.632e-02, -9.805e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(2.163e-02, -9.652e-04, 2.421e-02, -3.650e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(4.508e-02, -2.037e-02, -3.226e-02, -1.082e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.544e-02, -6.299e-04, -9.140e-03, 3.351e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-5.588e-04, 9.051e-03, 2.077e-02, -2.967e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_vk] -conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xD909E1FC, 0x03010306, 0x01F11C07, 0xF1FAEDF9);
	r1 = D(r1, s0_0_0, 0xEFF9010D, 0xE7F8001B, 0xF313031D, 0xE4E70000);
	r2 = D(r2, s0_0_0, 0xFCF4FBFF, 0x05FAFFFC, 0x17E100F4, 0xF3021104);
	r3 = D(r3, s0_0_0, 0xFF081E02, 0x05051AF9, 0xFE04FAFE, 0x10F913F5);
	r4 = D(r4, s0_0_0, 0x05F1F90D, 0x04031010, 0xEDFA0604, 0xFDF3FBFA);
	r5 = D(r5, s0_0_0, 0xFBFCFE0B, 0x03010002, 0xF2F4083B, 0xF0FDFD11);
	r6 = D(r6, s0_0_0, 0x1626FC08, 0x07FBFD00, 0x00F907FE, 0xF9FF100B);
	r7 = D(r7, s0_0_0, 0x2D0EFA06, 0x07FD061A, 0x0900FCF1, 0x01FC080E);
	r0 = D(r0, s0_0_1, 0x03DAE1F9, 0x04FCE714, 0xF6E3D413, 0xF9E9F9FD);
	r1 = D(r1, s0_0_1, 0xF708F602, 0xFE01FCFF, 0xEC1B24F9, 0x2C110723);
	r2 = D(r2, s0_0_1, 0x1014170D, 0x0A08F903, 0x1FF5F0E9, 0xFDF5140A);
	r3 = D(r3, s0_0_1, 0x2915EDFD, 0x0B0DFC00, 0xF60610FE, 0xFE07EDFC);
	r4 = D(r4, s0_0_1, 0xEEFA0108, 0x2703070F, 0x0217F713, 0xF5040AEF);
	r5 = D(r5, s0_0_1, 0x160E1501, 0xFFFFFCFF, 0x3B0F00F9, 0x0607F5FF);
	r6 = D(r6, s0_0_1, 0x15F9FB1D, 0x0402F4FF, 0x0B06F701, 0x02100015);
	r7 = D(r7, s0_0_1, 0xDAF0FCF5, 0x31BCDA3E, 0x030024E6, 0xFDF10A0E);
	r0 = D(r0, s0_0_2, 0x09F80EF5, 0xECF1F10A, 0xEB150A0C, 0xF1FE0E0B);
	r1 = D(r1, s0_0_2, 0xFDF7F601, 0xF7FB0002, 0x19070101, 0x0DFDED1C);
	r2 = D(r2, s0_0_2, 0x1EF3E304, 0x0003FBFE, 0xFF0AF405, 0xFEFCF803);
	r3 = D(r3, s0_0_2, 0x0AEAF3F7, 0xF1F608F8, 0x09FE03FB, 0xF902EA0D);
	r4 = D(r4, s0_0_2, 0x09011104, 0x12021000, 0x03FE04FB, 0xDC041DF9);
	r5 = D(r5, s0_0_2, 0x0F15F8FD, 0xFBFD0DF8, 0x13FDEE04, 0x06FFFD01);
	r6 = D(r6, s0_0_2, 0xECFFF8FD, 0xFB0000FC, 0xFDFF0B01, 0xFBFAE70E);
	r7 = D(r7, s0_0_2, 0xEBF336EC, 0xC3FFD321, 0xFA0D10F9, 0xDFC8F807);
	r0 = D(r0, s0_1_0, 0x191029D9, 0x0001EBF9, 0x0F003BD7, 0x1FE3FBFB);
	r1 = D(r1, s0_1_0, 0x1B0AFCFA, 0xDD22FC69, 0x0E06F2F4, 0x11EA05D4);
	r2 = D(r2, s0_1_0, 0xDAFAE20C, 0x0FFEFF04, 0x15F927C4, 0xF9D913F9);
	r3 = D(r3, s0_1_0, 0xFABB04BD, 0x0208F629, 0x08F8FBF5, 0xF7F411F2);
	r4 = D(r4, s0_1_0, 0x0720FE12, 0x0FFDEE29, 0xE4F408EB, 0xFEF2052B);
	r5 = D(r5, s0_1_0, 0xF2DAEA01, 0xF1F50702, 0xE7F7EAF5, 0xEDEF00FD);
	r6 = D(r6, s0_1_0, 0xFE06F00B, 0x1103F8F4, 0xFA0207FE, 0x0AF8F00F);
	r7 = D(r7, s0_1_0, 0xFEE20B07, 0xF6E0F4E0, 0xF6FE08FD, 0xEBDFE710);
	r0 = D(r0, s0_1_1, 0xFC1CEACC, 0xF71DF301, 0x15F708F4, 0xF81FD1FD);
	r1 = D(r1, s0_1_1, 0x09020CF4, 0x0DFFF41C, 0x1EE906BA, 0xE812E2EF);
	r2 = D(r2, s0_1_1, 0x0008FAD9, 0x0C03FB01, 0x1704C5FA, 0x14F3F5EC);
	r3 = D(r3, s0_1_1, 0x0B3806DE, 0xF9E30BF6, 0xFDFA0200, 0xE5031F12);
	r4 = D(r4, s0_1_1, 0xF803F212, 0x0F0BFA0E, 0xFAE5000C, 0x1B23E8FC);
	r5 = D(r5, s0_1_1, 0xF6B1FD03, 0xF318F4FD, 0x0E2D12D7, 0xFE1DF5E0);
	r6 = D(r6, s0_1_1, 0xF4F817D1, 0x0A08F8F8, 0xFF000812, 0xEF0BF2FB);
	r7 = D(r7, s0_1_1, 0x0702DD1B, 0x2A2D0913, 0xF6092D24, 0x01FE150E);
	r0 = D(r0, s0_1_2, 0x0F0CE607, 0xF5EFF50C, 0x2401EB15, 0xDF121EF8);
	r1 = D(r1, s0_1_2, 0x19FEFEFD, 0x07020101, 0xECCCFB0A, 0x23FCE0EE);
	r2 = D(r2, s0_1_2, 0x0DF50A07, 0x00F80500, 0x29FF060F, 0x13F80217);
	r3 = D(r3, s0_1_2, 0x09E80315, 0xFEFE170E, 0xFA030A08, 0x10020E03);
	r4 = D(r4, s0_1_2, 0x010BFFF9, 0x0F01F114, 0x0E0D03FB, 0xFF0901FC);
	r5 = D(r5, s0_1_2, 0x0DF6F900, 0x090CE8F6, 0x15E4E7F1, 0x0503EDF9);
	r6 = D(r6, s0_1_2, 0x020DFEEE, 0xF6FB0E03, 0x0202F402, 0xF0ECF6F3);
	r7 = D(r7, s0_1_2, 0xEB21013B, 0x1C0F0301, 0xED1525EA, 0xFF13C806);
	r0 = D(r0, s0_2_0, 0x00EC1EE4, 0x05040522, 0x180713E8, 0xF5110E17);
	r1 = D(r1, s0_2_0, 0xF8E4FADB, 0xF8E5E40E, 0x04ED06FE, 0x0BFA05EF);
	r2 = D(r2, s0_2_0, 0x030BFB05, 0x0208F8F2, 0x1319FFFF, 0x0009EF18);
	r3 = D(r3, s0_2_0, 0xE200D8F9, 0xEC04FE18, 0x0A06FF00, 0x2D1718FF);
	r4 = D(r4, s0_2_0, 0x05030601, 0x06FE0A05, 0x0D02FB1D, 0x09EEFDFB);
	r5 = D(r5, s0_2_0, 0xFB0F0218, 0x08F80107, 0xDE051C00, 0xFE031108);
	r6 = D(r6, s0_2_0, 0xF9F006FD, 0x080600EA, 0xF5EDF7F9, 0x04FFFD22);
	r7 = D(r7, s0_2_0, 0xFD0907D3, 0xFE14E40B, 0xF9020CF7, 0xFF0F0138);
	r0 = D(r0, s0_2_1, 0xFB11F7C6, 0x041B1502, 0xFEF0D8C5, 0x02DEC5DC);
	r1 = D(r1, s0_2_1, 0xF6C904EE, 0xF7FEFD0B, 0x12E2121A, 0x0124FCFD);
	r2 = D(r2, s0_2_1, 0xF7150D02, 0x000FFE0F, 0xE70F26F5, 0xF6130A1B);
	r3 = D(r3, s0_2_1, 0xE836230E, 0xF6F7FAFD, 0xFE10080E, 0xFBF1F9ED);
	r4 = D(r4, s0_2_1, 0x02EBF809, 0x1114F701, 0x0C0FF9E9, 0x0408F607);
	r5 = D(r5, s0_2_1, 0xF8050F06, 0x020BFB0F, 0xD8FA06F2, 0xFF08F018);
	r6 = D(r6, s0_2_1, 0xFEE0F2F5, 0xFA0AF305, 0x01FC0A14, 0xFB041DFE);
	r7 = D(r7, s0_2_1, 0xF30CF609, 0x0303E800, 0x04F80F08, 0x06F81A17);
	r0 = D(r0, s0_2_2, 0xF704F70F, 0xFF0CFEF8, 0x0206EB17, 0x07F5F506);
	r1 = D(r1, s0_2_2, 0x05FEF0F4, 0x08F6EA0B, 0x1212DEE9, 0xF0F6FAF5);
	r2 = D(r2, s0_2_2, 0xEA1717FF, 0xFE000302, 0x01FEF1F9, 0x0708FEE6);
	r3 = D(r3, s0_2_2, 0x18F8DF13, 0x01FC1AFC, 0xF9FDF709, 0x280902D9);
	r4 = D(r4, s0_2_2, 0x0CF8FB0B, 0x00FEF623, 0xF9F304F5, 0xF30CEEF0);
	r5 = D(r5, s0_2_2, 0xF9071205, 0xFC0BFFF5, 0xEE05190B, 0x04FB1403);
	r6 = D(r6, s0_2_2, 0x0105FD0A, 0xFDFDFD09, 0xFF010BF4, 0xF5F7FDF4);
	r7 = D(r7, s0_2_2, 0xFA1B14FA, 0xEE02F5FE, 0x041712FA, 0xF214DFD5);
	r0 = D(r0, s1_0_0, 0xF6F911FF, 0x04FDFD0B, 0x20FC2ADA, 0xF7060F1A);
	r1 = D(r1, s1_0_0, 0xFBFCF3F3, 0x17F70B05, 0x23F8FBE4, 0x021BF70A);
	r2 = D(r2, s1_0_0, 0xFF12F4EB, 0x0304FC01, 0x03F407D9, 0x06F7FBFE);
	r3 = D(r3, s1_0_0, 0xF6F0ED05, 0x0CF8FCF2, 0xFAFB0209, 0xF60C0D12);
	r4 = D(r4, s1_0_0, 0xFAF11C1A, 0x02FA14F8, 0x2AE90108, 0x07060707);
	r5 = D(r5, s1_0_0, 0x12F5F902, 0xFB060006, 0xD325DDD4, 0xFAFD02FA);
	r6 = D(r6, s1_0_0, 0x07E7F7EA, 0xFA0B000D, 0xFE05FEFB, 0xFBFCFE0C);
	r7 = D(r7, s1_0_0, 0x19FCE819, 0xFF090DFD, 0xF9F90503, 0xFAFE1C13);
	r0 = D(r0, s1_0_1, 0xE7F4FDF1, 0x0406060B, 0x3DEB1CE4, 0x06052CEA);
	r1 = D(r1, s1_0_1, 0x0A0901EC, 0x07E9FCEC, 0x1310EEF0, 0xF1F0E016);
	r2 = D(r2, s1_0_1, 0xFD00E519, 0xFEFFFBFE, 0x1DEACDDC, 0x000F0608);
	r3 = D(r3, s1_0_1, 0x0A0DFCE4, 0x010AF610, 0xFAF411FE, 0xFFF5060B);
	r4 = D(r4, s1_0_1, 0x0904EFEF, 0xF801070C, 0x081A11E8, 0xF90A21D9);
	r5 = D(r5, s1_0_1, 0x0514F2E3, 0x08070305, 0x0FCC01E4, 0x0D1308F6);
	r6 = D(r6, s1_0_1, 0x0417E2FF, 0x02F3F729, 0x05FA000C, 0x001501EF);
	r7 = D(r7, s1_0_1, 0xF90F22BD, 0xDBEB0418, 0xF5F2FBB1, 0x9E03110A);
	r0 = D(r0, s1_0_2, 0xDEF2E516, 0xFBF6F401, 0x1403FDEB, 0xF51203F5);
	r1 = D(r1, s1_0_2, 0xFF05ED03, 0xFFFAFF00, 0x0FFD0426, 0xF006FC01);
	r2 = D(r2, s1_0_2, 0xF601F0FE, 0x09FA0705, 0xE8FDFAE0, 0xF9FC0CFB);
	r3 = D(r3, s1_0_2, 0xF7F6F8F8, 0x00F7FCFB, 0x0A02F8F5, 0xF9F4E80A);
	r4 = D(r4, s1_0_2, 0x0001FB15, 0x0800FAFD, 0xE5031FEB, 0x10E902FB);
	r5 = D(r5, s1_0_2, 0xF9F50FEF, 0x07FE0712, 0x270CD026, 0xF9FDF6F5);
	r6 = D(r6, s1_0_2, 0xF50B16DE, 0x08F004FF, 0xFCFB00FA, 0x0400131B);
	r7 = D(r7, s1_0_2, 0x03DA109D, 0x8181CE81, 0x0B06E8E7, 0xEB08EF08);
	r0 = D(r0, s1_1_0, 0x13D70EF1, 0x08130101, 0x21C9F408, 0x16080B06);
	r1 = D(r1, s1_1_0, 0xE624F40D, 0x111A13D7, 0xF138EDF8, 0xEC3413EB);
	r2 = D(r2, s1_1_0, 0xF21F1DF0, 0x010BFA08, 0xEA42E6F9, 0x021A08FA);
	r3 = D(r3, s1_1_0, 0x0B220819, 0xEC07FD08, 0x0803FE09, 0x07E819F3);
	r4 = D(r4, s1_1_0, 0x3FCB2F0A, 0x0EE1FB1C, 0xDB1EF8EE, 0x37FA1405);
	r5 = D(r5, s1_1_0, 0xEA09FBFF, 0x06F30B0C, 0xE713FA0D, 0x0CF905FC);
	r6 = D(r6, s1_1_0, 0xF116DF04, 0x06F90113, 0xF9F90506, 0x0A0DF50A);
	r7 = D(r7, s1_1_0, 0x152207E9, 0xEE10F004, 0x06FE0210, 0x0507FB0B);
	r0 = D(r0, s1_1_1, 0xE939C6DD, 0x2D101CF6, 0xE338D81C, 0x0B0FD3EF);
	r1 = D(r1, s1_1_1, 0x02E8F203, 0xFDF4FC11, 0xDFEFD1F5, 0xC701FD22);
	r2 = D(r2, s1_1_1, 0xF5010C0D, 0xFFDD011A, 0xD8F7DCEC, 0xFDD5DC1B);
	r3 = D(r3, s1_1_1, 0xCA18DBC4, 0xF60100F2, 0xF61A09FA, 0x1E01D50C);
	r4 = D(r4, s1_1_1, 0x05140200, 0xFC190DF4, 0x23E0200A, 0x151FE40E);
	r5 = D(r5, s1_1_1, 0xF2D510F5, 0x12F7EF0F, 0xCB12EFE2, 0xFCE311D8);
	r6 = D(r6, s1_1_1, 0x07CA18F4, 0x0C2C0003, 0x0C0E0D01, 0x21EE2804);
	r7 = D(r7, s1_1_1, 0x4CEFEF11, 0x1003D00E, 0x04C7290B, 0x33D81DF1);
	r0 = D(r0, s1_1_2, 0xF1F8FC16, 0xF20406EF, 0xCEDDF925, 0xFCEF15DD);
	r1 = D(r1, s1_1_2, 0xEDF9F111, 0xF7F90EF1, 0x11FBF401, 0x20F7F1DB);
	r2 = D(r2, s1_1_2, 0x08F90202, 0x04070B18, 0xFEBD38F9, 0x080FF222);
	r3 = D(r3, s1_1_2, 0x0BE8052C, 0x06EE06EF, 0xF0EF201E, 0xBEE4F1DB);
	r4 = D(r4, s1_1_2, 0x140A00FA, 0xF9E118F7, 0x0A11F00E, 0xFFF9F013);
	r5 = D(r5, s1_1_2, 0x0D0B06E9, 0x0332EB13, 0xDFE21817, 0xFD24D70C);
	r6 = D(r6, s1_1_2, 0xFF07FBF1, 0xFFEA13FF, 0x0209E811, 0x0715F1DC);
	r7 = D(r7, s1_1_2, 0xE706FDD5, 0xF63B170D, 0xED1BF20A, 0xF811C6EB);
	r0 = D(r0, s1_2_0, 0xFD01EFFA, 0x1100FD09, 0xE1150907, 0xEE0C0104);
	r1 = D(r1, s1_2_0, 0xF80CF9F6, 0xF4F70CFE, 0xE8F6FE13, 0xDAF90D00);
	r2 = D(r2, s1_2_0, 0xFAE512FF, 0xFDFCFD02, 0x0FDD1DE7, 0xF7F003FF);
	r3 = D(r3, s1_2_0, 0xE3F429CB, 0xF802FCFB, 0x00F3FB02, 0xF5D50C14);
	r4 = D(r4, s1_2_0, 0x1FE0FD02, 0xF6FDFB0B, 0x14F10F04, 0xEF120E0F);
	r5 = D(r5, s1_2_0, 0x040C02ED, 0xFDFD0C04, 0xF00E08DB, 0xF901F503);
	r6 = D(r6, s1_2_0, 0xEE0AFE00, 0x04F40302, 0xFDF401F9, 0x17100800);
	r7 = D(r7, s1_2_0, 0xE1090AF9, 0xE50A11EF, 0x07FBEA00, 0x0903F2FF);
	r0 = D(r0, s1_2_1, 0xFB0CFD01, 0xFF10F0F4, 0xED1EFB17, 0xF3FD0801);
	r1 = D(r1, s1_2_1, 0x03FC0717, 0x09F10A18, 0x44EEFE14, 0xFF051E10);
	r2 = D(r2, s1_2_1, 0x1CFFEDF8, 0xFC04FD08, 0x020BDB04, 0x0B1700F1);
	r3 = D(r3, s1_2_1, 0xF114C9D8, 0x19F704F7, 0xFF0B08F3, 0xF833E107);
	r4 = D(r4, s1_2_1, 0x0BF70D17, 0x18E4ED0D, 0xED04F7FF, 0x060CFDEE);
	r5 = D(r5, s1_2_1, 0xFF03F908, 0xF50E04F9, 0x070EE7DF, 0xED120DFF);
	r6 = D(r6, s1_2_1, 0x0F070E0F, 0xFDFEFEFE, 0x01081603, 0xFBF61D03);
	r7 = D(r7, s1_2_1, 0xF00FD709, 0xF917FC0C, 0xC509E804, 0xF7EF2E15);
	r0 = D(r0, s1_2_2, 0xEA0206F8, 0xF600FF02, 0x0306FB02, 0xFDFAE1DA);
	r1 = D(r1, s1_2_2, 0xE60E0E03, 0xF20B0303, 0x0929FF04, 0x04FFF4E7);
	r2 = D(r2, s1_2_2, 0xF809F5F9, 0x04FBFE01, 0xF4EECEE8, 0xF5F7ECFF);
	r3 = D(r3, s1_2_2, 0xE8F03F07, 0xE8F502FB, 0xFEFCFCFA, 0xE0E523FF);
	r4 = D(r4, s1_2_2, 0x0903080B, 0xFCEC2C08, 0xF6FFFCFE, 0xF705FF0F);
	r5 = D(r5, s1_2_2, 0x0208FBEB, 0x0AF9F2F9, 0xFA091210, 0x080DE8FA);
	r6 = D(r6, s1_2_2, 0x0104EE04, 0xFFF402FF, 0xFBF5FAFB, 0x02FBDDE8);
	r7 = D(r7, s1_2_2, 0xF5F500FB, 0x1312E5F4, 0x00F9F309, 0xE2F8FAF9);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEDA09B7, 0x03F40EFD, 0xE00CE722, 0xFFF504DB);
	r1 = D(r1, s0_0_0, 0xF913FA15, 0x05E9E413, 0x06FEE645, 0x09EDEFFB);
	r2 = D(r2, s0_0_0, 0x08FDF514, 0x000105F6, 0xE10121DC, 0x09FDFF10);
	r3 = D(r3, s0_0_0, 0x08D719F0, 0x02040706, 0xFB0204FA, 0x05FAFA03);
	r4 = D(r4, s0_0_0, 0x0511F105, 0x0F05F30E, 0x0602F829, 0x0CF4F1FF);
	r5 = D(r5, s0_0_0, 0xF60AFD15, 0x0804FF05, 0x16FF07EC, 0x03FD0009);
	r6 = D(r6, s0_0_0, 0x18F4FE0E, 0xF70507FA, 0xFBFE01FA, 0x05F602FE);
	r7 = D(r7, s0_0_0, 0xFEF1090B, 0xFAFDEE17, 0x0CF7FFF0, 0xE2E807ED);
	r0 = D(r0, s0_0_1, 0xF307209F, 0x03FE020E, 0xF23EE903, 0x000400CA);
	r1 = D(r1, s0_0_1, 0xF910F30B, 0x1B15F007, 0x0FF3F5FB, 0x0BEF1F1E);
	r2 = D(r2, s0_0_1, 0x19EE0A07, 0x02F707FD, 0xDC34F32D, 0x05F8F402);
	r3 = D(r3, s0_0_1, 0xEB0417EF, 0xFCFF07F8, 0xFC0AF600, 0x03EDFE0D);
	r4 = D(r4, s0_0_1, 0x0EF6FE22, 0x06FE0505, 0x1AFEDAF8, 0x1CFCF1F8);
	r5 = D(r5, s0_0_1, 0x0EFCFC01, 0xFCF50CF2, 0xD7FF170A, 0xFC0AF502);
	r6 = D(r6, s0_0_1, 0x1EFAF307, 0xF4060F04, 0x0BFE00FE, 0x1013F9F4);
	r7 = D(r7, s0_0_1, 0x01F8E206, 0x1B032AE4, 0xF9EF09FC, 0xF2111AFD);
	r0 = D(r0, s0_0_2, 0xFF09FCF9, 0x01FE0618, 0xF410D531, 0x1101FA0B);
	r1 = D(r1, s0_0_2, 0xFF0006FA, 0x02FF0306, 0x0F08FB06, 0x0502F8E0);
	r2 = D(r2, s0_0_2, 0x1701FD24, 0x03FD0007, 0xF11BEFD8, 0x0802F107);
	r3 = D(r3, s0_0_2, 0x0406EF14, 0x0900000A, 0x00FDFDF3, 0xF0F51401);
	r4 = D(r4, s0_0_2, 0x0AFF0C0E, 0x09F900F5, 0x00FFFED8, 0xEFF30FDE);
	r5 = D(r5, s0_0_2, 0x0E10FBD6, 0xEC030BEE, 0xEEFE0437, 0xFE0903EB);
	r6 = D(r6, s0_0_2, 0x0BEC0ED1, 0xF8060100, 0xFF030206, 0xFEF706E9);
	r7 = D(r7, s0_0_2, 0xE7EC109F, 0xEDF8F12B, 0xF60806F2, 0xE0F701D4);
	r0 = D(r0, s0_1_0, 0x34F9BE05, 0x08F10FFF, 0xF3C216D0, 0xE6FF01F6);
	r1 = D(r1, s0_1_0, 0xF406D904, 0xAEEB8181, 0xEF27EE0E, 0x14ECEFDD);
	r2 = D(r2, s0_1_0, 0x1CF1DEF4, 0xFBF10C06, 0xF8002CD3, 0xFB0B01F4);
	r3 = D(r3, s0_1_0, 0xC4E90CD2, 0x1A090C09, 0xFA0305FE, 0xF122FA06);
	r4 = D(r4, s0_1_0, 0x0920E307, 0x06020510, 0xF1F106EC, 0x07F2F604);
	r5 = D(r5, s0_1_0, 0x070FFB14, 0x050C04F6, 0x02F1F1E8, 0xEB130FEC);
	r6 = D(r6, s0_1_0, 0x0A0AFA10, 0xF8F00BFD, 0xF7ED0905, 0xEBE81BEC);
	r7 = D(r7, s0_1_0, 0xF40310EE, 0xF80EE32F, 0xFAF7F5FF, 0xF40606FA);
	r0 = D(r0, s0_1_1, 0x4AF60981, 0x1FFECB13, 0x45128181, 0xFD11B2DC);
	r1 = D(r1, s0_1_1, 0x26FE1614, 0x120DFD1B, 0x07CA3DEF, 0xF1EA070C);
	r2 = D(r2, s0_1_1, 0x0E1BF9FC, 0x032C0EF8, 0x01EB38DE, 0xF8220202);
	r3 = D(r3, s0_1_1, 0xEFDC091E, 0xFA001809, 0xE9FC11D9, 0xE125074D);
	r4 = D(r4, s0_1_1, 0xFEFFFB46, 0xFCE70A05, 0xFA2708E8, 0x1A24EF1B);
	r5 = D(r5, s0_1_1, 0x172D02F9, 0x02FEFD19, 0x0AE51415, 0xF909E70A);
	r6 = D(r6, s0_1_1, 0x1F3BC0E7, 0xF7E417E6, 0x0C01F8F4, 0xFE1FFBFF);
	r7 = D(r7, s0_1_1, 0x0D1581DA, 0x21081C18, 0x0C23E812, 0x170402D6);
	r0 = D(r0, s0_1_2, 0xED0B0AEB, 0x0417F715, 0x31EFEC10, 0xE6F432C8);
	r1 = D(r1, s0_1_2, 0x04FA000D, 0x0304FD07, 0x09FD0212, 0x1724F2F6);
	r2 = D(r2, s0_1_2, 0xFCF20536, 0x06F9FE05, 0xE6DB12AA, 0xEF09F834);
	r3 = D(r3, s0_1_2, 0x15FEEFA5, 0xECF8F023, 0x0A020CE9, 0x0322DBF7);
	r4 = D(r4, s0_1_2, 0x001DFD29, 0xFA01F8F9, 0x15FBEF14, 0xCE16F002);
	r5 = D(r5, s0_1_2, 0x060703EF, 0xEC09FD23, 0xFFF811B9, 0x03E70803);
	r6 = D(r6, s0_1_2, 0x0825D910, 0xF9FC12F9, 0x01FF0507, 0x1603DE03);
	r7 = D(r7, s0_1_2, 0xAE0BF781, 0x4106D323, 0xFBFB0304, 0x131CB51A);
	r0 = D(r0, s0_2_0, 0x0F0DDBCF, 0x00F2FA18, 0xFBE7FC06, 0x0B0F21E2);
	r1 = D(r1, s0_2_0, 0xF30012E8, 0x0EDFDE11, 0x0BE10514, 0x26F4E21A);
	r2 = D(r2, s0_2_0, 0xF10CEB11, 0x01F70100, 0xFA16E4D5, 0x12010400);
	r3 = D(r3, s0_2_0, 0xF324C7B1, 0x19050306, 0xFBFEFD0A, 0x27E30E02);
	r4 = D(r4, s0_2_0, 0xFEF40521, 0x04080318, 0x000DFAFF, 0x07EE0707);
	r5 = D(r5, s0_2_0, 0x0218E701, 0xF8FF06FE, 0xEB19F3D1, 0x030DFF01);
	r6 = D(r6, s0_2_0, 0xFC01EEE4, 0xF9F709F4, 0xFA140709, 0x09F2F800);
	r7 = D(r7, s0_2_0, 0x02FBFBDE, 0xF40BFEF2, 0xECF3FDF6, 0x11E616F6);
	r0 = D(r0, s0_2_1, 0x2E040FEA, 0xFBEFB135, 0x23CA17E6, 0xD30CD8D4);
	r1 = D(r1, s0_2_1, 0xF8071BEB, 0x110A01FC, 0x0F1C140C, 0x0002F2F2);
	r2 = D(r2, s0_2_1, 0xD9F1F735, 0xF5FE10F2, 0xD5EA2E03, 0xF5E718ED);
	r3 = D(r3, s0_2_1, 0xE1D14E97, 0xF93CE2FA, 0x07EE12F7, 0xCDC07FB2);
	r4 = D(r4, s0_2_1, 0x14F30E39, 0x04FFC4FD, 0xEECE2416, 0x27D42C23);
	r5 = D(r5, s0_2_1, 0xF3E80609, 0x20FD07FB, 0xCE100405, 0x18FAE625);
	r6 = D(r6, s0_2_1, 0xF615F80F, 0x011814F8, 0x071533F3, 0xC3F38158);
	r7 = D(r7, s0_2_1, 0xCC0581CB, 0x31F21EDA, 0xEBDD812F, 0x37D5FD49);
	r0 = D(r0, s0_2_2, 0x071A04C9, 0x09F1EC1A, 0x27F407EF, 0xE5080F06);
	r1 = D(r1, s0_2_2, 0x05F10EED, 0x16F30804, 0xD8F90318, 0x440CE10D);
	r2 = D(r2, s0_2_2, 0xDE06ED23, 0xEF00FC06, 0xDCFA24FC, 0xF7F1F930);
	r3 = D(r3, s0_2_2, 0xCBFC13A0, 0xF703F30F, 0xF406080B, 0xE8FAAE01);
	r4 = D(r4, s0_2_2, 0x0BF60728, 0x000611F3, 0x1AF80319, 0xFE06F2E9);
	r5 = D(r5, s0_2_2, 0xFEFFF704, 0x0AEE0BF4, 0xCDE32CBD, 0x00FA10E5);
	r6 = D(r6, s0_2_2, 0x0DF7FA0D, 0xEDFA1809, 0x04FCF80A, 0x261FBF4D);
	r7 = D(r7, s0_2_2, 0x8102FE00, 0x0C1B080A, 0xA7EE18D0, 0x01F9E84E);
	r0 = D(r0, s1_0_0, 0x1C040FD7, 0xF016FA0F, 0x081130E4, 0xE91D0BDF);
	r1 = D(r1, s1_0_0, 0xF409F9F5, 0xEA0CE6F2, 0xDCEDDD36, 0x302218DA);
	r2 = D(r2, s1_0_0, 0x0110F928, 0x05F908F9, 0xDCF1F3ED, 0xF902FE05);
	r3 = D(r3, s1_0_0, 0x1EF01D18, 0xEC040EDE, 0x020101FA, 0x1616FF00);
	r4 = D(r4, s1_0_0, 0xE912FC25, 0xE30B09F1, 0xE308DE21, 0xF52A1619);
	r5 = D(r5, s1_0_0, 0xE3FE041C, 0xFC03FD02, 0x0EC7FCF2, 0x0105EE12);
	r6 = D(r6, s1_0_0, 0x0FDCD901, 0xF9F706FE, 0x070701FE, 0xF4021401);
	r7 = D(r7, s1_0_0, 0x011AF7FA, 0xE2FBF40F, 0x07FCF30B, 0xE3211DFC);
	r0 = D(r0, s1_0_1, 0xF8CCF5E4, 0x0A16E911, 0xDB9E9308, 0xD3FAEBFF);
	r1 = D(r1, s1_0_1, 0x0DF6091A, 0xFC1FFBF4, 0xFE0D13F7, 0xEF06D60B);
	r2 = D(r2, s1_0_1, 0x0213FE02, 0x0705EE04, 0x0AAFF803, 0x0F0C09F6);
	r3 = D(r3, s1_0_1, 0x11EAF2C4, 0xFFEBF204, 0x03F707F8, 0x0FF5FCFA);
	r4 = D(r4, s1_0_1, 0x0E00F202, 0xE1FA1209, 0x09ED2009, 0x00FA0719);
	r5 = D(r5, s1_0_1, 0xE80A2707, 0xFBFF070B, 0x08CE08ED, 0x09F6120B);
	r6 = D(r6, s1_0_1, 0x052D08EA, 0xEF09EE01, 0x1303FBFD, 0xF7030BEC);
	r7 = D(r7, s1_0_1, 0x022AF436, 0xBD81E781, 0x16F3010C, 0xD1EB2B32);
	r0 = D(r0, s1_0_2, 0xEDE71400, 0x030C09F5, 0x12A9D626, 0x05EEF9D8);
	r1 = D(r1, s1_0_2, 0x0617EBFB, 0x0C02F900, 0xD9EA0E01, 0xF82205FE);
	r2 = D(r2, s1_0_2, 0x07291916, 0xFEFC0705, 0xEEE7FC43, 0xEEF00DFF);
	r3 = D(r3, s1_0_2, 0xE8DE0C0C, 0xE70F06E8, 0xF6E5F500, 0xF3FCFAE2);
	r4 = D(r4, s1_0_2, 0xFD0DF908, 0xF00A13FF, 0x0E1804F1, 0xF407ECF8);
	r5 = D(r5, s1_0_2, 0xDDF916FB, 0x1100F8F7, 0x1B08FEFC, 0x02EFFD0A);
	r6 = D(r6, s1_0_2, 0xF6F601D1, 0x03ED050A, 0x08110302, 0xEDEF14DC);
	r7 = D(r7, s1_0_2, 0x1B200AEF, 0xDBE2B6F6, 0x07F7E903, 0x040428CE);
	r0 = D(r0, s1_1_0, 0xFD0F171C, 0x04FDF708, 0xCEFD02E3, 0x20190DCD);
	r1 = D(r1, s1_1_0, 0xF11BF21D, 0xE8051708, 0x0505041D, 0x251101EF);
	r2 = D(r2, s1_1_0, 0x090E22D1, 0x050105FD, 0xD2CF10F0, 0xFEF81FF0);
	r3 = D(r3, s1_1_0, 0x44021DDA, 0xEA110C15, 0xF6000817, 0xEE03F80E);
	r4 = D(r4, s1_1_0, 0xD923FA23, 0x1203FE0B, 0x1B110906, 0xFF00F5F2);
	r5 = D(r5, s1_1_0, 0x17F0FEF2, 0xFE0B03F8, 0x28DF25DA, 0x100901FD);
	r6 = D(r6, s1_1_0, 0xFCF90507, 0x120306FE, 0x1AFBFD18, 0x0C01F8F6);
	r7 = D(r7, s1_1_0, 0xFF12FACE, 0x0C170CFB, 0x03EE0612, 0x1DB3EFFE);
	r0 = D(r0, s1_1_1, 0x0C301901, 0xF712F516, 0xE111E4C0, 0x020CFAF0);
	r1 = D(r1, s1_1_1, 0xEA0EF1FA, 0xEA24F0F4, 0xC7D9F12E, 0x0B25E5EC);
	r2 = D(r2, s1_1_1, 0x0217D415, 0x20020D11, 0xBEFDE1C5, 0x05ACDCF9);
	r3 = D(r3, s1_1_1, 0x2BE7B21B, 0xDF02162A, 0x0AEBF40C, 0xD6F7B330);
	r4 = D(r4, s1_1_1, 0xF91AF9EA, 0x05171309, 0x1AE1D2D5, 0x2D2BD410);
	r5 = D(r5, s1_1_1, 0xF7EBF114, 0x0C17E1FC, 0xEAE3D6FE, 0x16FF0C0B);
	r6 = D(r6, s1_1_1, 0x05051C08, 0x03150115, 0xE9F311E8, 0xFAFB0A1B);
	r7 = D(r7, s1_1_1, 0xF7FE1B12, 0x502306E9, 0xF3F5FB0C, 0x15BAC528);
	r0 = D(r0, s1_1_2, 0xFDF0FFE3, 0x0C19ECFB, 0xD90925EF, 0x04050FEB);
	r1 = D(r1, s1_1_2, 0x050CFC01, 0x05090DFD, 0x271DE6E0, 0xFE021031);
	r2 = D(r2, s1_1_2, 0x14F606EF, 0xFB0DFC02, 0xF3D0F0DC, 0x1407FCEF);
	r3 = D(r3, s1_1_2, 0x0320F5F5, 0x1623F4FA, 0x2608F2E4, 0xDDDDE9FE);
	r4 = D(r4, s1_1_2, 0x040EFE06, 0x0809EE04, 0xFAE90B08, 0x02F617FC);
	r5 = D(r5, s1_1_2, 0x06F5FA02, 0x060517FE, 0x1D2407D8, 0x130D09EE);
	r6 = D(r6, s1_1_2, 0x120F0E05, 0x14FAFBFE, 0xFD0DF8FC, 0xF207FD1A);
	r7 = D(r7, s1_1_2, 0xE60DF404, 0x2EF724F2, 0x0AFA04FA, 0x16D5FE04);
	r0 = D(r0, s1_2_0, 0xEEE6EEF5, 0xFC16FFF9, 0x0AD82201, 0xF3F40EEB);
	r1 = D(r1, s1_2_0, 0x07E9F9EB, 0x0D0BFBF5, 0x2FF9EBF4, 0x0AFEEB00);
	r2 = D(r2, s1_2_0, 0xFDFE0EE8, 0x04FDFAF4, 0xEBFF09EF, 0xF615F5F4);
	r3 = D(r3, s1_2_0, 0x00FF13E4, 0x011806F2, 0x00F50403, 0xFFD81716);
	r4 = D(r4, s1_2_0, 0xF8FCE2F4, 0x0315FAE5, 0x00FB0205, 0x0700F60D);
	r5 = D(r5, s1_2_0, 0xE60C0810, 0xFFFA0506, 0xE5040C2B, 0xF400FFFD);
	r6 = D(r6, s1_2_0, 0x0106FDF3, 0x0EFBFAF8, 0xF309F5F9, 0x021AECF8);
	r7 = D(r7, s1_2_0, 0x060D0FE9, 0xFAF80200, 0xFBFD0DFC, 0xF524090A);
	r0 = D(r0, s1_2_1, 0x08EF1208, 0x131FFC19, 0x1519E4FA, 0x41201B16);
	r1 = D(r1, s1_2_1, 0x01F922FA, 0x0507FEF7, 0xE20DF5EA, 0x202712FE);
	r2 = D(r2, s1_2_1, 0xE705001A, 0xF9FE05FB, 0x16072321, 0xDBF40E1A);
	r3 = D(r3, s1_2_1, 0x09BD0D0C, 0x02010200, 0xEAFA0910, 0x11EFF325);
	r4 = D(r4, s1_2_1, 0x080FF6FB, 0xFC1AEEFC, 0xFB0A0C24, 0x000CF9FC);
	r5 = D(r5, s1_2_1, 0xF8FFEE14, 0x0917FD05, 0xCFF60F0D, 0xF8FEF9F8);
	r6 = D(r6, s1_2_1, 0xEF0CF5EE, 0xFC0708FF, 0x04F80B0A, 0xF214FC0D);
	r7 = D(r7, s1_2_1, 0x26E90807, 0xF8FC12F7, 0xFAF809FF, 0xF303EB09);
	r0 = D(r0, s1_2_2, 0x19221FFA, 0xFC1AEE09, 0x18FAEE10, 0x07F81C03);
	r1 = D(r1, s1_2_2, 0x0BF60FFE, 0x020101F9, 0x14F20C03, 0xF706D30B);
	r2 = D(r2, s1_2_2, 0xEA1BEF0E, 0xF9040100, 0x01081219, 0xE818F91A);
	r3 = D(r3, s1_2_2, 0x140208D3, 0x01FB02F3, 0x181211F7, 0x2F1B1003);
	r4 = D(r4, s1_2_2, 0x0206F9FF, 0x0504FCE9, 0x100CF9F9, 0x1FF8F7F6);
	r5 = D(r5, s1_2_2, 0x04FEEF02, 0xFFF6F011, 0x0D1110F9, 0x0E080405);
	r6 = D(r6, s1_2_2, 0xFBFF08FC, 0xF9F30B06, 0x0110F3FF, 0xFD07E606);
	r7 = D(r7, s1_2_2, 0xF9FFFD01, 0xEF1C1116, 0xF5EA090C, 0xFC28EC19);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEEFDF929, 0xFE020815, 0x02D34128, 0x22F507F1);
	r1 = D(r1, s0_0_0, 0x0D0C01F1, 0x23F80813, 0x02F0F00E, 0x00FBE113);
	r2 = D(r2, s0_0_0, 0xF0FDF6FB, 0x03FD08FA, 0x2E1C27CA, 0x0104FD07);
	r3 = D(r3, s0_0_0, 0xFD021AE8, 0xF4060401, 0x0400FDFA, 0xFCEEED07);
	r4 = D(r4, s0_0_0, 0x19F7F91F, 0x00000002, 0x041C01F5, 0x09FF0702);
	r5 = D(r5, s0_0_0, 0x1807FCED, 0xFC05FF04, 0xE9260A04, 0xF50EF000);
	r6 = D(r6, s0_0_0, 0xD50A130B, 0x09FD0AF5, 0x0100FAFB, 0xF2060AFE);
	r7 = D(r7, s0_0_0, 0xFDE9FBEE, 0x0E1712E1, 0x03EFF9FC, 0x14FB29E8);
	r0 = D(r0, s0_0_1, 0x0303FE08, 0xFF10FF02, 0xF4FE31CF, 0x0710FE11);
	r1 = D(r1, s0_0_1, 0xFCFB0D0E, 0x19000831, 0x0BF4D51C, 0xFCF51200);
	r2 = D(r2, s0_0_1, 0xF3000B27, 0x02040912, 0x1F1D06EC, 0x09F2F312);
	r3 = D(r3, s0_0_1, 0xE3061D17, 0x010B08FD, 0xFDFFE401, 0xF6ED02F1);
	r4 = D(r4, s0_0_1, 0x120AFC29, 0xF0F9F8FE, 0x0ED9E60E, 0xE9D8EB1F);
	r5 = D(r5, s0_0_1, 0x08FDF5FF, 0xE606F90B, 0x1E11320B, 0xE2F207FE);
	r6 = D(r6, s0_0_1, 0x21F2EE01, 0x08060F12, 0xFBF7000F, 0xF009FF04);
	r7 = D(r7, s0_0_1, 0xF704F132, 0xF71E44CD, 0xED1E04F3, 0xE62FE9F6);
	r0 = D(r0, s0_0_2, 0xFAFF1A04, 0x0F00FC20, 0xE7EA08E7, 0xF5EC0240);
	r1 = D(r1, s0_0_2, 0x0710FFF3, 0x090009FF, 0x010112F3, 0xFB0B0A06);
	r2 = D(r2, s0_0_2, 0x03FBF504, 0x0201FF0A, 0x2BFF1907, 0x00F4FCF7);
	r3 = D(r3, s0_0_2, 0x1502F7FB, 0x0F0DFBF7, 0x11FCFE00, 0x130AFB00);
	r4 = D(r4, s0_0_2, 0xF7010012, 0x09050BEA, 0xF1FD0CF1, 0x0501EE17);
	r5 = D(r5, s0_0_2, 0x0A000905, 0xF9FC03FC, 0x10F6F306, 0xF405FEED);
	r6 = D(r6, s0_0_2, 0xDB0AFC06, 0x10FE0703, 0xF801FBFE, 0xF11008E7);
	r7 = D(r7, s0_0_2, 0x0B1BFB44, 0xDB73DE4D, 0xE90800FF, 0xE016162C);
	r0 = D(r0, s0_1_0, 0x12F8E646, 0x01FD1314, 0x1AFAC217, 0xD80822E8);
	r1 = D(r1, s0_1_0, 0x13DC091A, 0x05CF092A, 0x16E712F4, 0xF5E60314);
	r2 = D(r2, s0_1_0, 0x13EB0615, 0x0DFC07F5, 0x2BF9D611, 0x090915F5);
	r3 = D(r3, s0_1_0, 0xFD0010FF, 0x00031604, 0x060306FF, 0xF91A16F6);
	r4 = D(r4, s0_1_0, 0xFFF5F51C, 0xEEF90DE8, 0xFAFBF717, 0xF8F21510);
	r5 = D(r5, s0_1_0, 0xEFF9FEFA, 0xF007060B, 0xE612EE14, 0xFFFFFD11);
	r6 = D(r6, s0_1_0, 0x1BFCFC06, 0xFEFCFCF6, 0xE5090CF5, 0x00000C0D);
	r7 = D(r7, s0_1_0, 0x12F61AEF, 0x16F30A0B, 0x03EAEF10, 0x0308F51F);
	r0 = D(r0, s0_1_1, 0xE62B0581, 0xECD9F512, 0xADFE330A, 0x08E81DB8);
	r1 = D(r1, s0_1_1, 0x0CF5FEF7, 0x0FF50CF4, 0xF8141508, 0x2701150C);
	r2 = D(r2, s0_1_1, 0xFA01152F, 0x04FA0800, 0xDFEBF7FE, 0xFF1005DB);
	r3 = D(r3, s0_1_1, 0xECEA1D0F, 0xE7FAEFFE, 0x05E6E80E, 0xF70DE623);
	r4 = D(r4, s0_1_1, 0xDBFF11F1, 0x1B09EE15, 0xF41B0E1B, 0xF20BF10C);
	r5 = D(r5, s0_1_1, 0x0BF7F722, 0x1A0E09EE, 0x21E5132A, 0x1DFD09E8);
	r6 = D(r6, s0_1_1, 0xF20EFA1E, 0xF9FE0A01, 0xF4F9030B, 0x1F0F0626);
	r7 = D(r7, s0_1_1, 0x01E31006, 0x0A0D1CEC, 0x24EFEC24, 0xF71711DB);
	r0 = D(r0, s0_1_2, 0x06010542, 0x04F7F911, 0x1212E504, 0x0CF6FA18);
	r1 = D(r1, s0_1_2, 0xF1F9FC06, 0x06FEFEEF, 0xF92AF233, 0x0FF5EC06);
	r2 = D(r2, s0_1_2, 0x1EF0040D, 0xED0A0008, 0x101916F1, 0xFA030BED);
	r3 = D(r3, s0_1_2, 0xF606F81E, 0x08050913, 0x0DF60305, 0x01EDE41C);
	r4 = D(r4, s0_1_2, 0xFCFE08FD, 0x0D060D17, 0x02F0FDD4, 0xF1F3EB04);
	r5 = D(r5, s0_1_2, 0xF3F90B03, 0xEFFFF5C8, 0x06FE04EC, 0xF21012F6);
	r6 = D(r6, s0_1_2, 0x06F2F21E, 0x13FC09F7, 0xFD10FCE8, 0xEBFEF8F9);
	r7 = D(r7, s0_1_2, 0xDD140E20, 0x11FBDFF9, 0xEE0405FD, 0x08C41F81);
	r0 = D(r0, s0_2_0, 0x0306F518, 0x0402F6FE, 0xE3E30EF8, 0xEF031816);
	r1 = D(r1, s0_2_0, 0x07FF0EF4, 0xEEE02107, 0xDB06ED0B, 0xDB1308F1);
	r2 = D(r2, s0_2_0, 0xFBFCEFF4, 0x020405F0, 0x10FAEDF8, 0xE618F505);
	r3 = D(r3, s0_2_0, 0x02E50403, 0xFF0B0006, 0x0B0304FC, 0xF5F90511);
	r4 = D(r4, s0_2_0, 0x070201FF, 0xE8FB1DF2, 0x0804FDF7, 0xED061505);
	r5 = D(r5, s0_2_0, 0x01FF05F8, 0xFFFC0608, 0x23020605, 0xFE000517);
	r6 = D(r6, s0_2_0, 0x05F60EFE, 0xF30004F1, 0xFCFB02FC, 0xFF100D07);
	r7 = D(r7, s0_2_0, 0x07091606, 0xEDF0000D, 0x22F9F0ED, 0xEEED1010);
	r0 = D(r0, s0_2_1, 0xF2F00BE4, 0x0BFF060C, 0x09180009, 0xF80E05D8);
	r1 = D(r1, s0_2_1, 0x1AF815DC, 0x10020208, 0x2D2D0DFF, 0x1FDA04EE);
	r2 = D(r2, s0_2_1, 0x21E30BFB, 0x1C0001F5, 0x291413F2, 0xFBE3200C);
	r3 = D(r3, s0_2_1, 0x05052F10, 0x0001F80B, 0xF10B0702, 0x08EF1800);
	r4 = D(r4, s0_2_1, 0xFBEFF709, 0xF3F112F1, 0xFE0604E5, 0xEF030909);
	r5 = D(r5, s0_2_1, 0xF9080212, 0xFB0CF217, 0x0001200C, 0x04FE0010);
	r6 = D(r6, s0_2_1, 0xF3011AEE, 0x0DF608FC, 0x07F30BFF, 0x07FAF500);
	r7 = D(r7, s0_2_1, 0xFE0619F8, 0xEEED0210, 0x1316F308, 0xF845041A);
	r0 = D(r0, s0_2_2, 0xFF12F616, 0x0302EC14, 0xF01AF60F, 0xFF100DF5);
	r1 = D(r1, s0_2_2, 0xFBF7FBFC, 0xF5FDFCFC, 0xEDD9E8F4, 0x0C06FD29);
	r2 = D(r2, s0_2_2, 0xD4150623, 0x010902F9, 0xFD3803F5, 0xFE0AFF0D);
	r3 = D(r3, s0_2_2, 0x14100900, 0x0CFCF600, 0x0BFA00FE, 0x1BEFFAEB);
	r4 = D(r4, s0_2_2, 0xF301F706, 0x091803F7, 0xFE1EFA27, 0xFCFBFA0F);
	r5 = D(r5, s0_2_2, 0xF5000604, 0xF608F50B, 0xE52713FE, 0x0B0002FD);
	r6 = D(r6, s0_2_2, 0x06F1FCF7, 0x000608F1, 0x03FBF215, 0xE3090515);
	r7 = D(r7, s0_2_2, 0xEE0401FC, 0xEF09E922, 0xF50EF5FB, 0xEAEFFB25);
	r0 = D(r0, s1_0_0, 0xFB0F1203, 0xFE07F5FC, 0x81E7211B, 0x15F0F801);
	r1 = D(r1, s1_0_0, 0x17010800, 0x25FAF611, 0x1D0E1216, 0xECF3F7EF);
	r2 = D(r2, s1_0_0, 0xF001FDFC, 0xF2FAF8FC, 0xB30B01FA, 0x10060DFC);
	r3 = D(r3, s1_0_0, 0x15C2EA12, 0xF80401F8, 0x120D01FF, 0xF9FF06FE);
	r4 = D(r4, s1_0_0, 0xEE0018F9, 0x0D0B0E05, 0x121521FD, 0x00E8ED05);
	r5 = D(r5, s1_0_0, 0x2A01FE03, 0x0002F805, 0xE600DF2C, 0x02FAFC06);
	r6 = D(r6, s1_0_0, 0xF20D120B, 0xF7FDF7FF, 0xFC080203, 0x0100F4FE);
	r7 = D(r7, s1_0_0, 0xF4F7F5F8, 0x09F4022A, 0x050D05F7, 0x1EE3E8E0);
	r0 = D(r0, s1_0_1, 0xB608D512, 0xE70E0006, 0x92EAFFEB, 0x15C70C0D);
	r1 = D(r1, s1_0_1, 0xFC0005EA, 0xFFFB06FB, 0x180D1CEB, 0x0716060E);
	r2 = D(r2, s1_0_1, 0xFD17010F, 0xF20004FE, 0xEBF5FCE6, 0x07090501);
	r3 = D(r3, s1_0_1, 0xD42D2A02, 0x120205E3, 0x100405F0, 0x14130504);
	r4 = D(r4, s1_0_1, 0xFC11EA18, 0xFCFEFCDD, 0x180A1601, 0xFB122105);
	r5 = D(r5, s1_0_1, 0x04FBF3EB, 0x06F9F6FE, 0xDE15FDE3, 0xF20103FE);
	r6 = D(r6, s1_0_1, 0x1C0620F7, 0x0209F90B, 0x05FDFEF9, 0xF22106FB);
	r7 = D(r7, s1_0_1, 0x00F02F28, 0x27F60A0C, 0xFBFBFB02, 0xE008ED11);
	r0 = D(r0, s1_0_2, 0x1406F801, 0xFE05EB19, 0x03F829E1, 0xE6EAE302);
	r1 = D(r1, s1_0_2, 0xF3F9F508, 0xEE02F00E, 0x06062DF6, 0xE9EA05FA);
	r2 = D(r2, s1_0_2, 0x1F2219EF, 0x05040305, 0x1EC206F8, 0x0D0313E7);
	r3 = D(r3, s1_0_2, 0x281309FA, 0x03F80112, 0xFC09F213, 0xD3160819);
	r4 = D(r4, s1_0_2, 0xFEFDFCFF, 0x030B0002, 0xEC0204F7, 0x15F9FA04);
	r5 = D(r5, s1_0_2, 0x14000EED, 0xFBF7F1FF, 0x0F061219, 0x01F50CFE);
	r6 = D(r6, s1_0_2, 0xF70DF719, 0x0202EE08, 0xFE000000, 0x0A0504F1);
	r7 = D(r7, s1_0_2, 0x05EA1B15, 0xD3BA2B01, 0x12FC0D01, 0xF5FD1CFC);
	r0 = D(r0, s1_1_0, 0x0DF31A0F, 0x0CFAF2FF, 0xF41011F3, 0xEC06ECE2);
	r1 = D(r1, s1_1_0, 0xFAF703F8, 0x1CF123BF, 0xF8E5E0FC, 0x1815F8FB);
	r2 = D(r2, s1_1_0, 0xE4F70DF2, 0xFB06F6FE, 0x1CEFE6DC, 0xE6EBF603);
	r3 = D(r3, s1_1_0, 0x07AA04EA, 0x0B0EF40C, 0xF7F6FA00, 0x02F419E3);
	r4 = D(r4, s1_1_0, 0x0CF9220B, 0xF904FF10, 0xE3F30A14, 0xD11F1106);
	r5 = D(r5, s1_1_0, 0xF00F0202, 0x04F805FB, 0xEED8FEF7, 0x090409F5);
	r6 = D(r6, s1_1_0, 0x25FCFA12, 0xF800F100, 0x09FF0112, 0x090EE308);
	r7 = D(r7, s1_1_0, 0x1005F1F6, 0xEB1FF109, 0x0A0A0DFC, 0xED19FEF3);
	r0 = D(r0, s1_1_1, 0xFB19F719, 0x08080A0B, 0xE31D1923, 0x141C33EE);
	r1 = D(r1, s1_1_1, 0x4E0DEDE9, 0x1C09DAEA, 0x2CF5DEE3, 0xE60EF017);
	r2 = D(r2, s1_1_1, 0xBCFDE30B, 0x08FFFAFA, 0xCA22DE01, 0xBE0EF8FE);
	r3 = D(r3, s1_1_1, 0xC9EACF0C, 0x4403F905, 0xCEFD010A, 0xE202F81C);
	r4 = D(r4, s1_1_1, 0x020BEA03, 0x0BFE0616, 0xDD0EE6D7, 0xE0131721);
	r5 = D(r5, s1_1_1, 0xCA101BE5, 0xE50AF705, 0xF10115EC, 0xF21BFC02);
	r6 = D(r6, s1_1_1, 0x26F012E2, 0xFAF7F408, 0xF70516E5, 0x14171903);
	r7 = D(r7, s1_1_1, 0x011DE608, 0xEEC5CAF8, 0x1DE41500, 0xD803FD02);
	r0 = D(r0, s1_1_2, 0x191D1CE2, 0xE205F107, 0x0D2CF81E, 0xF1FDF422);
	r1 = D(r1, s1_1_2, 0xFD11F00C, 0xF00A0901, 0xE30BC401, 0x04F31FE9);
	r2 = D(r2, s1_1_2, 0xEA001509, 0x0AFEF913, 0xF9210004, 0xC4FD05EE);
	r3 = D(r3, s1_1_2, 0x12D2131E, 0xFE04DD18, 0x0409D20A, 0xF0DEBB12);
	r4 = D(r4, s1_1_2, 0xFC0A04F9, 0x1D07F800, 0xE8011213, 0x09F51BF1);
	r5 = D(r5, s1_1_2, 0xF00618F6, 0xFFF948FF, 0x001907F3, 0x05F625FD);
	r6 = D(r6, s1_1_2, 0xE8F4080A, 0xFEFAFD18, 0xF517FE05, 0x17EF140A);
	r7 = D(r7, s1_1_2, 0xC70109E0, 0x000900F9, 0xF4FB06F7, 0xC0D730F9);
	r0 = D(r0, s1_2_0, 0xEF0810F8, 0x0A05FDE4, 0x1FF5E7D8, 0xEE1FEEF1);
	r1 = D(r1, s1_2_0, 0xF102EDFC, 0xFA080AF3, 0x010304FA, 0xFC00F3E7);
	r2 = D(r2, s1_2_0, 0x0B0B0CE4, 0xF5FB00F9, 0x01FE2C00, 0x120901F8);
	r3 = D(r3, s1_2_0, 0xE6EA2FDD, 0xFC0602F5, 0x06010606, 0x1C15FFFB);
	r4 = D(r4, s1_2_0, 0xF80F1001, 0xF9FF04FA, 0xF3FD01FC, 0x19F9E200);
	r5 = D(r5, s1_2_0, 0xF3020EFE, 0x060DFDFB, 0x12DA0500, 0xF1010403);
	r6 = D(r6, s1_2_0, 0xF3FF050D, 0xF8F80502, 0x050306F9, 0xF0F2000A);
	r7 = D(r7, s1_2_0, 0xFF0705E4, 0xECF601E8, 0x0A09F4F4, 0x14E4E9EC);
	r0 = D(r0, s1_2_1, 0xE2F209D0, 0x05070E0C, 0x14F8E9E9, 0x11251FFA);
	r1 = D(r1, s1_2_1, 0xF50C0BE2, 0xF1FE0FF7, 0xCD2100EF, 0xE1E7EF04);
	r2 = D(r2, s1_2_1, 0x1901003A, 0xF4020DF0, 0x29030005, 0x09F0F103);
	r3 = D(r3, s1_2_1, 0xFC02D53A, 0xF70D0FF1, 0x15F0FC11, 0x0B0BDFEE);
	r4 = D(r4, s1_2_1, 0x01FE0500, 0xD8F42808, 0x23FBE515, 0x04FCF100);
	r5 = D(r5, s1_2_1, 0x0DF7F51F, 0x06F7ED06, 0x1CEFE61F, 0xF2F60101);
	r6 = D(r6, s1_2_1, 0xF10D15E8, 0xFCF70DF4, 0x170107FD, 0x12F0230E);
	r7 = D(r7, s1_2_1, 0xF9F404F8, 0x16F4E2FC, 0xFF10DBF5, 0x33FBEA12);
	r0 = D(r0, s1_2_2, 0xFC04EAE1, 0x0302FA0E, 0x061523BE, 0xF70202FA);
	r1 = D(r1, s1_2_2, 0x000B07F5, 0x020E0608, 0xFE00150A, 0x02F215FE);
	r2 = D(r2, s1_2_2, 0xFB08DA05, 0x0306FC01, 0x1F17EFEA, 0x2408E90C);
	r3 = D(r3, s1_2_2, 0x0125F2E1, 0xF5FA0FFB, 0x1404FC06, 0x250F9E09);
	r4 = D(r4, s1_2_2, 0x03081305, 0x0413EAF7, 0x0BEAF4F1, 0x0C0CF0F1);
	r5 = D(r5, s1_2_2, 0xFFF305FD, 0xFC00000D, 0xF711DDF8, 0xF6FE130C);
	r6 = D(r6, s1_2_2, 0xF5F107FF, 0x1008FE0E, 0xF6F5FB0F, 0xFAE9270D);
	r7 = D(r7, s1_2_2, 0xFF041D15, 0xF105E9E6, 0x000301EE, 0x0FFDFA06);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE2FF0EDD, 0x000B0301, 0x1C34EB13, 0x190B0804);
	r1 = D(r1, s0_0_0, 0x1AFCE002, 0x1EEBE5F8, 0x1403C1F5, 0x1CE90111);
	r2 = D(r2, s0_0_0, 0x2B05FE16, 0xFA060A01, 0xE0070BBE, 0x0E0EF3FB);
	r3 = D(r3, s0_0_0, 0xFEF9FC31, 0xFD130CF7, 0x0203F4F8, 0x0CF601F8);
	r4 = D(r4, s0_0_0, 0x11FEFDD2, 0xFAFFFE04, 0x16FEE2E9, 0xFC09F010);
	r5 = D(r5, s0_0_0, 0x0300EA03, 0x0206FD07, 0xFF0C1903, 0xF205F0FD);
	r6 = D(r6, s0_0_0, 0xDFEF0FEC, 0xFE0206FC, 0x00FB010A, 0x070BFE08);
	r7 = D(r7, s0_0_0, 0xF2FCE505, 0xF101EB19, 0xF3E90907, 0x0A13F505);
	r0 = D(r0, s0_0_1, 0x3220EFFE, 0x041216F5, 0x3909FFEC, 0x0103F0EA);
	r1 = D(r1, s0_0_1, 0xF11510FE, 0xF708F0FE, 0x06F20BFF, 0xB7F4E411);
	r2 = D(r2, s0_0_1, 0xEF0BF9FC, 0x0A0B03F4, 0x3AF2FFE2, 0x07FEF50C);
	r3 = D(r3, s0_0_1, 0xEF010AF0, 0x141310FA, 0xFAFA0BFB, 0xE0E60A00);
	r4 = D(r4, s0_0_1, 0x1309050B, 0x0412FD06, 0x0DF40722, 0xF7FBFB0D);
	r5 = D(r5, s0_0_1, 0xF803161D, 0x04FF0607, 0xD607EDE7, 0xF2030106);
	r6 = D(r6, s0_0_1, 0x24090E1F, 0x0D0DFFEB, 0xFC05F902, 0xFBF20D0C);
	r7 = D(r7, s0_0_1, 0x18FDF9EE, 0xD3BED412, 0xFF040D06, 0x9D1302E7);
	r0 = D(r0, s0_0_2, 0xF50E0B0A, 0x0CF3F8FA, 0xEB04292A, 0xF106F1F9);
	r1 = D(r1, s0_0_2, 0x0800F9FD, 0x0BFBFF06, 0x18FE02F6, 0xFE0116E9);
	r2 = D(r2, s0_0_2, 0xF6ED1501, 0x0604FF06, 0x2204F717, 0xF5FD0401);
	r3 = D(r3, s0_0_2, 0x05F0FA0A, 0xFC0DF7FE, 0x0708F5FF, 0x0F13F804);
	r4 = D(r4, s0_0_2, 0xF3070502, 0x04070AFE, 0xF0E910F3, 0xF4F4F102);
	r5 = D(r5, s0_0_2, 0xF8020506, 0xFFF0FC01, 0x2D130905, 0x03F1F704);
	r6 = D(r6, s0_0_2, 0xFBE90203, 0x09060408, 0x04F6FA06, 0x01F314F1);
	r7 = D(r7, s0_0_2, 0xE1F0E508, 0x81B8DED9, 0xF710F101, 0xFED50608);
	r0 = D(r0, s0_1_0, 0xD7031F8A, 0xF8FE10FC, 0xE554F581, 0x0BF808E7);
	r1 = D(r1, s0_1_0, 0x08FE092D, 0x26125023, 0xFC16313D, 0xE1032010);
	r2 = D(r2, s0_1_0, 0x0BE7010C, 0xF60CF90C, 0x2EFF0632, 0xF70A0B09);
	r3 = D(r3, s0_1_0, 0x2E020C19, 0xF009FEED, 0x01F8FB07, 0x060CF8EB);
	r4 = D(r4, s0_1_0, 0x0EF8EF0F, 0xEC1813E3, 0x1CEBF700, 0xF20514FD);
	r5 = D(r5, s0_1_0, 0x17F934FC, 0xF5FB03F7, 0x20EF2BFC, 0x07F10405);
	r6 = D(r6, s0_1_0, 0x10F31804, 0x03FFF50A, 0x020B0DFD, 0x000C06F4);
	r7 = D(r7, s0_1_0, 0x1BE8F511, 0x1F191313, 0x15E2EFFD, 0x11291508);
	r0 = D(r0, s0_1_1, 0x2C0EF8D2, 0x1A000CFB, 0xFEECE0F1, 0x2D0B1FE9);
	r1 = D(r1, s0_1_1, 0xF40EFE04, 0xE8FD0EF6, 0xDECBE708, 0xA8CADBD0);
	r2 = D(r2, s0_1_1, 0xE3F9FD0C, 0x07020304, 0xD2F2F9F8, 0xFA0C0D11);
	r3 = D(r3, s0_1_1, 0xBB09DDEA, 0x22FB0F14, 0x1C04EE1E, 0x0AFDF3D7);
	r4 = D(r4, s0_1_1, 0x1CFA0914, 0x15F9F914, 0xDA0DF90F, 0xFDF9F3FA);
	r5 = D(r5, s0_1_1, 0x00EDDF14, 0xF10B1AD3, 0xD3F5E629, 0xF112FB05);
	r6 = D(r6, s0_1_1, 0x08FFDE10, 0xFB011602, 0xEF04FC00, 0xFAEAE5E1);
	r7 = D(r7, s0_1_1, 0xE30C02FF, 0xDCED0F22, 0x24292902, 0xDFF518DB);
	r0 = D(r0, s0_1_2, 0x0EEB0B04, 0xFCF2FDF2, 0x2DF91C0C, 0xFE16F205);
	r1 = D(r1, s0_1_2, 0xF8FF0901, 0xFFF21002, 0xAC141EFB, 0x1BE918FB);
	r2 = D(r2, s0_1_2, 0xFAF61CFB, 0xF3050307, 0xB81B26EA, 0x16FF1805);
	r3 = D(r3, s0_1_2, 0xBCDA1C02, 0xEE02FCFE, 0xD1F514F9, 0xE1EE0B09);
	r4 = D(r4, s0_1_2, 0x05060907, 0x0AFB15FD, 0x03FCF8FE, 0x0601FF1F);
	r5 = D(r5, s0_1_2, 0xFA040002, 0x36FAE6F4, 0xBDFE1300, 0x0A06E6EA);
	r6 = D(r6, s0_1_2, 0xF208EEFA, 0xFCFDF605, 0x0C030C05, 0x1BF3FA0B);
	r7 = D(r7, s0_1_2, 0xFFEAFB34, 0x1781DEC1, 0xEA0AF400, 0x2007F50B);
	r0 = D(r0, s0_2_0, 0x19F409E6, 0xF8F4F4FD, 0xEC340114, 0xF5FF0EF4);
	r1 = D(r1, s0_2_0, 0x12FFFD17, 0x0CF6F214, 0xECED2904, 0x04010002);
	r2 = D(r2, s0_2_0, 0xF4FBEEFF, 0xFDFF0200, 0xF310D9E9, 0xF70FE8F9);
	r3 = D(r3, s0_2_0, 0xF50CC502, 0x05F40204, 0x0904F6FC, 0xDD14FFE2);
	r4 = D(r4, s0_2_0, 0xFB0102ED, 0x11F2F220, 0xEE06E803, 0x05FC0DFD);
	r5 = D(r5, s0_2_0, 0xFA0BF2F8, 0x02FCFB05, 0x0BFBCAF3, 0x12F60003);
	r6 = D(r6, s0_2_0, 0x04FBF603, 0x00FE03FE, 0x06FBF6F3, 0x09FCF1E9);
	r7 = D(r7, s0_2_0, 0xF404FD03, 0x16120106, 0x0D07F308, 0xF818E5FE);
	r0 = D(r0, s0_2_1, 0x07041AFD, 0x0A0FF703, 0x11F0090C, 0xEDF7F0E9);
	r1 = D(r1, s0_2_1, 0xBE05F40A, 0x0A14070A, 0xFAF1E600, 0xF7070901);
	r2 = D(r2, s0_2_1, 0x101805F9, 0x0104FDF9, 0x011A10CF, 0x0B0601E6);
	r3 = D(r3, s0_2_1, 0x2621FBF2, 0xF8F8EB02, 0x0902FFF3, 0x2FF51237);
	r4 = D(r4, s0_2_1, 0x09000C09, 0xFC060904, 0x14040AF1, 0x0F090611);
	r5 = D(r5, s0_2_1, 0x021A0FF6, 0x030308FA, 0xFE1AFCD5, 0xF7000EE2);
	r6 = D(r6, s0_2_1, 0xEC0308FA, 0xFCF7F5FB, 0x0602FD05, 0xF906F1E8);
	r7 = D(r7, s0_2_1, 0x0D1A0F0C, 0x24041BFB, 0x11F2F50A, 0xF1090CD3);
	r0 = D(r0, s0_2_2, 0xFAFE00FA, 0x26FD17FB, 0xF5F50501, 0x1D0CEA09);
	r1 = D(r1, s0_2_2, 0xDCFD0AFF, 0x060606F6, 0xEDF5F205, 0x060C0BFC);
	r2 = D(r2, s0_2_2, 0x27F8FD09, 0xF80501FF, 0x592A08F2, 0x221017FA);
	r3 = D(r3, s0_2_2, 0xEFF033F7, 0xFBF0FAFB, 0x0A00F6EF, 0xCFE424F2);
	r4 = D(r4, s0_2_2, 0x0408FBFF, 0xE8E10CFB, 0x11FE1600, 0x0F0F0A14);
	r5 = D(r5, s0_2_2, 0x24F4F4F5, 0x06020308, 0x1E000E03, 0xFCFCF7EA);
	r6 = D(r6, s0_2_2, 0x180207FB, 0xFE00FE03, 0x0A0706FF, 0x1007F521);
	r7 = D(r7, s0_2_2, 0xE5FD0701, 0xEE162017, 0x040A0CFB, 0x1DF9E814);
	r0 = D(r0, s1_0_0, 0x0DD1059C, 0xFDFF0A02, 0xED2B81DA, 0xF7F0009F);
	r1 = D(r1, s1_0_0, 0x0304EAF9, 0x05FCDE08, 0x02F0F1F5, 0x0E0CF716);
	r2 = D(r2, s1_0_0, 0xFF06102B, 0x00040400, 0xF2EDF00D, 0xF9F7F6FF);
	r3 = D(r3, s1_0_0, 0xF605181D, 0x0404FE0F, 0x08FFFBFE, 0x10FBF208);
	r4 = D(r4, s1_0_0, 0x05F2F0C0, 0xFB000503, 0xFEF20C06, 0xF3F3FFF3);
	r5 = D(r5, s1_0_0, 0x0209FEDC, 0xFD000D07, 0xEE0604FE, 0x05040819);
	r6 = D(r6, s1_0_0, 0xF1F010F8, 0xFF0A070D, 0x01080300, 0x00FE0CF5);
	r7 = D(r7, s1_0_0, 0xF9061233, 0x1F04EEE6, 0x140DFCD1, 0x0D1107FD);
	r0 = D(r0, s1_0_1, 0x1749D6F1, 0xFF0111F0, 0x341DB3F1, 0x1722E611);
	r1 = D(r1, s1_0_1, 0x03F71023, 0x09FB03F6, 0x0AC91217, 0xE0E924ED);
	r2 = D(r2, s1_0_1, 0xFEE9EE0E, 0xFAFEF805, 0x0B07CD40, 0xFCFAFCF5);
	r3 = D(r3, s1_0_1, 0xE9F2FE35, 0xF700020A, 0x0505033A, 0x12F90AFB);
	r4 = D(r4, s1_0_1, 0x01FF0AA8, 0xEF0AF30A, 0x07E402E2, 0x1215EA0D);
	r5 = D(r5, s1_0_1, 0xF9E1FAF3, 0x02F408DA, 0x13FEDB0A, 0x0BEA07CD);
	r6 = D(r6, s1_0_1, 0xEE021B05, 0xF6ECFDF6, 0x020703F6, 0xFEF115DF);
	r7 = D(r7, s1_0_1, 0x13C204C7, 0xFD03E7A1, 0x10F4FAD2, 0x07EAF27F);
	r0 = D(r0, s1_0_2, 0xEB02ED17, 0xF7FB03E9, 0xFC0DE9D3, 0xFF0207DE);
	r1 = D(r1, s1_0_2, 0xF3F700E9, 0xF80200EF, 0xF4FC1704, 0x0300FC40);
	r2 = D(r2, s1_0_2, 0xD8F31D2C, 0xFFFA02F3, 0x06F9FAF5, 0x0F0808FD);
	r3 = D(r3, s1_0_2, 0xF8EA1F06, 0x03F6FDE0, 0x13FA08F1, 0x0E04F20B);
	r4 = D(r4, s1_0_2, 0xE80001F6, 0xF7F1F9F9, 0x0B18F516, 0x0B07E6DE);
	r5 = D(r5, s1_0_2, 0x0408050A, 0xFE12050D, 0xF6C91AF9, 0xFD031623);
	r6 = D(r6, s1_0_2, 0x1510F6F3, 0xFC0201F4, 0xFF0104F8, 0x05090CEF);
	r7 = D(r7, s1_0_2, 0x0C12F7CA, 0xCC818112, 0x0304E4F2, 0xEF391C14);
	r0 = D(r0, s1_1_0, 0xFB96E9F1, 0x00F1160D, 0xEFE502FE, 0x0DBC191B);
	r1 = D(r1, s1_1_0, 0x041AFE00, 0xEA0AD002, 0xF53AF9DD, 0x0106F41D);
	r2 = D(r2, s1_1_0, 0x12FEEEE4, 0x04FF0710, 0xF61D2714, 0xEC1107F9);
	r3 = D(r3, s1_1_0, 0x060A1613, 0xFEFC21F9, 0xFAF90EF6, 0x1008F413);
	r4 = D(r4, s1_1_0, 0xFCC9E5F3, 0xFAF0E4F3, 0x0B2AEC07, 0x02EDEFEE);
	r5 = D(r5, s1_1_0, 0xFDE6F8FD, 0xF8FBF907, 0xF8220DE0, 0x050AE30F);
	r6 = D(r6, s1_1_0, 0x0610FFFD, 0x01F90510, 0x050DF809, 0x06EFF6F1);
	r7 = D(r7, s1_1_0, 0x0B000C14, 0x10001119, 0x06F7E805, 0xEB08F8DD);
	r0 = D(r0, s1_1_1, 0xD13A050E, 0xFC00E627, 0x07EF1306, 0xF320F30F);
	r1 = D(r1, s1_1_1, 0x10E9110A, 0xBB0AEBF9, 0x10090CEE, 0x0DE8D515);
	r2 = D(r2, s1_1_1, 0x090B0BF5, 0xFF0C0F12, 0x021EFEED, 0x070DF3E3);
	r3 = D(r3, s1_1_1, 0xEF200521, 0xD7111E10, 0x153608FA, 0xF8DE0907);
	r4 = D(r4, s1_1_1, 0xF10F01D1, 0xDD27F501, 0x03ECEEF6, 0xF9D40908);
	r5 = D(r5, s1_1_1, 0x10F0F8FA, 0x04D60FF4, 0xDBFCFF24, 0x0A11F4FA);
	r6 = D(r6, s1_1_1, 0x08061115, 0x01061DFF, 0x03F40F02, 0x0EE6FCE2);
	r7 = D(r7, s1_1_1, 0x2DFDFA08, 0x08230EE2, 0x1B1BEAEA, 0x31DBEEEA);
	r0 = D(r0, s1_1_2, 0x12EDF908, 0x040407F9, 0x81F723EA, 0x0813F1E2);
	r1 = D(r1, s1_1_2, 0xF70517E8, 0xF5070108, 0xDCDF11ED, 0x06040817);
	r2 = D(r2, s1_1_2, 0xDAE702E7, 0xFA00FCF6, 0xCC36F6F6, 0x03FEF5F7);
	r3 = D(r3, s1_1_2, 0xD0EE14DC, 0xE111FBEF, 0xF9F90900, 0x2A1E0C08);
	r4 = D(r4, s1_1_2, 0xE4FDFAF9, 0xD7050BEE, 0x12F6FE03, 0x0508F5FB);
	r5 = D(r5, s1_1_2, 0x000A01FA, 0xF8F9ED15, 0xE6F7FFFF, 0xF4E30C17);
	r6 = D(r6, s1_1_2, 0x28F70915, 0xF30208FC, 0xF9FFFBFC, 0x0B0AFDD8);
	r7 = D(r7, s1_1_2, 0x50050EF3, 0x8112F6F7, 0x1910DA07, 0xE3FDFDEF);
	r0 = D(r0, s1_2_0, 0x18060712, 0x17EF0204, 0xDD4A0EFE, 0xFAEB0D04);
	r1 = D(r1, s1_2_0, 0xF81AE6FD, 0xEFECF4FA, 0x02EDF6FC, 0x08DF1109);
	r2 = D(r2, s1_2_0, 0x06F9F704, 0xFBFB0503, 0xFE1501F6, 0xE8FE100C);
	r3 = D(r3, s1_2_0, 0x0327F8D8, 0x01FE02FD, 0xFD0C040E, 0xEAE2FF01);
	r4 = D(r4, s1_2_0, 0x05F7E701, 0x0DD00B1A, 0x04FA0809, 0xFA11FFF3);
	r5 = D(r5, s1_2_0, 0xFD0C04FD, 0x05FEFE03, 0x010FF30A, 0xF9FEFF12);
	r6 = D(r6, s1_2_0, 0x09030DFD, 0xFBF6F90D, 0x02FA06F5, 0x051205F4);
	r7 = D(r7, s1_2_0, 0xED12FA00, 0xFEFF05F6, 0x1D090009, 0xF7FDF5F7);
	r0 = D(r0, s1_2_1, 0x08FCF003, 0x19180709, 0xFAE5E2FC, 0x04D9141F);
	r1 = D(r1, s1_2_1, 0x01FFFA06, 0xEAFC1AFB, 0xF6E00B0E, 0x03E2E200);
	r2 = D(r2, s1_2_1, 0xF21015EE, 0x0002040C, 0xCE18E2F4, 0xC913EEF0);
	r3 = D(r3, s1_2_1, 0xD80FF2FA, 0x10F607FB, 0xF816FDF6, 0xF4161602);
	r4 = D(r4, s1_2_1, 0xE9FAF109, 0x090AF006, 0xF51AFFFB, 0xF5071600);
	r5 = D(r5, s1_2_1, 0xED1902F3, 0xF810F400, 0xF11907E9, 0x00F0ED0B);
	r6 = D(r6, s1_2_1, 0x18E50512, 0x05FDFA11, 0x10070CFA, 0x041805F9);
	r7 = D(r7, s1_2_1, 0xF801FA08, 0xFDFB0905, 0x2C04F206, 0xEE102309);
	r0 = D(r0, s1_2_2, 0x02050E0B, 0xFDFBF40C, 0x02F51A1A, 0x1DFC0002);
	r1 = D(r1, s1_2_2, 0xF00912F8, 0xF7F41208, 0x1519F7E8, 0x0BFB0EFD);
	r2 = D(r2, s1_2_2, 0xCE08F0F5, 0xFF06FAFE, 0xDFEE2607, 0xB7F813FA);
	r3 = D(r3, s1_2_2, 0xDFE2EC09, 0x0A18FBF4, 0x04F80AFD, 0xC1EF1702);
	r4 = D(r4, s1_2_2, 0xF1110AFB, 0xE60806FE, 0xEEEA0EFC, 0xF1FAF9FD);
	r5 = D(r5, s1_2_2, 0xFC010BFD, 0xE6010304, 0xD5FB02F3, 0x0AF7FD09);
	r6 = D(r6, s1_2_2, 0x04FFF513, 0xFC0300FA, 0xFEFC07FF, 0xFB0BF2F9);
	r7 = D(r7, s1_2_2, 0x1A0B10FB, 0xF30A0C10, 0x1A00EA04, 0xE7E920F6);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.572e-03, -2.648e-04, -1.971e-02, -1.114e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(8.536e-03, -1.865e-02, -2.363e-02, -2.359e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.815e-02, 2.818e-03, 1.480e-03, -1.206e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-5.258e-02, -1.504e-03, -5.899e-03, -1.523e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-6.656e-03, -2.928e-02, -6.666e-03, -2.217e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-5.075e-03, -7.197e-03, -8.094e-03, -8.728e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.843e-02, 1.382e-02, -2.168e-02, -8.540e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.744e-02, -4.661e-02, 1.920e-02, -2.345e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_vk] -conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF806F5FE, 0xF4FFFD02, 0xF905F702, 0xF40C00F7);
	r1 = D(r1, s0_0_0, 0xF803EB05, 0x01060405, 0x02030404, 0x0000FCFA);
	r2 = D(r2, s0_0_0, 0xF2FF0304, 0xFE0BFF00, 0x010205F7, 0x18FBF5F0);
	r3 = D(r3, s0_0_0, 0x2507F0DA, 0x0C001FF7, 0xFAA7E9F6, 0xE11E18F5);
	r4 = D(r4, s0_0_0, 0xF8EE000D, 0x08FCFAFB, 0xEEF0010A, 0x0305FA02);
	r5 = D(r5, s0_0_0, 0x00FDFF00, 0xF518F2FE, 0xFFFBEC02, 0xC323F7E7);
	r6 = D(r6, s0_0_0, 0x0B07FFE6, 0x0BE30C00, 0x0102FE00, 0x0819ECE1);
	r7 = D(r7, s0_0_0, 0xFDFD0702, 0xFEFEFB07, 0x19CEF9E7, 0xFEFA0100);
	r0 = D(r0, s0_0_1, 0x0CFFFBFA, 0x010411FD, 0x02F31701, 0xEBF902FD);
	r1 = D(r1, s0_0_1, 0x01EF0101, 0xFA1FFDFB, 0x1C02EFFD, 0x0313F1FC);
	r2 = D(r2, s0_0_1, 0xE7F81213, 0xF6F70C04, 0x09E914FB, 0x1E0102E7);
	r3 = D(r3, s0_0_1, 0x1113FDE3, 0x0CF20AF9, 0xE80B0B16, 0x060EDF09);
	r4 = D(r4, s0_0_1, 0xEFE01612, 0x0D02F0F2, 0xE301030E, 0x01030DF6);
	r5 = D(r5, s0_0_1, 0xFFFBFF02, 0xE304FCFE, 0x22F2FAF7, 0xD6F714F6);
	r6 = D(r6, s0_0_1, 0x1D15EEED, 0x07FAB905, 0xFEF109FE, 0xEAF71C00);
	r7 = D(r7, s0_0_1, 0xEC0E09FE, 0x0100F801, 0x34C7FCF4, 0xFD07FE02);
	r0 = D(r0, s0_0_2, 0x0D04DBFB, 0xF6FC0BF3, 0xFB01FA02, 0x00F707FC);
	r1 = D(r1, s0_0_2, 0xF2F2090F, 0x04FB11FC, 0x15FA0402, 0xF705FAF6);
	r2 = D(r2, s0_0_2, 0xF7FCF909, 0xFCE412FE, 0x09F0F414, 0x01FD01ED);
	r3 = D(r3, s0_0_2, 0xF000FB1D, 0x1B0AF507, 0x471FAD18, 0xE524D41F);
	r4 = D(r4, s0_0_2, 0xFDDDEA11, 0xF608F805, 0xEF00E907, 0xFE0107FE);
	r5 = D(r5, s0_0_2, 0xFBFFFA08, 0x05000108, 0xF60510FB, 0x100EEFF5);
	r6 = D(r6, s0_0_2, 0x0023F8E6, 0x0D1A0DF8, 0xFCF8030B, 0xC325FE1E);
	r7 = D(r7, s0_0_2, 0xFD120400, 0xEE1DF506, 0x1FF0FAF8, 0x00060BFE);
	r0 = D(r0, s0_1_0, 0xF21D1006, 0x06FF07FB, 0xFD0204FE, 0xFEFF06FD);
	r1 = D(r1, s0_1_0, 0xF501EF0C, 0x03ED0802, 0xFEECFE0D, 0x07F7F102);
	r2 = D(r2, s0_1_0, 0x00FE0701, 0xFC01EB08, 0x07E8FAF2, 0x0207F8F2);
	r3 = D(r3, s0_1_0, 0xF02A0106, 0x02EC10EF, 0xED3F0FF3, 0x0F34FAF2);
	r4 = D(r4, s0_1_0, 0x080DF809, 0xF9070302, 0x1411080B, 0x05F6F513);
	r5 = D(r5, s0_1_0, 0x010404FD, 0xFE26F00B, 0x0422F703, 0x1418FBFE);
	r6 = D(r6, s0_1_0, 0x071AF7F5, 0xFF0202F2, 0x0AFC0301, 0x06430EFB);
	r7 = D(r7, s0_1_0, 0x1100EEF6, 0xF8FBFC11, 0x0618FEF6, 0x010102FC);
	r0 = D(r0, s0_1_1, 0xEC1BFA23, 0x051BFC01, 0x030E04FD, 0xD515F20B);
	r1 = D(r1, s0_1_1, 0x0EFD07F7, 0x0D0DF101, 0x14E5F40C, 0xE1F1F0FE);
	r2 = D(r2, s0_1_1, 0xFE2808F9, 0xF1F90909, 0xF50E1FFD, 0x11E408E1);
	r3 = D(r3, s0_1_1, 0xF3110AE8, 0x20BCEFE1, 0x12CD05EA, 0xEF450810);
	r4 = D(r4, s0_1_1, 0xE917F606, 0xE4F90A0D, 0x00350E1E, 0x16FBFEEF);
	r5 = D(r5, s0_1_1, 0xF8FFF10A, 0x043CEEF8, 0xF5D60C15, 0xEFFEECE9);
	r6 = D(r6, s0_1_1, 0x0B18E20C, 0x04210214, 0x0EE403FF, 0xF903C8D7);
	r7 = D(r7, s0_1_1, 0xF9F806F5, 0xE7DCF419, 0x1A180DE8, 0x0503EA04);
	r0 = D(r0, s0_1_2, 0x01F1F616, 0x0B1C0BD8, 0xF602FF0B, 0xF70CFFF3);
	r1 = D(r1, s0_1_2, 0xF1FA0000, 0x0F0A0800, 0x28D20909, 0x26E1FC0B);
	r2 = D(r2, s0_1_2, 0xC713FE0F, 0xEA130AD4, 0xDBDB0216, 0x2CB8F2CE);
	r3 = D(r3, s0_1_2, 0x0C2AFB0B, 0xDFFDF414, 0xB6B8F1EC, 0xB381092E);
	r4 = D(r4, s0_1_2, 0xF011E70A, 0x0BF6FCF8, 0xFA110C1D, 0xEAFB0A07);
	r5 = D(r5, s0_1_2, 0x03040201, 0xF5491DFA, 0x070807F9, 0xD73200CD);
	r6 = D(r6, s0_1_2, 0xFFDA01F2, 0x17E3FA04, 0xFCF70607, 0xD3130F14);
	r7 = D(r7, s0_1_2, 0x0E22FFF5, 0xFEF41012, 0xFB11F5E9, 0x0FEF0AF5);
	r0 = D(r0, s0_2_0, 0x0BD005F8, 0x06E502FD, 0x00FA04FD, 0x0304F800);
	r1 = D(r1, s0_2_0, 0xFDF0FD0D, 0xFBFD06FD, 0x07FDFB03, 0x01FDFD00);
	r2 = D(r2, s0_2_0, 0x01FCFEFA, 0xFEFEFA04, 0x001002FD, 0xFF0305F9);
	r3 = D(r3, s0_2_0, 0xF80FEB07, 0x05FA01F1, 0xFF1523CD, 0x0834FDFE);
	r4 = D(r4, s0_2_0, 0x03EF0510, 0xFAFE0404, 0xFD010806, 0xFDF30009);
	r5 = D(r5, s0_2_0, 0x0001FE00, 0x0233EE09, 0xF51709F9, 0x0D0117F8);
	r6 = D(r6, s0_2_0, 0x06E5FBFA, 0x0702FEF0, 0x01FBF7FA, 0xEDF81B06);
	r7 = D(r7, s0_2_0, 0x01F8FAFF, 0xF2FF0108, 0xFA13F208, 0xFD04FF02);
	r0 = D(r0, s0_2_1, 0x050D0802, 0x02C424E8, 0xFEFAFD08, 0xF2ED0CFF);
	r1 = D(r1, s0_2_1, 0xFF130401, 0x03EB0EF9, 0x06E5F6EF, 0xFC0EF7EC);
	r2 = D(r2, s0_2_1, 0xFE070001, 0xF011F1FB, 0xF5FB06EF, 0xFB08FFE0);
	r3 = D(r3, s0_2_1, 0x01F00C16, 0x0D81E0C1, 0x28AFCF36, 0xF625E506);
	r4 = D(r4, s0_2_1, 0x061AE60D, 0x020A020A, 0xFEFE0409, 0x04FD0100);
	r5 = D(r5, s0_2_1, 0x0301FDFD, 0xE3811D10, 0x08EAF018, 0x0240FD13);
	r6 = D(r6, s0_2_1, 0xF108F6FE, 0x071A02F3, 0xF4FFFEFC, 0xF91CDF14);
	r7 = D(r7, s0_2_1, 0xF813F1FF, 0xFC140005, 0x1B09FC05, 0x03FF02FD);
	r0 = D(r0, s0_2_2, 0x0AF2FE0B, 0x1781F906, 0x01F3FFFB, 0x0FF30A03);
	r1 = D(r1, s0_2_2, 0x0519F9F0, 0x0408FF0E, 0xFFFBFAFB, 0xFAF5FBF3);
	r2 = D(r2, s0_2_2, 0xFD02FE07, 0x0A1101F2, 0x02EBF405, 0x15F001CD);
	r3 = D(r3, s0_2_2, 0xFB01F325, 0xF7F00CCF, 0xEDC752FB, 0xCD0402F3);
	r4 = D(r4, s0_2_2, 0xFB01F20B, 0x08F80001, 0xEFFB091D, 0xF90005F7);
	r5 = D(r5, s0_2_2, 0xF10500FC, 0xF2090109, 0x261FFFEB, 0xF51806ED);
	r6 = D(r6, s0_2_2, 0x01EB10FB, 0x1107F5F3, 0xEC0FFD0E, 0xEAF62D16);
	r7 = D(r7, s0_2_2, 0xF700FA07, 0x010D05FF, 0xF610F2FC, 0x08FC06FB);
	r0 = D(r0, s1_0_0, 0x050203FB, 0xFEFDF908, 0x04F6FFFF, 0x06EDFC08);
	r1 = D(r1, s1_0_0, 0x05EA05FC, 0xF80408F6, 0x05E8F40F, 0x01F4051A);
	r2 = D(r2, s1_0_0, 0x16FCF4FA, 0x00EEFF19, 0x05FA04FC, 0xF0F8020B);
	r3 = D(r3, s1_0_0, 0xEFFA02F5, 0xFD0DFFE1, 0x10E6F1E3, 0xFE0EFE0A);
	r4 = D(r4, s1_0_0, 0x03E3F418, 0x0003FD03, 0x08F60200, 0x08F8FD03);
	r5 = D(r5, s1_0_0, 0x000102FA, 0xFBFAF7FD, 0xEDEC1103, 0x11E40606);
	r6 = D(r6, s1_0_0, 0x03400202, 0xE12C1703, 0x061809F3, 0x142C14FF);
	r7 = D(r7, s1_0_0, 0x0103F80C, 0xF8F80004, 0x030003ED, 0xFC040700);
	r0 = D(r0, s1_0_1, 0x010B03FC, 0x0C11FD0A, 0x0209FEFF, 0xFB040B03);
	r1 = D(r1, s1_0_1, 0xFB2E04FD, 0x00EC0A0C, 0x0BD1200C, 0x14E60709);
	r2 = D(r2, s1_0_1, 0xF7270802, 0x0E130600, 0xF815FEF6, 0xF2DC0204);
	r3 = D(r3, s1_0_1, 0xC9F0F9C3, 0x00F118F4, 0xF5E21FFA, 0xFF091410);
	r4 = D(r4, s1_0_1, 0xF0FD1416, 0xEFED00F9, 0xE6E80D09, 0x050C0302);
	r5 = D(r5, s1_0_1, 0xF802FCFE, 0x012100FA, 0xF108000C, 0xF909FA13);
	r6 = D(r6, s1_0_1, 0x0CF0F6F2, 0x04B4D2F6, 0x081202FB, 0x03BBDA42);
	r7 = D(r7, s1_0_1, 0xFF14FDED, 0xE5E1FCFF, 0x14F4DDC1, 0x0F00FBFA);
	r0 = D(r0, s1_0_2, 0xFCF2E3FA, 0x0C09F514, 0x03FEE7FC, 0x0916FBFF);
	r1 = D(r1, s1_0_2, 0xEF11E8E7, 0xF6050317, 0xF5EA0DF3, 0x01EA22FF);
	r2 = D(r2, s1_0_2, 0x1D12BFFF, 0x210EFDDB, 0x1A03F911, 0x02DF36FB);
	r3 = D(r3, s1_0_2, 0xE8EDF8E9, 0x170206FB, 0x42C81204, 0x1A03A7F1);
	r4 = D(r4, s1_0_2, 0xF8F4FC03, 0x01FD28FC, 0xFBFFF00B, 0xF3FBEEF9);
	r5 = D(r5, s1_0_2, 0xFCFE0304, 0x0506F3E9, 0xDCF52105, 0x0E37D1F4);
	r6 = D(r6, s1_0_2, 0xF9121E02, 0xE508F0EB, 0x00100604, 0x1D04340B);
	r7 = D(r7, s1_0_2, 0xF50BF7FA, 0x08FE03FC, 0xF5F7E0EF, 0x06030405);
	r0 = D(r0, s1_1_0, 0x13FAFF07, 0xF40318F7, 0xFE000607, 0xF00609FF);
	r1 = D(r1, s1_1_0, 0xEC050607, 0x0AF3F7EC, 0xFD1B07FC, 0xED111902);
	r2 = D(r2, s1_1_0, 0xFF02EFFC, 0xEFFE080F, 0xF70F0610, 0xFBF90606);
	r3 = D(r3, s1_1_0, 0x03F6F310, 0x16D7D000, 0x3DB6EEEC, 0xF11512F4);
	r4 = D(r4, s1_1_0, 0xE6F4F71C, 0x000705F8, 0x0A02FF05, 0xF21815F8);
	r5 = D(r5, s1_1_0, 0x0601F900, 0xFBD51000, 0xCBE1090B, 0xDDFF0610);
	r6 = D(r6, s1_1_0, 0x0515FEFD, 0xFAEDFE09, 0x080402FD, 0xE4B20C10);
	r7 = D(r7, s1_1_0, 0xEC040406, 0x051200F6, 0xFED10A12, 0xFD0901FF);
	r0 = D(r0, s1_1_1, 0x06EE1C07, 0x18CB0FE8, 0x07F5F70A, 0x22F7EB0E);
	r1 = D(r1, s1_1_1, 0x23DFF4D7, 0xECF80FFE, 0x191FF2D4, 0x1F07D7FB);
	r2 = D(r2, s1_1_1, 0xF8EEFF07, 0x13EAFC00, 0x15CAF5F6, 0xE8360B04);
	r3 = D(r3, s1_1_1, 0x9520EAF1, 0xDDFF2FF6, 0xF50841F7, 0x12F3FCEA);
	r4 = D(r4, s1_1_1, 0xF9EA040A, 0xF521080D, 0x03F1D5FE, 0x00120F04);
	r5 = D(r5, s1_1_1, 0xFC0E0005, 0x0DF0EA22, 0xE1DDD008, 0xFD2403E7);
	r6 = D(r6, s1_1_1, 0xDA20F813, 0x14D3100C, 0x0A030209, 0x181209FA);
	r7 = D(r7, s1_1_1, 0x2202E0ED, 0x0519DD09, 0x0FE5EE10, 0x0A000809);
	r0 = D(r0, s1_1_2, 0x00F98125, 0xF2F34107, 0xF9041002, 0xEA07C216);
	r1 = D(r1, s1_1_2, 0xE6F636E1, 0xEA03D505, 0xF2F9FFD3, 0x11FEC8FB);
	r2 = D(r2, s1_1_2, 0xFAF509FC, 0x10031EE4, 0x09EC2025, 0x0AFC2DF9);
	r3 = D(r3, s1_1_2, 0x1202FBF6, 0x15F9FDFC, 0xE7810B46, 0x101501FA);
	r4 = D(r4, s1_1_2, 0x01F9E5FE, 0xF80BB6F7, 0xE30837F9, 0xFEFC0DF8);
	r5 = D(r5, s1_1_2, 0x0902F2F3, 0x0109E7EF, 0xE4FB810F, 0x0E0CDCFA);
	r6 = D(r6, s1_1_2, 0x090FAAFE, 0x060E0612, 0x13062809, 0x06FFC116);
	r7 = D(r7, s1_1_2, 0xDE0E1304, 0xF808EEFC, 0x11E60BF6, 0xFA080802);
	r0 = D(r0, s1_2_0, 0x0B09F9F6, 0x04050EF3, 0x05F90305, 0xFDFF08FA);
	r1 = D(r1, s1_2_0, 0x0EFF14FB, 0xF708FFF9, 0x08D70B0C, 0xFEF30A0D);
	r2 = D(r2, s1_2_0, 0xFAFBFD04, 0xFCF2090C, 0xF6EE0408, 0x01040D05);
	r3 = D(r3, s1_2_0, 0x020608EC, 0xECF1EDFC, 0x20E7F2EF, 0xF10E1904);
	r4 = D(r4, s1_2_0, 0xF0FB1408, 0x030405FB, 0xF8FFFFFC, 0x01F90A07);
	r5 = D(r5, s1_2_0, 0xFC00FBFB, 0x1D1B01FD, 0x00FBF800, 0xEC2117DF);
	r6 = D(r6, s1_2_0, 0xE70A11F2, 0xFB04F2F4, 0xF40CFB04, 0x1AD5F5FF);
	r7 = D(r7, s1_2_0, 0xF400FDFA, 0xFB000F00, 0x00FA0004, 0x01030504);
	r0 = D(r0, s1_2_1, 0x242A0AD3, 0x0C1205D7, 0x02FF0007, 0xFE0BFFF4);
	r1 = D(r1, s1_2_1, 0xF1F2FDF0, 0x000D05FF, 0x10E6E803, 0x0AF7F20C);
	r2 = D(r2, s1_2_1, 0xF008FEF8, 0x05FDED05, 0x1B10F0FB, 0x0CFE0406);
	r3 = D(r3, s1_2_1, 0xEE17EFF0, 0x06F30A09, 0xCD10E113, 0x2EF4F900);
	r4 = D(r4, s1_2_1, 0xEFE60705, 0x08020301, 0xF014EEFD, 0xF6FA060C);
	r5 = D(r5, s1_2_1, 0xF7E7010E, 0x17F4F4FA, 0xFEF20906, 0x1AF81D01);
	r6 = D(r6, s1_2_1, 0x0EFD00F1, 0xF9FD07F6, 0x11F1F608, 0x16F30B01);
	r7 = D(r7, s1_2_1, 0xF50603FB, 0xEAFA0F02, 0x06FC0306, 0xFD090B04);
	r0 = D(r0, s1_2_2, 0x011217F4, 0x2E112AF8, 0x010400FD, 0x18F90BF6);
	r1 = D(r1, s1_2_2, 0xFCF41C06, 0x01FA0404, 0xEAFEFF1D, 0x0304F319);
	r2 = D(r2, s1_2_2, 0xEE020AFA, 0xF10403FB, 0x09FC05FF, 0x0008EB15);
	r3 = D(r3, s1_2_2, 0xF8FA1BFE, 0x01F91A01, 0x2819F300, 0x0BFEE0F3);
	r4 = D(r4, s1_2_2, 0xDC0FF009, 0x0300FB01, 0x0EFBF700, 0x09FF0705);
	r5 = D(r5, s1_2_2, 0x01FBF101, 0xECF981ED, 0xDB09F0FF, 0x000401FD);
	r6 = D(r6, s1_2_2, 0xF216E719, 0xEDF21202, 0xFC06FC0C, 0x14F6F917);
	r7 = D(r7, s1_2_2, 0x02FD07FE, 0x06FFFDFF, 0x08FEFBF7, 0x020102F7);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08080603, 0x0D040006, 0xFA07F9FC, 0xFFF70002);
	r1 = D(r1, s0_0_0, 0x11180A0C, 0x04FF0503, 0x131B0405, 0x0305FCFE);
	r2 = D(r2, s0_0_0, 0xE204EFFE, 0xEFF00903, 0x000508FC, 0x12010CFF);
	r3 = D(r3, s0_0_0, 0xC70CF721, 0xFAEB11FD, 0x0D16DEEF, 0xFBD801FB);
	r4 = D(r4, s0_0_0, 0xF8EEFA06, 0x1AF4FB04, 0x0203F6FD, 0xFF0109FF);
	r5 = D(r5, s0_0_0, 0xF5FC0003, 0xE002F5F9, 0xC9F81606, 0x00C211FA);
	r6 = D(r6, s0_0_0, 0xFF011409, 0x1009FF01, 0xFCED0104, 0x18E900EE);
	r7 = D(r7, s0_0_0, 0x09F9FFFC, 0xF201F805, 0xC4F01006, 0xF9FD03FD);
	r0 = D(r0, s0_0_1, 0xF2EFF918, 0x0E02FE03, 0xF6F408FD, 0xF0EC1508);
	r1 = D(r1, s0_0_1, 0x08090710, 0x091308FA, 0xFF1A060D, 0x18040404);
	r2 = D(r2, s0_0_1, 0xE4F01C02, 0xFEDBF713, 0xF3F9FEFE, 0x5016EEE9);
	r3 = D(r3, s0_0_1, 0xC534D5D1, 0xFDFEF016, 0x1BD6180B, 0x041BF42D);
	r4 = D(r4, s0_0_1, 0xFDDAED12, 0x0518FC00, 0xACF60400, 0x06F01009);
	r5 = D(r5, s0_0_1, 0xF3060101, 0xFFEA1012, 0x1D13F8F7, 0xFD05271A);
	r6 = D(r6, s0_0_1, 0x2908E2E1, 0x1717DC08, 0xE602FDFB, 0xABE5AFF7);
	r7 = D(r7, s0_0_1, 0x2D1005FE, 0x1316EAFB, 0x92F30509, 0x0303FB01);
	r0 = D(r0, s0_0_2, 0xFF21EB17, 0x01030E06, 0xFEFC0100, 0x05F3FFFC);
	r1 = D(r1, s0_0_2, 0xFBF2FF01, 0xFBF603FD, 0xF605F8FF, 0x0201FAFB);
	r2 = D(r2, s0_0_2, 0xFD0D0B06, 0x1005FBFB, 0xF2F6FD0A, 0x2A0AE700);
	r3 = D(r3, s0_0_2, 0xF402EDF6, 0x10200919, 0x12E7E937, 0xC5121201);
	r4 = D(r4, s0_0_2, 0x02F2E500, 0x01F90805, 0xFCF20F01, 0x03FA00F6);
	r5 = D(r5, s0_0_2, 0xFC020601, 0x020FF909, 0x03F900F0, 0x18E6081D);
	r6 = D(r6, s0_0_2, 0x21EC2AFD, 0xEFF506E5, 0xE6F21104, 0xD5061C34);
	r7 = D(r7, s0_0_2, 0x0D0F0707, 0xFBF60008, 0x0B20FCF0, 0xFB0004FA);
	r0 = D(r0, s0_1_0, 0x0F12F7F4, 0x0D030AFA, 0x06F5EA08, 0x0FF814FD);
	r1 = D(r1, s0_1_0, 0x0C07F9F7, 0x05F60A01, 0x122F0AED, 0x23140802);
	r2 = D(r2, s0_1_0, 0xF7F3F701, 0x1A0809FC, 0x1202FAF7, 0x2BFB0BF9);
	r3 = D(r3, s0_1_0, 0x0A1D1612, 0xFCE9F3F4, 0xEEDD0716, 0x10EEFAF0);
	r4 = D(r4, s0_1_0, 0x04000CFA, 0x0C0811FE, 0xEAF305F9, 0x04ED1C0B);
	r5 = D(r5, s0_1_0, 0xF706F3FB, 0xD9FC1029, 0xEDF50E29, 0x1AF502ED);
	r6 = D(r6, s0_1_0, 0x1BD6E30B, 0x02E5F600, 0xE5E304FD, 0x0581072A);
	r7 = D(r7, s0_1_0, 0xFD0D0201, 0x06FEFFFE, 0x12100308, 0x1104FFFE);
	r0 = D(r0, s0_1_1, 0x140F16FF, 0x0023EB10, 0x180845F5, 0xF8E70718);
	r1 = D(r1, s0_1_1, 0xF2DBFCFC, 0x05E92606, 0x0CE1DFF0, 0xF4EDF814);
	r2 = D(r2, s0_1_1, 0xE412F0F1, 0x04E8CF12, 0xF3F3E60B, 0x27C5E02B);
	r3 = D(r3, s0_1_1, 0x020D2615, 0xEA29CDFF, 0x16DC200F, 0xBAF61BFE);
	r4 = D(r4, s0_1_1, 0x0AE3FAF9, 0x15FE3E06, 0xF3EA27F2, 0xFC03D4F2);
	r5 = D(r5, s0_1_1, 0x0C0201FB, 0x053003EA, 0xFBE61009, 0xEFF6D4E2);
	r6 = D(r6, s0_1_1, 0x27F01D15, 0xE81B2C13, 0x20D100FD, 0xDAC80DE2);
	r7 = D(r7, s0_1_1, 0x260A09F7, 0x07CA20FE, 0x144CE0F3, 0xF8FAEB0B);
	r0 = D(r0, s0_1_2, 0x030C0E15, 0x06FE02F9, 0xFD050C0A, 0xFF01FBFC);
	r1 = D(r1, s0_1_2, 0xF90F11FF, 0x11FAF2E8, 0x1B08F503, 0x080FF70A);
	r2 = D(r2, s0_1_2, 0xE50F1BF8, 0xF7F62508, 0xF5061609, 0x18E31707);
	r3 = D(r3, s0_1_2, 0xF60100FD, 0xE521FF15, 0xD9FDAA08, 0xF7D50219);
	r4 = D(r4, s0_1_2, 0xE3F21523, 0x02040606, 0xE1D8F002, 0x0CF40B00);
	r5 = D(r5, s0_1_2, 0xFC05FFFB, 0xF01CEAF7, 0xE0220CF1, 0xF9E14CF4);
	r6 = D(r6, s0_1_2, 0xF6F61301, 0x15EA1AE7, 0xF7EEF6FA, 0x001B0107);
	r7 = D(r7, s0_1_2, 0x20F3FC08, 0xF7E3FDFE, 0x100D0BF3, 0x050D03F7);
	r0 = D(r0, s0_2_0, 0x0F1201E9, 0x0C14FA0A, 0x00FE0304, 0x03F3FAFD);
	r1 = D(r1, s0_2_0, 0xFDFB0A10, 0xF70709FE, 0xF6E60205, 0xF1F1FC03);
	r2 = D(r2, s0_2_0, 0xFF070C0A, 0xFFEA0605, 0x010503FB, 0x08F0E5F6);
	r3 = D(r3, s0_2_0, 0xFA1CFBF0, 0xFF000106, 0x31FC22E4, 0xE7E110FB);
	r4 = D(r4, s0_2_0, 0xF9EB01FD, 0x0CFFFCF7, 0xEFEBEF03, 0xFF01070A);
	r5 = D(r5, s0_2_0, 0x03FC0102, 0xCF25F505, 0xEDD2011F, 0x3FCF12E7);
	r6 = D(r6, s0_2_0, 0x06D60AF4, 0x0E0203FD, 0xFFF80209, 0xF1F9FF03);
	r7 = D(r7, s0_2_0, 0xFEF80306, 0xF2FCFD0C, 0xFB09FA01, 0x02FE01FE);
	r0 = D(r0, s0_2_1, 0x24E705D8, 0xE8D9E9F4, 0xFD07F5FD, 0x1BD703EE);
	r1 = D(r1, s0_2_1, 0xFB3100F0, 0x05D51000, 0xE31D0F0B, 0xF2110B03);
	r2 = D(r2, s0_2_1, 0xFF0D06FD, 0x01280CFB, 0x0A0EF6EA, 0xF9120EF9);
	r3 = D(r3, s0_2_1, 0x08CC0207, 0xFD36F3FB, 0x4AF007DA, 0xE901F6EB);
	r4 = D(r4, s0_2_1, 0xFB0B0EF4, 0x05FDF700, 0x12F70305, 0x03ECF4F9);
	r5 = D(r5, s0_2_1, 0xF70C10FB, 0x03FA1600, 0x050B0704, 0x0EFA0A04);
	r6 = D(r6, s0_2_1, 0xF2FB0612, 0x0AF5EEF8, 0xF7F9090D, 0xF9E120FB);
	r7 = D(r7, s0_2_1, 0x02010BF8, 0xFA0507FF, 0x0300FE09, 0x00FC1A01);
	r0 = D(r0, s0_2_2, 0x0DF303F6, 0x10CF0DFD, 0x030AFBFF, 0x0FDF06F9);
	r1 = D(r1, s0_2_2, 0x0A16FF08, 0xF8F00EFA, 0xF61A0205, 0x011F0903);
	r2 = D(r2, s0_2_2, 0xFDF3F102, 0x04FC0204, 0x08FC0E05, 0x131303FA);
	r3 = D(r3, s0_2_2, 0xFFFB1011, 0xF4F306F6, 0xEAD61BFB, 0xFD05F017);
	r4 = D(r4, s0_2_2, 0xFB0EFF0A, 0x0DFC06FB, 0xF7EFF201, 0x01070502);
	r5 = D(r5, s0_2_2, 0x010BFFFC, 0xFA05D9F8, 0x11CEFBF5, 0x16A9FFF7);
	r6 = D(r6, s0_2_2, 0x0FF70EF6, 0x010208F9, 0x03E607FF, 0x0031F0EF);
	r7 = D(r7, s0_2_2, 0xF611070A, 0x080EFDFA, 0x070908FC, 0xFA050500);
	r0 = D(r0, s1_0_0, 0xFEF51205, 0xF5FCFDFE, 0x02040A04, 0x11F60B09);
	r1 = D(r1, s1_0_0, 0x11F10D12, 0x070BFCEC, 0x1BF80205, 0x0BF7FD16);
	r2 = D(r2, s1_0_0, 0x0FF808E5, 0x0FFDFD0F, 0xFAFC041B, 0xE7DBED28);
	r3 = D(r3, s1_0_0, 0xF0FFEECA, 0xF1F3F3E3, 0x010805F4, 0x28EA0C3F);
	r4 = D(r4, s1_0_0, 0x0608FFF8, 0xF802F607, 0x19F710F7, 0x05F7060A);
	r5 = D(r5, s1_0_0, 0xFE0104FF, 0x01FEFEF8, 0x22051024, 0xFEEE1B42);
	r6 = D(r6, s1_0_0, 0xF9F8F224, 0x16D5ED28, 0xF406F1F8, 0xBAFDFBBE);
	r7 = D(r7, s1_0_0, 0xF7FFFEF9, 0x090A0EFD, 0xFFF6E828, 0xFEF8FF02);
	r0 = D(r0, s1_0_1, 0xEC0DF8F3, 0xF600F0F4, 0xEE02FC02, 0x1C0AFBF5);
	r1 = D(r1, s1_0_1, 0xD8F7F5E4, 0x10FFFB04, 0x0B15F9F7, 0x180DF912);
	r2 = D(r2, s1_0_1, 0xF3050906, 0xECFEF601, 0x03FD06FD, 0x00F8D2F2);
	r3 = D(r3, s1_0_1, 0x19BB15FA, 0xFC0D081D, 0x30FB0D47, 0x1BE405F5);
	r4 = D(r4, s1_0_1, 0x0416000C, 0xFAF8F0F8, 0x02000903, 0xFF00F9F6);
	r5 = D(r5, s1_0_1, 0x0AF60607, 0x0E08F9FE, 0x0CFAEDFF, 0x1100F8F8);
	r6 = D(r6, s1_0_1, 0x1BEAE607, 0x250B1C0A, 0xF7F4030B, 0xD2F50019);
	r7 = D(r7, s1_0_1, 0x0402FAE6, 0x0D0803E7, 0xF10602F4, 0x040106FF);
	r0 = D(r0, s1_0_2, 0x28F3FEFD, 0xFB04EDF8, 0x02020406, 0x01FC00F6);
	r1 = D(r1, s1_0_2, 0xF8F9FFFF, 0xF501EFF7, 0x08050AEE, 0x00FF01FE);
	r2 = D(r2, s1_0_2, 0x090608F1, 0xF5FE05F4, 0x0706FDF9, 0xE8FB0D14);
	r3 = D(r3, s1_0_2, 0xFCFF12F6, 0x110302F0, 0x2BF8F61C, 0x0AFC1812);
	r4 = D(r4, s1_0_2, 0x0A0F02F2, 0x02FE00FB, 0x040F0D01, 0x06FD05F7);
	r5 = D(r5, s1_0_2, 0x03FF06FD, 0x14FB0AFD, 0xF8F7F9ED, 0x0A0BF112);
	r6 = D(r6, s1_0_2, 0x010401F2, 0xF20A0100, 0xFE070AF2, 0x06F200CD);
	r7 = D(r7, s1_0_2, 0xF70303F8, 0xFE06FBF3, 0x01000815, 0xFEF9F902);
	r0 = D(r0, s1_1_0, 0x0FEC23F8, 0xE0FEF803, 0x0A13000D, 0x0BF3F706);
	r1 = D(r1, s1_1_0, 0x00FC0A1F, 0xFE1D02DA, 0x13E8F610, 0x04DBFD16);
	r2 = D(r2, s1_1_0, 0x0010EDFE, 0x0EF8021D, 0xF7E5F01A, 0x07D9FB2C);
	r3 = D(r3, s1_1_0, 0x160C06EE, 0xE0E3FA1A, 0x1242269F, 0x18CE0106);
	r4 = D(r4, s1_1_0, 0x0FF3F50C, 0xFCEF0AF4, 0x06FBFD02, 0xF70AF50A);
	r5 = D(r5, s1_1_0, 0x07FC0504, 0x121311C0, 0x1F0212FA, 0x070A0BC5);
	r6 = D(r6, s1_1_0, 0x08F61B20, 0x09FBF9F0, 0xEFF3F714, 0xDFEC14EE);
	r7 = D(r7, s1_1_0, 0xF9F50814, 0x09FE20EE, 0x09E5F90E, 0xFB01FDFA);
	r0 = D(r0, s1_1_1, 0x1B1C08F3, 0xF9FFFD00, 0x0008030E, 0x1A1EEBE4);
	r1 = D(r1, s1_1_1, 0xEACF14B3, 0xFE0FECFA, 0xF0F801E7, 0xFBFFE4E2);
	r2 = D(r2, s1_1_1, 0xF70DFF01, 0xE22101F1, 0x011B13D6, 0x0716F1E5);
	r3 = D(r3, s1_1_1, 0x1DDFF6B3, 0xEEF51324, 0xC1C5C3E2, 0x0B1B38E5);
	r4 = D(r4, s1_1_1, 0xFC0E1BE1, 0x0F1601F1, 0xF21FF602, 0xF3F2F021);
	r5 = D(r5, s1_1_1, 0x0CFC1002, 0xEA020D01, 0x11EAE202, 0xFBEAD8D3);
	r6 = D(r6, s1_1_1, 0x1811F8F5, 0x0AFCF2F9, 0xEE000BD9, 0xE611354C);
	r7 = D(r7, s1_1_1, 0xFD08F7E1, 0xFAF4F7FB, 0x06F50B0D, 0xF305FE01);
	r0 = D(r0, s1_1_2, 0x071BE0E6, 0x0008ED02, 0xFC0202FC, 0xFBFA060C);
	r1 = D(r1, s1_1_2, 0xFEF413F0, 0xFCFDFB0F, 0x01F40DEA, 0x02000A1F);
	r2 = D(r2, s1_1_2, 0x0811F0E8, 0xFEFA0BD8, 0xF92305FC, 0xF6FD1521);
	r3 = D(r3, s1_1_2, 0xFD080211, 0x070DE7F0, 0x1D28E5FE, 0x0F0B15FB);
	r4 = D(r4, s1_1_2, 0x180EFDE8, 0x0602FD07, 0xFD00F214, 0xFDFFFCEE);
	r5 = D(r5, s1_1_2, 0x05FAFF02, 0xFCE60DE8, 0xFEFB1121, 0x0DED0FF6);
	r6 = D(r6, s1_1_2, 0xFF01FF01, 0x02FBF834, 0xF5060223, 0xFD01D2DE);
	r7 = D(r7, s1_1_2, 0x0BF309FF, 0x07FDFC0C, 0x04080209, 0xF8F80102);
	r0 = D(r0, s1_2_0, 0x02EC070A, 0xBEC4EE02, 0x040809F8, 0x0000F601);
	r1 = D(r1, s1_2_0, 0x02F808FC, 0x01FA0506, 0xF10FF700, 0x020CF2FC);
	r2 = D(r2, s1_2_0, 0x020408FE, 0x040BFCFF, 0xF20900F6, 0x0C020602);
	r3 = D(r3, s1_2_0, 0x19FC13FA, 0xFDFE0A05, 0x17EFF4FF, 0xFB13E9DF);
	r4 = D(r4, s1_2_0, 0x100600EB, 0x03030406, 0x01FC0708, 0x020B0EFD);
	r5 = D(r5, s1_2_0, 0xFEF5F8F6, 0xF600FCEC, 0x0A041307, 0x02DA210E);
	r6 = D(r6, s1_2_0, 0x0BFBF8F8, 0xFE00FF04, 0x0006FEFE, 0x020122F8);
	r7 = D(r7, s1_2_0, 0xFB0DFFED, 0x04FF05F4, 0x0F030700, 0x01000604);
	r0 = D(r0, s1_2_1, 0x02E302FE, 0xF3C814F6, 0x040801FE, 0xFCE6FFF4);
	r1 = D(r1, s1_2_1, 0x030411FD, 0xF6F504F5, 0xEF15F40D, 0x010DF012);
	r2 = D(r2, s1_2_1, 0xFB0112EA, 0xF911FD0E, 0x05030410, 0x0D0EE518);
	r3 = D(r3, s1_2_1, 0x09F81FF9, 0xE8031304, 0xF5F0C628, 0x020BF9F4);
	r4 = D(r4, s1_2_1, 0x051F14FE, 0x0B0AE9FF, 0x00F90CF5, 0xFBFF0C06);
	r5 = D(r5, s1_2_1, 0x03030006, 0xF2F6E802, 0x0906E719, 0xF90A0FE7);
	r6 = D(r6, s1_2_1, 0x06F7E52A, 0x09F2010B, 0xF90709EE, 0xE1FAF719);
	r7 = D(r7, s1_2_1, 0x010FF9F5, 0x0304F90B, 0x0A0FFB12, 0xF9020905);
	r0 = D(r0, s1_2_2, 0xFAFE08FF, 0xF7F31811, 0x00FD0400, 0xFAF410FC);
	r1 = D(r1, s1_2_2, 0x07FA04EC, 0x0307FDF2, 0xFE19EBF7, 0x0702E8FB);
	r2 = D(r2, s1_2_2, 0x0300FFFB, 0x04FCFCDD, 0x0600FAFC, 0xFAFAFE03);
	r3 = D(r3, s1_2_2, 0x080005E6, 0xFBFEFF03, 0x0CE3D3C0, 0x04F004F5);
	r4 = D(r4, s1_2_2, 0x0C0DE8EE, 0xFEFD0307, 0xFDF90514, 0x0008FE00);
	r5 = D(r5, s1_2_2, 0x0606F602, 0x0105FFEA, 0xFFE60027, 0x0200E7F5);
	r6 = D(r6, s1_2_2, 0xFFFAEE0D, 0x0003FD14, 0xFD0DF207, 0x03F80ED1);
	r7 = D(r7, s1_2_2, 0xFF0AF8F5, 0x04FBF8EE, 0x0907F1FF, 0xFA0203F3);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0C0313FE, 0x0CFF13F5, 0xFE01F703, 0x03FF04FF);
	r1 = D(r1, s0_0_0, 0xFD0C0FFA, 0x01F1F5F8, 0xFBF40F00, 0xFCF60A01);
	r2 = D(r2, s0_0_0, 0xF90CF706, 0xF70310FE, 0x080211FC, 0xF7F3080B);
	r3 = D(r3, s0_0_0, 0x0505D910, 0x1814FC07, 0x1B101111, 0xEF1107F5);
	r4 = D(r4, s0_0_0, 0xE3F206FF, 0x05F80500, 0xFEFDF00F, 0xFEF60100);
	r5 = D(r5, s0_0_0, 0x0107FB01, 0xF90214F0, 0xFB0901EC, 0xF9FE1A16);
	r6 = D(r6, s0_0_0, 0x01EBFAFE, 0xFC1300E5, 0xFC03F8FF, 0x09FB0DFA);
	r7 = D(r7, s0_0_0, 0x04FDFFFB, 0x0AFEECFD, 0xF908F50A, 0x0300FCFE);
	r0 = D(r0, s0_0_1, 0x040B060A, 0xFEFF09FB, 0xFF0901F9, 0xF6160508);
	r1 = D(r1, s0_0_1, 0x061E10F9, 0x00D1FC06, 0xFAEEFE0D, 0x04EFF70D);
	r2 = D(r2, s0_0_1, 0xFF1C0303, 0x130A0504, 0xF5101308, 0xF5E5F60B);
	r3 = D(r3, s0_0_1, 0xF6099C13, 0xE80E0EF3, 0x0F1E43AD, 0xF3150DF9);
	r4 = D(r4, s0_0_1, 0xFDF7F806, 0xFBFC0108, 0xEE07FF0F, 0xFC030902);
	r5 = D(r5, s0_0_1, 0x0109FB02, 0x08071706, 0x0BF20101, 0x06101902);
	r6 = D(r6, s0_0_1, 0xF6D6E607, 0xFBFAE308, 0x0603FDF4, 0xF9F81B28);
	r7 = D(r7, s0_0_1, 0x0B09FBFB, 0xFEFD000E, 0x0601E1FF, 0xFAFB0203);
	r0 = D(r0, s0_0_2, 0x08011EF8, 0x020016FF, 0x0501FAFE, 0x08010FFB);
	r1 = D(r1, s0_0_2, 0x060C05EF, 0xF6EC0408, 0xFAF2E20C, 0xF3EC0800);
	r2 = D(r2, s0_0_2, 0x0F0D02FD, 0x0C09F5FC, 0x0608F3FE, 0xEAEFF511);
	r3 = D(r3, s0_0_2, 0x00F7DF04, 0x0700160B, 0xDCF53FE4, 0xF814E1FE);
	r4 = D(r4, s0_0_2, 0x0ADDF1FB, 0xFC01FDFC, 0x04FF0A01, 0x02F8F901);
	r5 = D(r5, s0_0_2, 0x0003FFFF, 0xFA08FFEF, 0xFDFDF005, 0xF50331E6);
	r6 = D(r6, s0_0_2, 0xE5080113, 0xF10E07F9, 0x0205F505, 0x0013D7EB);
	r7 = D(r7, s0_0_2, 0xE7090A03, 0xFB091204, 0x0D0EF4F2, 0xFEFF03FC);
	r0 = D(r0, s0_1_0, 0x19F2FBF5, 0x180300F7, 0x0103FFF4, 0x0BFF04F4);
	r1 = D(r1, s0_1_0, 0x1F11F8FB, 0xFAE50107, 0x04F611FC, 0x06F911E1);
	r2 = D(r2, s0_1_0, 0xF505F30A, 0xFDFF0AEC, 0xFB020606, 0xEEF71EFF);
	r3 = D(r3, s0_1_0, 0xF2F3110E, 0x01E0F00D, 0x1FD0E4EE, 0x0316F5FE);
	r4 = D(r4, s0_1_0, 0xFAF002EC, 0x02010300, 0xF2FAF1FB, 0x09FEF6FD);
	r5 = D(r5, s0_1_0, 0x0005FF04, 0xF60211FA, 0x07F605DF, 0x24E5E7E3);
	r6 = D(r6, s0_1_0, 0xEBF00410, 0xFB04F5EF, 0x0001FD06, 0xF6EAF4E4);
	r7 = D(r7, s0_1_0, 0xFAF6F6FF, 0xF60AFD04, 0x02EE1103, 0xFDFE0D02);
	r0 = D(r0, s0_1_1, 0xF4E603C1, 0x04DD15EE, 0x01F5F70B, 0x00ECF5FE);
	r1 = D(r1, s0_1_1, 0x1F06ED05, 0x08E8EFEA, 0x060313E9, 0x0EF01E07);
	r2 = D(r2, s0_1_1, 0xFDFFE805, 0x06ED05FF, 0xE9F50509, 0x0DF30FFA);
	r3 = D(r3, s0_1_1, 0x090CE6E6, 0xFCF114F6, 0xB2E5CAC6, 0x12F803F8);
	r4 = D(r4, s0_1_1, 0x07BF0304, 0x060DFC02, 0x0403E902, 0x0BF221F5);
	r5 = D(r5, s0_1_1, 0xFB04F9FB, 0x1302FC01, 0x07FBEAF0, 0xFD01F60F);
	r6 = D(r6, s0_1_1, 0x060B17EA, 0xE203E5FE, 0x0CFA1A07, 0xF427F5EB);
	r7 = D(r7, s0_1_1, 0x0FF20B19, 0x0A031CEC, 0x09DD0BFF, 0x0500FC02);
	r0 = D(r0, s0_1_2, 0xDC0703EC, 0xF7041A14, 0xF305FCF8, 0xFAFFFC0B);
	r1 = D(r1, s0_1_2, 0x100BE8FD, 0x0EE7FCFD, 0x08F3FBF7, 0x05FA16E9);
	r2 = D(r2, s0_1_2, 0xE6FAE104, 0xF8FD050A, 0xECF4F8D4, 0x1EF422ED);
	r3 = D(r3, s0_1_2, 0x0205111B, 0x041514FB, 0xE7E01A36, 0xEF20FFCB);
	r4 = D(r4, s0_1_2, 0x00F402F7, 0xFBFF0E01, 0x0DF70500, 0xF4F4F102);
	r5 = D(r5, s0_1_2, 0x020704F7, 0xF20B0413, 0x1E09F6FF, 0xC732F22D);
	r6 = D(r6, s0_1_2, 0x04F817E6, 0x0AFE02F7, 0x02F507F3, 0x04FE1A03);
	r7 = D(r7, s0_1_2, 0xFCF60A04, 0x10FE0F00, 0x0806100E, 0xFE010300);
	r0 = D(r0, s0_2_0, 0xFFF6040D, 0x0F0A0F07, 0xFD01FBFE, 0x0F0003F9);
	r1 = D(r1, s0_2_0, 0x030B02E8, 0xFDFC0603, 0x0AF4FBEB, 0x0D05FFF7);
	r2 = D(r2, s0_2_0, 0x0002FB01, 0x0E0205ED, 0xFEFC04F9, 0x150707F3);
	r3 = D(r3, s0_2_0, 0x080F15FA, 0xFDF40317, 0xF8E30B29, 0x0D13F9F4);
	r4 = D(r4, s0_2_0, 0xFB05FAEA, 0x030000FE, 0xEFFDF80C, 0xFF0004FE);
	r5 = D(r5, s0_2_0, 0x02FDFB04, 0x03FFFAF1, 0x000C0307, 0x000AF40D);
	r6 = D(r6, s0_2_0, 0x1F1511E6, 0xF4F30A0E, 0xFD0201FD, 0xF9E51226);
	r7 = D(r7, s0_2_0, 0x04F902FE, 0x0C0100F6, 0x09060CFA, 0x0800FFFC);
	r0 = D(r0, s0_2_1, 0xF0FA0C03, 0xEAF50D00, 0x0302FFFA, 0x070608F0);
	r1 = D(r1, s0_2_1, 0x11FAFD11, 0xFCE702FD, 0x05F2FB14, 0xFB060D02);
	r2 = D(r2, s0_2_1, 0xFCF9F410, 0x04FE0AF7, 0xFDFEFD15, 0x0B0814FE);
	r3 = D(r3, s0_2_1, 0x0E1616EF, 0xF8030DFA, 0x10F433C4, 0x030DEDF6);
	r4 = D(r4, s0_2_1, 0x00FA10FF, 0xFC0006F5, 0xF6E6F20B, 0xF9F901F7);
	r5 = D(r5, s0_2_1, 0x04FFFB07, 0xFAEEB305, 0xEF0AF6D0, 0x0504E9DA);
	r6 = D(r6, s0_2_1, 0xFC0E0BF5, 0x0D0301F0, 0xFF05000F, 0xEA151DFB);
	r7 = D(r7, s0_2_1, 0x0DFDF40A, 0x06F900FE, 0x0F09F406, 0x090AFE08);
	r0 = D(r0, s0_2_2, 0x0F020CF0, 0x0B0807DF, 0x02040104, 0x02F504FB);
	r1 = D(r1, s0_2_2, 0xF5F4FF03, 0x07ED02F9, 0x01FBF303, 0xF501FE08);
	r2 = D(r2, s0_2_2, 0xFFFBF9FE, 0xF6F6F609, 0xFCFC0E06, 0xF0090805);
	r3 = D(r3, s0_2_2, 0xFD141CFA, 0x0E1100F8, 0x04F02DF2, 0x0A061229);
	r4 = D(r4, s0_2_2, 0xFB03FF07, 0xF403FA03, 0x0FFDF6FC, 0x05F10202);
	r5 = D(r5, s0_2_2, 0xFAFBF604, 0xFEF5E20A, 0x02FBF818, 0xF3F8060F);
	r6 = D(r6, s0_2_2, 0x0E010109, 0x130FFF08, 0x00FF04FE, 0x0F1AF7EC);
	r7 = D(r7, s0_2_2, 0x0203F8FC, 0x06F1FA0D, 0x030B0DF9, 0x00FDFDFE);
	r0 = D(r0, s1_0_0, 0xE2FF0CFF, 0xE70500FE, 0x0F0301FC, 0xF1F5FE02);
	r1 = D(r1, s1_0_0, 0xE2F20FF4, 0xF9070E04, 0x0F0B0201, 0x020403FE);
	r2 = D(r2, s1_0_0, 0x1103F407, 0x04FA03F0, 0xFE0AEAFE, 0xF3F9FA00);
	r3 = D(r3, s1_0_0, 0xFA00C4F9, 0xFA13E910, 0xD610F1FD, 0x10F2FF06);
	r4 = D(r4, s1_0_0, 0x14FF020E, 0xF8FBF5F9, 0x2902EBFA, 0x0CF70803);
	r5 = D(r5, s1_0_0, 0x00FFFFFB, 0x01FA17F9, 0xE8F20CE8, 0xCDE41A05);
	r6 = D(r6, s1_0_0, 0x3C03D912, 0x0B1109FF, 0x04F4FDF7, 0x0A92E71C);
	r7 = D(r7, s1_0_0, 0xF5F90504, 0x16F9EDF6, 0xF5F2FFEA, 0xFDFEF901);
	r0 = D(r0, s1_0_1, 0xFF05F5F3, 0xF5030803, 0x0505FCFC, 0xF9F10BEE);
	r1 = D(r1, s1_0_1, 0xE4F70AF2, 0x0805FC14, 0x0C05FC09, 0x080CFD05);
	r2 = D(r2, s1_0_1, 0x17F915F4, 0x04ECE902, 0xF60402FC, 0xF60AFD0E);
	r3 = D(r3, s1_0_1, 0x0128CD22, 0x04FE04FB, 0xF5EEFE06, 0x06F3FAF0);
	r4 = D(r4, s1_0_1, 0x08F007FF, 0xFEFE0008, 0x160907FF, 0x15FDFFFD);
	r5 = D(r5, s1_0_1, 0x070205FE, 0x01F301FF, 0x100AFC13, 0x02CAF5ED);
	r6 = D(r6, s1_0_1, 0xF2051105, 0xEC1516DD, 0x0404FEFE, 0x23F1F0E2);
	r7 = D(r7, s1_0_1, 0xF314060B, 0xFF01F913, 0x1614FBF2, 0x0302FBFE);
	r0 = D(r0, s1_0_2, 0xEAFB1010, 0xFDF90204, 0x03FFFD01, 0xF5FF0305);
	r1 = D(r1, s1_0_2, 0xF30505FE, 0x1007F907, 0xFC03070A, 0x0FFFF303);
	r2 = D(r2, s1_0_2, 0xF0FC12FC, 0xF8FAFAFD, 0x06010300, 0x1D09E2F6);
	r3 = D(r3, s1_0_2, 0x191AF7F5, 0x0903FEFC, 0xE2EF20F0, 0xE9F41EE6);
	r4 = D(r4, s1_0_2, 0x07FD0A0F, 0xFBFB01F2, 0x01030C02, 0xFE06FF08);
	r5 = D(r5, s1_0_2, 0x080404FD, 0xFDF40304, 0xFF0DFC0A, 0xF6F2F804);
	r6 = D(r6, s1_0_2, 0x2609DCE4, 0x25FFE8F8, 0x060506EE, 0xF3DA00F0);
	r7 = D(r7, s1_0_2, 0xF50A0AFA, 0xFB060AF7, 0x0F01F9F8, 0x0502FA03);
	r0 = D(r0, s1_1_0, 0x0510F319, 0x0B19E6F8, 0xFEFA10F1, 0x09141400);
	r1 = D(r1, s1_1_0, 0x07F1F4EF, 0xF3FE07FF, 0xF0031016, 0x0A100503);
	r2 = D(r2, s1_1_0, 0x06F01102, 0x13020204, 0x1912F117, 0x1500F401);
	r3 = D(r3, s1_1_0, 0xE6E802F2, 0x170EC40C, 0x530CC147, 0x05241002);
	r4 = D(r4, s1_1_0, 0x190E1A1D, 0xFD0E1400, 0x11F7FEF5, 0xF40C3AF8);
	r5 = D(r5, s1_1_0, 0x08FCFCFE, 0xE2041A11, 0x140703E8, 0x023B0635);
	r6 = D(r6, s1_1_0, 0xFFD6EFB6, 0xF80509E6, 0x0BEDFBDB, 0x23CF009B);
	r7 = D(r7, s1_1_0, 0x00FBFF0E, 0xF3F602E7, 0x00040CF5, 0x0CFFF50A);
	r0 = D(r0, s1_1_1, 0x1118012B, 0xF922E430, 0x0B0BFB18, 0xDBFB330B);
	r1 = D(r1, s1_1_1, 0x0A1CC712, 0xF4F91DEC, 0xE51DFFEE, 0xE7051CED);
	r2 = D(r2, s1_1_1, 0x250EFA13, 0x08E7EF18, 0x0F000203, 0xBDF108EB);
	r3 = D(r3, s1_1_1, 0xCF090DEF, 0x3023E228, 0xCF0D4525, 0xF6CCEF07);
	r4 = D(r4, s1_1_1, 0x05061708, 0xEDFC19F8, 0x15F30BFA, 0x0E05F814);
	r5 = D(r5, s1_1_1, 0x10FB21E9, 0xFEE8E0EF, 0xF1040C00, 0x81112213);
	r6 = D(r6, s1_1_1, 0xE5E50ACF, 0x00F10AFA, 0x0C00EBD7, 0x401BE081);
	r7 = D(r7, s1_1_1, 0xEDFCEA2C, 0x17DEEDDD, 0x0005F5DE, 0xFBFD00FE);
	r0 = D(r0, s1_1_2, 0xDCFA1F0B, 0x0E03E50D, 0xF9FC05F2, 0x2307EAFC);
	r1 = D(r1, s1_1_2, 0x1317E30B, 0x1A1DE817, 0xF0021008, 0x070E04F5);
	r2 = D(r2, s1_1_2, 0xF2FA1206, 0xF4F3F436, 0xFFFD0C01, 0xFB12EAF9);
	r3 = D(r3, s1_1_2, 0xFD091CFD, 0xF50C0A0C, 0x18F80FCD, 0xDCD81602);
	r4 = D(r4, s1_1_2, 0xE1E5230A, 0xF5FD05F5, 0x16FDEAF2, 0x000201FC);
	r5 = D(r5, s1_1_2, 0xFAF801FA, 0xF002060A, 0x32FAD10A, 0x0410FAF7);
	r6 = D(r6, s1_1_2, 0x04FB000B, 0x0C07F3E7, 0xFBF709F6, 0xEEC51733);
	r7 = D(r7, s1_1_2, 0x010CFC29, 0x07F7F80B, 0xF0F211FB, 0x0000F60A);
	r0 = D(r0, s1_2_0, 0x0C14EBFC, 0x15FFECEA, 0x0800F5FC, 0x030501F3);
	r1 = D(r1, s1_2_0, 0x03FAF6E7, 0xF8F001FD, 0x090AFB06, 0x1405FEFA);
	r2 = D(r2, s1_2_0, 0xF8F806FE, 0x0B0505F4, 0x0E09FEF7, 0x1210F908);
	r3 = D(r3, s1_2_0, 0x0401FC10, 0xF3E71BF5, 0x0933BA08, 0xFAFE0BE2);
	r4 = D(r4, s1_2_0, 0xD7FB1A04, 0xFCFFFA0C, 0xFFE60607, 0x02F1FB02);
	r5 = D(r5, s1_2_0, 0xF6020003, 0x17F80EFE, 0xFCE4F5F1, 0x2DD9CEFB);
	r6 = D(r6, s1_2_0, 0xFF1700F6, 0xF606FAFC, 0xF4F609E8, 0xE7B7171E);
	r7 = D(r7, s1_2_0, 0x03F7F7FE, 0xFBEFF502, 0xFA10FE0B, 0x0404FBF9);
	r0 = D(r0, s1_2_1, 0xE9F8F60D, 0xF8DED881, 0xF50A0D0F, 0xFEF3F90D);
	r1 = D(r1, s1_2_1, 0xFDDEFBE8, 0x0DFBEB02, 0xFB0CFB10, 0x06140308);
	r2 = D(r2, s1_2_1, 0xFAF8F9F8, 0x02FAFB0F, 0x0AF9EF15, 0x0321021A);
	r3 = D(r3, s1_2_1, 0xF0FFFDFD, 0xF71314E6, 0x0608D0E0, 0xE3340212);
	r4 = D(r4, s1_2_1, 0x000D0DF8, 0xF2020A17, 0xF9FDFEEE, 0x0E0AFBFB);
	r5 = D(r5, s1_2_1, 0x15070A07, 0x000F0B20, 0xEE05FAF4, 0x04E3F608);
	r6 = D(r6, s1_2_1, 0x15FA02F8, 0x0A08EDF1, 0x06F400C9, 0x00F2F58C);
	r7 = D(r7, s1_2_1, 0xFF070113, 0x03FEF9ED, 0x0C04F1F2, 0x0006FE15);
	r0 = D(r0, s1_2_2, 0x121006F9, 0x160DF2EA, 0x01FBFE03, 0x0C05EE0E);
	r1 = D(r1, s1_2_2, 0xE3E41105, 0xF00A0802, 0xFE04FBF3, 0x0517FF09);
	r2 = D(r2, s1_2_2, 0xF8F302F8, 0xF9FEF80D, 0xFFFF00EC, 0x111EF613);
	r3 = D(r3, s1_2_2, 0xEEF70EF5, 0x020CFF01, 0xF9810A28, 0xFDD802FD);
	r4 = D(r4, s1_2_2, 0xF1E90D05, 0x0101FDFD, 0xFEF7FF06, 0x09FFF305);
	r5 = D(r5, s1_2_2, 0xFBFB0902, 0x1008FD00, 0xFAFFF5F1, 0x1AE3F309);
	r6 = D(r6, s1_2_2, 0x24FEDD23, 0x1209F4FE, 0xFE080908, 0x0BFDF81E);
	r7 = D(r7, s1_2_2, 0x07FC0219, 0x13F4E81A, 0x03FDFF01, 0xFE02FD01);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x17F5FCEE, 0x03F8F9FF, 0xF606FD06, 0x05FAFD00);
	r1 = D(r1, s0_0_0, 0x0A1CF814, 0xFCFE0CFD, 0x0116F801, 0x1DF900FA);
	r2 = D(r2, s0_0_0, 0xF2FAFC0B, 0x0CFCF7FA, 0x03F0FAF5, 0x0BF6FCFC);
	r3 = D(r3, s0_0_0, 0x08180C10, 0xFCE90E06, 0x0AF2F311, 0x11F901F5);
	r4 = D(r4, s0_0_0, 0xF9050105, 0x0AFB01FE, 0xF70A0009, 0x01020006);
	r5 = D(r5, s0_0_0, 0x02040400, 0x01EAFAFB, 0x0C03FB04, 0xFFEDF0FB);
	r6 = D(r6, s0_0_0, 0x150EF9F2, 0x23F71BE6, 0xFE0D010A, 0x0BFE03FF);
	r7 = D(r7, s0_0_0, 0xFDF304FF, 0x01190509, 0x1C07F4FC, 0x04F9FFFC);
	r0 = D(r0, s0_0_1, 0x16F10F09, 0x07EF0BFF, 0x05F9FDF9, 0x00F0FCF6);
	r1 = D(r1, s0_0_1, 0x181C1604, 0x0416FA01, 0xF8380906, 0x021AFF03);
	r2 = D(r2, s0_0_1, 0x0204F4EF, 0x000307FD, 0x0CE804F5, 0xE2EC0002);
	r3 = D(r3, s0_0_1, 0x13E70DFE, 0x0AE5F1F6, 0x12C830E5, 0xFAF0F407);
	r4 = D(r4, s0_0_1, 0x06FBF7F6, 0x04051202, 0x00FBFEF4, 0xF504FC02);
	r5 = D(r5, s0_0_1, 0xFF11FD03, 0x01FAFB00, 0xF5FF190B, 0x02E20CFB);
	r6 = D(r6, s0_0_1, 0x05DF161F, 0xFB0B001F, 0x07F4FD07, 0x06DF220B);
	r7 = D(r7, s0_0_1, 0xFEFF04FF, 0xF8231103, 0x12D5F7FE, 0x00FEF7FD);
	r0 = D(r0, s0_0_2, 0xF9060AF7, 0xFEFD03FB, 0xFF0000FB, 0xFFF5FCFD);
	r1 = D(r1, s0_0_2, 0xF9E71103, 0xFDF90D01, 0xECEFFE03, 0xF50E070B);
	r2 = D(r2, s0_0_2, 0xF2FBF000, 0x00CAF6FA, 0x00F90300, 0x04CFFA0D);
	r3 = D(r3, s0_0_2, 0x13130A10, 0xFDF00411, 0x07CA0657, 0x01F9FCF9);
	r4 = D(r4, s0_0_2, 0xF7EBF404, 0x0703FF02, 0xF211F301, 0xF2F4FDFF);
	r5 = D(r5, s0_0_2, 0xFE0FFEFE, 0xEF0203FD, 0xFFF408F6, 0x0EDFEEE2);
	r6 = D(r6, s0_0_2, 0x09FD00ED, 0x0314F9F2, 0x05FDFC00, 0x2ED7F1E4);
	r7 = D(r7, s0_0_2, 0x13F002FA, 0x0408FC07, 0x11140800, 0xFF0704FD);
	r0 = D(r0, s0_1_0, 0xF804FFF9, 0x11EE04FD, 0x08FF1807, 0x08FD00F5);
	r1 = D(r1, s0_1_0, 0xFE0805FC, 0xF70AFC00, 0x01F9F0FE, 0x1DF907F7);
	r2 = D(r2, s0_1_0, 0xED091E09, 0x0AF8FFFB, 0x09FEF8EC, 0x15F303E6);
	r3 = D(r3, s0_1_0, 0x06FB0C0F, 0xF2F9EBF3, 0xA825E4EB, 0x19FFFD08);
	r4 = D(r4, s0_1_0, 0x06EE0DF9, 0x0207F3F7, 0x01FA0A13, 0x0A07010C);
	r5 = D(r5, s0_1_0, 0x00FD0900, 0xD6060B08, 0xE713130C, 0xFC06D3F8);
	r6 = D(r6, s0_1_0, 0x13F2F5F8, 0xFF05F9FD, 0x13FA0B04, 0x0000F004);
	r7 = D(r7, s0_1_0, 0x16FAFEFB, 0xF1021F04, 0x1BEC0BF8, 0x0707FE00);
	r0 = D(r0, s0_1_1, 0xFF1E05E7, 0x26F9E106, 0xEE08EA00, 0x1F16CAF6);
	r1 = D(r1, s0_1_1, 0x00F11106, 0x0202EA08, 0xCBFF22F5, 0x030B0106);
	r2 = D(r2, s0_1_1, 0xF4FB36FE, 0xF9142C00, 0xC81528F6, 0x091DEEF2);
	r3 = D(r3, s0_1_1, 0x07FEDBED, 0x280228EC, 0xD70C31ED, 0x90F4341C);
	r4 = D(r4, s0_1_1, 0xF01216E5, 0xFCFFD7E8, 0xFEE4D906, 0x060E2007);
	r5 = D(r5, s0_1_1, 0xE90E1106, 0x9932FD23, 0x0307DB08, 0x400A0BFA);
	r6 = D(r6, s0_1_1, 0xF30AF214, 0xFA0EE1FD, 0xFA132A0A, 0x24F5F9FB);
	r7 = D(r7, s0_1_1, 0xE90F06FF, 0xF9E8EB08, 0x0A041C02, 0xF6342814);
	r0 = D(r0, s0_1_2, 0xF4E6DEF0, 0x00E0FFFD, 0x02FFF603, 0xFAF916FE);
	r1 = D(r1, s0_1_2, 0xFC0410F5, 0xF90718F4, 0xF203F105, 0xFA0DFC00);
	r2 = D(r2, s0_1_2, 0x11F7FB06, 0x09FCF9FE, 0xF8EADCFC, 0xEF07FAEF);
	r3 = D(r3, s0_1_2, 0x0E090E14, 0x1002010D, 0x34E9DAFC, 0xF20AEA24);
	r4 = D(r4, s0_1_2, 0xF609F10A, 0x0702FEFB, 0x1AFA060B, 0x04E8FCFC);
	r5 = D(r5, s0_1_2, 0x041C10F9, 0x0608F3F3, 0xF30509EF, 0x06060AEB);
	r6 = D(r6, s0_1_2, 0x140BF6F7, 0xF90108FC, 0x0FF50DFF, 0x07101111);
	r7 = D(r7, s0_1_2, 0xFEFB1AFE, 0x0FF40202, 0xF1FF08FA, 0xF6090105);
	r0 = D(r0, s0_2_0, 0x0AFFFBF6, 0x05FFEF03, 0x02FC05FC, 0x0B03FA06);
	r1 = D(r1, s0_2_0, 0x08F90F00, 0xFB04F6FD, 0x0102FDFF, 0xF3060409);
	r2 = D(r2, s0_2_0, 0x01FD04FD, 0x0505FB09, 0x0E03FA01, 0x0201F812);
	r3 = D(r3, s0_2_0, 0x1800FC0A, 0xF2F805FA, 0x2716DFEE, 0xFDF801EE);
	r4 = D(r4, s0_2_0, 0xD9F70EFD, 0xFC0104FB, 0xF4F51807, 0xF30001FE);
	r5 = D(r5, s0_2_0, 0x010209FF, 0x12020606, 0xEF08FD0E, 0xF5F117F7);
	r6 = D(r6, s0_2_0, 0xFCFFF908, 0xFDFC0006, 0xFAF70209, 0xE00DF1FC);
	r7 = D(r7, s0_2_0, 0x02FF0DF9, 0x0B0607FF, 0x1A0BF606, 0x0609F5FA);
	r0 = D(r0, s0_2_1, 0xECFB09D7, 0x2C122E07, 0x00FD0D05, 0xFD061AE3);
	r1 = D(r1, s0_2_1, 0x130102FB, 0xF4FC0FEA, 0x100CF40A, 0x140DDD16);
	r2 = D(r2, s0_2_1, 0x06FB0BEF, 0x1008FE0B, 0xFAFEF5F3, 0x0B14E423);
	r3 = D(r3, s0_2_1, 0xEB090403, 0xEBF2F6FB, 0xC907FF0F, 0x00F1FEF7);
	r4 = D(r4, s0_2_1, 0xED0AE309, 0xFD0708FC, 0xFDEE16EA, 0xFC01FBFE);
	r5 = D(r5, s0_2_1, 0x10F6F010, 0xDDC8E312, 0x04FFF0F9, 0xD809ED0E);
	r6 = D(r6, s0_2_1, 0x061BD82D, 0x020DF7FC, 0xFC04DC13, 0x0E0AF91C);
	r7 = D(r7, s0_2_1, 0x0A07F007, 0x1508F70B, 0x1402F501, 0xFCF6FB0A);
	r0 = D(r0, s0_2_2, 0xF70B0C03, 0xEA00FB14, 0x02F908FE, 0xFCFF0800);
	r1 = D(r1, s0_2_2, 0x09F70605, 0xF805FFF5, 0x01F3FBE9, 0xFB0401FD);
	r2 = D(r2, s0_2_2, 0x07F403F9, 0x04FEFBF3, 0xE8FC0103, 0xFE07FFFE);
	r3 = D(r3, s0_2_2, 0x01080B07, 0xFF0AFF00, 0xE72A08E9, 0x0E07FCF9);
	r4 = D(r4, s0_2_2, 0xF6FDFEEF, 0xFFFCFFF6, 0x07F80905, 0x07FBFEFE);
	r5 = D(r5, s0_2_2, 0x020C00FB, 0x08FAF8F7, 0x0BE81FE9, 0x11021222);
	r6 = D(r6, s0_2_2, 0xFC0207EA, 0x06FA0B03, 0x0102FD00, 0x04F718D9);
	r7 = D(r7, s0_2_2, 0xFA00FF03, 0x0A0601FF, 0xEF0F001E, 0xFB05FC00);
	r0 = D(r0, s1_0_0, 0xF5010A0B, 0x050AFA02, 0xF8FF0005, 0x1003040B);
	r1 = D(r1, s1_0_0, 0x18FA0A07, 0x10EB05EC, 0x15F610E5, 0x160305F9);
	r2 = D(r2, s1_0_0, 0xEF01030A, 0x06FB0007, 0x0403FFFD, 0x080306F8);
	r3 = D(r3, s1_0_0, 0xCA0AE507, 0xECF90DF2, 0xD8100108, 0xF0072404);
	r4 = D(r4, s1_0_0, 0xFF02F804, 0xFF04F905, 0xF50BF20E, 0x16F309F8);
	r5 = D(r5, s1_0_0, 0xFCFF0503, 0xF70A061A, 0x11FEFF0B, 0x09EE0406);
	r6 = D(r6, s1_0_0, 0x0A111FE9, 0xFB1605F2, 0xF60000FB, 0xF3140304);
	r7 = D(r7, s1_0_0, 0xFDF60DFD, 0x0F07FD04, 0xD403F210, 0x03080302);
	r0 = D(r0, s1_0_1, 0x0122EB0A, 0x01F201F0, 0xFB03FF02, 0xFD0F0805);
	r1 = D(r1, s1_0_1, 0xF70105F7, 0x0FE509ED, 0x10F406F3, 0x06FC06F3);
	r2 = D(r2, s1_0_1, 0xF5FA0209, 0x08FC03FE, 0xFF090504, 0x02DCF1FF);
	r3 = D(r3, s1_0_1, 0xE91B0F12, 0x15F803FD, 0x2F11FFFB, 0x1C1F03ED);
	r4 = D(r4, s1_0_1, 0x0702F908, 0x0107FE03, 0xF6030614, 0x060A00FF);
	r5 = D(r5, s1_0_1, 0xFEFE0001, 0xFC02050C, 0xF2FEF509, 0x0C050BFF);
	r6 = D(r6, s1_0_1, 0x02FD07AB, 0x13E101E6, 0x09FD07F8, 0xFF1711DD);
	r7 = D(r7, s1_0_1, 0xF9F204FD, 0x02FFFFFF, 0xD22B052F, 0x00060702);
	r0 = D(r0, s1_0_2, 0x0CFD0B0E, 0x0AFF0905, 0x01FCFDFE, 0xFC06FD0B);
	r1 = D(r1, s1_0_2, 0x0106FEFD, 0x0FFD07F5, 0x1409FC0F, 0x160EFF0E);
	r2 = D(r2, s1_0_2, 0xF0F90104, 0xF70CF70A, 0xFA02FB0A, 0x0DF601FB);
	r3 = D(r3, s1_0_2, 0x000E0B23, 0x0607FFFB, 0x0AF6F9C2, 0xE7F1FD0F);
	r4 = D(r4, s1_0_2, 0x05030806, 0x00000503, 0x0CF30211, 0x040100FD);
	r5 = D(r5, s1_0_2, 0xFCFB0101, 0xEC05FD0F, 0x0AFB070C, 0xE800090E);
	r6 = D(r6, s1_0_2, 0x01E8F804, 0x00FC0717, 0xF800FDFC, 0xE81700FB);
	r7 = D(r7, s1_0_2, 0xFCF10304, 0xFE04FF04, 0xDAFD0605, 0x0201FEFE);
	r0 = D(r0, s1_1_0, 0x12F309F8, 0x231308EB, 0x0103FCF2, 0x07090BEE);
	r1 = D(r1, s1_1_0, 0xECF213F6, 0xF8E214FD, 0x00F439E3, 0x0E111AE3);
	r2 = D(r2, s1_1_0, 0xFEEB0603, 0x1FF907E0, 0x031A0206, 0xF718E6F5);
	r3 = D(r3, s1_1_0, 0x8511C2FF, 0x0705F807, 0x51F7F3F8, 0xF70CFBE7);
	r4 = D(r4, s1_1_0, 0x0A01EBF2, 0xEB0CF100, 0xC901F109, 0xF0F52FF4);
	r5 = D(r5, s1_1_0, 0xF70708FE, 0x2BEB0581, 0x25C51DCD, 0x17F726D0);
	r6 = D(r6, s1_1_0, 0xF3FDF4E8, 0x0D0EE3FC, 0xEEEDDBFE, 0x01C8E5E5);
	r7 = D(r7, s1_1_0, 0xFE0A0BFE, 0x07F2FE0C, 0xE912B003, 0x0805FDF3);
	r0 = D(r0, s1_1_1, 0xFBBF46DC, 0x1DCE25D4, 0x11FC0AF6, 0x09CB15F0);
	r1 = D(r1, s1_1_1, 0xF54BF620, 0xFFF117FD, 0xE8E6C8E3, 0x07B705E7);
	r2 = D(r2, s1_1_1, 0x1A19F4F2, 0xEEF3EF05, 0x14E40CE9, 0xEDD5C73A);
	r3 = D(r3, s1_1_1, 0xDE05D92C, 0x29DA2FD9, 0xECA755FF, 0x128C3BD9);
	r4 = D(r4, s1_1_1, 0x12E9EAEB, 0xF9FA1307, 0x08321005, 0x06DDFAF4);
	r5 = D(r5, s1_1_1, 0xFFF00D00, 0xFF0AEC0D, 0xE329090F, 0x0ED51CE6);
	r6 = D(r6, s1_1_1, 0x1CC3FEE9, 0x11DF0DFA, 0xFEFE060E, 0x0BB5ED08);
	r7 = D(r7, s1_1_1, 0xDB000CFD, 0xF73A1120, 0xE610120B, 0x11E402ED);
	r0 = D(r0, s1_1_2, 0x09F6091A, 0x1CF9F5F5, 0xFAFE0400, 0x0D05FCEF);
	r1 = D(r1, s1_1_2, 0xF410F7FE, 0x12F507ED, 0x10ED0815, 0x00F7F601);
	r2 = D(r2, s1_1_2, 0xF9F40E0F, 0xFF1CF923, 0xF9E51609, 0xF9F1F4E5);
	r3 = D(r3, s1_1_2, 0xF2F9F5FF, 0x03FE030A, 0x2B1605C4, 0xFBE5031F);
	r4 = D(r4, s1_1_2, 0x00F9FDFA, 0x030CFB09, 0xFA020AF1, 0x0002FDFE);
	r5 = D(r5, s1_1_2, 0xF002FF01, 0xE926060E, 0x1400F406, 0x06E2FBD5);
	r6 = D(r6, s1_1_2, 0x02ED06FE, 0x07D205F3, 0xF1F805F6, 0xE91D0DFB);
	r7 = D(r7, s1_1_2, 0x03EB17EB, 0xFC07070D, 0xFAF1E002, 0x00FD04EF);
	r0 = D(r0, s1_2_0, 0xFDFCBA06, 0x250181F6, 0x0406DCFA, 0x0AF9F7F8);
	r1 = D(r1, s1_2_0, 0xF6F80AFC, 0x03F57FFD, 0x16FE78FA, 0x25FE30FE);
	r2 = D(r2, s1_2_0, 0xED00BBF9, 0x1DF340E9, 0xFC0381F3, 0x28F654F7);
	r3 = D(r3, s1_2_0, 0xFCF85906, 0xFB058411, 0xBBDB7FFE, 0xFAF750EB);
	r4 = D(r4, s1_2_0, 0x11F600FB, 0x0702EBF3, 0xEC14B310, 0xFFF0E2F2);
	r5 = D(r5, s1_2_0, 0xFDFECB0C, 0x0628C0DE, 0x07EB14FE, 0xDBE481DB);
	r6 = D(r6, s1_2_0, 0x0DD27F00, 0x140A080D, 0xEFFEF2FB, 0x060581FF);
	r7 = D(r7, s1_2_0, 0x05F708F9, 0xF6008801, 0xF603FD0C, 0x05FF53FF);
	r0 = D(r0, s1_2_1, 0xF8EB32FD, 0xE62D0E04, 0xFAFF18FE, 0xF5EEFFDC);
	r1 = D(r1, s1_2_1, 0xE401D120, 0x12F41CF7, 0x0514EEFF, 0x0A0116EE);
	r2 = D(r2, s1_2_1, 0xE503DC16, 0x04E9D0FE, 0xFB01270F, 0x13F91BE6);
	r3 = D(r3, s1_2_1, 0xF5EE4602, 0x0CF61D06, 0x59BA05E8, 0xFF1516D9);
	r4 = D(r4, s1_2_1, 0x10DA2E0C, 0x0EEB2FE3, 0xF8121514, 0x1015ECFC);
	r5 = D(r5, s1_2_1, 0x010EF8F0, 0xFB28C2F4, 0xEF09E422, 0xF5E22ABC);
	r6 = D(r6, s1_2_1, 0xFF0021C2, 0xF5011CF7, 0xFFE32615, 0x08FE44E6);
	r7 = D(r7, s1_2_1, 0x07FD0BF9, 0xED13E603, 0x0709FF09, 0x01F521FA);
	r0 = D(r0, s1_2_2, 0x0AE8FF09, 0x0F00FFEF, 0xF904FE02, 0x040207FF);
	r1 = D(r1, s1_2_2, 0xF40EF4FE, 0x19010BF6, 0x08FE1206, 0x02FE0E04);
	r2 = D(r2, s1_2_2, 0xEB01F305, 0xFD00FC10, 0x03F90BEB, 0x0B0813EF);
	r3 = D(r3, s1_2_2, 0xFD00FEFA, 0xFEFFEC05, 0x19C82081, 0xEE1C0A06);
	r4 = D(r4, s1_2_2, 0xF6F708F8, 0x09FB0901, 0xF408F1F5, 0xFA09FD04);
	r5 = D(r5, s1_2_2, 0xFC01FFFE, 0x080C011A, 0xEE05D302, 0x06EA001E);
	r6 = D(r6, s1_2_2, 0x09FC1007, 0x03F509F4, 0x0FF214E9, 0xF30CECF0);
	r7 = D(r7, s1_2_2, 0x16FA16F3, 0x040AFAF8, 0xFDF716F3, 0x0BFAF903);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.912e-02, -1.043e-02, -1.642e-02, -1.574e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-8.364e-03, 3.215e-02, 1.046e-02, 2.589e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.153e-03, -2.151e-02, -1.828e-02, 5.555e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.055e-02, -1.207e-02, -2.832e-02, -3.752e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(2.508e-02, -8.852e-03, -1.254e-02, -8.612e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.229e-03, -3.700e-02, -1.695e-02, -2.586e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-9.542e-03, -7.275e-03, 1.588e-03, -3.048e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-4.949e-03, -3.461e-03, -4.395e-03, -8.921e-04);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_vk] -conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02FEFCFE, 0x1001F403, 0x2C00FF12, 0xE2F4F01E);
	r1 = D(r1, s0_0_0, 0xF8EFF7F0, 0x07010305, 0xEAE3DFEC, 0x11FB8112);
	r2 = D(r2, s0_0_0, 0x05F9FCF9, 0x0DFCF901, 0x00FBFA06, 0x03FE0006);
	r3 = D(r3, s0_0_0, 0xF8FFF803, 0x0100FEF9, 0xEE01F9F0, 0x010009FE);
	r4 = D(r4, s0_0_0, 0xFCFF02FA, 0x0202FF01, 0xFB0100FE, 0x06FF0101);
	r5 = D(r5, s0_0_0, 0x06070308, 0xFE0403FB, 0x0705F701, 0x1BFBF304);
	r6 = D(r6, s0_0_0, 0xF9E0BB4E, 0xFFFCFE07, 0xFBFEEEF2, 0x17F8EEF8);
	r7 = D(r7, s0_0_0, 0xF5E60307, 0xF7FCFE02, 0x17FCBF10, 0xFFFEF009);
	r0 = D(r0, s0_0_1, 0x04F40610, 0x0EECECFA, 0xE5DBE813, 0xCDCD1420);
	r1 = D(r1, s0_0_1, 0xF809E817, 0xEA01ED03, 0x19040603, 0x2A13813E);
	r2 = D(r2, s0_0_1, 0x010CF5F8, 0xD211A7FB, 0x0AF7FA05, 0xFCFDF7FE);
	r3 = D(r3, s0_0_1, 0x01FCD104, 0xFDF605FA, 0xEA05F005, 0x02FEEE04);
	r4 = D(r4, s0_0_1, 0x01FD02FD, 0x0AFBF305, 0xF9F9FC01, 0x0602FF02);
	r5 = D(r5, s0_0_1, 0x2505E90F, 0xFA14FAFE, 0x0D10F019, 0xED21EC06);
	r6 = D(r6, s0_0_1, 0xC2812013, 0xF40CEE02, 0x050EE6FA, 0x0E0103FF);
	r7 = D(r7, s0_0_1, 0x05DCCC17, 0x08FBD907, 0x0B01EEFF, 0x01020201);
	r0 = D(r0, s0_0_2, 0x030AA5FC, 0xF0FB06FC, 0xF0BF813C, 0x11CFBB68);
	r1 = D(r1, s0_0_2, 0x00F5FC0B, 0xE4FA000C, 0x01EFF705, 0xD803FE0C);
	r2 = D(r2, s0_0_2, 0xFEFA06FF, 0xFBFCFB06, 0x0301FC01, 0x03FB0600);
	r3 = D(r3, s0_0_2, 0xF6FE0404, 0xFEFA04FD, 0xF703F7FB, 0x0300F8FE);
	r4 = D(r4, s0_0_2, 0xFFFE07FD, 0x02FC00FC, 0x0001FCFF, 0x02FAFF02);
	r5 = D(r5, s0_0_2, 0x23FBDD02, 0xFCFFFF01, 0xFBEFE5EB, 0x00EA01FD);
	r6 = D(r6, s0_0_2, 0x08E2D52F, 0x0806F8FC, 0x0D13F7FC, 0xFFFBF9FE);
	r7 = D(r7, s0_0_2, 0x06DEEDF4, 0xFD020601, 0xFF01FEFE, 0x0501FE02);
	r0 = D(r0, s0_1_0, 0x02040308, 0xEC07EE20, 0x21FBFFE1, 0xD408FC18);
	r1 = D(r1, s0_1_0, 0xDBFF9F1F, 0x41F2071B, 0x1AF606E5, 0x1CE80158);
	r2 = D(r2, s0_1_0, 0x01090302, 0x0203FCF5, 0x01FE00F7, 0x07FFFD05);
	r3 = D(r3, s0_1_0, 0xFA04F805, 0xF7FFF814, 0x09FCF31B, 0xFDFFFF0B);
	r4 = D(r4, s0_1_0, 0xFE00FC07, 0xFF00FB06, 0xF805FA14, 0x04FFFC08);
	r5 = D(r5, s0_1_0, 0xFEFC0402, 0xFFFC04FB, 0x01FF0204, 0x0602F707);
	r6 = D(r6, s0_1_0, 0x1F36D62C, 0xFDFD0103, 0x0FFDFD03, 0x1F05F603);
	r7 = D(r7, s0_1_0, 0x0F09D400, 0xFD03F50A, 0xF80BAA11, 0xE407E709);
	r0 = D(r0, s0_1_1, 0x13FBFCE3, 0xF315DF0B, 0xCF012427, 0xADFAF909);
	r1 = D(r1, s0_1_1, 0x201CF1F4, 0xE60ABA00, 0xF6F5F104, 0x1D988457);
	r2 = D(r2, s0_1_1, 0x25F0FF04, 0xFF150721, 0x0B09F203, 0x171CF301);
	r3 = D(r3, s0_1_1, 0x1711040E, 0x11FFCB18, 0x1BFFF922, 0x10F7DC05);
	r4 = D(r4, s0_1_1, 0x0CF3F00B, 0x05F9D905, 0x1831FB0B, 0xE931E6EE);
	r5 = D(r5, s0_1_1, 0xF811E917, 0x0003000F, 0xF705E301, 0xDB0DFF02);
	r6 = D(r6, s0_1_1, 0xFF3CDE39, 0x06E8FC01, 0xDFF5FC1A, 0xE9F30201);
	r7 = D(r7, s0_1_1, 0x18FD8139, 0x2A09EF00, 0x100FF8F6, 0x1004050C);
	r0 = D(r0, s0_1_2, 0xF70AE70D, 0x0103EFFE, 0x16E9CFE4, 0xEC11CF34);
	r1 = D(r1, s0_1_2, 0xFCFAEB15, 0x04FDEC09, 0x0901F401, 0xEB213011);
	r2 = D(r2, s0_1_2, 0xF3ED0400, 0xFE040EFC, 0x010C0303, 0xFFE20703);
	r3 = D(r3, s0_1_2, 0xF9E6FDFD, 0x0903F703, 0x0B1DFD0D, 0x070E07FF);
	r4 = D(r4, s0_1_2, 0xFDFC0200, 0x0507FDFF, 0x050704FF, 0x0EFFF5FB);
	r5 = D(r5, s0_1_2, 0x1B1800F2, 0x022AFEFF, 0xF813FE1E, 0x0613010B);
	r6 = D(r6, s0_1_2, 0xC7092B3B, 0x042507FC, 0xFFF40308, 0x0E01F804);
	r7 = D(r7, s0_1_2, 0xE610F62E, 0xF8F2FB06, 0x00F8F9F5, 0x0D00FB04);
	r0 = D(r0, s0_2_0, 0xFEFF020C, 0x010109F6, 0xFAF8FD1E, 0xC6042422);
	r1 = D(r1, s0_2_0, 0x81818121, 0xAA81F881, 0xFB0BF402, 0x0207C310);
	r2 = D(r2, s0_2_0, 0x020004FE, 0xFEFF04FE, 0x01030002, 0xFD02FC05);
	r3 = D(r3, s0_2_0, 0x00FE00FE, 0x0403FF03, 0xF8010005, 0xFD0202FA);
	r4 = D(r4, s0_2_0, 0xF902F803, 0x0500FE05, 0xFBFC08FC, 0xFF00FFF8);
	r5 = D(r5, s0_2_0, 0x0207F8FB, 0xFEFF0206, 0xFCFC0501, 0xFC0103FF);
	r6 = D(r6, s0_2_0, 0xF7D900F8, 0xFAFFFE03, 0x0203F702, 0xFDFFFC00);
	r7 = D(r7, s0_2_0, 0xF408FE06, 0xF403FB03, 0xDBFA0BF4, 0x0505FD02);
	r0 = D(r0, s0_2_1, 0x0D0100F2, 0x1500010A, 0xD7122804, 0x1EFFC31B);
	r1 = D(r1, s0_2_1, 0x182C02FC, 0xDDF40408, 0x04FFFD09, 0xD431EC6E);
	r2 = D(r2, s0_2_1, 0xFFFD00FA, 0xFD0301FC, 0x0108FF02, 0x03F802F8);
	r3 = D(r3, s0_2_1, 0xFF02FFFE, 0x0D03F711, 0xF008F8FC, 0x0B11020A);
	r4 = D(r4, s0_2_1, 0x0505F502, 0x0C0AFC06, 0xE0EA0BF7, 0x110001FF);
	r5 = D(r5, s0_2_1, 0x06040700, 0xFCFD01F6, 0xFD040E04, 0x0102F905);
	r6 = D(r6, s0_2_1, 0x3A000EF3, 0xFE03FEFE, 0x1DF9F408, 0x10FDF603);
	r7 = D(r7, s0_2_1, 0x0008001B, 0xFC160107, 0xF00A0602, 0xFC00FF04);
	r0 = D(r0, s0_2_2, 0x1319FC0C, 0xFD07060D, 0x1D25F721, 0xECDB182E);
	r1 = D(r1, s0_2_2, 0xF5DEFE1E, 0x0E0DFB0E, 0x0400FF03, 0xDAF2FD21);
	r2 = D(r2, s0_2_2, 0x04FE0104, 0xFBFF0103, 0xFFFEFC00, 0x07FCFE04);
	r3 = D(r3, s0_2_2, 0x00000104, 0x01080103, 0x0200FEFD, 0xFAF8FCFE);
	r4 = D(r4, s0_2_2, 0xF9F40301, 0xFF04FE02, 0xF80006FD, 0xF3FA0301);
	r5 = D(r5, s0_2_2, 0x0C03F400, 0xFD170200, 0xFDF2F40C, 0xFA05FF05);
	r6 = D(r6, s0_2_2, 0x0DFEF231, 0xFC05FE06, 0x0A01F509, 0x0201FD04);
	r7 = D(r7, s0_2_2, 0xF300020D, 0xFDF50000, 0xF9010501, 0x01FDFFFE);
	r0 = D(r0, s1_0_0, 0x00FF08FD, 0xEC0DEBFD, 0xEE23ED00, 0xFE0AFE0E);
	r1 = D(r1, s1_0_0, 0xE121EE10, 0x0D06F1FD, 0xFC0BFE07, 0xFB19E2FD);
	r2 = D(r2, s1_0_0, 0x00FE0000, 0x05FEEFFC, 0x01FE0400, 0xFE0103FC);
	r3 = D(r3, s1_0_0, 0xFF0001FE, 0x01060100, 0x0DFEFD08, 0x01020100);
	r4 = D(r4, s1_0_0, 0x000101FE, 0xFA0001FE, 0x00FFFF01, 0x000100FE);
	r5 = D(r5, s1_0_0, 0x050705F9, 0x0200FE00, 0xFF10F4FB, 0x0507E3F3);
	r6 = D(r6, s1_0_0, 0x2DBDD308, 0x050201FD, 0x0C040701, 0xFC00F304);
	r7 = D(r7, s1_0_0, 0xE70508F5, 0xFE04FE00, 0xF7F1F9FF, 0xF804FD01);
	r0 = D(r0, s1_0_1, 0xFC0400F3, 0x0801FFFB, 0x242DEBC9, 0x3504DFCC);
	r1 = D(r1, s1_0_1, 0x0BFF1DF5, 0x0F0C04F7, 0xFD0B0AF1, 0x2A0AFEC6);
	r2 = D(r2, s1_0_1, 0x0B0307FB, 0x050809F4, 0xF9FEF6FF, 0x0A00FEFD);
	r3 = D(r3, s1_0_1, 0xFB01FCF4, 0x080202FE, 0x0CFD0207, 0x0500FD01);
	r4 = D(r4, s1_0_1, 0x03030100, 0xFA010202, 0x05FEFB01, 0xFEFFFCFB);
	r5 = D(r5, s1_0_1, 0x0D0AEAFB, 0xFE040000, 0xFBFC04F0, 0x0A0417EC);
	r6 = D(r6, s1_0_1, 0x699CF822, 0x03FCFEF5, 0x0FFE0C06, 0x060C0DF2);
	r7 = D(r7, s1_0_1, 0xE8E900E6, 0x05FEFCFB, 0xF404F6FF, 0x0404FEF7);
	r0 = D(r0, s1_0_2, 0x1BEF00E5, 0x060202FE, 0x0FDD23CA, 0x6D00DEBB);
	r1 = D(r1, s1_0_2, 0x060A05FF, 0x07010900, 0x02F8F208, 0x0511FBEF);
	r2 = D(r2, s1_0_2, 0xFFFDFF02, 0x04FBF0F8, 0xFEFDFD00, 0x04FBFD02);
	r3 = D(r3, s1_0_2, 0x0002FCFF, 0x020107FE, 0x0301FE05, 0xFD00FFFB);
	r4 = D(r4, s1_0_2, 0x02010000, 0xFCFF0000, 0x000300FF, 0x00FFFFFE);
	r5 = D(r5, s1_0_2, 0x130D09EA, 0x0202FF00, 0x0EFA02FD, 0x0101F606);
	r6 = D(r6, s1_0_2, 0x2C850EC2, 0x010406F5, 0x010305F5, 0x0004F801);
	r7 = D(r7, s1_0_2, 0xDFF302FA, 0xFA080600, 0xF70502FF, 0xFE0801FF);
	r0 = D(r0, s1_1_0, 0x050308FE, 0xFC111107, 0x0CFEFDFA, 0x10E21706);
	r1 = D(r1, s1_1_0, 0xCD17C881, 0x1004BEC0, 0x07C101F3, 0xFF100181);
	r2 = D(r2, s1_1_0, 0x00FD08F8, 0x01FCF4FB, 0x0000F6FD, 0x02FFF1FE);
	r3 = D(r3, s1_1_0, 0xFA06F2F9, 0x050601FF, 0xF208FEF7, 0x010402FC);
	r4 = D(r4, s1_1_0, 0x04050101, 0x0A000000, 0xFE0200FC, 0x0004FAFF);
	r5 = D(r5, s1_1_0, 0x0100FAFA, 0x0204FBF9, 0xFF0806FE, 0xFE03FF06);
	r6 = D(r6, s1_1_0, 0xF1141DF7, 0x030409FF, 0xFB08F6FD, 0xE5F60BEB);
	r7 = D(r7, s1_1_0, 0x0523E6EB, 0xFCFAFCF9, 0x24010907, 0xF9FD06FD);
	r0 = D(r0, s1_1_1, 0xFF0AEEEB, 0x26F60CFB, 0x0216FA90, 0x2CCD0FCA);
	r1 = D(r1, s1_1_1, 0x3D1D16F0, 0x19FE10E5, 0x0619E409, 0x13DECCAD);
	r2 = D(r2, s1_1_1, 0x13F4F7F9, 0xF3F9FEF0, 0x020406EA, 0x12F312FB);
	r3 = D(r3, s1_1_1, 0x23ED0CF6, 0x0300FA00, 0xF4EC0AEA, 0x00FAFCFC);
	r4 = D(r4, s1_1_1, 0xF700F500, 0x14FBF805, 0xFA0212F7, 0xFC0D10FE);
	r5 = D(r5, s1_1_1, 0x0B0306F6, 0xF7FAF0F4, 0x0801EB09, 0x0701E9F9);
	r6 = D(r6, s1_1_1, 0x45C6FFF7, 0xF9FCDBF1, 0x0E05E9FE, 0x07F2E1FE);
	r7 = D(r7, s1_1_1, 0x1AFCFFF5, 0x10070AE9, 0x130501F2, 0x0B05F1EA);
	r0 = D(r0, s1_1_2, 0x12F808DB, 0x13FFF911, 0x11A2FA81, 0x22AD08AA);
	r1 = D(r1, s1_1_2, 0x0011FA01, 0x0B120101, 0x0209080B, 0x1EFE1D0E);
	r2 = D(r2, s1_1_2, 0xF8F9FBFE, 0x0F05FDE9, 0x03FB0107, 0x03FDF200);
	r3 = D(r3, s1_1_2, 0xF708F200, 0x03F4F8FD, 0x0DF704F0, 0x07070504);
	r4 = D(r4, s1_1_2, 0x02FEFD02, 0x08FD01FC, 0x05040400, 0x050E0100);
	r5 = D(r5, s1_1_2, 0x20D014EC, 0x0A0A0EFC, 0xF206F6E3, 0x09010AF4);
	r6 = D(r6, s1_1_2, 0x41BCFDFB, 0x0A0D0EE9, 0x0708F6F9, 0x0309FC07);
	r7 = D(r7, s1_1_2, 0x51E2FFB9, 0x00FDF002, 0x0C03F902, 0x05FFFC09);
	r0 = D(r0, s1_2_0, 0xFF030903, 0x010BEF06, 0xFB2802F6, 0x11191CE1);
	r1 = D(r1, s1_2_0, 0x81818181, 0x46568181, 0x0A05F902, 0xF51122FC);
	r2 = D(r2, s1_2_0, 0xFD03FEFF, 0xFC0502FD, 0xFD01FDFF, 0x0207FDFE);
	r3 = D(r3, s1_2_0, 0x04FCFB04, 0xFD05F8FE, 0x03FB0103, 0x0001F2F7);
	r4 = D(r4, s1_2_0, 0xFF0404FA, 0xFF0000FD, 0x07FEFC00, 0x02020100);
	r5 = D(r5, s1_2_0, 0x0203F1FB, 0xFB020100, 0xFFFDFA01, 0xFD0904FD);
	r6 = D(r6, s1_2_0, 0x11EA2959, 0xFF0505FE, 0xFF0F0606, 0x0BF3EF05);
	r7 = D(r7, s1_2_0, 0xF6E10423, 0x0103F900, 0x02F7F602, 0xF40C00FC);
	r0 = D(r0, s1_2_1, 0x0108F1F3, 0xF904F603, 0x060B01BC, 0xFFF0FC8F);
	r1 = D(r1, s1_2_1, 0x43CF3DCE, 0xFFF204C0, 0xF6030C04, 0x28E914A9);
	r2 = D(r2, s1_2_1, 0x06FEFBFF, 0x02FFF801, 0xFAFAFEFF, 0x0CF1FB02);
	r3 = D(r3, s1_2_1, 0xFD07F8FD, 0xF1F4FEFD, 0x0306FB00, 0xF7F90700);
	r4 = D(r4, s1_2_1, 0x0E0306F9, 0xF5F10709, 0x0002F401, 0x0208FCFF);
	r5 = D(r5, s1_2_1, 0xFC121B00, 0xFCFEF803, 0xFC140300, 0x03F70300);
	r6 = D(r6, s1_2_1, 0x06B90019, 0x04F2FB02, 0xFA0C0504, 0xFB150908);
	r7 = D(r7, s1_2_1, 0xF5BAFF0C, 0x01ECFDFD, 0xFEEDF9FD, 0x06FBF4F8);
	r0 = D(r0, s1_2_2, 0xFAE61403, 0x06F404FE, 0xE7E115CA, 0x1EB3FDBF);
	r1 = D(r1, s1_2_2, 0xFC16E9FC, 0x0501FBFE, 0x03FCFC03, 0x19E91CE7);
	r2 = D(r2, s1_2_2, 0xFEFE0504, 0x0200FDF8, 0xFFFEFEFF, 0xFE060002);
	r3 = D(r3, s1_2_2, 0x0004FF01, 0x09FC01F6, 0x0605F907, 0xFEF8FAFF);
	r4 = D(r4, s1_2_2, 0xF905FCFE, 0x06FB00F9, 0x03FFFC02, 0x04F9FDFB);
	r5 = D(r5, s1_2_2, 0xFAF9F4F6, 0x04030000, 0x07E80805, 0x02FFF9FC);
	r6 = D(r6, s1_2_2, 0x24D402FF, 0xFD08FEF7, 0xFA090106, 0xFE00FE00);
	r7 = D(r7, s1_2_2, 0x0B8103FE, 0xFE07F9FE, 0x06F6FCFD, 0xFF060000);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE0A0904, 0xFD0CFEF9, 0xEB27F3E6, 0x84682EF4);
	r1 = D(r1, s0_0_0, 0x0A00EEF0, 0x000CEAFD, 0xF0C4E90F, 0xDE1716F8);
	r2 = D(r2, s0_0_0, 0x06F5FEFC, 0xF60CF8FB, 0xFE07FC00, 0xFD05FE00);
	r3 = D(r3, s0_0_0, 0xFD0A0103, 0xF6FFFF01, 0xFBF7FF04, 0x0002FA00);
	r4 = D(r4, s0_0_0, 0x0001FF02, 0xFF0100FF, 0x00F90202, 0xFFFEFFFF);
	r5 = D(r5, s0_0_0, 0x06FC0903, 0x0106FD02, 0xF908FB05, 0xF91CFFFA);
	r6 = D(r6, s0_0_0, 0x81D51AFD, 0x0300FE02, 0x0AEC0A07, 0x0BFFFF01);
	r7 = D(r7, s0_0_0, 0xF01E0E0D, 0xFE060102, 0xFD0800FB, 0xFE0601FF);
	r0 = D(r0, s0_0_1, 0x071001F4, 0xF9FB2209, 0xF3170B3E, 0x9BB8FD15);
	r1 = D(r1, s0_0_1, 0xEDFAF906, 0xF1FF0708, 0xFE10F109, 0x14F61911);
	r2 = D(r2, s0_0_1, 0xF7FBFB04, 0xF10BEC0B, 0x01000102, 0x020AFB02);
	r3 = D(r3, s0_0_1, 0x070A0000, 0xF8FE0906, 0xFFF5F70A, 0xF50AFE04);
	r4 = D(r4, s0_0_1, 0x02FF0200, 0xFB080100, 0x0101FFFF, 0x030201FE);
	r5 = D(r5, s0_0_1, 0x0213F3FF, 0xFC0401FB, 0xE9FF0803, 0xE8F7FC0F);
	r6 = D(r6, s0_0_1, 0x81F9CFE7, 0xF901FF02, 0xF9F7FCFB, 0xFA04E810);
	r7 = D(r7, s0_0_1, 0xF43B22F3, 0x01FC0A02, 0x00FD0101, 0x05FE0102);
	r0 = D(r0, s0_0_2, 0x0BEE270F, 0xFE030301, 0xDD10F909, 0xDFD7113F);
	r1 = D(r1, s0_0_2, 0xFE030C08, 0xFFFF01FD, 0xFEFA0604, 0xF524E70A);
	r2 = D(r2, s0_0_2, 0xFDFC02FF, 0x020111F6, 0x02030101, 0xFEFEFD00);
	r3 = D(r3, s0_0_2, 0xFAFB0603, 0xF9020202, 0x010406FE, 0x03040000);
	r4 = D(r4, s0_0_2, 0x00000200, 0x00020200, 0xFF050203, 0x0002FD01);
	r5 = D(r5, s0_0_2, 0xF113EB0E, 0x0107FEFE, 0xF71FE607, 0xFE0BFEFD);
	r6 = D(r6, s0_0_2, 0xCB25212E, 0x0508FBFC, 0x0A0A0400, 0xFC03FE04);
	r7 = D(r7, s0_0_2, 0xF22629DE, 0xFFFF0103, 0x03FEFF02, 0xFE010001);
	r0 = D(r0, s0_1_0, 0xFB010203, 0xE51011E3, 0xE411FC0B, 0x8FF6D9D9);
	r1 = D(r1, s0_1_0, 0x2D0D1313, 0xD43CF9FD, 0xCB14F70B, 0xC3CB59EB);
	r2 = D(r2, s0_1_0, 0x02F60E03, 0x030703FA, 0x0408F701, 0x0313F8FD);
	r3 = D(r3, s0_1_0, 0xDA1B09F3, 0xFA000802, 0xE10209F8, 0xFB11F802);
	r4 = D(r4, s0_1_0, 0x0106FDFE, 0x0404FC02, 0xF50BFF08, 0x010EFE00);
	r5 = D(r5, s0_1_0, 0x060DFF05, 0x03150204, 0x01FB01FD, 0x0B0104F4);
	r6 = D(r6, s0_1_0, 0xC3815FEC, 0x06E80703, 0xF4060BED, 0xA405FDFD);
	r7 = D(r7, s0_1_0, 0xF1DA2A04, 0xF8150CF7, 0xD6E8F20D, 0xF60108FA);
	r0 = D(r0, s0_1_1, 0x042CE7F0, 0xEB03D21D, 0x19E5DBDC, 0xFA0009E3);
	r1 = D(r1, s0_1_1, 0xF9FAF801, 0x11070911, 0xF5FA0308, 0xDFEADD05);
	r2 = D(r2, s0_1_1, 0xF002E40D, 0xDAF32AE3, 0xECED060E, 0xEE1DF7FC);
	r3 = D(r3, s0_1_1, 0xC407E31A, 0x0705F80B, 0xC2F607F7, 0xF7E20C09);
	r4 = D(r4, s0_1_1, 0x0208F7F9, 0xFDF4F408, 0xF0F20309, 0xF6E80EFE);
	r5 = D(r5, s0_1_1, 0xDD030BE4, 0xFDF80E0F, 0xE81B05F6, 0xE50E0CFE);
	r6 = D(r6, s0_1_1, 0x9BE2001A, 0xEC0D18F6, 0xF1060601, 0xEEF90505);
	r7 = D(r7, s0_1_1, 0x8EB30A22, 0xF614D712, 0x0411F70B, 0x04000101);
	r0 = D(r0, s0_1_2, 0x81FC1801, 0xFF03F8FE, 0x8129E6E2, 0xE61813EA);
	r1 = D(r1, s0_1_2, 0xFFFF0806, 0xF40801FD, 0x080BF5FF, 0xC801FBF1);
	r2 = D(r2, s0_1_2, 0xFAFD0100, 0xFF09F706, 0x0900F900, 0x00FDFD05);
	r3 = D(r3, s0_1_2, 0x060103FB, 0xFF000C02, 0xF601F802, 0x0600F801);
	r4 = D(r4, s0_1_2, 0x010100FD, 0x0903FCFF, 0xFEFDFD06, 0xFF040101);
	r5 = D(r5, s0_1_2, 0xDBFDE710, 0xFA0302FF, 0x850C000A, 0xF0FDFC04);
	r6 = D(r6, s0_1_2, 0xC60CD601, 0xF902FDFF, 0xF70AF701, 0x040500FC);
	r7 = D(r7, s0_1_2, 0x99D0182C, 0xFCF90AFD, 0xFA010002, 0xFE00FF03);
	r0 = D(r0, s0_2_0, 0xF8060C02, 0xF5010D03, 0xE5F50CFB, 0xF20A28CA);
	r1 = D(r1, s0_2_0, 0x81CF1B81, 0xB40B43FC, 0x04060600, 0xC80709DC);
	r2 = D(r2, s0_2_0, 0xFF01FF00, 0x02FD0107, 0x00070002, 0xFB07FB04);
	r3 = D(r3, s0_2_0, 0x0101FF02, 0xF50A05FA, 0x06F803F6, 0xF806FCFC);
	r4 = D(r4, s0_2_0, 0x01FB09FE, 0xFD0004FB, 0xFFF701FE, 0xFFFD00FF);
	r5 = D(r5, s0_2_0, 0x01FCFB02, 0x0205FEFC, 0x02FB02FE, 0xFB0500FD);
	r6 = D(r6, s0_2_0, 0xC368FED2, 0x000CFA0A, 0x0511FB09, 0xF9FEFAFD);
	r7 = D(r7, s0_2_0, 0xF04004D0, 0xF20805F9, 0xF71004EF, 0xF30106F4);
	r0 = D(r0, s0_2_1, 0x0814F100, 0x030908F0, 0xDD1111C7, 0xEDF50317);
	r1 = D(r1, s0_2_1, 0xD7F6FE13, 0xDDF1F8EC, 0xFFFEFB05, 0xD5F120F7);
	r2 = D(r2, s0_2_1, 0x0004FEFF, 0xF800FDFF, 0xFCFFFFFA, 0xFA06F702);
	r3 = D(r3, s0_2_1, 0xF9040603, 0xFFFF00E3, 0xFE0108F9, 0xFAFF01F7);
	r4 = D(r4, s0_2_1, 0xF502FC01, 0x08F9FFE8, 0xFD070102, 0x0100020F);
	r5 = D(r5, s0_2_1, 0x03F60AE1, 0xFEFE0103, 0x050CFA12, 0xFF0204FD);
	r6 = D(r6, s0_2_1, 0xCC263AC8, 0x0307F8F9, 0x0912020F, 0x0C05FD06);
	r7 = D(r7, s0_2_1, 0xFC32F8B5, 0xE30008FA, 0x020203F5, 0xFA00040A);
	r0 = D(r0, s0_2_2, 0x1406FBE2, 0xFD041105, 0x1DE4CCCF, 0xD3FB53E2);
	r1 = D(r1, s0_2_2, 0x07F50CFF, 0x03FE0D0F, 0xFC0202FC, 0xE9ECFD14);
	r2 = D(r2, s0_2_2, 0x04FDFFFF, 0xF3000102, 0xFF000002, 0x03FEFF03);
	r3 = D(r3, s0_2_2, 0x01000201, 0xF0040004, 0x0809FE00, 0xFF000101);
	r4 = D(r4, s0_2_2, 0x03FD01FF, 0xF40002FF, 0xFF01FE01, 0xFE0207FE);
	r5 = D(r5, s0_2_2, 0xF8F80E03, 0xFC0101FD, 0x01050605, 0xF60300FD);
	r6 = D(r6, s0_2_2, 0x05153E09, 0xF30201F9, 0xFC030002, 0xFA03FD00);
	r7 = D(r7, s0_2_2, 0xF3F60506, 0x020100FF, 0xFFFE0203, 0xFF01FB04);
	r0 = D(r0, s1_0_0, 0xF902F903, 0xF3F4FBFC, 0x0C1205ED, 0x3419281D);
	r1 = D(r1, s1_0_0, 0xF92CF5FB, 0xF10100FA, 0x1903C103, 0x09EB0FE6);
	r2 = D(r2, s1_0_0, 0xFF04FF00, 0xFBE30A00, 0xFE0304FE, 0xFDFB0200);
	r3 = D(r3, s1_0_0, 0xFB03FC01, 0xF8FBFD01, 0xFEDAF80A, 0x04000302);
	r4 = D(r4, s1_0_0, 0xFC010000, 0xFE0202FC, 0x00FCFC01, 0xFDFE0100);
	r5 = D(r5, s1_0_0, 0xFAF2FD09, 0xFEFE02FE, 0xF6F801F8, 0x03E40DF0);
	r6 = D(r6, s1_0_0, 0xC2EBA9D1, 0xF503FFFF, 0x07FDF206, 0x06000501);
	r7 = D(r7, s1_0_0, 0x0014EEF6, 0xFD05FBFD, 0xFD06FFFE, 0x0305FFFF);
	r0 = D(r0, s1_0_1, 0xF5EC00FA, 0x0700FFFF, 0x180EF7CE, 0x13C08181);
	r1 = D(r1, s1_0_1, 0x070AFA05, 0xFF16F6FA, 0x19FBE5EC, 0x1B05D103);
	r2 = D(r2, s1_0_1, 0x03F7F500, 0x0808EE02, 0x0000FCFB, 0xFAF7F200);
	r3 = D(r3, s1_0_1, 0x05F1F4FE, 0xFF0003FF, 0x0406FC03, 0x00000603);
	r4 = D(r4, s1_0_1, 0xFFFF0500, 0xFE030201, 0x0402FF03, 0xFE01FE01);
	r5 = D(r5, s1_0_1, 0x0BFC11EE, 0xFE000302, 0xFEF8F7F3, 0xFF06DCF6);
	r6 = D(r6, s1_0_1, 0x1E34F4BD, 0x050EFAFE, 0x00FEF405, 0x0EE3F6F9);
	r7 = D(r7, s1_0_1, 0xEBFBF0EC, 0x03F6F602, 0x02FD0300, 0xFFFAFBFF);
	r0 = D(r0, s1_0_2, 0x150FEC03, 0xFE01FB03, 0x10BC02E0, 0x1D17F110);
	r1 = D(r1, s1_0_2, 0x00FDFAFF, 0x06E6FE05, 0x05FDF7F4, 0x0D83D714);
	r2 = D(r2, s1_0_2, 0xFEFEFEFB, 0xFE03FB02, 0x02FD00FD, 0x0003FDFC);
	r3 = D(r3, s1_0_2, 0x00050301, 0xF800FC01, 0xF900FF02, 0x01FBFAFD);
	r4 = D(r4, s1_0_2, 0xFC02FDFF, 0x0202FFFE, 0xFB010001, 0xFB00FD01);
	r5 = D(r5, s1_0_2, 0x13E2D1F7, 0xFDFC0200, 0x03E30B04, 0x01F90703);
	r6 = D(r6, s1_0_2, 0x2110B4F7, 0xFFFD0106, 0xF9F80302, 0x0100F7FD);
	r7 = D(r7, s1_0_2, 0xF417EFF3, 0x02020200, 0x04FEFEFD, 0x0001FF02);
	r0 = D(r0, s1_1_0, 0x0B03FC0C, 0x00F1E8F7, 0xEE090C06, 0x151513D1);
	r1 = D(r1, s1_1_0, 0x161FE3F6, 0x02D81901, 0x1302B5DA, 0x0ACBCFB7);
	r2 = D(r2, s1_1_0, 0x0303F800, 0xFEEDFE02, 0x04FE01F8, 0xFDF70200);
	r3 = D(r3, s1_1_0, 0x04FE06F8, 0xE0F7FB04, 0xF1FB0CFB, 0xF2F0FFFA);
	r4 = D(r4, s1_1_0, 0xF101FD00, 0xFB0101FE, 0xFDF90502, 0xF6F70001);
	r5 = D(r5, s1_1_0, 0xF7F4FCF3, 0xF9FA01FB, 0x0E01FEFB, 0x0BFAFCF6);
	r6 = D(r6, s1_1_0, 0x28B1D0F5, 0xFBFD00FD, 0x15FE11DE, 0x1308F3EB);
	r7 = D(r7, s1_1_0, 0xFEB2020C, 0x060106F7, 0x13F5D10A, 0x0D03F0F5);
	r0 = D(r0, s1_1_1, 0x08E700EC, 0x07E2EC0B, 0x13CFFEDB, 0x0CC38181);
	r1 = D(r1, s1_1_1, 0x28DADF02, 0x14FED7F5, 0x02FA00EF, 0x182F06B2);
	r2 = D(r2, s1_1_1, 0x1001ECF1, 0xFF10EFF6, 0x0403F5FD, 0xFCFCECF9);
	r3 = D(r3, s1_1_1, 0x10EFD5F5, 0xFDFEF5FF, 0x060ADCCF, 0x0A04E5FA);
	r4 = D(r4, s1_1_1, 0xFC00FE01, 0x01FDFA0F, 0xFB03F3F2, 0x0604FE03);
	r5 = D(r5, s1_1_1, 0x1105F504, 0x01FBF5FC, 0x11F1050B, 0xF6120102);
	r6 = D(r6, s1_1_1, 0xCF81F336, 0x0C0A0AEF, 0x1205E1BB, 0x09FCDFEF);
	r7 = D(r7, s1_1_1, 0x09D5141E, 0x13DBE7F7, 0xF8EFE902, 0x05FEE9FC);
	r0 = D(r0, s1_1_2, 0x100DCDF6, 0xFAFDFFF4, 0x39FC9FB9, 0xC935E481);
	r1 = D(r1, s1_1_2, 0x060CF3FA, 0x08EAF003, 0x02FE09FB, 0x14D4FFFA);
	r2 = D(r2, s1_1_2, 0xFB0502FC, 0x04FAF6FF, 0x04F4FBFE, 0x0305FCFF);
	r3 = D(r3, s1_1_2, 0xFB09FB02, 0xFFFEFBFE, 0x08FAEDF9, 0x08EEFAFE);
	r4 = D(r4, s1_1_2, 0xFEFF0400, 0xFF010105, 0x00FCFE03, 0xFCFD01FF);
	r5 = D(r5, s1_1_2, 0x19E9E9E7, 0x0100FF01, 0xF60DF9ED, 0x0AFFFBFB);
	r6 = D(r6, s1_1_2, 0xECD0D1F7, 0x0300F8F2, 0xFFFEF4F0, 0x00FC04FD);
	r7 = D(r7, s1_1_2, 0x12FCB0EC, 0x000602FF, 0x04FE0101, 0xFD010301);
	r0 = D(r0, s1_2_0, 0xFA020507, 0xF0FC030D, 0xE80F12FA, 0xF41109F8);
	r1 = D(r1, s1_2_0, 0xEC170D81, 0x09811D81, 0x04F804F1, 0xDD0BBCD1);
	r2 = D(r2, s1_2_0, 0xFC0000FD, 0xFFF9FFFC, 0x0003FFFD, 0xFDFF0001);
	r3 = D(r3, s1_2_0, 0x01FEFF00, 0xFDFA0000, 0x11EF00F5, 0x08FDFEFE);
	r4 = D(r4, s1_2_0, 0xFCFCFD01, 0xFEECFEFC, 0x00F8FFFE, 0xFCFAFF01);
	r5 = D(r5, s1_2_0, 0x09EBFAFE, 0xFBFDFAF7, 0xF0FF01FF, 0xFBFC00FF);
	r6 = D(r6, s1_2_0, 0x993397D3, 0xF703FCFF, 0xEF0000FA, 0x0AF00102);
	r7 = D(r7, s1_2_0, 0xD90E04EF, 0xFE0500FD, 0xFB0FFDF4, 0x050605FB);
	r0 = D(r0, s1_2_1, 0x14ECFEE5, 0xE50702F0, 0xF43B07E5, 0x1AB6C9DA);
	r1 = D(r1, s1_2_1, 0x15EDB5FD, 0x160FDBD6, 0x04010BF6, 0xF12AC181);
	r2 = D(r2, s1_2_1, 0x03F502FB, 0xFF060B00, 0x0101FFFF, 0xFC09FBF9);
	r3 = D(r3, s1_2_1, 0xFEFF04FF, 0xFF00F3F6, 0x01E4FE06, 0x07FEFEF7);
	r4 = D(r4, s1_2_1, 0x0002F900, 0x00F7FEF6, 0xFDFF0005, 0x01080402);
	r5 = D(r5, s1_2_1, 0xFD080CFC, 0xFA050601, 0xFEFD0102, 0xFE1501FB);
	r6 = D(r6, s1_2_1, 0xDC40B1F1, 0xFD17FFFB, 0xECF3FAFB, 0xF9FE05F7);
	r7 = D(r7, s1_2_1, 0xF92AEFDD, 0x06FAF1F8, 0xFA04E9FA, 0x01FFECF7);
	r0 = D(r0, s1_2_2, 0x0A0904FF, 0x030CE000, 0x12CDEECE, 0xF210F2A0);
	r1 = D(r1, s1_2_2, 0x08EAE8FE, 0xFCD7DEFC, 0xFCFAFAFF, 0x24BDC0D8);
	r2 = D(r2, s1_2_2, 0xFD0205FA, 0xFEFAF600, 0xFF01FA01, 0xFD0501FC);
	r3 = D(r3, s1_2_2, 0xFD01FBFC, 0x0103D9FE, 0xF9FE0CFD, 0xFD01F300);
	r4 = D(r4, s1_2_2, 0xFB03FCFE, 0x00FCFDFE, 0xFC0003FD, 0xF9FCFFFE);
	r5 = D(r5, s1_2_2, 0x09F1E1FA, 0xFF02FFFE, 0xFFFE05F9, 0x02F90002);
	r6 = D(r6, s1_2_2, 0xEC5091E3, 0xFFFFFA01, 0xF70603FF, 0xFEFDFE01);
	r7 = D(r7, s1_2_2, 0x0523EBFC, 0xF905FD02, 0x0105F204, 0xFC0100FB);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE0203FE, 0xFA09FAFB, 0x02F4F3F8, 0x002C3DEB);
	r1 = D(r1, s0_0_0, 0xE80BF105, 0x00FCF4F4, 0x0D0903DF, 0x061F0EDD);
	r2 = D(r2, s0_0_0, 0xFE00FE03, 0xFF01FAFC, 0x0004FD02, 0x01020205);
	r3 = D(r3, s0_0_0, 0xFD030AFC, 0x020100FF, 0xFE020EFD, 0x020100FA);
	r4 = D(r4, s0_0_0, 0x01010102, 0x0500FF03, 0x02FE0702, 0x0100FC00);
	r5 = D(r5, s0_0_0, 0xFAFCF9FC, 0x00000702, 0xFE0D02ED, 0xFC04F8F4);
	r6 = D(r6, s0_0_0, 0x02FA3EF6, 0xFC0203F4, 0xF70C17F9, 0xFD00F5F3);
	r7 = D(r7, s0_0_0, 0xEF151CEF, 0xFE0406FE, 0x0BF7FE07, 0xFB01FCFD);
	r0 = D(r0, s0_0_1, 0x070E09F0, 0xFDF61AF7, 0xC422FAF0, 0xF32E2CE2);
	r1 = D(r1, s0_0_1, 0x15FEF4F1, 0xE60C04F4, 0xF2F62204, 0xFA1FEC0D);
	r2 = D(r2, s0_0_1, 0xFD051B02, 0xF40824FB, 0xFEFD0307, 0x0005FDFD);
	r3 = D(r3, s0_0_1, 0x0E0205FE, 0xFD0008F4, 0x0FFE04F4, 0xF6020501);
	r4 = D(r4, s0_0_1, 0x030405FB, 0x05FFFF03, 0x03FB00FD, 0x02FFFD01);
	r5 = D(r5, s0_0_1, 0xF70BF8F1, 0x00060B01, 0xF4FDFBFF, 0xE605130D);
	r6 = D(r6, s0_0_1, 0xF9812817, 0xFE090B07, 0xE7081EF9, 0xEFF918FC);
	r7 = D(r7, s0_0_1, 0xEF0B0503, 0x0F05FDFA, 0x04FDFAF8, 0x0C0303FC);
	r0 = D(r0, s0_0_2, 0xE002FCFE, 0xEC0401F6, 0x7B0931E0, 0xBBDBCA08);
	r1 = D(r1, s0_0_2, 0xFCFD07EF, 0x050311FE, 0x0301F4F0, 0x1D12EFE1);
	r2 = D(r2, s0_0_2, 0x07060F03, 0x1608FBF6, 0xFAFD0200, 0x03000102);
	r3 = D(r3, s0_0_2, 0x07FE00F3, 0xF80501FD, 0x0502FD03, 0x0000FDFF);
	r4 = D(r4, s0_0_2, 0x000304FF, 0xFD00FA03, 0x03000100, 0x07000000);
	r5 = D(r5, s0_0_2, 0xDCFEF9F7, 0xFE02F701, 0xF10407F3, 0x0506F9F6);
	r6 = D(r6, s0_0_2, 0xB29323F4, 0x03FFF3F9, 0xFAFE0504, 0x0402FFF9);
	r7 = D(r7, s0_0_2, 0xFB20E810, 0x02FD01F3, 0xF60000FE, 0x05FFFEF6);
	r0 = D(r0, s0_1_0, 0xFC07F5FB, 0xFEFB090F, 0xEF19F412, 0x2A390C09);
	r1 = D(r1, s0_1_0, 0x031BF9E3, 0xFDAAC1E9, 0x12E31509, 0xDBF40EF3);
	r2 = D(r2, s0_1_0, 0x000006FF, 0x02FEFBFD, 0x0105F902, 0x0002F601);
	r3 = D(r3, s0_1_0, 0x0407FEF1, 0xF7FE09FF, 0x060F08FF, 0xFC060008);
	r4 = D(r4, s0_1_0, 0xFE0202FF, 0xFEFFFF01, 0x02061300, 0x00FDFF04);
	r5 = D(r5, s0_1_0, 0xFB0206F8, 0xFDFD00FD, 0x02FF07F9, 0xFF0501F7);
	r6 = D(r6, s0_1_0, 0xE821B020, 0xFD01FFF5, 0xFCFFF0EB, 0xF7F71504);
	r7 = D(r7, s0_1_0, 0x01F3FBEB, 0x040CFCF5, 0xF7F339FA, 0x010911EE);
	r0 = D(r0, s0_1_1, 0xFAFFFCF4, 0x0AC6F102, 0xF606C0F7, 0xF49833F6);
	r1 = D(r1, s0_1_1, 0x03F52405, 0xC8FE3704, 0x0CFA06DE, 0xC9F1C61F);
	r2 = D(r2, s0_1_1, 0x09FA000F, 0x0C08E701, 0x00EE11FB, 0x010A0605);
	r3 = D(r3, s0_1_1, 0x01E502F9, 0xFAFAFF0B, 0xF9E7220B, 0x03FE12F9);
	r4 = D(r4, s0_1_1, 0x0100000E, 0xF6F11005, 0xFF032CFD, 0x090519FE);
	r5 = D(r5, s0_1_1, 0x0A150F05, 0x0502F30B, 0xF8F2F2E5, 0x00F9F7EC);
	r6 = D(r6, s0_1_1, 0xBEE3CE10, 0x020607FD, 0x01CAD8ED, 0x15FDFBEF);
	r7 = D(r7, s0_1_1, 0x19CD22F0, 0xF0E51802, 0xFEEB1A07, 0x19F4F702);
	r0 = D(r0, s0_1_2, 0xFCDBFEF0, 0x1104FA03, 0x03EBF6F9, 0x15D2B934);
	r1 = D(r1, s0_1_2, 0x090509EF, 0xFE0AF300, 0x12FE02FB, 0x34F60AB9);
	r2 = D(r2, s0_1_2, 0x17090802, 0x07FAFAFC, 0xF4FBF4FC, 0x19FDFB06);
	r3 = D(r3, s0_1_2, 0x0D090304, 0x05F70303, 0xFEFBFAF1, 0xF3F6FFF9);
	r4 = D(r4, s0_1_2, 0x0602FF00, 0x00FA0C07, 0xFCFD0900, 0xE7040E03);
	r5 = D(r5, s0_1_2, 0xD9D4C5F9, 0x04FBFBFB, 0x15F2E904, 0xFBF8FCF9);
	r6 = D(r6, s0_1_2, 0x15EDF1EB, 0xF5FC0000, 0xFFFDEEE8, 0x1100FEF7);
	r7 = D(r7, s0_1_2, 0xF9AE20DF, 0x0407FFFD, 0xFA010609, 0x0201FBF9);
	r0 = D(r0, s0_2_0, 0xF8FD0703, 0xF4F00AF4, 0xF8F1F7FC, 0x0D140DFB);
	r1 = D(r1, s0_2_0, 0xE61ECCFE, 0x818181D1, 0xFEF5FFE9, 0xD608F322);
	r2 = D(r2, s0_2_0, 0x0103FD00, 0x000105FA, 0xFF01FE01, 0x01FF0600);
	r3 = D(r3, s0_2_0, 0x01FD03FC, 0xFDFD03FA, 0xFDFE01F4, 0x020005FD);
	r4 = D(r4, s0_2_0, 0xFEFD00FF, 0xFB02FF03, 0x000203F9, 0xFF01FD00);
	r5 = D(r5, s0_2_0, 0xFFFAFDF2, 0x01040000, 0x02060A05, 0x01FC07F9);
	r6 = D(r6, s0_2_0, 0x0D110FE5, 0x000306FD, 0xFC08FCF6, 0x06FB02F4);
	r7 = D(r7, s0_2_0, 0xFB16FA1F, 0xFEFF06FA, 0xFD0900F9, 0xFB01F8FB);
	r0 = D(r0, s0_2_1, 0xFA0E01F2, 0xED11EEFB, 0xFA200719, 0xEFCFC204);
	r1 = D(r1, s0_2_1, 0xC5DF0815, 0xE4E90A05, 0x0602FDF9, 0x14FEF321);
	r2 = D(r2, s0_2_1, 0x06FDFE00, 0x01F80AFB, 0x00FDF9FF, 0x07FC01FD);
	r3 = D(r3, s0_2_1, 0x0000FEF9, 0x0103EDFC, 0xF3D901F2, 0xFFF7F302);
	r4 = D(r4, s0_2_1, 0xF4F50500, 0xF20BE9F4, 0xFDFA0D05, 0x050307FF);
	r5 = D(r5, s0_2_1, 0x03FC010D, 0x03FF0000, 0xFDFE00FC, 0xFF00FB04);
	r6 = D(r6, s0_2_1, 0xFD2FE7EA, 0xFB05F900, 0x06FCFCF5, 0x04FD05FA);
	r7 = D(r7, s0_2_1, 0x141CE802, 0x06FFE9F9, 0x0807F605, 0x0CFB04F6);
	r0 = D(r0, s0_2_2, 0xF6F7DEFE, 0xF9FCFFF6, 0xFEDDE80D, 0x23E63312);
	r1 = D(r1, s0_2_2, 0xFE0307EC, 0x00F7F4F5, 0xFD020104, 0xFBFAC9C6);
	r2 = D(r2, s0_2_2, 0x070306FF, 0x00FCFFFA, 0x06FF0101, 0x03FF04FE);
	r3 = D(r3, s0_2_2, 0x080106FB, 0xFFFE01F6, 0x04FAFDF5, 0x050005FE);
	r4 = D(r4, s0_2_2, 0x04030008, 0xFA05FB00, 0x08030500, 0x0701FFFF);
	r5 = D(r5, s0_2_2, 0xFD01F5FE, 0x0300F900, 0x05F704EF, 0x00FEFBFA);
	r6 = D(r6, s0_2_2, 0xFC2413F6, 0x0200FCFD, 0x05FF02F6, 0xFC03FD00);
	r7 = D(r7, s0_2_2, 0x041A02F6, 0x13050EFC, 0x0E0109FA, 0x05030703);
	r0 = D(r0, s1_0_0, 0x04FE0301, 0xF9030E08, 0xD4FD0CEC, 0xF0EE2803);
	r1 = D(r1, s1_0_0, 0x1215E5F2, 0xF502FD00, 0x0608FDF0, 0xED081918);
	r2 = D(r2, s1_0_0, 0x0402FD07, 0x01020400, 0xFE0201F5, 0xFEFC05EF);
	r3 = D(r3, s1_0_0, 0x00FCFF04, 0x0001FBFF, 0x050405F1, 0xFF01FE02);
	r4 = D(r4, s1_0_0, 0x01FD0103, 0xFDFF0401, 0x00FFFCF9, 0xFFFFFFFD);
	r5 = D(r5, s1_0_0, 0x0507F5F4, 0xFFFF00FC, 0x03010008, 0xFE0FFB1A);
	r6 = D(r6, s1_0_0, 0x1F080915, 0x03FA0204, 0xFE0608F2, 0x0600F1F7);
	r7 = D(r7, s1_0_0, 0x0002021C, 0xFF020004, 0xF5FBF1F2, 0x0007FB07);
	r0 = D(r0, s1_0_1, 0xFC03F912, 0x00F9CEEA, 0x5AE2EEA0, 0x1381F0A2);
	r1 = D(r1, s1_0_1, 0x102101FC, 0x0400F0F1, 0xF60E01F7, 0x201E81D5);
	r2 = D(r2, s1_0_1, 0xFF0A09FC, 0x0802FAF8, 0x06FCEFF3, 0x02F8F910);
	r3 = D(r3, s1_0_1, 0xFF07FBFF, 0xFE0BD7EF, 0xF805F8DE, 0xFC0AF8E6);
	r4 = D(r4, s1_0_1, 0xFF0202F4, 0xF7F8FBEC, 0x010405F6, 0x02FEFD0F);
	r5 = D(r5, s1_0_1, 0xFDF90A0A, 0xFB07EFF4, 0x04EDF813, 0xF2DDF9EC);
	r6 = D(r6, s1_0_1, 0x1CF0DE10, 0x02E7EBFD, 0xF60CE5F6, 0xF4020BED);
	r7 = D(r7, s1_0_1, 0x06EAD8EF, 0x0000F0F4, 0x0E07E905, 0x0406F9F2);
	r0 = D(r0, s1_0_2, 0x06CBD1FF, 0x060904F8, 0x8101D81F, 0xF0DA0A07);
	r1 = D(r1, s1_0_2, 0x1103F903, 0x0EFBFAF8, 0x0003F80D, 0xCC04EDEB);
	r2 = D(r2, s1_0_2, 0xFBFF0CFA, 0xFC04FB03, 0xFE010203, 0x00FEFCF8);
	r3 = D(r3, s1_0_2, 0x0202FD04, 0xFA01F6F8, 0xECF0F5F9, 0x05FB05FF);
	r4 = D(r4, s1_0_2, 0xFBFFFFFF, 0x0507F6FE, 0xFAFCFDFC, 0x030604FC);
	r5 = D(r5, s1_0_2, 0xF7DDE0E3, 0xFC0A0700, 0xED16E8F8, 0xE50CF406);
	r6 = D(r6, s1_0_2, 0x232D3413, 0xF90F12FE, 0x01F400F9, 0x05FD0205);
	r7 = D(r7, s1_0_2, 0xFDF2DF08, 0x03030803, 0x0909F800, 0x000207FD);
	r0 = D(r0, s1_1_0, 0x02FCFF06, 0xD9FC0908, 0xF1F4EEFC, 0xD8C90712);
	r1 = D(r1, s1_1_0, 0x5CF427C7, 0xF6131B01, 0x0A0B03FC, 0xE904FBF5);
	r2 = D(r2, s1_1_0, 0x03FC020D, 0xFD030102, 0x0302FEFE, 0x0504FE0A);
	r3 = D(r3, s1_1_0, 0xFD04FF0A, 0x06FE0505, 0x07020A13, 0x020204F8);
	r4 = D(r4, s1_1_0, 0x00040017, 0xFFFDFD0D, 0xFD07F705, 0x020301F4);
	r5 = D(r5, s1_1_0, 0x02FE04F8, 0x000400FD, 0x0100FB00, 0x02F8FFFE);
	r6 = D(r6, s1_1_0, 0x9BB72BF9, 0x01FBFDF8, 0x0DFBF608, 0xF7F7FF0D);
	r7 = D(r7, s1_1_0, 0xF0F91FF2, 0x02F9FF10, 0xDDFB0312, 0xFCF2F824);
	r0 = D(r0, s1_1_1, 0x05FD0006, 0xE008F417, 0x57F408F8, 0xD1EC9ED8);
	r1 = D(r1, s1_1_1, 0xD41116EB, 0x0FDAEDF4, 0xE8F0FC0A, 0xEBDEC6E3);
	r2 = D(r2, s1_1_1, 0x050C0101, 0x08EE040D, 0xFDF0040F, 0xECF3FE10);
	r3 = D(r3, s1_1_1, 0x09F5FAFB, 0xFEFC1223, 0x10D3102A, 0x00F3011F);
	r4 = D(r4, s1_1_1, 0xFF070A05, 0xFBFD0D2C, 0x02F2FF00, 0xFEF60006);
	r5 = D(r5, s1_1_1, 0xFEE9F12E, 0xF8EA0400, 0xF90C0904, 0xFA05FC0A);
	r6 = D(r6, s1_1_1, 0x1181FBDC, 0xFF1BF013, 0x18E0EF09, 0xFDFE09FF);
	r7 = D(r7, s1_1_1, 0xDA1E0EF4, 0xE20A010B, 0xEDF410F1, 0xFC060CF4);
	r0 = D(r0, s1_1_2, 0xE7E0FC1F, 0xD2F10A02, 0x85F0EB2C, 0xF3011C1F);
	r1 = D(r1, s1_1_2, 0x14F91E06, 0x0419FEF8, 0x0B05F604, 0xD6F3FEFF);
	r2 = D(r2, s1_1_2, 0x01F90E00, 0x0121F607, 0x0302F6FF, 0x0205FD02);
	r3 = D(r3, s1_1_2, 0xF4FC0301, 0xF9030B06, 0x19FC0D07, 0xFE09F503);
	r4 = D(r4, s1_1_2, 0x020601FF, 0xFC080108, 0x02FCFCFA, 0xED17FB0D);
	r5 = D(r5, s1_1_2, 0xFAF5E604, 0x021305FE, 0xF7D0F200, 0x0F0EF803);
	r6 = D(r6, s1_1_2, 0x9D81FCF2, 0x04190BF9, 0x0504FB03, 0xFB04F406);
	r7 = D(r7, s1_1_2, 0xC5A128E0, 0x02F904FF, 0x06F20FF4, 0xFD07FA02);
	r0 = D(r0, s1_2_0, 0x01010301, 0xF507F806, 0xFE15FB05, 0xFAE518FC);
	r1 = D(r1, s1_2_0, 0x6F81AC81, 0x8181D181, 0x01F6010F, 0x11FCFEF9);
	r2 = D(r2, s1_2_0, 0xFEFE0006, 0x0200FF01, 0x05000200, 0x0300FDFF);
	r3 = D(r3, s1_2_0, 0x010100FE, 0x01020002, 0xF9FDFAFA, 0x0303FB04);
	r4 = D(r4, s1_2_0, 0xF90200FA, 0x010102FE, 0xFF00FE00, 0xFF0000FC);
	r5 = D(r5, s1_2_0, 0x01FC0105, 0x01FFFF02, 0x040702FF, 0x0401FD06);
	r6 = D(r6, s1_2_0, 0x18FF43E3, 0x0101FC05, 0x05FFFEFA, 0xFC0800FF);
	r7 = D(r7, s1_2_0, 0x2AF80512, 0x01040102, 0x0707FDF7, 0x02FBFDFE);
	r0 = D(r0, s1_2_1, 0x0306FD05, 0x0BF608EA, 0x4CDB04FB, 0x2FFA171B);
	r1 = D(r1, s1_2_1, 0x21200AFC, 0x00AD0DED, 0x0CF9F404, 0x0C011504);
	r2 = D(r2, s1_2_1, 0xFD01FDFE, 0x00FE0403, 0x01FD04FC, 0x01FB0105);
	r3 = D(r3, s1_2_1, 0xFDFF0402, 0x07F802ED, 0xEB0FFDFE, 0x04EF07F9);
	r4 = D(r4, s1_2_1, 0xFF04FA14, 0x0703FDEE, 0xFFFF0100, 0x08FBFE07);
	r5 = D(r5, s1_2_1, 0x02F9F804, 0xFD01FFFC, 0x0BF80502, 0x02F70100);
	r6 = D(r6, s1_2_1, 0x125910DE, 0x02FCFEFC, 0x010AFE01, 0x09F6FA07);
	r7 = D(r7, s1_2_1, 0x15EA0B05, 0x08F704FD, 0xFCF005F7, 0xFE020400);
	r0 = D(r0, s1_2_2, 0xFFDCFCF4, 0x09001200, 0x1315F211, 0x29EF15DF);
	r1 = D(r1, s1_2_2, 0x03070802, 0x0321F406, 0x050401FF, 0x1620E5F1);
	r2 = D(r2, s1_2_2, 0x04FCFEFF, 0x0103FDFB, 0xFE02FE01, 0xFFFAFF01);
	r3 = D(r3, s1_2_2, 0x0403FF03, 0x0A0300FC, 0xFBFEFC00, 0x0003FD01);
	r4 = D(r4, s1_2_2, 0x01FC0201, 0x0403FFF9, 0xFD010202, 0x0005FE01);
	r5 = D(r5, s1_2_2, 0x01ED0BFF, 0xFA0201FB, 0xFF0A0809, 0x000AFA02);
	r6 = D(r6, s1_2_2, 0x10351BEB, 0xFFFE01FF, 0xF808FB06, 0x03050100);
	r7 = D(r7, s1_2_2, 0x0EFFF307, 0xFF08F707, 0x01040009, 0x0305FB00);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0303F9FE, 0xFCF501FA, 0xF1EE0BF3, 0xFB11D01F);
	r1 = D(r1, s0_0_0, 0xEFF324E6, 0xCFFA0BCD, 0xFD14FE13, 0xB8F31A20);
	r2 = D(r2, s0_0_0, 0xFD08FFFF, 0xF50D0A03, 0xFE04FF06, 0xFF040007);
	r3 = D(r3, s0_0_0, 0x02F709F8, 0x0300FF03, 0xFEFBFBFE, 0x010201FF);
	r4 = D(r4, s0_0_0, 0x00FF0001, 0xFFFBFD01, 0xFFF801FD, 0xFD04FF03);
	r5 = D(r5, s0_0_0, 0x09030806, 0xFC03FF04, 0xFCFE0406, 0xE11610FC);
	r6 = D(r6, s0_0_0, 0xD33525D0, 0x000503FC, 0x03F90100, 0x03080EFD);
	r7 = D(r7, s0_0_0, 0xFFF20C1E, 0x03FE03FD, 0xF809FD00, 0x02F703FF);
	r0 = D(r0, s0_0_1, 0xFEFF0AFF, 0xFE0CFDD7, 0x241A8144, 0x9EEA04F8);
	r1 = D(r1, s0_0_1, 0x102001FC, 0x050BFFF7, 0xD9F001FA, 0x3C22F622);
	r2 = D(r2, s0_0_1, 0xFD02FC02, 0xFAEF0BFF, 0x020B0BFA, 0x02FE0000);
	r3 = D(r3, s0_0_1, 0x03FE000A, 0x04000109, 0x04E8FE03, 0xFD020304);
	r4 = D(r4, s0_0_1, 0x02020009, 0xFA0304FD, 0xFFF7FB01, 0xFCFEFDFC);
	r5 = D(r5, s0_0_1, 0x0216CD03, 0x01F7FE06, 0x00F10FEF, 0xFFE90CED);
	r6 = D(r6, s0_0_1, 0x9DAFE1A9, 0x05F90009, 0xF7E5FA0C, 0xEB00FA11);
	r7 = D(r7, s0_0_1, 0xDA0F2602, 0x06020106, 0x060C0FF7, 0xFA05FC03);
	r0 = D(r0, s0_0_2, 0x1B04F803, 0x04F9FA07, 0x81F8FB4C, 0xD7DF812D);
	r1 = D(r1, s0_0_2, 0xF70AF507, 0x0501F906, 0xFD11030B, 0x9FEADC18);
	r2 = D(r2, s0_0_2, 0x060100F7, 0xF40100FF, 0xFCFFFE06, 0x0403FFFD);
	r3 = D(r3, s0_0_2, 0x070905FF, 0x0201010B, 0x00E90002, 0xFD02FA0A);
	r4 = D(r4, s0_0_2, 0xFDFE0004, 0x02FF06F7, 0xFFFB0106, 0x0103FF02);
	r5 = D(r5, s0_0_2, 0xF8FB06F5, 0xFCFDFC03, 0xEBC5EEF8, 0xE1FCF600);
	r6 = D(r6, s0_0_2, 0x81813C81, 0xFCF9F804, 0xFDE003F8, 0xFD010002);
	r7 = D(r7, s0_0_2, 0xD9DE1A06, 0x060501FE, 0xFB020310, 0xFF0503FF);
	r0 = D(r0, s0_1_0, 0x0007F90C, 0x0FFD0B01, 0xE11A0916, 0xF0118137);
	r1 = D(r1, s0_1_0, 0x141433C7, 0xE21025E1, 0xE3CBE0DA, 0xF8F4F1FD);
	r2 = D(r2, s0_1_0, 0x0002F1FF, 0xF2080FFA, 0xFD060EFE, 0x0002FF01);
	r3 = D(r3, s0_1_0, 0x06FEF311, 0x04FD010D, 0x02FAF20C, 0xF7FE01FC);
	r4 = D(r4, s0_1_0, 0x030102FD, 0xFC030104, 0x03F7F905, 0xFD0105FC);
	r5 = D(r5, s0_1_0, 0x04FE01F8, 0xF40A07F6, 0x07060104, 0xF00201F8);
	r6 = D(r6, s0_1_0, 0x81C73A28, 0x1100FB05, 0xFAFFF001, 0x01F8E21B);
	r7 = D(r7, s0_1_0, 0x06152BFF, 0x05F500F7, 0xFDCDE816, 0x09010AF8);
	r0 = D(r0, s0_1_1, 0xF5FC05FA, 0xEEC3DD15, 0x00FBCA05, 0xCD11EEDF);
	r1 = D(r1, s0_1_1, 0xD5EC0A08, 0x16FE0BEB, 0xFD0AE10A, 0x05F49C41);
	r2 = D(r2, s0_1_1, 0xFAF10611, 0x09E818F3, 0x0305F00F, 0xFBFF010F);
	r3 = D(r3, s0_1_1, 0xE5F62207, 0xF8EAF80E, 0xD4EDFBF0, 0x0C07FB1C);
	r4 = D(r4, s0_1_1, 0xF7FEFF08, 0xF3F2E90A, 0xF3FC05F1, 0x04F70DFD);
	r5 = D(r5, s0_1_1, 0x03FDC0F4, 0x04F0FF02, 0xEB08F011, 0x04F8FF11);
	r6 = D(r6, s0_1_1, 0x819CB918, 0x09FE010A, 0x04FF0107, 0x03F9FB11);
	r7 = D(r7, s0_1_1, 0xDBCA0829, 0xE9F2F914, 0xF1D8F0F4, 0xFCF9E901);
	r0 = D(r0, s0_1_2, 0xFFFDB2F4, 0x0DEC04EA, 0xF410FEC6, 0xED01A3F5);
	r1 = D(r1, s0_1_2, 0x01FF08E5, 0xF502070C, 0x02EFFDF0, 0xE0DD0CF2);
	r2 = D(r2, s0_1_2, 0x02FEFA04, 0xF4F6EBFB, 0x000301FE, 0x04FFEAFF);
	r3 = D(r3, s0_1_2, 0xFFFB00EF, 0x00FB040F, 0xF602FCF4, 0xFAFFFBF9);
	r4 = D(r4, s0_1_2, 0x03000303, 0xF8F6FA01, 0xFEFFFBFB, 0xFAF8FC0C);
	r5 = D(r5, s0_1_2, 0xEF03EC16, 0xFC00FFFC, 0xF0D623ED, 0xE505FA08);
	r6 = D(r6, s0_1_2, 0x20C8A0EF, 0xF7FF03FA, 0xFC01FBF8, 0x01FE00F3);
	r7 = D(r7, s0_1_2, 0xB4DB8CE8, 0x01060AFC, 0x03FA03F2, 0xFF040200);
	r0 = D(r0, s0_2_0, 0x0E040009, 0xFDFBF8F9, 0xDBEF0BF7, 0x0CE6C3FF);
	r1 = D(r1, s0_2_0, 0xD1B8DBAD, 0xF781B51B, 0xF51000FC, 0x920712E8);
	r2 = D(r2, s0_2_0, 0xFF04FB05, 0xF902F801, 0x0501FA03, 0x03FFFE04);
	r3 = D(r3, s0_2_0, 0xFCFD01FA, 0xFFFBF505, 0xFBFE00FD, 0x0108040A);
	r4 = D(r4, s0_2_0, 0xFEF8F7FE, 0x00FDF504, 0xF9080301, 0xF9FFFE03);
	r5 = D(r5, s0_2_0, 0xF8FE0302, 0xF800FD02, 0xFB0201FF, 0xF4FDFCFF);
	r6 = D(r6, s0_2_0, 0xDFA814EB, 0x060207FB, 0x00F702FC, 0xF408E00E);
	r7 = D(r7, s0_2_0, 0x03D0D511, 0x03FE0800, 0xEDF0D702, 0xF9FEEBF4);
	r0 = D(r0, s0_2_1, 0xF9050608, 0xCBCFF302, 0x21E7E427, 0xC6090308);
	r1 = D(r1, s0_2_1, 0xBD2325F9, 0x06FFC606, 0xF8F50704, 0x0DCE932F);
	r2 = D(r2, s0_2_1, 0xFF04FC05, 0x0000070B, 0xFE03F9FC, 0x06FE0501);
	r3 = D(r3, s0_2_1, 0xFB000C09, 0xFEEEEFF1, 0xEE070BFA, 0xFD02E4EB);
	r4 = D(r4, s0_2_1, 0xF8F715FC, 0xFDF3ECED, 0x03FF0004, 0x03FEFDFA);
	r5 = D(r5, s0_2_1, 0x13FDE2F7, 0xF9010908, 0x03F80002, 0x01FD0803);
	r6 = D(r6, s0_2_1, 0x81A8B3FA, 0xFE000701, 0x01FC05FB, 0x01FBFDFA);
	r7 = D(r7, s0_2_1, 0xEDC1CCF5, 0xEFFD2C0A, 0xFBF61601, 0x00FC0C05);
	r0 = D(r0, s0_2_2, 0xFC01CCED, 0xFF01030F, 0x8821F51E, 0x13E3D6D2);
	r1 = D(r1, s0_2_2, 0x1112CAE7, 0xE50BE506, 0x010A1003, 0xF839CB6A);
	r2 = D(r2, s0_2_2, 0x00FEE9F7, 0xFFFD0C0E, 0x00020506, 0xFD02FA00);
	r3 = D(r3, s0_2_2, 0xFFFF03FC, 0xF9F600FC, 0x01F704FB, 0x03030804);
	r4 = D(r4, s0_2_2, 0x04FE00FC, 0xFFFE0404, 0xFFFFFF02, 0x0001080A);
	r5 = D(r5, s0_2_2, 0x020E200F, 0x00000105, 0xEC0AF8FE, 0xF6030612);
	r6 = D(r6, s0_2_2, 0x10D92607, 0xFB01050A, 0x01000905, 0xFF040906);
	r7 = D(r7, s0_2_2, 0x81FD1218, 0xFEFAF9F3, 0xFD03F601, 0x01FB08FF);
	r0 = D(r0, s1_0_0, 0xFCFFFB00, 0x1807F408, 0x220C2803, 0xD6DAF0F7);
	r1 = D(r1, s1_0_0, 0x1706F217, 0x16020EF6, 0x0ED5FBDD, 0x35FFF2F6);
	r2 = D(r2, s1_0_0, 0xFEFF0001, 0x04FD06F6, 0x0A03FD02, 0x01FF0003);
	r3 = D(r3, s1_0_0, 0x06FBFF01, 0x0707FF00, 0x0CF9F6F8, 0x02FEFDFE);
	r4 = D(r4, s1_0_0, 0x0001FFFD, 0x0906FEFD, 0x04FEFF01, 0xFBFE0201);
	r5 = D(r5, s1_0_0, 0xFB000103, 0xF7FFFB00, 0xFFF3FD0A, 0x04F5FFF7);
	r6 = D(r6, s1_0_0, 0x4FFBF3E8, 0x00010102, 0xFAFBF5FF, 0x15F008F9);
	r7 = D(r7, s1_0_0, 0x141BE50A, 0x03FDFA07, 0x0F080B01, 0x02FFF903);
	r0 = D(r0, s1_0_1, 0xFF010E19, 0x0D0700FF, 0x02C3E29F, 0x59FD0109);
	r1 = D(r1, s1_0_1, 0x0D06F3F4, 0x0D01FD02, 0xEC00FD0D, 0xF1CFDA04);
	r2 = D(r2, s1_0_1, 0x01FB0205, 0x0CFADE08, 0x19FF0001, 0x0002FE00);
	r3 = D(r3, s1_0_1, 0x08FEFEF8, 0xFD01F8FD, 0x13F6FEFE, 0xFF010107);
	r4 = D(r4, s1_0_1, 0xFD00FDFD, 0x0B06FB02, 0xF4FD00FE, 0x03FF0201);
	r5 = D(r5, s1_0_1, 0xFBFC04F8, 0x0DFEFB04, 0xFFFFF8E2, 0xF704D1F9);
	r6 = D(r6, s1_0_1, 0xA4EF1801, 0xFE00E800, 0xF7F3FD05, 0xFDF804FA);
	r7 = D(r7, s1_0_1, 0x2517EC11, 0xFE0003F8, 0x1201FCFE, 0x09FF00FD);
	r0 = D(r0, s1_0_2, 0xF30000F1, 0xF900FAFF, 0xD11FDC1F, 0xE1DB14E4);
	r1 = D(r1, s1_0_2, 0xF9F2F702, 0xFBF8F803, 0x03FE0101, 0xF010090C);
	r2 = D(r2, s1_0_2, 0xF904F902, 0x02030007, 0x070107FF, 0x070104FE);
	r3 = D(r3, s1_0_2, 0x0201FE02, 0x01050100, 0x140303FE, 0x070406FF);
	r4 = D(r4, s1_0_2, 0xFE0102FE, 0x0900FEFF, 0x03000302, 0xFBFE01FF);
	r5 = D(r5, s1_0_2, 0x150310E4, 0xF9FF0101, 0x10F7F403, 0x00060500);
	r6 = D(r6, s1_0_2, 0xB4F61F25, 0xF8010804, 0xFD000603, 0x0102FF03);
	r7 = D(r7, s1_0_2, 0xEB1BC807, 0x05020001, 0x0400F7FF, 0x06000102);
	r0 = D(r0, s1_1_0, 0x0BFAFEE6, 0xDDF703F9, 0xEE01100A, 0xC6D90C94);
	r1 = D(r1, s1_1_0, 0x0CD6FFCA, 0x0CF937F9, 0x00FF16FE, 0x3405EBA0);
	r2 = D(r2, s1_1_0, 0xEE0002F4, 0x00FBFC07, 0x10FBFDFF, 0x00FB03F5);
	r3 = D(r3, s1_1_0, 0xFC01FFDF, 0x04F9F6FF, 0x01EDFC05, 0x0201FC0A);
	r4 = D(r4, s1_1_0, 0x06FEFC00, 0x13F202F6, 0xFA00F704, 0xF9000205);
	r5 = D(r5, s1_1_0, 0xEB0AFE21, 0xF9FFFC05, 0xFFFE03F4, 0xFF0106FF);
	r6 = D(r6, s1_1_0, 0x0BA0EDDB, 0x02050600, 0x03EF0BFE, 0xDBFA04F0);
	r7 = D(r7, s1_1_0, 0x1BD21003, 0x04FA04DF, 0x0FEAF205, 0xEDFEFCE7);
	r0 = D(r0, s1_1_1, 0x0104F611, 0x11EED90F, 0xFC101C81, 0x0B49F1EE);
	r1 = D(r1, s1_1_1, 0xF50B14E7, 0x03F407EB, 0x0BF9FC00, 0xBAE2CAC1);
	r2 = D(r2, s1_1_1, 0xFD07F902, 0xEAFC0CCB, 0xFEF70EF5, 0xE003FC02);
	r3 = D(r3, s1_1_1, 0xF8FC0008, 0x2BFBD40B, 0xC9FEE6FF, 0x0AFBECE5);
	r4 = D(r4, s1_1_1, 0x23FEF504, 0x30E8EE00, 0x050DE707, 0xF2010101);
	r5 = D(r5, s1_1_1, 0xEADF13B0, 0x03FDFCF7, 0xFDF8EB08, 0x04F805F9);
	r6 = D(r6, s1_1_1, 0x17AC8D0B, 0x0DFDF3EF, 0x12FC19FB, 0x120400FB);
	r7 = D(r7, s1_1_1, 0x2798CC1E, 0x0200FCFE, 0x08F81A05, 0x100207F8);
	r0 = D(r0, s1_1_2, 0xEFEF0DCA, 0x100D0303, 0xF500F4EF, 0xF40A0D81);
	r1 = D(r1, s1_1_2, 0x0106F6FD, 0x0612F8FE, 0x06040202, 0x27131DE3);
	r2 = D(r2, s1_1_2, 0x0202F802, 0x06030809, 0xFEFD05FB, 0x05FE0801);
	r3 = D(r3, s1_1_2, 0x0A0202FF, 0x0103F906, 0xEEFBFB0B, 0xFBFE0AFE);
	r4 = D(r4, s1_1_2, 0x0200FD05, 0x05FB0E05, 0x00FD01FF, 0x0204F906);
	r5 = D(r5, s1_1_2, 0x05FC13FC, 0xF503FF02, 0x0B120AF2, 0xFCFC00FE);
	r6 = D(r6, s1_1_2, 0x27C52125, 0xEF0104FE, 0xFCF702FD, 0x06020103);
	r7 = D(r7, s1_1_2, 0xFAB61028, 0x07FD01FF, 0x06070A03, 0x0500FF00);
	r0 = D(r0, s1_2_0, 0x03FEFA05, 0x0BF7F7FD, 0xFC06F918, 0xE2D81408);
	r1 = D(r1, s1_2_0, 0xD581D081, 0x8126F681, 0xEDFC03EC, 0xFA061106);
	r2 = D(r2, s1_2_0, 0xFAFDFC07, 0x0000FF00, 0x02FC02F4, 0x020001FB);
	r3 = D(r3, s1_2_0, 0x010201FE, 0x05FAFEFD, 0x090408FD, 0x04FAFDF0);
	r4 = D(r4, s1_2_0, 0x0203FFF8, 0x05030204, 0x00FFFE00, 0xFF00FEFE);
	r5 = D(r5, s1_2_0, 0xFB04FD07, 0xFD020302, 0x0200FD00, 0xFE00FEFF);
	r6 = D(r6, s1_2_0, 0x17AFDD05, 0x01FDFE0B, 0x0008FF05, 0x01FD05FA);
	r7 = D(r7, s1_2_0, 0x00ECE0E9, 0x0007FFF6, 0x0DF7F009, 0x030506EE);
	r0 = D(r0, s1_2_1, 0xF703F2FA, 0x12FB0BF8, 0xF72337BB, 0xC90116FA);
	r1 = D(r1, s1_2_1, 0xF11C14D4, 0x071630E6, 0x0DF50105, 0xF31C4281);
	r2 = D(r2, s1_2_1, 0xFF00FFFA, 0xFD0B0203, 0x02FD0601, 0xFCFB030B);
	r3 = D(r3, s1_2_1, 0xFEF806F7, 0x08050E03, 0x0DFA02FA, 0x05F211FC);
	r4 = D(r4, s1_2_1, 0xFBFF01FF, 0x02060309, 0x04FAF700, 0xFF02FFF9);
	r5 = D(r5, s1_2_1, 0xFAFB07FD, 0x0601FF06, 0x00F603EF, 0xFB050603);
	r6 = D(r6, s1_2_1, 0x1E0410EF, 0xF905FF04, 0xFBF80205, 0xFFF80003);
	r7 = D(r7, s1_2_1, 0x08FA13DB, 0xFFF304F7, 0xF903FFF7, 0x01FCFCFD);
	r0 = D(r0, s1_2_2, 0x09041AFC, 0xF6F0F904, 0x17AF1AEF, 0x1447370B);
	r1 = D(r1, s1_2_2, 0x00E2FBFA, 0x06F90001, 0x02FD04FB, 0x17E40FDB);
	r2 = D(r2, s1_2_2, 0x05090201, 0x01F807FE, 0x00FB03FF, 0x000301FE);
	r3 = D(r3, s1_2_2, 0x0605FD02, 0xFEF9FD04, 0x03F60D03, 0x06FB03FB);
	r4 = D(r4, s1_2_2, 0x06020200, 0xFCF70400, 0x0001FAFF, 0x06FCFFFF);
	r5 = D(r5, s1_2_2, 0xF6FF0BF8, 0xFEFFFDFB, 0xF5FDFD09, 0xFFF702FD);
	r6 = D(r6, s1_2_2, 0x19D013DB, 0xFFF907FD, 0x04F50404, 0x02F801FD);
	r7 = D(r7, s1_2_2, 0x1707FD03, 0x0A07FB02, 0xFFFAFA04, 0x0804FD00);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.025e-02, -5.781e-03, -1.667e-02, -4.171e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.768e-02, -1.792e-02, -1.820e-02, -2.430e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-9.088e-03, 4.227e-03, -9.065e-03, -5.050e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.751e-03, -5.916e-03, 5.002e-03, -7.382e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.661e-03, -4.848e-03, -5.179e-03, -1.123e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.666e-02, -5.822e-05, -6.291e-03, -2.836e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.641e-02, -5.111e-03, -1.011e-02, -8.667e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(9.253e-04, -1.798e-03, -4.353e-03, -5.828e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			V4 sr0 = V4(conv4_gather(p, 0));
			V4 sg0 = V4(conv4_gather(p, 1));
			V4 sb0 = V4(conv4_gather(p, 2));
			V4 sa0 = V4(conv4_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			V4 sr1 = V4(conv4_gather(p, 0));
			V4 sg1 = V4(conv4_gather(p, 1));
			V4 sb1 = V4(conv4_gather(p, 2));
			V4 sa1 = V4(conv4_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(5.792e-03, -1.703e-02, -7.013e-04, 9.665e-03, -2.119e-02, 5.426e-03, 1.149e-02, -2.088e-03, -1.728e-01, 1.661e-01, -1.029e-01, 9.198e-02, 1.477e-01, -1.644e-01, 1.034e-01, -1.086e-01) * s0_0_0;
	r0 += M4(-3.850e-03, 1.883e-02, -1.074e-03, 2.557e-03, 1.826e-02, -2.287e-02, 1.019e-02, 2.026e-02, -6.716e-04, -5.330e-04, -1.341e-03, 2.416e-03, -1.927e-01, 1.804e-01, -1.382e-01, 1.214e-01) * s0_0_1;
	r0 += M4(-1.469e-06, -3.607e-05, 1.358e-05, -5.195e-04, 7.121e-05, 1.642e-02, -6.093e-04, 1.073e-03, -7.281e-05, 8.651e-04, -1.974e-04, 5.245e-04, 1.417e-02, 3.152e-03, 9.296e-03, -5.509e-03) * s0_0_2;
	r0 += M4(1.773e-01, -1.929e-01, 1.025e-01, -1.218e-01, 8.233e-03, -5.421e-04, 2.643e-02, 3.569e-03, -1.791e-01, 2.000e-01, -1.820e-01, 2.043e-01, 1.547e-01, -1.626e-01, 1.392e-01, -1.734e-01) * s0_1_0;
	r0 += M4(-3.655e-03, -8.570e-04, -2.024e-03, 3.276e-02, 1.672e-01, 9.552e-02, -2.198e-01, -8.400e-02, 1.772e-03, -3.604e-03, 1.080e-03, -2.916e-03, -2.210e-01, 2.047e-01, -2.217e-01, 1.884e-01) * s0_1_1;
	r0 += M4(-1.029e-04, -9.455e-04, -6.713e-06, 3.268e-06, -2.190e-02, 5.408e-02, 9.247e-03, -7.843e-02, 1.043e-04, 7.850e-04, 3.384e-04, 8.644e-04, 1.248e-02, -2.664e-03, 1.012e-02, 5.332e-03) * s0_1_2;
	r0 += M4(-2.460e-03, -4.437e-03, 4.123e-02, -5.238e-02, 3.425e-04, 3.877e-04, -3.373e-03, -1.021e-03, -1.052e-01, 1.014e-01, -1.668e-01, 1.678e-01, 1.440e-01, -1.697e-01, 1.914e-01, -2.087e-01) * s0_2_0;
	r0 += M4(8.242e-04, 1.713e-04, 9.290e-04, -7.064e-03, -5.295e-03, -2.757e-03, 3.435e-03, -9.717e-03, 4.951e-03, -6.172e-03, 4.803e-03, -8.463e-03, -1.877e-01, 1.667e-01, -2.400e-01, 2.375e-01) * s0_2_1;
	r0 += M4(1.128e-04, -2.434e-05, -1.855e-07, -4.567e-05, -2.528e-03, -7.704e-03, 2.469e-02, 3.748e-02, -3.137e-05, 1.770e-03, -3.138e-04, 1.804e-04, 8.686e-03, -3.191e-03, 2.167e-02, 2.102e-03) * s0_2_2;
	r0 += M4(3.164e-03, -9.876e-05, -7.225e-04, 2.034e-03, 4.267e-03, -8.978e-03, 1.438e-02, -1.270e-02, -1.705e-03, 7.153e-06, -2.172e-05, 4.491e-06, 5.220e-03, 1.269e-02, -2.427e-03, 9.688e-03) * s1_0_0;
	r0 += M4(-2.111e-01, 6.748e-02, -2.273e-02, 2.968e-02, 4.199e-01, -3.506e-01, 2.118e-01, -1.577e-01, -5.894e-03, -5.144e-03, 3.692e-06, -2.114e-04, 2.000e-01, -1.794e-01, 1.333e-01, -1.106e-01) * s1_0_1;
	r0 += M4(1.301e-02, 1.919e-01, 1.016e-02, 1.554e-01, -4.158e-03, -6.796e-03, 1.712e-03, -2.069e-02, -5.828e-03, -1.413e-02, -3.088e-03, -2.289e-03, -1.892e-02, -1.065e-02, -7.359e-03, -1.807e-02) * s1_0_2;
	r0 += M4(-3.223e-03, -2.217e-03, 2.648e-03, -4.722e-03, 6.467e-03, 1.180e-03, -3.492e-03, 4.619e-03, -6.541e-03, -1.484e-04, -5.388e-03, 1.003e-04, 7.516e-03, 1.052e-02, 6.627e-03, 1.064e-02) * s1_1_0;
	r0 += M4(-5.046e-03, 3.408e-02, -2.065e-01, 6.404e-02, 6.146e-02, -2.529e-02, 2.159e-01, -2.358e-01, 8.729e-02, -1.867e-02, -2.611e-02, -1.248e-02, 1.689e-01, -1.743e-01, 1.972e-01, -1.846e-01) * s1_1_1;
	r0 += M4(-1.753e-03, 1.381e-02, 8.829e-03, 2.448e-02, -8.396e-04, 8.448e-03, -9.790e-03, 3.122e-02, -1.382e-01, 1.121e-01, 7.446e-02, 2.475e-02, -2.838e-02, 1.427e-03, -2.795e-02, 5.341e-03) * s1_1_2;
	r0 += M4(-1.848e-04, 1.513e-04, -1.296e-03, 1.094e-04, -1.372e-03, -3.622e-04, -4.967e-03, -1.869e-03, -1.077e-02, -1.534e-03, -3.907e-03, -2.422e-05, -3.590e-04, 5.412e-03, -9.121e-04, 6.527e-03) * s1_2_0;
	r0 += M4(-5.734e-03, 5.919e-04, 4.740e-03, 3.833e-03, 2.814e-03, -5.728e-03, 1.407e-02, -6.871e-04, -4.811e-02, -1.352e-02, 3.436e-02, 5.703e-02, 6.924e-02, -4.578e-02, 1.175e-01, -9.990e-02) * s1_2_1;
	r0 += M4(4.762e-04, 1.957e-03, -4.750e-04, 1.074e-02, 1.233e-03, -9.140e-04, -3.192e-04, -6.688e-03, 2.325e-02, 4.859e-02, 5.417e-03, -1.482e-01, -5.552e-03, -8.336e-03, -1.623e-02, 3.219e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(6.970e-03, -4.679e-04, 3.909e-04, 5.243e-07, -6.715e-03, 1.849e-04, 4.118e-03, 1.055e-03, -1.060e-02, 2.290e-03, -1.128e-03, -6.935e-04, 2.191e-02, 6.479e-04, -9.005e-04, 1.081e-04) * s0_0_0;
	r0 += M4(3.137e-02, 2.435e-02, -3.741e-03, -1.220e-03, 1.379e-02, 9.896e-03, 4.210e-03, -5.160e-03, -4.625e-02, -2.973e-02, 4.320e-03, 5.170e-03, -7.226e-03, 2.731e-02, 6.013e-04, -1.083e-02) * s0_0_1;
	r0 += M4(5.722e-03, 1.023e-02, 2.329e-03, -7.276e-04, -2.593e-04, 4.716e-03, -2.053e-04, 3.419e-04, 3.012e-03, 1.297e-03, 8.289e-03, 1.200e-02, 2.883e-04, -8.395e-03, 7.985e-04, -4.191e-03) * s0_0_2;
	r0 += M4(4.392e-02, 7.229e-05, 3.344e-02, 3.471e-04, 6.563e-02, 9.118e-03, -1.745e-02, 8.389e-03, -1.144e-01, -4.414e-03, -4.496e-02, 2.193e-03, 7.761e-02, 6.515e-03, 7.265e-02, 5.465e-03) * s0_1_0;
	r0 += M4(-7.899e-02, 8.798e-02, 6.248e-02, 1.160e-01, 1.095e-01, -2.744e-01, 3.276e-02, 1.486e-02, 1.979e-01, -7.924e-02, -9.891e-02, -1.733e-01, -8.289e-02, -8.289e-02, -1.064e-01, 2.282e-03) * s0_1_1;
	r0 += M4(1.837e-02, -5.993e-02, 1.071e-02, -1.141e-02, -7.936e-04, 1.360e-02, -5.160e-04, 9.398e-03, -4.203e-03, 1.064e-01, 2.487e-02, 8.081e-02, 3.367e-03, 1.042e-02, 3.027e-03, -1.411e-03) * s0_1_2;
	r0 += M4(1.627e-03, -5.936e-04, 9.491e-03, -1.940e-03, 3.268e-03, -7.685e-04, 4.893e-02, -8.417e-03, -3.331e-03, 5.094e-05, -7.222e-03, -5.526e-03, 2.284e-03, 2.532e-03, 2.162e-02, 4.541e-03) * s0_2_0;
	r0 += M4(1.037e-02, 7.400e-03, -6.810e-02, 8.004e-03, -9.623e-03, 1.718e-02, -9.118e-03, -3.372e-02, 3.346e-03, 8.252e-03, 7.941e-02, 1.027e-01, 1.382e-03, -9.825e-04, -1.431e-03, -1.839e-02) * s0_2_1;
	r0 += M4(-3.972e-04, -4.983e-04, 3.871e-03, -2.461e-02, 8.369e-04, -4.744e-03, -1.014e-03, 8.209e-03, -1.653e-05, 5.289e-04, 5.324e-03, 2.712e-02, -8.325e-04, -1.369e-03, 1.070e-03, 1.252e-03) * s0_2_2;
	r0 += M4(-2.950e-03, -5.971e-04, 1.881e-03, -4.384e-05, -5.458e-02, 1.212e-04, -6.012e-03, -1.150e-03, 3.143e-03, 7.734e-03, -2.418e-03, -1.337e-03, 2.141e-02, 7.251e-03, 3.294e-03, 9.670e-04) * s1_0_0;
	r0 += M4(-2.044e-02, -8.457e-03, 3.079e-03, 4.663e-03, -8.482e-02, -1.546e-01, 5.188e-02, 1.721e-02, -1.906e-02, -1.326e-02, -9.796e-03, -5.902e-03, -3.536e-02, -7.481e-02, -4.467e-03, 2.448e-02) * s1_0_1;
	r0 += M4(1.593e-03, -4.513e-03, -1.660e-04, 1.420e-03, 7.450e-03, 1.216e-02, -5.080e-03, 7.414e-03, 2.570e-03, -3.979e-03, 2.189e-05, -3.534e-03, 4.898e-03, 5.437e-02, -9.599e-03, -3.897e-03) * s1_0_2;
	r0 += M4(-9.082e-03, -5.152e-03, -6.152e-03, -1.732e-03, -4.291e-02, -2.727e-03, 7.675e-02, -1.416e-02, -6.323e-02, -2.525e-03, 6.274e-02, -2.949e-03, -1.109e-02, 4.558e-03, -5.662e-02, 1.828e-02) * s1_1_0;
	r0 += M4(-3.151e-01, 1.950e-01, 6.792e-02, -1.634e-02, -7.251e-02, -1.005e-01, 1.169e-01, 2.112e-01, -2.115e-01, -2.350e-01, 2.012e-01, 2.141e-01, -3.528e-02, 1.134e-01, 2.407e-01, -2.003e-01) * s1_1_1;
	r0 += M4(1.308e-02, 3.133e-02, -1.530e-02, -1.133e-02, 7.810e-04, -1.632e-02, -3.678e-03, 3.293e-03, 3.075e-03, -4.968e-02, -7.056e-03, 3.713e-02, 2.130e-03, -4.163e-02, -2.376e-02, 5.678e-03) * s1_1_2;
	r0 += M4(3.632e-03, -7.986e-04, -4.750e-04, -1.831e-03, 1.621e-03, 1.125e-03, -1.205e-02, -1.282e-03, 7.557e-03, 5.550e-04, 6.437e-04, -2.309e-03, 4.051e-03, -2.753e-03, -2.341e-03, 3.069e-03) * s1_2_0;
	r0 += M4(-2.482e-03, -2.305e-03, 3.999e-02, 8.636e-03, 2.645e-03, 4.868e-03, -1.419e-02, -1.056e-02, 8.172e-03, 9.569e-03, -2.695e-03, -1.467e-03, 7.808e-05, 1.025e-03, -2.129e-02, 3.692e-03) * s1_2_1;
	r0 += M4(1.860e-03, 8.105e-03, -2.045e-03, -1.678e-02, -4.187e-05, 3.319e-04, 4.047e-04, -7.275e-03, -1.811e-03, 4.554e-03, 1.148e-03, -3.048e-03, -4.671e-05, -8.001e-04, -4.964e-03, -5.065e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(5.435e-02, -1.190e-03, 3.894e-02, -1.328e-03, -3.001e-02, -1.289e-03, -6.982e-03, -2.767e-03, 2.219e-02, 1.381e-03, 2.649e-04, 1.097e-03, -3.455e-02, -1.892e-03, 9.795e-03, 3.376e-05) * s0_0_0;
	r0 += M4(-1.810e-02, 1.180e-01, -1.246e-01, -1.408e-02, -1.023e-01, -1.164e-01, -4.741e-03, -7.215e-03, 9.526e-02, 8.618e-02, 1.211e-02, 8.296e-03, -7.412e-03, -4.724e-02, -1.565e-03, 4.328e-03) * s0_0_1;
	r0 += M4(-5.566e-03, -6.013e-02, 1.017e-02, -2.460e-02, -2.482e-03, -2.195e-02, -1.870e-03, -1.105e-03, -9.415e-04, 2.516e-02, -1.024e-03, 1.959e-03, 3.227e-04, 2.483e-03, 1.305e-05, 1.055e-04) * s0_0_2;
	r0 += M4(-4.781e-04, 1.766e-04, 2.627e-02, 1.519e-03, 3.310e-02, 2.439e-03, -1.898e-02, 3.348e-03, -7.450e-03, 3.834e-03, 1.095e-02, 4.499e-04, -1.404e-02, 1.376e-03, -8.179e-02, -3.399e-04) * s0_1_0;
	r0 += M4(2.105e-02, 1.345e-02, 9.928e-02, 1.146e-01, 8.325e-02, 9.251e-02, 1.242e-02, -3.693e-02, -1.079e-01, -9.307e-02, 2.832e-02, 1.404e-02, -2.399e-02, -5.338e-02, -2.316e-02, -1.488e-01) * s0_1_1;
	r0 += M4(3.702e-03, 9.442e-03, 1.209e-03, 7.008e-03, -2.372e-03, 2.300e-02, 9.495e-03, 2.650e-02, 6.811e-03, -8.659e-03, -9.925e-03, 2.326e-02, 7.323e-04, 2.548e-03, -1.057e-04, 7.627e-03) * s0_1_2;
	r0 += M4(-4.958e-07, 3.446e-06, -5.286e-04, 3.698e-05, -1.689e-03, -9.869e-04, 1.034e-02, 1.385e-03, 1.491e-03, 1.344e-05, -4.533e-03, -7.135e-04, -4.553e-04, -1.009e-04, 2.615e-03, 6.892e-04) * s0_2_0;
	r0 += M4(-3.635e-05, 4.319e-05, 2.099e-03, -5.679e-04, -2.385e-03, -4.951e-03, 1.554e-02, 9.126e-03, 4.206e-03, 3.724e-03, -1.799e-02, -1.395e-02, 1.151e-04, -1.868e-03, 1.634e-04, 1.766e-03) * s0_2_1;
	r0 += M4(7.394e-06, -1.288e-04, -1.544e-03, 4.618e-04, -2.811e-05, -1.941e-04, 1.024e-03, 9.431e-03, 8.424e-04, 3.627e-03, -9.443e-04, -5.682e-03, -2.416e-05, -8.659e-06, -2.540e-05, 1.569e-05) * s0_2_2;
	r0 += M4(1.947e-02, 7.547e-03, -1.600e-03, 2.538e-03, 7.229e-03, -1.118e-03, -6.978e-03, -2.162e-03, -2.569e-02, -1.873e-02, -3.028e-03, 1.160e-03, 6.714e-03, 3.452e-03, -5.710e-03, -1.253e-03) * s1_0_0;
	r0 += M4(9.367e-03, -1.859e-02, 2.495e-03, 1.953e-03, 2.981e-02, 4.279e-02, -1.720e-03, -2.307e-04, -2.338e-03, -8.153e-03, 8.294e-04, 3.967e-04, -4.872e-04, -4.159e-03, -5.897e-04, -1.836e-03) * s1_0_1;
	r0 += M4(-2.787e-06, 3.335e-03, 2.000e-04, 1.540e-03, -1.141e-03, 7.230e-03, -2.619e-06, -7.583e-04, 3.996e-05, -7.194e-04, 1.072e-06, -1.411e-04, 1.643e-04, 9.435e-04, -9.843e-07, 7.270e-04) * s1_0_2;
	r0 += M4(-1.657e-01, 1.119e-01, -1.384e-02, 4.138e-02, -8.667e-02, -7.448e-03, -3.378e-02, -1.629e-02, 1.221e-01, -1.223e-01, 1.540e-02, 7.933e-02, -7.518e-02, 1.406e-02, 6.314e-03, 7.877e-03) * s1_1_0;
	r0 += M4(2.274e-02, 4.701e-04, 2.824e-02, -3.138e-02, 1.032e-01, -4.646e-02, 1.360e-01, 1.067e-01, -2.704e-02, 6.549e-02, -6.766e-03, -2.652e-02, 6.235e-02, 1.597e-02, -4.130e-03, -6.917e-03) * s1_1_1;
	r0 += M4(-9.272e-04, -4.164e-03, -1.079e-03, -2.462e-04, -1.228e-03, 4.186e-02, -8.093e-05, 2.584e-02, -1.451e-05, -5.953e-03, 5.678e-04, -1.802e-03, -2.196e-03, -7.258e-03, -5.882e-04, -2.146e-03) * s1_1_2;
	r0 += M4(-1.756e-02, 9.815e-03, -1.242e-01, 8.223e-02, 1.014e-04, -2.778e-04, -2.245e-02, -7.088e-04, 2.164e-02, 3.718e-02, -1.459e-01, -9.990e-03, 2.559e-02, 3.058e-03, -1.973e-02, 2.716e-02) * s1_2_0;
	r0 += M4(-8.091e-04, 1.247e-02, 1.841e-03, 2.511e-02, 2.016e-03, 1.388e-02, -4.256e-03, -4.077e-02, -3.584e-03, -5.084e-02, 2.353e-02, 8.032e-02, 5.423e-02, -5.530e-02, 2.035e-01, -2.355e-01) * s1_2_1;
	r0 += M4(1.370e-04, 1.975e-03, 2.601e-06, 3.768e-04, 1.057e-03, 3.442e-03, -5.289e-03, 1.234e-02, -1.745e-03, -3.350e-03, -4.500e-03, 1.079e-04, -6.981e-03, 1.955e-02, -6.308e-03, 4.078e-03) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-7.606e-03, -3.972e-03, 1.195e-02, 1.039e-02, -1.898e-02, -5.011e-03, -9.795e-03, 7.606e-04, -2.234e-03, 4.385e-04, -3.717e-04, -2.119e-04, -2.103e-03, 2.304e-04, -3.381e-04, -2.162e-05) * s0_0_0;
	r0 += M4(-2.694e-04, -6.569e-04, 1.102e-02, 1.220e-02, -1.449e-02, 3.521e-03, 1.816e-03, 2.754e-03, -1.240e-02, -9.281e-03, 3.166e-03, 7.476e-04, -1.625e-02, -7.932e-03, -2.663e-03, -3.844e-04) * s0_0_1;
	r0 += M4(-2.248e-03, -4.457e-04, 1.106e-02, 1.342e-02, 7.477e-04, -6.203e-03, 2.062e-06, -8.119e-04, -3.237e-03, -7.757e-03, -1.085e-03, 7.076e-04, 2.407e-02, 2.302e-02, -7.904e-03, -7.903e-03) * s0_0_2;
	r0 += M4(1.255e-01, 8.982e-02, -1.513e-01, -1.075e-01, -8.781e-02, -2.034e-02, -3.182e-02, -2.362e-02, -4.959e-03, -4.704e-03, -1.358e-02, -5.596e-03, -8.751e-03, 6.175e-04, -4.067e-03, 1.654e-05) * s0_1_0;
	r0 += M4(1.481e-01, 1.363e-01, -1.578e-01, -1.569e-01, -6.518e-02, 2.153e-01, -6.238e-02, 9.388e-02, 1.757e-01, 7.772e-02, -5.053e-02, -3.650e-02, 8.423e-02, 1.614e-02, 4.593e-02, -4.355e-02) * s0_1_1;
	r0 += M4(1.157e-01, 1.571e-01, -1.372e-01, -1.697e-01, 1.107e-03, -2.348e-02, 6.598e-04, -1.431e-02, -1.241e-03, 9.253e-02, -2.616e-03, -2.029e-02, 6.950e-02, -2.576e-01, -4.703e-02, 8.983e-02) * s0_1_2;
	r0 += M4(-2.216e-01, -1.603e-01, 2.038e-01, 1.517e-01, -1.691e-02, 1.452e-05, -5.459e-02, -5.513e-03, -8.965e-03, 1.320e-03, 1.358e-02, 7.083e-03, 6.791e-03, -5.537e-03, 3.115e-03, 4.389e-04) * s0_2_0;
	r0 += M4(-2.349e-01, -2.300e-01, 2.100e-01, 2.050e-01, 4.175e-03, 4.153e-04, -1.146e-02, 8.115e-02, 2.511e-02, 4.171e-04, -9.832e-02, -2.733e-02, 1.677e-02, -3.572e-04, -1.302e-01, 3.464e-02) * s0_2_1;
	r0 += M4(-1.717e-01, -2.402e-01, 1.626e-01, 2.216e-01, -7.101e-04, -3.616e-03, 2.807e-03, -7.265e-03, -1.102e-02, -3.298e-04, 9.732e-03, -3.772e-02, -1.080e-03, 2.016e-02, 2.743e-02, 4.628e-02) * s0_2_2;
	r0 += M4(4.028e-03, 3.878e-03, 2.476e-03, 1.974e-03, 1.572e-03, -1.411e-03, -7.032e-03, -1.440e-03, 4.750e-03, 4.498e-04, 1.013e-03, 4.502e-04, -1.315e-03, -1.772e-05, 1.693e-04, -2.589e-04) * s1_0_0;
	r0 += M4(-1.683e-03, 1.120e-03, 3.147e-03, 2.342e-03, -9.342e-04, 6.213e-03, 3.189e-03, -3.050e-03, 8.698e-03, -4.636e-03, 9.937e-03, 4.645e-03, 6.519e-02, -5.203e-03, -1.069e-03, -3.984e-03) * s1_0_1;
	r0 += M4(-5.354e-03, -8.225e-03, 2.490e-03, 6.355e-03, -2.466e-03, 1.375e-02, 4.292e-04, -1.939e-03, 2.198e-02, 3.967e-02, 2.182e-03, 2.295e-03, 4.397e-03, -5.415e-02, 2.626e-03, 1.659e-02) * s1_0_2;
	r0 += M4(1.616e-01, 7.859e-02, -1.485e-01, -7.712e-02, -3.421e-03, -9.560e-04, 9.354e-03, -2.373e-03, 1.046e-03, -5.539e-04, 2.861e-04, -3.482e-04, -1.684e-03, 2.255e-04, -3.788e-03, 6.420e-04) * s1_1_0;
	r0 += M4(6.837e-02, 1.398e-01, -7.152e-02, -1.411e-01, 6.594e-02, 2.441e-02, -3.448e-01, 1.848e-01, 4.583e-02, -2.963e-03, -6.996e-02, 1.518e-02, 1.066e-01, -7.125e-03, 1.938e-01, -8.534e-03) * s1_1_1;
	r0 += M4(1.012e-02, 2.544e-02, -9.328e-03, -2.117e-02, -1.715e-02, -2.378e-03, -9.874e-04, 6.665e-02, 5.815e-02, 1.096e-01, -6.453e-02, -1.612e-01, 5.297e-04, -1.647e-02, 4.550e-02, -2.075e-01) * s1_1_2;
	r0 += M4(-6.982e-03, -4.659e-03, -4.980e-03, -3.460e-03, -2.304e-04, -1.210e-04, 6.106e-04, -7.497e-04, 1.083e-05, 1.191e-04, 1.403e-03, 4.591e-04, 1.242e-04, -4.233e-05, 1.180e-03, -2.428e-04) * s1_2_0;
	r0 += M4(-7.030e-04, -2.296e-03, -9.607e-03, -1.101e-02, -3.081e-03, -2.851e-03, 3.551e-03, -6.860e-03, -3.450e-03, -8.167e-04, 9.053e-03, 3.056e-03, 1.617e-03, -3.550e-04, 7.446e-03, 1.427e-03) * s1_2_1;
	r0 += M4(-4.896e-04, -8.428e-04, -9.351e-04, -2.860e-03, -8.815e-04, -8.432e-05, 1.844e-03, 8.702e-03, -2.682e-03, -4.105e-03, 6.671e-03, 1.077e-02, 5.058e-04, -4.133e-04, -1.703e-03, 1.383e-02) * s1_2_2;
	r0 += V4(-3.391e-11, -2.662e-11, -1.172e-08, -2.968e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
