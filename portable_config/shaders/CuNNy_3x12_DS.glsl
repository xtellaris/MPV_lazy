// CuNNy 3x12 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_3x12_DS] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(9.242e-03, 5.405e-02, -8.027e-03, -1.792e-03) * s0_0_0;
	r1 += V4(2.146e-01, 2.117e-02, 9.607e-03, 5.122e-01) * s0_0_0;
	r2 += V4(2.590e-02, 1.607e-02, 3.959e-02, -2.207e-02) * s0_0_0;
	r0 += V4(3.897e-02, 6.312e-01, 5.245e-02, -2.181e-02) * s0_0_1;
	r1 += V4(3.096e-01, -2.815e-02, 7.910e-01, -2.575e-01) * s0_0_1;
	r2 += V4(-3.155e-02, 3.093e-02, 2.800e-02, -2.180e-02) * s0_0_1;
	r0 += V4(-4.486e-02, 2.578e-01, -1.875e-02, 1.888e-02) * s0_0_2;
	r1 += V4(-2.958e-01, 8.667e-03, 2.939e-02, 1.303e-02) * s0_0_2;
	r2 += V4(-4.904e-02, 9.803e-04, -1.629e-01, 4.712e-02) * s0_0_2;
	r0 += V4(-8.122e-03, -2.034e-02, -2.885e-01, -6.289e-01) * s0_1_0;
	r1 += V4(2.096e-01, 8.889e-01, -5.048e-03, 2.571e-01) * s0_1_0;
	r2 += V4(-1.175e-01, -3.940e-01, 4.592e-03, -3.303e-02) * s0_1_0;
	r0 += V4(6.699e-01, -4.482e-01, 6.010e-01, -3.214e-01) * s0_1_1;
	r1 += V4(-5.934e-01, -8.770e-01, -7.918e-01, -4.172e-01) * s0_1_1;
	r2 += V4(5.332e-01, 8.929e-02, -9.917e-02, 6.465e-01) * s0_1_1;
	r0 += V4(-6.753e-01, -4.525e-01, -3.356e-01, 3.151e-02) * s0_1_2;
	r1 += V4(1.587e-01, -2.690e-02, -3.189e-02, -6.018e-02) * s0_1_2;
	r2 += V4(-1.970e-02, 3.283e-04, 2.681e-01, -7.587e-02) * s0_1_2;
	r0 += V4(4.430e-03, 8.503e-02, -1.681e-01, 8.827e-01) * s0_2_0;
	r1 += V4(-3.365e-01, 2.198e-02, -6.874e-03, 2.375e-02) * s0_2_0;
	r2 += V4(-5.959e-02, 6.566e-02, -1.639e-02, 1.082e-02) * s0_2_0;
	r0 += V4(6.428e-02, -1.675e-01, 2.710e-01, 9.530e-02) * s0_2_1;
	r1 += V4(1.213e-01, -1.731e-02, 7.868e-04, -8.179e-02) * s0_2_1;
	r2 += V4(-1.373e-01, 9.382e-03, 3.097e-04, -4.626e-02) * s0_2_1;
	r0 += V4(-6.446e-02, -1.605e-02, -9.870e-02, -4.767e-02) * s0_2_2;
	r1 += V4(2.065e-01, 5.110e-03, 3.665e-03, 3.926e-02) * s0_2_2;
	r2 += V4(-6.008e-03, 1.684e-03, 7.321e-02, 1.676e-02) * s0_2_2;
	r0 += V4(-2.008e-02, -2.226e-02, -8.131e-03, 3.776e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.045e-03, 3.645e-03, 1.181e-03, 3.552e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(5.778e-03, 1.699e-01, -2.702e-03, 2.111e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12_DS] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.708e-01, 2.585e-01, 5.008e-02, 2.602e-01, 9.975e-02, -9.738e-02, -8.236e-03, -2.722e-02, 5.602e-02, 1.155e-01, -1.072e-01, 4.462e-02, -2.616e-02, 2.239e-02, -8.225e-02, 1.034e-01) * s0_0_0;
	r1 += M4(-4.126e-02, -4.316e-02, 4.936e-01, -2.231e-01, 1.334e-01, 6.646e-02, 8.911e-03, -8.880e-02, 3.027e-03, -8.599e-03, -9.404e-02, -8.887e-03, 4.102e-02, 1.897e-02, 7.803e-02, -7.792e-02) * s0_0_0;
	r2 += M4(6.878e-02, 9.968e-01, 7.236e-04, -4.032e-02, 4.151e-01, -4.598e-02, -7.761e-02, 2.725e-01, -3.040e-02, -1.754e-01, -1.284e-01, 1.356e-02, -2.561e-02, 8.891e-02, 3.285e-02, -5.921e-02) * s0_0_0;
	r0 += M4(6.151e-02, -3.014e-01, -3.904e-01, -3.183e-01, -7.491e-02, 2.698e-02, -3.831e-02, -9.187e-02, -1.955e-01, 1.020e-01, 6.568e-02, -7.890e-03, -1.031e-01, 1.559e-01, -1.617e-01, 4.582e-01) * s0_0_1;
	r1 += M4(1.925e-01, 3.986e-02, 1.769e-02, -1.785e-01, 7.464e-02, 6.300e-02, 1.697e-02, -3.160e-01, 7.102e-02, 2.046e-01, -1.988e-01, -3.553e-02, 1.409e-01, 2.727e-02, -6.087e-02, 2.163e-01) * s0_0_1;
	r2 += M4(2.588e-01, 2.409e-01, -1.072e-01, 3.246e-01, -1.303e-01, -3.468e-01, -6.875e-02, 2.851e-02, -2.250e-02, 1.468e-01, 1.848e-01, 3.998e-01, -2.050e-01, -9.675e-01, -6.640e-02, -1.548e-01) * s0_0_1;
	r0 += M4(-9.647e-03, -1.149e-01, -5.627e-02, 8.239e-02, -9.504e-02, 1.777e-02, -6.257e-02, 1.141e-02, 1.543e-02, 1.944e-01, 5.407e-02, -6.358e-02, 8.450e-02, 7.936e-02, 3.506e-01, 3.057e-01) * s0_0_2;
	r1 += M4(8.950e-03, 4.779e-03, 1.235e-02, -4.510e-02, -1.241e-02, 1.170e-02, 5.921e-04, -2.060e-02, 8.224e-02, 7.942e-02, -1.318e-01, 8.854e-02, -3.605e-02, -5.694e-02, -4.750e-02, 2.339e-02) * s0_0_2;
	r2 += M4(1.157e-01, 1.100e-01, -3.564e-02, -1.500e-01, 5.817e-02, 1.441e-01, 1.068e-01, 9.119e-02, -1.841e-01, -3.402e-01, 9.577e-02, 2.720e-01, 1.435e-01, 3.717e-01, 4.644e-02, -4.917e-01) * s0_0_2;
	r0 += M4(6.556e-01, 5.193e-02, 1.000e+00, -6.972e-01, 9.086e-02, 6.614e-04, -3.895e-01, -7.416e-02, 1.548e-01, -3.388e-02, -1.886e-03, -3.655e-02, 6.323e-02, -2.534e-02, 7.515e-02, 5.288e-02) * s0_1_0;
	r1 += M4(3.959e-01, -5.491e-01, -5.605e-01, 2.506e-01, -4.655e-02, -1.756e-01, -2.315e-01, 1.521e-01, 2.117e-01, 4.117e-01, 5.762e-01, 2.132e-03, -6.895e-03, -2.981e-02, -2.566e-01, -1.411e-01) * s0_1_0;
	r2 += M4(-4.769e-02, -7.871e-01, 8.627e-02, 2.076e-01, 4.550e-02, 1.000e+00, 1.760e-01, 1.527e-01, 6.363e-03, 4.872e-01, 2.504e-01, 1.978e-01, 5.463e-02, 7.220e-03, -2.131e-02, -1.014e-01) * s0_1_0;
	r0 += M4(-3.701e-01, 7.398e-02, 4.584e-01, 1.961e-01, 3.271e-01, 2.576e-01, 7.427e-01, -2.332e-01, 5.154e-01, 5.220e-01, 7.520e-01, 2.962e-01, 2.683e-01, 8.127e-02, -5.367e-01, 4.087e-02) * s0_1_1;
	r1 += M4(3.124e-02, -2.792e-01, 2.198e-01, 4.824e-01, 5.751e-04, -3.153e-02, 1.821e-02, -5.486e-02, 3.901e-01, 2.657e-01, 1.528e-02, 3.142e-01, 1.930e-01, 3.350e-01, -5.894e-01, -1.384e-01) * s0_1_1;
	r2 += M4(-1.947e-01, -3.453e-01, 1.504e-01, -2.315e-01, -2.198e-01, -3.631e-01, 2.568e-01, -1.303e-01, 6.700e-03, -3.138e-01, -1.130e-01, -1.217e-01, -1.800e-01, -1.276e-01, -1.000e+00, 1.933e-01) * s0_1_1;
	r0 += M4(2.861e-01, 1.047e-01, 4.033e-01, -1.440e-01, -8.890e-02, 8.230e-02, -1.677e-01, 5.744e-02, -2.663e-01, -1.552e-01, -5.351e-01, 1.237e-01, 5.971e-02, -2.890e-02, -5.890e-01, 6.325e-02) * s0_1_2;
	r1 += M4(-3.361e-03, -1.922e-01, 1.694e-01, 7.339e-02, -7.269e-03, 1.730e-02, -5.526e-02, -9.342e-03, -9.932e-02, 3.145e-01, -2.874e-01, -4.441e-02, 6.346e-02, -8.440e-02, -6.695e-02, -4.238e-01) * s0_1_2;
	r2 += M4(-1.431e-01, 2.954e-02, -8.413e-02, -1.895e-01, -1.156e-01, -3.238e-02, -1.017e-02, 4.169e-02, 3.632e-01, 1.401e-02, 1.434e-01, 3.409e-01, -7.630e-01, 1.821e-01, -5.854e-01, 1.600e-01) * s0_1_2;
	r0 += M4(-2.995e-01, 4.332e-01, -2.093e-01, 4.900e-01, 5.820e-02, -1.542e-01, 1.158e-01, -6.747e-02, 1.020e-01, 5.339e-02, 2.214e-02, -7.471e-02, 1.365e-02, 6.019e-02, 3.238e-02, 1.646e-02) * s0_2_0;
	r1 += M4(-1.782e-01, 1.293e-01, 3.333e-01, 8.028e-02, -1.303e-01, -1.067e-01, -7.643e-03, 1.733e-02, -3.802e-02, -4.004e-02, -3.140e-01, -5.079e-02, 1.764e-02, 4.939e-02, 7.430e-02, -5.571e-03) * s0_2_0;
	r2 += M4(-5.836e-01, -3.116e-01, 3.252e-01, -1.092e-01, -2.300e-01, -7.223e-03, -1.169e-01, -3.672e-02, -7.824e-02, 1.860e-01, -1.134e-01, 5.099e-02, -6.641e-03, 5.025e-03, 1.795e-02, -1.621e-02) * s0_2_0;
	r0 += M4(-3.959e-01, -2.234e-01, -4.564e-01, -1.006e-01, -2.254e-02, 1.098e-02, -1.127e-01, -3.087e-02, 1.463e-01, -2.393e-02, 8.258e-02, -9.889e-02, 4.661e-02, -7.007e-02, 8.337e-03, -1.738e-02) * s0_2_1;
	r1 += M4(2.493e-01, -1.987e-01, -1.585e-01, 2.643e-02, 1.732e-04, -8.119e-02, -7.570e-02, 9.033e-02, 8.379e-03, 1.046e-01, -1.795e-01, 9.061e-02, -6.277e-02, -3.303e-02, 2.828e-02, -6.237e-02) * s0_2_1;
	r2 += M4(-2.539e-01, 2.005e-01, -3.922e-01, 1.056e-01, 1.050e-01, -2.399e-01, 1.453e-01, -1.405e-01, 8.282e-02, -1.017e-02, 3.893e-01, 1.018e-01, 5.811e-02, 5.036e-02, -1.303e-01, 4.548e-02) * s0_2_1;
	r0 += M4(-8.087e-02, -5.682e-02, 6.673e-02, 2.464e-02, 4.917e-02, 3.699e-02, -6.787e-02, -1.435e-02, 4.481e-02, 8.869e-02, -9.370e-02, 1.121e-02, 6.725e-02, -4.605e-02, 6.101e-02, 2.128e-02) * s0_2_2;
	r1 += M4(-4.897e-02, -9.699e-02, -1.577e-01, -8.134e-03, 6.690e-02, 8.175e-02, 1.015e-01, -3.172e-02, 3.942e-02, 1.559e-01, 3.233e-01, 1.387e-01, -6.785e-02, -6.650e-02, 4.844e-02, -2.487e-02) * s0_2_2;
	r2 += M4(4.187e-02, -1.673e-01, -3.893e-02, -7.000e-02, 4.872e-03, 4.239e-03, -4.136e-02, 7.353e-03, -6.212e-02, 3.697e-01, 7.281e-02, 1.923e-01, 1.023e-01, -2.037e-02, -1.109e-01, -1.217e-01) * s0_2_2;
	r0 += M4(7.536e-02, 2.037e-03, -9.797e-04, -1.634e-01, 1.162e-01, 6.782e-02, 1.024e-01, -8.924e-02, -1.080e-01, 5.766e-02, 3.508e-02, 1.116e-01, -3.548e-02, 3.850e-02, -3.031e-02, 4.952e-02) * s1_0_0;
	r1 += M4(-1.979e-02, -7.784e-02, 3.687e-02, 1.158e-01, 1.311e-02, 6.666e-02, 3.265e-02, -7.111e-02, -7.753e-02, -4.797e-02, -1.362e-02, 1.876e-01, 2.750e-02, -1.783e-02, -3.529e-02, -6.993e-03) * s1_0_0;
	r2 += M4(9.945e-02, -5.371e-01, 2.822e-01, 3.330e-02, 1.815e-01, 2.801e-01, 5.800e-02, -1.036e-01, -3.994e-01, 4.120e-01, -3.528e-02, -2.570e-01, -3.564e-02, 3.407e-01, -7.691e-03, 1.875e-02) * s1_0_0;
	r0 += M4(1.337e-02, 1.154e-02, -1.774e-01, -3.360e-02, -2.770e-01, -1.492e-01, -1.539e-01, -2.529e-01, 1.213e-01, 6.552e-02, 9.551e-03, 3.929e-02, -4.566e-02, 3.588e-02, -1.072e-01, -2.325e-02) * s1_0_1;
	r1 += M4(4.172e-02, -1.152e-02, 2.827e-01, -9.352e-03, 1.412e-02, -2.404e-02, -7.506e-01, 2.024e-01, -1.192e-01, -1.113e-01, -1.974e-01, 2.406e-01, 2.741e-02, -7.948e-03, -2.875e-02, -7.770e-02) * s1_0_1;
	r2 += M4(1.488e-01, -3.597e-01, 2.475e-01, -2.213e-01, -9.210e-02, -9.349e-01, 2.223e-01, -1.773e-02, -3.264e-02, -1.548e-01, 3.633e-02, -6.814e-02, -3.358e-04, -5.111e-01, -1.431e-01, 8.615e-02) * s1_0_1;
	r0 += M4(-6.170e-02, -3.166e-02, -4.027e-01, 6.420e-02, -8.224e-02, 2.046e-01, 3.969e-01, 3.736e-01, 1.384e-01, -9.568e-03, 1.782e-01, 2.773e-02, -7.607e-02, 4.968e-02, 3.086e-01, 8.000e-02) * s1_0_2;
	r1 += M4(-7.547e-02, 5.931e-02, -1.997e-02, -2.456e-01, 8.079e-02, 5.666e-02, -8.722e-02, 3.349e-01, 1.398e-02, 6.910e-03, 1.111e-01, 2.617e-01, 2.499e-02, 2.368e-02, 1.094e-01, 2.234e-02) * s1_0_2;
	r2 += M4(9.716e-02, -2.046e-02, -5.628e-02, 1.365e-02, -3.333e-01, -5.605e-01, 1.468e-01, -2.917e-01, -1.770e-02, 9.769e-02, 6.135e-02, -1.216e-01, 2.108e-02, 1.628e-01, 5.914e-02, 1.045e-02) * s1_0_2;
	r0 += M4(2.068e-01, 2.505e-01, -2.240e-01, 6.170e-02, 7.813e-02, 1.077e-01, 6.056e-03, -1.018e-01, 2.091e-01, -4.548e-03, 2.501e-01, -2.494e-01, -1.050e-01, -2.688e-01, -3.783e-02, 1.001e-01) * s1_1_0;
	r1 += M4(1.568e-01, 1.770e-01, 3.139e-01, 1.518e-01, 2.115e-02, 4.942e-02, -1.000e+00, -1.510e-01, 7.743e-02, -1.878e-03, -1.000e+00, -1.929e-01, -9.595e-02, -1.046e-01, -3.088e-02, 7.475e-02) * s1_1_0;
	r2 += M4(-1.431e-01, -2.357e-01, 1.753e-01, -9.428e-02, 1.518e-01, -2.796e-01, 6.267e-02, -6.693e-02, 1.935e-01, -3.455e-02, -1.207e-01, -5.537e-02, -2.924e-01, -5.840e-01, -1.715e-01, 1.236e-01) * s1_1_0;
	r0 += M4(1.704e-01, 3.071e-04, -2.803e-02, -2.186e-01, -3.274e-01, 7.556e-01, -7.260e-01, 1.817e-01, -4.317e-01, -1.382e-02, -1.000e+00, 2.057e-02, 1.084e-01, -8.142e-02, 3.202e-01, 1.012e-01) * s1_1_1;
	r1 += M4(2.160e-02, -1.533e-01, 2.277e-02, 1.534e-02, 2.950e-01, 1.000e+00, -1.000e+00, 2.712e-03, 3.160e-01, 2.180e-01, -2.282e-01, 1.000e+00, 9.085e-02, 7.647e-02, 5.218e-01, -7.973e-02) * s1_1_1;
	r2 += M4(-1.234e-02, -3.618e-01, 2.416e-01, 2.301e-01, 6.895e-01, 6.843e-01, -1.000e+00, -1.180e-01, -1.304e-01, 8.023e-03, -1.000e+00, -7.404e-02, 2.187e-01, 7.709e-01, -2.673e-02, 1.782e-01) * s1_1_1;
	r0 += M4(6.659e-02, 5.241e-02, -1.834e-01, -1.841e-02, -2.973e-01, 6.017e-02, -8.418e-01, 1.937e-01, -1.087e-01, -1.597e-01, 5.582e-02, 2.762e-01, -3.005e-02, -1.335e-01, -1.645e-01, -1.507e-01) * s1_1_2;
	r1 += M4(5.844e-03, 5.049e-02, 5.668e-02, -1.667e-01, 1.361e-01, 6.214e-01, -1.494e-01, -1.889e-01, -2.884e-02, 1.204e-01, 9.474e-02, 1.300e-01, -1.893e-01, -9.515e-02, 3.112e-02, -4.562e-01) * s1_1_2;
	r2 += M4(-8.537e-03, -1.545e-01, 1.479e-01, -1.147e-02, -1.113e-03, 5.772e-01, -1.683e-01, 7.765e-01, 3.210e-01, 1.964e-01, 1.941e-02, 2.447e-01, 3.168e-01, -9.746e-02, -9.585e-02, -1.265e-01) * s1_1_2;
	r0 += M4(-8.019e-02, 4.947e-02, -2.549e-01, -1.262e-01, 1.136e-01, 1.415e-01, 1.051e-01, -7.254e-02, 3.682e-01, 3.798e-01, 1.000e+00, 8.843e-02, -1.175e-01, -9.246e-02, -1.157e-01, 1.418e-01) * s1_2_0;
	r1 += M4(-1.283e-02, -3.811e-02, 4.575e-01, -6.228e-03, 1.145e-01, 1.284e-01, 1.507e-01, -3.364e-03, 9.780e-02, -8.902e-02, -1.689e-01, -1.033e-01, -1.006e-01, -3.561e-02, 8.431e-02, 2.142e-01) * s1_2_0;
	r2 += M4(-1.405e-01, 2.335e-01, 1.259e-01, -9.597e-02, -3.530e-02, -2.157e-01, 3.412e-02, -2.836e-02, 5.684e-01, -9.519e-01, -9.657e-03, -3.233e-01, 5.271e-02, 2.238e-01, 1.453e-01, 4.443e-02) * s1_2_0;
	r0 += M4(2.958e-01, 1.625e-01, -1.612e-01, -2.436e-02, 2.033e-01, -1.645e-01, 3.799e-01, -3.366e-01, -6.277e-01, -1.567e-01, 1.245e-01, 5.483e-01, 3.027e-01, -1.045e-01, -1.027e-01, -1.013e-01) * s1_2_1;
	r1 += M4(1.346e-01, 6.589e-02, 2.497e-01, -1.483e-03, 1.373e-01, -1.179e-01, 2.478e-01, -1.476e-01, 1.482e-01, 9.901e-01, 3.209e-01, 2.875e-01, -3.493e-02, 3.471e-02, 2.163e-01, -9.932e-02) * s1_2_1;
	r2 += M4(1.516e-02, -3.923e-01, -1.065e-01, 2.316e-02, -2.184e-01, 5.640e-02, -2.689e-01, 2.312e-01, 4.134e-01, 1.174e-01, -1.000e+00, -8.206e-02, 1.000e+00, 3.250e-01, 6.060e-01, -5.566e-02) * s1_2_1;
	r0 += M4(8.173e-02, -1.394e-02, -4.907e-02, -4.565e-02, 1.561e-01, 1.509e-01, 3.881e-02, 7.299e-02, -1.392e-01, -9.230e-02, -9.087e-02, 2.609e-01, 3.906e-01, 2.371e-02, 4.365e-01, -1.290e-01) * s1_2_2;
	r1 += M4(1.512e-01, 1.026e-02, 1.904e-01, -8.579e-02, -1.429e-01, 3.934e-01, 3.631e-01, -2.183e-01, -1.084e-01, 1.263e-02, -2.666e-02, -4.452e-01, 3.989e-02, -5.419e-01, -2.302e-01, 3.980e-01) * s1_2_2;
	r2 += M4(4.156e-04, -2.755e-02, 6.913e-02, 1.150e-01, 1.030e-01, 1.959e-02, 1.420e-01, 3.696e-02, 1.742e-01, 3.029e-01, -1.085e-01, 3.074e-02, -3.876e-02, -2.718e-01, 3.845e-01, -1.706e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.719e-01, -6.054e-02, 4.431e-01, 3.650e-01, 1.605e-01, -7.928e-03, 1.436e-01, -2.464e-01, -1.576e-01, -5.535e-02, -1.944e-01, 1.603e-02, -1.496e-01, -3.002e-01, -1.025e-01, 8.901e-02) * s0_0_0;
	r1 += M4(-1.363e-02, -3.885e-02, 1.408e-01, 2.124e-01, -9.005e-02, -3.817e-02, 2.282e-01, 7.576e-02, 9.433e-02, 3.485e-01, 1.258e-01, -2.836e-01, -1.869e-01, 1.614e-01, -3.970e-03, -2.959e-01) * s0_0_0;
	r2 += M4(-8.284e-02, -9.528e-01, -5.327e-02, -3.228e-01, 1.873e-01, 2.368e-01, 1.665e-01, 6.975e-02, -1.010e-01, 4.349e-01, -3.188e-02, 1.813e-01, -1.590e-01, -8.899e-02, -2.671e-02, 9.218e-02) * s0_0_0;
	r0 += M4(1.145e-01, -2.820e-01, 2.344e-01, 9.408e-02, 3.162e-02, -3.213e-02, 2.754e-02, -2.076e-01, -1.130e-01, -5.200e-04, 8.697e-02, -6.770e-02, -1.134e-01, -6.876e-02, 3.515e-02, -2.562e-01) * s0_0_1;
	r1 += M4(1.978e-01, 5.266e-02, 1.506e-01, -7.392e-01, -8.167e-02, -6.489e-03, -3.880e-01, 1.382e-02, -3.768e-01, 1.005e-01, -1.722e-01, 3.078e-01, -8.826e-02, -2.936e-01, -6.482e-02, -4.592e-01) * s0_0_1;
	r2 += M4(2.723e-01, 1.182e-01, -1.255e-01, -1.069e-01, 4.331e-01, 2.071e-01, 9.872e-02, -5.458e-02, 1.091e-01, 5.682e-02, -1.371e-01, 8.943e-02, 1.205e-01, -5.946e-02, 2.708e-02, -1.479e-01) * s0_0_1;
	r0 += M4(-8.395e-04, -3.026e-02, -7.160e-02, -1.049e-01, -1.630e-01, -2.801e-02, -2.916e-01, 4.519e-02, 3.329e-01, 1.271e-01, -3.236e-02, -1.909e-01, 1.762e-01, -5.920e-02, -6.911e-02, -3.928e-01) * s0_0_2;
	r1 += M4(2.544e-01, -3.330e-01, 1.915e-02, -2.269e-01, 3.101e-02, 1.360e-01, 1.280e-01, -3.764e-01, -4.246e-03, 4.304e-02, 4.142e-02, 1.666e-01, 3.137e-01, -3.862e-02, -1.257e-01, -1.610e-01) * s0_0_2;
	r2 += M4(-2.071e-01, 3.113e-01, -6.298e-02, -2.340e-01, -8.806e-02, -2.236e-01, -4.131e-01, -4.673e-02, 3.548e-03, 7.192e-02, 4.952e-01, 1.374e-01, -1.414e-03, -1.727e-01, 9.781e-03, 2.127e-01) * s0_0_2;
	r0 += M4(-9.205e-03, -3.040e-01, -1.849e-01, -7.743e-03, -2.058e-01, 3.180e-01, -1.946e-01, 6.167e-02, -8.247e-02, 2.578e-02, 4.503e-01, 5.452e-01, 7.442e-01, -6.747e-01, -1.698e-01, -9.426e-02) * s0_1_0;
	r1 += M4(-8.367e-02, 2.450e-01, 4.709e-01, 2.152e-01, 1.224e-01, -9.451e-02, -3.886e-01, 7.176e-03, -1.441e-02, 5.267e-02, -3.134e-01, -8.863e-01, 2.235e-02, 4.212e-01, 8.590e-01, -1.533e-01) * s0_1_0;
	r2 += M4(2.371e-01, -2.573e-01, 1.585e-01, 2.643e-01, -2.369e-01, -3.655e-01, -1.323e-02, -1.133e-01, 2.209e-02, -1.000e+00, 2.082e-01, -1.889e-01, 3.615e-01, 5.671e-01, 2.725e-01, 2.465e-01) * s0_1_0;
	r0 += M4(-1.779e-01, 4.634e-01, -5.925e-02, -2.380e-01, 1.793e-01, -3.765e-01, -9.064e-02, 2.531e-01, -1.268e-01, -1.081e-01, 1.070e-01, -1.395e-01, 1.013e-01, 1.000e+00, 4.677e-01, 7.090e-01) * s0_1_1;
	r1 += M4(-2.315e-02, -5.943e-01, -6.799e-01, 3.390e-01, -8.464e-03, 5.457e-02, 6.208e-01, 3.255e-01, 5.192e-01, -2.406e-02, 2.417e-01, 2.719e-01, -8.066e-01, 4.629e-02, -2.834e-01, 3.465e-01) * s0_1_1;
	r2 += M4(1.118e-01, -1.091e-01, -8.303e-02, 3.923e-01, 9.789e-02, -1.742e-02, 1.546e-02, -1.638e-02, 1.974e-01, 1.683e-01, -3.501e-01, 2.419e-02, 1.156e-01, 2.015e-01, -1.510e-01, -1.000e+00) * s0_1_1;
	r0 += M4(4.322e-01, 1.074e-01, 1.972e-03, -2.878e-01, 2.271e-01, -2.506e-02, 7.117e-01, 4.967e-01, 1.156e-01, 1.821e-01, 4.297e-01, 1.849e-02, -7.353e-01, 1.629e-02, 5.339e-03, 3.539e-01) * s0_1_2;
	r1 += M4(-3.218e-01, -2.578e-01, -6.088e-02, 1.322e-01, -3.655e-01, -1.754e-01, 2.950e-01, -7.289e-01, -5.277e-02, -1.763e-01, 1.565e-02, 2.645e-01, 7.475e-01, 1.293e-02, -1.984e-01, 2.500e-01) * s0_1_2;
	r2 += M4(-4.494e-01, 2.319e-01, 1.525e-01, -1.368e-01, 2.563e-02, 7.582e-02, -1.880e-01, -1.113e-01, -1.662e-01, -1.180e-01, -7.823e-02, 1.538e-01, -1.246e-01, -2.061e-01, -2.656e-01, 1.567e-01) * s0_1_2;
	r0 += M4(2.815e-02, -1.345e-01, -1.409e-01, 2.214e-01, -9.118e-02, -2.328e-02, 1.064e-01, 7.510e-02, 1.228e-01, 1.237e-01, -7.206e-01, -8.420e-02, 9.033e-02, -1.750e-01, -4.822e-02, -2.356e-01) * s0_2_0;
	r1 += M4(-1.558e-02, -3.064e-02, -2.469e-01, -6.225e-02, -9.644e-02, -1.739e-01, -2.555e-01, -1.360e-01, -1.355e-01, 1.433e-01, 9.833e-02, 2.026e-01, -5.954e-02, -2.939e-01, 4.546e-02, 3.480e-01) * s0_2_0;
	r2 += M4(3.132e-01, -9.037e-02, -5.845e-02, -1.375e-01, -1.804e-01, -9.077e-02, -2.079e-01, -1.851e-01, -5.129e-01, -2.140e-01, -3.568e-01, 9.116e-02, 9.408e-02, 1.560e-01, 2.927e-01, 1.277e-01) * s0_2_0;
	r0 += M4(4.177e-01, 5.676e-02, -1.489e-01, -1.560e-01, 5.368e-02, -6.271e-03, -1.723e-01, -2.078e-01, 1.242e-01, -2.773e-01, -6.391e-02, -2.130e-01, -7.678e-02, 2.980e-01, -1.247e-01, -2.754e-04) * s0_2_1;
	r1 += M4(2.268e-01, 2.308e-01, -2.405e-01, -1.282e-01, 2.250e-02, 8.181e-02, 1.939e-01, -6.568e-02, -1.276e-01, -4.870e-02, -4.615e-01, 2.089e-01, -1.686e-01, 8.872e-03, -1.864e-02, -9.977e-02) * s0_2_1;
	r2 += M4(-1.009e-01, 1.385e-01, -5.120e-02, 2.270e-02, 1.158e-01, 6.860e-02, 8.949e-02, 3.137e-01, 4.633e-01, 2.887e-01, 5.721e-01, -1.997e-01, -2.592e-01, -1.536e-01, -8.883e-02, -6.156e-02) * s0_2_1;
	r0 += M4(-3.404e-01, 8.049e-02, 3.141e-01, -5.498e-02, -6.030e-02, 1.487e-01, 4.155e-01, 1.353e-01, -1.086e-01, -6.088e-02, -2.311e-02, 9.340e-02, -4.827e-02, 1.939e-02, 1.038e-01, 8.842e-03) * s0_2_2;
	r1 += M4(-2.522e-01, -1.255e-01, 4.111e-01, -4.253e-02, 3.292e-03, 7.906e-02, -2.606e-01, 2.485e-01, -1.247e-01, -3.955e-02, -3.698e-02, 3.690e-02, 1.418e-01, 8.843e-02, -4.076e-02, 1.114e-02) * s0_2_2;
	r2 += M4(-2.762e-01, 1.639e-01, 2.228e-02, 1.367e-01, 1.048e-01, 1.791e-01, 5.762e-01, -2.607e-01, -9.749e-03, 4.363e-01, -2.764e-01, 7.037e-02, -6.794e-03, -1.645e-01, -1.927e-02, 1.548e-01) * s0_2_2;
	r0 += V4(-2.156e-02, 2.216e-02, -1.231e-01, -9.017e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.083e-01, 5.311e-02, -3.417e-02, 1.144e-01);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.265e-01, -1.696e-02, -1.687e-02, 9.839e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12_DS] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.581e-01, 1.332e-01, 7.871e-02, -6.058e-02, 3.833e-02, 6.210e-02, -9.702e-02, -3.171e-03, -6.180e-02, 2.877e-02, 9.022e-02, -6.659e-03, 9.876e-02, -3.398e-02, 2.251e-01, 2.162e-01) * s0_0_0;
	r1 += M4(3.021e-02, -6.634e-03, -5.385e-02, -1.062e-02, -5.410e-03, 9.550e-02, 6.221e-02, -1.230e-02, 2.170e-02, 2.398e-01, 2.166e-01, -2.325e-02, 1.430e-01, 1.935e-01, 3.554e-02, -3.526e-02) * s0_0_0;
	r2 += M4(-1.881e-01, -1.949e-01, -1.553e-01, -5.804e-02, -1.479e-02, 3.741e-02, -4.822e-02, -1.353e-01, -2.430e-01, -1.118e-01, -1.914e-01, 1.341e-01, 1.224e-01, -1.335e-01, 1.899e-01, 1.543e-01) * s0_0_0;
	r0 += M4(2.472e-01, -9.810e-02, -9.454e-02, -9.736e-02, -1.450e-01, -2.587e-03, 5.372e-03, 6.550e-02, 4.078e-02, -2.433e-02, 9.244e-02, 1.817e-02, 9.820e-02, -5.495e-02, 2.324e-02, -2.625e-02) * s0_0_1;
	r1 += M4(-1.604e-02, 1.118e-01, -2.307e-01, 2.081e-02, -1.343e-01, -1.593e-01, 3.291e-01, 1.853e-02, -2.445e-03, 2.604e-01, 2.333e-01, 4.865e-03, 4.816e-02, -1.085e-01, 1.338e-02, 2.599e-01) * s0_0_1;
	r2 += M4(-3.505e-01, -1.472e-01, -3.564e-01, 2.338e-02, 3.536e-02, 1.203e-01, -8.712e-02, -8.615e-02, -1.189e-01, -7.447e-02, -3.799e-01, 2.506e-01, -2.464e-01, 2.150e-02, 2.000e-02, 8.542e-02) * s0_0_1;
	r0 += M4(-9.909e-02, -2.000e-01, -1.054e-01, -5.961e-02, -1.008e-01, 1.714e-01, 8.610e-02, 5.578e-02, 1.200e-01, -4.076e-03, 5.795e-02, 1.086e-02, 2.449e-02, -9.492e-02, -5.727e-02, -1.107e-02) * s0_0_2;
	r1 += M4(-1.073e-02, 1.108e-01, 1.643e-01, -2.283e-01, -2.099e-02, 6.704e-02, 2.502e-02, 1.264e-01, 6.474e-02, 1.030e-01, 1.572e-01, 6.960e-02, -8.605e-02, -9.894e-02, -7.982e-02, -8.418e-02) * s0_0_2;
	r2 += M4(-1.890e-01, 1.124e-01, -3.607e-02, 3.490e-02, 7.755e-02, -3.760e-02, 3.824e-02, 1.275e-01, -4.322e-01, 3.291e-02, -1.584e-01, 6.792e-02, 6.202e-02, 1.159e-01, 8.939e-02, -1.529e-01) * s0_0_2;
	r0 += M4(3.138e-01, 8.213e-02, 3.293e-01, -6.232e-02, 2.012e-01, -5.282e-02, -4.012e-04, 2.919e-02, -1.606e-01, 7.203e-02, 3.806e-01, -1.685e-01, -2.822e-01, -1.065e-02, 7.678e-01, 1.619e-01) * s0_1_0;
	r1 += M4(1.625e-01, -1.608e-01, -1.640e-01, -7.367e-02, 8.617e-02, -4.141e-01, -3.057e-01, -1.872e-02, -1.733e-01, -1.970e-01, 1.237e-01, -5.136e-02, 1.485e-01, -1.327e-01, -3.824e-02, -1.066e-01) * s0_1_0;
	r2 += M4(-2.868e-01, -1.304e-01, -9.755e-02, 2.176e-02, 2.228e-01, 4.174e-01, 1.873e-01, 6.464e-02, -3.002e-01, -4.638e-02, -2.221e-01, 2.125e-01, -2.131e-01, -1.322e-01, 3.374e-03, 2.721e-01) * s0_1_0;
	r0 += M4(5.095e-01, -6.515e-03, 2.357e-01, 4.227e-02, -3.721e-01, -3.620e-01, -8.141e-01, 1.055e-01, 3.287e-02, -2.824e-02, -6.301e-03, -1.687e-01, -5.746e-02, -7.258e-01, 1.031e-01, -3.645e-01) * s0_1_1;
	r1 += M4(1.899e-01, 7.797e-02, -9.658e-02, 2.200e-02, -1.362e-01, 1.674e-01, -5.606e-01, -1.770e-01, -2.993e-02, -1.287e-02, -1.652e-02, -1.251e-01, -1.757e-01, -4.692e-01, 3.292e-01, -3.201e-02) * s0_1_1;
	r2 += M4(-8.033e-01, 2.858e-02, -1.340e-01, -3.665e-01, 7.871e-01, 6.799e-02, 7.663e-01, 1.595e-01, -2.656e-01, -1.636e-01, -3.545e-01, -1.751e-02, 1.594e-01, -1.311e-01, 3.177e-01, -1.245e-01) * s0_1_1;
	r0 += M4(-3.464e-02, -2.319e-01, -6.732e-02, -8.342e-02, -7.184e-02, 5.059e-01, 1.399e-01, 3.872e-02, 1.344e-02, -2.919e-02, -1.099e-02, -7.043e-02, 2.144e-01, 1.003e-03, -1.125e-02, 2.862e-03) * s0_1_2;
	r1 += M4(-2.533e-01, -8.059e-02, -2.310e-01, -1.480e-01, 1.983e-01, -4.061e-02, 4.911e-02, 5.996e-01, 1.982e-01, 2.081e-01, 3.438e-01, -5.976e-02, -8.453e-02, 1.577e-01, -3.748e-02, -5.716e-02) * s0_1_2;
	r2 += M4(-7.945e-02, 7.172e-03, 3.017e-02, -1.880e-01, -1.312e-01, -3.192e-03, 1.849e-01, -3.544e-02, -3.706e-01, -8.959e-03, -2.309e-01, 2.251e-01, 1.047e-01, 2.200e-01, 1.007e-01, -4.577e-02) * s0_1_2;
	r0 += M4(1.044e-01, -4.113e-02, -9.030e-02, -6.018e-02, 1.255e-01, -6.140e-02, -2.329e-01, 1.168e-01, -5.299e-02, 3.620e-02, 1.538e-01, -1.116e-01, -1.893e-01, 4.926e-02, 4.812e-03, 1.379e-01) * s0_2_0;
	r1 += M4(1.385e-02, -2.461e-01, 4.511e-03, -1.969e-03, 1.543e-01, 1.880e-01, -1.562e-01, 3.046e-02, -7.052e-02, -1.282e-01, 1.171e-01, -3.219e-02, 1.899e-02, 4.599e-01, 2.725e-01, 1.685e-01) * s0_2_0;
	r2 += M4(-1.349e-02, -1.415e-01, -9.502e-02, 5.194e-02, 4.542e-01, -2.167e-02, 2.377e-01, -2.605e-01, -3.429e-01, -2.287e-02, -1.729e-01, 2.094e-01, -1.559e-01, -2.658e-01, 1.694e-01, -4.346e-02) * s0_2_0;
	r0 += M4(2.480e-01, -2.937e-02, -9.739e-04, 2.532e-02, -1.947e-03, 2.629e-01, -9.413e-02, 3.940e-02, 1.343e-01, -4.870e-02, 1.960e-01, -8.141e-02, 1.411e-01, 6.459e-02, -2.572e-01, 1.733e-01) * s0_2_1;
	r1 += M4(3.863e-02, -5.679e-02, 3.693e-02, -5.675e-03, 1.913e-01, 2.044e-01, -3.448e-02, 1.385e-01, -9.361e-02, -2.691e-01, -6.842e-02, -9.750e-02, 5.544e-01, 2.720e-01, 1.997e-01, 1.327e-01) * s0_2_1;
	r2 += M4(-1.777e-01, -4.232e-02, 1.558e-01, 2.979e-01, 6.075e-02, 1.869e-01, 2.258e-02, -2.244e-01, -2.201e-01, -9.538e-02, 6.615e-02, 1.509e-01, 3.878e-01, -2.175e-01, 3.333e-02, 2.207e-01) * s0_2_1;
	r0 += M4(1.077e-01, -8.878e-03, -5.778e-02, -5.518e-02, 1.710e-01, 2.192e-01, -9.787e-02, 1.289e-01, -1.044e-01, -2.006e-01, 6.081e-02, -2.760e-02, 1.734e-01, 8.418e-02, -1.255e-01, -8.647e-03) * s0_2_2;
	r1 += M4(-1.451e-02, -1.332e-01, -2.771e-02, -8.799e-03, 2.959e-01, 1.236e-01, -1.380e-02, 1.587e-01, -1.586e-02, 1.606e-01, 4.024e-02, -4.647e-02, 9.100e-02, -1.695e-02, 4.099e-02, 6.517e-02) * s0_2_2;
	r2 += M4(-1.054e-01, -4.711e-02, 2.518e-02, 4.730e-02, 3.218e-01, -6.360e-02, -7.610e-02, -1.310e-01, -2.173e-01, 1.751e-01, 1.415e-01, 1.304e-01, -8.078e-02, 1.597e-01, -2.371e-04, 2.287e-02) * s0_2_2;
	r0 += M4(-7.927e-02, -9.474e-02, -2.545e-02, -4.700e-02, -7.336e-02, 1.074e-01, 2.466e-01, -1.284e-01, -7.625e-02, -4.082e-02, 8.242e-02, 1.809e-01, -2.812e-02, -3.784e-03, -1.780e-01, -1.571e-02) * s1_0_0;
	r1 += M4(-1.821e-02, -1.416e-01, 1.229e-02, 1.584e-01, -6.210e-02, -2.505e-01, 1.544e-02, -5.412e-02, 5.754e-02, 8.074e-02, 8.299e-02, -2.559e-02, 1.927e-02, 3.671e-02, -1.046e-01, -1.353e-02) * s1_0_0;
	r2 += M4(-7.416e-02, 8.457e-02, 7.429e-02, 1.720e-01, 3.256e-02, 1.537e-01, -7.125e-02, -2.349e-01, 2.253e-01, 4.935e-03, 9.168e-02, -2.137e-01, 6.808e-02, 3.287e-02, -2.665e-02, 1.052e-01) * s1_0_0;
	r0 += M4(-5.638e-03, 7.036e-02, 1.097e-01, -1.822e-01, -7.185e-02, -5.588e-02, 1.387e-01, 2.638e-02, -8.731e-02, -2.585e-02, 1.944e-01, 2.242e-01, 1.348e-01, 8.570e-02, 5.522e-02, -9.285e-03) * s1_0_1;
	r1 += M4(1.364e-02, -3.026e-01, 2.261e-01, -9.160e-02, -2.172e-02, -2.190e-01, -3.934e-01, 9.783e-03, 6.437e-02, -5.987e-02, 8.030e-02, -2.147e-02, -3.973e-03, -2.449e-01, -2.632e-01, -3.462e-02) * s1_0_1;
	r2 += M4(-3.331e-01, -1.116e-01, -1.078e-01, -3.774e-02, 1.192e-01, 1.586e-01, 3.768e-01, -3.694e-01, 2.248e-01, 1.900e-02, 2.883e-01, -3.876e-01, 1.256e-01, -1.293e-01, 1.853e-01, -1.749e-01) * s1_0_1;
	r0 += M4(4.769e-02, -5.042e-02, -8.754e-02, 5.288e-02, -7.714e-02, -7.374e-02, -9.472e-02, -9.970e-02, -1.122e-01, 3.502e-01, 1.330e-01, 1.077e-01, -2.307e-02, -3.413e-02, -1.821e-02, -6.958e-02) * s1_0_2;
	r1 += M4(-1.987e-02, 1.395e-01, 5.884e-02, 1.679e-02, -7.242e-02, -1.499e-01, -2.378e-01, -2.096e-01, -5.315e-02, -1.201e-01, 8.315e-02, -5.397e-02, -2.703e-02, 5.645e-02, 7.305e-02, -2.936e-02) * s1_0_2;
	r2 += M4(9.932e-02, -7.059e-02, 6.339e-02, 3.028e-02, -6.579e-02, -3.389e-01, -8.314e-02, -6.360e-02, 2.501e-01, -1.481e-02, 3.361e-01, 1.450e-01, -9.596e-04, 8.631e-03, 5.363e-02, 1.049e-02) * s1_0_2;
	r0 += M4(-6.080e-01, -1.791e-01, 1.046e-01, -9.446e-02, -2.816e-02, -1.831e-01, -5.641e-01, 1.496e-01, -2.076e-01, -7.457e-02, 3.257e-01, 4.531e-02, 1.927e-01, -5.877e-03, -1.732e-02, -2.628e-02) * s1_1_0;
	r1 += M4(-3.324e-01, 2.151e-01, 3.162e-01, 2.697e-02, -5.851e-02, 2.147e-01, 1.524e-01, 4.181e-02, -4.930e-02, 1.307e-02, 1.314e-01, -2.945e-02, -1.298e-02, -1.905e-01, -1.697e-01, -2.254e-02) * s1_1_0;
	r2 += M4(1.559e-01, -4.997e-01, 1.893e-01, -3.251e-01, 5.912e-02, 3.179e-01, 9.637e-03, 4.990e-01, 2.430e-01, -1.916e-01, 2.344e-01, -3.941e-01, 1.933e-02, -2.641e-01, 4.239e-02, -9.540e-02) * s1_1_0;
	r0 += M4(6.429e-01, 7.762e-02, -2.521e-01, 8.689e-02, -4.550e-01, -1.242e-01, 4.723e-01, 2.475e-01, -2.181e-01, 3.774e-01, 1.000e+00, -1.341e-01, -5.080e-02, 2.632e-01, 3.945e-02, 3.521e-02) * s1_1_1;
	r1 += M4(1.983e-01, -7.690e-02, -2.034e-02, 5.558e-01, 3.459e-01, 7.917e-01, 4.823e-01, -1.812e-01, -4.334e-01, -7.455e-01, -9.967e-02, -1.916e-01, -1.579e-02, -1.084e-01, 5.566e-01, -6.087e-02) * s1_1_1;
	r2 += M4(-6.223e-01, 4.287e-01, 2.449e-01, 1.012e-01, -4.514e-01, 2.426e-01, -9.041e-02, 3.760e-01, 4.429e-01, -3.565e-01, -2.423e-02, -1.675e-01, -1.606e-01, -2.123e-01, -6.024e-01, -1.382e-01) * s1_1_1;
	r0 += M4(-2.171e-01, -2.414e-01, -7.668e-03, -6.224e-02, 6.846e-03, 1.355e-01, 1.699e-01, 2.144e-02, -6.037e-01, -1.801e-01, 4.761e-01, 9.324e-04, 9.151e-02, 5.500e-02, -4.646e-02, 5.092e-02) * s1_1_2;
	r1 += M4(7.379e-04, -2.595e-01, -2.966e-01, 1.678e-01, -3.050e-03, -1.649e-01, 7.691e-02, -7.866e-02, -5.469e-01, -4.527e-01, -5.133e-01, -1.425e-01, -1.312e-02, 3.035e-02, -2.133e-02, 2.194e-02) * s1_1_2;
	r2 += M4(-7.534e-02, -2.002e-01, -2.741e-01, -1.774e-01, -2.299e-01, -3.047e-01, -7.872e-01, 1.689e-02, 3.741e-01, -5.933e-01, 6.814e-01, -5.923e-02, -5.028e-02, 7.285e-02, -4.447e-02, -9.072e-02) * s1_1_2;
	r0 += M4(-3.075e-02, 2.090e-01, 1.498e-01, 9.154e-02, -1.204e-01, -2.639e-02, 6.766e-02, -1.431e-01, -9.402e-02, 6.938e-03, 1.768e-01, 8.045e-02, 2.364e-02, -7.935e-02, -2.149e-01, 3.116e-02) * s1_2_0;
	r1 += M4(-1.254e-01, 1.762e-01, 4.091e-01, 7.393e-02, -1.155e-01, -2.648e-01, -3.545e-01, -4.884e-02, 1.744e-02, 5.441e-02, -2.925e-02, -5.890e-03, 8.862e-02, 1.472e-01, -8.793e-02, 3.978e-03) * s1_2_0;
	r2 += M4(-4.639e-01, -3.425e-01, -3.210e-01, 7.298e-02, 1.188e-01, 1.681e-01, 1.671e-01, -4.966e-03, 8.794e-02, 1.099e-01, 9.170e-02, -1.244e-02, 1.409e-01, 6.758e-02, 4.897e-02, 2.551e-01) * s1_2_0;
	r0 += M4(3.926e-02, -1.689e-01, -1.451e-01, -5.116e-02, -2.439e-01, 3.883e-02, -7.678e-02, -1.514e-01, -1.750e-01, 1.189e-01, 2.123e-01, -1.232e-02, 5.722e-02, -6.998e-02, 4.903e-02, -2.616e-02) * s1_2_1;
	r1 += M4(8.194e-02, 1.504e-01, 1.537e-01, -5.726e-02, -1.520e-01, -7.646e-02, -5.160e-03, -1.336e-01, -7.874e-02, -6.245e-01, -2.183e-01, -5.967e-02, 1.558e-01, -7.414e-02, -1.577e-02, 1.066e-01) * s1_2_1;
	r2 += M4(1.294e-01, 1.723e-01, -4.240e-01, -3.399e-01, -3.810e-02, 2.093e-01, -3.615e-01, 1.556e-01, 1.618e-01, -3.878e-01, 1.920e-01, 1.396e-01, -3.505e-01, -2.187e-01, 1.605e-01, 2.804e-01) * s1_2_1;
	r0 += M4(-3.834e-02, -1.001e-01, -2.251e-01, -6.680e-02, 1.061e-01, -2.930e-02, 6.601e-02, -6.329e-02, -2.718e-01, -2.148e-02, 1.758e-01, -5.963e-02, 1.644e-01, 1.401e-01, -8.884e-02, 3.119e-02) * s1_2_2;
	r1 += M4(-3.853e-02, -3.735e-02, -2.698e-01, -7.210e-02, -8.698e-02, -5.028e-02, 7.376e-02, -4.640e-02, -3.278e-01, -8.676e-02, -2.877e-02, -7.644e-02, 3.223e-02, -4.698e-02, -3.526e-02, 2.904e-02) * s1_2_2;
	r2 += M4(-5.521e-02, -9.898e-02, 2.615e-01, -1.421e-01, -1.933e-01, -2.528e-01, -1.817e-01, 2.973e-01, 2.512e-01, -3.744e-02, 1.868e-01, -2.440e-01, 3.618e-02, -8.464e-02, 1.486e-02, -8.411e-04) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.229e-02, -8.849e-02, -7.359e-01, 1.486e-01, -5.940e-02, -5.093e-02, 3.064e-02, -7.547e-02, -1.014e-01, -1.986e-02, 2.944e-01, 3.856e-02, 1.440e-01, -8.025e-02, 1.784e-01, 2.043e-01) * s0_0_0;
	r1 += M4(-1.405e-02, -2.816e-02, -4.323e-02, 2.156e-03, -3.919e-03, 1.028e-01, 5.104e-02, 1.726e-02, 5.720e-02, 5.284e-03, 9.317e-02, 1.374e-02, 1.924e-01, 3.265e-01, -2.385e-02, 2.221e-02) * s0_0_0;
	r2 += M4(1.725e-01, 4.719e-02, 1.656e-01, 2.545e-02, -4.454e-02, -9.026e-03, -1.251e-01, 1.876e-02, -1.558e-01, 1.550e-01, 2.584e-01, -2.887e-01, 1.960e-01, 1.263e-01, 9.681e-02, 3.767e-01) * s0_0_0;
	r0 += M4(2.817e-01, -1.178e-02, -3.109e-02, 2.194e-01, -1.588e-01, -5.189e-02, 1.192e-01, 1.128e-02, -1.037e-01, -6.591e-02, 5.648e-02, -3.852e-02, -7.587e-02, 7.258e-02, 6.877e-03, 8.723e-02) * s0_0_1;
	r1 += M4(9.465e-02, -6.841e-02, -3.460e-02, 1.204e-01, 6.002e-03, -1.334e-02, 1.028e-01, -3.107e-03, -1.292e-01, -4.123e-01, -2.977e-02, -1.327e-01, 4.655e-02, 1.342e-01, -3.231e-01, -5.379e-02) * s0_0_1;
	r2 += M4(1.552e-01, -7.990e-02, 1.772e-01, 1.528e-01, 2.169e-02, 1.382e-01, -4.249e-02, 4.469e-02, 1.796e-01, -3.413e-01, -1.501e-01, -3.790e-01, 2.886e-01, 1.175e-01, 1.993e-01, 4.865e-02) * s0_0_1;
	r0 += M4(3.380e-02, 5.311e-02, -1.240e-02, 9.422e-02, -5.116e-02, -1.383e-01, 1.214e-01, -2.008e-02, -4.524e-02, -1.682e-01, -1.182e-02, -8.029e-02, 7.770e-02, 2.822e-01, 1.926e-01, 1.362e-02) * s0_0_2;
	r1 += M4(-7.642e-02, 4.531e-02, -1.853e-01, 2.669e-01, 1.014e-02, -1.322e-01, 5.993e-02, 1.218e-01, -2.315e-01, -6.575e-02, 2.227e-01, 1.866e-02, 1.385e-01, -8.472e-02, 3.055e-02, 1.236e-02) * s0_0_2;
	r2 += M4(2.275e-01, -1.223e-02, 1.280e-01, -1.409e-01, 1.015e-02, 7.756e-02, 5.068e-02, 1.143e-01, 2.866e-02, 1.902e-01, 2.381e-01, -1.652e-01, 7.878e-02, 9.601e-03, 2.983e-02, 2.254e-01) * s0_0_2;
	r0 += M4(1.263e-02, 9.066e-02, -2.686e-01, 2.368e-02, 5.199e-02, -9.988e-02, 6.501e-02, 1.569e-02, -5.732e-02, -2.813e-02, 4.531e-01, 4.935e-02, 5.326e-02, 3.728e-01, 3.162e-02, -2.378e-01) * s0_1_0;
	r1 += M4(-1.083e-02, -2.933e-02, -8.960e-02, 2.432e-03, 7.185e-03, -1.617e-01, -1.401e-01, -4.355e-02, 3.381e-02, 1.521e-01, -1.011e-01, 9.346e-05, 2.178e-01, 6.338e-02, -4.810e-03, 9.064e-03) * s0_1_0;
	r2 += M4(1.155e-01, -1.985e-02, 4.509e-02, -1.436e-01, -1.902e-01, 2.478e-01, 6.668e-02, 3.382e-01, -2.941e-01, -6.937e-02, 2.965e-01, -9.298e-02, -3.853e-01, -1.533e-01, -2.674e-01, -6.855e-01) * s0_1_0;
	r0 += M4(1.007e-02, 5.757e-02, -5.160e-01, 3.065e-01, -3.655e-01, -2.436e-01, 3.334e-01, -1.043e-02, 1.158e-01, -2.016e-01, 8.372e-02, -1.430e-01, 2.857e-01, 2.588e-01, 3.758e-02, 2.112e-02) * s0_1_1;
	r1 += M4(1.403e-01, 4.898e-01, -6.736e-02, 5.954e-02, -5.952e-02, 6.284e-03, 4.991e-02, 5.397e-02, -2.630e-01, 6.707e-02, -1.119e-01, 1.613e-01, -2.076e-01, -3.595e-02, -3.564e-01, -1.432e-01) * s0_1_1;
	r2 += M4(6.594e-01, 4.806e-02, 2.634e-01, -1.535e-01, 3.312e-02, 3.627e-01, 4.779e-01, 3.076e-01, -8.323e-02, 1.435e-01, -3.941e-01, -1.053e-01, 6.537e-01, -6.132e-02, -6.145e-01, -1.151e-01) * s0_1_1;
	r0 += M4(-2.046e-02, 1.626e-01, -7.975e-02, 1.169e-01, -2.335e-01, -6.707e-02, 5.866e-02, -1.143e-01, -1.898e-02, -2.842e-02, 2.222e-02, 7.764e-02, -4.493e-02, 1.024e-01, 1.712e-01, -9.293e-02) * s0_1_2;
	r1 += M4(2.601e-01, 1.175e-01, -2.374e-02, 1.965e-01, 1.086e-01, -1.845e-01, 3.892e-02, -6.910e-02, 2.454e-02, -6.476e-02, -8.668e-02, 1.778e-02, -5.301e-02, -2.219e-01, 3.073e-01, 7.670e-02) * s0_1_2;
	r2 += M4(2.332e-01, -9.156e-02, 1.259e-01, -3.874e-02, -4.361e-03, 8.280e-03, 1.731e-01, 7.486e-02, 3.149e-01, 7.660e-02, -2.791e-01, -1.338e-01, -1.772e-01, 2.874e-01, 1.512e-01, 9.267e-02) * s0_1_2;
	r0 += M4(3.220e-02, -9.619e-03, -1.375e-01, 6.749e-02, -4.142e-02, -1.519e-01, -1.936e-01, -6.683e-02, -1.426e-01, 1.404e-01, 2.607e-01, 4.623e-02, -1.842e-01, -3.673e-02, -1.030e-01, 1.672e-01) * s0_2_0;
	r1 += M4(-1.198e-02, 8.172e-02, 6.909e-02, 2.009e-02, 2.211e-02, -4.884e-02, 3.285e-02, 3.234e-02, 3.667e-02, -6.430e-02, 1.127e-01, -5.801e-02, 8.129e-02, 2.670e-01, 1.852e-01, 5.919e-02) * s0_2_0;
	r2 += M4(1.957e-01, 2.367e-02, -4.756e-04, -1.499e-01, -7.033e-02, 3.075e-01, -1.351e-01, 1.184e-01, 4.161e-02, 4.996e-03, 1.413e-01, 3.689e-01, 8.720e-02, 2.510e-02, 3.572e-01, -3.193e-01) * s0_2_0;
	r0 += M4(1.214e-01, 8.325e-02, -1.321e-01, 8.680e-02, -3.834e-01, -4.393e-02, -3.706e-02, 6.066e-02, -7.618e-02, -1.988e-01, 4.995e-01, -1.011e-01, 2.521e-02, 1.795e-01, 2.561e-02, 8.987e-02) * s0_2_1;
	r1 += M4(5.625e-02, 4.562e-02, -1.201e-02, 4.368e-02, 7.534e-02, 7.591e-01, 2.589e-01, 1.321e-02, -1.674e-01, -6.583e-01, -5.445e-01, -1.236e-01, -5.469e-02, -3.021e-01, 1.683e-01, 1.107e-01) * s0_2_1;
	r2 += M4(2.503e-01, 1.229e-01, 9.203e-02, -1.695e-01, -6.541e-02, 5.020e-01, -1.504e-01, -1.693e-01, 1.924e-01, 1.012e-01, 5.430e-01, 1.554e-01, 2.944e-02, -5.540e-02, -2.471e-01, -6.568e-02) * s0_2_1;
	r0 += M4(7.061e-02, 1.782e-01, 9.490e-03, 6.330e-02, -3.246e-01, 4.245e-02, 2.084e-01, -9.896e-04, -2.693e-01, -2.470e-01, 2.329e-02, 5.057e-03, -1.746e-02, 1.424e-01, 2.087e-02, 1.009e-02) * s0_2_2;
	r1 += M4(4.966e-02, -1.115e-01, -3.408e-02, 4.483e-02, 9.816e-02, -1.623e-01, 2.383e-01, -2.390e-02, 2.743e-02, 3.428e-01, -1.075e-01, -1.058e-01, 5.812e-02, -4.255e-02, 1.986e-01, 2.572e-02) * s0_2_2;
	r2 += M4(1.833e-02, -4.534e-02, -7.123e-03, -7.295e-02, 1.681e-03, -2.114e-01, -3.511e-01, 7.349e-02, 6.384e-03, 1.852e-01, 7.331e-01, 1.889e-01, 9.053e-02, 8.576e-02, -2.359e-01, -3.414e-02) * s0_2_2;
	r0 += V4(4.843e-02, -6.295e-03, -6.277e-02, -1.083e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.202e-03, -2.203e-02, -2.180e-02, 5.087e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.529e-02, -2.319e-02, -1.844e-02, -4.064e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12_DS] -conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(6.534e-03, -8.869e-02, 8.156e-03, -3.081e-02, 1.533e-02, 9.983e-02, -1.678e-02, 4.748e-02, 2.003e-02, -6.934e-02, 8.584e-03, -1.366e-02, 6.425e-03, 4.000e-02, -3.603e-02, 9.470e-02) * s0_0_0;
	r1 += M4(4.624e-03, -3.622e-03, 4.768e-02, 1.135e-02, -3.944e-02, 8.973e-03, -9.350e-02, 2.272e-02, 2.873e-02, -1.712e-03, 6.665e-02, -4.319e-02, -5.030e-02, -9.412e-02, -1.557e-01, -3.226e-02) * s0_0_0;
	r2 += M4(6.810e-02, 7.981e-02, 8.836e-02, 9.255e-02, 8.522e-03, -3.758e-02, -2.213e-02, -7.753e-02, 9.014e-02, 4.937e-02, -1.580e-02, 4.254e-02, -4.227e-02, -5.920e-02, 1.088e-02, -2.241e-01) * s0_0_0;
	r0 += M4(-4.163e-03, -7.755e-02, 6.296e-02, 5.438e-02, -4.454e-02, 2.624e-01, -4.906e-02, -1.636e-01, 3.757e-03, 6.770e-02, 6.113e-02, 9.800e-02, -1.703e-02, 1.004e-01, -4.959e-02, -1.758e-01) * s0_0_1;
	r1 += M4(7.523e-02, -9.318e-03, 1.747e-01, 5.442e-02, -2.093e-02, 8.429e-02, 1.333e-01, 9.641e-02, 2.844e-02, -3.776e-02, -1.253e-01, 2.036e-02, 4.132e-02, -1.061e-02, 2.855e-01, -4.345e-03) * s0_0_1;
	r2 += M4(-1.092e-01, 3.578e-02, 4.554e-02, 2.529e-01, 9.801e-02, -2.094e-02, 6.683e-02, -3.074e-01, -3.221e-02, -1.846e-02, -5.183e-02, -1.537e-02, 2.074e-01, -9.486e-04, -6.644e-02, -1.276e-01) * s0_0_1;
	r0 += M4(4.218e-04, 1.047e-01, -1.118e-02, 8.187e-02, 3.856e-04, -1.166e-01, -2.275e-02, -3.064e-02, 6.540e-03, -2.115e-01, -4.137e-02, -9.512e-02, -3.286e-04, -2.216e-02, 2.285e-03, 2.290e-01) * s0_0_2;
	r1 += M4(2.728e-02, 6.343e-02, 4.684e-02, 8.526e-02, -1.568e-02, -1.206e-01, -8.586e-03, -4.151e-03, -4.819e-03, -6.665e-02, -1.550e-01, -1.294e-01, -4.216e-02, 6.529e-02, 2.595e-02, -3.293e-02) * s0_0_2;
	r2 += M4(5.516e-02, -7.053e-03, 1.243e-01, 1.775e-01, 7.295e-03, -2.677e-03, -2.706e-02, -8.606e-02, 2.347e-02, 1.550e-02, -3.119e-01, -9.710e-02, -4.201e-02, 1.095e-02, -3.445e-03, -1.496e-01) * s0_0_2;
	r0 += M4(1.291e-01, -7.052e-02, 7.104e-02, -3.657e-02, -2.508e-02, 3.454e-02, 2.754e-03, -6.222e-02, 2.842e-02, -1.316e-02, 3.742e-02, -9.145e-03, -1.361e-01, -1.027e-02, -5.582e-02, 2.502e-02) * s0_1_0;
	r1 += M4(8.012e-02, 3.913e-02, -1.520e-01, 5.203e-02, 1.521e-02, -3.322e-02, 3.381e-02, -1.984e-01, 4.285e-02, -7.033e-03, 2.538e-02, -2.408e-02, -1.269e-01, 1.165e-01, 9.588e-02, 6.354e-02) * s0_1_0;
	r2 += M4(8.549e-02, -7.377e-02, 2.698e-02, -9.815e-02, 1.480e-01, 9.009e-02, -4.969e-02, -9.771e-04, 8.806e-02, 1.445e-02, -1.061e-02, 1.096e-02, -2.443e-01, 5.767e-02, 5.650e-02, 3.222e-01) * s0_1_0;
	r0 += M4(1.050e-01, -3.601e-01, -1.889e-01, -4.527e-01, 2.642e-02, 3.155e-01, 2.328e-01, 8.486e-02, -2.529e-01, 1.068e-01, -1.448e-01, 2.924e-02, 2.100e-01, 2.365e-01, 1.594e-01, 4.500e-01) * s0_1_1;
	r1 += M4(9.701e-02, -1.268e-01, -1.062e-01, -3.954e-01, -9.810e-02, 1.365e-01, -4.072e-01, 1.850e-01, -3.898e-01, -1.100e-01, -2.705e-01, 8.667e-02, 3.602e-01, 8.835e-02, 2.861e-01, 2.658e-01) * s0_1_1;
	r2 += M4(-2.386e-01, 1.890e-01, -3.994e-01, -5.912e-01, 2.353e-01, -1.046e-01, 5.697e-02, -4.979e-01, -2.765e-01, -4.364e-01, 1.143e-01, -5.273e-01, 3.927e-01, -8.150e-02, 1.772e-01, 2.891e-01) * s0_1_1;
	r0 += M4(-1.563e-02, 1.264e-01, 1.125e-01, 7.029e-02, 2.443e-02, -8.665e-02, -1.333e-01, -1.635e-01, -5.915e-02, -5.468e-01, -1.761e-01, -3.548e-01, 1.097e-02, -2.357e-01, -4.028e-01, 4.273e-01) * s0_1_2;
	r1 += M4(3.525e-02, 3.420e-02, 2.995e-02, -9.563e-02, -4.974e-02, -7.911e-02, -7.837e-02, -1.414e-02, -9.323e-02, -1.389e-01, -4.873e-01, -2.282e-01, -2.093e-02, 2.877e-01, -1.873e-01, 1.276e-02) * s0_1_2;
	r2 += M4(-4.233e-02, -3.992e-02, -2.385e-01, -2.349e-01, -7.602e-02, -1.272e-02, -1.242e-01, 4.672e-02, -2.437e-01, -1.206e-01, -2.576e-01, -7.949e-01, -1.353e-01, -3.003e-02, -2.139e-01, 1.247e-01) * s0_1_2;
	r0 += M4(-3.085e-01, 6.260e-02, -4.263e-02, 2.186e-02, -1.461e-01, -5.314e-02, 1.098e-01, -3.038e-02, 7.058e-02, -4.882e-02, -2.744e-02, -2.204e-02, 1.810e-01, -1.267e-02, 1.362e-01, -4.509e-04) * s0_2_0;
	r1 += M4(-2.264e-01, 4.994e-02, -2.141e-02, 1.487e-03, -1.100e-01, 3.224e-02, 4.451e-03, -5.201e-02, 6.557e-02, 1.640e-03, 1.585e-02, -1.343e-02, 6.119e-02, -4.033e-02, 1.522e-02, 9.570e-02) * s0_2_0;
	r2 += M4(1.288e-01, -1.772e-01, -1.277e-03, 4.006e-02, 1.632e-01, -9.692e-02, 2.344e-02, -9.519e-03, -5.869e-03, 4.801e-02, -1.728e-02, -5.976e-04, 1.947e-02, 5.346e-02, 8.020e-02, -1.122e-01) * s0_2_0;
	r0 += M4(1.067e-01, 8.946e-02, -1.213e-01, -4.994e-02, -2.703e-01, 7.485e-03, -2.027e-01, -4.865e-02, -7.246e-01, -1.723e-03, -3.759e-02, 4.420e-02, 1.229e-01, 1.833e-01, -1.651e-01, 9.485e-02) * s0_2_1;
	r1 += M4(-4.430e-02, 3.341e-02, -5.627e-03, -1.025e-01, -1.815e-01, -1.748e-02, -9.132e-03, 1.649e-02, -1.959e-02, 4.303e-03, 4.461e-02, 4.361e-02, 1.037e-01, -1.106e-01, 1.996e-02, -4.780e-02) * s0_2_1;
	r2 += M4(-1.000e+00, 4.364e-02, -1.518e-02, 1.016e-01, -1.139e-01, -1.666e-01, 1.449e-01, 8.337e-02, -2.420e-01, -1.133e-01, -6.209e-02, 7.293e-02, 6.195e-02, -4.614e-02, -2.231e-02, -7.652e-02) * s0_2_1;
	r0 += M4(1.036e-02, -8.384e-02, -4.038e-02, 5.439e-02, -3.692e-02, -6.522e-02, -4.383e-02, -5.254e-02, -1.004e-01, 5.929e-02, -1.645e-01, -1.867e-01, -5.679e-02, -2.385e-01, 1.581e-01, -1.411e-01) * s0_2_2;
	r1 += M4(7.004e-02, -2.207e-02, 2.547e-02, -1.000e+00, -5.039e-02, -8.370e-02, -2.768e-03, -1.000e+00, -1.443e-01, -7.172e-02, 5.632e-02, -1.000e+00, -1.437e-01, -1.520e-01, 1.462e-02, -1.000e+00) * s0_2_2;
	r2 += M4(-3.346e-01, 5.900e-03, -1.000e+00, 1.358e-01, 1.320e-01, -1.282e-02, -1.000e+00, -1.261e-01, -7.140e-01, -2.850e-02, -1.000e+00, -2.001e-01, -1.917e-01, 2.346e-02, -1.000e+00, -8.088e-02) * s0_2_2;
	r0 += M4(8.363e-03, -6.289e-02, -8.392e-02, 2.202e-03, 6.886e-03, -4.280e-02, 3.259e-02, -3.814e-02, -1.263e-02, 1.199e-01, -6.293e-02, -6.968e-02, -1.252e-02, -4.874e-02, -1.241e-02, 7.985e-02) * s1_0_0;
	r1 += M4(7.110e-02, 5.955e-02, 3.098e-01, -6.886e-02, -3.872e-02, 3.170e-02, -8.738e-02, 1.404e-02, 3.363e-02, 1.133e-01, 1.721e-01, 2.274e-02, -2.990e-02, -1.912e-02, -1.052e-01, -3.060e-02) * s1_0_0;
	r2 += M4(6.538e-02, 1.828e-02, -1.457e-02, -6.395e-02, -2.243e-02, -2.399e-02, -2.369e-02, -2.406e-02, 4.467e-02, 2.948e-02, 3.046e-03, 3.701e-02, -1.341e-01, -9.648e-02, -5.624e-02, -2.079e-01) * s1_0_0;
	r0 += M4(3.036e-02, 3.128e-01, 4.990e-02, 2.634e-01, -7.025e-03, -2.461e-01, -1.150e-02, -7.586e-02, -3.416e-02, -4.843e-02, -1.133e-01, -1.208e-01, 2.641e-02, 1.171e-01, 1.646e-02, -1.155e-01) * s1_0_1;
	r1 += M4(1.623e-02, 1.660e-01, 1.643e-03, 5.011e-02, -7.348e-02, -9.575e-02, -1.450e-01, -1.151e-01, -3.268e-02, 3.379e-01, 1.594e-01, 1.718e-01, -2.702e-02, -5.846e-02, -1.835e-01, -1.229e-01) * s1_0_1;
	r2 += M4(-2.813e-02, -8.154e-03, 1.479e-01, 6.765e-02, -5.150e-02, -6.958e-02, -1.023e-01, -2.014e-02, 1.334e-01, 1.623e-02, 2.516e-01, -2.363e-01, 5.379e-02, 8.898e-03, -7.493e-02, -4.996e-02) * s1_0_1;
	r0 += M4(2.211e-03, -1.870e-01, 2.076e-02, -6.651e-03, 3.974e-03, -1.363e-01, -4.900e-02, -1.314e-01, -1.614e-02, -8.913e-02, -7.858e-02, -3.815e-02, -8.517e-03, -1.328e-01, -5.971e-02, -8.505e-02) * s1_0_2;
	r1 += M4(-3.738e-03, 7.511e-02, 3.911e-02, 5.103e-03, -4.346e-02, -3.447e-02, -6.952e-02, -1.065e-01, -1.020e-02, 1.680e-02, -3.035e-02, 1.083e-01, -2.143e-02, -8.326e-02, -5.083e-03, -4.812e-02) * s1_0_2;
	r2 += M4(9.448e-02, 8.080e-03, 7.302e-02, 4.448e-02, -7.886e-02, -1.552e-02, -3.700e-02, 1.304e-01, 5.636e-02, -2.029e-02, 5.801e-02, 7.597e-02, -2.297e-02, -9.741e-03, 3.248e-02, -9.739e-03) * s1_0_2;
	r0 += M4(2.517e-01, -9.985e-02, 5.034e-02, -5.457e-02, -1.013e-01, -8.983e-02, -7.754e-03, -7.927e-03, 3.391e-01, 2.102e-01, -1.704e-01, 4.897e-02, -1.807e-01, 2.788e-02, -2.134e-02, 4.341e-02) * s1_1_0;
	r1 += M4(4.123e-01, -6.772e-02, 1.147e-01, -2.428e-02, -9.497e-02, -2.763e-02, -7.544e-02, 1.255e-02, 5.791e-03, 8.859e-02, -3.117e-01, 1.268e-02, -9.049e-02, 4.069e-02, 2.896e-02, 2.458e-02) * s1_1_0;
	r2 += M4(2.241e-01, 5.079e-01, -7.133e-03, 1.077e-01, 3.991e-03, -1.821e-01, -6.181e-02, -1.271e-01, -1.019e-02, 8.329e-02, -5.448e-02, 3.623e-02, -1.125e-01, 7.740e-02, 1.374e-01, 5.711e-01) * s1_1_0;
	r0 += M4(4.769e-02, 3.873e-01, 2.241e-01, 2.212e-01, -1.431e-01, -2.241e-01, -1.312e-01, -1.617e-01, 6.970e-02, -5.907e-01, 7.748e-02, 5.662e-02, -2.945e-02, 1.717e-01, 4.926e-01, -1.030e-01) * s1_1_1;
	r1 += M4(2.484e-01, -1.074e-01, 2.749e-01, 3.901e-01, -1.041e-01, -1.567e-01, -2.978e-01, -2.208e-01, 2.554e-01, -6.591e-03, -5.227e-02, 1.248e-01, 4.407e-02, 6.330e-01, 2.507e-01, 2.578e-01) * s1_1_1;
	r2 += M4(-2.654e-01, 1.101e-01, 3.977e-01, 1.940e-01, -2.500e-01, -6.958e-02, -2.495e-01, -5.135e-01, 3.680e-01, 8.227e-02, -4.069e-02, 5.322e-01, 2.385e-02, 1.751e-02, 9.193e-02, 2.600e-01) * s1_1_1;
	r0 += M4(1.440e-02, -1.674e-01, 3.116e-01, -7.575e-02, -1.424e-02, -2.017e-01, -1.460e-01, -2.382e-01, 2.249e-03, 1.447e-01, -9.933e-02, 1.586e-01, -2.549e-03, 1.690e-01, -1.647e-02, 2.352e-01) * s1_1_2;
	r1 += M4(1.135e-01, -1.862e-01, 9.888e-02, -9.696e-02, -9.199e-02, -6.726e-02, -8.815e-02, -1.919e-01, -3.620e-02, 2.638e-01, 1.550e-02, 1.007e-01, 5.632e-02, -4.858e-02, -7.534e-03, -1.267e-01) * s1_1_2;
	r2 += M4(2.475e-01, 8.081e-02, 1.251e-01, 1.680e-01, -8.227e-02, -5.065e-03, -5.709e-02, -1.763e-01, -8.541e-02, -4.627e-02, -9.691e-02, 1.394e-01, -8.075e-02, 1.924e-02, -1.388e-01, -2.058e-01) * s1_1_2;
	r0 += M4(2.956e-01, -1.665e-02, 2.978e-02, 4.236e-02, -1.508e-01, 2.226e-04, -6.171e-02, -3.497e-02, -5.475e-01, 1.812e-02, -4.409e-02, 9.854e-02, 1.836e-01, -6.332e-02, 5.118e-02, -9.996e-02) * s1_2_0;
	r1 += M4(1.792e-01, -2.606e-02, 2.032e-02, 4.624e-02, -1.083e-01, 2.501e-02, -1.876e-02, -4.247e-03, -1.304e-01, -2.034e-02, 7.077e-03, -3.462e-02, 4.016e-02, -1.293e-01, 8.504e-03, -1.884e-02) * s1_2_0;
	r2 += M4(-8.399e-02, 1.460e-01, 1.021e-01, -2.292e-03, 6.556e-02, -9.069e-02, -4.852e-02, 1.817e-02, -2.487e-01, -2.037e-01, -5.082e-02, 8.167e-02, 1.387e-02, 1.738e-02, -2.751e-02, -2.997e-01) * s1_2_0;
	r0 += M4(4.819e-02, -3.890e-02, 1.460e-02, 4.773e-02, -2.757e-01, -3.608e-02, -1.033e-01, -7.076e-02, 2.549e-01, -1.008e-01, -7.194e-02, -2.018e-01, 4.898e-02, -1.650e-01, 3.882e-01, 8.094e-02) * s1_2_1;
	r1 += M4(2.705e-01, 7.286e-02, 2.864e-03, 2.002e-01, -2.483e-01, 4.968e-02, 2.303e-02, -8.758e-02, -5.670e-02, -8.905e-02, -2.508e-03, -8.860e-02, -1.357e-01, -1.315e-01, -4.275e-02, -2.561e-01) * s1_2_1;
	r2 += M4(7.937e-02, 1.899e-01, -6.396e-02, 1.344e-01, -3.897e-01, -1.635e-01, -1.525e-02, 8.029e-02, 2.534e-01, 7.878e-02, -4.950e-02, -2.339e-01, 5.547e-01, -5.847e-02, -5.450e-01, -2.354e-01) * s1_2_1;
	r0 += M4(4.889e-02, 9.485e-03, 1.431e-01, -1.750e-02, -9.782e-03, 6.323e-02, -5.282e-02, 3.539e-02, -5.945e-02, 2.442e-02, 6.387e-02, -2.061e-02, -2.823e-02, 2.133e-01, -2.454e-01, 1.415e-03) * s1_2_2;
	r1 += M4(6.603e-02, -2.557e-02, 3.308e-02, -1.000e+00, -1.804e-02, -1.121e-02, -3.711e-03, -1.000e+00, 1.093e-02, 8.275e-02, 2.006e-02, -1.000e+00, -7.398e-02, 2.116e-01, -3.533e-02, -1.000e+00) * s1_2_2;
	r2 += M4(5.079e-01, 1.819e-02, -1.000e+00, -1.294e-01, -7.513e-03, -2.301e-02, -3.400e-01, -1.112e-01, -4.688e-01, -1.959e-02, -1.000e+00, 1.132e-01, -4.359e-01, -6.734e-02, -1.000e+00, 1.811e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(3.680e-02, -1.528e-01, -1.436e-02, -5.482e-02, -3.539e-03, 1.303e-01, -3.816e-03, -1.196e-02, -1.065e-02, 4.198e-02, 9.367e-03, -2.095e-02, 9.229e-04, -4.681e-02, -2.320e-02, -9.833e-02) * s0_0_0;
	r1 += M4(7.611e-03, -3.874e-03, 1.052e-01, -7.533e-02, -5.730e-03, -5.828e-02, -9.253e-02, -3.720e-02, 3.448e-02, 2.484e-02, -4.924e-02, 8.199e-02, 4.706e-02, 8.826e-02, 2.792e-02, 3.975e-02) * s0_0_0;
	r2 += M4(-1.962e-02, 1.038e-01, -1.369e-02, -3.592e-02, -8.982e-02, 1.825e-02, -4.286e-02, 5.791e-02, 7.724e-02, 2.172e-02, -1.013e-02, 1.343e-01, -3.112e-02, 1.899e-02, 3.989e-02, 1.568e-01) * s0_0_0;
	r0 += M4(4.538e-02, 1.549e-01, 1.454e-01, 1.077e-01, 3.310e-02, -2.051e-01, -1.251e-02, -1.455e-01, -2.504e-02, -3.025e-01, -7.743e-02, -9.303e-02, -1.022e-02, 8.641e-02, 8.630e-03, -1.270e-01) * s0_0_1;
	r1 += M4(1.241e-01, -9.689e-02, -1.193e-01, 2.323e-01, 5.158e-02, 6.534e-02, 2.255e-01, 9.282e-02, -8.322e-02, -1.222e-02, -2.144e-01, -1.061e-01, -4.017e-02, 1.076e-02, -3.115e-01, 7.132e-02) * s0_0_1;
	r2 += M4(-9.487e-03, -2.632e-02, 1.773e-01, 2.971e-01, 5.045e-02, 3.212e-02, 2.813e-02, -1.943e-01, -1.276e-01, -2.659e-02, -5.232e-02, -4.194e-02, 6.192e-02, 5.564e-02, -3.060e-02, 1.650e-01) * s0_0_1;
	r0 += M4(3.427e-02, -3.149e-01, 6.489e-02, -3.606e-02, -3.506e-02, 3.880e-01, -4.478e-02, 7.446e-02, 7.882e-03, 5.428e-02, 2.183e-02, -8.325e-02, -6.358e-03, -1.568e-01, -5.370e-02, -1.294e-01) * s0_0_2;
	r1 += M4(-2.314e-02, 2.373e-02, -7.881e-02, -1.205e-01, 6.563e-02, -1.275e-01, -1.750e-01, 2.484e-02, 1.789e-02, -2.412e-02, 4.147e-02, -7.241e-02, -2.983e-02, 2.747e-02, 5.846e-02, -1.599e-02) * s0_0_2;
	r2 += M4(3.026e-02, 5.457e-02, -1.268e-01, 3.399e-01, -1.742e-02, 1.737e-03, -1.265e-01, 1.215e-01, 9.730e-02, 8.633e-03, -7.443e-03, -1.353e-01, -1.360e-01, -2.920e-02, -5.809e-01, -4.421e-02) * s0_0_2;
	r0 += M4(1.733e-01, -3.314e-02, 7.669e-02, -1.402e-02, -4.694e-02, 1.286e-01, -6.632e-02, 4.062e-02, -1.796e-01, 5.987e-02, -1.002e-02, -4.139e-02, 3.740e-02, 1.317e-01, -1.591e-02, -6.550e-02) * s0_1_0;
	r1 += M4(1.431e-01, -1.143e-02, -1.323e-01, -8.055e-02, -1.298e-01, -2.579e-02, -6.193e-02, 7.589e-03, -2.602e-01, -6.972e-02, 7.481e-03, -1.040e-01, 1.297e-02, -1.170e-02, -1.118e-01, -2.038e-02) * s0_1_0;
	r2 += M4(9.907e-02, 2.423e-02, -2.242e-02, -2.705e-01, -8.067e-02, -2.085e-01, -1.375e-02, -1.040e-01, 9.002e-02, -3.082e-01, -3.225e-02, -2.892e-01, -1.289e-02, 1.077e-01, -4.083e-03, 4.376e-02) * s0_1_0;
	r0 += M4(-3.135e-01, -9.923e-02, -1.793e-01, -2.036e-01, -5.867e-02, -1.086e-01, 8.221e-02, -1.481e-01, -7.984e-02, -1.728e-01, -1.905e-01, -1.531e-01, -2.151e-01, -1.639e-01, -1.665e-01, -2.055e-01) * s0_1_1;
	r1 += M4(-5.095e-01, -8.852e-02, -1.477e-02, 1.401e-01, 3.302e-01, 7.415e-02, 1.470e-01, -1.611e-01, -1.412e-01, -1.600e-01, 1.636e-01, -2.714e-01, -1.245e-01, 1.314e-01, 3.972e-01, 2.498e-01) * s0_1_1;
	r2 += M4(-5.685e-01, -2.297e-01, -1.016e-02, -8.165e-01, 3.575e-01, 4.498e-02, -2.880e-01, 3.209e-01, -3.867e-01, 8.219e-02, -5.227e-02, -5.222e-01, -1.150e-01, -4.344e-01, 2.603e-01, 2.454e-01) * s0_1_1;
	r0 += M4(3.657e-02, -2.126e-01, -7.242e-02, -1.035e-01, 2.241e-03, 4.855e-01, -3.467e-01, -1.142e-01, -2.253e-03, 1.782e-02, 1.166e-01, 1.657e-01, 3.796e-02, 1.131e-01, -2.387e-01, -1.253e-01) * s0_1_2;
	r1 += M4(1.923e-01, -1.660e-01, 1.806e-01, -6.575e-03, -3.582e-01, -1.171e-01, -7.044e-02, 5.272e-01, 8.362e-02, -1.051e-01, 3.720e-02, -8.419e-03, -4.152e-01, -1.236e-01, 1.726e-01, -3.931e-01) * s0_1_2;
	r2 += M4(3.777e-01, 9.065e-02, 1.703e-01, -3.503e-01, 1.220e-01, -2.824e-03, 6.657e-01, -4.893e-01, 2.863e-02, 7.701e-03, -6.439e-03, 6.743e-02, -1.700e-01, -4.212e-02, -1.879e-01, 6.545e-03) * s0_1_2;
	r0 += M4(-2.348e-01, 4.732e-02, -2.447e-02, -6.426e-03, -1.772e-01, 1.386e-02, -5.712e-02, -1.659e-02, 4.525e-02, -3.392e-03, 1.019e-02, 7.737e-02, -5.172e-02, 5.715e-02, -7.765e-02, -2.191e-02) * s0_2_0;
	r1 += M4(-1.027e-01, -3.727e-02, -3.825e-03, 3.168e-02, -9.212e-02, -3.544e-03, -2.050e-02, -5.666e-02, 6.763e-02, 3.266e-02, 7.068e-03, -7.529e-02, -1.150e-01, -8.234e-03, 3.028e-04, -2.623e-02) * s0_2_0;
	r2 += M4(1.667e-01, -9.546e-02, 1.122e-01, -7.349e-02, -1.115e-01, -7.090e-02, -5.215e-02, 1.307e-02, -7.847e-02, 1.239e-01, -8.277e-02, 1.230e-01, -5.148e-02, -1.294e-01, -4.113e-02, -3.550e-03) * s0_2_0;
	r0 += M4(1.997e-01, -6.481e-02, -1.018e-01, 1.728e-02, 3.810e-02, -4.496e-02, 8.717e-02, 3.241e-02, 1.001e-01, 6.489e-02, 1.843e-01, 7.028e-02, 5.176e-01, -1.122e-01, 2.031e-02, -4.813e-02) * s0_2_1;
	r1 += M4(2.036e-01, -2.888e-02, -2.203e-02, -5.186e-02, 8.181e-02, -3.918e-02, -2.254e-02, 3.430e-02, 6.509e-02, -5.032e-03, -2.815e-02, 7.898e-02, 1.537e-01, -9.378e-02, -4.745e-02, -5.188e-02) * s0_2_1;
	r2 += M4(-5.840e-01, 1.357e-01, -1.116e-01, 1.760e-01, 3.579e-01, 1.075e-02, 5.362e-02, -2.745e-01, 1.354e-02, 2.765e-03, 2.332e-01, 2.397e-01, 1.690e-01, 2.416e-01, -2.815e-01, -2.510e-01) * s0_2_1;
	r0 += M4(6.043e-03, 9.762e-04, 6.790e-02, 1.049e-01, -2.963e-03, 1.111e-01, -1.478e-02, 2.289e-02, -2.778e-03, 3.627e-02, 4.478e-02, -7.158e-02, 4.918e-04, 5.829e-03, 5.564e-02, 1.083e-01) * s0_2_2;
	r1 += M4(-2.821e-02, 3.673e-02, -2.730e-02, -1.000e+00, 4.996e-02, 3.603e-02, 1.604e-02, -1.000e+00, -3.942e-02, 3.574e-02, -3.954e-04, -1.000e+00, 1.947e-01, 2.033e-01, -7.544e-02, -2.929e-01) * s0_2_2;
	r2 += M4(-2.253e-03, -1.745e-02, -1.000e+00, 9.053e-02, -1.013e-01, -5.133e-02, -1.000e+00, 1.045e-01, -9.125e-02, 4.263e-03, -1.000e+00, 9.966e-02, -2.385e-01, 4.161e-02, -1.000e+00, 3.439e-01) * s0_2_2;
	r0 += V4(-1.420e-02, -3.538e-02, -4.668e-02, -9.446e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.163e-02, -3.772e-02, -1.090e-02, -1.666e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-2.397e-02, -1.383e-02, -2.598e-03, -3.466e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12_DS] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv3
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.541e-02, 3.217e-03, -1.391e-03, -3.528e-03, -2.070e-02, -8.758e-04, -1.258e-03, 5.599e-03, 7.946e-02, -4.662e-03, 2.045e-02, -5.268e-03, -6.565e-02, -2.679e-02, 1.265e-03, 8.283e-03) * s0_0_0;
	r0 += M4(4.359e-02, 2.562e-02, 2.976e-02, -3.636e-03, 1.877e-02, -1.934e-03, -8.835e-03, -1.351e-02, -7.967e-02, 1.679e-01, 5.090e-02, 8.472e-02, -3.712e-02, -1.028e-01, -6.726e-03, -1.777e-02) * s0_0_1;
	r0 += M4(3.235e-02, -5.925e-01, 1.032e-01, 1.665e-01, -3.558e-03, 1.102e-02, 9.785e-04, -1.828e-03, 5.257e-03, -9.497e-02, 1.052e-02, -4.772e-02, -1.002e-02, 2.877e-02, -4.835e-03, 1.416e-02) * s0_0_2;
	r0 += M4(1.042e-03, -1.219e-03, 6.203e-03, -3.924e-03, 6.714e-02, 1.607e-02, 1.956e-02, 6.703e-04, 2.850e-02, 2.935e-03, 9.106e-02, 2.558e-03, 5.950e-02, 4.384e-03, -1.978e-01, 2.422e-03) * s0_1_0;
	r0 += M4(4.143e-03, 1.405e-02, 4.529e-02, 1.768e-04, 1.538e-01, -3.818e-01, 1.062e-01, -7.041e-02, -3.958e-02, -3.943e-02, -2.672e-01, 8.995e-02, 2.310e-01, 1.958e-01, 3.059e-02, -3.759e-01) * s0_1_1;
	r0 += M4(-3.161e-02, -1.030e-03, 3.455e-02, 1.204e-01, -8.563e-03, 6.753e-02, -1.056e-02, 4.920e-02, -2.808e-03, -5.145e-04, -9.521e-03, -5.444e-02, -6.121e-03, 5.286e-02, 3.611e-03, 5.653e-02) * s0_1_2;
	r0 += M4(-4.772e-04, -7.187e-04, 6.169e-04, 6.542e-04, 4.005e-03, 2.349e-03, 4.944e-02, -5.001e-03, 4.973e-03, 3.519e-03, 2.967e-03, -5.446e-03, -3.968e-03, -3.474e-03, 4.324e-02, 3.875e-03) * s0_2_0;
	r0 += M4(1.033e-03, 1.588e-04, 1.781e-03, -3.376e-03, -3.715e-03, 4.348e-04, 9.985e-02, -1.880e-01, -3.154e-03, 3.528e-03, 2.167e-02, -4.468e-03, -1.187e-02, -1.509e-03, 6.042e-02, 8.699e-02) * s0_2_1;
	r0 += M4(-4.396e-04, 4.426e-04, -1.698e-03, 1.804e-03, -3.656e-03, 4.394e-03, -6.901e-03, 3.552e-02, -2.147e-03, -1.589e-03, 7.180e-04, -4.092e-04, 3.520e-03, -5.183e-03, -5.130e-03, 9.977e-03) * s0_2_2;
	r0 += M4(-1.777e-02, 5.188e-03, -1.335e-02, 1.436e-03, -2.537e-02, 7.405e-03, 8.656e-03, 8.484e-03, 8.194e-03, 9.867e-04, -2.035e-03, 3.172e-04, -1.041e-01, 4.594e-02, -1.295e-02, 3.045e-03) * s1_0_0;
	r0 += M4(8.468e-02, -4.270e-03, 7.248e-03, -6.274e-02, -1.764e-02, -5.741e-02, 1.676e-03, 7.851e-04, 7.739e-02, 5.382e-02, -9.653e-03, -1.376e-02, 1.388e-01, -4.169e-01, 5.380e-02, 7.851e-02) * s1_0_1;
	r0 += M4(-2.586e-03, 9.886e-02, 1.282e-03, 2.538e-02, 4.253e-03, 2.935e-03, 2.034e-04, 6.530e-05, 1.728e-02, 5.247e-02, -1.580e-03, -2.223e-04, -1.845e-02, 1.482e-02, -4.661e-03, 2.004e-02) * s1_0_2;
	r0 += M4(9.468e-03, 1.217e-03, 1.537e-03, -8.433e-03, 1.430e-01, 1.197e-02, -4.726e-03, 2.514e-02, 5.615e-03, -7.635e-03, 2.093e-02, 5.773e-03, 1.278e-01, 6.413e-02, -1.655e-01, 8.739e-02) * s1_1_0;
	r0 += M4(7.105e-02, 1.571e-02, -4.688e-01, 8.316e-03, -1.753e-01, 6.323e-02, -1.652e-01, -2.049e-01, -5.993e-01, -9.167e-02, 1.612e-01, 9.467e-02, 3.364e-01, -2.673e-02, 8.099e-02, -9.303e-01) * s1_1_1;
	r0 += M4(7.737e-04, 8.277e-02, 2.133e-02, 9.106e-02, 1.374e-03, -1.536e-02, -2.869e-05, -8.859e-04, 1.894e-03, 2.155e-02, 1.825e-02, 1.148e-01, 3.947e-03, 1.068e-01, -6.797e-03, 5.272e-02) * s1_1_2;
	r0 += M4(-4.086e-03, -1.623e-03, 1.156e-02, -6.109e-04, 2.402e-03, 7.411e-04, 7.637e-02, 8.601e-03, 4.811e-04, 1.598e-03, -2.096e-02, 7.339e-03, -3.115e-02, -1.403e-03, 1.741e-02, 1.225e-03) * s1_2_0;
	r0 += M4(-1.030e-02, -6.707e-03, 2.848e-02, 4.050e-03, 2.789e-02, 9.486e-03, 6.051e-02, 1.489e-01, -7.954e-03, 1.996e-02, 1.125e-01, -2.188e-02, 3.661e-04, -2.664e-02, 9.368e-02, 1.853e-01) * s1_2_1;
	r0 += M4(-3.706e-03, 2.953e-03, 2.771e-05, 8.460e-03, 9.604e-03, 8.949e-03, 1.923e-02, 7.647e-03, 1.929e-02, -7.295e-03, -1.129e-02, 4.382e-02, 3.010e-03, 6.500e-03, 9.224e-04, 2.393e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.065e-02, -2.704e-02, 2.731e-02, -2.410e-02, 5.430e-03, -2.904e-03, -2.140e-03, 1.376e-03, -5.759e-02, 1.553e-02, -9.732e-03, 2.475e-03, -1.849e-02, 2.056e-02, 1.154e-02, 1.009e-02) * s0_0_0;
	r0 += M4(-3.084e-01, 2.803e-01, -2.116e-01, 2.094e-01, 1.199e-01, 1.813e-02, -8.625e-03, -9.844e-04, 3.189e-03, 5.605e-01, -4.819e-02, 5.341e-02, -1.600e-02, -6.462e-02, 4.144e-02, 2.688e-02) * s0_0_1;
	r0 += M4(2.118e-02, -1.452e-04, 4.249e-04, -1.345e-03, 1.095e-01, 1.238e-01, -1.003e-02, 4.212e-02, 3.614e-02, -1.922e-02, 8.466e-03, -4.187e-02, -7.153e-04, 1.792e-02, -9.965e-04, 1.765e-03) * s0_0_2;
	r0 += M4(4.792e-03, -9.404e-04, -5.750e-03, -8.169e-03, -4.974e-03, -2.384e-03, -3.956e-03, 1.021e-03, -1.216e-01, -3.870e-03, 3.838e-01, 1.580e-02, -5.459e-03, -2.004e-02, 2.555e-02, -5.018e-03) * s0_1_0;
	r0 += M4(1.887e-02, 1.589e-02, -6.935e-02, 8.276e-02, -7.618e-02, -3.456e-02, 1.795e-01, -9.753e-03, -1.919e-01, -3.372e-01, 3.019e-01, 6.048e-01, 2.319e-01, 1.880e-01, -2.725e-01, -1.285e-02) * s0_1_1;
	r0 += M4(8.030e-03, 9.805e-03, 1.892e-02, -1.045e-02, 3.624e-02, -6.470e-02, 1.372e-01, -5.137e-01, -1.065e-02, -5.568e-02, 5.385e-03, 2.303e-02, 3.330e-02, 7.196e-02, 1.363e-02, -1.294e-01) * s0_1_2;
	r0 += M4(-1.064e-03, -4.062e-05, 5.930e-03, 1.724e-03, 1.875e-03, 1.574e-03, -1.065e-02, -2.254e-04, 4.019e-02, 7.210e-03, -3.942e-02, 9.345e-04, -4.197e-03, -1.318e-04, -2.818e-02, -2.114e-03) * s0_2_0;
	r0 += M4(-7.949e-03, 5.753e-05, -7.611e-03, 6.143e-03, 1.254e-02, 4.610e-03, -3.392e-02, 5.173e-03, 1.363e-02, 7.009e-02, -5.690e-02, -1.136e-01, -2.618e-02, -1.223e-02, 1.812e-02, -4.801e-02) * s0_2_1;
	r0 += M4(4.423e-03, -7.834e-03, 2.679e-03, 3.538e-03, 9.850e-03, -4.721e-03, -2.556e-02, -1.047e-02, 2.738e-04, -8.201e-03, 2.309e-03, -2.335e-02, -1.549e-02, -2.083e-02, -2.525e-03, 3.092e-02) * s0_2_2;
	r0 += V4(-5.366e-05, -5.227e-05, -4.245e-05, -4.751e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
