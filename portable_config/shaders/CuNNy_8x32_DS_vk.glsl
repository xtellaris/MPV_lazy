// CuNNy 8x32 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_8x32_DS_vk] -in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(4.101e-03, -6.295e-02, 2.106e-02, -9.110e-02) * s0_0_0;
	r1 += V4(3.754e-02, -1.183e-01, -4.259e-02, 1.098e-03) * s0_0_0;
	r2 += V4(1.754e-01, 1.213e-01, 8.618e-02, 5.048e-02) * s0_0_0;
	r3 += V4(1.598e-01, 1.207e-03, 1.358e-02, 1.333e-01) * s0_0_0;
	r4 += V4(3.587e-01, 9.459e-02, 8.481e-02, 3.018e-01) * s0_0_0;
	r5 += V4(-2.872e-02, -7.252e-03, 4.705e-02, -8.922e-04) * s0_0_0;
	r6 += V4(8.770e-04, -3.381e-03, 2.425e-02, -3.137e-02) * s0_0_0;
	r7 += V4(5.450e-02, 2.301e-02, 4.378e-03, 6.714e-02) * s0_0_0;
	r0 += V4(-1.096e-02, 7.472e-02, 1.227e-02, -8.095e-02) * s0_0_1;
	r1 += V4(1.891e-01, 8.921e-02, -4.089e-02, -3.712e-02) * s0_0_1;
	r2 += V4(-4.150e-01, -2.512e-01, -1.058e-01, -2.569e-01) * s0_0_1;
	r3 += V4(-9.642e-02, 2.051e-02, -1.097e-02, 1.784e-01) * s0_0_1;
	r4 += V4(-2.903e-01, -1.116e-01, -6.961e-02, -1.779e-01) * s0_0_1;
	r5 += V4(-6.654e-03, -4.165e-02, 1.304e-01, 6.306e-03) * s0_0_1;
	r6 += V4(-1.568e-02, -2.277e-02, -9.051e-03, -1.528e-01) * s0_0_1;
	r7 += V4(7.138e-04, -3.519e-01, 1.141e-01, 6.813e-02) * s0_0_1;
	r0 += V4(7.562e-03, -1.081e-02, 1.332e-02, 1.415e-02) * s0_0_2;
	r1 += V4(1.264e-01, 3.204e-02, -2.745e-02, 4.208e-02) * s0_0_2;
	r2 += V4(9.934e-02, -1.913e-01, -1.792e-01, -1.462e-01) * s0_0_2;
	r3 += V4(-2.223e-02, -2.582e-02, -5.148e-03, -3.210e-01) * s0_0_2;
	r4 += V4(-5.230e-02, 7.914e-03, 5.835e-03, -7.789e-02) * s0_0_2;
	r5 += V4(1.977e-03, 4.596e-02, -1.912e-03, -1.584e-02) * s0_0_2;
	r6 += V4(8.867e-02, -1.913e-02, -2.432e-02, -8.483e-02) * s0_0_2;
	r7 += V4(-1.724e-01, 7.132e-02, 8.629e-07, 1.561e-02) * s0_0_2;
	r0 += V4(-4.174e-01, -3.453e-01, -2.027e-01, -2.393e-01) * s0_1_0;
	r1 += V4(-3.826e-02, -9.356e-03, 1.706e-02, -2.150e-01) * s0_1_0;
	r2 += V4(1.304e-01, 1.734e-01, 1.831e-01, 6.254e-02) * s0_1_0;
	r3 += V4(-2.427e-01, -3.174e-01, -5.445e-02, -2.222e-01) * s0_1_0;
	r4 += V4(-1.979e-01, -3.114e-02, -1.958e-01, -8.317e-02) * s0_1_0;
	r5 += V4(6.191e-01, 1.690e-02, 2.212e-01, 2.943e-01) * s0_1_0;
	r6 += V4(-2.522e-02, 7.439e-03, -5.280e-02, -2.556e-02) * s0_1_0;
	r7 += V4(2.007e-02, 7.041e-03, 1.353e-01, 1.862e-02) * s0_1_0;
	r0 += V4(4.365e-01, 3.761e-01, 3.741e-01, 3.877e-01) * s0_1_1;
	r1 += V4(1.431e-02, -1.355e-01, 2.334e-01, 1.649e-01) * s0_1_1;
	r2 += V4(1.314e-01, 2.588e-01, 1.323e-01, 1.028e-01) * s0_1_1;
	r3 += V4(2.018e-01, 3.468e-02, -8.656e-03, -7.404e-02) * s0_1_1;
	r4 += V4(-7.634e-02, -1.037e-01, -2.128e-01, -9.107e-02) * s0_1_1;
	r5 += V4(-4.006e-02, 3.896e-01, -1.895e-03, 1.630e-01) * s0_1_1;
	r6 += V4(7.007e-02, 1.620e-01, 2.599e-01, -3.476e-02) * s0_1_1;
	r7 += V4(-2.368e-01, -3.586e+00, -1.848e+00, -7.481e-01) * s0_1_1;
	r0 += V4(-1.575e-02, 1.737e-02, 1.544e-03, 1.709e-02) * s0_1_2;
	r1 += V4(1.183e-01, 2.310e-01, 1.521e-01, 4.678e-02) * s0_1_2;
	r2 += V4(-2.568e-01, -1.030e-01, -1.929e-01, 1.943e-02) * s0_1_2;
	r3 += V4(1.884e-02, 2.830e-01, 2.826e-02, 3.223e-01) * s0_1_2;
	r4 += V4(2.134e-01, 1.942e-01, 1.590e-02, 1.425e-01) * s0_1_2;
	r5 += V4(-1.952e-03, 1.547e-03, -2.810e-01, -5.868e-02) * s0_1_2;
	r6 += V4(-2.029e-01, -2.959e-01, -2.623e-01, -2.290e-01) * s0_1_2;
	r7 += V4(-9.670e-02, -3.813e+00, 6.068e-02, 1.142e-02) * s0_1_2;
	r0 += V4(-9.831e-04, -1.147e-01, -2.056e-01, -6.612e-04) * s0_2_0;
	r1 += V4(-4.955e-04, 1.314e-01, -2.231e-02, 2.182e-01) * s0_2_0;
	r2 += V4(-2.479e-02, -4.980e-02, -6.860e-02, 7.544e-02) * s0_2_0;
	r3 += V4(9.205e-02, 3.779e-01, 3.987e-01, 1.538e-01) * s0_2_0;
	r4 += V4(-1.372e-01, -4.553e-02, 9.178e-02, -2.129e-01) * s0_2_0;
	r5 += V4(-1.161e-02, 2.185e-03, 9.888e-02, 3.886e-02) * s0_2_0;
	r6 += V4(4.932e-03, -5.487e-03, 6.029e-04, 5.563e-02) * s0_2_0;
	r7 += V4(-1.072e-01, -2.815e-02, -3.258e-02, 7.791e-02) * s0_2_0;
	r0 += V4(-9.845e-04, 7.348e-02, -1.758e-01, 1.599e-02) * s0_2_1;
	r1 += V4(-1.792e-01, 1.677e-02, -2.155e-02, 2.651e-02) * s0_2_1;
	r2 += V4(1.480e-03, 6.909e-02, 1.236e-01, 5.774e-02) * s0_2_1;
	r3 += V4(-1.070e-01, -1.602e-01, -3.272e-01, -1.376e-01) * s0_2_1;
	r4 += V4(2.339e-01, 1.987e-01, 2.923e-01, 1.590e-01) * s0_2_1;
	r5 += V4(-8.341e-03, -3.487e-01, -2.320e-01, -3.095e-01) * s0_2_1;
	r6 += V4(-3.256e-02, 1.751e-01, 4.171e-02, 2.108e-01) * s0_2_1;
	r7 += V4(1.074e-01, 1.421e-01, 1.587e-01, 1.032e-01) * s0_2_1;
	r0 += V4(1.771e-03, -6.336e-03, -8.284e-03, -1.908e-02) * s0_2_2;
	r1 += V4(-2.508e-01, -2.333e-01, -1.534e-01, -2.388e-01) * s0_2_2;
	r2 += V4(2.746e-02, -2.302e-02, 2.326e-02, 4.135e-02) * s0_2_2;
	r3 += V4(8.157e-03, -2.173e-01, -3.317e-02, -3.488e-02) * s0_2_2;
	r4 += V4(-6.322e-02, -1.803e-01, 1.042e-03, 4.001e-02) * s0_2_2;
	r5 += V4(1.063e-03, -6.703e-02, 5.565e-03, -1.151e-01) * s0_2_2;
	r6 += V4(1.439e-01, 1.372e-01, 3.699e-02, 2.891e-01) * s0_2_2;
	r7 += V4(2.920e-01, -1.559e-02, -1.809e-02, 1.028e-01) * s0_2_2;
	r0 += V4(7.353e-04, 6.236e-03, 6.506e-03, 1.528e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.020e-03, 6.228e-03, -2.492e-03, 4.299e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-7.388e-03, 5.532e-03, -2.957e-02, -1.603e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(1.456e-02, -1.097e-02, 1.539e-02, 6.151e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(-3.818e-03, 8.099e-03, 1.862e-02, 1.422e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(-5.129e-01, -3.005e-03, -3.861e-03, 1.006e-02);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(-8.756e-04, -4.427e-03, 1.533e-02, 1.708e-02);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(1.319e-02, 6.706e-02, 3.163e-02, 1.065e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC [CuNNy_8x32_DS_vk] -conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEEECEF2A, 0x0411F5EC, 0x0BF3F41D, 0x01F80DFE);
	r1 = D(r1, s0_0_0, 0x03E3060E, 0x01FCF903, 0x1F1806EF, 0xF0AD03F8);
	r2 = D(r2, s0_0_0, 0x08F806FC, 0xFDF41503, 0x0205FB0C, 0x0B08F3FE);
	r3 = D(r3, s0_0_0, 0x06FAF81B, 0x080CF609, 0x000101F7, 0xDBFC0FFA);
	r4 = D(r4, s0_0_0, 0x03F224E2, 0xE8EA140B, 0xFA16FC03, 0xE8F21114);
	r5 = D(r5, s0_0_0, 0xF40B0CF4, 0x1CF7EFFD, 0x27FAF3EF, 0x04F6ED11);
	r6 = D(r6, s0_0_0, 0xE8ED31F2, 0x22FBF1E6, 0x04F1FE0A, 0xFFFC0AFA);
	r7 = D(r7, s0_0_0, 0xDFD627FE, 0xFD020DF2, 0xEB0A060A, 0xEE0ED72C);
	r0 = D(r0, s0_0_1, 0xF9FC0FFE, 0xFB0D16DA, 0xE4CF0E03, 0x1E17F7FF);
	r1 = D(r1, s0_0_1, 0xF8EE0307, 0xF9FE011E, 0x04E913F2, 0xE364DF44);
	r2 = D(r2, s0_0_1, 0xF50721F8, 0xEAF01611, 0xFA05FD14, 0xFFF00404);
	r3 = D(r3, s0_0_1, 0xFC30F3EC, 0xF2390CFE, 0xEEF700E7, 0x05F8FA02);
	r4 = D(r4, s0_0_1, 0xF7E6180B, 0x090216F4, 0x0BD7EB09, 0x19E20541);
	r5 = D(r5, s0_0_1, 0x1A0404F1, 0x05D5FF16, 0x0BCC10FF, 0xEF0EC836);
	r6 = D(r6, s0_0_1, 0x0419F9FE, 0x0534F7E4, 0x08F5F218, 0xEC150D08);
	r7 = D(r7, s0_0_1, 0x113B05DA, 0x25230309, 0xF90DFB1C, 0x1401FA0A);
	r0 = D(r0, s0_0_2, 0x273DC6E8, 0x1D11ECE2, 0x06FEFE27, 0xF01623F5);
	r1 = D(r1, s0_0_2, 0x0016EF1D, 0xE00DEDFC, 0xF8D605FC, 0x0D3FEF1E);
	r2 = D(r2, s0_0_2, 0xFD1907FE, 0x10EEF910, 0xF52BFB0C, 0x012B09F7);
	r3 = D(r3, s0_0_2, 0xFC2AE31B, 0xF322FCF9, 0x001DFBEC, 0x00121408);
	r4 = D(r4, s0_0_2, 0xF9812816, 0xF908F900, 0x03E02617, 0xF1DCF335);
	r5 = D(r5, s0_0_2, 0x0092CBD1, 0x10FCFF04, 0xFFEEFAEE, 0x0A0A0525);
	r6 = D(r6, s0_0_2, 0x1FEDF50D, 0x181203D8, 0xFFC40CF8, 0xF3FA01F7);
	r7 = D(r7, s0_0_2, 0xFF1EF7CB, 0x09FB14F3, 0xFED31C15, 0xECF7F3B2);
	r0 = D(r0, s0_1_0, 0x07F1E20A, 0x20E60602, 0xF7E90009, 0x0EFAF8E9);
	r1 = D(r1, s0_1_0, 0xEF05E02E, 0xF7060BF5, 0xF00C08EC, 0x140CE61A);
	r2 = D(r2, s0_1_0, 0xF7FCEF1A, 0xEAF602FC, 0xDBEF10FB, 0x06F7FFF9);
	r3 = D(r3, s0_1_0, 0xE2D21011, 0xFBF1F216, 0x0718F303, 0xFB0EF50F);
	r4 = D(r4, s0_1_0, 0x2C03F6EA, 0x1AE3E7F2, 0xF9ECFB05, 0xFEF8000A);
	r5 = D(r5, s0_1_0, 0x15F70BE6, 0x0AF70BFF, 0xA13531AD, 0x2D35EED2);
	r6 = D(r6, s0_1_0, 0xD61518DD, 0x231709EC, 0xEF0812F6, 0x01FF06FE);
	r7 = D(r7, s0_1_0, 0x0A4DD902, 0xEE000AFF, 0xFA05270E, 0xF92FEA12);
	r0 = D(r0, s0_1_1, 0x071DEDED, 0xEBEB060B, 0x340E0421, 0x232BD0A1);
	r1 = D(r1, s0_1_1, 0xFD02F012, 0xD61E05F7, 0xD7F6F817, 0x2814C5F6);
	r2 = D(r2, s0_1_1, 0xE5FAED13, 0x22CAF9E4, 0xFCBEFFC9, 0xDFCC0C18);
	r3 = D(r3, s0_1_1, 0x18FF0339, 0xEFD30623, 0xF1BE2751, 0x0FCCF422);
	r4 = D(r4, s0_1_1, 0x10F21B1E, 0x163A0BF6, 0xDC1A1622, 0xEBEE14E9);
	r5 = D(r5, s0_1_1, 0x1B07DFE6, 0xF0001437, 0x12282C18, 0x81E98181);
	r6 = D(r6, s0_1_1, 0xEBD3140C, 0xFA57EC81, 0x07E0DF13, 0x0FFAEC01);
	r7 = D(r7, s0_1_1, 0xE4DC2B47, 0xEEDD12E5, 0xDA021BF9, 0x02E6F524);
	r0 = D(r0, s0_1_2, 0x14220DF4, 0xD4FDEF18, 0x0DFBF8EA, 0x1CD4E2D7);
	r1 = D(r1, s0_1_2, 0x0EE61C18, 0x21E4101C, 0xF804FB0E, 0xFD0F031C);
	r2 = D(r2, s0_1_2, 0x03FDD4C9, 0xF10306E7, 0xEB11FDF0, 0xE5080729);
	r3 = D(r3, s0_1_2, 0x820B5038, 0x191E0711, 0x002AF503, 0x11E6D815);
	r4 = D(r4, s0_1_2, 0xEF0CEDAB, 0x0107F5EA, 0xF3E71146, 0x0B07CF8A);
	r5 = D(r5, s0_1_2, 0x81EA8181, 0x0C0BE729, 0x9CDC1405, 0x0626DEC5);
	r6 = D(r6, s0_1_2, 0x09143136, 0xE91111F0, 0x03E52028, 0x070F4133);
	r7 = D(r7, s0_1_2, 0x17031313, 0x15131A1C, 0xFA1FFD0C, 0x32EA0F33);
	r0 = D(r0, s0_2_0, 0xFCF6141A, 0xE70D0600, 0xE906F510, 0xEADF181F);
	r1 = D(r1, s0_2_0, 0xF6FB020A, 0xF7FE1BF9, 0xFFE312F0, 0xE0DF1216);
	r2 = D(r2, s0_2_0, 0xF1FBFB11, 0xFDEE050B, 0x0C020CFB, 0x06040BF8);
	r3 = D(r3, s0_2_0, 0x15CFF307, 0xFEFEF807, 0xF5FA10FB, 0x020204FA);
	r4 = D(r4, s0_2_0, 0x0313D312, 0xB3222A2A, 0x141B09E2, 0xEBFD10EF);
	r5 = D(r5, s0_2_0, 0x0B10E00F, 0xF40303FD, 0x262EE9FB, 0x0515FC01);
	r6 = D(r6, s0_2_0, 0x3123DBEF, 0xF818D719, 0x07FF0CE7, 0xFE00FB05);
	r7 = D(r7, s0_2_0, 0x00F5FE0C, 0x070FF303, 0xFDFAE7F3, 0x15F302F0);
	r0 = D(r0, s0_2_1, 0xEB021BFA, 0xFBF30C10, 0xE0FD001C, 0x0D19F119);
	r1 = D(r1, s0_2_1, 0x1E0EEEF6, 0x142CF9E6, 0x18E20506, 0xFC0CE3EE);
	r2 = D(r2, s0_2_1, 0x071EF909, 0x0C16EF1B, 0x3A160A02, 0x0722FE08);
	r3 = D(r3, s0_2_1, 0x26E70BF5, 0xF30201F5, 0x01F30102, 0x14EE0604);
	r4 = D(r4, s0_2_1, 0xFBF4EFF6, 0x06E4FFE5, 0x170FEDFA, 0xE026EAE1);
	r5 = D(r5, s0_2_1, 0x020AF732, 0xB0FFDFB4, 0xE616DDEC, 0xC8F581B6);
	r6 = D(r6, s0_2_1, 0x0F0F07EC, 0x241CDD0F, 0x010D11EC, 0xFBF60209);
	r7 = D(r7, s0_2_1, 0xC5E7F8F3, 0xFDED0A0E, 0x1DF701F2, 0xFC1C0DE0);
	r0 = D(r0, s0_2_2, 0xE5070A0C, 0x210100FC, 0xF319FA06, 0xD3E11124);
	r1 = D(r1, s0_2_2, 0x1502F1AC, 0xFE0FF1C9, 0x27CB2129, 0x15FAF1F4);
	r2 = D(r2, s0_2_2, 0x1CE7F2DF, 0xE9F52314, 0x1FE31629, 0x19F7DAE9);
	r3 = D(r3, s0_2_2, 0xD54206EA, 0xFA160A07, 0x0F130B11, 0x01E9F42F);
	r4 = D(r4, s0_2_2, 0xF7CD2322, 0x2EF51A16, 0xD002F3A6, 0x2904CDD5);
	r5 = D(r5, s0_2_2, 0xFAEB3A7D, 0x152ED6C2, 0xF6E7FBE8, 0x1F00E5D4);
	r6 = D(r6, s0_2_2, 0xF20404EA, 0xF7E014E6, 0x01FDE2E3, 0x1DF23229);
	r7 = D(r7, s0_2_2, 0x19E7F717, 0xFE0F0121, 0x11D500F7, 0xDC0DF701);
	r0 = D(r0, s1_0_0, 0x08E6F4FA, 0xEAFB05F6, 0x010C0508, 0x11F9E7EE);
	r1 = D(r1, s1_0_0, 0xEADBEC17, 0xFFFCF9FF, 0x03FB0C03, 0xF3FFF2FF);
	r2 = D(r2, s1_0_0, 0x0009F804, 0xF102F6FD, 0x0BF1F8FD, 0xFCFD0003);
	r3 = D(r3, s1_0_0, 0xD5F0D7E7, 0xF8190400, 0x0D1D1011, 0xEC02F6FC);
	r4 = D(r4, s1_0_0, 0xCFF5D208, 0x1615F500, 0xF6F91CF7, 0x181D0B0D);
	r5 = D(r5, s1_0_0, 0xFD21F5F6, 0x0C0D1107, 0xDF1C53F6, 0x15170CFE);
	r6 = D(r6, s1_0_0, 0xE614EB12, 0xF0FEF201, 0xF80F050E, 0xEC0DF0FC);
	r7 = D(r7, s1_0_0, 0xF4FBFDD7, 0x0D1DFD05, 0x0F101602, 0x1620FB07);
	r0 = D(r0, s1_0_1, 0xFAE116EB, 0x02F70E06, 0xF6E5FCEE, 0xFD0EED0E);
	r1 = D(r1, s1_0_1, 0xD6F1DAE2, 0xEE0B0F0F, 0x0F1524F8, 0xF9D7E9F4);
	r2 = D(r2, s1_0_1, 0xFDEFF8E7, 0xFD02EDFE, 0xE8F103FD, 0x03EDFDFE);
	r3 = D(r3, s1_0_1, 0x0CE102E4, 0xF910080F, 0x01FA0CFA, 0x04081902);
	r4 = D(r4, s1_0_1, 0x201414C7, 0xDE0212F9, 0x070EEDFF, 0xE610F1EA);
	r5 = D(r5, s1_0_1, 0xE9110A07, 0x0E06050F, 0xF4FADBE3, 0xFBF3FB01);
	r6 = D(r6, s1_0_1, 0xDE13F004, 0x1C061305, 0x1D1BF819, 0xF80FF501);
	r7 = D(r7, s1_0_1, 0xF70F0626, 0x052FF515, 0xEA0E1DF1, 0x160C1712);
	r0 = D(r0, s1_0_2, 0x020AEE02, 0x05000D10, 0x0804030C, 0x1F051108);
	r1 = D(r1, s1_0_2, 0xF8F50C06, 0xFA330217, 0xF520FE06, 0xDF16F7FA);
	r2 = D(r2, s1_0_2, 0x03EE0700, 0xDAF20C05, 0xFBF80308, 0x0BF40500);
	r3 = D(r3, s1_0_2, 0xC20AE6FE, 0xEB180DFB, 0xFAEC06FF, 0xE1F0E104);
	r4 = D(r4, s1_0_2, 0x05D7F424, 0x03FE0414, 0xFFFEFC0A, 0xE90A1714);
	r5 = D(r5, s1_0_2, 0x01F9F906, 0xF6F9F4F4, 0x10FE1FDA, 0x14FA1207);
	r6 = D(r6, s1_0_2, 0xCC2D22F7, 0x20060604, 0x130810FC, 0xFC040D04);
	r7 = D(r7, s1_0_2, 0x1EEF14F2, 0x02EFF1F0, 0xEDFC0AFB, 0xEB00D201);
	r0 = D(r0, s1_1_0, 0xF0F6F0F8, 0x030703FC, 0xF4180602, 0xEBEDE5CF);
	r1 = D(r1, s1_1_0, 0xFFFD02FD, 0x03EDF1FB, 0xE5F2F8F2, 0x180014F6);
	r2 = D(r2, s1_1_0, 0xF707FAFE, 0x0BFE0902, 0xFFDBF6FD, 0xFEE5F1E4);
	r3 = D(r3, s1_1_0, 0x0C0D02C5, 0xFF01FCFF, 0x141CEB09, 0x1A100210);
	r4 = D(r4, s1_1_0, 0xED33140C, 0xE814F0F4, 0xEFFF141C, 0xF1F4DF2B);
	r5 = D(r5, s1_1_0, 0x101300FA, 0x01251923, 0x0EFF0B1D, 0xF13103FB);
	r6 = D(r6, s1_1_0, 0x23E012FD, 0xF8F707F7, 0xEEEAF7F8, 0x0AF60CEB);
	r7 = D(r7, s1_1_0, 0x1F07F7DD, 0xF8FC090D, 0x1110FAF6, 0x06F61CFB);
	r0 = D(r0, s1_1_1, 0x070A1108, 0x00F20506, 0x1412FDEB, 0xE2090D04);
	r1 = D(r1, s1_1_1, 0x17E6C7E0, 0x07FFDCF8, 0x0C03FABE, 0xFFE1D0EB);
	r2 = D(r2, s1_1_1, 0x0BECFF0A, 0xFA1EF7F7, 0xF1F207EE, 0xECE4F7D8);
	r3 = D(r3, s1_1_1, 0x04E3E504, 0x14ED0F03, 0xF1F30AF7, 0x18041CFA);
	r4 = D(r4, s1_1_1, 0xDC1CDF11, 0x2509E102, 0x151BE103, 0x0C09121E);
	r5 = D(r5, s1_1_1, 0x0E120327, 0x0802040C, 0x27080CF9, 0x0A030308);
	r6 = D(r6, s1_1_1, 0x21E2070B, 0xDD0FF6FE, 0x04E7FE17, 0xF5FEF8FB);
	r7 = D(r7, s1_1_1, 0xEB06F215, 0xFEEFFC1F, 0xFD02F403, 0xF6EA1816);
	r0 = D(r0, s1_1_2, 0xF9161403, 0x0B08F800, 0xEF050804, 0xF80E0407);
	r1 = D(r1, s1_1_2, 0x150B17F0, 0x02110805, 0x19FF05F4, 0x26C614D7);
	r2 = D(r2, s1_1_2, 0xFDFD00F6, 0xFC0400FA, 0xF80511F5, 0x07F203FC);
	r3 = D(r3, s1_1_2, 0xBDE417DF, 0x15FC09F6, 0xE1EEF00B, 0x14EA0A0C);
	r4 = D(r4, s1_1_2, 0x050A06EC, 0x2BF7F9DD, 0xF4E50305, 0xE915FA07);
	r5 = D(r5, s1_1_2, 0xFDEDF010, 0xF5FAF0FA, 0x0CEC04EF, 0xEEF80500);
	r6 = D(r6, s1_1_2, 0x0D101E01, 0x11FE02EF, 0xF90C04FA, 0x00060909);
	r7 = D(r7, s1_1_2, 0xFD08EF11, 0x09ED0B0B, 0xF7E9FEF7, 0xE4F70215);
	r0 = D(r0, s1_2_0, 0xF6040EFE, 0x061BF8F0, 0x0405FCFC, 0x03F926F6);
	r1 = D(r1, s1_2_0, 0x0B021300, 0x08E0FF0F, 0x0F08ED06, 0x2018F808);
	r2 = D(r2, s1_2_0, 0xF30EFDFA, 0x0C1AFFF0, 0xFC24FDE0, 0x082709F3);
	r3 = D(r3, s1_2_0, 0xFBF2E124, 0xF803F7F5, 0x040B1305, 0xEB11EE02);
	r4 = D(r4, s1_2_0, 0xEB0E0E14, 0x2DF8EEEE, 0xFFFF0928, 0x0BE90908);
	r5 = D(r5, s1_2_0, 0x04FD1D05, 0xF8E80B1F, 0xC6CADDB2, 0xE0F6FB0B);
	r6 = D(r6, s1_2_0, 0x02EF0A15, 0xFE0F0519, 0x11EEFD01, 0xFDF50E08);
	r7 = D(r7, s1_2_0, 0xF300F0EF, 0xF5FF0415, 0x08010A12, 0xF710EBF4);
	r0 = D(r0, s1_2_1, 0x0402FBFC, 0xFF07F3FC, 0x02F60305, 0x1E13F807);
	r1 = D(r1, s1_2_1, 0x021103D1, 0xEEFB1B04, 0xEB07FA10, 0x121F00E6);
	r2 = D(r2, s1_2_1, 0x0B03010C, 0x1AEFEEE7, 0x0E1E09F5, 0x111FECE7);
	r3 = D(r3, s1_2_1, 0xF2E8F301, 0xF6F609FD, 0x03FCF6FE, 0xF5FAF200);
	r4 = D(r4, s1_2_1, 0x3126101C, 0x14DE10FD, 0xECFE0721, 0x07E0FB08);
	r5 = D(r5, s1_2_1, 0x18DBEB09, 0x06EBE5F6, 0x1AFEE3EB, 0x17EBE901);
	r6 = D(r6, s1_2_1, 0x04F1EB15, 0x01DB01D9, 0x04F7EFFB, 0x0C04F00F);
	r7 = D(r7, s1_2_1, 0xE9F30521, 0x0902010B, 0x00EFF81A, 0x1BEFE6E9);
	r0 = D(r0, s1_2_2, 0x170AEEFE, 0xF1FE1308, 0x02F108FE, 0x1EECF111);
	r1 = D(r1, s1_2_2, 0x233408E7, 0x09FF0B04, 0xEF0E0A08, 0xF90D25E5);
	r2 = D(r2, s1_2_2, 0x08FA07F1, 0x14E30506, 0x07FE02F7, 0xF61A09FB);
	r3 = D(r3, s1_2_2, 0x34E8F6E0, 0xF801FDFE, 0x0EE90000, 0xE9FBF909);
	r4 = D(r4, s1_2_2, 0x12DCE40D, 0xC7E3011A, 0x0AF4E50C, 0xF5F10F03);
	r5 = D(r5, s1_2_2, 0xD7EF050E, 0xFEF8EA05, 0xD30BECEB, 0x03F905F4);
	r6 = D(r6, s1_2_2, 0x0204F30D, 0xEAF00EFD, 0xFE05FC00, 0x01EB01F8);
	r7 = D(r7, s1_2_2, 0xFEFA0704, 0xFC0006EF, 0xFFE108F0, 0xEEF7FE26);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1FFBF4FE, 0x0516020A, 0xFBEC020E, 0x0AF412DF);
	r1 = D(r1, s0_0_0, 0x07FB0BF4, 0xF9F8FEFB, 0xE8FC0315, 0xDCE63B04);
	r2 = D(r2, s0_0_0, 0x07F0FC09, 0x0C070604, 0x01FB04F7, 0x02FF020C);
	r3 = D(r3, s0_0_0, 0x1CF8EAE5, 0xF50103FC, 0x0808FCF5, 0x0D06FDEB);
	r4 = D(r4, s0_0_0, 0xF8FA040D, 0x3010EA06, 0xF90E0002, 0x01EAFF00);
	r5 = D(r5, s0_0_0, 0xF13BF300, 0x0403F901, 0x3500CE9B, 0x00FDFD0E);
	r6 = D(r6, s0_0_0, 0xF60EF3F7, 0xFDF80EF6, 0x14F7F008, 0x00FF03F8);
	r7 = D(r7, s0_0_0, 0x2D2B06D2, 0xFB0EEC15, 0xFA1CF7F6, 0x3025DCF9);
	r0 = D(r0, s0_0_1, 0xFC08FD0D, 0x0E140AEA, 0x090906F8, 0x0019E121);
	r1 = D(r1, s0_0_1, 0xFBE60C12, 0xE1FC17FB, 0x090DDE06, 0x8EEBD411);
	r2 = D(r2, s0_0_1, 0x040D0603, 0x00EF090A, 0xF9000600, 0x1105FEFA);
	r3 = D(r3, s0_0_1, 0x03FDED48, 0x1205FCFD, 0xFAFBF906, 0xF8F21307);
	r4 = D(r4, s0_0_1, 0x13FC03E2, 0xF0F01701, 0xF6F7F71D, 0x080E0201);
	r5 = D(r5, s0_0_1, 0x0E06F7F3, 0xF5E71C07, 0x1ADFCD2F, 0xF7FD03EF);
	r6 = D(r6, s0_0_1, 0xE2191607, 0x140305E4, 0x0812F3F0, 0x000AFFFD);
	r7 = D(r7, s0_0_1, 0xF908B523, 0x08EE0E0A, 0x02DFF00A, 0x18ECE2FE);
	r0 = D(r0, s0_0_2, 0xEE0E0605, 0xE4F80902, 0xED07010C, 0xF2080B22);
	r1 = D(r1, s0_0_2, 0x0CF506E8, 0x03FEFA04, 0x0CEB0FF4, 0x14FCFCFE);
	r2 = D(r2, s0_0_2, 0xF0F80609, 0x021BFAFA, 0x010606FE, 0x100CEA00);
	r3 = D(r3, s0_0_2, 0x0CFBFD05, 0xEA010A0A, 0x01F5040A, 0xED14F507);
	r4 = D(r4, s0_0_2, 0xECE21FD7, 0x18FFEFFA, 0xE9081DF1, 0xEBDB22FC);
	r5 = D(r5, s0_0_2, 0xF2E6040B, 0xE5F705FA, 0x06051FD8, 0xF8030506);
	r6 = D(r6, s0_0_2, 0xE20705FF, 0xE32203E4, 0x19F8EEF5, 0xFFF10BFC);
	r7 = D(r7, s0_0_2, 0x131E0104, 0x11E0FF11, 0xFF150BEC, 0xF2E522F0);
	r0 = D(r0, s0_1_0, 0x1F0BE3F0, 0x03F6ED11, 0xF0E20F0C, 0x14D5FC0D);
	r1 = D(r1, s0_1_0, 0xFC2EF816, 0x010E14F1, 0xEDF117E2, 0x05031F39);
	r2 = D(r2, s0_1_0, 0xFC1809E2, 0x13DDF9EB, 0xFE0BFE06, 0xFEF805FA);
	r3 = D(r3, s0_1_0, 0x12030358, 0xF5FD0B19, 0xF4101307, 0xED100D04);
	r4 = D(r4, s0_1_0, 0xFDDA08BB, 0xF8000917, 0xEDF4F70B, 0x00EFFBF7);
	r5 = D(r5, s0_1_0, 0x01EC02D3, 0x29E61D03, 0xC9BA2736, 0xECD41413);
	r6 = D(r6, s0_1_0, 0xFE12FC0D, 0x0F02FE0C, 0x1608F7F9, 0x0C06FB05);
	r7 = D(r7, s0_1_0, 0xC8CCF8EF, 0x0C0104FB, 0xD7FFFBFB, 0xF8F31BE9);
	r0 = D(r0, s0_1_1, 0xEE18AD31, 0x2824F2DE, 0xFC13F9EF, 0x0109CE17);
	r1 = D(r1, s0_1_1, 0xF513CF2C, 0xFE0EFFF6, 0xF62304FA, 0x1B01EF16);
	r2 = D(r2, s0_1_1, 0x0216D300, 0x16E5E806, 0xFD09E807, 0xD9FF0103);
	r3 = D(r3, s0_1_1, 0xF71021E6, 0x01020FF0, 0xEB0C0613, 0x1318E016);
	r4 = D(r4, s0_1_1, 0x37EDEA24, 0xE413FF1E, 0x02311914, 0x4101CAFE);
	r5 = D(r5, s0_1_1, 0x26E81DC2, 0x19151906, 0x3EDC2EF4, 0x16011B08);
	r6 = D(r6, s0_1_1, 0xFD2E0912, 0xDD08DF05, 0x0A04EA04, 0xF615F1F7);
	r7 = D(r7, s0_1_1, 0x94D531A4, 0x08E9F210, 0x011E27FA, 0x30D8FD81);
	r0 = D(r0, s0_1_2, 0x1CF6E309, 0x14FCED00, 0x04F5FCF4, 0xFAEBE4B2);
	r1 = D(r1, s0_1_2, 0xECFEFA03, 0x10E90C1A, 0x0FF71623, 0x1B04EDE4);
	r2 = D(r2, s0_1_2, 0xFAFA04F7, 0xFCFC1FF3, 0x03F512FA, 0x15FCF704);
	r3 = D(r3, s0_1_2, 0x06F5F207, 0xF913F90B, 0x0DEE0AFB, 0x0CFCFE10);
	r4 = D(r4, s0_1_2, 0xEC0C19E2, 0xE2FE15E8, 0xF234FAE6, 0xE30A3E35);
	r5 = D(r5, s0_1_2, 0x19041F19, 0x0D08E113, 0x23E623FC, 0xFF0309F2);
	r6 = D(r6, s0_1_2, 0xF73BE7FD, 0xF7DEFFE7, 0x35CF1F27, 0x040008F9);
	r7 = D(r7, s0_1_2, 0xE60FE035, 0x0C05EF09, 0xF6F118FB, 0x1002151D);
	r0 = D(r0, s0_2_0, 0x150501DA, 0xF5DD05F7, 0x0228FF05, 0xEB0D0EF2);
	r1 = D(r1, s0_2_0, 0xF0E40402, 0xF1150A1E, 0x0DC4FB34, 0xD105F110);
	r2 = D(r2, s0_2_0, 0xFC0C0400, 0x001A09C7, 0xEF090115, 0x00F6020D);
	r3 = D(r3, s0_2_0, 0xA7FDF9E1, 0xF3020302, 0x17190C05, 0xFDFE17E9);
	r4 = D(r4, s0_2_0, 0x0CE5D3FB, 0xDDA009E3, 0xED121D21, 0x0A4BEAF5);
	r5 = D(r5, s0_2_0, 0xE4ED0CF9, 0x1CF3EB2B, 0x05EF11FD, 0xFC0D1809);
	r6 = D(r6, s0_2_0, 0xEF02E9E6, 0xFAD0F21D, 0x020FF821, 0xFCE50EED);
	r7 = D(r7, s0_2_0, 0xF7BB1EF0, 0xFB10E1FF, 0xF100C626, 0xE9E0EA01);
	r0 = D(r0, s0_2_1, 0x174BF1DC, 0xEBFA06F9, 0x0F1AF0FE, 0xED0304F7);
	r1 = D(r1, s0_2_1, 0xEE81D3E8, 0xFCE81908, 0xFCFD09F4, 0x030E08EF);
	r2 = D(r2, s0_2_1, 0xEEDB11E9, 0x01EFF4F3, 0x07110407, 0x02DC260D);
	r3 = D(r3, s0_2_1, 0xFCECF14A, 0x04FB000D, 0x1D0219DF, 0x0DC612D5);
	r4 = D(r4, s0_2_1, 0xEA2CB128, 0x810F0DE8, 0x46EF00C8, 0x004AC2AF);
	r5 = D(r5, s0_2_1, 0xC208D146, 0xD6D10EED, 0x3AF5484B, 0xE1FA00F6);
	r6 = D(r6, s0_2_1, 0xEBF22056, 0x1812F02F, 0xE40411E5, 0xFB24FD02);
	r7 = D(r7, s0_2_1, 0x1D335D10, 0xF308F9FF, 0x17F920E5, 0xF0E9F2FC);
	r0 = D(r0, s0_2_2, 0x101AF0E3, 0xF5FDF600, 0x1104ED09, 0xF30BDE21);
	r1 = D(r1, s0_2_2, 0x0D0BB8F0, 0x12F60506, 0xDBD51BDD, 0xF213EC3F);
	r2 = D(r2, s0_2_2, 0x0DED040D, 0xFA28EC16, 0xF4081007, 0xD1F223F4);
	r3 = D(r3, s0_2_2, 0x25FB13ED, 0x18F7FB04, 0xEE0F01FC, 0x20E74400);
	r4 = D(r4, s0_2_2, 0x03E42A10, 0x8606F438, 0xEAE912EB, 0xD006F20B);
	r5 = D(r5, s0_2_2, 0xDE17BCDE, 0xE2FBFBE7, 0x03E1FDE0, 0x1DFF02EF);
	r6 = D(r6, s0_2_2, 0xE405F0A0, 0x04D5FAE2, 0x080AE51B, 0x00F7090F);
	r7 = D(r7, s0_2_2, 0x0205F34A, 0x1008F404, 0xF5001316, 0xF4240607);
	r0 = D(r0, s1_0_0, 0xF7D60602, 0x06F209FB, 0x02020CF2, 0xDE2AE714);
	r1 = D(r1, s1_0_0, 0x02FAFDFC, 0x0EF40902, 0xFDFCFCF8, 0x2204071C);
	r2 = D(r2, s1_0_0, 0xFFF7FE05, 0x01E80E07, 0x070106EF, 0xF5FBFE02);
	r3 = D(r3, s1_0_0, 0xD3ED4CEA, 0x0BFF06F4, 0x05D7F11A, 0xF0E62103);
	r4 = D(r4, s1_0_0, 0xEE1100F9, 0xF337F2DC, 0xFD0001F7, 0x00F505EB);
	r5 = D(r5, s1_0_0, 0xF90F0206, 0xEE0BEDF9, 0x0200FF09, 0x1D00E6FB);
	r6 = D(r6, s1_0_0, 0xE40F1EF5, 0xEF0F0D0A, 0x0506FE07, 0xFFFE0BFC);
	r7 = D(r7, s1_0_0, 0xF70C05FE, 0xF50B01F8, 0x1D0BF7FF, 0x1F0FF9F1);
	r0 = D(r0, s1_0_1, 0x040403E6, 0x150500FD, 0x05DE1DF5, 0xDBECC810);
	r1 = D(r1, s1_0_1, 0xF2142AF7, 0xF9ECF90E, 0xE218FE00, 0xFE2CDFF4);
	r2 = D(r2, s1_0_1, 0xFF070CFC, 0xE7EBF502, 0x0E0108FF, 0xFD0AFAFD);
	r3 = D(r3, s1_0_1, 0x079EB8DE, 0x0509FA09, 0x011E040F, 0x03E104F8);
	r4 = D(r4, s1_0_1, 0xF813E0F2, 0x36F5F1E1, 0x08E61B0C, 0x1A14F80A);
	r5 = D(r5, s1_0_1, 0x07D3F4EB, 0xF623DF0D, 0xF0E9F3E3, 0x12E20AFC);
	r6 = D(r6, s1_0_1, 0x07EC1B09, 0xF915F62A, 0x010D1602, 0xFEF3F3FD);
	r7 = D(r7, s1_0_1, 0xE902EC06, 0xFAF51E0F, 0xFE03F016, 0x1DF20125);
	r0 = D(r0, s1_0_2, 0xEAF7110A, 0xFAF8F413, 0x0814F004, 0xFAE3D40B);
	r1 = D(r1, s1_0_2, 0x1781F610, 0xFFCA0D04, 0xE5E50907, 0xEE19F920);
	r2 = D(r2, s1_0_2, 0x0A04FA09, 0xF9FCFFFF, 0x02EFF5F2, 0xFA18DA07);
	r3 = D(r3, s1_0_2, 0xEDFF0104, 0x02EA07F2, 0xF90C0502, 0xF5F10DE9);
	r4 = D(r4, s1_0_2, 0x02F8FA0E, 0x1E53D007, 0xF5F813ED, 0x11E0FE0D);
	r5 = D(r5, s1_0_2, 0x1007DD0B, 0xE907280B, 0x08000C1C, 0x0F16E8FD);
	r6 = D(r6, s1_0_2, 0xF89DFBFD, 0x08D4FEE6, 0x05FCFDFC, 0x03E500FD);
	r7 = D(r7, s1_0_2, 0xF3D3DE0A, 0xFCF401E8, 0x0AF00CFE, 0xEBAC58ED);
	r0 = D(r0, s1_1_0, 0x07E30F07, 0x15FDF8EA, 0x1EF60200, 0xDFDA32F3);
	r1 = D(r1, s1_1_0, 0x11F0F601, 0xFFFD1101, 0x040A000D, 0x010024E5);
	r2 = D(r2, s1_1_0, 0x0401F203, 0xF606F80A, 0xF8FD0510, 0x05FC040B);
	r3 = D(r3, s1_1_0, 0xD8251705, 0x0907F104, 0x04FD0CF2, 0x09FEE803);
	r4 = D(r4, s1_1_0, 0x0C12E9DD, 0xE40A24F9, 0x18FD05FE, 0xFF03F8FF);
	r5 = D(r5, s1_1_0, 0xE309F6F6, 0xEE1105F6, 0x11FE24E2, 0xEA051309);
	r6 = D(r6, s1_1_0, 0xF619D804, 0x16FA1402, 0x12FB12E6, 0xFA03F4FD);
	r7 = D(r7, s1_1_0, 0xC70A0318, 0x1309F7F5, 0x04141D02, 0xFBFCF409);
	r0 = D(r0, s1_1_1, 0xF9FBFE07, 0xF4FA0E04, 0xFA0EFF11, 0xDEFAF3EF);
	r1 = D(r1, s1_1_1, 0x10E615FE, 0x1206F514, 0x1A1009F0, 0x1E1CEA08);
	r2 = D(r2, s1_1_1, 0xF6090BFF, 0xDF23D5EC, 0xFEF7F108, 0x07F900F1);
	r3 = D(r3, s1_1_1, 0xF92F08FA, 0x01FFFEFC, 0x0C200DF2, 0xFF001106);
	r4 = D(r4, s1_1_1, 0x043B190E, 0x0D560D07, 0x1A1FF008, 0xDE1C021B);
	r5 = D(r5, s1_1_1, 0xEB1E0F04, 0x19EC051C, 0xE0011CF2, 0xF0F9F9EF);
	r6 = D(r6, s1_1_1, 0x0604E015, 0x341734FF, 0x0BFD0914, 0x09150616);
	r7 = D(r7, s1_1_1, 0xF9E5BFD0, 0x0FF508F9, 0x130615F0, 0x0E29EAF5);
	r0 = D(r0, s1_1_2, 0x0CF21203, 0xF4F9000F, 0x0802F604, 0xFCE7F5DB);
	r1 = D(r1, s1_1_2, 0xFD24C913, 0xF8FA04F9, 0xF9041407, 0xFA2D15F9);
	r2 = D(r2, s1_1_2, 0xED1F19DF, 0xF120F4E4, 0x040CFB17, 0x07F9FBFE);
	r3 = D(r3, s1_1_2, 0x0316EF07, 0x120BF31C, 0xFDEE0EFC, 0x0E36E318);
	r4 = D(r4, s1_1_2, 0x34FEFF25, 0xD8B901FB, 0xF8550306, 0x06EAE705);
	r5 = D(r5, s1_1_2, 0xF413EB19, 0x02FCFCDC, 0xF2DD13FB, 0x070DEAF3);
	r6 = D(r6, s1_1_2, 0x1812E00E, 0xEDEB1BF9, 0xF00513FE, 0xF9F707F1);
	r7 = D(r7, s1_1_2, 0xF0F1100A, 0xFADCFC2B, 0xF6120200, 0xE3310C1A);
	r0 = D(r0, s1_2_0, 0x15FE16F0, 0x10EF0303, 0xFBFF0107, 0xFB13ED0D);
	r1 = D(r1, s1_2_0, 0x0A09E702, 0x0E12EDE9, 0xDAE02201, 0xE8F6DD0C);
	r2 = D(r2, s1_2_0, 0xF00AFB07, 0x0D0C0109, 0x000D0B06, 0x0CFAF604);
	r3 = D(r3, s1_2_0, 0xF6FF0D04, 0xFBFB0803, 0x0C07F3FF, 0x0AF52AF8);
	r4 = D(r4, s1_2_0, 0x03F71215, 0x06CA0D41, 0x0202FC22, 0x0F13F500);
	r5 = D(r5, s1_2_0, 0x0206E8F3, 0xF50BE5FC, 0xFA22CC32, 0x080B2708);
	r6 = D(r6, s1_2_0, 0x0102EFEE, 0x03FCF804, 0x0503F8EA, 0xFFFF010E);
	r7 = D(r7, s1_2_0, 0x1BFA070C, 0xEF050310, 0xEC13DD20, 0xF4FF0E15);
	r0 = D(r0, s1_2_1, 0x14FCEF06, 0xEDF610FE, 0x04F30DFF, 0x1CF0F410);
	r1 = D(r1, s1_2_1, 0xF916E4F6, 0x0B20FA10, 0x2215FE0C, 0x03DF0C08);
	r2 = D(r2, s1_2_1, 0x24F70F15, 0x1BF4F716, 0xFA070807, 0xE40D121F);
	r3 = D(r3, s1_2_1, 0x4F0AEE14, 0xFFFF0314, 0x02010705, 0xF11205FB);
	r4 = D(r4, s1_2_1, 0x16F6DF00, 0xE50B061E, 0x06091713, 0x020CF7F7);
	r5 = D(r5, s1_2_1, 0x09F2F20E, 0x30FE0608, 0xED02F422, 0xED09070E);
	r6 = D(r6, s1_2_1, 0x040503E8, 0x0E040604, 0x03FE0702, 0x0A0EFCF0);
	r7 = D(r7, s1_2_1, 0x2533BF0A, 0xF00400F2, 0x13F707EB, 0x00EE0FEE);
	r0 = D(r0, s1_2_2, 0x02082004, 0x1312E3FC, 0x070102F8, 0x25E000F6);
	r1 = D(r1, s1_2_2, 0xAF06C6E7, 0xE011E9E9, 0x291FFCF3, 0x15D5F200);
	r2 = D(r2, s1_2_2, 0xECD009E8, 0x07FBECFF, 0x0206F7E1, 0x05F8F5E0);
	r3 = D(r3, s1_2_2, 0x1805DB04, 0x08FC12E5, 0x04FB04EF, 0x0C2435FA);
	r4 = D(r4, s1_2_2, 0xFDDA140D, 0xE6BFEACE, 0xE1CFF2C3, 0x0F0711ED);
	r5 = D(r5, s1_2_2, 0x24EF1EFC, 0xE1F30DFA, 0x19E0F91F, 0x0A030902);
	r6 = D(r6, s1_2_2, 0x01F20004, 0xF5ED0306, 0xF9FC130A, 0xFC02140B);
	r7 = D(r7, s1_2_2, 0x1405FFEC, 0xEE0BF0EA, 0xF6E80708, 0x24F0F0F0);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0BD70108, 0xFD0503EF, 0xF5F8F91F, 0x14EC1003);
	r1 = D(r1, s0_0_0, 0xF002D419, 0xF402060C, 0x10FBFC09, 0xF60808EA);
	r2 = D(r2, s0_0_0, 0xF811F30B, 0xF7F6020F, 0xFC02FA0E, 0xF8150701);
	r3 = D(r3, s0_0_0, 0x081F0C1F, 0xF107150D, 0x060516F7, 0x18EFF6E0);
	r4 = D(r4, s0_0_0, 0xFD02E501, 0x381002DD, 0x0800FCF8, 0xEA080125);
	r5 = D(r5, s0_0_0, 0x19070BF3, 0xE2070827, 0xFA1F2F26, 0xEE000C10);
	r6 = D(r6, s0_0_0, 0x27FE08E4, 0x00DCF312, 0xFAE31014, 0x0A05F906);
	r7 = D(r7, s0_0_0, 0x3D2819C5, 0x09050001, 0xF618D9F8, 0x070C02E9);
	r0 = D(r0, s0_0_1, 0xFD0BF50B, 0x17140000, 0x0A220010, 0x0336100C);
	r1 = D(r1, s0_0_1, 0xF610EB06, 0x060612F2, 0x151009FF, 0xF8282118);
	r2 = D(r2, s0_0_1, 0xFEF2F312, 0x0107F817, 0x0DFF0FF1, 0x0AFA02FF);
	r3 = D(r3, s0_0_1, 0xDEFC2522, 0x0712FB06, 0xF800F5F7, 0xFF12FEFD);
	r4 = D(r4, s0_0_1, 0x0219FF07, 0xE419DC0A, 0xE5F8F60F, 0xD709042A);
	r5 = D(r5, s0_0_1, 0xFC1FFC02, 0xF2070518, 0xC9B8CF61, 0x070AF507);
	r6 = D(r6, s0_0_1, 0x06EF19E6, 0xEEF4F61B, 0xFC1EFE05, 0x0505F404);
	r7 = D(r7, s0_0_1, 0x9ECEE58B, 0x04C3E70C, 0x08F614D7, 0xF0D503FA);
	r0 = D(r0, s0_0_2, 0xFBEDFEEC, 0x0CE8F9FF, 0xFBEEF520, 0xFEF81315);
	r1 = D(r1, s0_0_2, 0x0528FA04, 0xFE03F3FE, 0xFDFEE617, 0xF8FE1F03);
	r2 = D(r2, s0_0_2, 0xFCFC0707, 0xFB01090E, 0x01FEF603, 0xF5060311);
	r3 = D(r3, s0_0_2, 0x2AF11D14, 0xF2FAFF07, 0x05EAF5FA, 0x070AF505);
	r4 = D(r4, s0_0_2, 0xE60E1D03, 0x250F14C9, 0x08FFFB02, 0xED15FB09);
	r5 = D(r5, s0_0_2, 0x0DE703F1, 0x0CF1070B, 0x092CEFF8, 0xFF0C0402);
	r6 = D(r6, s0_0_2, 0xFA0B07FD, 0x03E7010D, 0x03FAF310, 0xF7F8000F);
	r7 = D(r7, s0_0_2, 0x1DE607C8, 0x0EE107FB, 0xFE0F1704, 0x09EB12DF);
	r0 = D(r0, s0_1_0, 0x07F5F2FA, 0xFEFFFDF3, 0x0DFC0DFA, 0xFAEEC935);
	r1 = D(r1, s0_1_0, 0x2403E9DB, 0x1609E3FA, 0x040BF5F8, 0xE1EF071F);
	r2 = D(r2, s0_1_0, 0x07070504, 0x05120801, 0x06FEEAFF, 0x05D4E70A);
	r3 = D(r3, s0_1_0, 0xFF161E06, 0xFFF8EC03, 0xFFF0F8FD, 0xDD13F2EE);
	r4 = D(r4, s0_1_0, 0x031400FC, 0xE11CF500, 0x051DFDE0, 0x08FF0404);
	r5 = D(r5, s0_1_0, 0x030DFA02, 0xEFD91924, 0xFC2003FF, 0xF6FFDF16);
	r6 = D(r6, s0_1_0, 0xFEFCF403, 0x05F608EE, 0xF7060303, 0xF3FF0609);
	r7 = D(r7, s0_1_0, 0x01172EE9, 0x0E1207EF, 0x1AFA1606, 0xE419E4FF);
	r0 = D(r0, s0_1_1, 0xF9030F10, 0xF6EE0812, 0xFBF014FB, 0xF61CF01F);
	r1 = D(r1, s0_1_1, 0x15FC1BEE, 0x052018E9, 0x1D1921EB, 0x3C1A122B);
	r2 = D(r2, s0_1_1, 0x130C010B, 0xFB021D0D, 0xFC3910F9, 0xF53E10FD);
	r3 = D(r3, s0_1_1, 0xD5F4DA3C, 0x14F8090D, 0xF80302FA, 0xEEEE1D10);
	r4 = D(r4, s0_1_1, 0x030D0F22, 0x0DEBF724, 0xF2F90EED, 0x1E0915CE);
	r5 = D(r5, s0_1_1, 0xDE2914E9, 0x23D20D04, 0xE4D7F3F2, 0xFEEE0012);
	r6 = D(r6, s0_1_1, 0xFBF314FE, 0xFB1B0218, 0x06F503F3, 0x10F9F807);
	r7 = D(r7, s0_1_1, 0xE7F8E101, 0xF1F5F2FC, 0x030C0BDA, 0xDE17F523);
	r0 = D(r0, s0_1_2, 0x04FAEB03, 0x0316EC01, 0xFB0BEF28, 0xFDE5FAFA);
	r1 = D(r1, s0_1_2, 0x231C3000, 0x1C0DF6E8, 0xE1181D15, 0x0405D7FF);
	r2 = D(r2, s0_1_2, 0xFF02FC1C, 0xFC0D0800, 0x0112F809, 0xF721F408);
	r3 = D(r3, s0_1_2, 0xEEEAE416, 0xFA09FC07, 0xF81302FE, 0xFB081100);
	r4 = D(r4, s0_1_2, 0xFCB60B06, 0x1F1006E8, 0xFE0DF9F0, 0x17FA22EB);
	r5 = D(r5, s0_1_2, 0xECA5FEE1, 0xF9FC0FFD, 0xFA252400, 0xE8FE121F);
	r6 = D(r6, s0_1_2, 0x11FE06FD, 0x19190AFE, 0x040E02E6, 0x15090306);
	r7 = D(r7, s0_1_2, 0x0605F8E9, 0xFE011509, 0x0EF6F005, 0x2701FDEF);
	r0 = D(r0, s0_2_0, 0x05FC071B, 0xFCEAF31B, 0x0601FC08, 0x0804F6EE);
	r1 = D(r1, s0_2_0, 0xFEE61E06, 0xEAECE007, 0xFFEEFE11, 0xDB1DE0F9);
	r2 = D(r2, s0_2_0, 0xFC04EF03, 0x1401F418, 0x00E50201, 0x00F9FF06);
	r3 = D(r3, s0_2_0, 0x23F5FBEB, 0xFDFF0001, 0x04F9F703, 0xFA09F207);
	r4 = D(r4, s0_2_0, 0x2212F206, 0xC0C6E2E8, 0x01052CF7, 0x1CEFFCF8);
	r5 = D(r5, s0_2_0, 0x0302F916, 0x0B06D1F1, 0x221701D7, 0x2CF004D6);
	r6 = D(r6, s0_2_0, 0x060CEF00, 0x01F3F2F2, 0x03FFF6F8, 0xFE070604);
	r7 = D(r7, s0_2_0, 0x03E81805, 0x02080001, 0x0DFFEFFB, 0xFDF30B12);
	r0 = D(r0, s0_2_1, 0xFA030001, 0x02FEFCF6, 0x00F70703, 0xFBF90800);
	r1 = D(r1, s0_2_1, 0xEED3FF19, 0x09ED02EB, 0xEFFBFF0A, 0x08F2F4F1);
	r2 = D(r2, s0_2_1, 0xFFFC0800, 0xF0EBF937, 0x03FF15F1, 0x1FFA1109);
	r3 = D(r3, s0_2_1, 0xEF19EA0E, 0x0602060A, 0xFF0A0911, 0xF3F4FDF7);
	r4 = D(r4, s0_2_1, 0xF707F10C, 0xFCE506BA, 0x15FAF5E7, 0xFDFDF3E7);
	r5 = D(r5, s0_2_1, 0x07FA0630, 0x0D1EE704, 0xEB14370C, 0xFAF5FEE5);
	r6 = D(r6, s0_2_1, 0xEF0EF40E, 0xF5171018, 0x01F1F8FE, 0xEFF91A05);
	r7 = D(r7, s0_2_1, 0xF0FAE73A, 0xF707FAFD, 0xF1F71613, 0xE5FF1533);
	r0 = D(r0, s0_2_2, 0x012A10EE, 0x0BF61200, 0xFF02F410, 0x11FC081B);
	r1 = D(r1, s0_2_2, 0xBEF7E737, 0xEACD0BD3, 0xC3F0F914, 0x12D317E1);
	r2 = D(r2, s0_2_2, 0x05FD0EEA, 0xFEE8EF0E, 0xEBE9040A, 0x03D2FAF6);
	r3 = D(r3, s0_2_2, 0x0BF1F312, 0xFDF9FCFD, 0x08F9FE01, 0x0CF8FD27);
	r4 = D(r4, s0_2_2, 0xE7040B0D, 0xDFDD2FA6, 0xDFE1D517, 0x01E2F420);
	r5 = D(r5, s0_2_2, 0x0CF8F60D, 0xFE1707FF, 0x3F121DD2, 0x060000F0);
	r6 = D(r6, s0_2_2, 0x020AF507, 0x0DF60506, 0xF70BF415, 0x010CF80D);
	r7 = D(r7, s0_2_2, 0x1B13FC08, 0x06030AFB, 0xEC04F9F6, 0xFFF8E228);
	r0 = D(r0, s1_0_0, 0xF50E201B, 0xEA17E6C9, 0xFFF7D710, 0x0603130D);
	r1 = D(r1, s1_0_0, 0x20D1E1EB, 0x0CFFF822, 0x37DAB6FD, 0xEFCCFE04);
	r2 = D(r2, s1_0_0, 0x0200F612, 0xE00B0A16, 0x0BF4F90E, 0x04F7E0E2);
	r3 = D(r3, s1_0_0, 0xB8314404, 0x04FAF8E1, 0x0104E9ED, 0x010702EF);
	r4 = D(r4, s1_0_0, 0xE6FFF3F5, 0x0C1CF8E5, 0xFA01F80E, 0xF619142D);
	r5 = D(r5, s1_0_0, 0xF40D27FA, 0x1AE8DE11, 0x3DFEEA78, 0x0D00FF02);
	r6 = D(r6, s1_0_0, 0xF30000E1, 0xFBFEEEEA, 0x1DE90001, 0xF6080C07);
	r7 = D(r7, s1_0_0, 0x0C161D5D, 0x060CEFD8, 0x08FC2535, 0xF1F6FCB1);
	r0 = D(r0, s1_0_1, 0xF11DF5F9, 0x060BFA02, 0x0911104E, 0x0D2BDDE2);
	r1 = D(r1, s1_0_1, 0xEE2C4F16, 0x10E70BF6, 0x14FC1C06, 0xFEFCF5FC);
	r2 = D(r2, s1_0_1, 0x0605EBEE, 0xFB1702E5, 0xEE161BFB, 0x06153A19);
	r3 = D(r3, s1_0_1, 0xF61AC381, 0x22124B3E, 0x110B000C, 0x12DF14E0);
	r4 = D(r4, s1_0_1, 0x0B10AA06, 0xE715315A, 0xD1213437, 0xF7EFEEDA);
	r5 = D(r5, s1_0_1, 0xE814FDD8, 0x3E04F51E, 0xF72D22D3, 0x110334E3);
	r6 = D(r6, s1_0_1, 0x1515090D, 0x0E0D1909, 0x3F072F16, 0x011508E9);
	r7 = D(r7, s1_0_1, 0xFB15A3D9, 0x0209E400, 0xCFF108FA, 0x07BCE208);
	r0 = D(r0, s1_0_2, 0xE71334C9, 0x1710FD64, 0xFA0E13EF, 0xFA3B2889);
	r1 = D(r1, s1_0_2, 0xBE3F1381, 0xCDF8DADF, 0x15D1CE3B, 0xE3183281);
	r2 = D(r2, s1_0_2, 0x0A0C0F15, 0xD7022AB1, 0xFEF7F6EC, 0x0B0A020A);
	r3 = D(r3, s1_0_2, 0x03FA3381, 0x08FC07E7, 0xE90D0D11, 0xED16FE9D);
	r4 = D(r4, s1_0_2, 0x16FFF274, 0x04EC2808, 0xFEE9FCD9, 0x0205FF04);
	r5 = D(r5, s1_0_2, 0x04F3D816, 0x36F7013B, 0x081426F3, 0xFEFCF3D3);
	r6 = D(r6, s1_0_2, 0x09FF00D9, 0xFAF20E7F, 0x1A0A0B51, 0xF8101E06);
	r7 = D(r7, s1_0_2, 0xD5FD0181, 0xFFFAFD6C, 0x09FF32F6, 0xC9F9E7AB);
	r0 = D(r0, s1_1_0, 0x19E9D51E, 0xF4FD1005, 0xF908FD56, 0x12F82F57);
	r1 = D(r1, s1_1_0, 0x1BECF620, 0xFDFBFD03, 0xFEDCEE08, 0x1511F6E7);
	r2 = D(r2, s1_1_0, 0x09010DF9, 0x0F23050A, 0xE720F62A, 0xF90AFCE5);
	r3 = D(r3, s1_1_0, 0x021423BF, 0xFFF715EF, 0x0E11250A, 0x1BFEE9C9);
	r4 = D(r4, s1_1_0, 0xEA0BEB30, 0x010C1FF2, 0xF316F6EF, 0xEA12E02B);
	r5 = D(r5, s1_1_0, 0xE311F4F9, 0xF5D1D665, 0xE7C9F6F2, 0x00F7F7F1);
	r6 = D(r6, s1_1_0, 0x01F60336, 0xF921E8F2, 0xEF24FADD, 0xF6070807);
	r7 = D(r7, s1_1_0, 0x13FFF7FC, 0x06F21053, 0x12E90B20, 0x011905CA);
	r0 = D(r0, s1_1_1, 0x1B05FBAD, 0xE5FE207F, 0xEFF9FFA2, 0x05F6DE57);
	r1 = D(r1, s1_1_1, 0xE4086BC6, 0x1D08F9EB, 0xEAEC340C, 0x1BE2E38A);
	r2 = D(r2, s1_1_1, 0x12070110, 0xFEEFC92D, 0xCAEB91CE, 0xBC0AC466);
	r3 = D(r3, s1_1_1, 0x0FFC165C, 0x001415C8, 0xF7FDD710, 0x0DE61461);
	r4 = D(r4, s1_1_1, 0x27EE35AD, 0x1BE31181, 0xF8E5F004, 0xE8BEE6D6);
	r5 = D(r5, s1_1_1, 0x08F2D96B, 0xE3F4E521, 0xF4F7FD4D, 0xF0EAFE50);
	r6 = D(r6, s1_1_1, 0xEDB9DF57, 0xFFF7983D, 0xFEFD0AD2, 0xF5FD0AD8);
	r7 = D(r7, s1_1_1, 0x0B01841A, 0x0E0DC963, 0x1DD5D87F, 0xE114EC36);
	r0 = D(r0, s1_1_2, 0x01070EA6, 0xFCE8187F, 0x0FF0FF7F, 0xFB152881);
	r1 = D(r1, s1_1_2, 0xD8251C81, 0xCF1CFBB6, 0xF1005749, 0xD2034AB5);
	r2 = D(r2, s1_1_2, 0x07090240, 0x03FFF77F, 0xDCFDF3DC, 0xF4F51281);
	r3 = D(r3, s1_1_2, 0x30EF0C81, 0x01EB0400, 0xFD08F9E6, 0x04DD0781);
	r4 = D(r4, s1_1_2, 0xED03037F, 0xD6F8F4EF, 0x12F202BD, 0xFDF2EE7F);
	r5 = D(r5, s1_1_2, 0x3DFDE47F, 0x20F6F481, 0x1DF61358, 0x10DEFBBA);
	r6 = D(r6, s1_1_2, 0x15EF0AC3, 0xC8C7FCFB, 0x0DE10C98, 0xFD0408F6);
	r7 = D(r7, s1_1_2, 0xF0035781, 0x1706DEB5, 0x06E3C47F, 0x111BE83C);
	r0 = D(r0, s1_2_0, 0x071908EB, 0xF91AEA27, 0xF5090E37, 0xFA0419FE);
	r1 = D(r1, s1_2_0, 0xF0220DFE, 0x01D5F935, 0xF92203BE, 0x08E5DCBC);
	r2 = D(r2, s1_2_0, 0x0BF6F3F3, 0xFE0A0F27, 0x06F6F308, 0x15ECE2EB);
	r3 = D(r3, s1_2_0, 0xDD0435AB, 0xF80607FB, 0xFA14131B, 0xFCFE12E7);
	r4 = D(r4, s1_2_0, 0x07F1E613, 0x1502FA28, 0x0406F5FD, 0x00FA08F3);
	r5 = D(r5, s1_2_0, 0x0EE90102, 0xFBFFDCFD, 0xB312D781, 0x12E310FF);
	r6 = D(r6, s1_2_0, 0xE113FC19, 0xF9FCF70A, 0xE50416F5, 0x08FE080A);
	r7 = D(r7, s1_2_0, 0x12DE0408, 0x0B01ED0E, 0xF9ED0BFC, 0xE22715E0);
	r0 = D(r0, s1_2_1, 0x0DEDFAD2, 0x0C04047F, 0xF8020DCA, 0x1210E0D4);
	r1 = D(r1, s1_2_1, 0xDA3611A9, 0xFCE5F50F, 0xE8D51F1C, 0x1BC11543);
	r2 = D(r2, s1_2_1, 0x0BF8F931, 0x13ED0AD2, 0x01152718, 0x000506FD);
	r3 = D(r3, s1_2_1, 0xF6EFDFBA, 0xF20B0A24, 0x03F0FBC0, 0x030C0127);
	r4 = D(r4, s1_2_1, 0xE1FF087F, 0x0714EF16, 0x01E6C0BD, 0xFEE4E9A1);
	r5 = D(r5, s1_2_1, 0xFDF0E615, 0x0906F4DC, 0xE41220E0, 0x0FEBFC7F);
	r6 = D(r6, s1_2_1, 0xFED6F4FC, 0x1FEAEF23, 0x02E00901, 0xFB01EC12);
	r7 = D(r7, s1_2_1, 0x1CE4EA9D, 0xF416FE02, 0x04EDF07F, 0x1DE1FE11);
	r0 = D(r0, s1_2_2, 0xD1061D81, 0xF615057F, 0xFB07F907, 0xE61E0DEC);
	r1 = D(r1, s1_2_2, 0x3C0DF16F, 0x0300DF7F, 0xDFF80B7F, 0xED161012);
	r2 = D(r2, s1_2_2, 0x1801F0F4, 0x0CF5F87F, 0x0809F5F6, 0x0713F07F);
	r3 = D(r3, s1_2_2, 0x26FB1CD7, 0xF9F810DB, 0xF81EF7F7, 0xF6060E81);
	r4 = D(r4, s1_2_2, 0x0EE2F47F, 0xF30004F8, 0x02D4CC77, 0x0214FF87);
	r5 = D(r5, s1_2_2, 0x09160E89, 0xDE302581, 0xEB50FB81, 0x08120390);
	r6 = D(r6, s1_2_2, 0xF7F90781, 0x2BE5F6EA, 0xEE08127F, 0x010D08D9);
	r7 = D(r7, s1_2_2, 0xFAF31881, 0x17FFEBD2, 0x17EF19F1, 0xE1EA01BD);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08FCF7F1, 0x0CFD0FF2, 0x12232D1D, 0x1101F7FE);
	r1 = D(r1, s0_0_0, 0x001CF501, 0x1308020E, 0xF8E01FFD, 0xD11204FF);
	r2 = D(r2, s0_0_0, 0xFDEF0107, 0xF7ECF907, 0x0EFFF8FE, 0xF9FD04FA);
	r3 = D(r3, s0_0_0, 0xCAD800E4, 0xFF00F311, 0x01F81809, 0x07E60E02);
	r4 = D(r4, s0_0_0, 0xF40A0F1E, 0xFFF1F6F8, 0xF3060E1F, 0xF2110627);
	r5 = D(r5, s0_0_0, 0x05050C07, 0xFB1A0DFD, 0xEE14F7CA, 0x0EF00CF5);
	r6 = D(r6, s0_0_0, 0xE011ED19, 0xF2D1C716, 0x01060F00, 0x0705F60B);
	r7 = D(r7, s0_0_0, 0x00F7F3FB, 0xEE04C6FB, 0x09FD0303, 0xD8CAF918);
	r0 = D(r0, s0_0_1, 0x09040806, 0xDEF70407, 0x0AE9F1F9, 0xDEF7FADE);
	r1 = D(r1, s0_0_1, 0x071EF9F2, 0x0CD10E09, 0xEE000CFD, 0xF80FE622);
	r2 = D(r2, s0_0_1, 0x1001F3F9, 0xFB07F715, 0x1203EAF5, 0xFCF1E5F4);
	r3 = D(r3, s0_0_1, 0x19DFE91E, 0x0DF7DFFF, 0x0B04EAFB, 0xFCF4EB0B);
	r4 = D(r4, s0_0_1, 0x100E22E4, 0xF50A02E4, 0x08E921FC, 0x0F042BF0);
	r5 = D(r5, s0_0_1, 0xEFF102FF, 0xDCFFFE02, 0xFFFFF021, 0x15E9EFF3);
	r6 = D(r6, s0_0_1, 0x3EE501F2, 0xDCF6C304, 0xDD060308, 0xFAFA10F6);
	r7 = D(r7, s0_0_1, 0xDBD8F5ED, 0xDF0DF5E2, 0x020FFBF4, 0x080F100F);
	r0 = D(r0, s0_0_2, 0xF9FBF4EC, 0xEAF0150B, 0xF31006F2, 0x100A07F8);
	r1 = D(r1, s0_0_2, 0xF7ED010E, 0x09251109, 0xF71E23E3, 0x073DE410);
	r2 = D(r2, s0_0_2, 0x0A03EEF9, 0xF8F9FFF5, 0xEDFEF808, 0xFC07FDFD);
	r3 = D(r3, s0_0_2, 0x1602C11E, 0xF60808FC, 0x0904FCF3, 0x1B1BEDF4);
	r4 = D(r4, s0_0_2, 0xFCDE08E7, 0xF5FA091C, 0x02FE05F6, 0xF0EA1211);
	r5 = D(r5, s0_0_2, 0xF71915FF, 0x10EA18F0, 0x14E5DB25, 0xF20BFD15);
	r6 = D(r6, s0_0_2, 0xEE1BFC07, 0xFAFE0A05, 0x011014F9, 0x010BF6FD);
	r7 = D(r7, s0_0_2, 0x0B1113F0, 0x100A0708, 0x0FF6F6FC, 0xFF1002E2);
	r0 = D(r0, s0_1_0, 0xFCEEE2EF, 0x1BFDFFF9, 0x10ECCF0A, 0x3623150B);
	r1 = D(r1, s0_1_0, 0x050E0800, 0xFFF4050A, 0x2E1D1C2A, 0xF2FC0BF3);
	r2 = D(r2, s0_1_0, 0x0F282312, 0xE1E81605, 0x10FB0A00, 0x21111F13);
	r3 = D(r3, s0_1_0, 0x242B1511, 0x0B1E2D0B, 0xFC2C2913, 0xD30803FF);
	r4 = D(r4, s0_1_0, 0xE6E31A0A, 0x08DA15E9, 0x06FDF8EF, 0xD002EA02);
	r5 = D(r5, s0_1_0, 0x1403FD0E, 0xBE22FA06, 0xED02C2F0, 0xF7140F0D);
	r6 = D(r6, s0_1_0, 0x04EA13E0, 0xF52F22EC, 0xF8E80007, 0x02FF00EC);
	r7 = D(r7, s0_1_0, 0x1431191B, 0x18ED18FD, 0xF70C0100, 0xF81A1E1A);
	r0 = D(r0, s0_1_1, 0x1100FC20, 0xE20DF8EF, 0x100701F6, 0xFB09FDFC);
	r1 = D(r1, s0_1_1, 0x2FC9FDFE, 0xF3EEF302, 0x08021308, 0xECBFE20F);
	r2 = D(r2, s0_1_1, 0x0A041AFB, 0xFB0E1EF3, 0x1B0812F5, 0x23F10DFA);
	r3 = D(r3, s0_1_1, 0x212100E5, 0xFB04E002, 0xF9E6E2F5, 0x0109FA00);
	r4 = D(r4, s0_1_1, 0xF0F20F0B, 0x0BFCFF15, 0x0FF7110C, 0xAD01F000);
	r5 = D(r5, s0_1_1, 0xBFE9EFE3, 0xB2FDF40A, 0xEC03020C, 0xFB0EFDEA);
	r6 = D(r6, s0_1_1, 0x28D4F8E8, 0x17EEDDFF, 0x09DDFF06, 0xF5F30B0A);
	r7 = D(r7, s0_1_1, 0xDCF9F220, 0xEDEDFDFF, 0xF8030B0B, 0xF7CEF021);
	r0 = D(r0, s0_1_2, 0x06052113, 0x0EFA1F0C, 0xF5EB09EE, 0x1DF0F906);
	r1 = D(r1, s0_1_2, 0x0CFD0CFC, 0x0C191903, 0xFB162125, 0x030C05E3);
	r2 = D(r2, s0_1_2, 0xFC0AF60A, 0x07F5F507, 0x0304F80E, 0x09F1F40D);
	r3 = D(r3, s0_1_2, 0x0CEEE2FD, 0x07F900F8, 0xF9FFFEFE, 0x00F0EE09);
	r4 = D(r4, s0_1_2, 0xFDFB0719, 0x0A0F06F9, 0x02F50A09, 0xEC06FB0A);
	r5 = D(r5, s0_1_2, 0xF5F2DBF2, 0x1A090313, 0x09E3D5FA, 0x01FDE912);
	r6 = D(r6, s0_1_2, 0xEBE0FF09, 0x0D17F5FF, 0xF0FE10EF, 0xFCF80915);
	r7 = D(r7, s0_1_2, 0xFE29EAFA, 0xFA100406, 0x012BDBFB, 0xC3F6FDEE);
	r0 = D(r0, s0_2_0, 0xEF000A0E, 0x19010007, 0xFEE41118, 0x37F5EFFB);
	r1 = D(r1, s0_2_0, 0x07EE06EF, 0x23F3E5D1, 0xDAE5F6E8, 0x08F50D04);
	r2 = D(r2, s0_2_0, 0x0CE9E8F3, 0x0FFF05E6, 0x200201EF, 0x0104FEEF);
	r3 = D(r3, s0_2_0, 0x0B0E0221, 0x00F807EF, 0xF9F91F07, 0xECDB0CF5);
	r4 = D(r4, s0_2_0, 0xE228F005, 0x82FAF0D5, 0xD316E3E2, 0x0DEEF0E4);
	r5 = D(r5, s0_2_0, 0x06161404, 0xE2FBFDEE, 0xEF00E1F6, 0x06001DF4);
	r6 = D(r6, s0_2_0, 0xEF1C0308, 0xEE041110, 0x0DFFDFFE, 0xEF060401);
	r7 = D(r7, s0_2_0, 0xFEF61DF5, 0xFDE51E08, 0xFD041E03, 0x170311DE);
	r0 = D(r0, s0_2_1, 0xF9E809FB, 0x0506F3FD, 0xFB13F7FF, 0xD8F61123);
	r1 = D(r1, s0_2_1, 0x1405FF07, 0x0103F4F3, 0xF1F2EC03, 0x07CAE810);
	r2 = D(r2, s0_2_1, 0xFC0A1AF0, 0xF71E0DFA, 0x111D1811, 0x1815190C);
	r3 = D(r3, s0_2_1, 0x0B11F9DF, 0xFE0AF902, 0xF9FFE8F8, 0xF90F13F8);
	r4 = D(r4, s0_2_1, 0x070A0F23, 0x81FA81FE, 0xA815EE01, 0x0A19EEF3);
	r5 = D(r5, s0_2_1, 0xF5070912, 0xF7F5DDFF, 0x02F3E3E8, 0x16F8FC02);
	r6 = D(r6, s0_2_1, 0xFAF5FD01, 0x140E0A0C, 0x160DFAFB, 0x05F5F4FE);
	r7 = D(r7, s0_2_1, 0x06DFFCEF, 0xED0302FE, 0x13DD12FF, 0x1423D8EE);
	r0 = D(r0, s0_2_2, 0xF4FA07FE, 0xF9110C04, 0x020D05F8, 0x06E4010E);
	r1 = D(r1, s0_2_2, 0x0E0A1108, 0x0BF7ED10, 0xFD0203E2, 0x0C09F5F5);
	r2 = D(r2, s0_2_2, 0x0FFC0507, 0x02FBF00E, 0x03EF0C0E, 0x0EFCF901);
	r3 = D(r3, s0_2_2, 0xF4F7F304, 0xEE050F06, 0x0A00F9FA, 0x19030614);
	r4 = D(r4, s0_2_2, 0x04000307, 0xA727FC01, 0x07FAF5FE, 0xFC06F9FD);
	r5 = D(r5, s0_2_2, 0x02FEF7FC, 0x04FA04F2, 0xF70CDE05, 0xFAFB0009);
	r6 = D(r6, s0_2_2, 0xEFFA0A06, 0xF9ECFB00, 0xFD0BEE0B, 0xFDFFF9F7);
	r7 = D(r7, s0_2_2, 0xEAF1FC0D, 0x07FCF9F8, 0xF0EDF400, 0xE9000C00);
	r0 = D(r0, s1_0_0, 0x0202F31C, 0xEF183207, 0x05EE25ED, 0xE1FCE400);
	r1 = D(r1, s1_0_0, 0x1AE31F05, 0xFE14060B, 0x15E91211, 0xFBF7F319);
	r2 = D(r2, s1_0_0, 0x06F8D301, 0x11FD2307, 0xF8E50F0C, 0x16020305);
	r3 = D(r3, s1_0_0, 0x1DE54AF1, 0xFCEE1B00, 0xF10FF803, 0xF1F2D30F);
	r4 = D(r4, s1_0_0, 0x1AF1ACFF, 0x15EDF3E0, 0xF904C619, 0xF41AFCFE);
	r5 = D(r5, s1_0_0, 0x054F8113, 0xF0C42AEB, 0x09DFFAE1, 0xFB160F01);
	r6 = D(r6, s1_0_0, 0xE10CE10C, 0xF40DE4BB, 0xEF020AFC, 0xF9EFE905);
	r7 = D(r7, s1_0_0, 0x0AF3E333, 0x00141111, 0xFD162AFC, 0x0AE9FA2F);
	r0 = D(r0, s1_0_1, 0x4AF3E1FF, 0xEAFA1919, 0xFBEDFC02, 0x16E20514);
	r1 = D(r1, s1_0_1, 0xF10817FC, 0xF7ECD2F6, 0x0ECFFAFD, 0x012D24F0);
	r2 = D(r2, s1_0_1, 0xFCEEF809, 0x03F2FBF6, 0x09092FF2, 0xFDEDDB02);
	r3 = D(r3, s1_0_1, 0xE5310517, 0xEE03EE03, 0x01FB1405, 0xF6DA05FC);
	r4 = D(r4, s1_0_1, 0x081071ED, 0x0EFC0DE3, 0xEA0518F6, 0xEEE5FFE9);
	r5 = D(r5, s1_0_1, 0x138381E2, 0xE4270BFC, 0xC8ED3C16, 0xFDF5EAD7);
	r6 = D(r6, s1_0_1, 0xFFDF0CF7, 0xE91EED15, 0x082DE319, 0x06E9F103);
	r7 = D(r7, s1_0_1, 0xD8F42707, 0x08F00BF8, 0xF90AD6C6, 0xD3F71209);
	r0 = D(r0, s1_0_2, 0x090EFE28, 0xE827C629, 0x04002405, 0xC914E6FF);
	r1 = D(r1, s1_0_2, 0x12EEE0E8, 0x16F827E2, 0x01E3F7ED, 0x2F022DFA);
	r2 = D(r2, s1_0_2, 0x1FE90EFE, 0xF0FBF215, 0xFCF5EC15, 0xEE22F701);
	r3 = D(r3, s1_0_2, 0x0B04F6F4, 0x0D02050A, 0xF6020CF9, 0x0C2DF504);
	r4 = D(r4, s1_0_2, 0x1F25F803, 0xF50DEE14, 0xFF0B37F8, 0x19DA2302);
	r5 = D(r5, s1_0_2, 0xD0E728E4, 0x06E4E905, 0x0FEDE1EC, 0xFD09F000);
	r6 = D(r6, s1_0_2, 0xFAF9470F, 0xD90ED9F5, 0xEB14F306, 0x07F9F6FC);
	r7 = D(r7, s1_0_2, 0xCCB1DEF1, 0x05EF1AF5, 0x041021FD, 0x34050CFF);
	r0 = D(r0, s1_1_0, 0x20E721FB, 0x07983906, 0xEB0BE809, 0xDAE231EC);
	r1 = D(r1, s1_1_0, 0x16F500F4, 0xF7FBFA07, 0xF8EAD4D7, 0x0FEC06F0);
	r2 = D(r2, s1_1_0, 0xFAFCE70F, 0x24F22204, 0xFE0D1DF2, 0x010FE5E7);
	r3 = D(r3, s1_1_0, 0xFEFE9AC9, 0xFCECF7E3, 0xE807D507, 0x0E180FF4);
	r4 = D(r4, s1_1_0, 0x2F0878B8, 0x0603BAC9, 0x04071EE2, 0x101A16D7);
	r5 = D(r5, s1_1_0, 0xFFE3D4DA, 0xCEF50479, 0x13C9DDF2, 0xF7BC1AF4);
	r6 = D(r6, s1_1_0, 0x092A3EF1, 0xEB270DF4, 0xE1E5E325, 0x0C0814F6);
	r7 = D(r7, s1_1_0, 0xE2F9F8F3, 0xEF2A1738, 0xE5BF7FB9, 0x0C17EC12);
	r0 = D(r0, s1_1_1, 0xFFC46009, 0x30BF81C5, 0x0AD0020D, 0xFDD0D9FE);
	r1 = D(r1, s1_1_1, 0x19F581FA, 0x3CEB22E8, 0xF32175E6, 0x493EFC03);
	r2 = D(r2, s1_1_1, 0xFE112101, 0x2E270E17, 0x01EFFA02, 0xF2F71710);
	r3 = D(r3, s1_1_1, 0x35F0BB0D, 0x0221F31E, 0x26D1F301, 0x00FEF3CA);
	r4 = D(r4, s1_1_1, 0x3FFFB335, 0x951BEAE4, 0xF72581F2, 0xA5FCF2E9);
	r5 = D(r5, s1_1_1, 0xECB881E7, 0x2523F82E, 0xCB211AF6, 0x082E2A31);
	r6 = D(r6, s1_1_1, 0x01EB100C, 0x2E64480C, 0xFD19E610, 0xDC3310F5);
	r7 = D(r7, s1_1_1, 0x1B007102, 0x000CD8E6, 0x2B92B11D, 0xF300F5F4);
	r0 = D(r0, s1_1_2, 0x1CE41CEC, 0xFD1721E2, 0xDB151705, 0xE6EDAFF6);
	r1 = D(r1, s1_1_2, 0xDA0AD0ED, 0xE9AD2BE7, 0xB72BC8E2, 0xEAD2EEED);
	r2 = D(r2, s1_1_2, 0xE61C1118, 0x08CFFC18, 0xFB16EC01, 0x150B0EF2);
	r3 = D(r3, s1_1_2, 0xF32C73FD, 0x13DB09F6, 0xF009FF08, 0xF7CD35C9);
	r4 = D(r4, s1_1_2, 0x0EEF81E7, 0x36E570FC, 0x220A0008, 0xCCE02F11);
	r5 = D(r5, s1_1_2, 0xF804E802, 0xF31B06E6, 0x0A220CED, 0x000AE5FF);
	r6 = D(r6, s1_1_2, 0xFDEFF512, 0xE417D10B, 0xDBF6E403, 0xE0FDFE13);
	r7 = D(r7, s1_1_2, 0x03DD3CF4, 0x07F3EB12, 0xF4C7241F, 0xBEF4311F);
	r0 = D(r0, s1_2_0, 0x06E7F5D9, 0x051613D8, 0xFB07EAFD, 0x00E714F8);
	r1 = D(r1, s1_2_0, 0x10DC5FF9, 0x171D1AF1, 0x36CACAE3, 0x02F0DE0F);
	r2 = D(r2, s1_2_0, 0xF600040E, 0x060A21F8, 0x05FFFFF3, 0x08EEDAFB);
	r3 = D(r3, s1_2_0, 0x2BF36EDD, 0x0802F80C, 0xF70709FF, 0xD54F1C0C);
	r4 = D(r4, s1_2_0, 0x24EB20E8, 0xF93A325E, 0xEF0B7F82, 0xF9E319D6);
	r5 = D(r5, s1_2_0, 0x26061EF3, 0x0EFC191D, 0x02E601E2, 0x18E1F200);
	r6 = D(r6, s1_2_0, 0x23F7C1F3, 0x0EEAE3F3, 0xF7F008FE, 0x0919F61C);
	r7 = D(r7, s1_2_0, 0xFE2EEADB, 0x09F4FFFE, 0x06F0EF10, 0x081055FA);
	r0 = D(r0, s1_2_1, 0xF344C50E, 0x12149E18, 0xF4F91E04, 0xF8C51E15);
	r1 = D(r1, s1_2_1, 0xD4C4E723, 0xE804F41E, 0xCE3700ED, 0x15F5FF23);
	r2 = D(r2, s1_2_1, 0xE2081F1A, 0xE60C1622, 0xF3E600E8, 0xF028A012);
	r3 = D(r3, s1_2_1, 0x1FFD0300, 0xF11FFD11, 0xFF0F1FF9, 0xF9B732FE);
	r4 = D(r4, s1_2_1, 0x2E12FDDD, 0xF224273A, 0xBDB681C8, 0x14F0132B);
	r5 = D(r5, s1_2_1, 0x3CE48115, 0x1C32EE01, 0xE92E1321, 0xF11618F8);
	r6 = D(r6, s1_2_1, 0x010DF713, 0xFB1400E8, 0x241A31E3, 0x0EDEDCFC);
	r7 = D(r7, s1_2_1, 0x331DCC00, 0xFEE71800, 0xDD24B902, 0x19FCC71F);
	r0 = D(r0, s1_2_2, 0x121CE2FC, 0xF005F217, 0xF7F91701, 0xFD220A18);
	r1 = D(r1, s1_2_2, 0xB57FF80B, 0xEDD619FF, 0x2AF8071D, 0x04E901FF);
	r2 = D(r2, s1_2_2, 0x04F5EEF4, 0x0911F408, 0xEE00F123, 0x14F73DFE);
	r3 = D(r3, s1_2_2, 0x0202CB06, 0x0EF60CFB, 0xFE05FC0A, 0x1F07EE00);
	r4 = D(r4, s1_2_2, 0x42DD7FCF, 0x0117BC19, 0xF0ED95DB, 0x010EFB20);
	r5 = D(r5, s1_2_2, 0x17E75C00, 0x28E402EF, 0x1109F2EF, 0xFFE0010C);
	r6 = D(r6, s1_2_2, 0x1DF91DEF, 0xFF14E303, 0x0DD504FA, 0x060B1C05);
	r7 = D(r7, s1_2_2, 0x241AE0FB, 0xE00A0A09, 0x19EE52F8, 0xEC0FE103);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(4.684e-02, -1.910e-02, 1.323e-02, 1.811e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.525e-03, 3.406e-02, -2.188e-01, -2.252e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.115e-02, 1.798e-02, 2.455e-03, -1.131e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.095e-02, 7.901e-03, 1.953e-02, -3.571e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-3.271e-01, 1.276e-02, 2.140e-02, 4.529e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.491e-02, 8.232e-03, 3.509e-02, 4.902e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.894e-02, 3.261e-02, -2.585e-03, 1.350e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.151e-02, 2.555e-02, -1.020e-02, 1.581e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0C18E812, 0x040AF802, 0xF6FF191F, 0x0703EA0E);
	r1 = D(r1, s0_0_0, 0x11FEF2F9, 0xFF030B0B, 0x01FFFF03, 0x1FFCEE14);
	r2 = D(r2, s0_0_0, 0x06EDDBFE, 0xFAF902F2, 0xF004EEFB, 0xFBFEF2F7);
	r3 = D(r3, s0_0_0, 0xF40E150E, 0xF5EDFD0D, 0x0B07F40E, 0xFC0D05FC);
	r4 = D(r4, s0_0_0, 0x03FE0A03, 0x03FEF6D3, 0xFCF61C10, 0x07FF05FD);
	r5 = D(r5, s0_0_0, 0xFF00ECF7, 0xFB070D03, 0x02FAFD00, 0xF5FF0A13);
	r6 = D(r6, s0_0_0, 0xFD110C03, 0x0A260BF8, 0x0305FCF8, 0x05F20514);
	r7 = D(r7, s0_0_0, 0xF00DF3F8, 0x0F0708E1, 0xF809DCF7, 0x040919F3);
	r0 = D(r0, s0_0_1, 0x0A0AFEE5, 0xF7030AF6, 0xFCF8FBF4, 0x0006220E);
	r1 = D(r1, s0_0_1, 0xE8EE0207, 0xFC060109, 0x0413F4FA, 0xFC0AEAFA);
	r2 = D(r2, s0_0_1, 0x1008000F, 0xE0F30009, 0xEDFD080F, 0x03FF0DF1);
	r3 = D(r3, s0_0_1, 0xF7F0FC0C, 0x2A05DD01, 0x1202F80D, 0x03FC1901);
	r4 = D(r4, s0_0_1, 0x04FFFBFE, 0x071504FC, 0x28FCE6EF, 0x0303FA07);
	r5 = D(r5, s0_0_1, 0x24080101, 0x0F02F7E0, 0x0D0101F8, 0x05030FEE);
	r6 = D(r6, s0_0_1, 0xF609EE00, 0xEB24E8E8, 0x0503EF04, 0x03F3EDE8);
	r7 = D(r7, s0_0_1, 0xF601F408, 0x26FF0C13, 0x1404FC01, 0x0A01EA18);
	r0 = D(r0, s0_0_2, 0xF714EAF4, 0x08FCFFFA, 0x0804EAD4, 0x02F714F4);
	r1 = D(r1, s0_0_2, 0x0E03F5F2, 0xFE01FD08, 0xE708FA0D, 0x070FE505);
	r2 = D(r2, s0_0_2, 0x110311FE, 0xF51BFFFC, 0x02FFECEF, 0x0CFEF409);
	r3 = D(r3, s0_0_2, 0xFB0D00EC, 0xDFF4173F, 0x0AEC1BCF, 0x08F80800);
	r4 = D(r4, s0_0_2, 0x08FEFC10, 0xE2FA0701, 0xE8041616, 0xF40308FE);
	r5 = D(r5, s0_0_2, 0xF71512E8, 0xFF09F505, 0xF704EB11, 0xFD0804FF);
	r6 = D(r6, s0_0_2, 0xFA0806F6, 0x28F71523, 0x0910F008, 0x08FD23D8);
	r7 = D(r7, s0_0_2, 0x0EF600FF, 0xF4070729, 0x030A10EF, 0xF8031200);
	r0 = D(r0, s0_1_0, 0xF702E32F, 0x0416FDFE, 0xFB0CFFE5, 0x0005D9F2);
	r1 = D(r1, s0_1_0, 0xDFEE0004, 0xFCFA0D0B, 0xF9F8F4F8, 0xFC0D1305);
	r2 = D(r2, s0_1_0, 0xECFFFCF5, 0x3309F415, 0x1118F1F8, 0x102009F5);
	r3 = D(r3, s0_1_0, 0xE8F40FF9, 0x0EF82308, 0x04ED1101, 0x01FF0708);
	r4 = D(r4, s0_1_0, 0x04020AF8, 0x1DFA13FE, 0x0EFE0DF6, 0x00FA0FF5);
	r5 = D(r5, s0_1_0, 0xF8FB00F4, 0x01100D05, 0x00F7E2FA, 0x140AF90F);
	r6 = D(r6, s0_1_0, 0x0707F8FF, 0x0707D4FE, 0xFDFDDEFF, 0x1EFDCDFE);
	r7 = D(r7, s0_1_0, 0xE70215DE, 0x020BEAFD, 0x14FBDDFF, 0xEE0FF700);
	r0 = D(r0, s0_1_1, 0xE711FAEE, 0xEFEDFE1E, 0x0611DF27, 0xFA330106);
	r1 = D(r1, s0_1_1, 0xE70FFF02, 0xEF07F808, 0x1507F3F5, 0xFB041CF9);
	r2 = D(r2, s0_1_1, 0x05D1F104, 0x0CECECFE, 0xF202F4FA, 0xFBDC0A13);
	r3 = D(r3, s0_1_1, 0x0703D8FC, 0xF41DF7EF, 0xE6EC0609, 0xE629F9FF);
	r4 = D(r4, s0_1_1, 0xF70EF719, 0x09EBDA13, 0xF1F903FC, 0x07FAF915);
	r5 = D(r5, s0_1_1, 0x010E2600, 0x18131602, 0x00F020F4, 0xE70CF6EF);
	r6 = D(r6, s0_1_1, 0x09FBE018, 0xF0EFF8F4, 0xF900151C, 0x0DF5F620);
	r7 = D(r7, s0_1_1, 0x06F50B00, 0xEA120A06, 0xF8F80410, 0x00F101EB);
	r0 = D(r0, s0_1_2, 0xF00D19EA, 0xE000E70A, 0x10EBE206, 0x01E51702);
	r1 = D(r1, s0_1_2, 0x1FFF04FF, 0xFCFFFC01, 0x10FC13F4, 0xE4EB1501);
	r2 = D(r2, s0_1_2, 0x0EFC0616, 0x09FE0607, 0x0F0101FA, 0x030C0016);
	r3 = D(r3, s0_1_2, 0x02E5FA11, 0xE41301FA, 0xFFFAEB01, 0xFFFD1307);
	r4 = D(r4, s0_1_2, 0xF90A03FD, 0xEC1EE7F9, 0x0425E5F1, 0xFD00F6FB);
	r5 = D(r5, s0_1_2, 0xE7FAE807, 0xFFF3DF0F, 0x0305FD13, 0xEAF1FCFA);
	r6 = D(r6, s0_1_2, 0xF5F11D04, 0xCFEDEAC8, 0xE01412FB, 0xD41900FA);
	r7 = D(r7, s0_1_2, 0xFD040DFF, 0x0424FF08, 0xE3142FE8, 0xEAEE250B);
	r0 = D(r0, s0_2_0, 0x21F5F21C, 0x01FE1300, 0x09F813E9, 0xFC13041A);
	r1 = D(r1, s0_2_0, 0xED0BFBFE, 0xFFFB05FB, 0xDBE70924, 0xED05EE12);
	r2 = D(r2, s0_2_0, 0xE80219E4, 0xF5F80F03, 0x0C040402, 0xF1FAF3F9);
	r3 = D(r3, s0_2_0, 0x12100501, 0x0D1DF6DF, 0x05F91506, 0x07150B01);
	r4 = D(r4, s0_2_0, 0xF5FC03F9, 0xF405F2EF, 0xF6F6EC06, 0xF904FAFA);
	r5 = D(r5, s0_2_0, 0x0B18020D, 0xF9F5FCF9, 0x13121313, 0x0718F4E4);
	r6 = D(r6, s0_2_0, 0x14030AF6, 0xF9FF260B, 0x16FDE6FB, 0xFE09170A);
	r7 = D(r7, s0_2_0, 0xDD0ADCFE, 0x02F61001, 0xFA10E4EE, 0x03FFF807);
	r0 = D(r0, s0_2_1, 0x13C41812, 0x15F2FA0D, 0xF610F512, 0x00060713);
	r1 = D(r1, s0_2_1, 0x0800F5F3, 0x051DFD03, 0xFB080112, 0xE62CC613);
	r2 = D(r2, s0_2_1, 0x0C13C8F7, 0x00F5040A, 0x1AF80A1E, 0x0C10FC06);
	r3 = D(r3, s0_2_1, 0x05E6F8FA, 0xF8F1DB09, 0xFB030904, 0x01FD0CFA);
	r4 = D(r4, s0_2_1, 0x00F0F2F1, 0x1F211AFB, 0x1115E505, 0x05F8FBF5);
	r5 = D(r5, s0_2_1, 0xF608F20A, 0x19061B06, 0xE726F306, 0x0DFC02FF);
	r6 = D(r6, s0_2_1, 0x2A1BFD1D, 0x1D06F6E5, 0x030E240B, 0x0C07280F);
	r7 = D(r7, s0_2_1, 0xFA07F2DE, 0x21F901ED, 0x1BEDF8FD, 0x241FF303);
	r0 = D(r0, s0_2_2, 0x05FF030E, 0x110606F6, 0x0CFF021B, 0x1109FD00);
	r1 = D(r1, s0_2_2, 0x0BF6F202, 0xFDF000FC, 0x00F50AF4, 0xFEFC14EF);
	r2 = D(r2, s0_2_2, 0xF4EAEFFF, 0x0E05EDEF, 0xF71E0CE4, 0x0DF9130C);
	r3 = D(r3, s0_2_2, 0x001214FE, 0xDBA7F3D7, 0x0BFA07FA, 0x030110FE);
	r4 = D(r4, s0_2_2, 0x09DDFA09, 0xF6FDF215, 0x0CF5DAF7, 0x05FB04FB);
	r5 = D(r5, s0_2_2, 0x28D30AF4, 0xFFD80D07, 0x07EA1801, 0x1FECE0CE);
	r6 = D(r6, s0_2_2, 0x0E0CF7EC, 0x1BE70C21, 0xF9F90704, 0xFCF61019);
	r7 = D(r7, s0_2_2, 0xF6051F13, 0x02FCDAFD, 0x04FE080D, 0xFE001FF7);
	r0 = D(r0, s1_0_0, 0xF62E1B09, 0x07EFFD0A, 0x34EE0910, 0x02FC1918);
	r1 = D(r1, s1_0_0, 0x03EFE301, 0xFEFCFE0A, 0xFD17F01F, 0xF31913F5);
	r2 = D(r2, s1_0_0, 0x081A0EE1, 0x1A0010FA, 0xFE1B13E7, 0xFB1BFE10);
	r3 = D(r3, s1_0_0, 0xFED40404, 0x0D2D05EF, 0x01F209FE, 0xF912F404);
	r4 = D(r4, s1_0_0, 0xFEF9FC0C, 0x03ED25E9, 0x00CEE714, 0x03FEFB07);
	r5 = D(r5, s1_0_0, 0x07E8F7FB, 0x0CFD01CB, 0x0A0712F5, 0x220705FF);
	r6 = D(r6, s1_0_0, 0xF807FFF9, 0x11CD1722, 0xFE15FA0E, 0x0EDA29D4);
	r7 = D(r7, s1_0_0, 0x072917F0, 0xEE07F11A, 0x06252701, 0xEA03F41E);
	r0 = D(r0, s1_0_1, 0xF9DADD0E, 0xF512F906, 0xD4E5D3F4, 0xDA0EFE1D);
	r1 = D(r1, s1_0_1, 0xEF0CE0EC, 0x0EF5FCFF, 0x07070A05, 0x0707F107);
	r2 = D(r2, s1_0_1, 0x1201E8FC, 0x2AFEFAFC, 0xF503F40C, 0xF4FB0218);
	r3 = D(r3, s1_0_1, 0xE6DEEC15, 0x150202A5, 0x1010E11F, 0xFA0809FF);
	r4 = D(r4, s1_0_1, 0x120001F9, 0x40FF1EF2, 0x1B08FFFD, 0x05F001FA);
	r5 = D(r5, s1_0_1, 0x310C1512, 0x041718DE, 0xEF2C0608, 0xFF351BF1);
	r6 = D(r6, s1_0_1, 0xEEDCECD9, 0xF6F4FD03, 0x0FE50406, 0xFE0D0713);
	r7 = D(r7, s1_0_1, 0x0C39FAF7, 0x2E050AFC, 0x0CF3F714, 0xD2E8F902);
	r0 = D(r0, s1_0_2, 0x240621EB, 0x14EB0A09, 0xE6F60700, 0x0C05FEFE);
	r1 = D(r1, s1_0_2, 0xEF0401FD, 0x0200F808, 0x01ECEEFB, 0xF61D0005);
	r2 = D(r2, s1_0_2, 0x0A08F5F8, 0x100A0209, 0xE3FE09F3, 0xEF02FF03);
	r3 = D(r3, s1_0_2, 0x020B00F2, 0x4B48E695, 0x1208042C, 0xFE0CFF01);
	r4 = D(r4, s1_0_2, 0x06F7F302, 0x2913FFF0, 0xF9FBE313, 0xF707FA00);
	r5 = D(r5, s1_0_2, 0x0FF7FD06, 0x18F705EB, 0x23DB0001, 0xF3F31E0A);
	r6 = D(r6, s1_0_2, 0x0306FFF4, 0x23D2FB01, 0xF6F4FC04, 0x23030501);
	r7 = D(r7, s1_0_2, 0x05F8FFF4, 0x1C16FD11, 0x171603F6, 0x17F4FE06);
	r0 = D(r0, s1_1_0, 0xFF09F4EB, 0xEEFC0211, 0x15F1140E, 0x0BC5F712);
	r1 = D(r1, s1_1_0, 0xFFF60609, 0x0106020A, 0x0DE00637, 0x281911F5);
	r2 = D(r2, s1_1_0, 0x06DF0DFB, 0x1F24CD26, 0xF321FBFF, 0xFDFA0224);
	r3 = D(r3, s1_1_0, 0x11F4E6F9, 0x30421301, 0xF40306ED, 0xED0E1215);
	r4 = D(r4, s1_1_0, 0x0508F6FD, 0xD511F2E1, 0x2A00FCFC, 0x0205FBFF);
	r5 = D(r5, s1_1_0, 0xFDF902F4, 0x0EF724DC, 0x0B27EEFA, 0xE1F721E6);
	r6 = D(r6, s1_1_0, 0x0D2CE8C5, 0xF504D6BA, 0xFF07F2E7, 0x01CCFAFC);
	r7 = D(r7, s1_1_0, 0xFAEF16E3, 0x42E3F400, 0x32F5DE11, 0xEDFB091C);
	r0 = D(r0, s1_1_1, 0x01CC2300, 0xF30B2617, 0x6AE91DFF, 0x2DF8EFF1);
	r1 = D(r1, s1_1_1, 0xFCF0FCE9, 0x1101070B, 0x2E030006, 0x0202F203);
	r2 = D(r2, s1_1_1, 0x13CF11F0, 0xFD03350F, 0xEB0CF4F3, 0xDEFC21F3);
	r3 = D(r3, s1_1_1, 0xED13DCF3, 0x41141281, 0xE107E812, 0x1403F806);
	r4 = D(r4, s1_1_1, 0x1EFE0402, 0xC509EEC3, 0xF4140EF8, 0x01EAFE01);
	r5 = D(r5, s1_1_1, 0xB5F21CE6, 0x050EE8EF, 0xE41700CF, 0x15160CE6);
	r6 = D(r6, s1_1_1, 0xFC0109CD, 0xF3E6242C, 0xD6053AF1, 0x25CF0117);
	r7 = D(r7, s1_1_1, 0xF216E912, 0xE2E31615, 0x0E32120A, 0x011FF9FA);
	r0 = D(r0, s1_1_2, 0xF3001604, 0xE40119FE, 0x1A180F0A, 0x08D616F5);
	r1 = D(r1, s1_1_2, 0xFF0BF81D, 0x05F90209, 0xED080E15, 0x07F9F704);
	r2 = D(r2, s1_1_2, 0xECE210F7, 0xEC091511, 0x01F0F505, 0xFFF6FC05);
	r3 = D(r3, s1_1_2, 0xE00F0AFD, 0xE9A1CBEA, 0x20141011, 0x0002FE09);
	r4 = D(r4, s1_1_2, 0x0409FD0A, 0xF4E0D1E4, 0xD3EA01FF, 0x05FDFD06);
	r5 = D(r5, s1_1_2, 0x1EECF6F7, 0x0400F9E3, 0xEDDE00ED, 0xC0F30AFE);
	r6 = D(r6, s1_1_2, 0x0902F4E2, 0xF2E2C8DF, 0xE2FB01E3, 0xECFCFD16);
	r7 = D(r7, s1_1_2, 0x14FAF507, 0x1F03F6F4, 0x1D2DEDFA, 0xFAFE011B);
	r0 = D(r0, s1_2_0, 0x81CEFCAA, 0xF90304FB, 0xE514051F, 0x0403EF0C);
	r1 = D(r1, s1_2_0, 0x0304F204, 0x0200FD05, 0xF60D0A0F, 0xF7291CE7);
	r2 = D(r2, s1_2_0, 0x06F31EF4, 0x02FB12FB, 0xF81105FD, 0xF3F5FDFD);
	r3 = D(r3, s1_2_0, 0xE603F926, 0xFA1FE4EA, 0x0300FE00, 0xF60BF00D);
	r4 = D(r4, s1_2_0, 0x02F80102, 0x1F0CFBF0, 0xFDF9FCF8, 0xFCF002FF);
	r5 = D(r5, s1_2_0, 0xEEF119F8, 0x14E80BCB, 0xF22104DF, 0x1EA8F5EE);
	r6 = D(r6, s1_2_0, 0xF900F9E1, 0x08C0F9EB, 0xE6EFFE0C, 0xED11F115);
	r7 = D(r7, s1_2_0, 0x18011CE1, 0xEAF1EA06, 0xF809F41D, 0x1924EDFD);
	r0 = D(r0, s1_2_1, 0xF9E8039B, 0xE9FCEB32, 0xFA1326E3, 0x1E060E04);
	r1 = D(r1, s1_2_1, 0xEDFC0100, 0xFC0307FA, 0xECF9F917, 0xE80514EC);
	r2 = D(r2, s1_2_1, 0xFBECE1F8, 0x1AEDFC0A, 0xE431F8FC, 0x0902FB18);
	r3 = D(r3, s1_2_1, 0x0A04071B, 0xC3AB1881, 0xF5FF04FE, 0xFC070005);
	r4 = D(r4, s1_2_1, 0x1104F900, 0x3B180ABC, 0x0BF0092D, 0xFE08EB02);
	r5 = D(r5, s1_2_1, 0x14ECFE07, 0x3A08EBEA, 0x061504EC, 0x05F6F913);
	r6 = D(r6, s1_2_1, 0xFDE6F7EF, 0xC21AFBCF, 0xF0FD0408, 0xAB0DF303);
	r7 = D(r7, s1_2_1, 0xF3F8F5FA, 0xCFD5EC00, 0x0D020AF3, 0x20100B03);
	r0 = D(r0, s1_2_2, 0xD007F60C, 0xF2F70705, 0x1201EC04, 0xF801F827);
	r1 = D(r1, s1_2_2, 0xE3E81206, 0xF20AF603, 0x07F4F113, 0xDA00E900);
	r2 = D(r2, s1_2_2, 0x33EBF9E3, 0x1A0BF8F5, 0xEB0112EA, 0x0806FD0A);
	r3 = D(r3, s1_2_2, 0xE4FEFFF4, 0x8181FC81, 0xFDF60A1B, 0xFC050104);
	r4 = D(r4, s1_2_2, 0xFA02FFFF, 0x04F722ED, 0x0000020A, 0xF8FF06FC);
	r5 = D(r5, s1_2_2, 0x0101E722, 0x170D03D0, 0x25F6E104, 0x1220F6F2);
	r6 = D(r6, s1_2_2, 0xDA0D17E7, 0x5FF71E04, 0x1300D316, 0xE8290A16);
	r7 = D(r7, s1_2_2, 0x1AFFFDF7, 0x17FA3303, 0xE3100DF4, 0xF504E811);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCF6F20B, 0xF20403F6, 0xE4F40EFE, 0xECE8100D);
	r1 = D(r1, s0_0_0, 0x0E010C0F, 0x0602FCFD, 0xD9061302, 0xEC071101);
	r2 = D(r2, s0_0_0, 0xF409F701, 0x09F2FF13, 0x07FC1304, 0xE4050908);
	r3 = D(r3, s0_0_0, 0xF11709FF, 0xEEFAEF03, 0x1301ECDB, 0x0B05EEF4);
	r4 = D(r4, s0_0_0, 0xFBFAFCFA, 0x07070A18, 0xFC0EF212, 0xFBFE0601);
	r5 = D(r5, s0_0_0, 0x0A10170C, 0x0307FE03, 0x1AE116F7, 0x0AF10E03);
	r6 = D(r6, s0_0_0, 0xF8FC14EF, 0xF9FE26FA, 0xF5F60B05, 0xF50D0F19);
	r7 = D(r7, s0_0_0, 0xF60806F9, 0xFA0603F5, 0xEF090009, 0xCA2008EE);
	r0 = D(r0, s0_0_1, 0x12FB0016, 0xF915FCF4, 0x850EF632, 0xB6110C00);
	r1 = D(r1, s0_0_1, 0x050AE203, 0x070FFD02, 0xEE301105, 0x0415E40B);
	r2 = D(r2, s0_0_1, 0x003AF816, 0xFEEE0B1C, 0xEEFE0F0B, 0xF7080404);
	r3 = D(r3, s0_0_1, 0xF5F90412, 0x00312B2B, 0x0BE6191A, 0xF6FF00FB);
	r4 = D(r4, s0_0_1, 0x060D07FF, 0x2FC1F607, 0x1F041A23, 0x09020402);
	r5 = D(r5, s0_0_1, 0xC1B0FEB8, 0xE630FAF6, 0x080522E9, 0x19DFFED6);
	r6 = D(r6, s0_0_1, 0xBE13E90B, 0x1805E300, 0xDF1901E7, 0xDC0BDDFC);
	r7 = D(r7, s0_0_1, 0x35EFF4E5, 0x19E6EFD9, 0xF317EE05, 0xEC09EEF4);
	r0 = D(r0, s0_0_2, 0x03EF030C, 0xFAFCD81B, 0xFCFBD905, 0xFD19F112);
	r1 = D(r1, s0_0_2, 0x001205FE, 0xFE00FC04, 0xF019F2ED, 0x0DFC08F6);
	r2 = D(r2, s0_0_2, 0x040EE600, 0x16EB09F7, 0xFA15E6F6, 0xFE0AFFFE);
	r3 = D(r3, s0_0_2, 0x110804FE, 0xCADBF623, 0x0C01001B, 0x0402FC09);
	r4 = D(r4, s0_0_2, 0x0702F409, 0xD422170D, 0xC9020EFE, 0x00ED0FFB);
	r5 = D(r5, s0_0_2, 0xE19C1912, 0xFFF8ED0D, 0x13EA07FF, 0x07111CF0);
	r6 = D(r6, s0_0_2, 0xFC040109, 0x2AF41501, 0x0515FE00, 0x100A181F);
	r7 = D(r7, s0_0_2, 0xFB030007, 0x1FE0F8F8, 0x10F910E1, 0x1EEBF505);
	r0 = D(r0, s0_1_0, 0x15EFFC0D, 0x12F5F60D, 0x08F71709, 0x00E60EF6);
	r1 = D(r1, s0_1_0, 0x09F8F810, 0x090405F3, 0xE9020A0D, 0x09EF09D1);
	r2 = D(r2, s0_1_0, 0xFBE906F3, 0x05E30CED, 0xF9EF040C, 0xF5EA200B);
	r3 = D(r3, s0_1_0, 0x010B0AFB, 0xDAFC35DD, 0x1E05FEE7, 0x07FFF9FF);
	r4 = D(r4, s0_1_0, 0x0901FBF3, 0xF1F81FF5, 0xE42DFBF1, 0xF8030308);
	r5 = D(r5, s0_1_0, 0xF806040F, 0x12FA060A, 0x00F9F5D7, 0xEDF9F1F5);
	r6 = D(r6, s0_1_0, 0x10F40A00, 0xFDEA0517, 0x0AFA13E0, 0xD0EEDD12);
	r7 = D(r7, s0_1_0, 0xF9F10310, 0x0B08190F, 0x10F3F61C, 0xF6001520);
	r0 = D(r0, s0_1_1, 0x913C0CC2, 0xDF070FDD, 0xDAF205F6, 0x9AF22AD1);
	r1 = D(r1, s0_1_1, 0x21F90D07, 0x32241116, 0xDB091216, 0x24D0FFF8);
	r2 = D(r2, s0_1_1, 0x0C08FD08, 0x08F4E51B, 0xC4B200EF, 0x15FDF608);
	r3 = D(r3, s0_1_1, 0xFE070402, 0x01EADB2C, 0xF4F5F60C, 0xF2FF11F5);
	r4 = D(r4, s0_1_1, 0x1BFFF8DB, 0x17FFFDD4, 0xF4F7FE16, 0x1BFBE6FE);
	r5 = D(r5, s0_1_1, 0xF7FFD419, 0xEA140C02, 0x1F140503, 0x260C0832);
	r6 = D(r6, s0_1_1, 0xE8220CDC, 0xD6C6FCF1, 0x1103D4E5, 0x85C6E097);
	r7 = D(r7, s0_1_1, 0x07FF0611, 0x0203F8EF, 0x00F82608, 0x02D70E14);
	r0 = D(r0, s0_1_2, 0xDBDF38E4, 0xEB210FDE, 0x1010D508, 0xF709F704);
	r1 = D(r1, s0_1_2, 0xE906FDFD, 0x0902F208, 0xCE18110B, 0x0B050BEE);
	r2 = D(r2, s0_1_2, 0xF8020309, 0xF4100708, 0xF2D2FF18, 0x0DF6F4F2);
	r3 = D(r3, s0_1_2, 0xEEEDFF0B, 0x9B81E3C5, 0x020CF505, 0xFF01F804);
	r4 = D(r4, s0_1_2, 0x14F2F700, 0xFBDCF1EF, 0xE3F4F50F, 0x01F40911);
	r5 = D(r5, s0_1_2, 0xEC0FFC12, 0x08D6FA0E, 0x0BF30B00, 0x02001024);
	r6 = D(r6, s0_1_2, 0x09FF1003, 0x12EE19FE, 0xD92F14DF, 0x0FD919CC);
	r7 = D(r7, s0_1_2, 0x0C08E801, 0x0513F9EA, 0xEEF42405, 0x0AF4FDED);
	r0 = D(r0, s0_2_0, 0xF100E31E, 0x0B05F603, 0xFC0225FC, 0x0B021DF4);
	r1 = D(r1, s0_2_0, 0x08FE0FF3, 0x040300FA, 0x0FEA120A, 0xF3FD0728);
	r2 = D(r2, s0_2_0, 0x09F21506, 0xFB06E606, 0xECF509FE, 0x08FF0EF5);
	r3 = D(r3, s0_2_0, 0xE003EF0C, 0x0C1003FB, 0x0BFDF8FD, 0x04F90102);
	r4 = D(r4, s0_2_0, 0xFEFE06FC, 0xE517DF0F, 0x09FF0D01, 0x000206F9);
	r5 = D(r5, s0_2_0, 0xFFFA05F7, 0x07FF1EFA, 0xFA02F407, 0xFEFDFFF1);
	r6 = D(r6, s0_2_0, 0xF319FFF4, 0x19FFFCF3, 0x09F500ED, 0x08FDED23);
	r7 = D(r7, s0_2_0, 0xF80B01FB, 0x0500FB0A, 0x0E01F1EF, 0x08020DE6);
	r0 = D(r0, s0_2_1, 0xC923FD0D, 0xF9EF0B01, 0x0AF5E6E3, 0xFC10EB02);
	r1 = D(r1, s0_2_1, 0x060EF6FE, 0x0403F5F8, 0xF508F707, 0x17EFEB00);
	r2 = D(r2, s0_2_1, 0x09001406, 0x00FD16ED, 0xEE0103FC, 0xF70DEFFE);
	r3 = D(r3, s0_2_1, 0x1007FC13, 0x28FBD100, 0xFB10E913, 0xFD0BFAFE);
	r4 = D(r4, s0_2_1, 0x090FFAF6, 0x030DFA02, 0x04EC05FE, 0x070503F6);
	r5 = D(r5, s0_2_1, 0x1AFD0E03, 0xFFF5F501, 0xFB0C2302, 0x03F31810);
	r6 = D(r6, s0_2_1, 0xF90AFB1C, 0xF7F7E8F7, 0x0600190D, 0xD5020909);
	r7 = D(r7, s0_2_1, 0x030C0504, 0xF9FCE703, 0xEB1AF5FF, 0xE70A07F8);
	r0 = D(r0, s0_2_2, 0x07151610, 0xF90801FB, 0xED2603EF, 0xFCF709F8);
	r1 = D(r1, s0_2_2, 0x09060AE6, 0x06FEFE03, 0xF10D01FA, 0x09F3FF07);
	r2 = D(r2, s0_2_2, 0x0609020F, 0xFC10F509, 0xFDF910E9, 0x0EFA04FA);
	r3 = D(r3, s0_2_2, 0xEF0F02F1, 0x13E81DCF, 0xF1FF00F6, 0x0A000103);
	r4 = D(r4, s0_2_2, 0x07FD030B, 0x38B71802, 0xE40E10FF, 0xFB04F6FE);
	r5 = D(r5, s0_2_2, 0x01E60B04, 0x11EA070C, 0x16DCF909, 0x110DCE0A);
	r6 = D(r6, s0_2_2, 0x1409FAF7, 0xB302F817, 0xF30E0304, 0xEF091DF2);
	r7 = D(r7, s0_2_2, 0x08F8F90B, 0xF5052009, 0x0005F6E3, 0x0E070503);
	r0 = D(r0, s1_0_0, 0xD7FE1712, 0xFA03000A, 0xF1FFEE03, 0xCEF7F8FD);
	r1 = D(r1, s1_0_0, 0x0306F7EE, 0x0402FC14, 0xE1FD050E, 0xF9F5FFF6);
	r2 = D(r2, s1_0_0, 0xEAFAEA0E, 0xFCFA0014, 0xEC0AF4FE, 0x0C07FFF6);
	r3 = D(r3, s1_0_0, 0x16FD1306, 0xE8E4FC0A, 0x00EA11F9, 0x0107F9FF);
	r4 = D(r4, s1_0_0, 0xFF06FB13, 0x16F4FFF5, 0xE2F60415, 0x0104FC0A);
	r5 = D(r5, s1_0_0, 0xFD06FDFD, 0x03F50126, 0xF8F80B11, 0xDDFBF612);
	r6 = D(r6, s1_0_0, 0xEE04F32D, 0xEDF5210F, 0x0BFDFAF7, 0xDFFDF320);
	r7 = D(r7, s1_0_0, 0x0221F309, 0x19EF15FE, 0xE9E90B09, 0xE2050016);
	r0 = D(r0, s1_0_1, 0xEDE1070F, 0x020400FF, 0xEA0B03F9, 0xEA0BFB0C);
	r1 = D(r1, s1_0_1, 0x0201F811, 0xF9F906F0, 0x0D0CFEEB, 0x091FF5FF);
	r2 = D(r2, s1_0_1, 0xE1DF0DFB, 0x0DEC1BFD, 0xE7FE1109, 0xFD0100E0);
	r3 = D(r3, s1_0_1, 0x05F110FC, 0x39020AE5, 0x0ED6011C, 0xF001F3F9);
	r4 = D(r4, s1_0_1, 0xF9FC00F4, 0xE7080EFE, 0xE1FC2203, 0x0BF909F5);
	r5 = D(r5, s1_0_1, 0xDE0D23D5, 0x05F1FFFF, 0xFA06FBF7, 0xEEF6FBFB);
	r6 = D(r6, s1_0_1, 0xE91A0809, 0xE3181522, 0xFBF7FCFE, 0xE9F6F123);
	r7 = D(r7, s1_0_1, 0x1AFD0FFD, 0x0FFB0605, 0x06E9181B, 0x09E90200);
	r0 = D(r0, s1_0_2, 0x0708070A, 0xF3F70206, 0x03EF0D10, 0x07DC16E9);
	r1 = D(r1, s1_0_2, 0x06FB0207, 0x0605F900, 0xF604FE03, 0x19F101F4);
	r2 = D(r2, s1_0_2, 0x07020119, 0xFE05000E, 0xFFFB0003, 0x0303F305);
	r3 = D(r3, s1_0_2, 0xFEFDE709, 0x2910F80C, 0xF905ED03, 0xFFFEFCFF);
	r4 = D(r4, s1_0_2, 0x06FEFDFA, 0xEFF3F2F4, 0x0B0EF7FC, 0x091AFA08);
	r5 = D(r5, s1_0_2, 0x16E5E409, 0x0F00EDE3, 0x05E5FD09, 0xFCFEEB10);
	r6 = D(r6, s1_0_2, 0x1A0FF5F8, 0x1904EDF0, 0x03D20BFC, 0x00CF13F5);
	r7 = D(r7, s1_0_2, 0x18FE00E0, 0x0D0AF611, 0xE219F120, 0x00F5FF09);
	r0 = D(r0, s1_1_0, 0xFAF30731, 0xF9F6FAF8, 0xFAF51D01, 0x080505D5);
	r1 = D(r1, s1_1_0, 0xF40807F7, 0x05FE0E08, 0xEF00FF03, 0xF40202F5);
	r2 = D(r2, s1_1_0, 0xE8EBFC17, 0xF8F9FD0C, 0xDDFAEE13, 0x03F3F3FF);
	r3 = D(r3, s1_1_0, 0x2408040C, 0xFA20EEBE, 0x092601D4, 0xF5F50F08);
	r4 = D(r4, s1_1_0, 0x0BFC0302, 0xEB1DF2FE, 0xF81A0922, 0x0101FB07);
	r5 = D(r5, s1_1_0, 0xEF0A0909, 0xF6040FFA, 0x07F0F9E4, 0x041214F8);
	r6 = D(r6, s1_1_0, 0xF10704F8, 0xEA0F0CFE, 0x030E0018, 0xF906F3B2);
	r7 = D(r7, s1_1_0, 0xDAEDE81C, 0xE7FA0822, 0xEFFE01FD, 0x17FFFB14);
	r0 = D(r0, s1_1_1, 0x05DE0AD1, 0x09F00D26, 0x12F42B02, 0x07E9F2CD);
	r1 = D(r1, s1_1_1, 0x0CFBFD1C, 0x0C090009, 0x23150F25, 0xEFE2FE0E);
	r2 = D(r2, s1_1_1, 0xE517151A, 0xDE120908, 0xFA130514, 0x08300E13);
	r3 = D(r3, s1_1_1, 0x0AF7E709, 0x31010E25, 0x00F3E7F3, 0xF0FDEFFB);
	r4 = D(r4, s1_1_1, 0x0C0406F6, 0xF00C062A, 0x10E60E2D, 0x0AFEE61A);
	r5 = D(r5, s1_1_1, 0x13F30705, 0x04DE02E9, 0x000219F1, 0x12EC09D5);
	r6 = D(r6, s1_1_1, 0xF910FDFB, 0xF3E60281, 0xDD180AD6, 0xE60CFE27);
	r7 = D(r7, s1_1_1, 0xEA19082F, 0x01F910E2, 0xE4202040, 0xF6FD1EE4);
	r0 = D(r0, s1_1_2, 0x26EB14BF, 0x04FE01FA, 0x00F4F009, 0x18DBECFC);
	r1 = D(r1, s1_1_2, 0xEBFB0AFC, 0xFB170916, 0x07F9EBF9, 0x14100B24);
	r2 = D(r2, s1_1_2, 0x0005E616, 0x08FC0315, 0xFD1A0505, 0x06FEFF0D);
	r3 = D(r3, s1_1_2, 0x02070B07, 0x149F1536, 0x05F82305, 0x0709020C);
	r4 = D(r4, s1_1_2, 0x09F5F40E, 0x1BE02BF0, 0xE2D71C05, 0xF53C220E);
	r5 = D(r5, s1_1_2, 0x0CF602D7, 0x1008FB11, 0x1BF40A01, 0x14FFE40E);
	r6 = D(r6, s1_1_2, 0x1DD810EC, 0x2CDB0049, 0x2981D401, 0x1AFF114C);
	r7 = D(r7, s1_1_2, 0xFF040F13, 0xED1BEB0B, 0x0F14FFFB, 0x1610F9E5);
	r0 = D(r0, s1_2_0, 0x1C0FD300, 0xFC08040D, 0x020A0419, 0xF518EE0B);
	r1 = D(r1, s1_2_0, 0xFE0005FC, 0x0503F4FE, 0x02FE0D14, 0xF10A032B);
	r2 = D(r2, s1_2_0, 0x1409F344, 0x160B0517, 0x050808FB, 0x0F0AEC01);
	r3 = D(r3, s1_2_0, 0x04EC1AE3, 0x22FE03B1, 0xFFF7FE1F, 0x050406FF);
	r4 = D(r4, s1_2_0, 0xF403FAF3, 0xFDF1E51F, 0x07FB0804, 0xFA020307);
	r5 = D(r5, s1_2_0, 0x1409EE11, 0x0C02E9DE, 0xF81CEFF8, 0x0505FDFC);
	r6 = D(r6, s1_2_0, 0x0C0EFADB, 0x08FFF95D, 0x00FA0DEF, 0x03031B1C);
	r7 = D(r7, s1_2_0, 0x0503F8EA, 0x0EF61AFC, 0x0201FEB4, 0x0D08F238);
	r0 = D(r0, s1_2_1, 0xF2C7024C, 0x15F021EC, 0x080FEC0E, 0x0705F1C8);
	r1 = D(r1, s1_2_1, 0x13040714, 0xFCFFEFF8, 0xF602F4E5, 0xF501D917);
	r2 = D(r2, s1_2_1, 0x18FBF70F, 0x02DAFEE3, 0x1603110E, 0x01F504E4);
	r3 = D(r3, s1_2_1, 0x05F80F07, 0xD7DD3368, 0x05FD03FE, 0x07FD0DED);
	r4 = D(r4, s1_2_1, 0xFF0726F4, 0xF1FE09A5, 0x23040FE6, 0xFF0521EF);
	r5 = D(r5, s1_2_1, 0x1A04E3F6, 0x0E2B09F2, 0x032AF8E5, 0x18090716);
	r6 = D(r6, s1_2_1, 0xFEF2EF08, 0xF5020781, 0x030214CF, 0x08EDF208);
	r7 = D(r7, s1_2_1, 0x04ED0F11, 0xFAE11BE9, 0xF4ECEC4B, 0x10F40B17);
	r0 = D(r0, s1_2_2, 0x1FE1EBE1, 0x06FC06FE, 0xF206F1DE, 0xFDFCFF02);
	r1 = D(r1, s1_2_2, 0x0CF40518, 0x030101FD, 0x0C0AFCD6, 0x02EE0E24);
	r2 = D(r2, s1_2_2, 0x08FDF80D, 0xFDF7051F, 0x010D0CF3, 0x0A00F4FC);
	r3 = D(r3, s1_2_2, 0x00FFF5D8, 0xBD8202C8, 0x0101F914, 0x020C05FC);
	r4 = D(r4, s1_2_2, 0x00010113, 0xF31DF8D6, 0x0001F010, 0xFA130B09);
	r5 = D(r5, s1_2_2, 0x170F01E8, 0xFB09F1F7, 0x0117F5FA, 0xD3FCF6D8);
	r6 = D(r6, s1_2_2, 0x0EE5E216, 0xE3FFFFD1, 0xFE0DFD02, 0xE0E30884);
	r7 = D(r7, s1_2_2, 0x00FA0009, 0x0E0CE3EB, 0xFC01EFDB, 0x0F15EBD6);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0BD22EFF, 0x04EC0A09, 0x0FEC0BFF, 0xF4E7F5F3);
	r1 = D(r1, s0_0_0, 0x0303EAFB, 0xFD0203FB, 0x04E41FE4, 0xEDF3DCEF);
	r2 = D(r2, s0_0_0, 0x12EF250C, 0x000E0806, 0xF7120AF4, 0xF802E702);
	r3 = D(r3, s0_0_0, 0x08FA0009, 0xC4060326, 0xF4FD0909, 0xF8F508F1);
	r4 = D(r4, s0_0_0, 0xFD020800, 0xEB02FE21, 0x1041FCDD, 0x07060804);
	r5 = D(r5, s0_0_0, 0xEC07F908, 0xFBF4FF24, 0x1413170D, 0x0106E60B);
	r6 = D(r6, s0_0_0, 0xF20D1201, 0xF314E9FD, 0x00FA07EE, 0x1AF6E8BD);
	r7 = D(r7, s0_0_0, 0x03F3ECFB, 0x041C1EFD, 0xFCD7E205, 0x09082506);
	r0 = D(r0, s0_0_1, 0xFEFECDE6, 0x04030E01, 0xF91DD502, 0x1515EA0F);
	r1 = D(r1, s0_0_1, 0x0CE705F4, 0x05FB0F09, 0xE101A30D, 0x0AEE12CE);
	r2 = D(r2, s0_0_1, 0xE910FF20, 0x0617DCFB, 0x13F70DF3, 0x07FAF00F);
	r3 = D(r3, s0_0_1, 0x190308E7, 0x10EDD52F, 0x17FCCB23, 0xF60B1208);
	r4 = D(r4, s0_0_1, 0xFE03130B, 0x0AD6F0F0, 0xB9E1302B, 0x0007FCF9);
	r5 = D(r5, s0_0_1, 0x30EFF6EA, 0x06F701F8, 0xFEF9FCF7, 0x1CF936F4);
	r6 = D(r6, s0_0_1, 0x09DF2305, 0x2AEF22EF, 0xDCE1020B, 0x09F8F500);
	r7 = D(r7, s0_0_1, 0x0606FDDB, 0x1C1C280A, 0x0911EF13, 0xF60201F2);
	r0 = D(r0, s0_0_2, 0xF908D3BC, 0x1812D503, 0xE211EAFE, 0x01FC0709);
	r1 = D(r1, s0_0_2, 0xFBEDFB14, 0xF7FEFAF8, 0x0BF9FF18, 0x0B0A1CDF);
	r2 = D(r2, s0_0_2, 0x020EFB11, 0xFBE9F3F4, 0xF8FB0A0B, 0x0201F4F9);
	r3 = D(r3, s0_0_2, 0x01F1F0F1, 0xB5DBF3E1, 0x011A152D, 0xF6F50C04);
	r4 = D(r4, s0_0_2, 0xF9020BF1, 0x19070B10, 0xECE9F60F, 0xFD04F304);
	r5 = D(r5, s0_0_2, 0x090BE6FF, 0x1301FF04, 0x0600F511, 0x2E081B07);
	r6 = D(r6, s0_0_2, 0x05F80424, 0xF002BC1D, 0x1507E7BF, 0xFEFE19F8);
	r7 = D(r7, s0_0_2, 0xFAFC281E, 0x0D070102, 0x0AEE1217, 0x0F0D05F9);
	r0 = D(r0, s0_1_0, 0x0C02F950, 0x04F114EF, 0xFE10FD04, 0x07E501F1);
	r1 = D(r1, s0_1_0, 0xEC061FF7, 0xFF02EE01, 0x000D0503, 0xD5EAD509);
	r2 = D(r2, s0_1_0, 0x14D913D9, 0x0406DF1A, 0x04F0FFFB, 0xF8FC1319);
	r3 = D(r3, s0_1_0, 0x05FAEEEB, 0x0C22FC20, 0x08FE13DC, 0xF10BF70F);
	r4 = D(r4, s0_1_0, 0xFC03F7F4, 0x21010FE6, 0xD61409D2, 0xFD030BFD);
	r5 = D(r5, s0_1_0, 0x02FAEEE9, 0xF7FCEFFC, 0x01E91108, 0x03E91FF4);
	r6 = D(r6, s0_1_0, 0xFF061D17, 0xC8DAB929, 0x040605EF, 0x11E21823);
	r7 = D(r7, s0_1_0, 0xEEE8001A, 0xFE2007EC, 0x17F013E4, 0xD3DDDD06);
	r0 = D(r0, s0_1_1, 0x1D09F7FB, 0xF320032A, 0xF4F21405, 0x0D050A12);
	r1 = D(r1, s0_1_1, 0xF605F4EC, 0xF10406F7, 0xDAF4E819, 0xE8E81D27);
	r2 = D(r2, s0_1_1, 0x1004E2F1, 0xFC1BE9CD, 0x1E29EEF0, 0xFB0914F6);
	r3 = D(r3, s0_1_1, 0xF3FC0C37, 0xCC2C18C5, 0x18010A0A, 0x0B13F83C);
	r4 = D(r4, s0_1_1, 0xF10317F5, 0xC9201D10, 0x0E18F4C6, 0xEB0022F8);
	r5 = D(r5, s0_1_1, 0x05F80819, 0x11150E14, 0x1DFA0818, 0xF7111F26);
	r6 = D(r6, s0_1_1, 0xF3170892, 0x0723ECAD, 0xD4F3FD03, 0xF50BFEEC);
	r7 = D(r7, s0_1_1, 0xEA1E33D7, 0xFBFDCBD8, 0xEEDE0224, 0x04010B0A);
	r0 = D(r0, s0_1_2, 0x1AEA0EEB, 0x030FE5E6, 0xEA04FFDF, 0xF7FE1C01);
	r1 = D(r1, s0_1_2, 0x030706FD, 0x0A0003F0, 0xED0A0FEF, 0xFD0DDFEF);
	r2 = D(r2, s0_1_2, 0x03EB1DE7, 0x05F7E0F3, 0x17EF0801, 0x06FF1C04);
	r3 = D(r3, s0_1_2, 0xF9F511EA, 0xF6960BE3, 0x04FCEFF1, 0x04040206);
	r4 = D(r4, s0_1_2, 0x01F401F5, 0x2017E4DF, 0x1702E940, 0xF7F91003);
	r5 = D(r5, s0_1_2, 0x2711F624, 0x02070F1C, 0x0E0AF929, 0x0516FD0C);
	r6 = D(r6, s0_1_2, 0x12EE2CF8, 0xCDDD96E3, 0x1F0D0806, 0x0501F7CB);
	r7 = D(r7, s0_1_2, 0x01FDFBE0, 0xEFFF28CE, 0xF9010B2C, 0x061A061E);
	r0 = D(r0, s0_2_0, 0xF5FF002F, 0xEE060A06, 0x0601F6C8, 0x17040C17);
	r1 = D(r1, s0_2_0, 0xF5FEF90F, 0x0EFB0CF7, 0x0303F40E, 0x06F60DF0);
	r2 = D(r2, s0_2_0, 0xEC0A1C25, 0x15070ED6, 0x220AFFE7, 0xFCF50407);
	r3 = D(r3, s0_2_0, 0x060CF82D, 0xEE03C6E6, 0x11FAF915, 0x0701090B);
	r4 = D(r4, s0_2_0, 0x070308FA, 0x1106F9F2, 0xDBF803E4, 0x0405FFF9);
	r5 = D(r5, s0_2_0, 0xF4F208FF, 0x0BED031B, 0x120AE01B, 0x0602F208);
	r6 = D(r6, s0_2_0, 0x1A041C13, 0x3C0B2081, 0xF7070A09, 0x2E0EDC16);
	r7 = D(r7, s0_2_0, 0xF1F70BE4, 0xF0FF0E09, 0x00040CEA, 0xE51524E9);
	r0 = D(r0, s0_2_1, 0x2326DCF8, 0xF8F801FF, 0x02EC172A, 0xF10416F8);
	r1 = D(r1, s0_2_1, 0x02FA02EB, 0x080408F4, 0x090010E8, 0x092FF5F4);
	r2 = D(r2, s0_2_1, 0xEEF20B1D, 0xF31103F9, 0x15FD02DF, 0x090805F9);
	r3 = D(r3, s0_2_1, 0x1524FAB3, 0x21F8F3EB, 0x0CFD13F3, 0x0702FB08);
	r4 = D(r4, s0_2_1, 0x06FC03FB, 0xDAF9FBE2, 0x1E01FDF2, 0x0FFBFB18);
	r5 = D(r5, s0_2_1, 0x0EF21106, 0x23041304, 0xD2FE05E0, 0xEDD70935);
	r6 = D(r6, s0_2_1, 0xE60C1000, 0x0D153E11, 0xD9FD1011, 0x0E0CC929);
	r7 = D(r7, s0_2_1, 0xE7120616, 0x06FC11EC, 0x25FFC7FE, 0xF0F7071C);
	r0 = D(r0, s0_2_2, 0x1209EFD6, 0xF507FFEA, 0x0302FD11, 0xFEFA110C);
	r1 = D(r1, s0_2_2, 0xFC0BEC03, 0xFEFDFCEF, 0x04FD071A, 0x08DD0E10);
	r2 = D(r2, s0_2_2, 0x01FB1716, 0xF5FD0F12, 0xF3F9F200, 0xF2040804);
	r3 = D(r3, s0_2_2, 0x04040723, 0xCF282F0F, 0xFB0E0008, 0xFC0408F7);
	r4 = D(r4, s0_2_2, 0xF7FF10F0, 0xF6F60509, 0xF0ED1C2D, 0x03020107);
	r5 = D(r5, s0_2_2, 0xFBF3FCF7, 0x07090605, 0x0E01ECE9, 0xE90ADCD3);
	r6 = D(r6, s0_2_2, 0xDE2201F1, 0x0AEEBA45, 0x0BFB1E0A, 0x0AFAFE0B);
	r7 = D(r7, s0_2_2, 0xFFFE08F7, 0xEBF7EE02, 0x04151124, 0x0103E7D8);
	r0 = D(r0, s1_0_0, 0x0CFB0013, 0x051A00F8, 0xF20111E6, 0xFAD609FA);
	r1 = D(r1, s1_0_0, 0x0B00F1EF, 0x07FF0BF9, 0xFE10FFE2, 0x000D021A);
	r2 = D(r2, s1_0_0, 0xF7032DF9, 0x1316F50F, 0x1603FC10, 0xFDF2F502);
	r3 = D(r3, s1_0_0, 0x02ED0AFF, 0x02CBEB2A, 0xE2F10EFC, 0x0611F506);
	r4 = D(r4, s1_0_0, 0x06FE08F6, 0x09E5E8B4, 0xFCEC15E7, 0xF7010201);
	r5 = D(r5, s1_0_0, 0xF316FBFA, 0xEBCF03E8, 0xFFFE19D2, 0xFCF0F807);
	r6 = D(r6, s1_0_0, 0x08E609D7, 0x0A291D21, 0x112003FE, 0xF5F009F4);
	r7 = D(r7, s1_0_0, 0xFAFAEAF1, 0x01020D13, 0x010B1100, 0xF7150EF2);
	r0 = D(r0, s1_0_1, 0xF1DCFEFC, 0x0605FA1C, 0x0E0511FF, 0xF2EE0803);
	r1 = D(r1, s1_0_1, 0xDFEEFAF4, 0xF4080701, 0xFA0E2D14, 0x03D4FB09);
	r2 = D(r2, s1_0_1, 0x0530F4E8, 0xF7F3F607, 0xFE1604EE, 0x0902F511);
	r3 = D(r3, s1_0_1, 0x0812E7ED, 0xE920373B, 0xF60AF2F8, 0xF0161502);
	r4 = D(r4, s1_0_1, 0xF5060B07, 0x141CE4C4, 0xF02313F6, 0x0702FCF7);
	r5 = D(r5, s1_0_1, 0x07FBD015, 0xE9E009F9, 0x18FA0807, 0xFB1B05E8);
	r6 = D(r6, s1_0_1, 0x05F510DA, 0xD51D210D, 0x11F91B11, 0xDD1D2505);
	r7 = D(r7, s1_0_1, 0xDF25011F, 0xFB1AFEF2, 0x05DDF6FF, 0x03FFFE12);
	r0 = D(r0, s1_0_2, 0xDAFBDFF5, 0x12E5FFFF, 0x28FDFD15, 0xFC07E70F);
	r1 = D(r1, s1_0_2, 0x0E0FEFEA, 0x04FAF900, 0x34EDF710, 0xFF0B0F08);
	r2 = D(r2, s1_0_2, 0xF9FE0A00, 0xFFDCFB04, 0x06E00D01, 0xED00F30D);
	r3 = D(r3, s1_0_2, 0x0DF200EF, 0xDE7FB6C9, 0xFB0EF10B, 0x0101FBFE);
	r4 = D(r4, s1_0_2, 0x0402F0FF, 0xF8FFB9E6, 0x1202F9F2, 0x08F506FF);
	r5 = D(r5, s1_0_2, 0xEFDEDA1A, 0x0CF9DBE1, 0x12FDFAE9, 0x072D21D6);
	r6 = D(r6, s1_0_2, 0x0D37F2E9, 0x282EE62C, 0xD20D2218, 0xD204E5F8);
	r7 = D(r7, s1_0_2, 0x0009ED07, 0x010BFDFE, 0xFF1002DB, 0x02F9FF00);
	r0 = D(r0, s1_1_0, 0xDAED0BD8, 0x07E4FCF6, 0x05151213, 0x162C13FF);
	r1 = D(r1, s1_1_0, 0xE3160605, 0x050B0206, 0xE811FCF8, 0x2915EE01);
	r2 = D(r2, s1_1_0, 0x05EDF5E5, 0x1808E909, 0x020CFDFC, 0x0E1D011A);
	r3 = D(r3, s1_1_0, 0xF9110306, 0xFD25F304, 0xFC0D031D, 0x03FB02FC);
	r4 = D(r4, s1_1_0, 0xFF14F71D, 0xFCF30918, 0xDB180731, 0x0106FE15);
	r5 = D(r5, s1_1_0, 0xF71AEFEC, 0xFFED07CD, 0x0D05010C, 0xEBE801DC);
	r6 = D(r6, s1_1_0, 0xF5FBFAEA, 0x1002CF2E, 0x0B070015, 0x18E00DB8);
	r7 = D(r7, s1_1_0, 0x2D25E9F4, 0xFBFB1615, 0xF2E629EE, 0xF10F1CFD);
	r0 = D(r0, s1_1_1, 0xC70A07FA, 0x00E52A0D, 0x1CFA0905, 0xE111EB1A);
	r1 = D(r1, s1_1_1, 0xF8040D12, 0x0FF803FD, 0x1BF3F931, 0xF7E421EC);
	r2 = D(r2, s1_1_1, 0xF0F3FEF9, 0x1316D824, 0x09F3EAF4, 0x1E0CD2F0);
	r3 = D(r3, s1_1_1, 0x08F60EEB, 0x17060DE5, 0xFEF5F60F, 0x010DFDFD);
	r4 = D(r4, s1_1_1, 0x05150300, 0x15E9E2F1, 0xF81004F8, 0x091712F9);
	r5 = D(r5, s1_1_1, 0x071404F9, 0xFCE915FA, 0xFC0FE3E7, 0x1C2C0E04);
	r6 = D(r6, s1_1_1, 0x04D1D3DA, 0x0BBF8FF0, 0xD605FE93, 0xF51EDCC2);
	r7 = D(r7, s1_1_1, 0x2FF2110A, 0xF332E0F4, 0xF8E61100, 0x15FDEA16);
	r0 = D(r0, s1_1_2, 0xC116ECD9, 0xC21313FD, 0x06F5F31D, 0xF1F70D0B);
	r1 = D(r1, s1_1_2, 0xF814EAEF, 0xEC140608, 0x0719F6FF, 0xCC1110EF);
	r2 = D(r2, s1_1_2, 0x0606160A, 0xE0FB0B09, 0x02F008F8, 0x04081003);
	r3 = D(r3, s1_1_2, 0x14D514F7, 0x17311519, 0xF402E807, 0xFEF90F06);
	r4 = D(r4, s1_1_2, 0xFD010304, 0xF8EE2EF5, 0xE0F7260F, 0x0E0308FE);
	r5 = D(r5, s1_1_2, 0xF918DB10, 0x26FACD00, 0x08FD1607, 0xD81B1EE6);
	r6 = D(r6, s1_1_2, 0x07FC05F4, 0xFFE581C9, 0xAA2C1AFA, 0xA1310E06);
	r7 = D(r7, s1_1_2, 0xF320F902, 0xE440F9FE, 0x14FF10FA, 0x0F1611F4);
	r0 = D(r0, s1_2_0, 0x2DD70D04, 0xF9090108, 0x08190216, 0xF0020A09);
	r1 = D(r1, s1_2_0, 0x07F2F71A, 0x060D0907, 0x05FB0901, 0xEEF80D2A);
	r2 = D(r2, s1_2_0, 0xFF23DDF6, 0xF01FFC13, 0x0901EAF5, 0x01EA0108);
	r3 = D(r3, s1_2_0, 0x00F9FBD8, 0xFCE20402, 0x00F91504, 0x0203FBFD);
	r4 = D(r4, s1_2_0, 0xFA0BFC0E, 0xEF23D3F1, 0xFD12F120, 0xF8FDFA0D);
	r5 = D(r5, s1_2_0, 0x04FB0004, 0x070C0EF2, 0xF91202FC, 0xFE1E02FC);
	r6 = D(r6, s1_2_0, 0xF807FCDA, 0xE21AA6D2, 0xFD03F911, 0x00F700C8);
	r7 = D(r7, s1_2_0, 0xECF1F61C, 0xFEF806F9, 0xFFE209F4, 0x05FC1607);
	r0 = D(r0, s1_2_1, 0x17D9EC14, 0xFEFA0EF2, 0xFB11F403, 0xFCFFF10B);
	r1 = D(r1, s1_2_1, 0x060608FF, 0xFCEEFD01, 0xDCE80812, 0xFA01F800);
	r2 = D(r2, s1_2_1, 0xEFFD01E5, 0xF5D4F9EA, 0xF111E5F9, 0x05E20F00);
	r3 = D(r3, s1_2_1, 0xEF0913E0, 0x0D05144E, 0x00E30DF4, 0xF6FB0702);
	r4 = D(r4, s1_2_1, 0x0AF60204, 0x1A0ED0BB, 0xF80AEEF3, 0x05F9FDFC);
	r5 = D(r5, s1_2_1, 0x0215FFF4, 0xFA08E8F8, 0xED21FA05, 0x0FE1EF2F);
	r6 = D(r6, s1_2_1, 0x0E14C409, 0xFB39E7EE, 0xF0EEFCE1, 0xF8E3FCE7);
	r7 = D(r7, s1_2_1, 0xFC11F3F9, 0xF6002EFA, 0x2A0BFB0B, 0x05F10AFB);
	r0 = D(r0, s1_2_2, 0x1016F10A, 0xEEFD18FF, 0xEBF00F03, 0xF5EE0804);
	r1 = D(r1, s1_2_2, 0x020B13F6, 0xFFFDFE03, 0x07EAFAFA, 0xE2D5F204);
	r2 = D(r2, s1_2_2, 0x0C17FCFC, 0x120DFA05, 0x1CF6EEFB, 0x020C0601);
	r3 = D(r3, s1_2_2, 0x180CF006, 0xE6DFCE08, 0x080203FF, 0xFF0E09FE);
	r4 = D(r4, s1_2_2, 0x15040204, 0x12082201, 0x13FFF403, 0xFDF60406);
	r5 = D(r5, s1_2_2, 0x00F7E6F7, 0x2F10D30B, 0xE7EBF6F8, 0x02DCFC01);
	r6 = D(r6, s1_2_2, 0x150ADF05, 0x0BED81CF, 0xDEF417F8, 0x11E5150A);
	r7 = D(r7, s1_2_2, 0xF4130D23, 0x1926010A, 0x0701E1E8, 0xFA1C0AF8);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE4FA0814, 0x0202FC0A, 0xE415F50F, 0xF2FF0D08);
	r1 = D(r1, s0_0_0, 0x1B0DF6F5, 0xFF06FB04, 0xEC030413, 0xFE0B0F02);
	r2 = D(r2, s0_0_0, 0xF005FA20, 0xE411FBFF, 0x0800FCF7, 0xE8FBFDF1);
	r3 = D(r3, s0_0_0, 0xF9FEFEFE, 0x0E0F240F, 0xF20D18E5, 0x1BFCFC0A);
	r4 = D(r4, s0_0_0, 0xFA0BFE04, 0x2A090FEB, 0xF9F90D0B, 0x0302FD00);
	r5 = D(r5, s0_0_0, 0x390407DD, 0x1014FDFC, 0x01E41311, 0xFC1E0B03);
	r6 = D(r6, s0_0_0, 0xFA0AEA16, 0x09EBDBDF, 0x0400FB18, 0x07100B01);
	r7 = D(r7, s0_0_0, 0xF61007F1, 0x0AE80508, 0x0BED0811, 0xEB1011F9);
	r0 = D(r0, s0_0_1, 0x0512D2FB, 0xEDFFFC19, 0xFBEDFA05, 0xF105F027);
	r1 = D(r1, s0_0_1, 0xFF0124F8, 0xFA020302, 0xF10103FF, 0xE611FD0E);
	r2 = D(r2, s0_0_1, 0xFD18FCE9, 0xF7D70F04, 0x0B13FC02, 0x0AFCF9F5);
	r3 = D(r3, s0_0_1, 0xD60DE816, 0xC5120CF1, 0xCCFCF1E6, 0xFA0B0116);
	r4 = D(r4, s0_0_1, 0x0E01FCFC, 0xFFD509CD, 0xF8EF1100, 0x04FBF9F6);
	r5 = D(r5, s0_0_1, 0xE8F7091D, 0xD706F9FB, 0xE01FFF0E, 0xF4091A11);
	r6 = D(r6, s0_0_1, 0xF0F6040F, 0x001109ED, 0x0F08F30D, 0x0F030105);
	r7 = D(r7, s0_0_1, 0xFFFC0DFC, 0xFED40AEE, 0x0B0231D7, 0xF8F10D0D);
	r0 = D(r0, s0_0_2, 0x18F622EE, 0xED0C1711, 0x1CF4F00E, 0xFE19ECF7);
	r1 = D(r1, s0_0_2, 0xFDFCFC09, 0xFAFD0702, 0x1A0BF107, 0x03FA17E8);
	r2 = D(r2, s0_0_2, 0x0FDFFFFE, 0x02FB16DC, 0x03F700FE, 0x091705F3);
	r3 = D(r3, s0_0_2, 0x1219FCFD, 0xAE12120C, 0xDD1F001D, 0xF607FA0A);
	r4 = D(r4, s0_0_2, 0xFD070101, 0xE71E18FB, 0x1E01F9E7, 0x0CF9FF02);
	r5 = D(r5, s0_0_2, 0x00E7390C, 0xF81402F3, 0xF3FDF703, 0xF80DF0FD);
	r6 = D(r6, s0_0_2, 0xF715F3FE, 0x3CFEF618, 0xFDFA0112, 0xF6FEEC03);
	r7 = D(r7, s0_0_2, 0xFAEE07FE, 0x012405EF, 0xFEFB0113, 0xF508F000);
	r0 = D(r0, s0_1_0, 0xE5FB1CE5, 0x04FA08FD, 0x0CDBD8FD, 0x0CF2F9D1);
	r1 = D(r1, s0_1_0, 0x0EE531FE, 0x05F7FA04, 0x08FA16E3, 0x08EEE51A);
	r2 = D(r2, s0_1_0, 0xF90702F1, 0xF712E11A, 0xEBFE0FF9, 0xDA0A0415);
	r3 = D(r3, s0_1_0, 0x08F117D3, 0x07F00405, 0x070EE603, 0x0E13EA09);
	r4 = D(r4, s0_1_0, 0xFAFAF807, 0xF6F7001D, 0xF4E3F2F1, 0xF7FD050A);
	r5 = D(r5, s0_1_0, 0x0606EBFF, 0x0C0EE4F9, 0xF7EDF619, 0x19F709F0);
	r6 = D(r6, s0_1_0, 0xF2FD081E, 0xED03F201, 0xF3F80801, 0xF5F90C2A);
	r7 = D(r7, s0_1_0, 0x0822DF1C, 0x0A02F7F2, 0xFDF4F9F5, 0x0CEF0CFE);
	r0 = D(r0, s0_1_1, 0xFC2CD70B, 0x0909FA0C, 0x140A0219, 0xEEB1A748);
	r1 = D(r1, s0_1_1, 0x2013E91E, 0xF60AEC02, 0xFCFDFC22, 0xE5FFE226);
	r2 = D(r2, s0_1_1, 0x02003812, 0xFDDF20F5, 0xF11BFDFD, 0xF3010017);
	r3 = D(r3, s0_1_1, 0x0606D41C, 0x0FD4B6F5, 0xDC01CD30, 0xDFF20008);
	r4 = D(r4, s0_1_1, 0x2612EC10, 0x15F2F5D2, 0xF6E4D4E8, 0x0B03F001);
	r5 = D(r5, s0_1_1, 0xEEF1FD01, 0xDD05F024, 0x061BCFF5, 0xFFFFF408);
	r6 = D(r6, s0_1_1, 0x19D52016, 0xF2CA41FF, 0x12FD02EF, 0x2605F50B);
	r7 = D(r7, s0_1_1, 0xE2121CFE, 0x03F601D6, 0xFF1EEFCF, 0x141CE9F2);
	r0 = D(r0, s0_1_2, 0xFDF906D2, 0x1AED0909, 0xFFF5F1F7, 0xF5F01F3F);
	r1 = D(r1, s0_1_2, 0x1316F4EC, 0x08FD0802, 0x00F0090E, 0x0735FEF8);
	r2 = D(r2, s0_1_2, 0x0AF025D9, 0x0821F9F3, 0x12F61B01, 0xFDF9ED07);
	r3 = D(r3, s0_1_2, 0x0C0CF6E2, 0x186381C0, 0xF1180F01, 0xF6F9FE14);
	r4 = D(r4, s0_1_2, 0x07F8EE06, 0x23F9EAE4, 0x00D915F7, 0xE8F40A05);
	r5 = D(r5, s0_1_2, 0xF5EACB17, 0x190F04FA, 0x1FE317FE, 0x06F6F823);
	r6 = D(r6, s0_1_2, 0x12EBF215, 0x0EF4E8D1, 0xFEEEBA04, 0x06191AEA);
	r7 = D(r7, s0_1_2, 0xEF1E1902, 0xEB0A081F, 0xF30F04F6, 0x0DED04EF);
	r0 = D(r0, s0_2_0, 0xFBD9F627, 0x0505FE12, 0x07FBFF08, 0x0A08FFFA);
	r1 = D(r1, s0_2_0, 0xFCFDF7EB, 0x0300F201, 0x070301DE, 0xEB0006F9);
	r2 = D(r2, s0_2_0, 0xF61FFC16, 0xEC0105FA, 0x0BEB071B, 0xFE10F90D);
	r3 = D(r3, s0_2_0, 0x080014D5, 0x1DE40C0A, 0x0D0024F3, 0x07FDFE02);
	r4 = D(r4, s0_2_0, 0x0216F202, 0xEE000712, 0xFA04F612, 0xFC0EF9FA);
	r5 = D(r5, s0_2_0, 0x07020719, 0x0205FB10, 0x0326E5E4, 0xF709EA06);
	r6 = D(r6, s0_2_0, 0xF3DDEB23, 0x06F6F3EE, 0xF8000701, 0xF000E90C);
	r7 = D(r7, s0_2_0, 0xEFD6EB1E, 0x09E911E7, 0xF2EFF025, 0xFEE60F05);
	r0 = D(r0, s0_2_1, 0xF31CF901, 0x0F0A0704, 0xF7FD0AE9, 0xFA1530FF);
	r1 = D(r1, s0_2_1, 0x080709FD, 0x0406F312, 0x0207DBFA, 0x20EB1C1B);
	r2 = D(r2, s0_2_1, 0x1E1D1312, 0x01FC0CF6, 0x0BFE28F1, 0x070F16EF);
	r3 = D(r3, s0_2_1, 0x14ED0404, 0xB1220EDF, 0x010518FB, 0x0805FEFE);
	r4 = D(r4, s0_2_1, 0xFB09F812, 0x0CF7F3F9, 0x01F71319, 0x050EF7F2);
	r5 = D(r5, s0_2_1, 0xFA211207, 0xF8EEEE1F, 0x1027BBD7, 0xED0F2AFE);
	r6 = D(r6, s0_2_1, 0xFAD30AF3, 0x0DC0DC1B, 0x090F00EA, 0xFAFF29DF);
	r7 = D(r7, s0_2_1, 0x17FB04FE, 0x02F1E2EE, 0x1A01FEED, 0xF9F3D4E6);
	r0 = D(r0, s0_2_2, 0xFF1CF0FE, 0xFB0F0BF9, 0xFE0D17EB, 0x07030D1D);
	r1 = D(r1, s0_2_2, 0xF6EBF30B, 0xFE08F7F2, 0xF80102F6, 0xFC00FEE7);
	r2 = D(r2, s0_2_2, 0xFFF8F7FF, 0x0F09F6F5, 0xFAF30B0A, 0x01FC14FC);
	r3 = D(r3, s0_2_2, 0xFFF1F91C, 0x07BD0781, 0x19FB10EB, 0x05FB0103);
	r4 = D(r4, s0_2_2, 0x0D11FE08, 0x1EF70EE7, 0x071019F5, 0x020D00FB);
	r5 = D(r5, s0_2_2, 0x10F5FCFE, 0x00E910FC, 0xFCF00AF5, 0x1513EF1D);
	r6 = D(r6, s0_2_2, 0x09E1F709, 0xED3BFDBF, 0x000FDC0A, 0xF705FDCD);
	r7 = D(r7, s0_2_2, 0x05E31214, 0x0A1100E8, 0xEE16F002, 0xF1F4FF2D);
	r0 = D(r0, s1_0_0, 0xCF10FCED, 0x08F8FAF9, 0x0D18040A, 0xF6EF0E0D);
	r1 = D(r1, s1_0_0, 0x0313FE1B, 0x0BFBFF03, 0xDEF40107, 0x04E7FFFA);
	r2 = D(r2, s1_0_0, 0x01F7F4E5, 0xEFFD1E12, 0xEE01FDF8, 0xFF0C0BF0);
	r3 = D(r3, s1_0_0, 0xFEF206F2, 0x001F0BFA, 0x06190CFD, 0x0BFDFA04);
	r4 = D(r4, s1_0_0, 0x0BFC0106, 0x131901FC, 0x290BFE19, 0x04070606);
	r5 = D(r5, s1_0_0, 0x110BFDFD, 0x0803FFF8, 0xF301FEEC, 0xFDFDFF0F);
	r6 = D(r6, s1_0_0, 0x07FA100B, 0x02111118, 0xDFFFF2FA, 0x12F9F8F8);
	r7 = D(r7, s1_0_0, 0x06E409EB, 0x04FA030E, 0x12FDF709, 0xF80C0C01);
	r0 = D(r0, s1_0_1, 0x14020301, 0x01EFFBF4, 0x1BF6EFF5, 0x04E8F3F8);
	r1 = D(r1, s1_0_1, 0x0609FB0F, 0x0F000404, 0xECE909F7, 0x1E16D4D7);
	r2 = D(r2, s1_0_1, 0x230EF20B, 0x0111071B, 0xFAFAE91E, 0xFC14F5F4);
	r3 = D(r3, s1_0_1, 0xF7EE05FE, 0x0EE7FEDC, 0x030F08DD, 0x01000903);
	r4 = D(r4, s1_0_1, 0x16FA0CFE, 0x0D140D30, 0x13131AF1, 0xFBFF0001);
	r5 = D(r5, s1_0_1, 0xECEAFBFA, 0x05000807, 0xE0020DE5, 0xD606F711);
	r6 = D(r6, s1_0_1, 0x0DE3FD25, 0x0C1300F4, 0x14E4F2E6, 0x0B1B0C14);
	r7 = D(r7, s1_0_1, 0x03F1F3F5, 0x07080BEF, 0x17FEFBF6, 0x10F4F601);
	r0 = D(r0, s1_0_2, 0xF61614FA, 0x000EEBFE, 0x0509FCEA, 0x1417E301);
	r1 = D(r1, s1_0_2, 0xFFFE071C, 0x06000404, 0xF00CF805, 0x0B0605F9);
	r2 = D(r2, s1_0_2, 0x1B14F907, 0x07FA16F9, 0xFA0903FA, 0x06020107);
	r3 = D(r3, s1_0_2, 0xFE0F11EC, 0xDA011E1E, 0x03F7E4F1, 0x0E050607);
	r4 = D(r4, s1_0_2, 0x0A000102, 0xCDEBF92C, 0xF00E1A18, 0xFE01FD04);
	r5 = D(r5, s1_0_2, 0xF817FE09, 0x10140AFE, 0x03030C08, 0xEAED051E);
	r6 = D(r6, s1_0_2, 0x0102051B, 0x0415FD3C, 0xFD0BFC17, 0x07FD0821);
	r7 = D(r7, s1_0_2, 0xEB210EF7, 0x10DFEC02, 0xEF0B0CFD, 0xEAF009FF);
	r0 = D(r0, s1_1_0, 0xC8190BDC, 0xFEFE0209, 0xEBE4FC01, 0xE5FF0D19);
	r1 = D(r1, s1_1_0, 0x06070AF8, 0xF90400FF, 0xC8090509, 0x12E9FFCA);
	r2 = D(r2, s1_1_0, 0xF419160A, 0x1A06F3FB, 0x0A07F605, 0x02030710);
	r3 = D(r3, s1_1_0, 0xD4131BFE, 0xF5FBF819, 0xF9F913F1, 0x1AF801FE);
	r4 = D(r4, s1_1_0, 0x020AFF02, 0x10D9ED06, 0x25FEEEE6, 0x02FD0006);
	r5 = D(r5, s1_1_0, 0x0506EAF8, 0xF108E5F4, 0xF816EAF9, 0xE60D0DF2);
	r6 = D(r6, s1_1_0, 0x1115E907, 0x0C12E504, 0xF211060C, 0xF5ED11F5);
	r7 = D(r7, s1_1_0, 0xFEEDF215, 0xFA020D07, 0x1BE5EFE2, 0xE6ECFC13);
	r0 = D(r0, s1_1_1, 0x09FDE7D9, 0xDFECF70A, 0x0AF303F7, 0xF6F0D712);
	r1 = D(r1, s1_1_1, 0xF0FD1DD8, 0x26FCF2EF, 0xCFF2C401, 0xF0ECEFEC);
	r2 = D(r2, s1_1_1, 0x010D01D4, 0x0802D7F0, 0xFC09EE10, 0xFB08FD05);
	r3 = D(r3, s1_1_1, 0xE3EB10FA, 0x1BEAD930, 0x1C09FCE7, 0x14FBF000);
	r4 = D(r4, s1_1_1, 0x180702E9, 0x0FCC01F4, 0x0CEEBED5, 0x08F6FFF1);
	r5 = D(r5, s1_1_1, 0x2803FE0F, 0xFAEE031C, 0x0F30D4E8, 0x0116FD1F);
	r6 = D(r6, s1_1_1, 0x1D17FA0F, 0xE5E5E802, 0xEC0AF8FD, 0xFEFEDFEB);
	r7 = D(r7, s1_1_1, 0x0CD119F2, 0xE501F825, 0xE021FAEE, 0xCCF00DFE);
	r0 = D(r0, s1_1_2, 0xDE0E2ED3, 0xE8E315FA, 0xDF160304, 0xE9F2FECD);
	r1 = D(r1, s1_1_2, 0xFEF41718, 0x05F50A06, 0xE40E0DF1, 0x1108E8F4);
	r2 = D(r2, s1_1_2, 0x38F8120A, 0xD8F80203, 0xF80FFB22, 0xFAEC0FF9);
	r3 = D(r3, s1_1_2, 0xFDFFF3E4, 0x5C1ED9C1, 0x02FCD7F4, 0x0509F609);
	r4 = D(r4, s1_1_2, 0x0A010607, 0xC2FEFD1F, 0x0404FC1D, 0x09EEF4FE);
	r5 = D(r5, s1_1_2, 0xC3100A05, 0xF20B1500, 0x0126FAEE, 0x0BF7EDBF);
	r6 = D(r6, s1_1_2, 0x0A09F7FE, 0x3D05F9C9, 0xFEDC0DBD, 0x10FCE3B2);
	r7 = D(r7, s1_1_2, 0xF606E508, 0x1DF2F2F3, 0x07010F08, 0xF1E90508);
	r0 = D(r0, s1_2_0, 0x08DDD6E4, 0x12F9F800, 0xDD180D0A, 0x2410050E);
	r1 = D(r1, s1_2_0, 0xE0EC1B04, 0x06F80405, 0xEC1F0FF0, 0xE80C01F3);
	r2 = D(r2, s1_2_0, 0xE4141310, 0xF8FC2205, 0xFAF9F80C, 0x0507F1F7);
	r3 = D(r3, s1_2_0, 0xFB08EBE2, 0x1A191107, 0x12F914F8, 0x0C02FE03);
	r4 = D(r4, s1_2_0, 0x12050D04, 0x150E0F29, 0xE20A0801, 0x06090B03);
	r5 = D(r5, s1_2_0, 0x20FBF400, 0x11FCFA14, 0xFB040613, 0xD7100127);
	r6 = D(r6, s1_2_0, 0x22000417, 0x05EC07FC, 0xF2FD1104, 0x270CE5EA);
	r7 = D(r7, s1_2_0, 0xCB1AF5F1, 0x1AF6E7EC, 0xF51504FF, 0xED0EE2E2);
	r0 = D(r0, s1_2_1, 0xA7000CBF, 0xEE0EF8FD, 0xF9EC0E05, 0xE5F806E8);
	r1 = D(r1, s1_2_1, 0xF5060204, 0x1B05F002, 0xF30BF2CB, 0x1CF8FB01);
	r2 = D(r2, s1_2_1, 0xF7F5FBD0, 0xFE0408D5, 0xFD0D4A12, 0x1BFB07F3);
	r3 = D(r3, s1_2_1, 0x03F22A07, 0x1DFE2110, 0x14FEF0FF, 0x16F70C02);
	r4 = D(r4, s1_2_1, 0x0F0B1207, 0x11180D06, 0x0D0A1D2E, 0x0C030D0A);
	r5 = D(r5, s1_2_1, 0x15F51002, 0x240814FF, 0x08E4170B, 0xECF42E11);
	r6 = D(r6, s1_2_1, 0x0DEE0402, 0xEBF51BFD, 0xF5E8F117, 0xF21608F1);
	r7 = D(r7, s1_2_1, 0x0F0E03F9, 0xFFF70C1A, 0x05E40C03, 0xEE05CF1B);
	r0 = D(r0, s1_2_2, 0xAF00F8DA, 0xF5EB0B07, 0xF9DBF2DF, 0xEFFDE9EA);
	r1 = D(r1, s1_2_2, 0x0B07FC03, 0x0D04FA07, 0xDF02EC01, 0x34071516);
	r2 = D(r2, s1_2_2, 0x0BE4F409, 0x010310DC, 0x05FCF40C, 0x1306EE07);
	r3 = D(r3, s1_2_2, 0xF1FF07EB, 0x0005D6F1, 0x0EEDD501, 0x0FFDF704);
	r4 = D(r4, s1_2_2, 0x0807F600, 0x0AFE0A39, 0xF0EFEC09, 0x0A00F40D);
	r5 = D(r5, s1_2_2, 0xEDF0F2FF, 0xF90422F8, 0xE80F090B, 0x04ECBAFF);
	r6 = D(r6, s1_2_2, 0xFA0600F0, 0xE91BFB2E, 0xF9060923, 0x02122D0C);
	r7 = D(r7, s1_2_2, 0x07FF1C09, 0xF51E1203, 0x1B01FDEB, 0x072502EF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.918e-02, 1.522e-02, 1.087e-03, 5.628e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.092e-02, 2.266e-03, 1.058e-02, 7.056e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.864e-03, -1.639e-03, 1.003e-03, 3.976e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(4.259e-03, 1.929e-02, 5.675e-02, 2.182e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(2.265e-02, -3.925e-02, -1.999e-02, 4.422e-04);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(3.842e-02, -9.284e-03, -9.853e-03, -1.515e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(2.243e-02, 1.980e-02, 1.923e-02, 1.210e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-7.576e-03, -2.362e-02, -1.762e-02, 4.251e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFC02F3, 0x000D0DFF, 0xEF041FEB, 0x010003E4);
	r1 = D(r1, s0_0_0, 0x0A080309, 0xFCFF1312, 0x0F07E708, 0xFB09110C);
	r2 = D(r2, s0_0_0, 0xFBFEFBFC, 0x030105FC, 0xF2F90BFE, 0x0B04F1F5);
	r3 = D(r3, s0_0_0, 0x0200FFFF, 0x0881FD81, 0x0702080C, 0xFAFA03D5);
	r4 = D(r4, s0_0_0, 0xFE02FFF7, 0x10FB0907, 0xFC01FB04, 0xFEF2FF1E);
	r5 = D(r5, s0_0_0, 0x21F132E2, 0xD4F8253F, 0xF9F4FBFA, 0xEC06DE1A);
	r6 = D(r6, s0_0_0, 0x05FC0A02, 0xFAFDF901, 0xFF07030B, 0x2712DD1E);
	r7 = D(r7, s0_0_0, 0xEC060B0D, 0x0A070F0D, 0x0F011106, 0x00000CF9);
	r0 = D(r0, s0_0_1, 0x1FEFF421, 0x09F7FB05, 0x04FE00F9, 0x270D0812);
	r1 = D(r1, s0_0_1, 0xFCF2FCF1, 0x09F7F5EE, 0xFC1029F5, 0x12FA1CF1);
	r2 = D(r2, s0_0_1, 0x03F5F504, 0x06FEFCFC, 0xEFEEFDF6, 0xEDFAF6A0);
	r3 = D(r3, s0_0_1, 0x0C100900, 0x438181B3, 0xEF03FD15, 0x0507F113);
	r4 = D(r4, s0_0_1, 0xF7F9F70B, 0xFFEE080B, 0x1722FDF2, 0x1219EFF9);
	r5 = D(r5, s0_0_1, 0xCDE8E8E0, 0x2EE61538, 0x1915251E, 0x2EF21BF6);
	r6 = D(r6, s0_0_1, 0xDD00E802, 0x0D0E0408, 0xF606F211, 0x0722D0D7);
	r7 = D(r7, s0_0_1, 0x0CFC19E6, 0x0FF708F5, 0x0AEB0D0E, 0x03FC08FF);
	r0 = D(r0, s0_0_2, 0xFFF907E8, 0x1CFCFD12, 0xF3E30701, 0x2DE9F122);
	r1 = D(r1, s0_0_2, 0x0EEE1310, 0xFDFAFF04, 0x15E0F2F0, 0x070401F8);
	r2 = D(r2, s0_0_2, 0x12010210, 0x01FD0301, 0x0C00F01A, 0xDBF40807);
	r3 = D(r3, s0_0_2, 0xF5FAFFFA, 0xD3818281, 0xD90805DF, 0xF1FF0304);
	r4 = D(r4, s0_0_2, 0xF3080300, 0x1B0A02F5, 0x10F6F418, 0xFB190818);
	r5 = D(r5, s0_0_2, 0xEC00F608, 0xDD0FDEF0, 0xC516F2E0, 0xF5FFC631);
	r6 = D(r6, s0_0_2, 0xEB0802ED, 0xF6F303FD, 0xE60A00ED, 0xBEE7F111);
	r7 = D(r7, s0_0_2, 0x220F00E5, 0x09F90EFE, 0x0609FB08, 0x03FE07FF);
	r0 = D(r0, s0_1_0, 0x0425FA16, 0xF206121F, 0xFEF7FEFE, 0x00EAFC06);
	r1 = D(r1, s0_1_0, 0x08FEF7F7, 0x01F408F3, 0xD6F6F711, 0x06170308);
	r2 = D(r2, s0_1_0, 0xEA0D141C, 0x010203FA, 0x0B0129F9, 0xF6FAF2F5);
	r3 = D(r3, s0_1_0, 0x04050209, 0xDC0F0F04, 0x0BF51A10, 0xFA13FE0C);
	r4 = D(r4, s0_1_0, 0xF9F5EEED, 0x12FDF7E2, 0x00F2EFF7, 0x04EAE206);
	r5 = D(r5, s0_1_0, 0x020C0D59, 0x4413EDCC, 0xFDE30C15, 0xEA16110A);
	r6 = D(r6, s0_1_0, 0xF61A033A, 0xFDFC10FE, 0x0C0AFDFA, 0xE6E6F810);
	r7 = D(r7, s0_1_0, 0x06F80502, 0x06FB0C0D, 0x02FB0614, 0xFCFF0702);
	r0 = D(r0, s0_1_1, 0xEE010300, 0xF6EFFF0A, 0xF71ADEF6, 0xF201F90B);
	r1 = D(r1, s0_1_1, 0xE60CF3F5, 0x10FCFAF7, 0x05F90F0C, 0x22150211);
	r2 = D(r2, s0_1_1, 0xCB09D90E, 0xFDF8FBFB, 0xFA12F7FF, 0xC4ECF2C4);
	r3 = D(r3, s0_1_1, 0xF30707EB, 0xE01DF823, 0xF3F616F7, 0xDA0E05FC);
	r4 = D(r4, s0_1_1, 0xFBFC07EC, 0xC8ED1CF6, 0xDD260102, 0x01061005);
	r5 = D(r5, s0_1_1, 0x27FA03E6, 0x04F0EE22, 0x3B1504F8, 0x1804FECF);
	r6 = D(r6, s0_1_1, 0x1916DA26, 0x070EF80A, 0xFB08EBF3, 0x0507C3D8);
	r7 = D(r7, s0_1_1, 0x0D18311B, 0x071816FC, 0x210205EF, 0xFDFF0BFF);
	r0 = D(r0, s0_1_2, 0x0FF3F2F4, 0x0A0E0C08, 0xFD050927, 0x120AFBF4);
	r1 = D(r1, s0_1_2, 0x0E22F7FB, 0xFDFD0701, 0x03FEF3F1, 0x1701F90B);
	r2 = D(r2, s0_1_2, 0xC606ECF8, 0xF9FC0505, 0xF702E5E5, 0xF2FE07F2);
	r3 = D(r3, s0_1_2, 0x02E60F0F, 0x0405ECFD, 0x11F4FE19, 0x040E0A13);
	r4 = D(r4, s0_1_2, 0xF00BFD12, 0x0DFA0519, 0x05FEEDEF, 0x0E0A04F1);
	r5 = D(r5, s0_1_2, 0xEBCE1013, 0x07341467, 0xFFEFEC13, 0x14F9F4BF);
	r6 = D(r6, s0_1_2, 0x0FF8F8DD, 0xE2FA00F4, 0x07FB080C, 0xE3FB312B);
	r7 = D(r7, s0_1_2, 0x23FB0404, 0x120A1709, 0x14FD1007, 0xFBFF01FD);
	r0 = D(r0, s0_2_0, 0xF9EC07E6, 0x04F608F4, 0xF5F004EA, 0xE90406F7);
	r1 = D(r1, s0_2_0, 0xF6FE12F3, 0xFCFE0006, 0xEF03E607, 0xF413FBE9);
	r2 = D(r2, s0_2_0, 0xF011DCF0, 0xFE04FD00, 0x05F20500, 0x080E040A);
	r3 = D(r3, s0_2_0, 0xFDFC0712, 0x0C060C05, 0xF6FEDFED, 0xF8F8F7FA);
	r4 = D(r4, s0_2_0, 0xF7F9FBFB, 0x01FDF821, 0xF3021110, 0xF30A00E8);
	r5 = D(r5, s0_2_0, 0xDEF8FD04, 0xECC0F4C8, 0x161502F1, 0x0D15ED1E);
	r6 = D(r6, s0_2_0, 0x00EDF40A, 0xFF0910FD, 0x0B030407, 0x0901C71A);
	r7 = D(r7, s0_2_0, 0xFBFD01EC, 0x03050BF8, 0xFEFCFDF6, 0xFF020801);
	r0 = D(r0, s0_2_1, 0x1F020315, 0x08FC0B04, 0xF9F90101, 0xF0F6120A);
	r1 = D(r1, s0_2_1, 0xE6F709FA, 0x11F204F6, 0x160CFDED, 0xFC1BECF3);
	r2 = D(r2, s0_2_1, 0xD8F3F9ED, 0x00F10503, 0x0309041C, 0xE0F801CD);
	r3 = D(r3, s0_2_1, 0x1606F806, 0xFEF9FD00, 0xF0DECE0E, 0x04F9FFFF);
	r4 = D(r4, s0_2_1, 0xFDFCFF05, 0x030F0CE2, 0x04040DEE, 0xF5F7FAF6);
	r5 = D(r5, s0_2_1, 0xED0E15CE, 0xE924F64D, 0xECFB04F5, 0xC8000701);
	r6 = D(r6, s0_2_1, 0x1DF70306, 0xFE0E0B07, 0x08F60214, 0xEA4611DE);
	r7 = D(r7, s0_2_1, 0x030103EF, 0x12FB081B, 0x0AEF0905, 0x0209FF01);
	r0 = D(r0, s0_2_2, 0x010D0211, 0x02E90C04, 0xF1DAF9F3, 0xF6F9FA01);
	r1 = D(r1, s0_2_2, 0x0DFB04FB, 0x050CFF06, 0x06FBED0D, 0xF61301E7);
	r2 = D(r2, s0_2_2, 0xEDF10B17, 0xFE020102, 0x100AFAF9, 0xF8FC0708);
	r3 = D(r3, s0_2_2, 0x05FEF8FF, 0xFDFA0BFE, 0xFE1BFB09, 0x0BF3F507);
	r4 = D(r4, s0_2_2, 0x0D130401, 0x04E9F901, 0x0EFC06FE, 0x1408F11C);
	r5 = D(r5, s0_2_2, 0x06EFFF17, 0xFC1AD5EF, 0x04FBE9F7, 0xF3FD0C33);
	r6 = D(r6, s0_2_2, 0xFC16EBF1, 0x05FF0301, 0x040200F7, 0x1DFCEE18);
	r7 = D(r7, s0_2_2, 0x05F60408, 0x00F60BFE, 0x04F9FBF5, 0x04FDFAFA);
	r0 = D(r0, s1_0_0, 0xF8EE1CFA, 0x03F3F4FF, 0x0CF6FBF4, 0x03F4FEE9);
	r1 = D(r1, s1_0_0, 0xE602F40B, 0x0A010800, 0xF9F3EAE4, 0xFCF3F601);
	r2 = D(r2, s1_0_0, 0x00F20A0E, 0x03FEFCFC, 0x01EF1208, 0x0C00F602);
	r3 = D(r3, s1_0_0, 0xF0F8E814, 0x3DF492B9, 0x00160CF4, 0xF8F705FB);
	r4 = D(r4, s1_0_0, 0x00080E03, 0xFF030F02, 0x05F51109, 0x16FC0AEA);
	r5 = D(r5, s1_0_0, 0xFE0002DF, 0x5E27DAF7, 0x02F6F8F4, 0xFD0B0600);
	r6 = D(r6, s1_0_0, 0xE3F91305, 0x040507FC, 0xFDFF09FD, 0xACF020E5);
	r7 = D(r7, s1_0_0, 0x05F9F9FC, 0x05F403FF, 0x05FE1302, 0xFEFF01FF);
	r0 = D(r0, s1_0_1, 0x0A1207E5, 0x0200F8F7, 0x06FD1CDB, 0x1DF414FE);
	r1 = D(r1, s1_0_1, 0x09E60C04, 0x10101604, 0x0BF5F0DE, 0xE2080A02);
	r2 = D(r2, s1_0_1, 0xE7E8F7FB, 0x00FCF304, 0xE7E9FB05, 0xF90B0A0E);
	r3 = D(r3, s1_0_1, 0xE5F70617, 0x4862E6E1, 0x0F0F0425, 0xFFF9EF09);
	r4 = D(r4, s1_0_1, 0x0113F406, 0xEDF7FDF9, 0xFCD6F709, 0xE9FBD9F1);
	r5 = D(r5, s1_0_1, 0x011FFFF6, 0xF3021CE0, 0x08E6E40A, 0x14F8EEDF);
	r6 = D(r6, s1_0_1, 0xF2FC0412, 0xFBFC05FE, 0xFE050100, 0x2B0111E7);
	r7 = D(r7, s1_0_1, 0x0AFBE702, 0x0C04F903, 0x04070801, 0x01F8F20C);
	r0 = D(r0, s1_0_2, 0xEC06FE09, 0x17F91707, 0xF7FEFB0A, 0x07F2F006);
	r1 = D(r1, s1_0_2, 0xFDEEF6F8, 0xFB05F901, 0x0703070F, 0x090012FE);
	r2 = D(r2, s1_0_2, 0xF3F40007, 0x01FF02FF, 0x05FDF6F1, 0xFD03F0F6);
	r3 = D(r3, s1_0_2, 0x1B13FD06, 0xB8E48CEE, 0x1D1308EB, 0x090800F2);
	r4 = D(r4, s1_0_2, 0xF800FC0C, 0xF90215F0, 0x070515F9, 0xFE01F220);
	r5 = D(r5, s1_0_2, 0x05FDEEF2, 0xEBA92600, 0x0C26FA0B, 0x06EFFE12);
	r6 = D(r6, s1_0_2, 0x22FCEE07, 0xF9F804F7, 0x0912E303, 0xCC1902EA);
	r7 = D(r7, s1_0_2, 0xFE0E170C, 0xFD0A1701, 0x02060015, 0x0505FCFF);
	r0 = D(r0, s1_1_0, 0x16F80800, 0x0705F30D, 0x0B0DE1EC, 0xFC02E605);
	r1 = D(r1, s1_1_0, 0xFEFB1801, 0xEF0706FD, 0x070BF910, 0xFA021D02);
	r2 = D(r2, s1_1_0, 0xFE081FEE, 0xFE001B04, 0xF4FC1AE9, 0xF61BF4F3);
	r3 = D(r3, s1_1_0, 0x090200FC, 0xF7E122FE, 0xFAFB0105, 0x03F4FA0B);
	r4 = D(r4, s1_1_0, 0xF102F0ED, 0x05F903E1, 0xD40FF7F5, 0xFD0912F0);
	r5 = D(r5, s1_1_0, 0x01C334E0, 0x02F0FABE, 0x11060B0C, 0x0612FA0A);
	r6 = D(r6, s1_1_0, 0xDAF2F4F9, 0x03F800FB, 0xEEF7F8FD, 0x170DE1E0);
	r7 = D(r7, s1_1_0, 0x0301050E, 0x05F90A00, 0xFCFA0606, 0x010A0C07);
	r0 = D(r0, s1_1_1, 0xFE03E500, 0x00F7F7ED, 0x080908EF, 0xE5E6EFE6);
	r1 = D(r1, s1_1_1, 0xFF1607FB, 0x0006E800, 0x00060115, 0xF8DBEAFB);
	r2 = D(r2, s1_1_1, 0x103020FB, 0xFDF93A0C, 0xF8FEF104, 0x05FB0E23);
	r3 = D(r3, s1_1_1, 0xF4F6FCE9, 0x0B220FF6, 0x04F70E05, 0x0D042303);
	r4 = D(r4, s1_1_1, 0xF9013902, 0xF9FC10EC, 0x07D8071B, 0xFBD7F819);
	r5 = D(r5, s1_1_1, 0xF104FB18, 0xD6F0EDEA, 0xF7DEFA1C, 0x02F6F703);
	r6 = D(r6, s1_1_1, 0x1BEEF401, 0x0BF90AF7, 0xFBF4F206, 0xE9E8D40A);
	r7 = D(r7, s1_1_1, 0x0AF5F0E8, 0xFAF20BD9, 0xFCF21306, 0xFF04F20C);
	r0 = D(r0, s1_1_2, 0xE5F1050A, 0x09FAFE02, 0x02E30210, 0x130D0FF1);
	r1 = D(r1, s1_1_2, 0x06FD0501, 0xF605F3F9, 0x02FCF811, 0x09FE08F5);
	r2 = D(r2, s1_1_2, 0xFDFE06F1, 0x050307F5, 0xF204FEEE, 0xF60D00F6);
	r3 = D(r3, s1_1_2, 0x0602150F, 0xF30C1715, 0x06F7040B, 0x0DEB110F);
	r4 = D(r4, s1_1_2, 0xF90F0400, 0x0801E20B, 0xFA1BEF02, 0xF4FFE9FE);
	r5 = D(r5, s1_1_2, 0xE1F4F0FF, 0x1EE1CB1B, 0x0A06081F, 0xE70D0D04);
	r6 = D(r6, s1_1_2, 0x01150FFA, 0xFD11F6F9, 0xEB1712FD, 0x152A17F8);
	r7 = D(r7, s1_1_2, 0x10EC041E, 0xFBF3F601, 0xFBF5F90C, 0xFEFD0404);
	r0 = D(r0, s1_2_0, 0xDEF50204, 0xFFF0F20F, 0x08000311, 0x08050DF6);
	r1 = D(r1, s1_2_0, 0xF0FCFC0B, 0x09070205, 0xF5ECFEFE, 0xFB09FDF8);
	r2 = D(r2, s1_2_0, 0xF0FDF102, 0x0509030E, 0xFD0609F5, 0xF81503E7);
	r3 = D(r3, s1_2_0, 0x01FE04F7, 0xF5FBF60B, 0xFEF413E3, 0xFE06FFF5);
	r4 = D(r4, s1_2_0, 0xF7010309, 0xF3110000, 0xF1050306, 0xF6F7FAFB);
	r5 = D(r5, s1_2_0, 0x00031AF5, 0x0D3DE6E8, 0x01FDF6F9, 0xD0E5F5EC);
	r6 = D(r6, s1_2_0, 0xFD090C09, 0x09FD0405, 0xFFFFF20D, 0x1A0BDFF6);
	r7 = D(r7, s1_2_0, 0x000C0407, 0x10FE0B1A, 0x04F8FE09, 0xFF00FCF8);
	r0 = D(r0, s1_2_1, 0x0FDFE0E9, 0x0DF8F9F5, 0xFC01ECF7, 0x01FFFAF9);
	r1 = D(r1, s1_2_1, 0xFD07051C, 0x05010404, 0x0BF7F200, 0xF0F5F209);
	r2 = D(r2, s1_2_1, 0x080D0A20, 0xFE020C0B, 0x0CF3FB0C, 0xFEE7F707);
	r3 = D(r3, s1_2_1, 0xE808F100, 0xFAFDFB06, 0x0C27F7FC, 0x0C09EA01);
	r4 = D(r4, s1_2_1, 0x0D0B090C, 0xF60BFE29, 0x0B12F400, 0x0413F201);
	r5 = D(r5, s1_2_1, 0x07B7FDEF, 0xEFF5F900, 0xFAF801D7, 0x29DFFF20);
	r6 = D(r6, s1_2_1, 0x10B4EAFC, 0x0CF4FC07, 0xFAF406F8, 0x48E6E312);
	r7 = D(r7, s1_2_1, 0x04E4030A, 0x0EFF111A, 0x0610FB0C, 0x0500FFFF);
	r0 = D(r0, s1_2_2, 0x05E2170F, 0x0400FEFE, 0x050BF805, 0xF6FEF502);
	r1 = D(r1, s1_2_2, 0xFCF9F114, 0x06F0F6F7, 0x01F9FC07, 0xF2F8FA13);
	r2 = D(r2, s1_2_2, 0x1EFE0CF9, 0x04FE03FB, 0x080500F5, 0x070E0509);
	r3 = D(r3, s1_2_2, 0x020B0B02, 0x03ECFF0A, 0xEBED072F, 0xDD21F823);
	r4 = D(r4, s1_2_2, 0x1E01040C, 0x0605F814, 0x03010AE7, 0x00050308);
	r5 = D(r5, s1_2_2, 0xFF07FAF3, 0x01F102F3, 0xFD05FF05, 0xDFE7E5FF);
	r6 = D(r6, s1_2_2, 0x04FA111A, 0x02060502, 0xF11400FE, 0x020CFE10);
	r7 = D(r7, s1_2_2, 0xF1F307F8, 0xF7F5F9F5, 0xF5FD00FE, 0x0101FF06);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEAF81A24, 0xFCFD040A, 0x00F3FBFA, 0x071EFBEA);
	r1 = D(r1, s0_0_0, 0x1110ECFF, 0x05FFE700, 0xF5E40CF9, 0xFEF0ED0C);
	r2 = D(r2, s0_0_0, 0xF7FC130B, 0xFFFE0301, 0x0402FDFF, 0x010DFDF5);
	r3 = D(r3, s0_0_0, 0xF618FD0C, 0xE681EBF0, 0x0119F8F6, 0xEF11FC0F);
	r4 = D(r4, s0_0_0, 0xFC0E0BFC, 0x010102FE, 0x021AF303, 0x0A10EB00);
	r5 = D(r5, s0_0_0, 0x0E130702, 0xDC350840, 0x081DF7F1, 0xDDEF1918);
	r6 = D(r6, s0_0_0, 0x10B5ED29, 0xFAF9FB01, 0xFFF5FB0B, 0x1B09EDFE);
	r7 = D(r7, s0_0_0, 0x0606F70B, 0xFE050103, 0x0803FB0E, 0x01FE0400);
	r0 = D(r0, s0_0_1, 0xE9030F10, 0x10131F0E, 0x04FEFDFA, 0xE03614EF);
	r1 = D(r1, s0_0_1, 0xFCF8FB01, 0xF4FB0803, 0xFDEC1E11, 0xF6FB0EF8);
	r2 = D(r2, s0_0_1, 0xF7EFFA09, 0x01010803, 0x06F2FCFF, 0x03F106F3);
	r3 = D(r3, s0_0_1, 0xDF0817EC, 0x0C96C908, 0xFEF81400, 0xF7F90A07);
	r4 = D(r4, s0_0_1, 0xFAF7F9FB, 0xF3091116, 0xF813FAF2, 0xFC1EFD0F);
	r5 = D(r5, s0_0_1, 0x1A162100, 0x191FDCCD, 0x22F7ECFC, 0x10FDDF07);
	r6 = D(r6, s0_0_1, 0x01201501, 0x050B0405, 0x0EF4FFF4, 0xD313F2D5);
	r7 = D(r7, s0_0_1, 0xF4F706F0, 0xF0001D0D, 0xFFD8230A, 0xFE030202);
	r0 = D(r0, s0_0_2, 0xE003F103, 0xF0FD180B, 0xDB1A1818, 0xEFF60F09);
	r1 = D(r1, s0_0_2, 0xFC01091A, 0xF5F8FE02, 0xEEFA08ED, 0xEE07F609);
	r2 = D(r2, s0_0_2, 0xFD05FC10, 0x00FA05FD, 0x1218F10E, 0x0A010718);
	r3 = D(r3, s0_0_2, 0x22E6FB12, 0x13F4D6C1, 0x13CE0700, 0x15001805);
	r4 = D(r4, s0_0_2, 0x0CEDF8F7, 0x04FDF409, 0x05F7FEF8, 0x11121208);
	r5 = D(r5, s0_0_2, 0x06DEEF1D, 0xF21D4203, 0xF9FEF109, 0x00E7FCF5);
	r6 = D(r6, s0_0_2, 0x03070FEF, 0x03ECF702, 0x11EF0301, 0xF506253F);
	r7 = D(r7, s0_0_2, 0xEC100C07, 0xF1070EF7, 0xD0020006, 0x01FD04FB);
	r0 = D(r0, s0_1_0, 0x2C0313F1, 0x0C080C05, 0x0D04FE07, 0x14FA0DF0);
	r1 = D(r1, s0_1_0, 0x02F9E10A, 0xFEF600FF, 0xFC11FE28, 0xFC02FE04);
	r2 = D(r2, s0_1_0, 0xFEF0FCF7, 0x06020300, 0xF5FDED03, 0xE1F8E1F6);
	r3 = D(r3, s0_1_0, 0xF9FA0001, 0xEBFCF70C, 0x0DFB09FD, 0x11FF0CFF);
	r4 = D(r4, s0_1_0, 0x08FA050A, 0xF70B03FF, 0xECF104FE, 0x04F6DB05);
	r5 = D(r5, s0_1_0, 0x03EDE3FF, 0x090018D1, 0x03EE0FFE, 0xF712F433);
	r6 = D(r6, s0_1_0, 0x09F31104, 0xFE01FAF9, 0x00FB0C0E, 0x14F3ED10);
	r7 = D(r7, s0_1_0, 0x08F9F7FB, 0x0EFFF9F4, 0x01FE0105, 0x0005FC05);
	r0 = D(r0, s0_1_1, 0xFDF502B8, 0x1AFEFDEF, 0xF4E3F2EB, 0xEC0FF5F4);
	r1 = D(r1, s0_1_1, 0x1107ED08, 0x1314F003, 0x3A12D2ED, 0x15F2DD0E);
	r2 = D(r2, s0_1_1, 0x11D10310, 0x0D0400FD, 0x07E60F19, 0x0FFC170C);
	r3 = D(r3, s0_1_1, 0x11D2F2F8, 0x2DF8EF16, 0x0106F221, 0x1CF30DE2);
	r4 = D(r4, s0_1_1, 0xFEEFEC19, 0xF8DBFC16, 0x1906FD0A, 0x20F30E06);
	r5 = D(r5, s0_1_1, 0xAE25F814, 0xEC3304DD, 0x0EF3051D, 0x14121CF1);
	r6 = D(r6, s0_1_1, 0xD226EE03, 0xF921E6E7, 0x01140708, 0xD1050817);
	r7 = D(r7, s0_1_1, 0x2907FDF9, 0x07F9F004, 0x0BF91105, 0x070AFA03);
	r0 = D(r0, s0_1_2, 0x1F010116, 0xF4FBE30B, 0xF7FC1F08, 0x07F5F015);
	r1 = D(r1, s0_1_2, 0xFFFB0205, 0x130205FC, 0xE6100903, 0xED0709FA);
	r2 = D(r2, s0_1_2, 0x03E5EDEA, 0xFFFB03FF, 0x1C11FBF6, 0x2113FF07);
	r3 = D(r3, s0_1_2, 0x07EAF7FD, 0xF602FE0D, 0xF3EEECFD, 0xBCDB01FC);
	r4 = D(r4, s0_1_2, 0x0906F70A, 0xF908FEFA, 0xFA0508F3, 0x00E918F6);
	r5 = D(r5, s0_1_2, 0x07080FFD, 0x0F9F29FC, 0xFCFAFDE6, 0x04B900F0);
	r6 = D(r6, s0_1_2, 0xF509DCED, 0x16F9121C, 0xFC0C0308, 0x22DE10F1);
	r7 = D(r7, s0_1_2, 0xBCFCFAF8, 0xF8F8F6FA, 0xEBECE7FC, 0xFC01F30C);
	r0 = D(r0, s0_2_0, 0xEE090AFB, 0xFA0C020D, 0x0E14040E, 0xF6FEEE0C);
	r1 = D(r1, s0_2_0, 0xF9F1F7E1, 0xFFF21005, 0xFCFE0815, 0xE806170A);
	r2 = D(r2, s0_2_0, 0xFB1807FD, 0x09020306, 0xFEFB000B, 0xF6FEF6F4);
	r3 = D(r3, s0_2_0, 0x070E0BF2, 0xFE1016FD, 0x18EEFBF2, 0x04FA0BFF);
	r4 = D(r4, s0_2_0, 0x05100D07, 0x00FD10FC, 0x0B15FB03, 0xF5F713F9);
	r5 = D(r5, s0_2_0, 0xF80FF80C, 0x09F6E02F, 0x07EE1B03, 0x1DD50705);
	r6 = D(r6, s0_2_0, 0xDD24F4F8, 0xFCF404FD, 0x0B040005, 0xEB23DAE0);
	r7 = D(r7, s0_2_0, 0x030302F2, 0x0FFD0DFC, 0x0808FC04, 0xFEF601FF);
	r0 = D(r0, s0_2_1, 0x1E0DE9DF, 0xF6EEFE04, 0x2EF2F407, 0x15FD000A);
	r1 = D(r1, s0_2_1, 0xFF0C08F9, 0x06FB0502, 0x06F0F9F6, 0x050D0BDE);
	r2 = D(r2, s0_2_1, 0x0FF814F4, 0x01020101, 0xF6061E15, 0xE4ED0CF9);
	r3 = D(r3, s0_2_1, 0x0AE5FA06, 0x040FFB1F, 0x0E20F8F9, 0x1FF2E70A);
	r4 = D(r4, s0_2_1, 0x02F8F510, 0xFA050519, 0xF7EEE8FF, 0x030D04F1);
	r5 = D(r5, s0_2_1, 0x1FF715FE, 0xF621D9F6, 0xED0CFB06, 0xEA2BDAE5);
	r6 = D(r6, s0_2_1, 0xF018FF06, 0x020BFDFE, 0x0B01F603, 0x0B10B9EA);
	r7 = D(r7, s0_2_1, 0x140509F9, 0x07050406, 0x0C0704F6, 0x0305FF00);
	r0 = D(r0, s0_2_2, 0x04FAF1F1, 0xF1FCFA06, 0x030CFDFC, 0x0EF6F405);
	r1 = D(r1, s0_2_2, 0xFBFF0611, 0x00070701, 0xFAFCEE13, 0x031416DA);
	r2 = D(r2, s0_2_2, 0x0CFFFA13, 0x02FFFAFD, 0x03EF0BFB, 0x0D0B05F8);
	r3 = D(r3, s0_2_2, 0xF3240708, 0xF5060B0A, 0xE91709E4, 0xEB08E2FA);
	r4 = D(r4, s0_2_2, 0x04FC040E, 0xFDEEF9FE, 0x18FA0801, 0xFF0C0522);
	r5 = D(r5, s0_2_2, 0x0DF70AF8, 0x12C6D001, 0xE8F909FA, 0x28FA13E3);
	r6 = D(r6, s0_2_2, 0xEDDDF6FB, 0x02FF01F3, 0xFCF8040A, 0xE6F71220);
	r7 = D(r7, s0_2_2, 0xF8F7F610, 0x0506F6FB, 0x0B040902, 0x00000500);
	r0 = D(r0, s1_0_0, 0x03F74205, 0x00FC9CFA, 0x07FCF8F8, 0xFEF901F0);
	r1 = D(r1, s1_0_0, 0xF7FF28FF, 0x01FC10FA, 0x03185D08, 0x04F34C0D);
	r2 = D(r2, s1_0_0, 0x010B0EF3, 0x06FEF9FD, 0xEFF57FFD, 0xF6191507);
	r3 = D(r3, s1_0_0, 0xF8FAE5EF, 0xA63A08FE, 0xEEE459F2, 0x01F23908);
	r4 = D(r4, s1_0_0, 0x05FCF200, 0xEBFF080D, 0x0000A6E9, 0xFFFA330E);
	r5 = D(r5, s1_0_0, 0xF9FE81FE, 0x0B1081C8, 0x07011413, 0xEFECB80C);
	r6 = D(r6, s1_0_0, 0xFDF64E07, 0xFF00D004, 0x00FC7FF8, 0xF7EFEFFD);
	r7 = D(r7, s1_0_0, 0x0BFC8103, 0xFC01B702, 0xF5092E00, 0x04FF1BFA);
	r0 = D(r0, s1_0_1, 0x0FEC213E, 0x0A142002, 0xF70CFEFD, 0x0811F8F8);
	r1 = D(r1, s1_0_1, 0x1D140B03, 0xF4FAF3FB, 0x160C2502, 0x06F5EB07);
	r2 = D(r2, s1_0_1, 0x09F3FA13, 0xFD020708, 0x04F7DE07, 0x0406EF06);
	r3 = D(r3, s1_0_1, 0xF8FF441A, 0xE809EF20, 0xF80ABF19, 0xF1060919);
	r4 = D(r4, s1_0_1, 0xEE04DB01, 0xF2181311, 0x09040810, 0x06F32A08);
	r5 = D(r5, s1_0_1, 0xBCEEF500, 0x840CE602, 0xF7F22F12, 0xDFFB25F9);
	r6 = D(r6, s1_0_1, 0x14072E1B, 0x04031B04, 0x0AFDF802, 0x0FDE1112);
	r7 = D(r7, s1_0_1, 0xEF0FE6FF, 0xF0FEFC04, 0xEA02E5F6, 0x03FD0D06);
	r0 = D(r0, s1_0_2, 0xEEF9FBFA, 0xF3FF04FC, 0xF4F709FA, 0x020F05F5);
	r1 = D(r1, s1_0_2, 0x0F08FB05, 0x09020801, 0xEF1304ED, 0x00011203);
	r2 = D(r2, s1_0_2, 0xEF04FB04, 0xFC02FF00, 0x0AFA00FB, 0xFFF70B09);
	r3 = D(r3, s1_0_2, 0xF1FAF4FB, 0xE4AA76B4, 0x0B0511F6, 0x060D0A00);
	r4 = D(r4, s1_0_2, 0x04070BF3, 0xF20015F5, 0xFD0B18F8, 0x1002F9F9);
	r5 = D(r5, s1_0_2, 0x180C1908, 0xF6FD81F7, 0xFE0408F3, 0xD028DAF1);
	r6 = D(r6, s1_0_2, 0xF40305F4, 0x06000600, 0x10FEFFFB, 0xED460A09);
	r7 = D(r7, s1_0_2, 0x0A14F916, 0x0FFF0615, 0x11FE000D, 0xFDFFFEFF);
	r0 = D(r0, s1_1_0, 0xF53254E3, 0xF0043510, 0x0510C311, 0x1607FC20);
	r1 = D(r1, s1_1_0, 0x071B1AF5, 0x14FB1EF2, 0x12F0E4FE, 0x14EAE8EA);
	r2 = D(r2, s1_1_0, 0xF50020F6, 0x020003F8, 0xF20FDD00, 0x170DDCF3);
	r3 = D(r3, s1_1_0, 0xF3037F12, 0xFC060D07, 0xE1FFED1E, 0xF903EF01);
	r4 = D(r4, s1_1_0, 0x02FDE402, 0xF5FFEBF6, 0xFD09F305, 0xFCEB1903);
	r5 = D(r5, s1_1_0, 0xEE04BCDE, 0x019F81EA, 0x04F9EC01, 0x13E31403);
	r6 = D(r6, s1_1_0, 0xF4F01EEE, 0x02F6EB01, 0x0DF6E4FC, 0x15FED2F8);
	r7 = D(r7, s1_1_0, 0xF4FB1CFC, 0xFBF641FB, 0xFCF8FC00, 0xFD04F0F8);
	r0 = D(r0, s1_1_1, 0x380AF20C, 0x36F41016, 0x43E61D06, 0x0CF40EEB);
	r1 = D(r1, s1_1_1, 0x06220BF1, 0x19090805, 0x10200201, 0xE9E51404);
	r2 = D(r2, s1_1_1, 0xDA22E3CE, 0xE5FA0605, 0xEAFD100C, 0xEDFDEE02);
	r3 = D(r3, s1_1_1, 0xFDFBC30A, 0xA9EB0100, 0xF6FA04D4, 0xD6E0CEE1);
	r4 = D(r4, s1_1_1, 0xFE05380A, 0xFAFCD5FD, 0xF2E709EB, 0x05EBFB0B);
	r5 = D(r5, s1_1_1, 0x0B22F6F8, 0x18C83B2A, 0xE0D024FD, 0x10ED2A18);
	r6 = D(r6, s1_1_1, 0xE20D1B21, 0x08F6320B, 0x1DFF25F9, 0x09FF242E);
	r7 = D(r7, s1_1_1, 0xF0F316F2, 0x150400FE, 0xFCEC20F4, 0xE7FEFEFB);
	r0 = D(r0, s1_1_2, 0xD8FE0BFE, 0x09FB02FD, 0x090D0B02, 0xF4F60E0A);
	r1 = D(r1, s1_1_2, 0x07F0F6FB, 0xFCF9EC0A, 0xF3F8EC0F, 0xEEF90206);
	r2 = D(r2, s1_1_2, 0x00ECE509, 0x11FEFFFE, 0xF6090F0B, 0xEAFBE8E8);
	r3 = D(r3, s1_1_2, 0x0307E5F6, 0x3FF40D08, 0x0F0B0AFE, 0x0B26F8F1);
	r4 = D(r4, s1_1_2, 0xF101EC04, 0x140EF8F5, 0xF3E2F811, 0xED000005);
	r5 = D(r5, s1_1_2, 0xFEF71419, 0x1E248115, 0x100E18F9, 0x0305EB00);
	r6 = D(r6, s1_1_2, 0x1813F7F9, 0x0AFB0BF9, 0x0112FDF5, 0x05C11DCA);
	r7 = D(r7, s1_1_2, 0x451A1713, 0x1EFA0B11, 0x2502EF0F, 0x1BFA04FF);
	r0 = D(r0, s1_2_0, 0x0AFCC8F8, 0xF4F304FC, 0x08F42800, 0xFA0902F8);
	r1 = D(r1, s1_2_0, 0xE8FB2502, 0xFFF61F0B, 0x09FB0605, 0x0206E3FC);
	r2 = D(r2, s1_2_0, 0x1327F503, 0xFE04FEFA, 0xED0CCC07, 0xFC16EC03);
	r3 = D(r3, s1_2_0, 0x1008E4F6, 0x0B178104, 0x2CFF4F11, 0x1906F304);
	r4 = D(r4, s1_2_0, 0x1003DA00, 0x0FFDED16, 0xFC082BFD, 0x0908010B);
	r5 = D(r5, s1_2_0, 0xF803D109, 0xD7F18118, 0x07DBD20D, 0x00158CFD);
	r6 = D(r6, s1_2_0, 0xE7D081F3, 0xF6FF060D, 0xFCFBFF0C, 0x10F81CEB);
	r7 = D(r7, s1_2_0, 0xF8FAE900, 0x00FE150B, 0xFB0A010A, 0x05FA0103);
	r0 = D(r0, s1_2_1, 0x0104EEE5, 0xFAFDFF02, 0xFFFDFBFC, 0xE621FE0C);
	r1 = D(r1, s1_2_1, 0xE8FEF809, 0xFF0008FA, 0x15071505, 0x0D0AF6FC);
	r2 = D(r2, s1_2_1, 0x17E20F03, 0x03020D05, 0x020521F2, 0x0C020C00);
	r3 = D(r3, s1_2_1, 0x15DC19FF, 0x0F09F005, 0x00072F14, 0x12FA0211);
	r4 = D(r4, s1_2_1, 0x09F803F7, 0x27F416F6, 0x02F60311, 0x0FF9FAF0);
	r5 = D(r5, s1_2_1, 0xFBFBF7FE, 0xC1DDFA3A, 0x1332170C, 0xF428C197);
	r6 = D(r6, s1_2_1, 0x00D3F3EA, 0xEB0EF702, 0x0317F308, 0xFECEEDF1);
	r7 = D(r7, s1_2_1, 0xE0DF2303, 0xEEEBF20B, 0xF7F6FB03, 0x0103FEFC);
	r0 = D(r0, s1_2_2, 0x0D1DF8E9, 0xF50FFEF9, 0x10FFEBFF, 0xFD0CFEFD);
	r1 = D(r1, s1_2_2, 0xF4FFFEF5, 0xFEF1F70C, 0xEE0AF6FC, 0xFDF911FC);
	r2 = D(r2, s1_2_2, 0x00F1F507, 0xFFF9FBFE, 0x0305FC19, 0xFEDEF302);
	r3 = D(r3, s1_2_2, 0x171318F8, 0x00FF0004, 0x16040516, 0x171AF3F0);
	r4 = D(r4, s1_2_2, 0x0E020FFB, 0x110312FD, 0x01FEF711, 0x100102E3);
	r5 = D(r5, s1_2_2, 0x0CEF0802, 0xE4F081E9, 0x15F50C12, 0x0BEE3203);
	r6 = D(r6, s1_2_2, 0x141703F8, 0xF8FE01FB, 0x0FFDFC01, 0x0C9510F7);
	r7 = D(r7, s1_2_2, 0xF51DEE04, 0x0018FE0A, 0x0FFFF709, 0x05010000);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1B1120F6, 0xF40BEF05, 0xF309E900, 0xF30708FF);
	r1 = D(r1, s0_0_0, 0xF7F4F0EA, 0x06FFFB04, 0xEB0BF607, 0xFB00E4F8);
	r2 = D(r2, s0_0_0, 0xF004070B, 0x06060202, 0xF2F80704, 0xFF0E0BF9);
	r3 = D(r3, s0_0_0, 0x04FFF906, 0xF7F211EA, 0x09EB15EE, 0x01F5FD04);
	r4 = D(r4, s0_0_0, 0x0700FDFE, 0x05FB10FC, 0xF2F9E509, 0xE9E6DE14);
	r5 = D(r5, s0_0_0, 0xEC14F708, 0xE10ABDBB, 0xF20FF6FA, 0xFEE81B14);
	r6 = D(r6, s0_0_0, 0x170A19EB, 0x010002FC, 0x04060F09, 0xF9EADEFE);
	r7 = D(r7, s0_0_0, 0xF902F2FF, 0x0609EB03, 0x0A080006, 0x07080202);
	r0 = D(r0, s0_0_1, 0x10F5F207, 0x0C0D01F6, 0xF4000311, 0x03191024);
	r1 = D(r1, s0_0_1, 0x1B0A1004, 0x18F2FBF5, 0x15280414, 0x0C14F1E3);
	r2 = D(r2, s0_0_1, 0xF2F6E925, 0x0FFF0614, 0x08031200, 0x0A020901);
	r3 = D(r3, s0_0_1, 0x0DFBF3F4, 0x42E4F1EF, 0xFA02EEF5, 0xFE0707FD);
	r4 = D(r4, s0_0_1, 0xED01FDF9, 0xECFA18ED, 0x0417FA0E, 0xF8F9DFF0);
	r5 = D(r5, s0_0_1, 0x011CDEDB, 0x1025D4DD, 0xF517F1EE, 0x0E264E0A);
	r6 = D(r6, s0_0_1, 0xFF1EFDEA, 0x020813F7, 0xE6F111E6, 0x05FCE5DD);
	r7 = D(r7, s0_0_1, 0xE00BBC0A, 0xF6F7CDFD, 0xE9FF0901, 0x10000820);
	r0 = D(r0, s0_0_2, 0xF4DDFC00, 0xFB08FB0C, 0xF702E300, 0xFF080D03);
	r1 = D(r1, s0_0_2, 0x0E0B020B, 0x04F4FBF5, 0x02FCF008, 0x0505ED05);
	r2 = D(r2, s0_0_2, 0xF905F207, 0xFB06FE00, 0xF6FA2109, 0xFFFCFDF4);
	r3 = D(r3, s0_0_2, 0xFA05FA04, 0x62B7E339, 0x04E4E0FE, 0x07FDFF0C);
	r4 = D(r4, s0_0_2, 0x08F7F901, 0xFCF6110E, 0xF4F1F90B, 0x20EB09EC);
	r5 = D(r5, s0_0_2, 0xF9EBE10C, 0xE719B319, 0x08FFC7ED, 0xFA21320C);
	r6 = D(r6, s0_0_2, 0x09F4F3FE, 0x00000407, 0x0A02F8FA, 0x0B27E50C);
	r7 = D(r7, s0_0_2, 0xF71522FC, 0xF1070DF6, 0xE9EB02F4, 0x01080005);
	r0 = D(r0, s0_1_0, 0x1613F2EF, 0x23EDFBFE, 0x00F0EA0D, 0x02FF0AF6);
	r1 = D(r1, s0_1_0, 0xF1FBF904, 0x1303FEEF, 0x00FF0AF9, 0x10FBDBF4);
	r2 = D(r2, s0_1_0, 0x01F8E8FB, 0x120502EC, 0x05070DF4, 0x1C0BFBF1);
	r3 = D(r3, s0_1_0, 0x14F6FAF3, 0x1B0E0EEE, 0xDDE1C601, 0xFEEDF906);
	r4 = D(r4, s0_1_0, 0x00030902, 0x11FA0CFB, 0x2201FBE4, 0x1FEFED03);
	r5 = D(r5, s0_1_0, 0xCAFFE422, 0xCCFC170D, 0xFA04F6E4, 0x03D9111B);
	r6 = D(r6, s0_1_0, 0xF9DC0211, 0x0EFAFD12, 0x07FCFC04, 0x0CE4DEF8);
	r7 = D(r7, s0_1_0, 0x0104FEF5, 0x040FFEE1, 0xEC08FBF7, 0x0BFF0100);
	r0 = D(r0, s0_1_1, 0xFA0E070F, 0x0E1BF2FA, 0xF209EF03, 0xF9FEF710);
	r1 = D(r1, s0_1_1, 0xB7270F09, 0x2006FE10, 0x0015E40B, 0xDB01F72A);
	r2 = D(r2, s0_1_1, 0xF7E9F1DD, 0x01FCFEF1, 0x23DFECFA, 0x201A1701);
	r3 = D(r3, s0_1_1, 0xD71C0F12, 0xA0FA1146, 0xEA01E9FA, 0xE008E5FB);
	r4 = D(r4, s0_1_1, 0xFDFE03D8, 0x08270AFC, 0x0404040A, 0xF2FC0A11);
	r5 = D(r5, s0_1_1, 0x0E260DFC, 0xF6FB0829, 0xC1FFE4FE, 0x1910041E);
	r6 = D(r6, s0_1_1, 0x17100FFF, 0x49F804FD, 0x1DFDF0F8, 0x081C11EC);
	r7 = D(r7, s0_1_1, 0xCFF5FA1C, 0xD507D313, 0xC10EEE22, 0xFF020329);
	r0 = D(r0, s0_1_2, 0xF2050FF6, 0x01EC00FF, 0x10F4F512, 0x09E50810);
	r1 = D(r1, s0_1_2, 0x020E01FF, 0xFC07EC0D, 0x0D0005F4, 0xFC15180B);
	r2 = D(r2, s0_1_2, 0x06E3EBF5, 0x000AFA03, 0x04090F14, 0xF908ED00);
	r3 = D(r3, s0_1_2, 0xFD0A1E05, 0xF31D0F0A, 0xFD2A21F8, 0xFC2610E7);
	r4 = D(r4, s0_1_2, 0x06011603, 0x07020118, 0x0AE8E304, 0xFE06E7F3);
	r5 = D(r5, s0_1_2, 0x06EBFB15, 0xF40FB21D, 0x1714F405, 0xDB28DB11);
	r6 = D(r6, s0_1_2, 0x07FC2D0F, 0x0AFCF309, 0xF6EA0818, 0xF1CEF703);
	r7 = D(r7, s0_1_2, 0xFCDEFBE9, 0xFFF6E8F3, 0xF9E9F1EA, 0x05FF0801);
	r0 = D(r0, s0_2_0, 0xDB21CC00, 0x01DBF2F9, 0xFBE9FEF8, 0x000CFA13);
	r1 = D(r1, s0_2_0, 0x06EE0DFA, 0x0E01FFF0, 0x08F6F605, 0x02F3F102);
	r2 = D(r2, s0_2_0, 0xFE060C02, 0xFBFA0408, 0xF2F9FE06, 0x010614F5);
	r3 = D(r3, s0_2_0, 0xEDF70A08, 0xFA0004FB, 0xF2032318, 0xFAFD0FFF);
	r4 = D(r4, s0_2_0, 0x060705FB, 0xF41204FA, 0xEC02F90D, 0xED0B06F8);
	r5 = D(r5, s0_2_0, 0x0802F206, 0xF9FBFC00, 0x05E711E0, 0x150ECCC0);
	r6 = D(r6, s0_2_0, 0xE0E9021C, 0x04FBFAFA, 0xFCF60AF6, 0x0910D31D);
	r7 = D(r7, s0_2_0, 0xF3FAF20E, 0xEB000C03, 0xF8FE0800, 0x08FFFEF7);
	r0 = D(r0, s0_2_1, 0x192320EF, 0x06EEE2F1, 0x09E5DEF2, 0x10FC0CFD);
	r1 = D(r1, s0_2_1, 0x11101AF3, 0x0DFFFF00, 0x111510FE, 0x1C1AE403);
	r2 = D(r2, s0_2_1, 0x1303FD0C, 0x1504FC00, 0xF2E3F506, 0xFFEB0D02);
	r3 = D(r3, s0_2_1, 0xFBED0900, 0x140B0A08, 0x0F130DFD, 0xF430F0FE);
	r4 = D(r4, s0_2_1, 0xE5FDF316, 0xFE080DFE, 0x04FCFAF4, 0x11030AFA);
	r5 = D(r5, s0_2_1, 0xF534AAF6, 0x0A18BA0B, 0xF20C0703, 0xCBC9E2E4);
	r6 = D(r6, s0_2_1, 0xE1FE12D7, 0xFF020600, 0x05030107, 0x09F9A2E8);
	r7 = D(r7, s0_2_1, 0xFDFBFCFF, 0xE2F21612, 0xF6020D03, 0xF5FC0309);
	r0 = D(r0, s0_2_2, 0x0FF20C02, 0x0709F605, 0x000C0408, 0x05F90DFB);
	r1 = D(r1, s0_2_2, 0x070707F7, 0x0302F8F3, 0xFA05F7F9, 0xFEEFEFFB);
	r2 = D(r2, s0_2_2, 0xEC05F9FF, 0x0004FF03, 0x08F60BFC, 0x0CE80A01);
	r3 = D(r3, s0_2_2, 0x04F52CF3, 0xF609070C, 0x00FC09EB, 0x0AF00203);
	r4 = D(r4, s0_2_2, 0xFDEE0400, 0x0608FFEF, 0xFBF7060B, 0xFF171AF4);
	r5 = D(r5, s0_2_2, 0x09F3DE01, 0x3025EC11, 0x06040913, 0x020081C0);
	r6 = D(r6, s0_2_2, 0xFF160D12, 0xFF0CF911, 0xF6FD0E03, 0x0B1FFAFC);
	r7 = D(r7, s0_2_2, 0xFEFCFD09, 0xF702ED05, 0x00FBF4FC, 0x0201FF01);
	r0 = D(r0, s1_0_0, 0x0FEAE610, 0xF0061014, 0xF403FFF9, 0x08101904);
	r1 = D(r1, s1_0_0, 0x100500F9, 0x09FAF8F9, 0x0F00FDFE, 0xFF1A0AEA);
	r2 = D(r2, s1_0_0, 0x03F4EF17, 0xFEFFFE02, 0xEEFEFFFA, 0xEF03130F);
	r3 = D(r3, s1_0_0, 0xEA091912, 0x4425BD27, 0xF80DE900, 0xFEFEEC04);
	r4 = D(r4, s1_0_0, 0xFE05FF05, 0x060EF0ED, 0x06FC070C, 0x0C0AF6F8);
	r5 = D(r5, s1_0_0, 0x0133E1E3, 0x9C0C082A, 0xF225ECE8, 0x211C04F2);
	r6 = D(r6, s1_0_0, 0x170D0101, 0x07010204, 0xFCFC04F7, 0x10F01703);
	r7 = D(r7, s1_0_0, 0x07FC09FF, 0x0CF1F10B, 0x0DF6F3EC, 0xFA000001);
	r0 = D(r0, s1_0_1, 0xFF10FCFF, 0x22EE0B12, 0x0DEEFEF6, 0xE71303F8);
	r1 = D(r1, s1_0_1, 0x18FDF6FD, 0xF608F508, 0x12F813EE, 0xFFEB1BEF);
	r2 = D(r2, s1_0_1, 0xF32EFC03, 0x0204FE01, 0x061B08FE, 0x050E000C);
	r3 = D(r3, s1_0_1, 0x0A0EF3FA, 0x12A4C81B, 0x0501BF0F, 0xF929E9FE);
	r4 = D(r4, s1_0_1, 0xF506F50C, 0xEA0A0B04, 0x070400F7, 0xF8E8F0ED);
	r5 = D(r5, s1_0_1, 0x10150F02, 0x40EF95FB, 0x02F8F3F2, 0xF9F0F9FA);
	r6 = D(r6, s1_0_1, 0x0FF5FB0C, 0xFEE2FBFE, 0x080707F7, 0xDEFCF115);
	r7 = D(r7, s1_0_1, 0xF3FD01F3, 0x04EF06FF, 0xFFF4F513, 0x05100003);
	r0 = D(r0, s1_0_2, 0x03FE1804, 0xF304F502, 0xF7140714, 0x0CF902EF);
	r1 = D(r1, s1_0_2, 0xF2F703FE, 0xFEFD05FC, 0xF4170E05, 0x050012FD);
	r2 = D(r2, s1_0_2, 0x11F70106, 0xFB07FF01, 0x05EE0AF3, 0x00E50B03);
	r3 = D(r3, s1_0_2, 0xFE0CF104, 0x1CDBA41D, 0x09D114F6, 0x0B070101);
	r4 = D(r4, s1_0_2, 0x02F40903, 0xF90504FD, 0x01160C01, 0x0C24EC09);
	r5 = D(r5, s1_0_2, 0x0AE518F4, 0x0B23FEEF, 0x10FEF411, 0xF603E80F);
	r6 = D(r6, s1_0_2, 0x170FFBF4, 0x0D050200, 0xF804F602, 0x3114B1FE);
	r7 = D(r7, s1_0_2, 0xF31BEC07, 0xFB12F9FA, 0xEA1D0607, 0xF707FB04);
	r0 = D(r0, s1_1_0, 0x16FF0B05, 0xFBF3F60D, 0x1DF3E82A, 0xEF020F0B);
	r1 = D(r1, s1_1_0, 0xEB02F3F1, 0x0B08EEE8, 0xF014ECE1, 0xFA0201EF);
	r2 = D(r2, s1_1_0, 0xFFF1DC0A, 0xFEFC00FD, 0xF017F305, 0x0706080D);
	r3 = D(r3, s1_1_0, 0x0C090711, 0xFB020907, 0x0AF5D2E4, 0x28F8FBFD);
	r4 = D(r4, s1_1_0, 0x0005F7EE, 0x010AFFFD, 0x00F5EF22, 0x00090D1A);
	r5 = D(r5, s1_1_0, 0x0E12F0EE, 0x85EE0781, 0x041115D5, 0x35EB0225);
	r6 = D(r6, s1_1_0, 0xDA10F00F, 0xF6FA060D, 0x0601FDF8, 0x0BE91212);
	r7 = D(r7, s1_1_0, 0x0AF4F0FB, 0xF812FEEE, 0x0208FEF5, 0x03FBFEFA);
	r0 = D(r0, s1_1_1, 0xED03FA10, 0x10F7020B, 0x06F9FBE6, 0x09FAF5F3);
	r1 = D(r1, s1_1_1, 0xFE11F800, 0x040820ED, 0x01F6F4ED, 0x0BFEEBFC);
	r2 = D(r2, s1_1_1, 0x13E9F801, 0x090B0E04, 0xF7F10D04, 0xF60910F9);
	r3 = D(r3, s1_1_1, 0x0AF1D7EB, 0xFA0BE2DD, 0x01E807BD, 0xDB07DFF1);
	r4 = D(r4, s1_1_1, 0xF701E4FB, 0xF2F10F24, 0x02FFF213, 0x0BF7EBFF);
	r5 = D(r5, s1_1_1, 0xF9CA32C7, 0x18B5F3C1, 0xEDDB09DF, 0xF1F615F6);
	r6 = D(r6, s1_1_1, 0xF6CCF514, 0x0FF70205, 0xF1ECFA03, 0xD1BF0FC3);
	r7 = D(r7, s1_1_1, 0xED11EB11, 0xFB0C0102, 0x0118FBE9, 0xFCF201FF);
	r0 = D(r0, s1_1_2, 0x0105F3E8, 0x02F4F00D, 0x003BF107, 0x060EEEFB);
	r1 = D(r1, s1_1_2, 0x06EFF0F5, 0x04F60E0B, 0x00FDE412, 0xFDFEF8EE);
	r2 = D(r2, s1_1_2, 0x07FB0D19, 0xF703FA05, 0x07FED9FB, 0x09FEEA0A);
	r3 = D(r3, s1_1_2, 0x02FD0A0C, 0xCBF7FC0E, 0xEF29FD00, 0xDB06ED0D);
	r4 = D(r4, s1_1_2, 0x0BE00F0E, 0x1203F70B, 0xFCF2F501, 0x1DF31AFB);
	r5 = D(r5, s1_1_2, 0x0FE8EB17, 0x171F23E8, 0x050D0220, 0x1A0BED0C);
	r6 = D(r6, s1_1_2, 0xEEFEF200, 0x0101EEFA, 0xF8F605F8, 0xE321FB23);
	r7 = D(r7, s1_1_2, 0x13E620F9, 0x00FB0FFD, 0x05FD0A0E, 0x0CF705FD);
	r0 = D(r0, s1_2_0, 0x09F9FDF4, 0x02F8051D, 0x07000605, 0xFCF7F4F7);
	r1 = D(r1, s1_2_0, 0x01010210, 0x0502FB01, 0xF9ED0123, 0xF6010311);
	r2 = D(r2, s1_2_0, 0x000805C2, 0x00F90101, 0x09FDF6FF, 0x030F09EA);
	r3 = D(r3, s1_2_0, 0x12FDF703, 0x0303F6EF, 0xFEEAEAB7, 0xFCFE11E6);
	r4 = D(r4, s1_2_0, 0xF6000101, 0x080DF4E4, 0x080608F5, 0x101E04F4);
	r5 = D(r5, s1_2_0, 0xFA06F61C, 0xFDEDEED9, 0x0502F0FF, 0x3E0907DD);
	r6 = D(r6, s1_2_0, 0x03FC2524, 0xFAFD031F, 0x04051002, 0xFE221632);
	r7 = D(r7, s1_2_0, 0xF9F9121D, 0xFCF2FF1A, 0x0BFE0303, 0x02000002);
	r0 = D(r0, s1_2_1, 0x0C0003DA, 0xFCFC08FD, 0x0205F6E2, 0x130902F3);
	r1 = D(r1, s1_2_1, 0x01F11C10, 0xF50E080E, 0x060C14FC, 0x02F6110F);
	r2 = D(r2, s1_2_1, 0xFFFB06FE, 0xF8000302, 0x0E0CF113, 0xFC01F6F6);
	r3 = D(r3, s1_2_1, 0x09050EE4, 0xF1FAFF03, 0xFE130BE0, 0x13FBE8EC);
	r4 = D(r4, s1_2_1, 0xFF09FC08, 0xF6F10F08, 0x030E0A11, 0xEFF2FEFA);
	r5 = D(r5, s1_2_1, 0xF6F1ED01, 0x44F2EA65, 0xF4F915E7, 0x0DEFDBB7);
	r6 = D(r6, s1_2_1, 0xF900D4CB, 0xF30302F7, 0xF610FE12, 0xF0D2EBFE);
	r7 = D(r7, s1_2_1, 0xFD08FD15, 0x0102FF0E, 0x03FA0C05, 0x050001F9);
	r0 = D(r0, s1_2_2, 0xF408051B, 0x0102FC12, 0xEDF30503, 0x0303F8FA);
	r1 = D(r1, s1_2_2, 0x03150200, 0x0505F303, 0xF3F8FD01, 0xF90203F9);
	r2 = D(r2, s1_2_2, 0xFA0DFD05, 0xFFFFFD02, 0x06050807, 0x1803FE07);
	r3 = D(r3, s1_2_2, 0x13F80F09, 0x040BF8F5, 0x02F725F5, 0x06F03006);
	r4 = D(r4, s1_2_2, 0x08020E05, 0x020601F7, 0xF9F51EFB, 0xFD00E2FD);
	r5 = D(r5, s1_2_2, 0xE71AE7F7, 0xF21CEACE, 0xE7DFEE06, 0xDC300DDF);
	r6 = D(r6, s1_2_2, 0x0D0B1FE9, 0xF7080201, 0x02FE000A, 0xFDF8DA06);
	r7 = D(r7, s1_2_2, 0xF2F20A05, 0x010506FE, 0xFDF80A07, 0x00070401);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02FDD8F8, 0xF70DF0F6, 0xFA041AF4, 0xDCEDEFDB);
	r1 = D(r1, s0_0_0, 0x0CFFE80F, 0x0DF60C0C, 0x0E0026F6, 0x02FB0DFF);
	r2 = D(r2, s0_0_0, 0xFE03F100, 0x030104F9, 0x15E8FC0F, 0x041610F3);
	r3 = D(r3, s0_0_0, 0xFE0012F2, 0x817F8104, 0xDDE6D90B, 0x021DFCD0);
	r4 = D(r4, s0_0_0, 0x04041509, 0xF7E01110, 0xDCF7FDF1, 0xF006FD03);
	r5 = D(r5, s0_0_0, 0xE521FD0E, 0x818117EC, 0xF41116FD, 0xEE0A27F9);
	r6 = D(r6, s0_0_0, 0x120BEC18, 0x0202FB01, 0xFB0A1109, 0xD80DCAFD);
	r7 = D(r7, s0_0_0, 0x020908FF, 0x03F70BF9, 0xEFFC00FF, 0xFF0203FB);
	r0 = D(r0, s0_0_1, 0xFF17F2FE, 0xFA23FDEC, 0x0D0A0A17, 0xF5EA13C6);
	r1 = D(r1, s0_0_1, 0x0D04FB04, 0x07F50119, 0xD4FB0303, 0x0F0A09DD);
	r2 = D(r2, s0_0_1, 0x1204FFF9, 0xFE030101, 0x07100EF0, 0xEF0914FD);
	r3 = D(r3, s0_0_1, 0xFD061AF1, 0x2D058110, 0x0CC4B22C, 0x03F5E00D);
	r4 = D(r4, s0_0_1, 0x04E70214, 0xF8D2EDFA, 0xFEEEFDE3, 0x0FFE08F5);
	r5 = D(r5, s0_0_1, 0x09C41CF3, 0x06EFB400, 0x0BFEF911, 0xF1420BE6);
	r6 = D(r6, s0_0_1, 0x0806E3FE, 0xFF15FAEE, 0x0F040515, 0xFC2D39C9);
	r7 = D(r7, s0_0_1, 0x08F4F703, 0xEAF2FBF6, 0x01FD0E29, 0x04FD0600);
	r0 = D(r0, s0_0_2, 0x13160010, 0xE0FEF5F7, 0x00151013, 0x01FAEC08);
	r1 = D(r1, s0_0_2, 0xF60708F0, 0xF9090302, 0xECFC0CFE, 0x10FE05FA);
	r2 = D(r2, s0_0_2, 0xEEFEF500, 0xFE020203, 0xFCEAF709, 0x0AF8FD0F);
	r3 = D(r3, s0_0_2, 0x0404FF0B, 0x00FD0FCB, 0x0707F9F6, 0xF60BEAE3);
	r4 = D(r4, s0_0_2, 0x05020A08, 0xF1F70BFB, 0x02FEEE0A, 0x1009F404);
	r5 = D(r5, s0_0_2, 0x22EA0B07, 0x070E81F9, 0x030CDFF2, 0xF2EC1CEF);
	r6 = D(r6, s0_0_2, 0x29E4FE08, 0xFD05060B, 0x0A060304, 0xE93A07E9);
	r7 = D(r7, s0_0_2, 0xFBEAF707, 0xF5E8FAFE, 0xFFF5FB09, 0x00FE0204);
	r0 = D(r0, s0_1_0, 0xE3011911, 0x07E9D6F3, 0xFBE8F5FB, 0xF3040FE6);
	r1 = D(r1, s0_1_0, 0x0BDC01FE, 0x01F60D04, 0xD00A1AFB, 0xED130702);
	r2 = D(r2, s0_1_0, 0x010EFC18, 0x020400F8, 0x14FE0805, 0xFC190FFD);
	r3 = D(r3, s0_1_0, 0xEE03F8F3, 0x1A1BE90F, 0x06D4BE10, 0x101A09EF);
	r4 = D(r4, s0_1_0, 0x0B000A0B, 0x08F513EE, 0xF5382CED, 0xFEF50CF8);
	r5 = D(r5, s0_1_0, 0x11C8DF1A, 0xFB771393, 0xA3D800FF, 0xE9E6F5EA);
	r6 = D(r6, s0_1_0, 0x2C0AEF0E, 0x000304F8, 0xFE0CFE00, 0xDD280302);
	r7 = D(r7, s0_1_0, 0xE4FB1503, 0xE9D50103, 0x12EBFCFB, 0x08030505);
	r0 = D(r0, s0_1_1, 0xED16F707, 0xEA080DFC, 0xF41DF7E6, 0x022BDDD8);
	r1 = D(r1, s0_1_1, 0x1505E7F4, 0x1006F7F8, 0xEFE602DD, 0x0AE5F5FC);
	r2 = D(r2, s0_1_1, 0x2B0AE02E, 0x0003FC00, 0x2405FE0D, 0x0F2405F4);
	r3 = D(r3, s0_1_1, 0xFCDF0600, 0x0AF21410, 0x1C06DCF5, 0xF6E8E32C);
	r4 = D(r4, s0_1_1, 0xEC040A06, 0x04E50308, 0x00FE04F4, 0xED0B0011);
	r5 = D(r5, s0_1_1, 0x02FD1EE8, 0xAA495BC2, 0x0612ADFA, 0x5218B715);
	r6 = D(r6, s0_1_1, 0x2005F405, 0xF121FEF3, 0xF7061FF7, 0x15364C0D);
	r7 = D(r7, s0_1_1, 0x19D3FFFC, 0xE9C7FDF3, 0xF0FC13F2, 0x0F09FB04);
	r0 = D(r0, s0_1_2, 0xEE000DF8, 0xF1F81B23, 0xECFB02FB, 0xFA05FAF7);
	r1 = D(r1, s0_1_2, 0x0703160B, 0x08F707F5, 0xE80B1B16, 0x0BF1F606);
	r2 = D(r2, s0_1_2, 0xF220F111, 0xFBF8FEFF, 0x09050707, 0x12FE01FA);
	r3 = D(r3, s0_1_2, 0x0B00180B, 0x18F71FF4, 0x17FDEAF5, 0x051A040A);
	r4 = D(r4, s0_1_2, 0x01030CE6, 0xEBF3030F, 0x0AEC0BFB, 0xFC09070B);
	r5 = D(r5, s0_1_2, 0x15080AFE, 0x1A0CF60C, 0x152FE60D, 0x102D0215);
	r6 = D(r6, s0_1_2, 0x1014F514, 0xFF03FEFE, 0x06FE10EC, 0xDF12F4EB);
	r7 = D(r7, s0_1_2, 0x04F0F905, 0x04DF0411, 0x06050915, 0x01FEFBF6);
	r0 = D(r0, s0_2_0, 0x09163BDF, 0xF403ECEF, 0xF706F3FE, 0x0606090D);
	r1 = D(r1, s0_2_0, 0x12FD0AF7, 0x0407F50C, 0x07071804, 0xFF18FF09);
	r2 = D(r2, s0_2_0, 0x0B0E07F9, 0x0304FF04, 0xF2CC010C, 0x0F18F80C);
	r3 = D(r3, s0_2_0, 0x01FCFD0A, 0xED0FED03, 0x02191610, 0xED11F7D7);
	r4 = D(r4, s0_2_0, 0xED050B08, 0x08F80F10, 0xFA060AF1, 0xFE27FE0F);
	r5 = D(r5, s0_2_0, 0x1D14EE01, 0x04B70C21, 0x0E0BF511, 0xDE350800);
	r6 = D(r6, s0_2_0, 0xF6EDF7DE, 0x02F6F809, 0xF800F800, 0xA82DBFE5);
	r7 = D(r7, s0_2_0, 0x07FAFBFB, 0x02E40302, 0x02F60F00, 0xFE02FD04);
	r0 = D(r0, s0_2_1, 0xE4160E19, 0xFA0C0112, 0x0A03FE0F, 0xE712FCFB);
	r1 = D(r1, s0_2_1, 0x1303FF0B, 0xFFF301FA, 0xFFF3FB03, 0x11F2EAF5);
	r2 = D(r2, s0_2_1, 0x19D50905, 0x06FDF600, 0x0CCD1E19, 0x0702F1F5);
	r3 = D(r3, s0_2_1, 0x1BEE1A14, 0x04F7FCFE, 0x04F5F8EB, 0x1102F616);
	r4 = D(r4, s0_2_1, 0xF9101104, 0xF1F91DDF, 0x040B0706, 0xEC0E1411);
	r5 = D(r5, s0_2_1, 0xD90A2317, 0x080F8121, 0x260DDD0C, 0xEC0B33E3);
	r6 = D(r6, s0_2_1, 0x1F27F720, 0x0211F705, 0x01FC1107, 0xC24E9D14);
	r7 = D(r7, s0_2_1, 0xF7FCDE04, 0x00D1FE11, 0x02EB0C0A, 0xFE0C07FD);
	r0 = D(r0, s0_2_2, 0xE7F7290D, 0x0903F412, 0xFEF809F6, 0xF4FA010B);
	r1 = D(r1, s0_2_2, 0x1007040D, 0xF70D000B, 0xF50BF8F4, 0x14FFFB16);
	r2 = D(r2, s0_2_2, 0x0DF2F2F6, 0xFC01FAFD, 0x11FC0B07, 0x07FBFA1C);
	r3 = D(r3, s0_2_2, 0x05EF0800, 0x0B05FEF9, 0x160EF0C4, 0x08070FD5);
	r4 = D(r4, s0_2_2, 0xEE12120A, 0x010B1812, 0x0700F403, 0xF10F0101);
	r5 = D(r5, s0_2_2, 0x20E7EB0E, 0xFE0A811D, 0x140C00EB, 0x81E8F6CE);
	r6 = D(r6, s0_2_2, 0x0500F8E7, 0x0204FFFF, 0xFCF50B05, 0xEAF8DC16);
	r7 = D(r7, s0_2_2, 0x0AF00404, 0xECF40EF0, 0x06F20008, 0x02FD0103);
	r0 = D(r0, s1_0_0, 0xF305F7FB, 0x090806F4, 0xE7F7F1FA, 0xFE05DEDA);
	r1 = D(r1, s1_0_0, 0x05F10709, 0xFDFDFD0B, 0x0F10DF0B, 0x1505FF02);
	r2 = D(r2, s1_0_0, 0x04F20200, 0x01FFFB02, 0xEDFC101F, 0x09F7FBFB);
	r3 = D(r3, s1_0_0, 0x0E140705, 0xD92F8112, 0xF5F71AE9, 0x09FE08F6);
	r4 = D(r4, s1_0_0, 0x04FEFFFA, 0xFEFC07ED, 0x0DFF0DFD, 0x040310FD);
	r5 = D(r5, s1_0_0, 0xFF00FC07, 0x38CA11F2, 0xF1050D03, 0x10EA1FDE);
	r6 = D(r6, s1_0_0, 0x08DB0905, 0x0202FAF1, 0x050AFBF8, 0xE5021EE6);
	r7 = D(r7, s1_0_0, 0xFBFB1008, 0xF1001D12, 0xE6000B0F, 0x00FFF905);
	r0 = D(r0, s1_0_1, 0x08ECF0FA, 0xFE0411F5, 0x0519F309, 0xEBFC0115);
	r1 = D(r1, s1_0_1, 0x162004F5, 0xFCFEFDF1, 0xF5180DF4, 0x0104F807);
	r2 = D(r2, s1_0_1, 0x0903F510, 0xFE0002FC, 0xF90AF707, 0xF5F6FDFB);
	r3 = D(r3, s1_0_1, 0x0406F5ED, 0xFB92A5FA, 0x05FE14DF, 0xE918060E);
	r4 = D(r4, s1_0_1, 0x06F7FE07, 0x01F90910, 0x04FF0E1E, 0x131D0912);
	r5 = D(r5, s1_0_1, 0xCEEB0AEC, 0xE61BCFDC, 0x0E0BE1F8, 0x010E0214);
	r6 = D(r6, s1_0_1, 0x14001EF6, 0xFBFF01FE, 0x0D00F605, 0x0EEAED12);
	r7 = D(r7, s1_0_1, 0x0FFFF213, 0x0C0AFE04, 0xF1FB0003, 0xFFFB0400);
	r0 = D(r0, s1_0_2, 0xE6F208FF, 0xFEEB0AF5, 0xF3FF08F4, 0x00E8F9FB);
	r1 = D(r1, s1_0_2, 0x0101FFF1, 0x03FCFFFE, 0xFC021205, 0xF006EDF8);
	r2 = D(r2, s1_0_2, 0xFB0EF013, 0xFF000000, 0x0810020B, 0x120FF60C);
	r3 = D(r3, s1_0_2, 0x09F70105, 0x81AF9512, 0x24DFD9B9, 0x06E605FB);
	r4 = D(r4, s1_0_2, 0x09FEF905, 0xFBE7FFF7, 0xF5EFFD03, 0xEBF502EB);
	r5 = D(r5, s1_0_2, 0x14F1F6FA, 0xFBED03F2, 0x10F7F800, 0xF0081E09);
	r6 = D(r6, s1_0_2, 0xE3FCFEF6, 0x000A03FE, 0xFDFEFDFD, 0xE705FFEB);
	r7 = D(r7, s1_0_2, 0xF9EF0AF6, 0x03F61006, 0x07ED05FE, 0xFAFE00FD);
	r0 = D(r0, s1_1_0, 0x07F124F5, 0xFB0309F5, 0x0603EFED, 0x14FD18EE);
	r1 = D(r1, s1_1_0, 0x0405FA0D, 0x0300F603, 0x080611FD, 0xFD030208);
	r2 = D(r2, s1_1_0, 0x03000A12, 0xFF00F907, 0xFDFA0904, 0xFCEAFF05);
	r3 = D(r3, s1_1_0, 0x09FB0600, 0xFB031BFD, 0x000D10ED, 0xFC18FEEE);
	r4 = D(r4, s1_1_0, 0x0910FBEB, 0xF4170BEA, 0xF807E613, 0x020007DA);
	r5 = D(r5, s1_1_0, 0x2FC315F3, 0x13F51618, 0x011105F9, 0x1CF91CFE);
	r6 = D(r6, s1_1_0, 0x07FDF2E2, 0xFB01F901, 0x140004F6, 0x1B0D2228);
	r7 = D(r7, s1_1_0, 0xF2090A05, 0xFAFF0601, 0x0903F9FE, 0x0405F9FC);
	r0 = D(r0, s1_1_1, 0x0BE209F5, 0xEF0F0A09, 0x0E1B030D, 0x0513002B);
	r1 = D(r1, s1_1_1, 0xF807EB05, 0xF801F80C, 0xF404FF19, 0x11F10504);
	r2 = D(r2, s1_1_1, 0x0305F000, 0x02FF0D02, 0x0E0BF9EA, 0x08252215);
	r3 = D(r3, s1_1_1, 0x100C020D, 0xE8160509, 0x26EFFA15, 0x1DF6E6E6);
	r4 = D(r4, s1_1_1, 0xF2F8FD15, 0x28F51324, 0x0C0DEDF4, 0x15EE0009);
	r5 = D(r5, s1_1_1, 0x250BEDEF, 0xAFF9C938, 0x07F0FFE7, 0x2014CD20);
	r6 = D(r6, s1_1_1, 0xF1F3040E, 0xF9061205, 0xE9051115, 0xDCFAE4E5);
	r7 = D(r7, s1_1_1, 0xE70502DD, 0xFB050908, 0xFE0EFFFE, 0x01FAFA03);
	r0 = D(r0, s1_1_2, 0xE30D0510, 0xF11A00FC, 0xFC051312, 0xFD0EFCFA);
	r1 = D(r1, s1_1_2, 0xFCF4FBF4, 0x0A060902, 0x1CE2160A, 0xFC1102FF);
	r2 = D(r2, s1_1_2, 0x10F7FAF2, 0xFB0001FD, 0x00F7FB01, 0xF7FF0107);
	r3 = D(r3, s1_1_2, 0xF012F404, 0xE30F1110, 0x0F170BF3, 0x04EB0E0B);
	r4 = D(r4, s1_1_2, 0xF50D05FE, 0x09040E0E, 0x04FA1014, 0x04FD04FE);
	r5 = D(r5, s1_1_2, 0x0526ED08, 0xD9072024, 0xF1040D28, 0xF8100E0E);
	r6 = D(r6, s1_1_2, 0xD607EAFF, 0x03120CFF, 0xF5030CED, 0xD80B12E8);
	r7 = D(r7, s1_1_2, 0xFE0102DC, 0x1DFB05F7, 0x02F909F9, 0xFCFF00F8);
	r0 = D(r0, s1_2_0, 0x1BFDEE15, 0x1010F9F8, 0xE701EBF2, 0x110A02FD);
	r1 = D(r1, s1_2_0, 0x13010307, 0xFA00F302, 0x02FCF3F8, 0xFFFBFF0A);
	r2 = D(r2, s1_2_0, 0xE9FEE309, 0xFD04FDFB, 0xF2FF0807, 0xF2F30001);
	r3 = D(r3, s1_2_0, 0xF1FD01FD, 0x18F40B0E, 0xFFF125F4, 0xF1F81209);
	r4 = D(r4, s1_2_0, 0xF707F4FE, 0xFE0F0B04, 0xFAED000C, 0x030109FE);
	r5 = D(r5, s1_2_0, 0x0E0EFDEC, 0xD0A02E00, 0xF4080700, 0xE2FBF004);
	r6 = D(r6, s1_2_0, 0x06032015, 0xFFF500FF, 0xFD000101, 0x0900FD09);
	r7 = D(r7, s1_2_0, 0xFF15F605, 0xF303FF07, 0xFB0CF808, 0xFEFAFEFF);
	r0 = D(r0, s1_2_1, 0x09F8F9FE, 0x0104EE0E, 0xFCF2E90D, 0x0AE4FBFD);
	r1 = D(r1, s1_2_1, 0x0718F5DB, 0x00050004, 0x00F00305, 0x110206FA);
	r2 = D(r2, s1_2_1, 0x11E2F6FD, 0x03F80602, 0xFBFD080C, 0x0E0BF6F5);
	r3 = D(r3, s1_2_1, 0xF3E7F300, 0x0AFD0811, 0xE8F0F80D, 0xEBFCF7FE);
	r4 = D(r4, s1_2_1, 0x0DFC100B, 0xF1030007, 0xE215EEE2, 0x1801E91A);
	r5 = D(r5, s1_2_1, 0x12EDFD12, 0xF102FA1B, 0x1311EFF3, 0x04F50810);
	r6 = D(r6, s1_2_1, 0x2AECF90F, 0x03F305FC, 0xFB02FCF5, 0x34F72CC2);
	r7 = D(r7, s1_2_1, 0x0A0901E2, 0xFF00FDEB, 0xF30802FC, 0xFC05FFFF);
	r0 = D(r0, s1_2_2, 0xFE13EBFA, 0xF6FDF5F6, 0x060E100B, 0xF9F80517);
	r1 = D(r1, s1_2_2, 0xE8FE0D0A, 0x03F600FB, 0xF4E2070E, 0x1A09F0F6);
	r2 = D(r2, s1_2_2, 0xFE0E19F7, 0xFDF9FAFC, 0xF30E09EB, 0xDFFFFCF8);
	r3 = D(r3, s1_2_2, 0xDE09020B, 0x0EE9FF0E, 0xFF08FD0E, 0xF009F412);
	r4 = D(r4, s1_2_2, 0x04050301, 0xFC03EBF3, 0xFC0703FF, 0xEEF4160F);
	r5 = D(r5, s1_2_2, 0x06F60AED, 0x0B121805, 0x0307FFF9, 0xFFF2EDEB);
	r6 = D(r6, s1_2_2, 0xEF21041B, 0x0FFAF905, 0xE4F80A08, 0xFC220BE3);
	r7 = D(r7, s1_2_2, 0x0900000C, 0x05FFF3FF, 0x04FDF8EE, 0x06030501);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.121e-02, -2.606e-02, 1.055e-02, -1.661e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.116e-02, 1.398e-02, -8.584e-03, 1.460e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.641e-02, 2.222e-03, 1.327e-02, -2.350e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.179e-02, 2.115e-02, -9.989e-03, 3.572e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-4.358e-03, -1.152e-02, 1.886e-02, 3.520e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.942e-02, -4.347e-02, 3.381e-03, -3.570e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.527e-02, -2.838e-02, -3.697e-03, -3.767e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.018e-02, 2.816e-02, 1.741e-02, 8.541e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05F505FA, 0x03010CF9, 0x0108FE00, 0x03F10D07);
	r1 = D(r1, s0_0_0, 0x010401FC, 0x0004F9FD, 0x0001FDFF, 0xFE04FA02);
	r2 = D(r2, s0_0_0, 0xFDF71D08, 0xF318F0F9, 0xFDFE0303, 0x050604FC);
	r3 = D(r3, s0_0_0, 0x040B03FB, 0x01F20AFF, 0x1101EEFD, 0xF80503FB);
	r4 = D(r4, s0_0_0, 0xFE0CF50F, 0x01E2160A, 0xFE09040D, 0x03F40604);
	r5 = D(r5, s0_0_0, 0xFF0DFCF4, 0xF0000F03, 0x03090309, 0xF8EF100B);
	r6 = D(r6, s0_0_0, 0xE4EAF825, 0x1ED144E8, 0xE6080310, 0x81B88198);
	r7 = D(r7, s0_0_0, 0xF4F20407, 0x00F302F7, 0x06010904, 0x1502013B);
	r0 = D(r0, s0_0_1, 0x06241D1F, 0xF8F80D0A, 0x01FD0215, 0x0114F0FB);
	r1 = D(r1, s0_0_1, 0xFAFE07F7, 0x01020701, 0x01060603, 0xF61B21F6);
	r2 = D(r2, s0_0_1, 0xE70603ED, 0xF0F805ED, 0xFEFFFE02, 0x0317FEFC);
	r3 = D(r3, s0_0_1, 0x060610FF, 0x0408FD07, 0x0CFF0FDE, 0x0B11FFF4);
	r4 = D(r4, s0_0_1, 0xF9F8000A, 0x02001BFD, 0xFE09FDF8, 0x0104F704);
	r5 = D(r5, s0_0_1, 0x07FF040A, 0x0900F504, 0xF2DE00F2, 0xEFFF1018);
	r6 = D(r6, s0_0_1, 0x0EF70FDC, 0xECC5FA06, 0xCA0419EB, 0xF6FE1003);
	r7 = D(r7, s0_0_1, 0xFD00FAFA, 0xE0FFFEFA, 0xF212FC06, 0xFD072032);
	r0 = D(r0, s0_0_2, 0x1706E7FD, 0xF5F707F7, 0xFE08FEF6, 0x15F911F6);
	r1 = D(r1, s0_0_2, 0x15FBF904, 0xFD07FBFF, 0x04000605, 0x081EEBF3);
	r2 = D(r2, s0_0_2, 0xE61A0BF4, 0xEC12F3FD, 0xFB0300FC, 0xFB07F405);
	r3 = D(r3, s0_0_2, 0xFD040700, 0x02010300, 0x04FBF8F7, 0x0301FBF7);
	r4 = D(r4, s0_0_2, 0xFE090306, 0xF3F60FF9, 0x0001FF0D, 0xDD07F602);
	r5 = D(r5, s0_0_2, 0x05000002, 0xFA0407F2, 0xED09F50B, 0xF0FFFCED);
	r6 = D(r6, s0_0_2, 0x17151810, 0xE1D60D1B, 0xFF0D05F2, 0xFF040801);
	r7 = D(r7, s0_0_2, 0x0C010DFD, 0x0108F2FA, 0xFC04F004, 0x0515F808);
	r0 = D(r0, s0_1_0, 0x0208FC0A, 0xF8241401, 0xF40304FF, 0x12E0FE08);
	r1 = D(r1, s0_1_0, 0x09FC0B02, 0x0201FFFD, 0xF8FA0F02, 0x0FEFFB00);
	r2 = D(r2, s0_1_0, 0x12171804, 0xF3FFF3F9, 0xFCFB0002, 0x0304E5F9);
	r3 = D(r3, s0_1_0, 0xFAF6F601, 0x0305FF12, 0x0104011C, 0xFFFE0806);
	r4 = D(r4, s0_1_0, 0xF114FA01, 0xF1E8F50B, 0xFC001605, 0xF6F806FE);
	r5 = D(r5, s0_1_0, 0xFCEFE8FF, 0x0000FF0A, 0xE4EC2303, 0x03F51007);
	r6 = D(r6, s0_1_0, 0xE112D3F2, 0xA620D2BC, 0xD0060701, 0x04F7EC16);
	r7 = D(r7, s0_1_0, 0xFB0104FF, 0x10FEEE03, 0x05EB000D, 0xE8F90BE8);
	r0 = D(r0, s0_1_1, 0x17060713, 0x0620D7EE, 0x04FD0C00, 0x141514E6);
	r1 = D(r1, s0_1_1, 0x03FD0F06, 0x04FC0900, 0xF1040B06, 0x1118190B);
	r2 = D(r2, s0_1_1, 0xFD0015F2, 0x0A251014, 0x0005F804, 0x0304F303);
	r3 = D(r3, s0_1_1, 0x090704FE, 0x03FE07F6, 0xFBF417FB, 0x0613ED06);
	r4 = D(r4, s0_1_1, 0x1A09E4EF, 0x271536EC, 0xF6EFF203, 0x0E0D0104);
	r5 = D(r5, s0_1_1, 0xFBE80A05, 0xF7F2F609, 0xF6EDF0FE, 0xE4F61213);
	r6 = D(r6, s0_1_1, 0xE3EEE9F0, 0x04FF1409, 0xEB0AC703, 0xE711100A);
	r7 = D(r7, s0_1_1, 0x0719F80A, 0xEE0FFF03, 0xEC12021A, 0x14EB01EA);
	r0 = D(r0, s0_1_2, 0xFD02EAE8, 0xEAF016FA, 0xFDFE1701, 0xF8FED0E6);
	r1 = D(r1, s0_1_2, 0x14FDFBF6, 0xF6FD04FE, 0x0F05F6FF, 0xFDF71303);
	r2 = D(r2, s0_1_2, 0xB9F31FF8, 0xF5142CFD, 0xF90004FD, 0x120E2807);
	r3 = D(r3, s0_1_2, 0x0A06E208, 0x0104FEFC, 0xFD06F400, 0x0812EC03);
	r4 = D(r4, s0_1_2, 0x000A11FC, 0xF7030607, 0xFD0CF60A, 0x02090406);
	r5 = D(r5, s0_1_2, 0x030AFA02, 0xE1060A12, 0xF2180FED, 0xF5060B02);
	r6 = D(r6, s0_1_2, 0x0710E31D, 0xFC1ED1D3, 0xDFF1FA22, 0xFEFBFD0A);
	r7 = D(r7, s0_1_2, 0xFE0907F9, 0xF702FAEA, 0xF5F7EC01, 0x1B19FDEB);
	r0 = D(r0, s0_2_0, 0x0ADAF8FB, 0xFEEDF9F8, 0x000203FF, 0xFFEBF20E);
	r1 = D(r1, s0_2_0, 0x0D03F8F9, 0xFE08FE01, 0x04FF0600, 0xF5E8F002);
	r2 = D(r2, s0_2_0, 0xFB06070A, 0xF8F2100E, 0xFCFC0403, 0xF313FF09);
	r3 = D(r3, s0_2_0, 0xFEFA0FFF, 0x02FE0300, 0xFBFDFAFB, 0x020A0700);
	r4 = D(r4, s0_2_0, 0xFBEA030C, 0xF6EA0725, 0x0CFC0DFB, 0x06090004);
	r5 = D(r5, s0_2_0, 0xF60306F9, 0x07F9FCFA, 0x0F050A00, 0xF401EFEC);
	r6 = D(r6, s0_2_0, 0x0EE7F9ED, 0x24D1E8E1, 0xFBF6EE03, 0xFBEF010D);
	r7 = D(r7, s0_2_0, 0xFC060003, 0x01010808, 0xF4030809, 0xFCE1000B);
	r0 = D(r0, s0_2_1, 0xFE0B02E3, 0x0DFEF7F9, 0x040811F9, 0x28F50C04);
	r1 = D(r1, s0_2_1, 0x0704F301, 0xFE0006FE, 0xF7F80B00, 0x0108F002);
	r2 = D(r2, s0_2_1, 0xD90EFD09, 0x000BECE7, 0xFFFCFF02, 0xFE0CF6F4);
	r3 = D(r3, s0_2_1, 0x04F5FC02, 0x0805FAFF, 0xDF11F2F2, 0x05020AFE);
	r4 = D(r4, s0_2_1, 0xFC07130E, 0xFA01D907, 0xEF0AFD04, 0xFFF70800);
	r5 = D(r5, s0_2_1, 0xF40000FB, 0xFF02FB01, 0xF008F3F3, 0x0802F411);
	r6 = D(r6, s0_2_1, 0x1507321A, 0x140FD91C, 0xF9F1E4DF, 0x0004EDF7);
	r7 = D(r7, s0_2_1, 0x03FBF602, 0xEFFDEF10, 0xDE00090B, 0x05FBE40E);
	r0 = D(r0, s0_2_2, 0xFD0FF6FC, 0x06F90E05, 0x0FF101FE, 0xDFF506F2);
	r1 = D(r1, s0_2_2, 0x0C01FCFF, 0x01030005, 0xF80902FC, 0x1BF2FD0A);
	r2 = D(r2, s0_2_2, 0xE504F90A, 0xF6FEF02D, 0xFDFEFFFD, 0xFCF4F7F8);
	r3 = D(r3, s0_2_2, 0xFAFC0BFD, 0xFFFF0200, 0xFDFE0FFD, 0xFF0809F7);
	r4 = D(r4, s0_2_2, 0x0C07E30E, 0x2D08E60D, 0x0C060AFC, 0x04141501);
	r5 = D(r5, s0_2_2, 0xF9FB0500, 0x0604FE02, 0x04CFF01B, 0x0CF9F600);
	r6 = D(r6, s0_2_2, 0xFE03F705, 0x1405DFF5, 0xDF141304, 0xF9FD010E);
	r7 = D(r7, s0_2_2, 0xF9FC0502, 0xF912F3F4, 0x0E0D1205, 0xFFF511F7);
	r0 = D(r0, s1_0_0, 0x0FF2020B, 0x0CE90BF9, 0x060E0CFF, 0x2EFC15FB);
	r1 = D(r1, s1_0_0, 0xFFEF0AF4, 0xFE030102, 0xF7080505, 0x021BFE04);
	r2 = D(r2, s1_0_0, 0x05151407, 0x1506EEF3, 0xFF020203, 0xF3FFF605);
	r3 = D(r3, s1_0_0, 0x09F5F301, 0x08FBFAFB, 0x0F040FFC, 0x07020BFC);
	r4 = D(r4, s1_0_0, 0xE8FF0602, 0xF70CFEFE, 0x03F303FA, 0x01E4F30F);
	r5 = D(r5, s1_0_0, 0xF7FDFBFC, 0xF8FE05F9, 0xFA06FDE3, 0x08030100);
	r6 = D(r6, s1_0_0, 0xFCE6F002, 0xC7D30B3C, 0xECF60CEE, 0x2AC78181);
	r7 = D(r7, s1_0_0, 0x05F6F2F9, 0x16EEE1FF, 0x0C0CFD0F, 0xF3DACBF4);
	r0 = D(r0, s1_0_1, 0x17190915, 0x03FB09E1, 0x0CF20303, 0x3C1D0A18);
	r1 = D(r1, s1_0_1, 0x0A0405FD, 0xF8000206, 0x05041DFA, 0xF4FEEDE6);
	r2 = D(r2, s1_0_1, 0x05FFE409, 0x0EEFE9EA, 0xFFFC02FF, 0x130AFEEF);
	r3 = D(r3, s1_0_1, 0xF6060E0D, 0x0A070900, 0xFCF40114, 0xFA0705FA);
	r4 = D(r4, s1_0_1, 0x0305E409, 0x2714BE03, 0xF705F702, 0x01FCE909);
	r5 = D(r5, s1_0_1, 0xF8F70EFE, 0xFD011607, 0x05EF03E2, 0x0E0BFEED);
	r6 = D(r6, s1_0_1, 0xF4E60AFA, 0x20C305F4, 0x2A1A10F5, 0xC1099010);
	r7 = D(r7, s1_0_1, 0xF605E809, 0xF30B070E, 0x0907F909, 0x0B04C60D);
	r0 = D(r0, s1_0_2, 0xF3FC020D, 0x0407F300, 0xFD0CFA09, 0xF4FEE607);
	r1 = D(r1, s1_0_2, 0x06FE04F8, 0xFEFFFEFE, 0x02F6FC0C, 0x07FA0806);
	r2 = D(r2, s1_0_2, 0xF305F6F9, 0xEBFFD824, 0x0205F600, 0xFA03F103);
	r3 = D(r3, s1_0_2, 0x1403FEFB, 0xFCFCFDFF, 0x10040909, 0x0502F901);
	r4 = D(r4, s1_0_2, 0xE9F6FB0B, 0xCE0FE715, 0x07F9FFF8, 0xFEFDF114);
	r5 = D(r5, s1_0_2, 0x020B09FC, 0x02FB02F9, 0x0A240DF9, 0x0CF5F5F7);
	r6 = D(r6, s1_0_2, 0x030EFAD6, 0xF24424EB, 0xFE1E040E, 0x0EFEF504);
	r7 = D(r7, s1_0_2, 0x07F808FD, 0xFFFEF6FB, 0xFD19F709, 0x00E60809);
	r0 = D(r0, s1_1_0, 0x01F7010C, 0x0107F318, 0xFD03010B, 0xFAF927EE);
	r1 = D(r1, s1_1_0, 0x08F9F30E, 0x02FBFEFE, 0x0502FBFD, 0x0917F9FB);
	r2 = D(r2, s1_1_0, 0xEF15021A, 0x12FBF406, 0xFC0103FD, 0x08090306);
	r3 = D(r3, s1_1_0, 0xF500FCFA, 0xFC051802, 0x20F905F9, 0x020312FB);
	r4 = D(r4, s1_1_0, 0xF00DEAF8, 0x2709FFF0, 0xFE030004, 0x0C0E07FF);
	r5 = D(r5, s1_1_0, 0xF80213FA, 0xF603ED01, 0xF705E80A, 0xFC080811);
	r6 = D(r6, s1_1_0, 0xED2BEAF6, 0xF9D4D81E, 0xE801EC19, 0xDCE60666);
	r7 = D(r7, s1_1_0, 0x03F5F3FE, 0x030FEFF7, 0x060FF6FE, 0xEA06FAEB);
	r0 = D(r0, s1_1_1, 0x0301F7E6, 0xFC0C280D, 0x050908F4, 0x01F503C9);
	r1 = D(r1, s1_1_1, 0xF8FE070C, 0x0106E505, 0x0F0AF81B, 0xF7FBE7E5);
	r2 = D(r2, s1_1_1, 0x1FEB1411, 0xD5F0F6EB, 0x01FE0006, 0x03FCF8EC);
	r3 = D(r3, s1_1_1, 0x07FAF5E3, 0x11031000, 0xFB1512EC, 0xF5FD000B);
	r4 = D(r4, s1_1_1, 0x12DD08FF, 0x0CF2362F, 0x0AFB06F6, 0x100728F9);
	r5 = D(r5, s1_1_1, 0xF10819EA, 0x01092D08, 0xEEDB1713, 0xEBF216F1);
	r6 = D(r6, s1_1_1, 0x0C13E12A, 0x124808E0, 0xFF00C2FB, 0x141D1C03);
	r7 = D(r7, s1_1_1, 0x07FC1A13, 0xF8111508, 0x0C05FD01, 0xDF051E08);
	r0 = D(r0, s1_1_2, 0x0800E90A, 0xFF200904, 0xFFF104EC, 0xC400F137);
	r1 = D(r1, s1_1_2, 0xF9020E12, 0x00030800, 0x07FEF905, 0xFFE7F7FE);
	r2 = D(r2, s1_1_2, 0x1CE416F9, 0x04F924F0, 0x03FFFAFB, 0xF9F500DE);
	r3 = D(r3, s1_1_2, 0xF800FD02, 0xFBFE0900, 0xF10A040D, 0x06FA18F6);
	r4 = D(r4, s1_1_2, 0x03FE0C11, 0x30DFFEE1, 0xFE13030D, 0x0E12EDF8);
	r5 = D(r5, s1_1_2, 0xFDF4F113, 0xFC0EF3FF, 0x13FCEC0A, 0x090DFC0E);
	r6 = D(r6, s1_1_2, 0x12D3F51E, 0x0730DF01, 0x19E201E6, 0x05EB0719);
	r7 = D(r7, s1_1_2, 0xFB050503, 0xF212F916, 0x18FB0014, 0x08020508);
	r0 = D(r0, s1_2_0, 0xFFE8FDFE, 0x13F0F7FF, 0xF707F9EC, 0xE7F8F6FD);
	r1 = D(r1, s1_2_0, 0x06F50408, 0x02FE0101, 0x03060E03, 0xFF0011F8);
	r2 = D(r2, s1_2_0, 0xFC09FC01, 0xFA2309F2, 0x0003FAFB, 0x01150902);
	r3 = D(r3, s1_2_0, 0x0D05F6F6, 0x02F40306, 0x0203E8FD, 0x07F1FF04);
	r4 = D(r4, s1_2_0, 0x0B110EF4, 0xE509F902, 0x03F7F803, 0x0106E9FE);
	r5 = D(r5, s1_2_0, 0xF909ECFE, 0xF50BF8FD, 0xF420F1E6, 0xDAFB09F3);
	r6 = D(r6, s1_2_0, 0x2100FEDB, 0xA8F50F16, 0x1F040CEB, 0x1005FBD7);
	r7 = D(r7, s1_2_0, 0x05FC03F9, 0x17EC06F8, 0xF90C03E8, 0x001113FA);
	r0 = D(r0, s1_2_1, 0xFCFB01FD, 0xE3100DE9, 0x0208FD17, 0xF3F82EFB);
	r1 = D(r1, s1_2_1, 0xFFFDFAFD, 0x0404F8FD, 0xFC03FCFD, 0x01F01B1E);
	r2 = D(r2, s1_2_1, 0xF7F60AE4, 0xEEFA1D06, 0xFEFAFF04, 0x1800EFEB);
	r3 = D(r3, s1_2_1, 0xFFF4070D, 0x0CFCF3F9, 0xFCF00BFE, 0xF9F60607);
	r4 = D(r4, s1_2_1, 0xF50D0D00, 0xD81500F5, 0xFC05EF0D, 0xFE16020B);
	r5 = D(r5, s1_2_1, 0x05F3FD02, 0xFFF4080A, 0xDC06E71B, 0x0A0600ED);
	r6 = D(r6, s1_2_1, 0xF61909F7, 0xFD0BECF2, 0xE41D15F2, 0xEB0724ED);
	r7 = D(r7, s1_2_1, 0x020200FB, 0x040B010C, 0xF8FEF2EF, 0xFB020DF4);
	r0 = D(r0, s1_2_2, 0xFF09F6FB, 0x070EF9FF, 0xF8FCF3FD, 0xEF04F50E);
	r1 = D(r1, s1_2_2, 0x00000508, 0xFDFA04FA, 0x040DFFF3, 0xFEF6F1FF);
	r2 = D(r2, s1_2_2, 0xFADB10FC, 0xF50105F5, 0x03FEF801, 0x07F10201);
	r3 = D(r3, s1_2_2, 0x05090109, 0xFAFFFEF6, 0xFB180FF9, 0xFBF9FE05);
	r4 = D(r4, s1_2_2, 0xFA1FEAFB, 0xFE0C080A, 0x08080903, 0x02F101F1);
	r5 = D(r5, s1_2_2, 0xFF09F208, 0xFEF9FB0A, 0x1303CD24, 0x13F50D03);
	r6 = D(r6, s1_2_2, 0xF70A1124, 0xDD1A1810, 0x0F0B0415, 0x09F205F6);
	r7 = D(r7, s1_2_2, 0x04FDFE05, 0xFAFE0FFD, 0x02ED1100, 0x020912F2);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x11F5EEF1, 0xF2F503F7, 0x14FAFA0B, 0xDFF1DE03);
	r1 = D(r1, s0_0_0, 0x030703FB, 0xFDFCF7FD, 0x120209F7, 0x13F20536);
	r2 = D(r2, s0_0_0, 0xFE0E1BFD, 0xCB0514F6, 0xFDFC0907, 0x0CF20C0C);
	r3 = D(r3, s0_0_0, 0x0DF0F211, 0x05F820F9, 0xE9F60204, 0xF9EFFEF6);
	r4 = D(r4, s0_0_0, 0x00FD0FF9, 0x040F08F8, 0xF21019FC, 0x11F71A04);
	r5 = D(r5, s0_0_0, 0x0B100110, 0x06FB0DF8, 0xFD140AEE, 0x03DE0FE5);
	r6 = D(r6, s0_0_0, 0x18DBF8DF, 0x81A2E728, 0xDC0F2A9A, 0x81DBD416);
	r7 = D(r7, s0_0_0, 0xF8FFFDEC, 0xF200FEE0, 0xF7F008F5, 0x1CF8023A);
	r0 = D(r0, s0_0_1, 0x02110908, 0xF4011CF1, 0xFBF9FA21, 0xDD040715);
	r1 = D(r1, s0_0_1, 0x0506D01B, 0xF6FEEE0D, 0x0603D207, 0xFAE6E5D3);
	r2 = D(r2, s0_0_1, 0xE410E6B5, 0xEB120514, 0xFBFDDBF9, 0x0C08EDF2);
	r3 = D(r3, s0_0_1, 0xFBF613FA, 0x04FD0FF2, 0xF8ECF8EE, 0xF8020906);
	r4 = D(r4, s0_0_1, 0x0A020A04, 0x14081706, 0x0B03EDF9, 0xFAEF09FB);
	r5 = D(r5, s0_0_1, 0x09FFF800, 0xED0613F0, 0xFC0A00DE, 0xF723DFAB);
	r6 = D(r6, s0_0_1, 0x1AE91E24, 0x0A26F511, 0xDCFE1BD6, 0xECF87AFD);
	r7 = D(r7, s0_0_1, 0x0CF7290C, 0xFD1113D0, 0xF406FACA, 0x1016120E);
	r0 = D(r0, s0_0_2, 0xF90CEC04, 0xF6FE1AF9, 0x07FDF70A, 0xC334040B);
	r1 = D(r1, s0_0_2, 0x0A00F406, 0xF70209FF, 0x0102FC02, 0x0BFAFAF7);
	r2 = D(r2, s0_0_2, 0xFE0D04CD, 0xFEF80D07, 0x00FE0A03, 0x0EDD000E);
	r3 = D(r3, s0_0_2, 0xFBF0F60A, 0xFBFE08F9, 0x011402E4, 0xFAFCF1F6);
	r4 = D(r4, s0_0_2, 0xEC040EF0, 0x052310FC, 0x05FEFBFC, 0x020C14F9);
	r5 = D(r5, s0_0_2, 0x0505F9F7, 0x0005ECF8, 0xFA1215EF, 0x0905D0B6);
	r6 = D(r6, s0_0_2, 0xFD0F1802, 0x0BFAF519, 0xF0010902, 0x030322F6);
	r7 = D(r7, s0_0_2, 0xFB090805, 0xF1F80F02, 0xF90E1CD8, 0x0F0FF3EA);
	r0 = D(r0, s0_1_0, 0x00FBDE18, 0x090C03EB, 0xED060509, 0x0B18F700);
	r1 = D(r1, s0_1_0, 0xF208F5FC, 0x02FB00F9, 0x0BF90CF9, 0x1DF20513);
	r2 = D(r2, s0_1_0, 0x0C051F0B, 0xFADE0512, 0x01FE1004, 0x01070EF6);
	r3 = D(r3, s0_1_0, 0x02F2FEFF, 0x00120A00, 0x17F6EFF7, 0x0101E7FE);
	r4 = D(r4, s0_1_0, 0xEC130CF5, 0xE810F4F8, 0xFF0401FA, 0x08FDFF14);
	r5 = D(r5, s0_1_0, 0xFB050AFD, 0xFC10030C, 0x11000D04, 0xFA030212);
	r6 = D(r6, s0_1_0, 0xDA2007D9, 0xCBE90C08, 0xE4E81CE2, 0x0E2D0804);
	r7 = D(r7, s0_1_0, 0x02F30502, 0x12F610F3, 0x03EA1DDA, 0xF401040D);
	r0 = D(r0, s0_1_1, 0x12E6E916, 0xDA07C1CD, 0xF00BE127, 0x050AFAE4);
	r1 = D(r1, s0_1_1, 0xEEFF160E, 0x030114FD, 0x00141FF8, 0xD1F8F213);
	r2 = D(r2, s0_1_1, 0x0AE4040F, 0xD0FA1321, 0x00013305, 0x09F40A04);
	r3 = D(r3, s0_1_1, 0x07ECEF08, 0x02FE210A, 0x0100DDFA, 0x1DFE0D05);
	r4 = D(r4, s0_1_1, 0xE7FA39EE, 0xFDB90E04, 0xFF05131E, 0xF2D9DFEC);
	r5 = D(r5, s0_1_1, 0x16F21FFD, 0x0905F8EF, 0x0CCE050F, 0x07FEF809);
	r6 = D(r6, s0_1_1, 0xF6F9F730, 0x2015E921, 0xBFD9F9AC, 0x060826EF);
	r7 = D(r7, s0_1_1, 0x16FDF5F4, 0xEC0D00DB, 0xD5F4EDA5, 0xFCFE0104);
	r0 = D(r0, s0_1_2, 0x0BFAE1F7, 0x27F006EF, 0x0100F614, 0x0ECC01E1);
	r1 = D(r1, s0_1_2, 0xF8FA030C, 0xFDF9DCFE, 0xFCFC0CF9, 0x0EFEF299);
	r2 = D(r2, s0_1_2, 0xD01105FD, 0xFAE0E815, 0x03020A01, 0xFCF00412);
	r3 = D(r3, s0_1_2, 0x180CFEF6, 0x07FFEC03, 0xDC0E1CB9, 0xFB0425E5);
	r4 = D(r4, s0_1_2, 0x2301E500, 0x04F4C720, 0x0802DDDA, 0x0BFEEBE0);
	r5 = D(r5, s0_1_2, 0x02F2F0FF, 0x0DFFF801, 0x1DDCE6C2, 0x1007EBE7);
	r6 = D(r6, s0_1_2, 0x1EE2FE0C, 0x0005FFEB, 0x2104EECE, 0x011CFB02);
	r7 = D(r7, s0_1_2, 0x0AFD07F9, 0x150528F9, 0xE1FF02EE, 0xEE03F7EE);
	r0 = D(r0, s0_2_0, 0xF6EC17F9, 0xDDFB15FC, 0x0DF30CF4, 0xD5120E05);
	r1 = D(r1, s0_2_0, 0xFBF80B02, 0xFFFC04FA, 0x0FFEFB03, 0xF5FDF7FD);
	r2 = D(r2, s0_2_0, 0xEC0EF3F9, 0xFBF8F409, 0xFF0201FE, 0xF100FAF9);
	r3 = D(r3, s0_2_0, 0x0F010903, 0x01FF0006, 0xFAF111D2, 0x02000D01);
	r4 = D(r4, s0_2_0, 0x02FCFEFD, 0x0204FB14, 0xFB031403, 0xFB070511);
	r5 = D(r5, s0_2_0, 0x0B0607F1, 0xFCF9F90A, 0xEE080E02, 0xED0711FA);
	r6 = D(r6, s0_2_0, 0xBEF50804, 0xD119D7C6, 0x1706070D, 0x000B07F8);
	r7 = D(r7, s0_2_0, 0x02FE0002, 0x03060114, 0x13FC0EF5, 0xFDF8FE09);
	r0 = D(r0, s0_2_1, 0xF9FA01F5, 0xF5F6F8ED, 0x0D1714FA, 0xF1EAF1F6);
	r1 = D(r1, s0_2_1, 0xFBF9F908, 0xFF020601, 0x0AF8F901, 0xFAF30A03);
	r2 = D(r2, s0_2_1, 0x02E0F409, 0xB5210BF8, 0xFB0506FE, 0xF0070800);
	r3 = D(r3, s0_2_1, 0x1015F9FF, 0xFDFC00FC, 0x07F604F9, 0xE7FAF709);
	r4 = D(r4, s0_2_1, 0xF701EC02, 0x02DCD7FE, 0x0DF1F204, 0x0E0DEC01);
	r5 = D(r5, s0_2_1, 0x070C00FC, 0xFE0D09E5, 0x0E280BE5, 0x0806F906);
	r6 = D(r6, s0_2_1, 0xE0D6E409, 0xE9041AFB, 0xA0C6F8EE, 0x1203F3F9);
	r7 = D(r7, s0_2_1, 0x0502FAFD, 0x06F9F1FB, 0xE405F60A, 0xF4ECF015);
	r0 = D(r0, s0_2_2, 0xF60AF202, 0xE9071403, 0xEE08030A, 0xEF0AF801);
	r1 = D(r1, s0_2_2, 0xFDFFF503, 0xFB0803FD, 0x070210F8, 0xDF0122D3);
	r2 = D(r2, s0_2_2, 0x07110DF5, 0xC4000428, 0xFBFCFDFF, 0xF7F404F8);
	r3 = D(r3, s0_2_2, 0xEDFF0706, 0xFC0303FE, 0xE4110604, 0xEDF3F4FF);
	r4 = D(r4, s0_2_2, 0xEA090FFF, 0xE6030415, 0x0402F806, 0x24140F13);
	r5 = D(r5, s0_2_2, 0x10FCF509, 0x0DF8FC06, 0x17090FE9, 0x0FE2E8F8);
	r6 = D(r6, s0_2_2, 0xF72113D4, 0x0311E6E6, 0xC62915D6, 0x15ECF70A);
	r7 = D(r7, s0_2_2, 0x00FFFCFF, 0x01FFFEFB, 0xF20EEB14, 0xE1FB0505);
	r0 = D(r0, s1_0_0, 0x0CFF04EA, 0xE50BFFF2, 0xFDFFFA00, 0x053AEC11);
	r1 = D(r1, s1_0_0, 0x0303FDFB, 0x03FD04FE, 0xFDF4FCFA, 0x04F81502);
	r2 = D(r2, s1_0_0, 0xF210F2F0, 0xD0F9ECF5, 0xFF03FD03, 0xF301F2F3);
	r3 = D(r3, s1_0_0, 0x0601090C, 0xFC010200, 0x08030A0A, 0x02050B05);
	r4 = D(r4, s1_0_0, 0x0610E7F9, 0x030E021F, 0xF4090204, 0xFEFCFAFE);
	r5 = D(r5, s1_0_0, 0xFA02FFFA, 0x051506F6, 0xE3CBDFE4, 0x06F50FF6);
	r6 = D(r6, s1_0_0, 0xF6030A09, 0xE5FF25F2, 0x290110DA, 0x22B2EBE0);
	r7 = D(r7, s1_0_0, 0xFDF50004, 0xFF0000F0, 0xF7FAE903, 0xF5EF13F8);
	r0 = D(r0, s1_0_1, 0x16120104, 0xF10106FB, 0x051400F5, 0xDEFD180B);
	r1 = D(r1, s1_0_1, 0xF90200FE, 0x0405FF01, 0x0AFA05F5, 0xE80DD7D5);
	r2 = D(r2, s1_0_1, 0xDEEB0D08, 0xE0F0FB1E, 0xFE000204, 0x0305F5F8);
	r3 = D(r3, s1_0_1, 0x1611FF07, 0xFCF20201, 0x10FD09F0, 0x0D0700FF);
	r4 = D(r4, s1_0_1, 0xE607180C, 0xEBCD1801, 0xF60401FF, 0x00FD150D);
	r5 = D(r5, s1_0_1, 0xF8110305, 0x01F10710, 0x0F1405F4, 0xFD0BF4FA);
	r6 = D(r6, s1_0_1, 0x150E110F, 0x03F21C06, 0xFD021DFB, 0x04FC18F7);
	r7 = D(r7, s1_0_1, 0xFCF9FF07, 0xF6E8090E, 0x1A01161B, 0xD6E80F0B);
	r0 = D(r0, s1_0_2, 0x19FF11FE, 0xFBFFF308, 0xFF11F4FE, 0x24F62701);
	r1 = D(r1, s1_0_2, 0x03010103, 0xF6FE0204, 0xFEF30303, 0xE5EAE012);
	r2 = D(r2, s1_0_2, 0xFC0B0304, 0x01DB1C07, 0x000004FF, 0x090EFAFC);
	r3 = D(r3, s1_0_2, 0x04F8FF06, 0xFDFFFF02, 0x0607E601, 0xFBF8FF0A);
	r4 = D(r4, s1_0_2, 0xFEF30402, 0xFE050AFE, 0xF300FCFE, 0x02F4130A);
	r5 = D(r5, s1_0_2, 0x09F804FB, 0xFEF60301, 0xF4C9F8FB, 0xE7F60A02);
	r6 = D(r6, s1_0_2, 0x0DFEF109, 0x16F303ED, 0xE4F2E5FF, 0x0FEEEB00);
	r7 = D(r7, s1_0_2, 0x05FE0407, 0xFD000709, 0x00FD0B01, 0xF401F507);
	r0 = D(r0, s1_1_0, 0x10FD0604, 0x031AF7DE, 0xFC0D0508, 0x251CEE11);
	r1 = D(r1, s1_1_0, 0x01FCF507, 0x02FD13FF, 0xEDF419EA, 0x0F140804);
	r2 = D(r2, s1_1_0, 0xF60AFFE7, 0xC1E4FDFE, 0xFD03F003, 0xF1FF0F04);
	r3 = D(r3, s1_1_0, 0x11002412, 0x0805F9FA, 0xFA112A06, 0x0D10E6ED);
	r4 = D(r4, s1_1_0, 0x0AF5EE0A, 0x16FCE6EC, 0xFDF6EFFB, 0x08EB0403);
	r5 = D(r5, s1_1_0, 0x0A190905, 0xF2020100, 0xF310E1E5, 0x04EED7EE);
	r6 = D(r6, s1_1_0, 0xE10328F2, 0x3003E52C, 0xDF110E10, 0x1ADDC300);
	r7 = D(r7, s1_1_0, 0xF1FF2902, 0xF1EEEFEB, 0x050F12ED, 0x16F7D7E7);
	r0 = D(r0, s1_1_1, 0x18FE130B, 0xC4DEF70E, 0x021C080D, 0x16341EFD);
	r1 = D(r1, s1_1_1, 0x0B030D17, 0xF4001802, 0xEAFDFB09, 0x03CA15F5);
	r2 = D(r2, s1_1_1, 0xE4F00AE3, 0xEFB610EA, 0x030327FE, 0x02DF1210);
	r3 = D(r3, s1_1_1, 0x050FEB11, 0x040C10FC, 0x020008E5, 0x050D0611);
	r4 = D(r4, s1_1_1, 0x1AE22B11, 0x190714D3, 0xFFF31208, 0x23E129F2);
	r5 = D(r5, s1_1_1, 0x0B031DFD, 0xF5EDEF05, 0xE4B0F620, 0xF0FBC706);
	r6 = D(r6, s1_1_1, 0xF8DA2DEC, 0x0A072BDE, 0xD8D1FF36, 0x0EE50CF9);
	r7 = D(r7, s1_1_1, 0x00032C14, 0xCCDB0AED, 0xF9E81BFB, 0xFAE00801);
	r0 = D(r0, s1_1_2, 0x1AEDFEF9, 0x220801FF, 0x0808FCFC, 0x15FBE0F7);
	r1 = D(r1, s1_1_2, 0x07F90EFD, 0xFFFEF701, 0xFFFA08FA, 0xC3DB810D);
	r2 = D(r2, s1_1_2, 0xF21DF7F5, 0xF8D8F9DA, 0x02060300, 0x00F202FF);
	r3 = D(r3, s1_1_2, 0x14F10404, 0xFCFEFD00, 0xFDE80D0C, 0xFBF7320D);
	r4 = D(r4, s1_1_2, 0xFAF1E2CC, 0x0414C2EC, 0xFDD906F5, 0xEEF2F6DD);
	r5 = D(r5, s1_1_2, 0xFB12110B, 0x03FEF703, 0x0DD9FCEC, 0xF6FA0705);
	r6 = D(r6, s1_1_2, 0x2216F9F0, 0x070AE905, 0x2DD7FCEA, 0x0EFB1A05);
	r7 = D(r7, s1_1_2, 0x08FA1AF8, 0xEEFF180C, 0x00FFF40A, 0xFDEC22F4);
	r0 = D(r0, s1_2_0, 0xFC0F7F06, 0xFCFC81FA, 0x0608310E, 0x09FD7F03);
	r1 = D(r1, s1_2_0, 0x0008AB04, 0x02071B02, 0xF9F60000, 0x190C00FA);
	r2 = D(r2, s1_2_0, 0xD912FA10, 0x04084A08, 0xFFFF17FD, 0xEFFBCE12);
	r3 = D(r3, s1_2_0, 0x0A03C9F8, 0xF5FF1D06, 0x101B7F00, 0x01067FFA);
	r4 = D(r4, s1_2_0, 0xEFFB360A, 0x06EC7F20, 0xF6F0C3F3, 0xFC1D81ED);
	r5 = D(r5, s1_2_0, 0x0AFB9FFB, 0x03FB7F0C, 0xE7FA8118, 0x100B7F07);
	r6 = D(r6, s1_2_0, 0x0E817F1C, 0xBC0EE4FD, 0xF1C97F33, 0xFCE7DB0A);
	r7 = D(r7, s1_2_0, 0xF8065BFC, 0xEAFFEEFA, 0xF7E67FF1, 0x0EE3E5F4);
	r0 = D(r0, s1_2_1, 0x04167FEF, 0x06118117, 0x0D0AAFF1, 0x01E6DAFF);
	r1 = D(r1, s1_2_1, 0xFE02EDFF, 0x010104F9, 0xF6035F10, 0x02E22109);
	r2 = D(r2, s1_2_1, 0xFF212408, 0xFA0D740B, 0xFB02FB07, 0x12F5BE03);
	r3 = D(r3, s1_2_1, 0x0A00D8EF, 0xFD02DF01, 0xFDF2EF00, 0xE9FF7F0A);
	r4 = D(r4, s1_2_1, 0xF4014BE5, 0x20DB81F8, 0xF508F9F5, 0x11F21DFD);
	r5 = D(r5, s1_2_1, 0x07FD47FB, 0x07FA7F0B, 0xE8262FE3, 0x07F92E17);
	r6 = D(r6, s1_2_1, 0x12D081DF, 0x00EF81EA, 0xF8D66C05, 0x01FE44F7);
	r7 = D(r7, s1_2_1, 0xFF03540D, 0xD7FF8110, 0xE22E7FFA, 0xF0F5FD0F);
	r0 = D(r0, s1_2_2, 0x00FC7FFF, 0x0C16B410, 0x08050AF6, 0x1C11F6E9);
	r1 = D(r1, s1_2_2, 0x0302D605, 0xFE05DEFE, 0xF3F2A0FD, 0xF900B9EF);
	r2 = D(r2, s1_2_2, 0xFE05D007, 0xFDED940E, 0x01033800, 0x02E98103);
	r3 = D(r3, s1_2_2, 0x000923FB, 0xFC00C0FF, 0x02F6810F, 0x010A7FFF);
	r4 = D(r4, s1_2_2, 0x00083C19, 0xFFF4EEFF, 0xF500A204, 0x0CEEDBCA);
	r5 = D(r5, s1_2_2, 0xFBFFE101, 0xFF0A7FFD, 0xF503C90D, 0x0FE97F0D);
	r6 = D(r6, s1_2_2, 0x0DC225E9, 0x060B81FA, 0x1607E3D9, 0x06F4E003);
	r7 = D(r7, s1_2_2, 0x00057DFF, 0x0F05FB00, 0x04117F0B, 0x03FC8103);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFC0BEBED, 0xF702FCF7, 0x03F8FEF1, 0xD5EDC9D9);
	r1 = D(r1, s0_0_0, 0xFEFD0305, 0x0003FB07, 0x02F90907, 0x060D0BE7);
	r2 = D(r2, s0_0_0, 0x0901ED12, 0xE200F6FE, 0xFC0000FB, 0x020D0904);
	r3 = D(r3, s0_0_0, 0xFEFAED01, 0x0002FE08, 0xF617FBEB, 0xFD11FBF2);
	r4 = D(r4, s0_0_0, 0x0AFC06E9, 0x040DE7EB, 0xF70AFC01, 0x0502E9FF);
	r5 = D(r5, s0_0_0, 0x070312F6, 0x080200E7, 0xDE1F0B0B, 0xF3FC05FE);
	r6 = D(r6, s0_0_0, 0x0329F4F8, 0xFC472FE8, 0x0FFB06BC, 0xBF818181);
	r7 = D(r7, s0_0_0, 0x06FBFB08, 0xF0FCFE11, 0xF30D04FF, 0x01F2D607);
	r0 = D(r0, s0_0_1, 0xFFEA18FF, 0xFE130CFB, 0xF102FBF5, 0xDC2DF9E7);
	r1 = D(r1, s0_0_1, 0x09FCFA1A, 0xFF0105FA, 0xFC0809EF, 0xEA00FB1A);
	r2 = D(r2, s0_0_1, 0x181AFD15, 0x00F7F911, 0xFB030005, 0x00FB0811);
	r3 = D(r3, s0_0_1, 0x010DF802, 0x070101FA, 0x010C060A, 0x0AFE04EE);
	r4 = D(r4, s0_0_1, 0x0B0AED10, 0xF500EB04, 0x00FA0212, 0xE111F608);
	r5 = D(r5, s0_0_1, 0x07060EFC, 0x0F0DF004, 0x0CE31D0F, 0xF50A0BF3);
	r6 = D(r6, s0_0_1, 0x12F502F4, 0xF514F0FA, 0x0305EF06, 0x11F8F92B);
	r7 = D(r7, s0_0_1, 0xF7F9141F, 0x0D18160F, 0xFE1A0012, 0x13050420);
	r0 = D(r0, s0_0_2, 0xF517F10A, 0xF7FCF2F7, 0xFAFE06F4, 0xF52B1315);
	r1 = D(r1, s0_0_2, 0xFFFA09F7, 0xFB08FF02, 0xFB05FF0B, 0xFEF12324);
	r2 = D(r2, s0_0_2, 0x0C03F31B, 0xFEE81604, 0x03FFFE05, 0xEFF1FCE6);
	r3 = D(r3, s0_0_2, 0xF801EEFB, 0xFE06FEFA, 0x0CF80017, 0x08F30905);
	r4 = D(r4, s0_0_2, 0xEE091300, 0xFC1C0DDE, 0xFFF106FF, 0xFBFCF806);
	r5 = D(r5, s0_0_2, 0x02FD0309, 0x09FCFF16, 0x0AE7FA17, 0x10FCF1FC);
	r6 = D(r6, s0_0_2, 0x0212D9FB, 0x090D0AF5, 0xFFEFFD13, 0xFD09FBF9);
	r7 = D(r7, s0_0_2, 0x02FEFF02, 0xFD070103, 0xFC12F503, 0x0DFBFFED);
	r0 = D(r0, s0_1_0, 0x01F0F3F9, 0x00011006, 0x03FCF1FB, 0xF30725F7);
	r1 = D(r1, s0_1_0, 0x02F906FD, 0x0100FEFD, 0x030CFB0B, 0xFAFDF0DD);
	r2 = D(r2, s0_1_0, 0x1E0CF119, 0x0520F725, 0xFE02FF07, 0x0DFDE90D);
	r3 = D(r3, s0_1_0, 0x04000D00, 0x03FCFE01, 0xEE050B14, 0x06080104);
	r4 = D(r4, s0_1_0, 0xFF0108F6, 0xEA11091A, 0x11FA0011, 0x0605E90D);
	r5 = D(r5, s0_1_0, 0xF908FCF6, 0x0AF001FD, 0x05FA1009, 0x02E60CFD);
	r6 = D(r6, s0_1_0, 0xE3D20CF4, 0x128D0611, 0xF90610DC, 0xCC09FC2D);
	r7 = D(r7, s0_1_0, 0xFEFFFE04, 0xFE0DF30B, 0x0000F2ED, 0xFB05F2F8);
	r0 = D(r0, s0_1_1, 0x0DF4031A, 0x09F1F7F2, 0xFDF6FDEA, 0x0EEDE51A);
	r1 = D(r1, s0_1_1, 0x030709EA, 0x0600FCFC, 0xFCF5FEFF, 0x1F0A22F1);
	r2 = D(r2, s0_1_1, 0xFC0C0F12, 0x1EF10A13, 0x01FD030D, 0x07FA0D1D);
	r3 = D(r3, s0_1_1, 0xFA0406FA, 0x0808F60F, 0xDCFBFEE6, 0x0A1005FB);
	r4 = D(r4, s0_1_1, 0x0A0F0F19, 0xF1F50403, 0xE9110DF5, 0xDEDB0201);
	r5 = D(r5, s0_1_1, 0xEEFE0200, 0xFCEE080F, 0xF50F00E7, 0x0D0201E3);
	r6 = D(r6, s0_1_1, 0xE8FB1B03, 0x23DAEE0E, 0x0DED2CFD, 0xF4F2060F);
	r7 = D(r7, s0_1_1, 0x04F4F20B, 0x1711E70D, 0xF71AE519, 0xF702F506);
	r0 = D(r0, s0_1_2, 0x00FDF401, 0x09FE0900, 0x0EF900EA, 0xC2E204F0);
	r1 = D(r1, s0_1_2, 0xF2080D0A, 0xFE0105FF, 0xFB07FB01, 0xFDEC110B);
	r2 = D(r2, s0_1_2, 0x04D8FA16, 0x08CEF6FC, 0x0601FC05, 0xFBCB0A01);
	r3 = D(r3, s0_1_2, 0x0A09FF03, 0x02FE01F9, 0xF720F814, 0x0A0EFC05);
	r4 = D(r4, s0_1_2, 0xE8F0E0E7, 0xEC0D0302, 0x0BFFF204, 0x04FBF30D);
	r5 = D(r5, s0_1_2, 0xF50002F2, 0xFA020A0A, 0xF9F5FF09, 0xFAE8FC12);
	r6 = D(r6, s0_1_2, 0x09EF23F1, 0xF109FE00, 0x32091302, 0x060EFCF7);
	r7 = D(r7, s0_1_2, 0xFC000600, 0x09F11313, 0xFEEBE20B, 0xFAFA1516);
	r0 = D(r0, s0_2_0, 0x0A0EF412, 0xFAFFFD02, 0xFBFB05FA, 0xFF04F5ED);
	r1 = D(r1, s0_2_0, 0xF3FAF807, 0x04010200, 0x00FBFFFB, 0xF501FAFB);
	r2 = D(r2, s0_2_0, 0xF90F0AF5, 0x05FB01E9, 0x010402FD, 0xFDFD0402);
	r3 = D(r3, s0_2_0, 0x0601EE02, 0xFDFCF70B, 0x07F30F0A, 0x0107FF03);
	r4 = D(r4, s0_2_0, 0xEE12EB1A, 0x11EFF41F, 0x05FDF20F, 0x05F8FF0A);
	r5 = D(r5, s0_2_0, 0x02010201, 0xFFFCF401, 0x20080CED, 0xF2F304F3);
	r6 = D(r6, s0_2_0, 0xFFFBCBFE, 0x4BEC08F2, 0xF20ED524, 0x030506FF);
	r7 = D(r7, s0_2_0, 0x090903FB, 0xF8FDF907, 0x09FFED06, 0x0401EE05);
	r0 = D(r0, s0_2_1, 0xE5F50807, 0xFE13F4F9, 0x0610F9F5, 0xE905E218);
	r1 = D(r1, s0_2_1, 0x0504FF0B, 0x0004F800, 0x04F50BFB, 0x27050A0E);
	r2 = D(r2, s0_2_1, 0xFEF70F01, 0xF11B1A0D, 0xFBFE0209, 0x021802FE);
	r3 = D(r3, s0_2_1, 0xF4F9F9F7, 0x000D0202, 0x0613F9FB, 0x0103F808);
	r4 = D(r4, s0_2_1, 0xD1E5EAF6, 0xE3DB03F8, 0xEEF00BEA, 0xF3F604FA);
	r5 = D(r5, s0_2_1, 0x1002F909, 0x1101FE0D, 0x1E0AF320, 0x190E062B);
	r6 = D(r6, s0_2_1, 0x07E0E124, 0xE7FE041D, 0x9FFCF12A, 0x1305F40D);
	r7 = D(r7, s0_2_1, 0xF8040707, 0xD7EB0809, 0xEE0000F5, 0xFA0F04FE);
	r0 = D(r0, s0_2_2, 0xF61CF413, 0x0409080B, 0x0E0F06FD, 0xFCF91B00);
	r1 = D(r1, s0_2_2, 0xF60CFFFB, 0xFE00FF01, 0xF1F80408, 0x0702E208);
	r2 = D(r2, s0_2_2, 0xFAF8FAF6, 0xF00D0DF2, 0x02010502, 0xF9030310);
	r3 = D(r3, s0_2_2, 0x0505F604, 0xFCFF0201, 0xFAFBFFFA, 0xFEF4F9FA);
	r4 = D(r4, s0_2_2, 0x1F010A04, 0x06EB0F10, 0xF5F40701, 0xFDF60EFA);
	r5 = D(r5, s0_2_2, 0x040CF4FD, 0x13120AF7, 0x0C09F4FE, 0xFEF70406);
	r6 = D(r6, s0_2_2, 0xFFEF1B08, 0x04D8FDFA, 0x08F5FDF0, 0x01150708);
	r7 = D(r7, s0_2_2, 0xF3F8010A, 0xFBFE00FC, 0xF3EB0D13, 0xFB0AF306);
	r0 = D(r0, s1_0_0, 0x131B25ED, 0x1AFE0CFE, 0xF016090D, 0x150053D9);
	r1 = D(r1, s1_0_0, 0x0709F7F7, 0x05030801, 0x010E0B00, 0x17F91704);
	r2 = D(r2, s1_0_0, 0xF6FEEDFA, 0x16EDDF06, 0x00FF0401, 0xEC0EF700);
	r3 = D(r3, s1_0_0, 0xE71408F5, 0x0EF90BFE, 0x33FEE911, 0x1008F106);
	r4 = D(r4, s1_0_0, 0x06FBEFF9, 0xE5F5F9F6, 0x07F1DE02, 0xE6F3F2F3);
	r5 = D(r5, s1_0_0, 0xD7FBF806, 0x06F31FFA, 0x281AD1DD, 0x0517A5F8);
	r6 = D(r6, s1_0_0, 0x15FD72E2, 0xA64F812C, 0x2008ED14, 0x811EA1EC);
	r7 = D(r7, s1_0_0, 0xEFF905F9, 0x20F508F8, 0x17050FFA, 0x3BFDBF22);
	r0 = D(r0, s1_0_1, 0x19FE22F0, 0x0C17E5F7, 0xFC1616FE, 0x2AE1AF00);
	r1 = D(r1, s1_0_1, 0xF40A01F2, 0x03F80A07, 0x021107FF, 0x110141F1);
	r2 = D(r2, s1_0_1, 0x081E2FFB, 0x0FD708F1, 0x05FD0604, 0xF302F1F5);
	r3 = D(r3, s1_0_1, 0xE2FFB80A, 0x07FFF200, 0xEC122A13, 0xEDFFEDFE);
	r4 = D(r4, s1_0_1, 0x02F60A00, 0xF9F8FB15, 0x021110FC, 0x10ECFBDF);
	r5 = D(r5, s1_0_1, 0x05FA0807, 0x23ED070B, 0xB1D6FDDC, 0x01E70AF7);
	r6 = D(r6, s1_0_1, 0x2A162AF9, 0x021306E0, 0x1616F3F6, 0x0807FB6C);
	r7 = D(r7, s1_0_1, 0xEF00FCFD, 0x00FA14F3, 0xF6F1090E, 0x040FE32F);
	r0 = D(r0, s1_0_2, 0x1C11F909, 0x14FF0BF4, 0xFF040E05, 0x23144BEE);
	r1 = D(r1, s1_0_2, 0x03FBF2F9, 0x00050206, 0x040215FE, 0xDE24A4E0);
	r2 = D(r2, s1_0_2, 0xEDF4F50D, 0x3A08342B, 0x03FF0602, 0xFAFA18FF);
	r3 = D(r3, s1_0_2, 0xFC051604, 0xFF0302FB, 0xF103DE01, 0x02FC13FF);
	r4 = D(r4, s1_0_2, 0x120FF5FB, 0x8118DEF0, 0x081201F4, 0xF7FB24F6);
	r5 = D(r5, s1_0_2, 0xFFFBDFFA, 0x03F81502, 0x08F852CF, 0xF40F2009);
	r6 = D(r6, s1_0_2, 0x280C1BF5, 0x0B06DF03, 0x070D271B, 0xFA11DF01);
	r7 = D(r7, s1_0_2, 0x01F903FD, 0x1BFD0308, 0xED0781F9, 0x2A031C06);
	r0 = D(r0, s1_1_0, 0x18D508E0, 0x1E06F3EA, 0x030F040D, 0x0DF3030D);
	r1 = D(r1, s1_1_0, 0xFCEFFCFC, 0xF8F9F4FC, 0x020612F3, 0x1E100803);
	r2 = D(r2, s1_1_0, 0xF8C51A18, 0x42810F22, 0x08000D07, 0xEDD3EA04);
	r3 = D(r3, s1_1_0, 0x04231E03, 0x09FD0306, 0xFAF13606, 0x06F90CFE);
	r4 = D(r4, s1_1_0, 0x11F4FF0B, 0x31D200F1, 0x03F2F4F8, 0x06F9FEEC);
	r5 = D(r5, s1_1_0, 0xF9120802, 0x0DFE110E, 0xF1E50FF5, 0x02EE160E);
	r6 = D(r6, s1_1_0, 0x1CAB23DC, 0x169A81F4, 0xF6E93211, 0x47190BFC);
	r7 = D(r7, s1_1_0, 0xF4FB0A03, 0x010181E8, 0x061313FC, 0xF4FD10EC);
	r0 = D(r0, s1_1_1, 0x0AE62A04, 0x00E6F3E0, 0x25FC1912, 0x0CAE4A40);
	r1 = D(r1, s1_1_1, 0xEEF6F501, 0x01E60C03, 0xF71C0801, 0x11F402FC);
	r2 = D(r2, s1_1_1, 0x1A1AF9F0, 0xC8B4BF1E, 0x0B080705, 0x00F2FAFE);
	r3 = D(r3, s1_1_1, 0xF5F307F9, 0x05F7FEFF, 0x12F4CFFE, 0x0AF1F4E6);
	r4 = D(r4, s1_1_1, 0x0AF3FD0C, 0xEAF52F05, 0x170D0206, 0xD9FC22F4);
	r5 = D(r5, s1_1_1, 0x0AF40AFB, 0x070D0E08, 0x18ECFFF1, 0x2730FD07);
	r6 = D(r6, s1_1_1, 0x0CA3E2F2, 0x32152FD8, 0xFBEF1414, 0xF5EEF901);
	r7 = D(r7, s1_1_1, 0x0C04F5FB, 0xF6DE11F2, 0xD30711E9, 0x1E0413F0);
	r0 = D(r0, s1_1_2, 0x10EE3E0A, 0x08EF0501, 0x02030205, 0x09B7D80A);
	r1 = D(r1, s1_1_2, 0xFA0B00FE, 0x0707F9FE, 0xF7020BFD, 0xF92723DB);
	r2 = D(r2, s1_1_2, 0x02002F03, 0xFD07112C, 0x09FA0B07, 0xF2D70A02);
	r3 = D(r3, s1_1_2, 0x08F11D0D, 0xFF01F8FA, 0xF704FE03, 0x02FC250F);
	r4 = D(r4, s1_1_2, 0xF31CF0F3, 0x18FA2C05, 0xF3190BFD, 0x11F6FF0D);
	r5 = D(r5, s1_1_2, 0xF503100B, 0x18EEE80B, 0xF0EE09F1, 0x0C0E280C);
	r6 = D(r6, s1_1_2, 0xFED33A11, 0x1AD681EF, 0xFCF3032B, 0xF70505F7);
	r7 = D(r7, s1_1_2, 0x03012007, 0xF01C09F1, 0x0712F7FC, 0x0106E901);
	r0 = D(r0, s1_2_0, 0x12011BFE, 0xF4F5ECFA, 0xF9F2050B, 0x150C100C);
	r1 = D(r1, s1_2_0, 0x00F5FBFA, 0xFDF9FFFE, 0x010312FD, 0x1A02F7F5);
	r2 = D(r2, s1_2_0, 0xF824EC10, 0x1010281B, 0x03050504, 0x01FDFB03);
	r3 = D(r3, s1_2_0, 0x0110C8FE, 0xFFF50C02, 0x0600E90B, 0x0104EB02);
	r4 = D(r4, s1_2_0, 0x00030B0B, 0x270712F6, 0xFE02FDF9, 0x091419FD);
	r5 = D(r5, s1_2_0, 0x0409F503, 0x00101F0C, 0x1809F4E7, 0x1F161606);
	r6 = D(r6, s1_2_0, 0xE6A2C4F2, 0x36FD8107, 0x101AFFFC, 0x2301F504);
	r7 = D(r7, s1_2_0, 0xFE070B08, 0x06F4E9FC, 0xF3FF01FE, 0x001E0B03);
	r0 = D(r0, s1_2_1, 0x0D0123EE, 0x1EFE1BE9, 0xFA08FA17, 0xD205D8E8);
	r1 = D(r1, s1_2_1, 0x000412FE, 0x05030CFE, 0xF5FEF501, 0xF5D7E8F5);
	r2 = D(r2, s1_2_1, 0x0A12021A, 0x1710361A, 0x03010304, 0xFBFD0EF9);
	r3 = D(r3, s1_2_1, 0x05132FFB, 0x05EF06FD, 0x1826140F, 0xED0602F9);
	r4 = D(r4, s1_2_1, 0x0A18F4FD, 0xF405F2F8, 0x06060EFF, 0xEEEAE901);
	r5 = D(r5, s1_2_1, 0xF9F8FAFF, 0x0DE70803, 0x0FF0E115, 0x01F1FC13);
	r6 = D(r6, s1_2_1, 0x0C34F9DF, 0x0316DE03, 0x22F3521E, 0x15EC06FE);
	r7 = D(r7, s1_2_1, 0x0905FC04, 0xFEFD1CF2, 0xEF15F9F4, 0xFC1316FA);
	r0 = D(r0, s1_2_2, 0x14F9131A, 0x0BE63309, 0x04FD0505, 0x29E5B21A);
	r1 = D(r1, s1_2_2, 0x04050D01, 0xFDFD07FE, 0xFE09FF01, 0x170217FA);
	r2 = D(r2, s1_2_2, 0xF201132C, 0xFD0309FE, 0x05F80904, 0x04EEF1FF);
	r3 = D(r3, s1_2_2, 0xF60FB90A, 0x04FFFCF8, 0xE6F01F07, 0x0202DC01);
	r4 = D(r4, s1_2_2, 0xF4100CFD, 0x1105FF2A, 0xF11D0803, 0x033A48E9);
	r5 = D(r5, s1_2_2, 0xF80B17FD, 0x0CF4FF0B, 0xFBDB5400, 0x10F01209);
	r6 = D(r6, s1_2_2, 0x2F058107, 0x24F11E01, 0x19FA082C, 0x02080904);
	r7 = D(r7, s1_2_2, 0xFCFD1508, 0x15035F05, 0x1BF713FA, 0x0D09C709);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xCF02E20A, 0x2609EC05, 0x0702F4FC, 0xEFCFD104);
	r1 = D(r1, s0_0_0, 0xFFEEFE06, 0x06FEFFFC, 0x0B00F903, 0x2101ED1B);
	r2 = D(r2, s0_0_0, 0x0FF3EE1C, 0xBDD3F3EA, 0x01040502, 0xF007F6FC);
	r3 = D(r3, s0_0_0, 0x261BF3FB, 0x04010701, 0x0D1515FC, 0x19F8F905);
	r4 = D(r4, s0_0_0, 0xEAFFF718, 0xF4F21021, 0x0003FE00, 0xEC0102EE);
	r5 = D(r5, s0_0_0, 0xEE0C1CF6, 0x26FDF2FE, 0x2AE2EDF6, 0x34F5F61E);
	r6 = D(r6, s0_0_0, 0x0C0414E8, 0x69C6BCC6, 0xDB00EBEF, 0xC6818181);
	r7 = D(r7, s0_0_0, 0xFDFD01FE, 0xFDF6F402, 0x230EE60A, 0x0326FB0B);
	r0 = D(r0, s0_0_1, 0x171CF7FD, 0xD000E5ED, 0x1B1AF2FE, 0xD03409CC);
	r1 = D(r1, s0_0_1, 0x0E0214EC, 0xF908070E, 0x0B030408, 0xEBEAE8FE);
	r2 = D(r2, s0_0_1, 0xE7FFE112, 0xD92CFAD4, 0x03FC0903, 0x240C0F04);
	r3 = D(r3, s0_0_1, 0x16F905E6, 0xF50200F3, 0x3CFC0006, 0xE71215F3);
	r4 = D(r4, s0_0_1, 0x2B1714EE, 0x00E9E20A, 0xE9F60401, 0x1DF1FEF2);
	r5 = D(r5, s0_0_1, 0x0DFB1418, 0x11F80702, 0xDA06E7F8, 0xDEF4F7EF);
	r6 = D(r6, s0_0_1, 0xDBF31E21, 0x05120409, 0xE0CF07CF, 0x0AE8EC28);
	r7 = D(r7, s0_0_1, 0x0A00FEFE, 0xF7E90CD6, 0xE5E519FE, 0x02D4DE1E);
	r0 = D(r0, s0_0_2, 0xF9FF2600, 0x25EB0ADD, 0xFC1C00E6, 0xD5E44418);
	r1 = D(r1, s0_0_2, 0x0004F802, 0x02030802, 0x11FFF904, 0xCE04DFF5);
	r2 = D(r2, s0_0_2, 0xA3E40726, 0x1EEA34FE, 0xFEFF03F9, 0xFE0B1503);
	r3 = D(r3, s0_0_2, 0x1DFCFFE9, 0x0600FE00, 0xEAFCFDE2, 0x07030409);
	r4 = D(r4, s0_0_2, 0x03FDF80A, 0x24080701, 0xF103FF07, 0x16F807F3);
	r5 = D(r5, s0_0_2, 0xECF50104, 0x05EE0BE4, 0x08F1F72E, 0x05F41512);
	r6 = D(r6, s0_0_2, 0xE81DEBF3, 0x1605EF36, 0x291916E4, 0xF208050A);
	r7 = D(r7, s0_0_2, 0xFD0DF406, 0x09EF101A, 0x0DF3FCE9, 0xDBED1F15);
	r0 = D(r0, s0_1_0, 0xF306FAF0, 0x3AF8F001, 0xFFFFF60C, 0x06F3EAEC);
	r1 = D(r1, s0_1_0, 0xF1070805, 0x0205F2FC, 0x0D08FE03, 0xF414E4FE);
	r2 = D(r2, s0_1_0, 0xF407061C, 0xE7D6F1E8, 0x03040806, 0xF1F90813);
	r3 = D(r3, s0_1_0, 0x22FD10FB, 0xF203140D, 0x0C17EC02, 0xFBFFF410);
	r4 = D(r4, s0_1_0, 0x0A111708, 0xD908E3EF, 0x00F5F3FA, 0x0104F0F9);
	r5 = D(r5, s0_1_0, 0xFCFA0809, 0xDBE90012, 0xE3F1F503, 0xFD16F0F4);
	r6 = D(r6, s0_1_0, 0x00F8EDD0, 0x51160DCE, 0x2A1D20E9, 0xD1FE2E2C);
	r7 = D(r7, s0_1_0, 0x05FB0901, 0x1714090C, 0x33FC0CF9, 0x36ECE7D7);
	r0 = D(r0, s0_1_1, 0x04E407D7, 0x1407F6E3, 0x01071F0D, 0xAAFEBACA);
	r1 = D(r1, s0_1_1, 0xF2FBFCF5, 0xFE020509, 0x07F5F3FA, 0xF5FF0104);
	r2 = D(r2, s0_1_1, 0xEE0EC9E9, 0xF0F9D939, 0xFEFEF60F, 0x21F6F500);
	r3 = D(r3, s0_1_1, 0x2D0EF002, 0xF5FF0AFE, 0xEBEE1410, 0xE50B230F);
	r4 = D(r4, s0_1_1, 0x04E2DFEC, 0xC703D7DD, 0x1A13EFF4, 0xED07FB2D);
	r5 = D(r5, s0_1_1, 0x13F60C0B, 0x1FF1011D, 0xF4F73231, 0x0807FE06);
	r6 = D(r6, s0_1_1, 0xD30EDB8E, 0xFF160E0B, 0xB5DCF1B7, 0x18DB131C);
	r7 = D(r7, s0_1_1, 0x04FDFD0D, 0x06EBE5F6, 0xE4F5F7F5, 0x0514F705);
	r0 = D(r0, s0_1_2, 0xEEDD380A, 0xD7F013DB, 0xFA0300F0, 0xE6CD24EE);
	r1 = D(r1, s0_1_2, 0x10F9FD0A, 0x010414F8, 0x0203FE02, 0xFA1DEDE3);
	r2 = D(r2, s0_1_2, 0xD60009F8, 0xE515FBF3, 0xFEFA0404, 0x1DF6FD18);
	r3 = D(r3, s0_1_2, 0xF1FBFE13, 0x040D04F8, 0xF8F3FA09, 0xEEFB0002);
	r4 = D(r4, s0_1_2, 0x020708EB, 0xFC1708F2, 0x16FD0403, 0x012801EA);
	r5 = D(r5, s0_1_2, 0x0107F4FB, 0xEA06F403, 0xF00A01E9, 0x0EFBFAF7);
	r6 = D(r6, s0_1_2, 0xFC0804F6, 0xAC100AF7, 0xE0EA07F6, 0xFCFEF902);
	r7 = D(r7, s0_1_2, 0x1AFF0307, 0x23F8100F, 0x0DFF2A03, 0x1DEB06DE);
	r0 = D(r0, s0_2_0, 0x00FE1D04, 0xE0F114F7, 0x00FAFE07, 0x2108FC16);
	r1 = D(r1, s0_2_0, 0xF80607FA, 0xFEFE0203, 0x09FDF805, 0x00FF07FD);
	r2 = D(r2, s0_2_0, 0xE9FE0212, 0xA6F7F813, 0x01FFFE00, 0x22F6F7FF);
	r3 = D(r3, s0_2_0, 0x15FC0402, 0xFA02FF03, 0xE5F90E04, 0x01FFFA0A);
	r4 = D(r4, s0_2_0, 0x03FFEEEC, 0x02F233FE, 0xF1020308, 0xF9ED0BFA);
	r5 = D(r5, s0_2_0, 0x19FE03F9, 0xE50EFF02, 0xEB17F11E, 0x14FE0405);
	r6 = D(r6, s0_2_0, 0x0EF8FA0E, 0xE5FB051A, 0x3E0901EB, 0x2B19E9F6);
	r7 = D(r7, s0_2_0, 0xFD040005, 0xC61DE2F4, 0xF5EDE0FF, 0x1B0B0D11);
	r0 = D(r0, s0_2_1, 0x0C011302, 0x120317E8, 0x1EFFF8FB, 0x2411F21B);
	r1 = D(r1, s0_2_1, 0x0006FBFD, 0x04FFFDF9, 0xFA040101, 0x3FFB0D09);
	r2 = D(r2, s0_2_1, 0xD7061530, 0x0DFB03F7, 0xFD010403, 0x0D05FFEB);
	r3 = D(r3, s0_2_1, 0x0D01F6FC, 0xF4FB0400, 0x0AF80DF2, 0xE90EF50C);
	r4 = D(r4, s0_2_1, 0x08040314, 0xF4F4160B, 0xFC040400, 0x0B05FB06);
	r5 = D(r5, s0_2_1, 0x08FB0601, 0xFCFB1807, 0x1703021E, 0x2C031D0B);
	r6 = D(r6, s0_2_1, 0xE706ECE0, 0x04E11C19, 0x2E350DED, 0x11F4F70E);
	r7 = D(r7, s0_2_1, 0xFA0E0202, 0xED26000E, 0x020A20DD, 0x1DFAF315);
	r0 = D(r0, s0_2_2, 0xFBFC0F0C, 0x09EC16F8, 0xF5F8FCFB, 0x21F72B2E);
	r1 = D(r1, s0_2_2, 0x0408F902, 0xFB00FF00, 0xFF00F8F7, 0xF70F08EF);
	r2 = D(r2, s0_2_2, 0x0DFA0011, 0x13F20311, 0xFBF80708, 0x0CEAFDF5);
	r3 = D(r3, s0_2_2, 0xFF050318, 0xF905FEF5, 0x1611FC07, 0x05FB05F8);
	r4 = D(r4, s0_2_2, 0xF6080109, 0x08021F26, 0xFD1607F1, 0xF001ECE5);
	r5 = D(r5, s0_2_2, 0x0B06FEF5, 0xF702F80F, 0xEE09F90C, 0x1405120A);
	r6 = D(r6, s0_2_2, 0xFCF603FC, 0xEA01F8CC, 0x050001E7, 0x03FDFE0C);
	r7 = D(r7, s0_2_2, 0xFFFAFF08, 0xFB0BFFDF, 0x06030DF6, 0x0EFF02CF);
	r0 = D(r0, s1_0_0, 0x00FD18E6, 0x0CFB0BF6, 0x05F9FCFF, 0x03EFF5F2);
	r1 = D(r1, s1_0_0, 0xF9EE07F5, 0x0CFF01F9, 0x00F802F8, 0xE90B11EF);
	r2 = D(r2, s1_0_0, 0xFBDFF20F, 0xF5CB11FD, 0xF601FF00, 0xFFF2FFF9);
	r3 = D(r3, s1_0_0, 0x000708F6, 0xED04FEFF, 0xF20D0EF9, 0x10FFF6F7);
	r4 = D(r4, s1_0_0, 0xEDF7F307, 0xDF0209E8, 0x03FBF910, 0xFB00FBFD);
	r5 = D(r5, s1_0_0, 0xF709FE0A, 0x0A00FC02, 0x07F70FFA, 0x08FEFEEC);
	r6 = D(r6, s1_0_0, 0xFC1A1E13, 0x81CBF5E6, 0xF909FFFD, 0x81E7929D);
	r7 = D(r7, s1_0_0, 0x0801F90E, 0x0DF2FA03, 0xF10B02E0, 0x170E0605);
	r0 = D(r0, s1_0_1, 0xF9010CF7, 0xEF04FCE9, 0xF8F404EF, 0xFDEEF1CB);
	r1 = D(r1, s1_0_1, 0x14031005, 0x09000403, 0x09FD0C01, 0x13F807F2);
	r2 = D(r2, s1_0_1, 0x10EEFBF9, 0x0D1C10FF, 0x230300FA, 0x11FD0A05);
	r3 = D(r3, s1_0_1, 0xF30CF109, 0xFC03FF01, 0x1208FDF5, 0x10010509);
	r4 = D(r4, s1_0_1, 0xF9F31905, 0xF72E0C08, 0x10FA0C05, 0x161F0608);
	r5 = D(r5, s1_0_1, 0x15FD01FD, 0xECFDE503, 0x08061A02, 0xFBF404F6);
	r6 = D(r6, s1_0_1, 0x0B0FE416, 0xDE2A03BF, 0xF704F71A, 0xE41F20F9);
	r7 = D(r7, s1_0_1, 0xEF0B10FC, 0xFB0A03FB, 0x0211FAE4, 0xEF0B1DEC);
	r0 = D(r0, s1_0_2, 0xF7FFFAFF, 0x0D030DFF, 0x04FD06FC, 0xB5EAEC21);
	r1 = D(r1, s1_0_2, 0x050308FB, 0xF3040001, 0xEF06F40B, 0x18FB17CE);
	r2 = D(r2, s1_0_2, 0xFDFA080D, 0xE30E090F, 0xF8000300, 0xF1FE0B0A);
	r3 = D(r3, s1_0_2, 0xFD02EDFC, 0xFE01FD00, 0xF1030AF3, 0x060AFB00);
	r4 = D(r4, s1_0_2, 0xF2FE03F7, 0xEC0AE2E3, 0x07FEEFFC, 0xE50BF406);
	r5 = D(r5, s1_0_2, 0x0500FB08, 0x05F8F90A, 0xE90FEC05, 0x0EF60807);
	r6 = D(r6, s1_0_2, 0xFAFCF3F5, 0xF209FC1B, 0xF806E502, 0xE816E805);
	r7 = D(r7, s1_0_2, 0xEE010508, 0x06040D06, 0xF4F406EE, 0x0507F108);
	r0 = D(r0, s1_1_0, 0x0F1BE8F4, 0x0C0629E4, 0x04F101FC, 0x1D3011E8);
	r1 = D(r1, s1_1_0, 0xFFFC03FF, 0x0C0B0700, 0x0CF6060A, 0x1314F410);
	r2 = D(r2, s1_1_0, 0x00CD0EDE, 0x310231F1, 0xFD02FD02, 0xFCFCF71E);
	r3 = D(r3, s1_1_0, 0x221AFAFF, 0xD2FEE609, 0x020802FA, 0xD406F40D);
	r4 = D(r4, s1_1_0, 0x0A0CFD05, 0xFA02D2F7, 0xE6FBF407, 0x061301FA);
	r5 = D(r5, s1_1_0, 0xEFFCEFFF, 0x000207F1, 0xF404E21B, 0xF1E8FDFE);
	r6 = D(r6, s1_1_0, 0xCFF8E3D7, 0x2116D2F0, 0xE1A4E82F, 0xE6AEDB00);
	r7 = D(r7, s1_1_0, 0xFA080A00, 0x170F27E3, 0x1423F0F1, 0x13E417F9);
	r0 = D(r0, s1_1_1, 0xFB0F0F06, 0xE2E9FCE1, 0x13FA040F, 0x2E0328ED);
	r1 = D(r1, s1_1_1, 0x2900FE10, 0x44050218, 0x1CE310F5, 0x34F8FD22);
	r2 = D(r2, s1_1_1, 0xFCDB08BA, 0xF6E908F9, 0x2709F900, 0x0207001D);
	r3 = D(r3, s1_1_1, 0x09070109, 0x19EFFC02, 0x04EECCD3, 0x10FAF800);
	r4 = D(r4, s1_1_1, 0x1C2C0401, 0x15ECEAF2, 0x161B0419, 0x04141003);
	r5 = D(r5, s1_1_1, 0x1D19D808, 0xE0F7ED0E, 0x1AFFDB3A, 0x2BF0F7DE);
	r6 = D(r6, s1_1_1, 0xF31007D8, 0x1BDB0B14, 0xFF0A2703, 0xEFF1FF0B);
	r7 = D(r7, s1_1_1, 0x091306FC, 0xF4F30CCF, 0x09FC2EA0, 0x14150A14);
	r0 = D(r0, s1_1_2, 0xF8EFF808, 0x02FDD9FB, 0x10FFF2F8, 0xE4F816F6);
	r1 = D(r1, s1_1_2, 0xF7F7FBFA, 0xF902FA06, 0xFCFC04F5, 0xA0F804A3);
	r2 = D(r2, s1_1_2, 0xFA1906F1, 0x12EDED1B, 0xFF00FE02, 0x0826D535);
	r3 = D(r3, s1_1_2, 0xF30DF306, 0xF60002FF, 0x02FE1DF5, 0xE5FDFE05);
	r4 = D(r4, s1_1_2, 0x03EAF701, 0xFFF7E90C, 0xEC09FC0A, 0xEB10FFF2);
	r5 = D(r5, s1_1_2, 0xEDFF0E08, 0x0410EE13, 0xD6F81501, 0x060D00FE);
	r6 = D(r6, s1_1_2, 0xFB0EEB00, 0xF9FEFEFD, 0x0225F9EA, 0xFBFAFCFD);
	r7 = D(r7, s1_1_2, 0x03FB0705, 0xE2040808, 0xF00D26F8, 0xE3F8FC04);
	r0 = D(r0, s1_2_0, 0xED0106FC, 0x06F6FBF4, 0x0800FDFD, 0x0D01EFFD);
	r1 = D(r1, s1_2_0, 0x0704F8FD, 0xFD04FDFD, 0xF60D0202, 0x0713FE00);
	r2 = D(r2, s1_2_0, 0xEE04F002, 0x1307F816, 0xFF010000, 0xFE06E606);
	r3 = D(r3, s1_2_0, 0x01F710F5, 0x050CF505, 0xF40D00F4, 0x02FF0603);
	r4 = D(r4, s1_2_0, 0x05FC01F5, 0xFEF7FAFC, 0x0503F705, 0x0AFE0BFE);
	r5 = D(r5, s1_2_0, 0x04EA0DF9, 0x1510F6F6, 0x0514F3E1, 0x0EE8EE0A);
	r6 = D(r6, s1_2_0, 0x05E51E00, 0xCDFFE309, 0xF3FDFC13, 0x38BE17F8);
	r7 = D(r7, s1_2_0, 0x05FBFD01, 0x04E40DF9, 0xF60221F2, 0xFBF1FF0A);
	r0 = D(r0, s1_2_1, 0xFB0CEFFD, 0xF3FEDFE9, 0x09E10AF5, 0xFD14E5CC);
	r1 = D(r1, s1_2_1, 0xFB040BFD, 0x070107F4, 0x03F20306, 0xF81CF500);
	r2 = D(r2, s1_2_1, 0xEAFEFB1B, 0xED810907, 0xFD04F606, 0x08F7110A);
	r3 = D(r3, s1_2_1, 0xF90CF3F0, 0x14FD08FA, 0x0DEC11EE, 0xFCFDF8FB);
	r4 = D(r4, s1_2_1, 0xDCFAF0E2, 0x1A07080A, 0x01120DF9, 0xE6F60000);
	r5 = D(r5, s1_2_1, 0xF5F60C08, 0xFCF80107, 0x07DFFA0F, 0x0F110B15);
	r6 = D(r6, s1_2_1, 0x4BEC07EE, 0x18E428EC, 0xE12CDF09, 0xF5F81908);
	r7 = D(r7, s1_2_1, 0xF90500FC, 0xF7F4FD00, 0xFD21E2EC, 0xF7FD11F7);
	r0 = D(r0, s1_2_2, 0x05FAFB02, 0x07F41C0E, 0x0BF70203, 0xFC0718F6);
	r1 = D(r1, s1_2_2, 0xFBFF08F3, 0x0500FEFE, 0x0002F7FC, 0xFF0105FB);
	r2 = D(r2, s1_2_2, 0xEC07FD03, 0xF7F9F730, 0xFFFFFF08, 0xF905F020);
	r3 = D(r3, s1_2_2, 0x04F007FB, 0x0501FFFF, 0x010908EF, 0xF112FCFA);
	r4 = D(r4, s1_2_2, 0x13EF1DFF, 0xFA05E511, 0x00FCFCFF, 0x19D608F6);
	r5 = D(r5, s1_2_2, 0xF7FFFDFE, 0x0BF0FA0A, 0x15FDF328, 0xEC20EA16);
	r6 = D(r6, s1_2_2, 0xFFE00EFA, 0x00030817, 0x09D802FA, 0x01F712F6);
	r7 = D(r7, s1_2_2, 0xF3FDFA09, 0xF703FAF1, 0xF1FD0601, 0xEB1F050C);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.886e-02, 4.095e-03, -3.365e-02, -4.993e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-8.190e-03, -2.087e-04, 1.293e-02, -3.344e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.538e-02, -1.355e-02, 4.305e-03, -4.083e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.139e-02, 2.898e-03, -1.094e-02, -3.488e-05);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.659e-02, 1.300e-02, 7.771e-03, -8.481e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.448e-02, -3.922e-03, 1.124e-02, 2.420e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.358e-02, -1.480e-02, 2.848e-02, -1.963e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.850e-02, 1.333e-02, 1.701e-03, -4.890e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF60AFE00, 0x01FF00FD, 0x02F8FB00, 0x020202FE);
	r1 = D(r1, s0_0_0, 0x01F70000, 0x0702050A, 0xFCF80204, 0x0D00F6F9);
	r2 = D(r2, s0_0_0, 0x0018080B, 0x11FFEFFC, 0x1818EAE3, 0xE8CDE3FC);
	r3 = D(r3, s0_0_0, 0x06F0FF05, 0x01010202, 0x01FF00FF, 0x03FE1511);
	r4 = D(r4, s0_0_0, 0xF20C000F, 0xFAFB0F0F, 0x0FF1F600, 0x04200109);
	r5 = D(r5, s0_0_0, 0x03E7ECFF, 0x02F2101F, 0xDBDB04EC, 0xDC19E1F6);
	r6 = D(r6, s0_0_0, 0x00FE16F7, 0x0410FBFE, 0x0708FD01, 0x0B070BFA);
	r7 = D(r7, s0_0_0, 0xFDF2050D, 0x0B0500FA, 0xFEF7FE02, 0x02050A0E);
	r0 = D(r0, s0_0_1, 0x10F4000C, 0xFC1BFEFC, 0x0AF900FD, 0x02F707FD);
	r1 = D(r1, s0_0_1, 0x02FEF900, 0x10FF170E, 0xF4F7FD11, 0xFDE30D00);
	r2 = D(r2, s0_0_1, 0x03001507, 0xF9F0E6E8, 0x60F1FA49, 0x23B1DBF1);
	r3 = D(r3, s0_0_1, 0x0217F10D, 0xF114F511, 0x05F6F909, 0xF1FEEF09);
	r4 = D(r4, s0_0_1, 0xF1170609, 0x031B0E12, 0x0F100205, 0x060BF507);
	r5 = D(r5, s0_0_1, 0xF1EF2507, 0xD1F2A515, 0xFC2B1DE0, 0x0318C60B);
	r6 = D(r6, s0_0_1, 0x030C1110, 0xFE161006, 0x0D03F9FC, 0x00070A05);
	r7 = D(r7, s0_0_1, 0xFDDA07FD, 0x07000500, 0x05F4E6FE, 0x0CFBDE05);
	r0 = D(r0, s0_0_2, 0xF308F3FF, 0x09FDFEFE, 0x0EF90200, 0x04FE05FF);
	r1 = D(r1, s0_0_2, 0xFCF80204, 0x060D060C, 0xFE0DF0FF, 0xF7F7FF0B);
	r2 = D(r2, s0_0_2, 0xFA150C03, 0x06F111FB, 0xA99FCED2, 0x23D007F7);
	r3 = D(r3, s0_0_2, 0x0109F610, 0xFF0FF7F7, 0xF703F40F, 0xFDFBF405);
	r4 = D(r4, s0_0_2, 0xF40BF80D, 0x100700FD, 0xED0FFC10, 0x0FF904F6);
	r5 = D(r5, s0_0_2, 0x1DF228F2, 0x23EFEE18, 0xF5C4FE1B, 0x01D1E907);
	r6 = D(r6, s0_0_2, 0xFCFF0211, 0xDF04FA02, 0x0FFAFBFF, 0xF80204F7);
	r7 = D(r7, s0_0_2, 0xF7E403F6, 0x03F704FA, 0x06F40CF7, 0xFB02EF07);
	r0 = D(r0, s0_1_0, 0xE20DD809, 0xFBFF01FE, 0x11FD12FA, 0xF6FFFE02);
	r1 = D(r1, s0_1_0, 0x040DF6FC, 0x06082B00, 0x02F1FD03, 0xF000F913);
	r2 = D(r2, s0_1_0, 0x0715F401, 0x0A0702F5, 0x18F2F2E0, 0xF2E509EA);
	r3 = D(r3, s0_1_0, 0xEB00FEF5, 0x07020900, 0xF3EFFD0C, 0x00000301);
	r4 = D(r4, s0_1_0, 0x14041D09, 0x0011F606, 0x0912F4F5, 0x0B0AF404);
	r5 = D(r5, s0_1_0, 0xE6E0C90B, 0xFC1CFCEA, 0x16F10FED, 0xB3FFD5F8);
	r6 = D(r6, s0_1_0, 0x1E04130C, 0x040D08FD, 0x0B0F0F03, 0xFFFC0903);
	r7 = D(r7, s0_1_0, 0xF3EE0201, 0x0C0BF40A, 0xECE7ED0B, 0xF9E105FA);
	r0 = D(r0, s0_1_1, 0x0411D50B, 0x04040500, 0x0DF90106, 0xF40200FF);
	r1 = D(r1, s0_1_1, 0xFAFDF601, 0xF00CF204, 0xFA06F2F9, 0x1B0CF307);
	r2 = D(r2, s0_1_1, 0xDAC4FEF1, 0xE5FDFAFB, 0x311F100F, 0xDDF3FB23);
	r3 = D(r3, s0_1_1, 0x02FB0BF4, 0x040DF204, 0x01E9EF19, 0x2401F9F0);
	r4 = D(r4, s0_1_1, 0xFDFCF10A, 0xF30BEDF8, 0x0D1CF600, 0x0002F60E);
	r5 = D(r5, s0_1_1, 0xD8BF13F5, 0xF198DE09, 0xAED49819, 0x18BBE207);
	r6 = D(r6, s0_1_1, 0x1C0CF70C, 0x0F0C0913, 0x0503EF03, 0xFB0807FE);
	r7 = D(r7, s0_1_1, 0x00F82201, 0x05F8FA00, 0x01E70601, 0x0E0B16DA);
	r0 = D(r0, s0_1_2, 0xF5FCF014, 0xF6FB0301, 0x10FF0305, 0x00FFFCFF);
	r1 = D(r1, s0_1_2, 0xFF0800FC, 0x1CFC02FF, 0x0508FB0B, 0x1C0DF501);
	r2 = D(r2, s0_1_2, 0xD81FF50D, 0xECFB05FF, 0x81EAC32F, 0xEEFF01EA);
	r3 = D(r3, s0_1_2, 0x110FFBF3, 0x08F7FEFF, 0xE905FAF5, 0x03F7FBF9);
	r4 = D(r4, s0_1_2, 0xFA0E0808, 0x0A04FE04, 0x15060C0D, 0xF60A0006);
	r5 = D(r5, s0_1_2, 0xF2EDFB10, 0x3705D7D7, 0xF5FFD622, 0x01FA0E02);
	r6 = D(r6, s0_1_2, 0xF603F002, 0xF8050406, 0x0501FF06, 0x0BFC07FB);
	r7 = D(r7, s0_1_2, 0xF4FFFDF8, 0x01F203F4, 0xED03FBFE, 0x0FEF02F8);
	r0 = D(r0, s0_2_0, 0x0100FCF6, 0xF8FF0102, 0x060308FD, 0xFAFF0101);
	r1 = D(r1, s0_2_0, 0xFC02FCF8, 0x2F0C0CF6, 0x0CFE05FF, 0xFF0101FE);
	r2 = D(r2, s0_2_0, 0xEC0CF30B, 0x0500EF06, 0x2E0EDDF7, 0xE6E7F309);
	r3 = D(r3, s0_2_0, 0x190901F9, 0x0F0001EC, 0xE2F5EAFA, 0x0106FE07);
	r4 = D(r4, s0_2_0, 0xF5FD0607, 0xF1F8FFFF, 0xF7F804F1, 0x09F9FCF7);
	r5 = D(r5, s0_2_0, 0x0EFEFB00, 0xDAF4F618, 0x14FC11E5, 0xF8EE03FC);
	r6 = D(r6, s0_2_0, 0x0CF40507, 0xFA030401, 0x1204FEFC, 0x05040101);
	r7 = D(r7, s0_2_0, 0xEFF4FC05, 0x09010B01, 0x01FCFDFD, 0x27FDFE10);
	r0 = D(r0, s0_2_1, 0x0905F702, 0x06FF0600, 0xF70506FF, 0xFE00FCFF);
	r1 = D(r1, s0_2_1, 0xF2FB0000, 0x1C0DFD02, 0x0E05FAEF, 0xE9F5F8FA);
	r2 = D(r2, s0_2_1, 0xF7180CE6, 0xFA14F312, 0x45F213ED, 0xEFFDF70C);
	r3 = D(r3, s0_2_1, 0x15030304, 0x19FCFDFD, 0xF301F507, 0xFCFC0501);
	r4 = D(r4, s0_2_1, 0xFDFC02F7, 0x0907FCFC, 0x1005F311, 0x1F050105);
	r5 = D(r5, s0_2_1, 0xDBE30100, 0xABF8F9C2, 0x36ECF409, 0xF303F10F);
	r6 = D(r6, s0_2_1, 0x01F8FAF1, 0x0705F3FE, 0x05030107, 0xEA0B0800);
	r7 = D(r7, s0_2_1, 0xF4FE0502, 0x0DEC0D06, 0x10FE060A, 0x0D020C06);
	r0 = D(r0, s0_2_2, 0xF908FD01, 0xFD040100, 0xFF0001F8, 0x00FDFF01);
	r1 = D(r1, s0_2_2, 0xFB000200, 0x0D090302, 0x01010500, 0xFD09F3F8);
	r2 = D(r2, s0_2_2, 0xDAF70601, 0xF0FFF605, 0xB21BDB1A, 0xEEF8E231);
	r3 = D(r3, s0_2_2, 0x00FC05FE, 0x060B04FA, 0xF4010214, 0xF500FF03);
	r4 = D(r4, s0_2_2, 0xFDFF0E02, 0x07F1FC11, 0x02000204, 0x0700FFF7);
	r5 = D(r5, s0_2_2, 0xFAFE0D00, 0x14040EF5, 0xA2F3FE16, 0x0408F803);
	r6 = D(r6, s0_2_2, 0x070B0404, 0xF209F3FD, 0xFB04FDFF, 0xFEF30204);
	r7 = D(r7, s0_2_2, 0xEFFAFCFC, 0x100403FC, 0x15F8FDFE, 0xECF304FF);
	r0 = D(r0, s1_0_0, 0xFDFDFFFF, 0xFD0112FD, 0x0D0511F9, 0x030103F8);
	r1 = D(r1, s1_0_0, 0xFD060300, 0x1A0B0EFF, 0xF4FCF403, 0x021BF5EA);
	r2 = D(r2, s1_0_0, 0x01FB0415, 0x210902FE, 0xFB18F410, 0x18F008EF);
	r3 = D(r3, s1_0_0, 0x0108F708, 0xF70A06FC, 0xDEF71CF9, 0x16020B03);
	r4 = D(r4, s1_0_0, 0x13F40BF9, 0xEEFE0AFA, 0xFDFF2203, 0x0A0DEF01);
	r5 = D(r5, s1_0_0, 0x0019D8FE, 0x0A13ECD8, 0xD3F1EEE9, 0xF81113EC);
	r6 = D(r6, s1_0_0, 0xE70F07F1, 0x0D09FCFF, 0x000007FF, 0x00020102);
	r7 = D(r7, s1_0_0, 0x030BF8FE, 0xFDFF0202, 0x0700EDFC, 0xE805EB04);
	r0 = D(r0, s1_0_1, 0xFB0B12F9, 0x03F1070D, 0x08F20504, 0x04030CF7);
	r1 = D(r1, s1_0_1, 0xFFF90001, 0xFEF412F5, 0x0001FE00, 0x03F11401);
	r2 = D(r2, s1_0_1, 0x06EBFFFA, 0xFA080C02, 0xC75D2881, 0x07E1052D);
	r3 = D(r3, s1_0_1, 0x0403FA0F, 0x0106F000, 0xD5020FFB, 0x0F16E9F7);
	r4 = D(r4, s1_0_1, 0x00FB050E, 0x07FB06FA, 0xF4FE02E6, 0x01090BF8);
	r5 = D(r5, s1_0_1, 0x0A270218, 0x20ED2305, 0x1EFD33E5, 0xEDFB151D);
	r6 = D(r6, s1_0_1, 0xF80CFF16, 0x0B0BF606, 0xFA060B03, 0xFD04EE04);
	r7 = D(r7, s1_0_1, 0x0703D8FA, 0x0AF5E9FE, 0x13FDE707, 0xFC05D8FC);
	r0 = D(r0, s1_0_2, 0xFF0903F3, 0xFC03050D, 0x0303FCFE, 0xFF0303FC);
	r1 = D(r1, s1_0_2, 0x00FCFC00, 0x11F60BF8, 0x040303FD, 0xFA01F808);
	r2 = D(r2, s1_0_2, 0x0E0B13F6, 0xFDF30E07, 0x1E26D102, 0x0A13E9E7);
	r3 = D(r3, s1_0_2, 0x07FF0000, 0xFF08F309, 0xFA0413F5, 0xFEF60300);
	r4 = D(r4, s1_0_2, 0xFE0C09FC, 0x070F02FA, 0xF7F6F1FF, 0xF90910F5);
	r5 = D(r5, s1_0_2, 0x150009E1, 0xD9E2F21A, 0x0D0A13F6, 0xECFBFCFE);
	r6 = D(r6, s1_0_2, 0x1AF804F4, 0x0B0208FA, 0xF1FB01FD, 0xFDF8FC02);
	r7 = D(r7, s1_0_2, 0x07FF0B04, 0xF9FD0109, 0x0E0A10F9, 0x100BF7FB);
	r0 = D(r0, s1_1_0, 0xE6FC0EF6, 0x06FEFC07, 0xFE080500, 0x0506F0F7);
	r1 = D(r1, s1_1_0, 0xEFFDFC04, 0xBE15EEF5, 0xF904F500, 0x0917FB0E);
	r2 = D(r2, s1_1_0, 0x07170C0E, 0x191317FC, 0xF1EE0E0F, 0xF121F1C5);
	r3 = D(r3, s1_1_0, 0xF70F15F5, 0x030A09E9, 0x010A03E9, 0x0E02F9F2);
	r4 = D(r4, s1_1_0, 0x0915FFE4, 0xFF08ECF7, 0xF6F80302, 0x0AF01B0B);
	r5 = D(r5, s1_1_0, 0xF3E60919, 0x000700F8, 0xE30D28E6, 0x04E50019);
	r6 = D(r6, s1_1_0, 0x2406FF0F, 0xF71909FC, 0xF8EC1101, 0xF2F9E90D);
	r7 = D(r7, s1_1_0, 0x03FC0DFC, 0x0407140F, 0x02F9FFFC, 0x0DF4F9F0);
	r0 = D(r0, s1_1_1, 0xF5033103, 0xFC111F1B, 0x14F01FF3, 0x04062113);
	r1 = D(r1, s1_1_1, 0x0205DB06, 0xDB03EBF8, 0x17FF18FD, 0x08F90804);
	r2 = D(r2, s1_1_1, 0xDBF4EADA, 0xEE12DDE1, 0xF023EC81, 0x25FE1A18);
	r3 = D(r3, s1_1_1, 0x011BE30C, 0xF6FF08FE, 0xDBF409E0, 0xF3EAE5E6);
	r4 = D(r4, s1_1_1, 0x03070C0D, 0xF4F9EE1E, 0xDD0CE028, 0x10F4DCFF);
	r5 = D(r5, s1_1_1, 0x08F0FEC6, 0xFBCDF4B9, 0x13D7F6EF, 0xE8F9E9C9);
	r6 = D(r6, s1_1_1, 0x0006FC10, 0xF6FF080D, 0xEB063508, 0xFBFEFF08);
	r7 = D(r7, s1_1_1, 0x0CFBD1EA, 0xFFE90806, 0x21D20FF7, 0x0DDAD8EC);
	r0 = D(r0, s1_1_2, 0x05F905F9, 0x03060103, 0xFD0AF80D, 0xFCFF0BFA);
	r1 = D(r1, s1_1_2, 0x02000100, 0x29F7EF0A, 0xF9F3F9FC, 0x09FFEE02);
	r2 = D(r2, s1_1_2, 0xFFFBEEF9, 0xE4060BD9, 0xD8FBF100, 0xE80411F0);
	r3 = D(r3, s1_1_2, 0x0B040CF2, 0xFF0604F6, 0x0602EFFA, 0x04000300);
	r4 = D(r4, s1_1_2, 0x040706FE, 0x04FFEC05, 0x08FAF91F, 0x050DFB03);
	r5 = D(r5, s1_1_2, 0xE0E70413, 0x0E101F1E, 0x120509F5, 0x0418FE0D);
	r6 = D(r6, s1_1_2, 0x2C05FC0C, 0x06E40BDD, 0x04FC19ED, 0xFCFF0805);
	r7 = D(r7, s1_1_2, 0xF0ECF3ED, 0x0715F60A, 0xFDF31EF9, 0xE6F0EF04);
	r0 = D(r0, s1_2_0, 0xEB00F900, 0xFF05FD01, 0x0AFE0007, 0x03FE0105);
	r1 = D(r1, s1_2_0, 0xFBFEF702, 0xD4091003, 0xFB0004FD, 0xF111EAEA);
	r2 = D(r2, s1_2_0, 0x05F80E18, 0xF9F2070C, 0x02CB060A, 0x0D041B0C);
	r3 = D(r3, s1_2_0, 0x0701ED13, 0xEF02FD00, 0xEE0914FA, 0x090AF303);
	r4 = D(r4, s1_2_0, 0x0D0B0404, 0x00F20706, 0x0FF80EFF, 0x1909FDFF);
	r5 = D(r5, s1_2_0, 0x08FA0FE7, 0x16D81CF9, 0x09FF13F4, 0x0E080008);
	r6 = D(r6, s1_2_0, 0xFA080AF3, 0x04FB05FA, 0xFDF707FF, 0x0402F506);
	r7 = D(r7, s1_2_0, 0xF90607FC, 0x080BF002, 0x0002FE10, 0x000900F9);
	r0 = D(r0, s1_2_1, 0xF21E0304, 0x0806FDFE, 0x05FAE9FF, 0xFEFB0303);
	r1 = D(r1, s1_2_1, 0xFF0403FC, 0xCEFDF0EF, 0x01F70B0E, 0x02E70F07);
	r2 = D(r2, s1_2_1, 0xF315F9FD, 0x1CE70006, 0xE9E1FAD6, 0x13D4DFFA);
	r3 = D(r3, s1_2_1, 0x07F8FB05, 0x0B060001, 0xEEFDF504, 0x0206FFF8);
	r4 = D(r4, s1_2_1, 0x18ECFFFD, 0xF3F50402, 0x0304010C, 0xE909F7F0);
	r5 = D(r5, s1_2_1, 0xFD2714F4, 0x063D1DF3, 0xCAF600EC, 0xEF0E0DFF);
	r6 = D(r6, s1_2_1, 0x03EF05FC, 0x09F9FE01, 0xFF0BFCFA, 0xFBFDFC0A);
	r7 = D(r7, s1_2_1, 0x04FD1A04, 0x011AFB0A, 0x05100304, 0x0A111DF2);
	r0 = D(r0, s1_2_2, 0xFEF9FFF7, 0x01FDFC01, 0x0A01F102, 0x00FD0201);
	r1 = D(r1, s1_2_2, 0xFF06FAFE, 0xF9FF08F7, 0xF8FAF901, 0x0B00F908);
	r2 = D(r2, s1_2_2, 0xCDE3F7FE, 0x2006EE0A, 0x35F9EF24, 0x00EE1414);
	r3 = D(r3, s1_2_2, 0x04F9FCFF, 0x1408FE02, 0xF6060B0B, 0xF1F90202);
	r4 = D(r4, s1_2_2, 0x04F702FF, 0x070301FE, 0xF700030C, 0x030CFF09);
	r5 = D(r5, s1_2_2, 0x2002050C, 0x1C1507EC, 0x250A0E1A, 0x09110B0B);
	r6 = D(r6, s1_2_2, 0x0EEBEEF0, 0xF6F3F9FF, 0xF8010408, 0xF9FA09FC);
	r7 = D(r7, s1_2_2, 0xFDEDF700, 0x000E03FE, 0x11FF0B05, 0xF9080BFD);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0D0CF0FD, 0x01FEFF04, 0xFC0B00FB, 0xFDF802FC);
	r1 = D(r1, s0_0_0, 0x03F6FBFF, 0xED18E8F5, 0x0502F109, 0x021004EC);
	r2 = D(r2, s0_0_0, 0xFAFF1804, 0xECF50303, 0x10ED19E8, 0x9D2419F4);
	r3 = D(r3, s0_0_0, 0x02FA0205, 0x01001611, 0x04FEE401, 0xFA020706);
	r4 = D(r4, s0_0_0, 0xF8030208, 0xFBEAF807, 0xE6F908F3, 0xE8FE0CFB);
	r5 = D(r5, s0_0_0, 0x23FAEEF7, 0x0CFFB7ED, 0xF907FB00, 0xFCEDFFFC);
	r6 = D(r6, s0_0_0, 0xEC1004E7, 0x0D0B090A, 0x03F70405, 0xFAF70204);
	r7 = D(r7, s0_0_0, 0xFA0AFDFE, 0xF8F9FD07, 0xF5F80106, 0xF91FECF8);
	r0 = D(r0, s0_0_1, 0xE9FCF908, 0xF5E50406, 0xFA04F5FB, 0x02FEFEFD);
	r1 = D(r1, s0_0_1, 0x030304FA, 0xD3E5F202, 0x06050102, 0x02F00DF6);
	r2 = D(r2, s0_0_1, 0xEE08FBFD, 0xFAF9F501, 0xF1E1B2FA, 0xC8F5EF02);
	r3 = D(r3, s0_0_1, 0xFA0B0E08, 0xF9F80712, 0xF0FFFE0B, 0x002F04FF);
	r4 = D(r4, s0_0_1, 0xFDF20600, 0x07EEFE01, 0xE6110801, 0xFAFDEFFA);
	r5 = D(r5, s0_0_1, 0xFBE52BF3, 0x0C171611, 0xED16E7FF, 0x06FA0E17);
	r6 = D(r6, s0_0_1, 0x07001CFB, 0xFCF70311, 0xFCFB07FC, 0x05FDFEFF);
	r7 = D(r7, s0_0_1, 0x1009F8EE, 0x111DFAFD, 0xF9180B07, 0xFA29FFE8);
	r0 = D(r0, s0_0_2, 0x02FF000F, 0xFEF800FC, 0x0801FFFD, 0x0303FE02);
	r1 = D(r1, s0_0_2, 0x0201FAFA, 0xFD15EB05, 0x09F0FF04, 0x000205FB);
	r2 = D(r2, s0_0_2, 0xFC02EB03, 0x060A02FD, 0x22F3F30B, 0xFD0E0CEE);
	r3 = D(r3, s0_0_2, 0x03F50203, 0xF8030A00, 0x01F700F5, 0xF5FF00FA);
	r4 = D(r4, s0_0_2, 0x01080F05, 0xFD050AFE, 0xF213F801, 0x01F40BF6);
	r5 = D(r5, s0_0_2, 0x11F60103, 0x0CE9DFF8, 0x00F5C4F5, 0xF61B1602);
	r6 = D(r6, s0_0_2, 0x09F81DE1, 0xFD04E304, 0x05F7FFFE, 0x00FF01FE);
	r7 = D(r7, s0_0_2, 0x0417FEFF, 0xFA09FEFB, 0xFEFA0205, 0xFA140FFF);
	r0 = D(r0, s0_1_0, 0x1901EBFD, 0x070200FE, 0xF7E90609, 0x01FBFF01);
	r1 = D(r1, s0_1_0, 0x0204FE02, 0x1015D7FD, 0x0414ECFE, 0xF012E4FE);
	r2 = D(r2, s0_1_0, 0x01F50A0F, 0xEE0713F8, 0x1C072F1D, 0xC91207E8);
	r3 = D(r3, s0_1_0, 0xF6E3F515, 0xFE06ECF9, 0x00FEE606, 0x0D16F6F7);
	r4 = D(r4, s0_1_0, 0xF3D8180E, 0x02FB090E, 0xE61BF202, 0x08E9FE07);
	r5 = D(r5, s0_1_0, 0x05F4100F, 0xFF1BFAF4, 0x1CE03308, 0x05E52711);
	r6 = D(r6, s0_1_0, 0xED1DFCEB, 0xF0FCFE03, 0xECFEFD05, 0x0419F903);
	r7 = D(r7, s0_1_0, 0x06EA01FB, 0xF20DF6FD, 0x04070DFF, 0x13FFFFFD);
	r0 = D(r0, s0_1_1, 0x051714E0, 0x090500FD, 0x00F604F6, 0x0243FAFF);
	r1 = D(r1, s0_1_1, 0x032F0607, 0x0AE213EC, 0x0021E4F7, 0xFE0201FA);
	r2 = D(r2, s0_1_1, 0xF7B2CFDC, 0xCDEF03E6, 0x3C18F4BB, 0xB301EDF1);
	r3 = D(r3, s0_1_1, 0x003C0010, 0x0600F303, 0xFE0DFE11, 0x081DFAF8);
	r4 = D(r4, s0_1_1, 0xF2191117, 0xEF1104F6, 0xEAFFFFFF, 0x10CF150E);
	r5 = D(r5, s0_1_1, 0xE60C0BE4, 0xF3FDC9F0, 0x0D1CB7E8, 0x231920E0);
	r6 = D(r6, s0_1_1, 0xF606EBDC, 0xF510E9FC, 0xF645050B, 0xE9350A05);
	r7 = D(r7, s0_1_1, 0x09C701FD, 0x0FD70402, 0xE905040D, 0x12D506ED);
	r0 = D(r0, s0_1_2, 0x07FD140B, 0xFE0D0004, 0xFB0C0CFE, 0x02F4FDFD);
	r1 = D(r1, s0_1_2, 0xF9120903, 0xF911FC06, 0x0302E3F4, 0x0316F2F9);
	r2 = D(r2, s0_1_2, 0x0F21F2FB, 0x010800EF, 0x0506B2D1, 0xD004F109);
	r3 = D(r3, s0_1_2, 0xF8F6FD07, 0xF9040508, 0x080AF2F6, 0xFC07F703);
	r4 = D(r4, s0_1_2, 0x0DF705FA, 0x0708FCF0, 0x0303FF00, 0xF1FE080D);
	r5 = D(r5, s0_1_2, 0xFEFFE2F1, 0xEFE43513, 0xF9C4EEF3, 0xF500070B);
	r6 = D(r6, s0_1_2, 0x07F5FCF2, 0x00C6EEE4, 0xF2F20503, 0x06F2FB01);
	r7 = D(r7, s0_1_2, 0x02F3F2FE, 0xFF0A0413, 0x05FC14FF, 0x14F80F03);
	r0 = D(r0, s0_2_0, 0xEF06FE03, 0x04FD03FF, 0x03FAFB08, 0x05FE00FF);
	r1 = D(r1, s0_2_0, 0x0505FCFE, 0xF717ECF9, 0x04FE00FD, 0x08140E00);
	r2 = D(r2, s0_2_0, 0xF9FEF409, 0x0815F8FE, 0xF007120A, 0xEB1303F8);
	r3 = D(r3, s0_2_0, 0xFE04FB03, 0xF4FC0604, 0xFD1009FD, 0xFA05FF07);
	r4 = D(r4, s0_2_0, 0xEE0406FA, 0xFB04FD05, 0xF3FB0503, 0x00FA04FF);
	r5 = D(r5, s0_2_0, 0x090805ED, 0xEF00080C, 0xF40302FF, 0xF5F318FD);
	r6 = D(r6, s0_2_0, 0xFC0CFCED, 0x000BFE0D, 0xFC07FE04, 0x060BFDFB);
	r7 = D(r7, s0_2_0, 0x03F003FF, 0x02FA02FB, 0x01FF03FF, 0xF3080301);
	r0 = D(r0, s0_2_1, 0xEE18F8F6, 0xFFF9FE02, 0x0EFD0602, 0x020501FE);
	r1 = D(r1, s0_2_1, 0xFCE600FF, 0xEB19E4FB, 0x0810FCF3, 0x08E301F2);
	r2 = D(r2, s0_2_1, 0x08F30200, 0x0B100FF8, 0xCA2F83F0, 0xD9100CFA);
	r3 = D(r3, s0_2_1, 0x04F50508, 0x020A0401, 0xE4FB0207, 0xFAE10401);
	r4 = D(r4, s0_2_1, 0xFC130AFA, 0x01F7F400, 0xF4F40AF5, 0xFDF2FCF7);
	r5 = D(r5, s0_2_1, 0xF41606F5, 0x0DF80AFC, 0xF71B0102, 0xFA13E2F6);
	r6 = D(r6, s0_2_1, 0x0706F6F0, 0x0CF2FFFB, 0xFB030803, 0x01E80006);
	r7 = D(r7, s0_2_1, 0xFF11010D, 0x06010501, 0x06FE0204, 0xF51102FE);
	r0 = D(r0, s0_2_2, 0xFE02EB02, 0x00FE0102, 0x0AEC00FD, 0x0002FEFF);
	r1 = D(r1, s0_2_2, 0xFE04FF04, 0xF7FBE00B, 0x06ED07FC, 0xF8FB17FF);
	r2 = D(r2, s0_2_2, 0x05FEF3FD, 0xF7021DFA, 0x00FAB6EE, 0xF4F90A00);
	r3 = D(r3, s0_2_2, 0x05000609, 0x01120800, 0xFA06FA04, 0xFD05FD0A);
	r4 = D(r4, s0_2_2, 0x00010000, 0x09F5FAF4, 0xF3F812FD, 0x020309FE);
	r5 = D(r5, s0_2_2, 0xF705D5F9, 0xFB09F806, 0xFB0DD0F1, 0xF1F9FD0C);
	r6 = D(r6, s0_2_2, 0xFF0F0BE3, 0xF2100A05, 0xFAFC0A01, 0x02F70304);
	r7 = D(r7, s0_2_2, 0x020704FA, 0x00FBFA0D, 0x00F80AFD, 0xFE0900F9);
	r0 = D(r0, s1_0_0, 0x02F70AF7, 0xFE0007FC, 0xFF0901F8, 0xFB0404FF);
	r1 = D(r1, s1_0_0, 0x02FDFD02, 0x04F8F9F6, 0xFF01FD08, 0x00EA0AFB);
	r2 = D(r2, s1_0_0, 0xE60306FB, 0x09FC00F9, 0xE704FCD3, 0xEC292D02);
	r3 = D(r3, s1_0_0, 0xFEFAF506, 0x0003F9F7, 0x06020DFF, 0x04FA0202);
	r4 = D(r4, s1_0_0, 0xFDF91004, 0xFDFD0603, 0xF7FD12FA, 0x04040BF6);
	r5 = D(r5, s1_0_0, 0x10F4EF06, 0x09F9E3E4, 0xF017EB10, 0xFBFC100B);
	r6 = D(r6, s1_0_0, 0xF1050702, 0xF8FCFF02, 0x09FEFE00, 0x0801FA01);
	r7 = D(r7, s1_0_0, 0xF60D0709, 0xFFFBF6FA, 0x15F8F804, 0x16F2FA06);
	r0 = D(r0, s1_0_1, 0xEBF308FA, 0x03FD1707, 0x01F91FFA, 0x00020700);
	r1 = D(r1, s1_0_1, 0x01070103, 0xFD1A1B0C, 0xF8FFFF03, 0xEA041803);
	r2 = D(r2, s1_0_1, 0x07FFE4EC, 0x0D04EE04, 0x1FF8FB00, 0x023005FD);
	r3 = D(r3, s1_0_1, 0x010BF1F8, 0x0704FE00, 0xF408FCF2, 0x090FF1FE);
	r4 = D(r4, s1_0_1, 0xF703FFEF, 0xFAFC04F8, 0x1B0203F7, 0x1A03F6F9);
	r5 = D(r5, s1_0_1, 0xDA072224, 0xE31004FE, 0xDF13FEE3, 0xF00EFEF5);
	r6 = D(r6, s1_0_1, 0xF70B0CFF, 0x00FA06FC, 0x0902FEFE, 0x06FDE7F3);
	r7 = D(r7, s1_0_1, 0x190AEA01, 0x0208F8FF, 0xFC02FBFA, 0x17F6FAF2);
	r0 = D(r0, s1_0_2, 0xFD02F606, 0xFB000D03, 0xFDFD01FA, 0x0004FD03);
	r1 = D(r1, s1_0_2, 0xFEF901FB, 0x06FE04EA, 0xF800F50B, 0x03FE04FD);
	r2 = D(r2, s1_0_2, 0x02F6F0EB, 0xFFF5F9F0, 0x1C14E827, 0x0C2FCDCF);
	r3 = D(r3, s1_0_2, 0x03F7EBF0, 0xFA03F404, 0x01090012, 0xFC00F403);
	r4 = D(r4, s1_0_2, 0x0DFCF5E8, 0xFCFEFCF7, 0x0AFCF5F1, 0xFEFA0CFF);
	r5 = D(r5, s1_0_2, 0x1908CD0B, 0xFDE30EFD, 0x0CD7F2D1, 0x0AF7DDF9);
	r6 = D(r6, s1_0_2, 0x06F6E9CD, 0x09F3FDFE, 0x0CFBF1F6, 0x0000FF06);
	r7 = D(r7, s1_0_2, 0xF30BFB0D, 0xF7F7070C, 0xEFF9E0F7, 0xF7F2FFFC);
	r0 = D(r0, s1_1_0, 0xFFF40A07, 0xF304FEFB, 0x0B07F700, 0x0700FA04);
	r1 = D(r1, s1_1_0, 0x00FFFEFC, 0xE217F905, 0x0B0EF40A, 0xFCF8F002);
	r2 = D(r2, s1_1_0, 0xE9E807FE, 0xFD04040B, 0xD30C220C, 0xF8FDFB07);
	r3 = D(r3, s1_1_0, 0x060BF8F6, 0xFF020302, 0xF915030C, 0x02F904F4);
	r4 = D(r4, s1_1_0, 0x0CF70F06, 0x0F03F40A, 0x26FEF7FD, 0x0B0C0001);
	r5 = D(r5, s1_1_0, 0x03FF1A04, 0x0E09FDF6, 0x25E90B15, 0xE7F20BF3);
	r6 = D(r6, s1_1_0, 0x0400060D, 0x0704F7FB, 0xFAFF08F9, 0x060902FD);
	r7 = D(r7, s1_1_0, 0x1109FDFD, 0x03F8FC05, 0xFB0A0A05, 0x01141104);
	r0 = D(r0, s1_1_1, 0xFA0412F1, 0x0C05FFFD, 0x18FC23FE, 0x04FA0908);
	r1 = D(r1, s1_1_1, 0xF7092EF4, 0x191601DA, 0xFB080C0C, 0x08F3F014);
	r2 = D(r2, s1_1_1, 0x11E9E808, 0x041A05F3, 0x11DC1746, 0x09BC0735);
	r3 = D(r3, s1_1_1, 0xF9180CF0, 0x03121E08, 0xF1FE1307, 0xEF1825F6);
	r4 = D(r4, s1_1_1, 0xF2F20303, 0xFA060909, 0xEB1313ED, 0x0207080D);
	r5 = D(r5, s1_1_1, 0xED06FAFA, 0x03F7D8E3, 0xEEF809F0, 0x0000F7DB);
	r6 = D(r6, s1_1_1, 0x08F00904, 0x0603F4E9, 0xF90ADCF5, 0xFCFC0206);
	r7 = D(r7, s1_1_1, 0x0006FC0C, 0x0E05FB09, 0xE9FC1200, 0xD516050C);
	r0 = D(r0, s1_1_2, 0x0B0FE1FD, 0xFA01F702, 0xFFFCF809, 0x0102F105);
	r1 = D(r1, s1_1_2, 0xFEFAFFFC, 0xFD000D15, 0xFA0A0512, 0xFAFC160A);
	r2 = D(r2, s1_1_2, 0x0EF60CF7, 0xFDFCE6D2, 0x0902E6CB, 0x0603CFE4);
	r3 = D(r3, s1_1_2, 0x0604E606, 0xFC0EECF4, 0x02FAF7EC, 0x05020C0B);
	r4 = D(r4, s1_1_2, 0xFFF405F7, 0x03F903F5, 0xFE09E404, 0x00EDF919);
	r5 = D(r5, s1_1_2, 0x12F714DF, 0xE7FC1800, 0x0AE9FAF6, 0x1BEE1DF0);
	r6 = D(r6, s1_1_2, 0x1BF30616, 0x0514EA0E, 0xFD06DBF9, 0x09FDFB05);
	r7 = D(r7, s1_1_2, 0x06070D06, 0xF8FA2708, 0xF6F3EAFD, 0x0C0D11FE);
	r0 = D(r0, s1_2_0, 0x0CFE00FF, 0xFF0000FF, 0xFDF90502, 0xFD0200FE);
	r1 = D(r1, s1_2_0, 0x00020305, 0x16F9F8F5, 0xFF020104, 0x0C08ECFF);
	r2 = D(r2, s1_2_0, 0xE90203FB, 0xF7F5FAEC, 0x093A0C13, 0x020BF7E1);
	r3 = D(r3, s1_2_0, 0xFD050CFB, 0xFCFBFE06, 0xFF1115FB, 0x04F9FE04);
	r4 = D(r4, s1_2_0, 0xF8F40AF7, 0xFF0C04FB, 0xED060FF7, 0xFDF70CFF);
	r5 = D(r5, s1_2_0, 0xFEF706F2, 0xEC0E1804, 0x0EEC17FE, 0xFBFBF7E3);
	r6 = D(r6, s1_2_0, 0xF5FCF8F7, 0x0002FF04, 0x03000B02, 0x0606FA00);
	r7 = D(r7, s1_2_0, 0xFB070D01, 0xF902FD01, 0xFFF7F9F7, 0x01F8FBFF);
	r0 = D(r0, s1_2_1, 0x12F6FB06, 0x07000102, 0xFBFAEBF6, 0x010201FF);
	r1 = D(r1, s1_2_1, 0xFAFC0809, 0x02FFF8F7, 0x02F5F6FF, 0xFB060701);
	r2 = D(r2, s1_2_1, 0x0DFA0507, 0xFD0709EC, 0xF1C012E7, 0x13E522C5);
	r3 = D(r3, s1_2_1, 0xF411FBFB, 0x0603F1F4, 0xFB0004F5, 0x04000D07);
	r4 = D(r4, s1_2_1, 0xED0004F2, 0x0900F606, 0xEF0212ED, 0x02040EFE);
	r5 = D(r5, s1_2_1, 0xFF10F7E9, 0xF5DCF40F, 0xF118E916, 0x0E04050F);
	r6 = D(r6, s1_2_1, 0xF206F608, 0x05FFFF08, 0xFC05F403, 0xFDFCF80C);
	r7 = D(r7, s1_2_1, 0x0206F904, 0xFAFF010B, 0x080101FA, 0x0A01F3FF);
	r0 = D(r0, s1_2_2, 0xFFFD0103, 0x02FF0203, 0x0D020FF5, 0xFE010300);
	r1 = D(r1, s1_2_2, 0x01FF0A01, 0xF907E9F6, 0x02FCF9FC, 0xFFF00F0B);
	r2 = D(r2, s1_2_2, 0x0DFC1BFF, 0x01FD0EF2, 0x0F13FEF8, 0x0F020908);
	r3 = D(r3, s1_2_2, 0x0D0A0303, 0xFA01F20A, 0x0B01F70E, 0xFFFF010F);
	r4 = D(r4, s1_2_2, 0x04F6FCFE, 0xFD0502F0, 0x0102EAFF, 0x0209FD01);
	r5 = D(r5, s1_2_2, 0x0CE60A05, 0x11F30DF8, 0x13FC0CCE, 0xF9F5F5EA);
	r6 = D(r6, s1_2_2, 0x021007DF, 0xFBFEFF0E, 0x0306FB00, 0xFD0205F5);
	r7 = D(r7, s1_2_2, 0xFC040105, 0xF7FCFF0A, 0x03FE040A, 0xF008EA04);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x040400FC, 0x070001FE, 0x02F7FD0F, 0xFF030004);
	r1 = D(r1, s0_0_0, 0xFCFCFBFC, 0xFAEC1501, 0x0601FAFD, 0xFB0F0F09);
	r2 = D(r2, s0_0_0, 0x0608DDFA, 0xF6020C06, 0x07FF053C, 0x0AE4F710);
	r3 = D(r3, s0_0_0, 0x03EA0AFD, 0xF7FDF910, 0xF9F9F404, 0x0CF20108);
	r4 = D(r4, s0_0_0, 0xFFFFEEDD, 0xFDFFF9FC, 0xF2CB0E04, 0xF80E0003);
	r5 = D(r5, s0_0_0, 0x080F19FC, 0x0302F624, 0xF4EE03FF, 0x06FDED03);
	r6 = D(r6, s0_0_0, 0x0EFD05F9, 0xF8F907F3, 0x00F70100, 0x04F9FB04);
	r7 = D(r7, s0_0_0, 0x01FB0A04, 0x03070A00, 0x0701F201, 0xFCC70706);
	r0 = D(r0, s0_0_1, 0xFD080E0C, 0x00FCFD03, 0xFBF905FB, 0x00FB0508);
	r1 = D(r1, s0_0_1, 0xFC04FBFF, 0x0810FF07, 0x0A04FFF3, 0x06FF1707);
	r2 = D(r2, s0_0_1, 0x0C0205FF, 0xF30ADD00, 0xDCD41D2D, 0x13E1D913);
	r3 = D(r3, s0_0_1, 0xFAF9FEF7, 0xFBFAF211, 0xF4FDECEE, 0x07010803);
	r4 = D(r4, s0_0_1, 0x030EFAE8, 0xFAFC0A0B, 0x0500FE07, 0xEC0B0E00);
	r5 = D(r5, s0_0_1, 0xF8002401, 0xE5171A15, 0xCD2B1F15, 0x031CFD19);
	r6 = D(r6, s0_0_1, 0xF6EA11FB, 0x1314FE08, 0xFB01E9F9, 0x080BF003);
	r7 = D(r7, s0_0_1, 0x04FD040B, 0x05091003, 0xFA22F006, 0xED0DFA00);
	r0 = D(r0, s0_0_2, 0xF20A1000, 0x03FBFBFB, 0x070304F4, 0xFDFE0506);
	r1 = D(r1, s0_0_2, 0x030303FA, 0xFA0400F8, 0x020902FF, 0xF802EF06);
	r2 = D(r2, s0_0_2, 0x0A011DDF, 0xF6FEF2FF, 0x361941E7, 0xFAE9EF2E);
	r3 = D(r3, s0_0_2, 0x0B0A03F9, 0xF704FA0B, 0xEEFB0801, 0x0CF9FFFE);
	r4 = D(r4, s0_0_2, 0x0302FEFF, 0x02FD050F, 0x03F80B07, 0xF70205FE);
	r5 = D(r5, s0_0_2, 0x06050C21, 0xEFFE0010, 0xF9FC310C, 0x05E50622);
	r6 = D(r6, s0_0_2, 0x06FD18FF, 0x07F9FF10, 0xF9FCF400, 0xFDFEF601);
	r7 = D(r7, s0_0_2, 0x02F1FF08, 0x0300F9FA, 0xFB090109, 0x160F020C);
	r0 = D(r0, s0_1_0, 0xF318EEF8, 0x05FBFA06, 0xF7F8F109, 0x00030104);
	r1 = D(r1, s0_1_0, 0xF9FB06FF, 0x06E4E119, 0xFF080CF5, 0x00FBFCF9);
	r2 = D(r2, s0_1_0, 0x05091EE7, 0x09090311, 0x260013FE, 0x0EE61E2A);
	r3 = D(r3, s0_1_0, 0x09E81306, 0xFC100801, 0xF60807F5, 0xF7FB00FD);
	r4 = D(r4, s0_1_0, 0xEE1309C7, 0x0FF30AFD, 0xECC123FC, 0xF71B0519);
	r5 = D(r5, s0_1_0, 0x031EE7FB, 0xF408EA1B, 0x05F90F17, 0x080BC410);
	r6 = D(r6, s0_1_0, 0x08E70503, 0x0AF30E03, 0xF7FDFF05, 0x00F9F703);
	r7 = D(r7, s0_1_0, 0x050DFE02, 0x04030B03, 0x000902FE, 0xFC1C07F0);
	r0 = D(r0, s0_1_1, 0xF0020804, 0xFDFBF900, 0x09F0FD0E, 0xFD0B0609);
	r1 = D(r1, s0_1_1, 0xFB04F601, 0x07E42604, 0x0E0EFF05, 0x0B040C15);
	r2 = D(r2, s0_1_1, 0x0BEC1807, 0xFFEF00F5, 0xC7BBEFF1, 0x1824011F);
	r3 = D(r3, s0_1_1, 0xFF0A15ED, 0xF6EF1400, 0xF7FCFFF2, 0xF50406F2);
	r4 = D(r4, s0_1_1, 0xF704F2DF, 0x0B031400, 0xEFC20002, 0xDD0DEBFB);
	r5 = D(r5, s0_1_1, 0xF2F30BF9, 0xCBFD131D, 0x97070D01, 0xE7F903FA);
	r6 = D(r6, s0_1_1, 0xEDD1040E, 0xFB13FC05, 0xFA10F9F0, 0x0CF2F608);
	r7 = D(r7, s0_1_1, 0x11FEF504, 0x05000603, 0x0008F60C, 0x09FB0A00);
	r0 = D(r0, s0_1_2, 0x07FDFFFF, 0xFD00F8FD, 0x08FC0606, 0xFF000005);
	r1 = D(r1, s0_1_2, 0xFDFFFEFD, 0x00EDE808, 0x0EFC08FC, 0x02F4050F);
	r2 = D(r2, s0_1_2, 0x0F01FEFB, 0xF70EEBFF, 0xD1240BEA, 0x04FB3821);
	r3 = D(r3, s0_1_2, 0x04FCFFF8, 0x04F90A03, 0xF2060D01, 0xFF04EDF5);
	r4 = D(r4, s0_1_2, 0x000205F7, 0x14F81602, 0x07F80E06, 0xF206F505);
	r5 = D(r5, s0_1_2, 0x00DC0A13, 0x15EED51C, 0xFAF8F116, 0xE6F8E51A);
	r6 = D(r6, s0_1_2, 0x0201F509, 0x05060B17, 0xF902FFFD, 0xFC030600);
	r7 = D(r7, s0_1_2, 0x09140102, 0xFA04F1FC, 0xFFFA0505, 0x0F0804FC);
	r0 = D(r0, s0_2_0, 0x02F7F8F6, 0x01FFFCFE, 0x00FCFF0A, 0xFD01FF05);
	r1 = D(r1, s0_2_0, 0x04F7FFFF, 0x17CC1814, 0x000709F7, 0xFAF2FCE9);
	r2 = D(r2, s0_2_0, 0xFEF9FAEF, 0x02021104, 0xDBECF4F9, 0x05EDFAF2);
	r3 = D(r3, s0_2_0, 0xFDFF0FFE, 0xF7FF11FD, 0xEFFE00F4, 0xF70002FA);
	r4 = D(r4, s0_2_0, 0xFF0901F0, 0x03FFF503, 0xFDF71400, 0xF5F30C1B);
	r5 = D(r5, s0_2_0, 0xEB0900F9, 0xC5041EFF, 0xE1032102, 0xFAFBF20C);
	r6 = D(r6, s0_2_0, 0x0DFBFCFD, 0x09F80102, 0x06FC01FC, 0x06FBF603);
	r7 = D(r7, s0_2_0, 0xFB1502FF, 0xFD0EF700, 0x0AF9FD07, 0xF91213F2);
	r0 = D(r0, s0_2_1, 0x0FF8FF00, 0xFF03FCFF, 0x05050300, 0xF8FF0303);
	r1 = D(r1, s0_2_1, 0x00FBFE00, 0xFA0D0BFE, 0x0AF30CFE, 0x00FB14F7);
	r2 = D(r2, s0_2_1, 0xDFE6F7FA, 0xDEF00306, 0x7EED43EF, 0xF00FC300);
	r3 = D(r3, s0_2_1, 0x0006FA01, 0x14F503FF, 0x04F9FC01, 0xF90B00FA);
	r4 = D(r4, s0_2_1, 0xFC04F5F9, 0x0202F90A, 0xF8ECE60D, 0xF30DF608);
	r5 = D(r5, s0_2_1, 0xE8F01F01, 0xB8A2052A, 0xD80BFFF6, 0xBCE90E05);
	r6 = D(r6, s0_2_1, 0x090E0100, 0x0BF80512, 0x04FFF503, 0x0C00F308);
	r7 = D(r7, s0_2_1, 0xFF090002, 0xF4020AFB, 0xF4FE0403, 0xFA0A14F5);
	r0 = D(r0, s0_2_2, 0x00020A04, 0x04FCFBFE, 0x0A0A03FD, 0xFCFE0002);
	r1 = D(r1, s0_2_2, 0xFF00FD00, 0x160B03F4, 0x0CFC03F6, 0xFEFA0501);
	r2 = D(r2, s0_2_2, 0x0210FAFB, 0xF4ECE912, 0xC4F2FA13, 0xF5E9FD05);
	r3 = D(r3, s0_2_2, 0x080600F5, 0x02010701, 0x04FB05FF, 0xFE02FAFD);
	r4 = D(r4, s0_2_2, 0x0804F603, 0x04F91001, 0x09010306, 0xFEF7FF0E);
	r5 = D(r5, s0_2_2, 0x1DFE0C04, 0xB4EBF526, 0x13F8FF1B, 0xFD04070E);
	r6 = D(r6, s0_2_2, 0x11010AFC, 0x05F0E802, 0xFE00FEFD, 0xF70602FF);
	r7 = D(r7, s0_2_2, 0xF30203FC, 0x00FCF9FF, 0xF4000A0A, 0x020009F8);
	r0 = D(r0, s1_0_0, 0xECF5ECFE, 0x0100FCFC, 0x00FBF5F9, 0x0203FE01);
	r1 = D(r1, s1_0_0, 0x03FFFA0C, 0xFA07E6F2, 0xFEF4FFF4, 0xF7F00EF7);
	r2 = D(r2, s1_0_0, 0xF30FEBF5, 0xF9FB0811, 0x0619E9E0, 0xFFE415E1);
	r3 = D(r3, s1_0_0, 0x05001200, 0x04F311FE, 0xFEE60B05, 0xFCF5FD05);
	r4 = D(r4, s1_0_0, 0x03080007, 0x07030A09, 0xFE0CE904, 0xFA12FD0C);
	r5 = D(r5, s1_0_0, 0x0AE42603, 0xEBEBF735, 0x1D100110, 0x100CFF07);
	r6 = D(r6, s1_0_0, 0xE7F9DFFE, 0xFCFF02F4, 0x02FC0C07, 0x050603F9);
	r7 = D(r7, s1_0_0, 0x0D050C01, 0x05FF0004, 0x08010E05, 0xEAF1F5FE);
	r0 = D(r0, s1_0_1, 0xEB0A0105, 0xFD0102FF, 0x08FC05F4, 0x00030104);
	r1 = D(r1, s1_0_1, 0x03FD0006, 0x16F3DA10, 0xEFF70605, 0x020107FB);
	r2 = D(r2, s1_0_1, 0xF108F708, 0xFEFC0BF1, 0x1236F50F, 0x03D7D417);
	r3 = D(r3, s1_0_1, 0x0D00000B, 0xF9F1FF0A, 0xFFF30C0B, 0xF4FA0803);
	r4 = D(r4, s1_0_1, 0x00FEF914, 0xF4F90902, 0xF2F5F30A, 0x000414FD);
	r5 = D(r5, s1_0_1, 0xE6FEF5E1, 0x0ED6DDFC, 0xECD5FC22, 0xE106F6F5);
	r6 = D(r6, s1_0_1, 0x1A02EEEB, 0xEDF31EEF, 0x06FFF5F9, 0x01FFFB02);
	r7 = D(r7, s1_0_1, 0x0902FF11, 0x01000C02, 0xFEEEDB05, 0xE4F9F3FA);
	r0 = D(r0, s1_0_2, 0xFDFEFA06, 0x02000306, 0xFD0405FE, 0x0001FE01);
	r1 = D(r1, s1_0_2, 0x00FF07FF, 0x0C11EFFA, 0xF5FD07F8, 0xF7FDEF02);
	r2 = D(r2, s1_0_2, 0xFAF7F5FF, 0xF9061DF5, 0xC181231B, 0x23E20BFB);
	r3 = D(r3, s1_0_2, 0x06FE07F3, 0x1208F900, 0x00EE0702, 0x05F705F0);
	r4 = D(r4, s1_0_2, 0xECF6FE09, 0xFC0103FC, 0xFC0AEE03, 0x030803F9);
	r5 = D(r5, s1_0_2, 0xF7F9000E, 0x0B170DF7, 0x0401FC10, 0x02FB0716);
	r6 = D(r6, s1_0_2, 0x0EDFFFFB, 0xFC0501FE, 0x070A06F0, 0x0401FE04);
	r7 = D(r7, s1_0_2, 0x0B050BED, 0xFC0704FF, 0x070B1ADE, 0xFEF704E2);
	r0 = D(r0, s1_1_0, 0x00E708FB, 0x02FEFBF6, 0x0FF6FC0A, 0x01020200);
	r1 = D(r1, s1_1_0, 0xFA0005FA, 0x12EEF4FC, 0x04F8000C, 0x00FB0EFF);
	r2 = D(r2, s1_1_0, 0xFE1001F7, 0x0AF805FD, 0xF90E24F3, 0x121FD0DF);
	r3 = D(r3, s1_1_0, 0xFDFE0000, 0xFCF90100, 0x15EC1FF0, 0xF7FDF4F6);
	r4 = D(r4, s1_1_0, 0x060BFFF6, 0xFA0DF9FE, 0xF6DEE8E9, 0xFFF0F506);
	r5 = D(r5, s1_1_0, 0xFE050804, 0x02E8E5F2, 0xF6F1FF0E, 0xEC0C1600);
	r6 = D(r6, s1_1_0, 0x07ED1B13, 0xF7FDF906, 0x00FBFDFE, 0xFAFA02FF);
	r7 = D(r7, s1_1_0, 0x09030A00, 0xF90A0C08, 0x0107FFFA, 0xEEFCFF0A);
	r0 = D(r0, s1_1_1, 0x0D02FDFA, 0x010C051A, 0x1C000F10, 0xFFFA0305);
	r1 = D(r1, s1_1_1, 0xFEFDFE13, 0x0CE30511, 0x0AEA0C07, 0xF4E70D01);
	r2 = D(r2, s1_1_1, 0xE7260915, 0x1BF4D7B1, 0xFE060E07, 0x07CCEFB7);
	r3 = D(r3, s1_1_1, 0x0007F404, 0xF805F70F, 0x000101E5, 0xEA09EB07);
	r4 = D(r4, s1_1_1, 0x02FE08EC, 0xFAEF0D0E, 0xFDE4F3F0, 0xF9010703);
	r5 = D(r5, s1_1_1, 0xF4051207, 0xF402181F, 0xFBEF2303, 0xFD0BFBDC);
	r6 = D(r6, s1_1_1, 0x0EE11003, 0x0DE1FC19, 0x04FDF3F2, 0xFFF6EFF4);
	r7 = D(r7, s1_1_1, 0x05020A09, 0xFDFF070E, 0xF211E40C, 0xD90BFA09);
	r0 = D(r0, s1_1_2, 0xEAF00A1C, 0x0203FC02, 0xFDFBF509, 0xFEFE0305);
	r1 = D(r1, s1_1_2, 0x05FAFFFE, 0x0A0707EA, 0x05F70A00, 0xFA0705EE);
	r2 = D(r2, s1_1_2, 0x03FEF30B, 0x00090FE2, 0x05F1F70F, 0x0CE5BF21);
	r3 = D(r3, s1_1_2, 0x03FE09F9, 0x0301F80C, 0xFC0F0609, 0x020313FE);
	r4 = D(r4, s1_1_2, 0x09000A01, 0x01010011, 0x110405F8, 0x03EDE900);
	r5 = D(r5, s1_1_2, 0x0FFDF70C, 0x26FDD3EF, 0x01E515F6, 0x13EAF4F0);
	r6 = D(r6, s1_1_2, 0xFD031AF3, 0x06FB06FA, 0x07F9F7F9, 0x03050007);
	r7 = D(r7, s1_1_2, 0x00F90EF0, 0x0B0C00EA, 0xFEFB0302, 0xEC0A29F8);
	r0 = D(r0, s1_2_0, 0xFBFA00E9, 0x00FEFE01, 0x01FFFF05, 0x00FE05FF);
	r1 = D(r1, s1_2_0, 0xFD0700FB, 0x15DC04F4, 0x0EFB0AFC, 0x0BE91CDF);
	r2 = D(r2, s1_2_0, 0xF1FB050C, 0x03F91502, 0xF511E6D5, 0xE0E50912);
	r3 = D(r3, s1_2_0, 0xF6010BF1, 0xFCF90806, 0x030010D8, 0x06FDF7F3);
	r4 = D(r4, s1_2_0, 0xFE04F5FA, 0xF1F8FEFE, 0xE716FEF1, 0xF709FBFC);
	r5 = D(r5, s1_2_0, 0xF7FD03F3, 0xE80B0EF4, 0xE8F705FA, 0xF900E908);
	r6 = D(r6, s1_2_0, 0xFA0C0DE6, 0x0602FC03, 0xFE09FDF7, 0x0201F7FE);
	r7 = D(r7, s1_2_0, 0x03FD0B09, 0x00040FF9, 0xFFFDFC05, 0x0701FFF3);
	r0 = D(r0, s1_2_1, 0x08F919E9, 0x02FEFDFF, 0x08F8F9F8, 0xFB040701);
	r1 = D(r1, s1_2_1, 0x03000709, 0x0BBFF2E3, 0x0EF91104, 0x03031606);
	r2 = D(r2, s1_2_1, 0xFAF205FC, 0x1008EDE7, 0xCBF10CE1, 0xF6DF38F3);
	r3 = D(r3, s1_2_1, 0x00FEFDFD, 0xF9F9FE01, 0x02F4E4F9, 0xFF03F7FA);
	r4 = D(r4, s1_2_1, 0x03F8FCFC, 0x04F90B0C, 0x0DFA1DEF, 0x0208FAEC);
	r5 = D(r5, s1_2_1, 0x0CE814EC, 0x02E51CEC, 0x170E0FE9, 0x0302FFE2);
	r6 = D(r6, s1_2_1, 0x15FE240A, 0x06FCEBFE, 0x06FAEFF5, 0xFE010014);
	r7 = D(r7, s1_2_1, 0x01F60508, 0x02FBF402, 0xFD0DFAEE, 0xFD00F906);
	r0 = D(r0, s1_2_2, 0x0F0802FE, 0x04FDF701, 0xFC090C00, 0x010205FE);
	r1 = D(r1, s1_2_2, 0x0200FDFE, 0xF41001FF, 0xFAF60207, 0x06EC0704);
	r2 = D(r2, s1_2_2, 0x090A0FF5, 0x01EDF4FF, 0x58D90BEB, 0x00AB0AF4);
	r3 = D(r3, s1_2_2, 0xFDFDF4FF, 0xFB04FD00, 0x0FEA0C03, 0xFFF7F5FC);
	r4 = D(r4, s1_2_2, 0x00FC01FF, 0x0601090D, 0xED000CFF, 0x010301F0);
	r5 = D(r5, s1_2_2, 0x22EAEEF4, 0xFAFF23FB, 0x1F2515F6, 0x06012B0A);
	r6 = D(r6, s1_2_2, 0xEEF8FAF4, 0x00F0F9EE, 0xFCFAF9F5, 0xFBFCFD01);
	r7 = D(r7, s1_2_2, 0x01FA0301, 0x0502F803, 0xFE0D06FD, 0x0307F0FD);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8EF0CF9, 0xFE0201FE, 0xF7000304, 0x0003FC02);
	r1 = D(r1, s0_0_0, 0x01FEFEFD, 0xFDEF1405, 0x03F70B01, 0x02EE0E09);
	r2 = D(r2, s0_0_0, 0xFBF60209, 0x060DFD08, 0xF5E8E5F6, 0x0C1C0908);
	r3 = D(r3, s0_0_0, 0x0404FB10, 0xFB000AFF, 0x05FF00E1, 0x0D010F05);
	r4 = D(r4, s0_0_0, 0x09F2F204, 0xF8FFFEED, 0x0801EBF3, 0xFAF409FB);
	r5 = D(r5, s0_0_0, 0xFBF801EE, 0x13D2F4E3, 0xF3F21BF2, 0x0C1D11EA);
	r6 = D(r6, s0_0_0, 0xFDFEEA1E, 0xFBF301FE, 0x07060BF8, 0x0107F402);
	r7 = D(r7, s0_0_0, 0xFB0907FE, 0x03090503, 0x060CDBFF, 0x04EE0503);
	r0 = D(r0, s0_0_1, 0x0B131AFA, 0xFA031202, 0x10F61701, 0x0104FB00);
	r1 = D(r1, s0_0_1, 0x0500F7FE, 0x05052102, 0x05FB04EA, 0x1006FC0E);
	r2 = D(r2, s0_0_1, 0xEBF02802, 0xFD0CEC12, 0x0AF5F5DB, 0x0722F425);
	r3 = D(r3, s0_0_1, 0xFC03E80B, 0x0BFFF406, 0xFEFD1EDF, 0xF8FC0900);
	r4 = D(r4, s0_0_1, 0xF8F805F4, 0x00FC0407, 0x0402F5FE, 0x10E71B02);
	r5 = D(r5, s0_0_1, 0x0200D70B, 0x06DA0FEF, 0xF8E10DD0, 0xE51B3DF2);
	r6 = D(r6, s0_0_1, 0xF5F14C12, 0x091114FD, 0x04010CF6, 0xFA051104);
	r7 = D(r7, s0_0_1, 0x03080903, 0x08042008, 0xFEFDE70D, 0x0EF01D12);
	r0 = D(r0, s0_0_2, 0xF1ED1C06, 0x09030701, 0xFCFB24FE, 0xFC01F404);
	r1 = D(r1, s0_0_2, 0x03FF16FC, 0x03E7E214, 0xFEFE16EF, 0xF40F2D16);
	r2 = D(r2, s0_0_2, 0x01EDFAFD, 0x010E810D, 0x03E52281, 0xF535B52C);
	r3 = D(r3, s0_0_2, 0xE3FB1E07, 0x050006F4, 0x140B200F, 0x0002DE0E);
	r4 = D(r4, s0_0_2, 0x01F10000, 0xFBFE34FD, 0x05EBBCF0, 0xFFF8FCF0);
	r5 = D(r5, s0_0_2, 0x04F945F3, 0xFDF0F293, 0x0DE725FB, 0xF728E9F1);
	r6 = D(r6, s0_0_2, 0xFFFC0117, 0xF60A0DF3, 0xF5FE0BF6, 0xFE04FCFF);
	r7 = D(r7, s0_0_2, 0xFB0FF90C, 0x050A3409, 0xE70BEF06, 0x05001D10);
	r0 = D(r0, s0_1_0, 0x0FEB0C03, 0x03000F02, 0x1A130D05, 0x0003F7FB);
	r1 = D(r1, s0_1_0, 0xFB03FB03, 0x14091008, 0xEA011306, 0x0BEF1F05);
	r2 = D(r2, s0_1_0, 0xF5FF0414, 0xEA121512, 0x1BF10301, 0x1B290FEB);
	r3 = D(r3, s0_1_0, 0x071810ED, 0x17090CE4, 0x22FB0FE8, 0x090006F9);
	r4 = D(r4, s0_1_0, 0x04F3080F, 0x0201ECF8, 0x0A060405, 0x07EF1402);
	r5 = D(r5, s0_1_0, 0x18070CF2, 0x1901EDEA, 0xF2F314E3, 0x1F17FAF7);
	r6 = D(r6, s0_1_0, 0x0EDF0A09, 0x03020706, 0x02FE0902, 0x00FCFC0A);
	r7 = D(r7, s0_1_0, 0x040FF202, 0x08FC0107, 0xF80B0E00, 0x0D0C04F9);
	r0 = D(r0, s0_1_1, 0xF4001D08, 0x0000FE01, 0x2EF92A02, 0x010BF6FF);
	r1 = D(r1, s0_1_1, 0x0F000BF9, 0x11DE41D7, 0x13FB0208, 0xD4053610);
	r2 = D(r2, s0_1_1, 0xFBF30514, 0xF60A4520, 0x1AFA0BD1, 0xA520E215);
	r3 = D(r3, s0_1_1, 0xE5FA13F6, 0x1C0D240D, 0x0F240AF9, 0x400A1FFD);
	r4 = D(r4, s0_1_1, 0x0FF42200, 0x0C04CCFC, 0xFAFF1DFF, 0x1AFC07FD);
	r5 = D(r5, s0_1_1, 0xECF23219, 0x08E744F6, 0x0FF63003, 0xF9122A02);
	r6 = D(r6, s0_1_1, 0x23EBFB26, 0xD8F01F01, 0xF4040701, 0xF507FEF5);
	r7 = D(r7, s0_1_1, 0x251511F6, 0x0004FF0E, 0x070AF9F2, 0x2204FD03);
	r0 = D(r0, s0_1_2, 0xF7FEB701, 0x02FFFA04, 0xF4EDFC0A, 0xFF050D03);
	r1 = D(r1, s0_1_2, 0xFCFFE7FF, 0x08DC0BB9, 0x0903F907, 0xF8FE1E13);
	r2 = D(r2, s0_1_2, 0x1B0A1809, 0xDE0C2B09, 0xE0E2FE81, 0x2C4A3D19);
	r3 = D(r3, s0_1_2, 0xEFFD1AF7, 0x0903E0F5, 0x1D0BD2FB, 0x1E0526EE);
	r4 = D(r4, s0_1_2, 0x25FBFA13, 0x0202D2FF, 0x1AF8C0EC, 0xFEF0C30E);
	r5 = D(r5, s0_1_2, 0x24FE19E2, 0x00F732F9, 0x16F5E400, 0x131FEB0E);
	r6 = D(r6, s0_1_2, 0x0B00F209, 0x1B0DFBF9, 0xD409EDE5, 0xFC07F9FD);
	r7 = D(r7, s0_1_2, 0x000EF70A, 0x0B03EBFE, 0xA01627F1, 0x26FF1009);
	r0 = D(r0, s0_2_0, 0x12F7F3F2, 0x0005FFFE, 0xE4FAF904, 0x050404FD);
	r1 = D(r1, s0_2_0, 0x080204FD, 0xF8E80914, 0x0E030D04, 0xE208FEFE);
	r2 = D(r2, s0_2_0, 0x08F7FB12, 0x1611F40F, 0x0EF1F715, 0xFF2B2FCE);
	r3 = D(r3, s0_2_0, 0xFF06FB01, 0x0A0109FF, 0xFB061BFE, 0xF2F20304);
	r4 = D(r4, s0_2_0, 0xE2DE030B, 0x1904F5F2, 0x0905EFFD, 0xF10703F9);
	r5 = D(r5, s0_2_0, 0x0007FCFA, 0x0AEE1608, 0x2DF228F7, 0xFE1509E4);
	r6 = D(r6, s0_2_0, 0x10F3F10C, 0x03FFF904, 0x0804FB03, 0x03FF1405);
	r7 = D(r7, s0_2_0, 0x0201FFFD, 0x0109E903, 0x1006FAFA, 0xE9EC09FD);
	r0 = D(r0, s0_2_1, 0x1CF3C30C, 0xFD01FA05, 0x4C0C23FE, 0x09030100);
	r1 = D(r1, s0_2_1, 0x1900ED00, 0x06ED2408, 0x1101FF12, 0x2104EAFB);
	r2 = D(r2, s0_2_1, 0xE1F3180D, 0x2C013610, 0xCC0AA806, 0xF2261FE5);
	r3 = D(r3, s0_2_1, 0x16FCFBFF, 0xEF0BFF0D, 0x14FFF6FB, 0x2BF4FEFE);
	r4 = D(r4, s0_2_1, 0x08F726F7, 0xC4FBFFF5, 0x090A1CEC, 0x290A1C03);
	r5 = D(r5, s0_2_1, 0xFF084BF5, 0x1CF91DFA, 0x16E231F0, 0xC81A1CF6);
	r6 = D(r6, s0_2_1, 0x011306EA, 0x160015F2, 0x120413FC, 0x39FC0006);
	r7 = D(r7, s0_2_1, 0xF40913F9, 0xD3FCFC0A, 0xFEFD0303, 0xF0010504);
	r0 = D(r0, s0_2_2, 0x81ED8EF4, 0xBC0010FF, 0x81F90703, 0xD903FD04);
	r1 = D(r1, s0_2_2, 0x03FC01FF, 0x7FF0C1E6, 0x90050A0B, 0x81F92DFF);
	r2 = D(r2, s0_2_2, 0x29F3130D, 0x1C0DFD02, 0x3300DD08, 0x20225DF4);
	r3 = D(r3, s0_2_2, 0x7F001500, 0x7F0A0FFF, 0x7F07F7E2, 0x81FF33FB);
	r4 = D(r4, s0_2_2, 0xD8F60EFE, 0x7F09EFF4, 0x81F722F9, 0x60FBF808);
	r5 = D(r5, s0_2_2, 0xCF03F615, 0xEFD926F9, 0x1FE3CF37, 0x8114A4FE);
	r6 = D(r6, s0_2_2, 0x8106E6FD, 0x100036FD, 0x7F0327EF, 0xCB0907F9);
	r7 = D(r7, s0_2_2, 0x940AFEF7, 0xFB011900, 0xF0FEFF07, 0x6A02F50A);
	r0 = D(r0, s1_0_0, 0x03F8F302, 0x0404FFFC, 0x01FC0304, 0xFE00FD02);
	r1 = D(r1, s1_0_0, 0x03FBF709, 0x0704E504, 0xFD0201F6, 0xFCFFF1FA);
	r2 = D(r2, s1_0_0, 0xEC010C0A, 0x04EB070D, 0xFC26FA19, 0x02EFFBFF);
	r3 = D(r3, s1_0_0, 0x0801FE11, 0x000AEA0A, 0x0DFDF20A, 0xFF01F705);
	r4 = D(r4, s1_0_0, 0xFEFF1101, 0x0602F404, 0xF9FD0B0C, 0xFD07060E);
	r5 = D(r5, s1_0_0, 0xFCFF10E9, 0x0BFD0909, 0x100526F7, 0xF0EB17FD);
	r6 = D(r6, s1_0_0, 0x04F002EC, 0xFD010903, 0x0000FB04, 0xFD0CFFFC);
	r7 = D(r7, s1_0_0, 0xFBFDFF03, 0xFB06F5FE, 0x02FB0FFB, 0x22F2F7FF);
	r0 = D(r0, s1_0_1, 0xF9F2E30D, 0xFD0000FE, 0x00010001, 0xFF00F906);
	r1 = D(r1, s1_0_1, 0x01FD07FC, 0x05FBD003, 0xF9F803F9, 0xF8F804F3);
	r2 = D(r2, s1_0_1, 0xEBFC23FC, 0x06FD040C, 0xF2D9EEEC, 0xFCEFF603);
	r3 = D(r3, s1_0_1, 0x021015F6, 0x05010203, 0xFBFBF611, 0x0AEE14FF);
	r4 = D(r4, s1_0_1, 0x0405F00C, 0x03F3F906, 0xFE06EB0E, 0x0502FE11);
	r5 = D(r5, s1_0_1, 0xEDF31310, 0x14B51E0C, 0xC2E4F41A, 0xF714F515);
	r6 = D(r6, s1_0_1, 0x0E04B324, 0xFD17F9EB, 0x01060105, 0x000303FB);
	r7 = D(r7, s1_0_1, 0xFF000D0A, 0x03040EF7, 0xFA151708, 0xFAE9FAF5);
	r0 = D(r0, s1_0_2, 0xFBF2FA00, 0x00FF00FF, 0x04FDFFF9, 0x010200FF);
	r1 = D(r1, s1_0_2, 0x0400FE01, 0xFFF2E40B, 0xF8F505FA, 0x02FC0BFA);
	r2 = D(r2, s1_0_2, 0x01F4F90E, 0x0718F8FD, 0x0EDBDBFD, 0xFBF40210);
	r3 = D(r3, s1_0_2, 0xFEFDFB05, 0x030AFD02, 0x0DFC0902, 0x00F805FF);
	r4 = D(r4, s1_0_2, 0xFAEF0F00, 0xF90E07F0, 0x13E4F7F9, 0x0B12070A);
	r5 = D(r5, s1_0_2, 0xF4EAFA0B, 0x0B02FD07, 0x19FE000A, 0xFAE0F6FB);
	r6 = D(r6, s1_0_2, 0xF0C4FA03, 0x02E0FFFB, 0x020BF905, 0xFD09FE02);
	r7 = D(r7, s1_0_2, 0x040007FC, 0x0601FAF4, 0x080F11F7, 0xFFE707EB);
	r0 = D(r0, s1_1_0, 0xFCE6FAFF, 0xFC02F803, 0xF9FF0405, 0xFFFC0500);
	r1 = D(r1, s1_1_0, 0x06FE0505, 0xE5ECE412, 0x0C0100ED, 0x0FE1F610);
	r2 = D(r2, s1_1_0, 0xFC1702DD, 0xF004FB03, 0x1603FDD4, 0xE5ED15F7);
	r3 = D(r3, s1_1_0, 0xF907F9FE, 0x03F5010B, 0xFB01F5F3, 0x0AFEF90C);
	r4 = D(r4, s1_1_0, 0xFD040F15, 0xF10818F3, 0x2402FA1F, 0x0709FC12);
	r5 = D(r5, s1_1_0, 0xFD1BF401, 0x0D1DFD0C, 0xF20709EC, 0xF914FC1B);
	r6 = D(r6, s1_1_0, 0x16DB2413, 0x07FF0A12, 0x0A05F30B, 0xFD11EC07);
	r7 = D(r7, s1_1_0, 0xF604FDFB, 0x0105FAF7, 0xF40CFE02, 0x060EF4FE);
	r0 = D(r0, s1_1_1, 0xFFEEC5F7, 0x0506FF01, 0xFEFBFEF5, 0xFEFCFC02);
	r1 = D(r1, s1_1_1, 0xFFFB06F0, 0xF4DCE3E8, 0x0FECF407, 0x0CEAFFF2);
	r2 = D(r2, s1_1_1, 0x0EF21721, 0xFB231418, 0xF009EDE6, 0xF8D6C6C4);
	r3 = D(r3, s1_1_1, 0xEA0403F9, 0x03FCF2EA, 0x0A26F406, 0x00000009);
	r4 = D(r4, s1_1_1, 0x070E0E00, 0x0805F207, 0x08F8EDE5, 0xF9F80609);
	r5 = D(r5, s1_1_1, 0x080AEC03, 0x04F50B02, 0xE1D4E022, 0x15EA0AFB);
	r6 = D(r6, s1_1_1, 0x08E4F702, 0x01EC1A16, 0xFB03F507, 0xFFFEFBED);
	r7 = D(r7, s1_1_1, 0x000A0A19, 0x0704FA0C, 0xFE08FC20, 0x0C0B0530);
	r0 = D(r0, s1_1_2, 0xF5F40208, 0x06FF09FB, 0xFC0D00F3, 0x00FCFD00);
	r1 = D(r1, s1_1_2, 0xFE04FE00, 0xEC101306, 0x0D05FE00, 0xFF11FB05);
	r2 = D(r2, s1_1_2, 0xE0E2F3F3, 0x09F30DFD, 0xE208DFEA, 0xEAE60B08);
	r3 = D(r3, s1_1_2, 0xFFF9FE0C, 0xF8F90904, 0xFEF5FFFC, 0x0402FDFE);
	r4 = D(r4, s1_1_2, 0x08F9F503, 0x0705FF01, 0xFB18FA0B, 0x0AF40112);
	r5 = D(r5, s1_1_2, 0x19FBE6FE, 0xECFBF30F, 0x05E90214, 0x0AE1F602);
	r6 = D(r6, s1_1_2, 0xF408FB04, 0x0312FA12, 0xFCFEFE16, 0x020A0007);
	r7 = D(r7, s1_1_2, 0x04070202, 0xFFFEFF03, 0xFEFE0E1A, 0x060A060A);
	r0 = D(r0, s1_2_0, 0xFCE610F7, 0x00FDFCFC, 0x050BFE05, 0xFD01FB00);
	r1 = D(r1, s1_2_0, 0x07FE0212, 0x09FEFBEF, 0xFFEE06E7, 0x11F3FEEE);
	r2 = D(r2, s1_2_0, 0x0214F2FA, 0xFE05FA12, 0xDBF224F0, 0xE629E606);
	r3 = D(r3, s1_2_0, 0x02FDF711, 0x02FF02F2, 0xFFFFF4F9, 0xFC03FFFE);
	r4 = D(r4, s1_2_0, 0x011018FA, 0x04FE0001, 0xE31CFFFC, 0x00F40013);
	r5 = D(r5, s1_2_0, 0xEDFE0DED, 0xDA0BF2F5, 0x0C1C0106, 0xFCEB07FC);
	r6 = D(r6, s1_2_0, 0xFDF403EB, 0x0E070706, 0x03FF0304, 0xFEFFFE14);
	r7 = D(r7, s1_2_0, 0xF503F902, 0x07FEFBF9, 0xFBFEF6FF, 0x06F40BF8);
	r0 = D(r0, s1_2_1, 0x0CE5FAF2, 0xFF0004F8, 0x080F030F, 0xFFFE0100);
	r1 = D(r1, s1_2_1, 0x02FFFB0E, 0x090DFB04, 0x04FAF019, 0x03F6FCE7);
	r2 = D(r2, s1_2_1, 0xF9091214, 0xEC030BBC, 0x35E510F5, 0x0500F8ED);
	r3 = D(r3, s1_2_1, 0x01FEFEFE, 0xFBF8FAF8, 0x0402FD0F, 0xFCFFFF07);
	r4 = D(r4, s1_2_1, 0x00F50609, 0xF3E2FC18, 0x09F1F1FF, 0xFAFD020E);
	r5 = D(r5, s1_2_1, 0xF2DC0DEA, 0x04CE0209, 0xCED024F8, 0xD40301E1);
	r6 = D(r6, s1_2_1, 0x0405F808, 0xF903FD09, 0x03FAF9FD, 0x01090318);
	r7 = D(r7, s1_2_1, 0x03F9F5F3, 0xFFFDFEF6, 0xFC0407F7, 0x00EFFBEE);
	r0 = D(r0, s1_2_2, 0xF800F403, 0x0100FEFA, 0x080D07F9, 0xFEFFFF05);
	r1 = D(r1, s1_2_2, 0x0200FA03, 0x11FD0BF8, 0x020EFE04, 0x04F7F41E);
	r2 = D(r2, s1_2_2, 0x0BF70905, 0xF70601F4, 0x8DB4CF21, 0xF3F1F317);
	r3 = D(r3, s1_2_2, 0x00FE0309, 0xFC02F3FD, 0x08FBFC07, 0xFDF1FDF8);
	r4 = D(r4, s1_2_2, 0xF7030B00, 0x0302FC0E, 0x04F7F901, 0x07FFFBF8);
	r5 = D(r5, s1_2_2, 0xFFEE03F6, 0xC8D72EDB, 0xF904C9F3, 0xFB05EA0B);
	r6 = D(r6, s1_2_2, 0x06ED0A03, 0x0B0AF909, 0xFFFDFD0B, 0xFA00FD05);
	r7 = D(r7, s1_2_2, 0xFB05F708, 0x000AFAF3, 0xF305FE03, 0x02FFF5F8);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.497e-02, -2.551e-02, -1.315e-02, -2.975e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.140e-02, 9.890e-03, -1.569e-02, 1.522e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.382e-02, 3.195e-02, -4.536e-02, 2.094e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.212e-02, -2.613e-03, 4.306e-02, 1.015e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.325e-02, -2.252e-03, 5.224e-03, -1.130e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(3.024e-02, 3.878e-03, -4.630e-02, -1.068e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-6.279e-02, -3.567e-02, 1.580e-02, -1.618e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.259e-02, -5.458e-02, 7.076e-03, 6.979e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE04FCF9, 0xFCFC0607, 0xEDFE01FD, 0xF40A0E03);
	r1 = D(r1, s0_0_0, 0xFBFDF814, 0x24FBFDF3, 0x0AFAF4FD, 0x020F0CEF);
	r2 = D(r2, s0_0_0, 0x060DFCF1, 0xFBFE0EFA, 0x040203FC, 0xFC11F503);
	r3 = D(r3, s0_0_0, 0xFF01F9FF, 0x0FF608F1, 0xDD01070E, 0xFD0D0306);
	r4 = D(r4, s0_0_0, 0xFAFB01F8, 0xE8060202, 0xF2010B05, 0xF814FAFE);
	r5 = D(r5, s0_0_0, 0x070501FA, 0x0CFAFCFB, 0xF10106EE, 0xFCFDF901);
	r6 = D(r6, s0_0_0, 0xFD050506, 0x15FDFB07, 0xFB030200, 0xF7FC0500);
	r7 = D(r7, s0_0_0, 0x10FEFF03, 0x0B00F907, 0x01F60900, 0x0B03FB09);
	r0 = D(r0, s0_0_1, 0x1201FAF1, 0x130DFB0B, 0xFA0F0C0D, 0x0D0B0B08);
	r1 = D(r1, s0_0_1, 0x03060406, 0xE2FCF5FB, 0xF8FF2105, 0x14F910F7);
	r2 = D(r2, s0_0_1, 0x08FEFB08, 0x12F301FD, 0xE9110E04, 0x1616FF05);
	r3 = D(r3, s0_0_1, 0xE707FEFC, 0xF410EA0E, 0x06180308, 0xE40CF7ED);
	r4 = D(r4, s0_0_1, 0x16FD0203, 0xF8F9F200, 0x0003040B, 0xF9EB10F0);
	r5 = D(r5, s0_0_1, 0xF4FD01F5, 0xF50BFD01, 0x00FB0000, 0x02FCF8FD);
	r6 = D(r6, s0_0_1, 0xE608F808, 0xF7FC01FC, 0x09FCFFF4, 0x0BF70006);
	r7 = D(r7, s0_0_1, 0xFF0613FE, 0x060502FD, 0x21FAF909, 0x2201F606);
	r0 = D(r0, s0_0_2, 0x18E9FA03, 0x1103FEFE, 0xF1FFF504, 0x2011F205);
	r1 = D(r1, s0_0_2, 0x04F0FD0F, 0xF0FE0BFE, 0x06070817, 0x01FE10FF);
	r2 = D(r2, s0_0_2, 0x0BF70303, 0x01E504F2, 0xF7FB07FC, 0x0FF0FAFC);
	r3 = D(r3, s0_0_2, 0x00FF0AFD, 0xF40DF307, 0xFF11FD0E, 0xF9FEF708);
	r4 = D(r4, s0_0_2, 0x08FDFD05, 0x00F40302, 0xF6FA010A, 0x1CFDFA08);
	r5 = D(r5, s0_0_2, 0x2202FFFE, 0x050BF8F9, 0x0FFD04F1, 0xEAF00202);
	r6 = D(r6, s0_0_2, 0xF0001007, 0xF8FFFFFB, 0x010B0B02, 0xEB11FE09);
	r7 = D(r7, s0_0_2, 0x0B0D0303, 0x0112FF04, 0x240DECF4, 0x0F04FC02);
	r0 = D(r0, s0_1_0, 0xFC09E9FC, 0x0FF9F1FC, 0xF6FAF904, 0xF6EEEF03);
	r1 = D(r1, s0_1_0, 0x0105FD17, 0xF10A09F2, 0xFB0F0AFF, 0x0712E1F9);
	r2 = D(r2, s0_1_0, 0xF0FF17F7, 0xF0EDEC27, 0x18040413, 0x19F5E7FB);
	r3 = D(r3, s0_1_0, 0x15FA0E0E, 0x03F619FF, 0xEDEDF612, 0x09FD0F09);
	r4 = D(r4, s0_1_0, 0xEF04F5F6, 0xE9F512FB, 0x01FDF9F6, 0x000BD61E);
	r5 = D(r5, s0_1_0, 0xFB0707FB, 0x1404F7F8, 0xFFFFFEED, 0xFAE9F2FB);
	r6 = D(r6, s0_1_0, 0x09FDF609, 0xF2FE0B06, 0x090607FF, 0x02F8F208);
	r7 = D(r7, s0_1_0, 0x1804F203, 0x03FFEEF7, 0x0107FDFD, 0x2605F702);
	r0 = D(r0, s0_1_1, 0x0E0BE4F5, 0xC2F8FC06, 0xCFFC1810, 0xCEF6E708);
	r1 = D(r1, s0_1_1, 0x23011EF6, 0x3CFE0A04, 0x12FBFEE8, 0x0F0EEDEA);
	r2 = D(r2, s0_1_1, 0x12D7DFEF, 0xE8FA0719, 0xED03E4F9, 0xE408E50D);
	r3 = D(r3, s0_1_1, 0x14271814, 0xF3E8F706, 0xFAF11005, 0xC803D1F8);
	r4 = D(r4, s0_1_1, 0x1C0D1802, 0x35F3FE0A, 0xE4F9020F, 0xE90513FA);
	r5 = D(r5, s0_1_1, 0xC8EEE4D5, 0xEC050D0F, 0xF013DCEF, 0xFA09010F);
	r6 = D(r6, s0_1_1, 0x37161F0F, 0x400532F1, 0x2F0AF3DE, 0x3E091709);
	r7 = D(r7, s0_1_1, 0x210DF1ED, 0xF61920F6, 0xFE15FDF2, 0xD4FCF700);
	r0 = D(r0, s0_1_2, 0xDCFFF406, 0x0D1F0103, 0x0A0A1618, 0xEA11FFF6);
	r1 = D(r1, s0_1_2, 0xF90106FF, 0x2119E509, 0xFA04080B, 0x04040503);
	r2 = D(r2, s0_1_2, 0xF2FD1BF2, 0x0D1FFE0E, 0x020A11FB, 0x171DF80B);
	r3 = D(r3, s0_1_2, 0x1A0103FC, 0xF5020700, 0x09EB07DF, 0x090005F3);
	r4 = D(r4, s0_1_2, 0xFEF60303, 0xFEE9FF04, 0x020DF409, 0x1204F002);
	r5 = D(r5, s0_1_2, 0x1E0FFCF5, 0x2605FE06, 0x2008FDF8, 0x250D0707);
	r6 = D(r6, s0_1_2, 0xD6FB0FFF, 0xFCFD0FF6, 0x06F2F3E1, 0x02F3EDD3);
	r7 = D(r7, s0_1_2, 0xE9EEF6F9, 0xF40C1005, 0xE0F6E4E9, 0xF2F7FE06);
	r0 = D(r0, s0_2_0, 0x04FBFB04, 0xFA01EF08, 0x0AFBF705, 0xFA0117FE);
	r1 = D(r1, s0_2_0, 0xFDF7F61B, 0xF7FC0204, 0xF1FC0301, 0x0A01E50F);
	r2 = D(r2, s0_2_0, 0xE9F705FA, 0xF7E90E0A, 0x1BFA0302, 0xFBF0FAFC);
	r3 = D(r3, s0_2_0, 0x04030902, 0x03001AEE, 0xE303FF05, 0xF5F5F909);
	r4 = D(r4, s0_2_0, 0xFC020702, 0x02FAF7F1, 0x0CFF03FE, 0xFD01E515);
	r5 = D(r5, s0_2_0, 0xF3FB0EFD, 0x0B0D06EC, 0x060701F5, 0x0E08FCFB);
	r6 = D(r6, s0_2_0, 0x04FE0C07, 0xFFFEF804, 0xFC0008FB, 0xFD06F500);
	r7 = D(r7, s0_2_0, 0x07F90205, 0xF30520FD, 0xFC020008, 0x0501FFFF);
	r0 = D(r0, s0_2_1, 0xFFFD0E08, 0x08032900, 0xFA060B08, 0x0A060FF6);
	r1 = D(r1, s0_2_1, 0x01FBFC05, 0xEFFEE900, 0x0600DF08, 0x060AD7E4);
	r2 = D(r2, s0_2_1, 0xEEF2F1FD, 0xDDFEEA28, 0x130A080C, 0xF6F402F8);
	r3 = D(r3, s0_2_1, 0xFF031C07, 0x120318F5, 0xF80D1AFF, 0xFCF92406);
	r4 = D(r4, s0_2_1, 0x080400F7, 0xEEF8FF0F, 0x0E0110FE, 0x020C1CEC);
	r5 = D(r5, s0_2_1, 0xF8F9F7FA, 0x09F526F5, 0x05092DED, 0x001525EF);
	r6 = D(r6, s0_2_1, 0xEDFFEC0E, 0xF702EDFD, 0x20FC09E7, 0x08020EF7);
	r7 = D(r7, s0_2_1, 0xF903FC04, 0xEE10BCF7, 0x0FF80801, 0x0D0101F7);
	r0 = D(r0, s0_2_2, 0xFF080BFD, 0xFF02060B, 0xF9FFFC0D, 0x0602F0FC);
	r1 = D(r1, s0_2_2, 0x07F40022, 0x0E0C07FE, 0xE600F709, 0x11F60B04);
	r2 = D(r2, s0_2_2, 0x000A0705, 0xF20CFB0C, 0xFD00F0F9, 0xFDF90CFB);
	r3 = D(r3, s0_2_2, 0x0400FA05, 0x060800F3, 0x0A01F600, 0x02FFFE05);
	r4 = D(r4, s0_2_2, 0xFD00F803, 0xFE02F808, 0xF8FC0FFF, 0xF7F00EF6);
	r5 = D(r5, s0_2_2, 0xFB00F5FF, 0xF90EE5FA, 0x0BEF05F6, 0x00FAF4FD);
	r6 = D(r6, s0_2_2, 0xF8FF00F9, 0xFFFC07FB, 0x13FE07F3, 0x0DF9F906);
	r7 = D(r7, s0_2_2, 0x00FFFEFE, 0xE6F8F2EF, 0xF4FA17F4, 0x02010D02);
	r0 = D(r0, s1_0_0, 0x0BFAF9FB, 0x08F90403, 0xFC09F10E, 0x12FA0A04);
	r1 = D(r1, s1_0_0, 0x13FC0701, 0x1BE2FDF3, 0xF512F3FE, 0x100101F7);
	r2 = D(r2, s1_0_0, 0x10070901, 0x11EE0910, 0xF403F8FD, 0x0AF40009);
	r3 = D(r3, s1_0_0, 0xF6FBFCF8, 0xFA0701FA, 0x0806FAF1, 0xFB0007F0);
	r4 = D(r4, s1_0_0, 0x0003FF07, 0xFD11FDFC, 0x0701050E, 0x00FE06EF);
	r5 = D(r5, s1_0_0, 0x03FD02F1, 0x0AF816FB, 0x00FF0E05, 0xFD010D08);
	r6 = D(r6, s1_0_0, 0x0802FFFB, 0xF408FDF4, 0x06FE07F1, 0xFF04F8FD);
	r7 = D(r7, s1_0_0, 0x0AFBFFFD, 0x02FEF9FC, 0x03070306, 0xF6FFF3ED);
	r0 = D(r0, s1_0_1, 0xF7FC00F5, 0xFCF71109, 0x0612FF0A, 0x01F90901);
	r1 = D(r1, s1_0_1, 0xF9F11808, 0xF915DDE8, 0xF5F413FE, 0x080DF4FF);
	r2 = D(r2, s1_0_1, 0x030C0B15, 0x16D92018, 0xFFFC0207, 0xF4E20501);
	r3 = D(r3, s1_0_1, 0x07F9F7FC, 0x04F7F400, 0xFE060201, 0x0109F3CB);
	r4 = D(r4, s1_0_1, 0xFBFB0A17, 0xF90801D6, 0x00FB0607, 0x07F0E7FD);
	r5 = D(r5, s1_0_1, 0x0AF80FFE, 0xF4FCFDF2, 0x070203DD, 0xFDF5FEEE);
	r6 = D(r6, s1_0_1, 0x0DF6FF16, 0xFC08FB02, 0x050C06FB, 0xF6FCFC01);
	r7 = D(r7, s1_0_1, 0x0807F21A, 0xF308FF0F, 0xFFFEF8FF, 0xFA080005);
	r0 = D(r0, s1_0_2, 0xFA061308, 0xF5F909FF, 0x0410061A, 0xECF60000);
	r1 = D(r1, s1_0_2, 0xFEEE040C, 0x0E03E510, 0x12F8F204, 0xEEF7F001);
	r2 = D(r2, s1_0_2, 0x0E08031B, 0xF00204FC, 0xFD090802, 0xFA02FB00);
	r3 = D(r3, s1_0_2, 0xFBFAF8FA, 0xFBF4E8F7, 0x07E307F7, 0x13ECEBF5);
	r4 = D(r4, s1_0_2, 0xFBFF0108, 0x0D0CFA0C, 0x090B0015, 0xEBFAF102);
	r5 = D(r5, s1_0_2, 0x03F211FA, 0xF3FA05F5, 0x01FB01F4, 0xF1030215);
	r6 = D(r6, s1_0_2, 0xF20A02EE, 0xF8FF0BF8, 0xFCEC03F1, 0xFBE80206);
	r7 = D(r7, s1_0_2, 0xFE03F20B, 0xFCE9FA01, 0xE9F7070A, 0xFCFBFF0A);
	r0 = D(r0, s1_1_0, 0x0802010C, 0xE9F60C08, 0xFD121006, 0x06F8F103);
	r1 = D(r1, s1_1_0, 0xF31DE307, 0xD9EDDE0E, 0xFDFCF5F4, 0x010FE70F);
	r2 = D(r2, s1_1_0, 0xEAFFF0F2, 0x0A06C4E4, 0xFB10F309, 0xF5FEF005);
	r3 = D(r3, s1_1_0, 0x0300FFF3, 0x0FFB14FC, 0x140A1BEF, 0xFF00FA01);
	r4 = D(r4, s1_1_0, 0xFC0600FD, 0x0AF30404, 0xF6090103, 0xE313DE13);
	r5 = D(r5, s1_1_0, 0xF907F919, 0xFBF910F9, 0x0FFE010E, 0x09101002);
	r6 = D(r6, s1_1_0, 0xF403EEEB, 0xFF0B06FE, 0xF514FD0D, 0xF7F102F8);
	r7 = D(r7, s1_1_0, 0xF70A00F7, 0x00FB0103, 0xFCF703F8, 0x0DF7FBFA);
	r0 = D(r0, s1_1_1, 0x01EEFE13, 0x0B05FBE1, 0x08050AFC, 0xFE0BFBFF);
	r1 = D(r1, s1_1_1, 0xFC0CF807, 0xFBF1DA10, 0xFFEBE413, 0xF306E7E0);
	r2 = D(r2, s1_1_1, 0xF5F0D9FC, 0xF50EF10F, 0x06E50706, 0xF60EDEEF);
	r3 = D(r3, s1_1_1, 0x0AFAF800, 0x200500E9, 0x041DF720, 0x07E70EC7);
	r4 = D(r4, s1_1_1, 0xFB100121, 0x04121A0C, 0xF418FBE8, 0x051C1B0B);
	r5 = D(r5, s1_1_1, 0xF3E80214, 0xFD2415FE, 0x110809FA, 0xFDFB08EA);
	r6 = D(r6, s1_1_1, 0x000301FE, 0xFA011018, 0x02000D05, 0x0909140A);
	r7 = D(r7, s1_1_1, 0x0A0FFFF6, 0x1AFE07E1, 0x0D1E03ED, 0x0801FDF6);
	r0 = D(r0, s1_1_2, 0xFAFC0B07, 0xFF00FAF9, 0x0F12F313, 0x060FF4E6);
	r1 = D(r1, s1_1_2, 0xFB14F416, 0xF7C70C0A, 0x0B09EAF3, 0x03F8FA10);
	r2 = D(r2, s1_1_2, 0x04FCF502, 0xFC0CB002, 0x030AFBFA, 0xF9FDEC1D);
	r3 = D(r3, s1_1_2, 0xF8FBFD11, 0x0D01FFDD, 0xE81905EA, 0x03F40DF9);
	r4 = D(r4, s1_1_2, 0xFB0A0406, 0x02F20924, 0x0406FB10, 0xFCFDCEF6);
	r5 = D(r5, s1_1_2, 0x0605F7FE, 0xFFF2F9F9, 0x0DF7021E, 0xFBFB0411);
	r6 = D(r6, s1_1_2, 0xEF010201, 0xF1FC0AF8, 0xF90A03CB, 0x0D0AF100);
	r7 = D(r7, s1_1_2, 0xFFF81119, 0xECF9E3DD, 0x18F9FDF5, 0x06FE0A02);
	r0 = D(r0, s1_2_0, 0x04FAFE06, 0xFB0004FA, 0x0B0FF50A, 0xFCFE1205);
	r1 = D(r1, s1_2_0, 0x10E40403, 0xFD12F907, 0x0EFEFA00, 0xF4F7F403);
	r2 = D(r2, s1_2_0, 0x01080003, 0x0810FFF6, 0x0E21F501, 0xFCF8FA01);
	r3 = D(r3, s1_2_0, 0xFF02FA01, 0xF8FDFA07, 0xF510E911, 0xF51000FF);
	r4 = D(r4, s1_2_0, 0x05FB0D07, 0x0CFBFE00, 0x09F9FEFC, 0xFA0004FF);
	r5 = D(r5, s1_2_0, 0x0203F6FC, 0xF3F402F8, 0xFAFA05FF, 0x01FC0D0D);
	r6 = D(r6, s1_2_0, 0xF4090007, 0xFB06FFFB, 0xFC09F1F9, 0x010207F3);
	r7 = D(r7, s1_2_0, 0xFA03F802, 0x041AF707, 0xF5000A04, 0xF906FBFC);
	r0 = D(r0, s1_2_1, 0xF9F715EE, 0xFBFCFDED, 0x00F7F5FC, 0xFDE8FCFF);
	r1 = D(r1, s1_2_1, 0x0D0201F9, 0xF7DF0BEF, 0xF4F306FD, 0x0306F9F5);
	r2 = D(r2, s1_2_1, 0xE5DBFFF9, 0x0CE02729, 0xFFDF0008, 0xFCF004EC);
	r3 = D(r3, s1_2_1, 0x00FEFC07, 0xF310DA06, 0x0209FA07, 0x13FCFF02);
	r4 = D(r4, s1_2_1, 0xFBFEFBFF, 0x10050BFB, 0xFD07F6F2, 0x1B26FB23);
	r5 = D(r5, s1_2_1, 0xF5ED0E02, 0xF2F0ECFC, 0x1003FEF3, 0x06FFFBF4);
	r6 = D(r6, s1_2_1, 0xFBFD0109, 0x04F401FE, 0xFDEAFD09, 0xF9000004);
	r7 = D(r7, s1_2_1, 0xF7FD08FB, 0x01E2EC28, 0x04F60107, 0x0401F903);
	r0 = D(r0, s1_2_2, 0x0D05F7EF, 0x05040818, 0xFBF90A08, 0xFF010301);
	r1 = D(r1, s1_2_2, 0x0FFE08FA, 0x060BF001, 0xFA000707, 0x000901F2);
	r2 = D(r2, s1_2_2, 0xFF11FAE7, 0xFAFE0010, 0xFFFE04F6, 0x0504F805);
	r3 = D(r3, s1_2_2, 0x01FAFC06, 0xFF0CF8DB, 0x02E507F9, 0xFDF90102);
	r4 = D(r4, s1_2_2, 0x05FD0505, 0x06010711, 0x0A0103FD, 0xF9F5FFF6);
	r5 = D(r5, s1_2_2, 0xFFFC0AFB, 0x090B190B, 0xFF04F902, 0xFA020205);
	r6 = D(r6, s1_2_2, 0xF80807F2, 0xFB010202, 0xF5F80FCE, 0xFA1404FB);
	r7 = D(r7, s1_2_2, 0x0103F901, 0xEC0E18F0, 0xFC100605, 0xFA01FDFF);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0DFB0603, 0xEE35FCF7, 0x0BDDFDF6, 0xFD13F215);
	r1 = D(r1, s0_0_0, 0x0AE6F4EF, 0xCBE1FE18, 0x071200FB, 0x08D3FBF4);
	r2 = D(r2, s0_0_0, 0xFEB507FB, 0xED33E002, 0x020E0D09, 0x10F2020D);
	r3 = D(r3, s0_0_0, 0xFDF002FF, 0x0BE302F0, 0x090A10F5, 0x0CD30006);
	r4 = D(r4, s0_0_0, 0x04F9FF05, 0xFE030801, 0xF80502FE, 0xF055151C);
	r5 = D(r5, s0_0_0, 0x0FC408E8, 0xFB1003FD, 0x13FE0CEF, 0x06F4020D);
	r6 = D(r6, s0_0_0, 0xF9F30209, 0xFE1F0506, 0x0CF006FB, 0xF517F00D);
	r7 = D(r7, s0_0_0, 0x0408FE07, 0x15180104, 0xFA1E0010, 0x0908F9FB);
	r0 = D(r0, s0_0_1, 0x0B1609EB, 0xE50D00F9, 0xF507EB00, 0xFC0600ED);
	r1 = D(r1, s0_0_1, 0xFCE1DCF3, 0xFE2111F7, 0xFBFBF9ED, 0x073BFD01);
	r2 = D(r2, s0_0_1, 0x132A000B, 0xEBF9FD12, 0x02CBF2FF, 0xFF06EF12);
	r3 = D(r3, s0_0_1, 0x0AF8FC02, 0x0518131D, 0xFEBEEF0C, 0x0E1A000F);
	r4 = D(r4, s0_0_1, 0xFD07FEF9, 0xFD1A0305, 0xF611FE12, 0xE281E5E0);
	r5 = D(r5, s0_0_1, 0x13170AF2, 0xFC0E02F7, 0x13FD0A04, 0xF5000604);
	r6 = D(r6, s0_0_1, 0xF4EEF90A, 0x02FC0502, 0x0BDBFFFF, 0xF3150DF5);
	r7 = D(r7, s0_0_1, 0xFFF8FDFC, 0x060607ED, 0xF1E0F1DE, 0xFE13FEEE);
	r0 = D(r0, s0_0_2, 0x15FF05F7, 0xE4180009, 0x00FEFF0D, 0xF017FD02);
	r1 = D(r1, s0_0_2, 0xF61DFF0C, 0x00FA00FF, 0xFE02050D, 0x07F6FCF2);
	r2 = D(r2, s0_0_2, 0x00110206, 0x062D1016, 0xFF040805, 0x0C220B02);
	r3 = D(r3, s0_0_2, 0x0A04FFFE, 0x10E102FA, 0xFCF306FE, 0x17F91201);
	r4 = D(r4, s0_0_2, 0x02FEFF03, 0xFBF603FD, 0xEDF8FF04, 0xE1140B0F);
	r5 = D(r5, s0_0_2, 0x010D0E03, 0xF21FF419, 0x13030CFC, 0x0B100B01);
	r6 = D(r6, s0_0_2, 0xF7DDFB05, 0x081105FF, 0x06F00506, 0x1D0B0C09);
	r7 = D(r7, s0_0_2, 0xFCF8F8FD, 0x0AD905F8, 0xEBF8F7F2, 0xFCFE07F9);
	r0 = D(r0, s0_1_0, 0xFED6FFFC, 0xF1000BEF, 0x01EFF7FF, 0xD89BFCEF);
	r1 = D(r1, s0_1_0, 0x1CFC0D05, 0xF5ED06FF, 0x13060D0F, 0x0B000AEE);
	r2 = D(r2, s0_1_0, 0x05E209E0, 0xFAEAF2FA, 0xF71BF9FC, 0x07E11006);
	r3 = D(r3, s0_1_0, 0x00050300, 0x0FDD0505, 0x02EEF62A, 0x0CE40DF9);
	r4 = D(r4, s0_1_0, 0x08F3FD13, 0xF604FD03, 0xFE0B0109, 0xF0300400);
	r5 = D(r5, s0_1_0, 0x0FB108F5, 0xF3F9F60A, 0x08270DF1, 0xF6CB0010);
	r6 = D(r6, s0_1_0, 0xEC110600, 0x00100503, 0x0FE700ED, 0xF905FA12);
	r7 = D(r7, s0_1_0, 0x0106FD04, 0x0D060D09, 0xFC09F2FF, 0x11F0FEFB);
	r0 = D(r0, s0_1_1, 0x0127FFF9, 0xF5F113E9, 0xFEFD15FA, 0x02EFF7F6);
	r1 = D(r1, s0_1_1, 0xF7EAF0E4, 0xEEFDF8E1, 0xF6D4F1F6, 0xFF14F8E1);
	r2 = D(r2, s0_1_1, 0x080B0520, 0xF98DDFE8, 0x03E21203, 0x06F80F11);
	r3 = D(r3, s0_1_1, 0x0A0AF7F4, 0xF220F320, 0x25061E0E, 0x0E27FE07);
	r4 = D(r4, s0_1_1, 0x110107F6, 0xF720EAFF, 0xFF2B011D, 0xECBCBD02);
	r5 = D(r5, s0_1_1, 0x0E1411E4, 0xEA02F816, 0x09160A07, 0x07EDE8F9);
	r6 = D(r6, s0_1_1, 0xEDFD04EA, 0x05020A06, 0x100A0FDE, 0xDE27DA20);
	r7 = D(r7, s0_1_1, 0xFC09F6F8, 0x15F71918, 0xE7D1E50B, 0x00F50608);
	r0 = D(r0, s0_1_2, 0x02020206, 0xEEF701FB, 0x0000EA07, 0xFC1900F5);
	r1 = D(r1, s0_1_2, 0x1410EFF4, 0xEA0CF907, 0x06F4EF08, 0x040DFE00);
	r2 = D(r2, s0_1_2, 0x070404F8, 0xE611F1F0, 0x000D0002, 0x071DF7F2);
	r3 = D(r3, s0_1_2, 0xFFF30306, 0xF5090CFF, 0x10F0FDFD, 0x1501180B);
	r4 = D(r4, s0_1_2, 0x0609FCFE, 0x0B06F906, 0xE70EEEFF, 0xF020E6F8);
	r5 = D(r5, s0_1_2, 0x031F06FA, 0xF220DFFB, 0xFB0C0B07, 0xDC10DDF5);
	r6 = D(r6, s0_1_2, 0xEFF0020B, 0x0E0B0302, 0x1A1417F7, 0x02E01104);
	r7 = D(r7, s0_1_2, 0x080400F6, 0x19EE01FD, 0x06EC07FF, 0x09030004);
	r0 = D(r0, s0_2_0, 0x0DF60BFA, 0xDF12FE07, 0xFBDEFE03, 0x0BFEFD0E);
	r1 = D(r1, s0_2_0, 0x161D0101, 0xF51EFFFA, 0xEF0D0504, 0x0A0FF1F6);
	r2 = D(r2, s0_2_0, 0x14D7F8FA, 0xD62DF7FD, 0xFF11FD03, 0x0FF2000F);
	r3 = D(r3, s0_2_0, 0x000A0403, 0x1DF1010F, 0x240CFDF3, 0x14F40B0B);
	r4 = D(r4, s0_2_0, 0x0BEEFEFC, 0xF119FEFF, 0xFD04FB0E, 0xFF5300F9);
	r5 = D(r5, s0_2_0, 0x14C1FFF8, 0xF3E2000C, 0x0D050908, 0xF8EFFA10);
	r6 = D(r6, s0_2_0, 0xF51D0800, 0x031601FC, 0x21D5F6F1, 0xE5310302);
	r7 = D(r7, s0_2_0, 0x09020304, 0x1CFB12F8, 0xFA0FFA05, 0x041102FB);
	r0 = D(r0, s0_2_1, 0x0F2C07EF, 0xD70F0108, 0xF5F30BFE, 0x06080404);
	r1 = D(r1, s0_2_1, 0x09E7F9FC, 0x0CF60806, 0xFBE600F5, 0x030205FE);
	r2 = D(r2, s0_2_1, 0x02EE02F7, 0xF7DD060A, 0xFDD8020B, 0x0DF70D01);
	r3 = D(r3, s0_2_1, 0x00FDFE07, 0x0F0AF9FB, 0x15EA08ED, 0x0117FB0D);
	r4 = D(r4, s0_2_1, 0x02FE00FC, 0x081E0402, 0xF90C06FF, 0xFC8CF725);
	r5 = D(r5, s0_2_1, 0x111F08F8, 0xF0100311, 0x0404F911, 0xEAE4F219);
	r6 = D(r6, s0_2_1, 0xF8050301, 0x0BFDFBFF, 0x22A606ED, 0xF1E80505);
	r7 = D(r7, s0_2_1, 0x0114F8F1, 0x17F108EB, 0xFD0307F7, 0x05EDFFFA);
	r0 = D(r0, s0_2_2, 0x0FFC0805, 0xE9100207, 0x08DAF300, 0x080BFF0E);
	r1 = D(r1, s0_2_2, 0x0617F10B, 0xF11AFF03, 0x0017FF05, 0xFC210109);
	r2 = D(r2, s0_2_2, 0xFD200C00, 0xF52DFD0A, 0x0D040B01, 0x08050704);
	r3 = D(r3, s0_2_2, 0x040D04FF, 0x04EA0E0D, 0x0B1A0701, 0x01EC100A);
	r4 = D(r4, s0_2_2, 0x04FA0303, 0x04FE000E, 0xFCF6F602, 0x050FFC09);
	r5 = D(r5, s0_2_2, 0x15110A0D, 0x09FA07FF, 0x16080404, 0x0B0AFE09);
	r6 = D(r6, s0_2_2, 0x02F90908, 0x08030403, 0x161210FF, 0xFC1BFEFF);
	r7 = D(r7, s0_2_2, 0x0005FEFB, 0x19F90608, 0xF4F5FBF8, 0x01100001);
	r0 = D(r0, s1_0_0, 0xFF0AFE07, 0x0D02F5F9, 0x03FF09F2, 0x05F9F10C);
	r1 = D(r1, s1_0_0, 0x0510EF07, 0xFAF912E3, 0xFFFE0803, 0x0C0CF104);
	r2 = D(r2, s1_0_0, 0x10EEFCF4, 0x19FFFE00, 0x01FDEF05, 0x0BFC06F5);
	r3 = D(r3, s1_0_0, 0xFB050207, 0x09FAF2FB, 0x04FE0315, 0xFCF0F408);
	r4 = D(r4, s1_0_0, 0x03FBFBFC, 0xF8070002, 0xFFFFF1FB, 0xFE0A010D);
	r5 = D(r5, s1_0_0, 0x04030209, 0x0AF5FF0A, 0xFFFD0104, 0x06FFFEFE);
	r6 = D(r6, s1_0_0, 0x06FBFC07, 0xFFFC0201, 0x05FCFF0D, 0x06030102);
	r7 = D(r7, s1_0_0, 0x08FEFA01, 0x050404FA, 0x0A06F4FA, 0x03000600);
	r0 = D(r0, s1_0_1, 0xF0FC0405, 0xFE05F8FD, 0x000EFDFE, 0x0BF9F20C);
	r1 = D(r1, s1_0_1, 0x010AF4FC, 0x02EC1BDF, 0x00080016, 0x04FBFE06);
	r2 = D(r2, s1_0_1, 0x04F5F6FE, 0x0A01F704, 0x0205F010, 0x03FDEE06);
	r3 = D(r3, s1_0_1, 0x04040500, 0xFEEE03F4, 0x09050611, 0xFDE605F3);
	r4 = D(r4, s1_0_1, 0x0402FB0A, 0xF51701FC, 0x0009F1FF, 0x1C07FB08);
	r5 = D(r5, s1_0_1, 0x0CF70D07, 0xF512F7F8, 0x050AE0F2, 0xFA0AF106);
	r6 = D(r6, s1_0_1, 0x0E0DFFF8, 0x03FC1100, 0x05F704FC, 0x03F4F3F7);
	r7 = D(r7, s1_0_1, 0x0600FDFC, 0x00FA1608, 0x0CF5F301, 0x00FD020E);
	r0 = D(r0, s1_0_2, 0xF7F7F100, 0x0606FCFC, 0xF804FFEE, 0xFBF9EF10);
	r1 = D(r1, s1_0_2, 0xF123D602, 0xFCF31602, 0x0505070D, 0x0BFF050D);
	r2 = D(r2, s1_0_2, 0xFEFA020C, 0xE7F305D8, 0xFF07F8FD, 0xFBF7FAF8);
	r3 = D(r3, s1_0_2, 0xFE0A0303, 0x0009F1F8, 0xF80CEF02, 0x02DCFD02);
	r4 = D(r4, s1_0_2, 0xFF000006, 0xF70BFD08, 0x00FEFA0A, 0x05FD0B1A);
	r5 = D(r5, s1_0_2, 0x0B01F501, 0xFE0804F9, 0x0004F2FC, 0x05E9F9F7);
	r6 = D(r6, s1_0_2, 0x0107FA02, 0xF8000503, 0x1007FD04, 0xF101DA14);
	r7 = D(r7, s1_0_2, 0x0700FFFA, 0x1106F502, 0xF8FBFD05, 0xFDFE0906);
	r0 = D(r0, s1_1_0, 0xE603FE09, 0x050BF905, 0x0A020206, 0x01F50BE7);
	r1 = D(r1, s1_1_0, 0xFB13D9F4, 0xFF0A03EE, 0x0E0300F5, 0x050E01F2);
	r2 = D(r2, s1_1_0, 0xFE0FF110, 0x02FB140D, 0x05FAFA07, 0xF50702F8);
	r3 = D(r3, s1_1_0, 0x0800F907, 0x04E70A0A, 0x0EF90BFF, 0x08EFFB0C);
	r4 = D(r4, s1_1_0, 0xFA03FE05, 0xFFFEFD0A, 0xFF07FB08, 0xF30F0FED);
	r5 = D(r5, s1_1_0, 0xF40600F5, 0x08F1F103, 0xF40DF407, 0xED10FD01);
	r6 = D(r6, s1_1_0, 0x02090A06, 0x040305FC, 0xFE0CF9FD, 0x0BFA07FC);
	r7 = D(r7, s1_1_0, 0x0AFA0704, 0xFA04FC0A, 0xFE000301, 0xFAFCFEFA);
	r0 = D(r0, s1_1_1, 0x11F6FFDA, 0x0EFBF702, 0x1903FB05, 0x0910F5EA);
	r1 = D(r1, s1_1_1, 0x0102EAFF, 0xEC0B0BF4, 0xF50E161E, 0x0716F704);
	r2 = D(r2, s1_1_1, 0xE8FDE801, 0x180B11CF, 0xF90301EA, 0xF105F7F1);
	r3 = D(r3, s1_1_1, 0xFDFD06F6, 0xF8F116EE, 0x050C0DF3, 0xF0E007E9);
	r4 = D(r4, s1_1_1, 0x1F050BF8, 0xE502FF25, 0x0900FB08, 0x180502C8);
	r5 = D(r5, s1_1_1, 0xFB080A13, 0xFEFB01F1, 0xE7FFF90B, 0x02F314FA);
	r6 = D(r6, s1_1_1, 0x160BFBFC, 0xFBFF0202, 0xF6110F02, 0x020514FC);
	r7 = D(r7, s1_1_1, 0x14FCFEEA, 0x12FA01EE, 0x160CF6EE, 0x0FFEFDF9);
	r0 = D(r0, s1_1_2, 0x1108070D, 0x0C0405FB, 0x0401F8FB, 0x0AFAFB04);
	r1 = D(r1, s1_1_2, 0x16F3FEEF, 0xF1F810E6, 0xFB09FA0B, 0x02FC17F1);
	r2 = D(r2, s1_1_2, 0x091202F9, 0xFFF7FC1F, 0xF7010208, 0x0B050E15);
	r3 = D(r3, s1_1_2, 0x08FF02FF, 0x13F7F9F3, 0x15FCF0F6, 0x07E906ED);
	r4 = D(r4, s1_1_2, 0x02020505, 0xF7040612, 0x0502FB16, 0xE308061A);
	r5 = D(r5, s1_1_2, 0xFF0E1105, 0x09021718, 0x040718FF, 0x08060A06);
	r6 = D(r6, s1_1_2, 0xFAF9E5F5, 0x0103FCF9, 0xE607FEDF, 0xF404F8A7);
	r7 = D(r7, s1_1_2, 0xFEF801FB, 0x1408E800, 0xF4EE0DF6, 0xFEFDFEFA);
	r0 = D(r0, s1_2_0, 0x0403F8FE, 0x0A0E04F7, 0x09F409F7, 0x08F6F507);
	r1 = D(r1, s1_2_0, 0x0AFEFE08, 0xFD01FEFC, 0x03080310, 0x0B13ED0C);
	r2 = D(r2, s1_2_0, 0x05F6000F, 0x07010209, 0x07F4FAF9, 0x040207EF);
	r3 = D(r3, s1_2_0, 0x0400FF01, 0xF9F3FBFB, 0xF8FF0FF0, 0xF5F5010A);
	r4 = D(r4, s1_2_0, 0xFF05FFFB, 0x0EFB0404, 0x07FDFBF8, 0x02F8F3FF);
	r5 = D(r5, s1_2_0, 0xFA05040A, 0x09010BF0, 0x01FCF7FF, 0xFFF000E2);
	r6 = D(r6, s1_2_0, 0x020306F4, 0x0002FE06, 0xFEFAFA0C, 0x00FDFE14);
	r7 = D(r7, s1_2_0, 0xFFFDFCFE, 0xFA0705FB, 0x04F801F6, 0xFC09FF07);
	r0 = D(r0, s1_2_1, 0x12040405, 0x100BF7FE, 0x18060804, 0x06F7F9F6);
	r1 = D(r1, s1_2_1, 0xF6FCFFF6, 0x0C090B01, 0x04020208, 0x100917F5);
	r2 = D(r2, s1_2_1, 0x0C00020E, 0xFDFAF4FC, 0x07EEF9F7, 0x1002FA06);
	r3 = D(r3, s1_2_1, 0xF6F80307, 0xF8F70121, 0xF813040B, 0xF0E2FF0F);
	r4 = D(r4, s1_2_1, 0xFA01FFF5, 0xFDF5FB02, 0x0AFFF707, 0xD8EB0A09);
	r5 = D(r5, s1_2_1, 0x0C0A09FC, 0x0305F8E7, 0xF3F00402, 0xECF206FD);
	r6 = D(r6, s1_2_1, 0x06000206, 0x02060103, 0x040CF9FA, 0xF2F30302);
	r7 = D(r7, s1_2_1, 0x01050307, 0x0610160C, 0x000001F6, 0xFD0505FF);
	r0 = D(r0, s1_2_2, 0xF6030402, 0x04FEFA00, 0x02FFF408, 0x03FA0A08);
	r1 = D(r1, s1_2_2, 0x0604FE08, 0xE9F7FFF2, 0x0A0CFC00, 0xFB0D0503);
	r2 = D(r2, s1_2_2, 0x0C03F7FA, 0xE80CFF01, 0x0F02FEFF, 0x01F806FB);
	r3 = D(r3, s1_2_2, 0x00000504, 0x020D0700, 0x060DF003, 0x01EC00F7);
	r4 = D(r4, s1_2_2, 0xFA01FEFD, 0xF50AFB09, 0xFE00FC11, 0xFF0DF30A);
	r5 = D(r5, s1_2_2, 0x0A0703F8, 0xF609FF05, 0xF1F90503, 0xFAFCFC0A);
	r6 = D(r6, s1_2_2, 0x0C06FD05, 0x0204FDFA, 0x140AFF03, 0xF706F6F9);
	r7 = D(r7, s1_2_2, 0xF605F9F1, 0x27FF06EC, 0xFDFE0206, 0x0208FFFD);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF41305FC, 0x05FC0706, 0xEF170A05, 0x04ECF9F3);
	r1 = D(r1, s0_0_0, 0x01F921F8, 0x14CF00F8, 0xFDFDFE04, 0xF81207F6);
	r2 = D(r2, s0_0_0, 0xF806F706, 0x0CED0408, 0xFA03F8FF, 0xF5F7FDFE);
	r3 = D(r3, s0_0_0, 0x00FB02FA, 0xF2040305, 0xFB100CF4, 0x06F508FD);
	r4 = D(r4, s0_0_0, 0xF7FB0003, 0xF3080913, 0xFEFFFA06, 0x03F602FD);
	r5 = D(r5, s0_0_0, 0x001202F7, 0x0BFA0206, 0xF602F50A, 0x0004FF17);
	r6 = D(r6, s0_0_0, 0xFEF5FC06, 0x0605FE03, 0xFE0804FA, 0x04020DFF);
	r7 = D(r7, s0_0_0, 0x0302FAFA, 0xFD070BF0, 0x0804FEFF, 0xFE00FBFA);
	r0 = D(r0, s0_0_1, 0x03F3FFFC, 0x0DFCF705, 0x0006F607, 0x13FC0AF2);
	r1 = D(r1, s0_0_1, 0xFFF4010F, 0x04EBE8FD, 0x16F2F9FD, 0x170A03FE);
	r2 = D(r2, s0_0_1, 0x14FFFAFC, 0x0CE80FF2, 0x07FFF5FE, 0x11ED08F8);
	r3 = D(r3, s0_0_1, 0xFFFE0AF8, 0xFA12FF09, 0xF503FE04, 0x0A10FDF2);
	r4 = D(r4, s0_0_1, 0xFCF8FE01, 0xF609EB0D, 0x06FD03FF, 0x0EC811D3);
	r5 = D(r5, s0_0_1, 0x00FBF702, 0xF610FBF9, 0xFC060513, 0xFE12FFFD);
	r6 = D(r6, s0_0_1, 0xFAFC0807, 0xF700FA06, 0xF600EFFC, 0xF711FB11);
	r7 = D(r7, s0_0_1, 0x0701FDF9, 0xF901FEFB, 0xF5F304F7, 0x0BFC0BFB);
	r0 = D(r0, s0_0_2, 0x0B0A0005, 0xFFFD0FFF, 0xF4FAF9F9, 0x0B0C17F1);
	r1 = D(r1, s0_0_2, 0x02E90404, 0x05FEE711, 0x0A08F6EE, 0x05EB0003);
	r2 = D(r2, s0_0_2, 0xFB110FFD, 0x05FB09FF, 0x050200EE, 0xFC010CF9);
	r3 = D(r3, s0_0_2, 0x0702FCFD, 0xF8FBF50C, 0xFF07E50B, 0x1201FF0B);
	r4 = D(r4, s0_0_2, 0xFCFE0702, 0xFAFBF0FF, 0x01FDF900, 0xFA2015FE);
	r5 = D(r5, s0_0_2, 0x030C15F9, 0xFEFF0702, 0xF5F0F805, 0xE7F40010);
	r6 = D(r6, s0_0_2, 0x0AF8F411, 0xF8FFF90B, 0x000308FE, 0xFC00FAFE);
	r7 = D(r7, s0_0_2, 0xFD000102, 0xF3021205, 0xFAFE1101, 0xFC0C05FF);
	r0 = D(r0, s0_1_0, 0xF7EC0DFA, 0xFC090C09, 0x10FE0FFF, 0xFF070102);
	r1 = D(r1, s0_1_0, 0x1314FF08, 0x0105F90B, 0x0206070C, 0x01F6F80E);
	r2 = D(r2, s0_1_0, 0x02ECEDF8, 0x010CF8FD, 0x0BE101F5, 0x00E8F00B);
	r3 = D(r3, s0_1_0, 0x01F7FEF7, 0x0BF1F7F9, 0xF7FDFEF7, 0x0AE8E1F7);
	r4 = D(r4, s0_1_0, 0xF5FD0600, 0xF7EF1709, 0x07FE0303, 0xFECCF3F5);
	r5 = D(r5, s0_1_0, 0x000AF005, 0x00F50C0D, 0xFBFFFA03, 0x04F40EEF);
	r6 = D(r6, s0_1_0, 0xFAE50200, 0xFD0C03FE, 0x0013F900, 0xFD11F504);
	r7 = D(r7, s0_1_0, 0xFFFBF805, 0xFEEA0202, 0xFF02FE02, 0xF8FB04F7);
	r0 = D(r0, s0_1_1, 0xEE1010F7, 0xFE110AFB, 0x011B03FB, 0xFA0C11FE);
	r1 = D(r1, s0_1_1, 0xFF1DFB04, 0xF016E0FE, 0xF8F3E413, 0xE9F0FC0B);
	r2 = D(r2, s0_1_1, 0x0B160F0D, 0x0601FA0F, 0xFDE5EF0A, 0x0D0306FB);
	r3 = D(r3, s0_1_1, 0x01F00301, 0xFB1EFBF6, 0x1506EEFF, 0x2FFEF804);
	r4 = D(r4, s0_1_1, 0xFDF30E00, 0x0DF6F607, 0x0C07FCED, 0x06F40A0A);
	r5 = D(r5, s0_1_1, 0x03130608, 0x1B00F2EA, 0x0BEA03E6, 0x2BFDEFF7);
	r6 = D(r6, s0_1_1, 0xEFFBFB0D, 0xFC02F60F, 0xF107FC1D, 0x0CF0EC02);
	r7 = D(r7, s0_1_1, 0xF812070D, 0xF710070B, 0xEE0005F6, 0xFF010607);
	r0 = D(r0, s0_1_2, 0x01060FF2, 0xFA010207, 0xED15EB09, 0xE90B1DFF);
	r1 = D(r1, s0_1_2, 0x0A0FF7F1, 0x05F501EE, 0x0509E30E, 0xF1E5FC24);
	r2 = D(r2, s0_1_2, 0x07F60109, 0x0C1B060C, 0x0311FF0B, 0xFBF9F912);
	r3 = D(r3, s0_1_2, 0x090312FE, 0x04EE0507, 0x03FA0B0F, 0x01F8FBF6);
	r4 = D(r4, s0_1_2, 0xFCF5F702, 0xF500F0EE, 0xFB010009, 0xED040EFB);
	r5 = D(r5, s0_1_2, 0xFC1D050F, 0xF6190E08, 0xE90418FA, 0xE91F14F3);
	r6 = D(r6, s0_1_2, 0x0402F4F8, 0xF6FF08FF, 0xFBFEF603, 0xF8CAF8E3);
	r7 = D(r7, s0_1_2, 0x01F20004, 0xF9F5EB03, 0xFD0905FD, 0xFCF7FA08);
	r0 = D(r0, s0_2_0, 0x0F01FAF7, 0xF8050B07, 0x07F6F801, 0xF80401F7);
	r1 = D(r1, s0_2_0, 0xF3F90AF1, 0xF60E030E, 0x010102F6, 0xFAF8F6E5);
	r2 = D(r2, s0_2_0, 0xE9070700, 0xEA06F70B, 0xFDF1EEFD, 0xF40EFE0C);
	r3 = D(r3, s0_2_0, 0xFFFA09F8, 0xF4FBF600, 0x0204F509, 0x0604F709);
	r4 = D(r4, s0_2_0, 0xFCFA0AF9, 0xF9E90B0A, 0xFAF80505, 0xFC0101FE);
	r5 = D(r5, s0_2_0, 0x0607F9FB, 0xFEF5F604, 0xF4FCFDF4, 0xF8FAFC03);
	r6 = D(r6, s0_2_0, 0xFDEAF208, 0x05010300, 0x080EF5F7, 0xFEFAF6F7);
	r7 = D(r7, s0_2_0, 0x0008F4FC, 0x0BFEFAFD, 0xF8F00003, 0x040004F7);
	r0 = D(r0, s0_2_1, 0xFF02FCFF, 0xF404F809, 0x000307FF, 0x010EF7FD);
	r1 = D(r1, s0_2_1, 0x0EFA0F02, 0x10F7FCFD, 0x0E02F9F9, 0x10F3FAEE);
	r2 = D(r2, s0_2_1, 0x13F4F8F4, 0x01F6EEEB, 0x090602F9, 0x150003F8);
	r3 = D(r3, s0_2_1, 0x000109FF, 0xEC02EFF1, 0xF809FBEE, 0xFCFC0003);
	r4 = D(r4, s0_2_1, 0xFE05FEFC, 0xF7FE050B, 0xFD00FE0E, 0x06ECDF09);
	r5 = D(r5, s0_2_1, 0x110006FE, 0x0216FA04, 0x05010608, 0xF209FC09);
	r6 = D(r6, s0_2_1, 0xFBECF70B, 0x02FE00FB, 0x0E07F8FA, 0xFFF8F003);
	r7 = D(r7, s0_2_1, 0x05030306, 0x0DF907FC, 0x0702F4FD, 0x020504F3);
	r0 = D(r0, s0_2_2, 0x0804EEFA, 0xED02F805, 0xFAFBF9F3, 0xF30AEEFF);
	r1 = D(r1, s0_2_2, 0xF1FE0006, 0xFCEDFA04, 0x070102F6, 0x0CFC05F6);
	r2 = D(r2, s0_2_2, 0x0EFC0A06, 0xF800F107, 0x00F802FE, 0xFDFC0103);
	r3 = D(r3, s0_2_2, 0x05F80805, 0xFB040011, 0x0B1006FD, 0x06F5050C);
	r4 = D(r4, s0_2_2, 0xFBFD06FB, 0xFBF702EC, 0xFC03F706, 0x091705E8);
	r5 = D(r5, s0_2_2, 0x09FE03F7, 0xFEF3F8F1, 0xFA0204FA, 0xF5F8FBFE);
	r6 = D(r6, s0_2_2, 0xFBF8FA12, 0x00FF00FB, 0x100712FD, 0xFDFA0002);
	r7 = D(r7, s0_2_2, 0x0207F7FA, 0xFFE117F9, 0xF1F9F002, 0x000307FA);
	r0 = D(r0, s1_0_0, 0x05FE03FA, 0xEBF2EC12, 0x0203D8F8, 0xF30EE8F0);
	r1 = D(r1, s1_0_0, 0x14D2EFFF, 0x01060FE6, 0x09EC01FD, 0x0117DE07);
	r2 = D(r2, s1_0_0, 0x1707FA00, 0xEB0E0F0D, 0x02F5F9F8, 0x080A01FD);
	r3 = D(r3, s1_0_0, 0x0AF9FEFB, 0x00090AF5, 0xFDF5C310, 0xF7090D04);
	r4 = D(r4, s1_0_0, 0xFFFB0500, 0x0702F3F7, 0xFD030AF9, 0xFDEBB615);
	r5 = D(r5, s1_0_0, 0x0AFEFAFF, 0x031605F5, 0x18FAECFB, 0x0F10FDF6);
	r6 = D(r6, s1_0_0, 0xE2F80D09, 0x020406FB, 0x02F4F708, 0xF3F8F0FE);
	r7 = D(r7, s1_0_0, 0x01F50C0A, 0xFDF2EEFE, 0xE3F9FE10, 0x030B0106);
	r0 = D(r0, s1_0_1, 0x090314F8, 0xF1EFF304, 0x05EEDC03, 0xFF01EB03);
	r1 = D(r1, s1_0_1, 0x0813FBF6, 0x01D90AE6, 0x0706EDF4, 0xF8F70EFE);
	r2 = D(r2, s1_0_1, 0xFE0F1903, 0x0EF9F0D2, 0x0DFFF5F5, 0x0305F809);
	r3 = D(r3, s1_0_1, 0x0A030700, 0xFCE9FC11, 0x01F6F71B, 0x08FB0C08);
	r4 = D(r4, s1_0_1, 0xFDFFFC00, 0xF006120E, 0xF6080A0A, 0xAF2EE30F);
	r5 = D(r5, s1_0_1, 0x09FB00F6, 0x0422E508, 0xFBF5F405, 0xF6E9F20D);
	r6 = D(r6, s1_0_1, 0xF4F103FF, 0x0407FFF8, 0x01FA05FC, 0xFFF806F7);
	r7 = D(r7, s1_0_1, 0xFC0DFE0B, 0x06E7F8FB, 0xE6F5E90B, 0x01F4FCF9);
	r0 = D(r0, s1_0_2, 0xFA0801FC, 0xEF050A03, 0x03060FFB, 0x02F9DEFC);
	r1 = D(r1, s1_0_2, 0xFCFC04FB, 0xEE0C0805, 0x04F71008, 0xF20E0AFC);
	r2 = D(r2, s1_0_2, 0x07F9F702, 0xFE0A1106, 0x050A06FA, 0x00040D0C);
	r3 = D(r3, s1_0_2, 0x01030001, 0xF3FEFE03, 0x08F6F305, 0xF0FEE908);
	r4 = D(r4, s1_0_2, 0x01F9FF00, 0xFCF9FD03, 0xFDFB02FF, 0xFFE50910);
	r5 = D(r5, s1_0_2, 0x08F9FD01, 0xF7F620E4, 0xFEF10001, 0xF10206FB);
	r6 = D(r6, s1_0_2, 0xDF0E00FE, 0x030408F6, 0x0008FD0C, 0x040EFB00);
	r7 = D(r7, s1_0_2, 0x02FCFA03, 0x0E00F9F2, 0xF6F8E306, 0x03FB01FB);
	r0 = D(r0, s1_1_0, 0xF9EAF7E6, 0xF2F50804, 0xF2F309FF, 0x11EFF4EB);
	r1 = D(r1, s1_1_0, 0x07E5FDF2, 0x08ECF9ED, 0x09EDFAF8, 0x0417FF08);
	r2 = D(r2, s1_1_0, 0x05FD01F7, 0x0AEAD5F3, 0xF5FD03FD, 0x05060AF2);
	r3 = D(r3, s1_1_0, 0x0004FF0B, 0xFE030BFE, 0x090F04F6, 0xF810010C);
	r4 = D(r4, s1_1_0, 0x02FEFA00, 0xFEFBF6FF, 0x02020B05, 0xE5F0CD1A);
	r5 = D(r5, s1_1_0, 0x01FA00FC, 0xDB161C06, 0xFEED0705, 0xE602FF0C);
	r6 = D(r6, s1_1_0, 0xF2FEF705, 0x03FF01FE, 0xFB02FB01, 0xFCEE0003);
	r7 = D(r7, s1_1_0, 0x09F4FE02, 0xFCE7F00B, 0xFEF3EC12, 0x020A0701);
	r0 = D(r0, s1_1_1, 0xFFFDFE00, 0xF305EE02, 0xF309EF0E, 0xFC05F8F0);
	r1 = D(r1, s1_1_1, 0x0E2902F0, 0x091215EE, 0x0C010F07, 0x090F020A);
	r2 = D(r2, s1_1_1, 0x0BF9EFF5, 0xF40D1DD8, 0xFC181BF6, 0x061F1503);
	r3 = D(r3, s1_1_1, 0xFEF508FC, 0x08EEDF05, 0xEC0ECE02, 0xF5C1D313);
	r4 = D(r4, s1_1_1, 0xFE070508, 0x04FFF517, 0xEF0B0208, 0xE9260B03);
	r5 = D(r5, s1_1_1, 0x09E9FBFB, 0xF41009ED, 0xFA07EC06, 0xF50DE5FE);
	r6 = D(r6, s1_1_1, 0xD6FEFCE8, 0x061007FB, 0x07CDDC0C, 0xF6F6F506);
	r7 = D(r7, s1_1_1, 0x0303FAF0, 0xF9ECF00E, 0xF7F4E40F, 0x0CF0F50D);
	r0 = D(r0, s1_1_2, 0xF511F8FF, 0xEBF2E9F8, 0x11E9F5FD, 0xFE05F0ED);
	r1 = D(r1, s1_1_2, 0x06F7EE00, 0x07F312F1, 0x05FCFB06, 0x01FF0902);
	r2 = D(r2, s1_1_2, 0xED0C1102, 0xFEF4DCFF, 0x07FC0004, 0x0EEAEA05);
	r3 = D(r3, s1_1_2, 0x02050008, 0x011804FE, 0x1009FEF6, 0x080702FA);
	r4 = D(r4, s1_1_2, 0xFD050504, 0xF8030610, 0xFE03FE03, 0x08F5DF15);
	r5 = D(r5, s1_1_2, 0x03F9EA03, 0xE7EECC00, 0x03F5F00D, 0x05F20AE5);
	r6 = D(r6, s1_1_2, 0xF0110BF4, 0x01090204, 0xFF120804, 0x0E16EDF3);
	r7 = D(r7, s1_1_2, 0xFE0A05FA, 0x0909F5F9, 0xF001FD07, 0xFF000605);
	r0 = D(r0, s1_2_0, 0x030518F8, 0xEBEAEE10, 0xF60AF801, 0x02F91DF5);
	r1 = D(r1, s1_2_0, 0x06E911F9, 0x06110EFB, 0xFFFC11F9, 0x00F10D05);
	r2 = D(r2, s1_2_0, 0xFE081506, 0x0B0420EF, 0x021607F6, 0x0B0B0CF5);
	r3 = D(r3, s1_2_0, 0x00F702FE, 0x0A06F903, 0x11E3E4FE, 0xFD00FE08);
	r4 = D(r4, s1_2_0, 0xFD02FFFE, 0x01F2E7FE, 0x01FCFC01, 0x0800FF16);
	r5 = D(r5, s1_2_0, 0x030E05F8, 0xF5FFEAF1, 0x05FCF506, 0x010CF707);
	r6 = D(r6, s1_2_0, 0xE8F90706, 0x010502FD, 0x0705FA03, 0x030FFC0F);
	r7 = D(r7, s1_2_0, 0x04FE0203, 0x011E02FC, 0xF1F01107, 0xFEF90BFA);
	r0 = D(r0, s1_2_1, 0xFB00FB05, 0xD8FAE9FF, 0xF9EBDB0D, 0x0AFA190A);
	r1 = D(r1, s1_2_1, 0xF702F01B, 0xF501F8FD, 0x0EF104F6, 0x0110ED0C);
	r2 = D(r2, s1_2_1, 0xFAEB0205, 0xF80C0BFB, 0xF2F201FD, 0x07F9000B);
	r3 = D(r3, s1_2_1, 0x04010201, 0x0EFAF20C, 0x1909FF0A, 0x10F60D0B);
	r4 = D(r4, s1_2_1, 0xFD0801FE, 0xF204EDF9, 0x010DFDFE, 0xF10E0E29);
	r5 = D(r5, s1_2_1, 0x09F3EDFF, 0x030E0C00, 0xF7FDEA09, 0xF413FDFA);
	r6 = D(r6, s1_2_1, 0xF81000FB, 0x030A04FD, 0x0CF301FA, 0xFAF7FA0E);
	r7 = D(r7, s1_2_1, 0xFFF6F706, 0x00D40405, 0xE6E20003, 0x070008F9);
	r0 = D(r0, s1_2_2, 0xFFFFEB06, 0xF2FCF401, 0x08F1F502, 0xE907050A);
	r1 = D(r1, s1_2_2, 0x09EE0003, 0x07060FF0, 0x0B03F4FE, 0x0305F200);
	r2 = D(r2, s1_2_2, 0x0113150C, 0x11F808E9, 0x06F903FE, 0x03070905);
	r3 = D(r3, s1_2_2, 0x00FE0304, 0xFA020407, 0x08F2D713, 0xFCFFFD08);
	r4 = D(r4, s1_2_2, 0xFAFC00FD, 0xFAF4F700, 0xF00300FE, 0xCDDFE0F4);
	r5 = D(r5, s1_2_2, 0x0300EDFC, 0xE7FEF5F5, 0xEEFBF1FE, 0xFEF402F7);
	r6 = D(r6, s1_2_2, 0xEA00FDFF, 0x010105FA, 0x05FCE100, 0xF0FCEC01);
	r7 = D(r7, s1_2_2, 0x0A09020A, 0x0712FF07, 0xFE02090C, 0x09FBFFFE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF2F40DFC, 0x0404FEFD, 0xFE07F0FC, 0x0D12F6F9);
	r1 = D(r1, s0_0_0, 0xFB0B0502, 0xF61EEE00, 0xFFF20501, 0xF7090C05);
	r2 = D(r2, s0_0_0, 0xFB13FA0B, 0x020AED02, 0xF8F5FB08, 0x11FF0200);
	r3 = D(r3, s0_0_0, 0x04F7FFFF, 0xE4FCFF06, 0x0AF6FCFD, 0x03F61702);
	r4 = D(r4, s0_0_0, 0x08FEF204, 0x02FD04FE, 0xFBFCF802, 0x03F90A17);
	r5 = D(r5, s0_0_0, 0x04FFFDFB, 0x020FFEF9, 0x03FCF302, 0xFA0C0207);
	r6 = D(r6, s0_0_0, 0x03F50208, 0xFEFBF5FD, 0x06FB02FC, 0x02F70404);
	r7 = D(r7, s0_0_0, 0x020100FF, 0x08F905FE, 0xF9FCFF05, 0x03F605FC);
	r0 = D(r0, s0_0_1, 0xEC0404FD, 0x04FA0D00, 0xF900EB06, 0x11F707F8);
	r1 = D(r1, s0_0_1, 0xEB0DFCF6, 0x1DF6FC06, 0xD8FF05FA, 0xCDF90D00);
	r2 = D(r2, s0_0_1, 0x03090E08, 0xF108FDF7, 0x0B01F7FE, 0xEDF80B01);
	r3 = D(r3, s0_0_1, 0x0DF708FF, 0x1CF30B10, 0xFADB080B, 0x13F40E09);
	r4 = D(r4, s0_0_1, 0x00FD0308, 0xF10603FF, 0x0D0AF106, 0xD3011902);
	r5 = D(r5, s0_0_1, 0xFCF9FCF2, 0x1000FD00, 0x02020401, 0x07F6040A);
	r6 = D(r6, s0_0_1, 0x06FDE703, 0x0F04F7FC, 0xFB050603, 0xFD00FBFD);
	r7 = D(r7, s0_0_1, 0x10060100, 0xFB0511FF, 0x0407FBFA, 0x03FD0DFD);
	r0 = D(r0, s0_0_2, 0x1D05FFFF, 0xFEF3FF09, 0xF30BFB03, 0xEEF30104);
	r1 = D(r1, s0_0_2, 0xE8F004FB, 0xF70305FC, 0x0DEDFF05, 0xFFF0100F);
	r2 = D(r2, s0_0_2, 0x0CF0F404, 0xF512FF07, 0x0C05FFFA, 0x0007FA08);
	r3 = D(r3, s0_0_2, 0xFC09FFFB, 0xF819090E, 0xD20AF4FE, 0x02F016FB);
	r4 = D(r4, s0_0_2, 0x01F2FB03, 0x1AFEFD00, 0x02FDF800, 0x14F9F701);
	r5 = D(r5, s0_0_2, 0x180907FC, 0x13E801FC, 0x10050306, 0xF30A080C);
	r6 = D(r6, s0_0_2, 0xFC0BF802, 0xF201FFFE, 0x04FA0DFF, 0xEB10120C);
	r7 = D(r7, s0_0_2, 0x05F900FD, 0xF403FCFA, 0x0EFB04FF, 0x06F90000);
	r0 = D(r0, s0_1_0, 0xF81B06F8, 0xF803FE01, 0xEB0409FD, 0xED040F0B);
	r1 = D(r1, s0_1_0, 0xF9FEDAF2, 0xFFF0050D, 0x08F7FBF6, 0xFEF0F801);
	r2 = D(r2, s0_1_0, 0x02E8FF06, 0x0DE9EA1D, 0xEC0CFF01, 0x0BECF3FE);
	r3 = D(r3, s0_1_0, 0xF60905FA, 0xFF19120E, 0xF913F311, 0x06E1080B);
	r4 = D(r4, s0_1_0, 0x0414F5FB, 0xF203FCE9, 0xF5FC0FFF, 0x19DA23F4);
	r5 = D(r5, s0_1_0, 0xFCF3FFF1, 0xFBFD1401, 0xF8E6F6F3, 0x0AF1100A);
	r6 = D(r6, s0_1_0, 0x06FA0A08, 0x0C01EDFE, 0xF5FBF6F6, 0x13EFF50A);
	r7 = D(r7, s0_1_0, 0x09FDFD0B, 0xFF0D0609, 0x010A020B, 0xFF1AFF0F);
	r0 = D(r0, s0_1_1, 0x26190F0A, 0x06FF070E, 0xF005FC04, 0xEF120F06);
	r1 = D(r1, s0_1_1, 0xFB020604, 0xE71D0C0A, 0x100307FD, 0xE4170C01);
	r2 = D(r2, s0_1_1, 0xFBDE0A0E, 0xF1C22100, 0xB0FDFCFC, 0xD6F31511);
	r3 = D(r3, s0_1_1, 0xF408FDFB, 0xFA01EBF0, 0xF7F1F502, 0xFB05FAFA);
	r4 = D(r4, s0_1_1, 0x050A0B0B, 0x231502FF, 0xED000D0F, 0xBFE21A17);
	r5 = D(r5, s0_1_1, 0x0AB209F8, 0xEDDC15F7, 0xE9020D02, 0xE9F20604);
	r6 = D(r6, s0_1_1, 0xFA03EBFA, 0x0D07EFEE, 0x0AF707EB, 0xF9300C03);
	r7 = D(r7, s0_1_1, 0x2311060A, 0x20D90403, 0x171D1E11, 0x16FF0603);
	r0 = D(r0, s0_1_2, 0x090E1A0B, 0x0AFFF5FC, 0x0BEFF9F8, 0x1002FD0A);
	r1 = D(r1, s0_1_2, 0xFFFDEAEB, 0xFCFC09FA, 0x01F80BFD, 0xFFFBF3FB);
	r2 = D(r2, s0_1_2, 0xDCF5130C, 0x0CD6FF00, 0x0E03FDFB, 0xE6EC02FF);
	r3 = D(r3, s0_1_2, 0xF1FE0202, 0xDD110208, 0xF51B09F5, 0xEF00050E);
	r4 = D(r4, s0_1_2, 0xFDF40002, 0xFBF012FA, 0xF5EFFFFB, 0xEB06F413);
	r5 = D(r5, s0_1_2, 0x2AF2050A, 0x12F5FAFA, 0xFAF3F50C, 0x09E1F307);
	r6 = D(r6, s0_1_2, 0x030CED0A, 0x000D02F4, 0x151C0801, 0xE01CF310);
	r7 = D(r7, s0_1_2, 0xDC020DFC, 0xE6130503, 0xF1020A07, 0xFFF90608);
	r0 = D(r0, s0_2_0, 0xF9FFEB06, 0x06FC060F, 0xF40A1309, 0xF500F608);
	r1 = D(r1, s0_2_0, 0x0702E909, 0x0DF5F000, 0xFBF9FCFC, 0xF506EBEE);
	r2 = D(r2, s0_2_0, 0xF110E40D, 0x110CF016, 0xFC11000B, 0x0615E606);
	r3 = D(r3, s0_2_0, 0xFB000805, 0xFA050E25, 0xE203FE04, 0x05000E07);
	r4 = D(r4, s0_2_0, 0xFA0301F5, 0xF80312F9, 0x0607100D, 0x110815F3);
	r5 = D(r5, s0_2_0, 0x0605E9FB, 0x0C060105, 0x07040705, 0x041905FE);
	r6 = D(r6, s0_2_0, 0x0302F810, 0x00F7FDF4, 0xFAFFF1F8, 0x0FF9070F);
	r7 = D(r7, s0_2_0, 0xFE02F503, 0xFCFD00EF, 0xFD020904, 0xF5F905F5);
	r0 = D(r0, s0_2_1, 0x0DFFF5ED, 0x04F30817, 0x0102F4FF, 0x0303F90E);
	r1 = D(r1, s0_2_1, 0x08070B0F, 0x120B1BF5, 0x02020404, 0x010E0BF4);
	r2 = D(r2, s0_2_1, 0x11080303, 0xF0000607, 0xF2EEFFFC, 0x140BFBFD);
	r3 = D(r3, s0_2_1, 0xF5FE0A0A, 0xF405FB0B, 0x09EBDA0F, 0x0CF70901);
	r4 = D(r4, s0_2_1, 0xF807FEFE, 0x03FDF5FA, 0x06FFFF0E, 0xEDFCF009);
	r5 = D(r5, s0_2_1, 0x0901F7F7, 0x17F7F501, 0x090A0509, 0x1503FD08);
	r6 = D(r6, s0_2_1, 0xF3F7EEF8, 0xFBFFFEFC, 0xFE03F4F2, 0xFE010C04);
	r7 = D(r7, s0_2_1, 0x07FFFEF6, 0xF901F0F2, 0x0EF4F5F7, 0xFFFF04FE);
	r0 = D(r0, s0_2_2, 0x1BFDF5FB, 0xF900FE09, 0xF701F905, 0x0C0CFAFF);
	r1 = D(r1, s0_2_2, 0x08F002F8, 0x00FB0107, 0x031308FA, 0x09F6F402);
	r2 = D(r2, s0_2_2, 0x0C09F301, 0x12FEFD12, 0x0803FF02, 0xFEFB0406);
	r3 = D(r3, s0_2_2, 0xFCFC0205, 0x0AEFFE0E, 0x07FC0401, 0x0AF40802);
	r4 = D(r4, s0_2_2, 0xFA0102FC, 0xF3F10E01, 0xFEFD0AF9, 0xF30809FD);
	r5 = D(r5, s0_2_2, 0x0A09FCFF, 0xED1302F2, 0xF504010D, 0xF605FEFF);
	r6 = D(r6, s0_2_2, 0x0E07F8FC, 0x00060002, 0x11F8FF00, 0xF7F4F510);
	r7 = D(r7, s0_2_2, 0x0406FA00, 0x032AFFFA, 0x07FFFC00, 0x02FD0001);
	r0 = D(r0, s1_0_0, 0xFC02FEF6, 0x0300FFFB, 0xF8090207, 0x0AF2F707);
	r1 = D(r1, s1_0_0, 0x1002E9F5, 0x11F2F9E2, 0x03F907F5, 0x01011703);
	r2 = D(r2, s1_0_0, 0x0107ECF7, 0x0AFF01FD, 0xF60503FB, 0xF9FAFE05);
	r3 = D(r3, s1_0_0, 0x06F9FEF1, 0xF702060A, 0x0203F8ED, 0xFB020D05);
	r4 = D(r4, s1_0_0, 0x03F70000, 0xF9000502, 0xFF070001, 0x09F91AEA);
	r5 = D(r5, s1_0_0, 0x01FF04FB, 0x06F914F1, 0xFD08F103, 0xFD060A03);
	r6 = D(r6, s1_0_0, 0x0606FBFD, 0x01010BFF, 0xFF0AF8FC, 0xFFFDFD01);
	r7 = D(r7, s1_0_0, 0x0602FEFC, 0xF9050603, 0x0AFA00FF, 0x05FB04F8);
	r0 = D(r0, s1_0_1, 0x0B07EF00, 0x0F0806F4, 0x0D0BE8F9, 0x0EFCF4F7);
	r1 = D(r1, s1_0_1, 0x09FDFE0F, 0x00F404F0, 0x03050400, 0x02070804);
	r2 = D(r2, s1_0_1, 0x08080206, 0x29EBEDD8, 0xFF02F413, 0x0701FF06);
	r3 = D(r3, s1_0_1, 0xEC00FB12, 0x0200F3FB, 0xF4071110, 0xF6FAF310);
	r4 = D(r4, s1_0_1, 0x03FF0903, 0xF7FF0407, 0x0101F805, 0xF2F4F924);
	r5 = D(r5, s1_0_1, 0x04FB08FB, 0x05FC0EF7, 0xF90D030F, 0xFF1AF3F1);
	r6 = D(r6, s1_0_1, 0x0001FC10, 0xF9FA0700, 0xFE021402, 0xFFFBF801);
	r7 = D(r7, s1_0_1, 0x03FAF702, 0x09F30CF0, 0x08FB0DFC, 0x13FE0DF1);
	r0 = D(r0, s1_0_2, 0xFAF71FFD, 0xFC020004, 0x0AF6F1FD, 0x0EFF00FF);
	r1 = D(r1, s1_0_2, 0x0C02F1EB, 0xF30D0411, 0x0D020CF8, 0xFEF9090B);
	r2 = D(r2, s1_0_2, 0x0EFFEFF9, 0x0B01FDF4, 0x09FBF1F8, 0x06FC01FD);
	r3 = D(r3, s1_0_2, 0x050000FF, 0xFBFD081A, 0x16000200, 0xF9FEFE04);
	r4 = D(r4, s1_0_2, 0x04FC02FC, 0xFDFD09FD, 0x0301FC02, 0x050105F0);
	r5 = D(r5, s1_0_2, 0x030404F4, 0xF7FFECF0, 0x080100FB, 0xF5030A05);
	r6 = D(r6, s1_0_2, 0x0302FD08, 0xFD0605FC, 0xEFFD130C, 0xFCFA070C);
	r7 = D(r7, s1_0_2, 0x0207FAFC, 0xF7FB0E06, 0xFFFE1302, 0x05FC0BFB);
	r0 = D(r0, s1_1_0, 0xE4050F0E, 0x000A04F5, 0xF804FF07, 0x070FECFE);
	r1 = D(r1, s1_1_0, 0xF6FEFFF4, 0x1B03F9F2, 0xFAF81DED, 0xDDE717DC);
	r2 = D(r2, s1_1_0, 0xFFE9F410, 0xF610ED1F, 0xFCFEFEFF, 0x03F5FCFB);
	r3 = D(r3, s1_1_0, 0x01FBFC08, 0xFD00F80B, 0xFDFF040D, 0x0CEE0301);
	r4 = D(r4, s1_1_0, 0x0109FEFC, 0x0F050601, 0xF4040101, 0x22F0F6E0);
	r5 = D(r5, s1_1_0, 0xFFFE12F8, 0x0803FE01, 0xED0B08F9, 0x00F6EB03);
	r6 = D(r6, s1_1_0, 0x0EF901F4, 0x01030EF8, 0xF8010A03, 0x0109F9F8);
	r7 = D(r7, s1_1_0, 0x0FF609EF, 0x080DFCF7, 0xF803FAFB, 0xFD151104);
	r0 = D(r0, s1_1_1, 0xF40AFFE3, 0xF507FD0D, 0xD900F227, 0x08101302);
	r1 = D(r1, s1_1_1, 0xED19FFFD, 0x0CFA02BB, 0x07FF00E5, 0xD008ECEE);
	r2 = D(r2, s1_1_1, 0x280FF9FE, 0xFA01F906, 0x04F80F09, 0xFE060D05);
	r3 = D(r3, s1_1_1, 0x21F810DD, 0xF00E010B, 0x1BE5ED12, 0x11F6040C);
	r4 = D(r4, s1_1_1, 0xE40C0504, 0x1805FBFC, 0xF6FE131E, 0xD7F9081B);
	r5 = D(r5, s1_1_1, 0xFAF502FE, 0x03E9150E, 0xF7E830FC, 0x0BEC11FE);
	r6 = D(r6, s1_1_1, 0x0205F3FB, 0x03F20BFD, 0x0D08EADE, 0x0B08F5F4);
	r7 = D(r7, s1_1_1, 0xFA07F3F9, 0xF10BF6F4, 0xEE1AF6F8, 0x18160DF7);
	r0 = D(r0, s1_1_2, 0xFAF91C02, 0xFE03EEFC, 0xF411F5FB, 0x06F806F6);
	r1 = D(r1, s1_1_2, 0x0B09FBFA, 0x0604FD0D, 0x060804F2, 0x00050001);
	r2 = D(r2, s1_1_2, 0xF6090DF7, 0x000B0EF0, 0xFCFDFD0B, 0x0409F6FF);
	r3 = D(r3, s1_1_2, 0xF9FA0706, 0x09F91AFF, 0x20F6F800, 0x0FF30A03);
	r4 = D(r4, s1_1_2, 0x0300F9FE, 0x0EFFFFF4, 0xFD04FC05, 0xE619FFFD);
	r5 = D(r5, s1_1_2, 0xEE03100C, 0xF115DCFA, 0xFF02F902, 0x01F9F606);
	r6 = D(r6, s1_1_2, 0x0AFAF806, 0xFA040004, 0x12FA13F1, 0x0DEE0BF1);
	r7 = D(r7, s1_1_2, 0x00FB0FFE, 0xFEFD08FB, 0xEE0B03FD, 0x090305F6);
	r0 = D(r0, s1_2_0, 0xFEFEF0FD, 0xF20BFAFE, 0x13FAFAED, 0x1EF8F203);
	r1 = D(r1, s1_2_0, 0xFF0FF0F9, 0xF2FF0707, 0xFDFDFEF8, 0xBB081B16);
	r2 = D(r2, s1_2_0, 0x08FAFDF9, 0xF71B0B1B, 0x170400F8, 0x06EEFEFB);
	r3 = D(r3, s1_2_0, 0x07030202, 0x210DFAF3, 0x0D1A05FC, 0xEEFE0C05);
	r4 = D(r4, s1_2_0, 0xFE060007, 0x02050202, 0x0EFEFDF1, 0xC5E80E23);
	r5 = D(r5, s1_2_0, 0xE7FEFAFE, 0x0DFF02F2, 0x00F903EF, 0xFCE6FF06);
	r6 = D(r6, s1_2_0, 0x0514F608, 0xF6050002, 0xEBFE05F3, 0x05FC04F9);
	r7 = D(r7, s1_2_0, 0xFFF8FCFE, 0xFDFEFFFC, 0xFD06010D, 0xFE0708F7);
	r0 = D(r0, s1_2_1, 0xEF06EF19, 0x09FCF9F1, 0xEF0BFC05, 0x09030FFC);
	r1 = D(r1, s1_2_1, 0xF9F1F606, 0x1AE2FDF8, 0xFAFF090B, 0xE5E60AE9);
	r2 = D(r2, s1_2_1, 0xE4F2E014, 0x1308040A, 0x12F70902, 0xF0DFEE05);
	r3 = D(r3, s1_2_1, 0x0C0A00FE, 0x0CE4F7FC, 0xFDE5DFFA, 0xDFFDFB0E);
	r4 = D(r4, s1_2_1, 0x09F60AFF, 0xEE0C0315, 0xF4FEFBFC, 0x32EAF9E2);
	r5 = D(r5, s1_2_1, 0xEFF6040E, 0x05F2E9E6, 0xF0FC09FE, 0x07FFF7EA);
	r6 = D(r6, s1_2_1, 0x0900ECF9, 0x04FB00FA, 0xD8EAF8F1, 0x14090802);
	r7 = D(r7, s1_2_1, 0xF3110A15, 0x0114F110, 0xF50D0001, 0xF30203FB);
	r0 = D(r0, s1_2_2, 0x10F50FEF, 0x060EFAFA, 0x1301ECFD, 0xF8FD0A04);
	r1 = D(r1, s1_2_2, 0xE8FDED0D, 0x1BF404EE, 0x02010800, 0xED01F703);
	r2 = D(r2, s1_2_2, 0x07FE06FC, 0x0F09F7F8, 0x01F5FEFA, 0x0FFFFCF6);
	r3 = D(r3, s1_2_2, 0x01FBF9FC, 0x10F412F7, 0xFCEC1302, 0x06041001);
	r4 = D(r4, s1_2_2, 0x0301FDFF, 0xFF0902F9, 0xFB05F4FF, 0xFC0F0501);
	r5 = D(r5, s1_2_2, 0x07FE0902, 0x01050800, 0x05FEF9FE, 0xF1080500);
	r6 = D(r6, s1_2_2, 0x0BFAFFF7, 0x02000006, 0xEAF1050B, 0xF6FDFB09);
	r7 = D(r7, s1_2_2, 0x02FBFF01, 0x00E80D02, 0xE901ED08, 0x0005FF03);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.852e-02, 9.045e-03, 7.648e-04, -1.788e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.279e-02, -4.179e-03, 6.162e-03, -2.835e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.560e-03, -1.091e-02, -6.449e-03, -4.480e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.178e-02, -9.739e-03, -4.622e-04, -1.902e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.858e-03, -2.753e-02, -2.649e-03, -3.992e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(4.542e-03, -1.734e-05, -1.531e-02, -2.779e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.223e-02, -2.289e-02, -1.110e-02, -4.477e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.141e-03, -1.166e-02, -1.527e-02, 1.630e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv7
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0106080F, 0xFF01FEF3, 0xF7FB0401, 0xFF1304F6);
	r1 = D(r1, s0_0_0, 0xF7FA0CF2, 0x0104F702, 0xFE001304, 0x05FE06FB);
	r2 = D(r2, s0_0_0, 0xEEFDF8FC, 0xF7FDF5FA, 0xF2F6FDF8, 0xF6FDE809);
	r3 = D(r3, s0_0_0, 0x0403F900, 0x00FCFEFC, 0x0D06FDEE, 0xF806FEF6);
	r4 = D(r4, s0_0_0, 0x1303FBFB, 0xFC0105FB, 0xF7FCFBF2, 0x00FFFDF9);
	r5 = D(r5, s0_0_0, 0xEE03F5FD, 0xF9000203, 0xF9F4020B, 0x0002FF06);
	r6 = D(r6, s0_0_0, 0xE008EDF6, 0x06FDF1FA, 0x0BFDFC15, 0x06D5FF1D);
	r7 = D(r7, s0_0_0, 0x0FFEFDF2, 0x0CE80FED, 0x2AEAD01C, 0x0007E705);
	r0 = D(r0, s0_0_1, 0xFDFEF5F9, 0x07010112, 0x1809EAFA, 0xD7F1EF04);
	r1 = D(r1, s0_0_1, 0xFD06EDF8, 0x03050103, 0x0101F7F9, 0xFB0100F9);
	r2 = D(r2, s0_0_1, 0x10FDECF7, 0x0205FCFC, 0xF800F5EF, 0x06F00DFD);
	r3 = D(r3, s0_0_1, 0x0502FFFF, 0x03090204, 0xFEFD0615, 0x01FAF0FD);
	r4 = D(r4, s0_0_1, 0x00F4F5FD, 0x04FDFF03, 0xFDFB0E00, 0xFE060601);
	r5 = D(r5, s0_0_1, 0x0004F508, 0x06E908F3, 0xF2FC14FC, 0x05F4F8F3);
	r6 = D(r6, s0_0_1, 0x0EEAF1FA, 0x0802FBF7, 0x14FA1A14, 0x2A1DF60E);
	r7 = D(r7, s0_0_1, 0x020DF0F3, 0xFB06E1F0, 0xD517E8EB, 0x160FFB00);
	r0 = D(r0, s0_0_2, 0xF4030200, 0xFB05F907, 0xFCF202F9, 0xE50E00F0);
	r1 = D(r1, s0_0_2, 0xF2F8060B, 0xFB05FF04, 0xFB050700, 0x020600FE);
	r2 = D(r2, s0_0_2, 0xFCEE01FB, 0xFFFB070C, 0xF8F9FCF8, 0xF00EF0FF);
	r3 = D(r3, s0_0_2, 0xFF05EE02, 0x09FCFEFD, 0x1400F400, 0x12040606);
	r4 = D(r4, s0_0_2, 0x05FF0C0C, 0x01F80103, 0x03EFFE03, 0xFB0306FB);
	r5 = D(r5, s0_0_2, 0x0EFD0AFA, 0xE80006F8, 0x062407FA, 0xFEF810FA);
	r6 = D(r6, s0_0_2, 0xF3A10316, 0xFBFCFFFB, 0x0F02FE0C, 0xAF8C8181);
	r7 = D(r7, s0_0_2, 0x03FC08FD, 0x14F70002, 0x31070FD3, 0x0B18E203);
	r0 = D(r0, s0_1_0, 0xFDF7F103, 0xFAFD09FD, 0x09F70300, 0xF2FB042B);
	r1 = D(r1, s0_1_0, 0xF3F2FAE4, 0xF9000204, 0xFBF7ECFE, 0xF90A03FC);
	r2 = D(r2, s0_1_0, 0x06FA0BF7, 0x05ED0EFD, 0xFEF0FCFA, 0xE1EF033D);
	r3 = D(r3, s0_1_0, 0xFA0C02FC, 0x0A04FC03, 0x14FE0200, 0x111C0903);
	r4 = D(r4, s0_1_0, 0x11FF0C04, 0x020A0D06, 0x0BF605F9, 0xFFFD0800);
	r5 = D(r5, s0_1_0, 0xF3FDFFFF, 0xFB02EEFB, 0xF40CF6FD, 0x00FAF8FB);
	r6 = D(r6, s0_1_0, 0x12FB2FDE, 0x0CEF04FE, 0x080304FC, 0xF2F00808);
	r7 = D(r7, s0_1_0, 0x0BFDFBD6, 0x05FBF902, 0xDD180CC8, 0x090EF906);
	r0 = D(r0, s0_1_1, 0x0FFA120B, 0xE10C0EFC, 0xF5F71611, 0xF5020EF9);
	r1 = D(r1, s0_1_1, 0xB1F5F710, 0x0403F805, 0xFA0DF0F5, 0x0303ED06);
	r2 = D(r2, s0_1_1, 0x10FAFEF3, 0xEE00E902, 0x12EE0DED, 0xF3172AF1);
	r3 = D(r3, s0_1_1, 0x27030DFA, 0xFF0B0AFC, 0xE1030408, 0x1CF41AFE);
	r4 = D(r4, s0_1_1, 0xF401DDF3, 0xF905F511, 0xE101F808, 0xF20C02FD);
	r5 = D(r5, s0_1_1, 0xFCFDFEE4, 0x0207F7F8, 0xF6FC0FEF, 0xFEFBFAF5);
	r6 = D(r6, s0_1_1, 0xF5F70460, 0x15F30F0D, 0xEC0001FF, 0x131BDA29);
	r7 = D(r7, s0_1_1, 0x01FA15E5, 0x0111EAFC, 0x27FBF4B5, 0xFEFAE7F8);
	r0 = D(r0, s0_1_2, 0xFCFE0705, 0xF6F4FEFB, 0xFAFD100D, 0xF613EF04);
	r1 = D(r1, s0_1_2, 0x10F60706, 0x06FD1002, 0xFEF60809, 0xEDFE0602);
	r2 = D(r2, s0_1_2, 0xF707FD06, 0xDFE5EDFB, 0x1304F7F4, 0x1E07FB01);
	r3 = D(r3, s0_1_2, 0x241A030A, 0xFFFAFB01, 0x0A110EFC, 0xEEFFFB1A);
	r4 = D(r4, s0_1_2, 0x0106FF05, 0xEE020506, 0xF3060803, 0xF9050002);
	r5 = D(r5, s0_1_2, 0x0AF8EF03, 0x08F1F00D, 0xF3000911, 0xF906F109);
	r6 = D(r6, s0_1_2, 0xC50DFDFE, 0x0AF902FB, 0x06F2F706, 0xE6032CEA);
	r7 = D(r7, s0_1_2, 0x2D0AE702, 0x1E050A11, 0xE50015FA, 0xF508F304);
	r0 = D(r0, s0_2_0, 0x03FD0306, 0xF8FEF5F6, 0x0C15ECFE, 0x0C11FD05);
	r1 = D(r1, s0_2_0, 0xFB00F602, 0x00FEFC01, 0x06F80B0A, 0x04FB0402);
	r2 = D(r2, s0_2_0, 0x05FB03FA, 0xEEFBF0EE, 0xFBF40AFB, 0x02818181);
	r3 = D(r3, s0_2_0, 0x14010211, 0x01FA01FD, 0x12070304, 0xFCFEED0D);
	r4 = D(r4, s0_2_0, 0xF2FE0B03, 0xFCFFFF00, 0x01F2EF05, 0xFD030101);
	r5 = D(r5, s0_2_0, 0x0902FB04, 0x08FDF903, 0x0B00F808, 0x00FD0300);
	r6 = D(r6, s0_2_0, 0xEAE9FAC6, 0xFCF8FDFA, 0xFFFC0300, 0xFDFA040A);
	r7 = D(r7, s0_2_0, 0xF6020902, 0x09FAE8FA, 0xEBEB1FEB, 0x0101E8F9);
	r0 = D(r0, s0_2_1, 0x0A09F205, 0xF1FE0C0A, 0xFD040903, 0xEAFFF4FC);
	r1 = D(r1, s0_2_1, 0x101303ED, 0x09040202, 0x1BFB03F9, 0x06FB0305);
	r2 = D(r2, s0_2_1, 0xF302FBF6, 0x0BFE01FA, 0xF4FD05FA, 0xF0FF171D);
	r3 = D(r3, s0_2_1, 0x0BFFFEFA, 0x0C040308, 0xF0081006, 0x2DE205FD);
	r4 = D(r4, s0_2_1, 0xFCF6FBF0, 0x05FE03F9, 0x01F20FFD, 0x0505FE07);
	r5 = D(r5, s0_2_1, 0x05FBF9FF, 0x00FF0206, 0x0A13FA0D, 0x0CF70502);
	r6 = D(r6, s0_2_1, 0xFD180751, 0xF206F909, 0x0CF506FB, 0xE5FEFAF6);
	r7 = D(r7, s0_2_1, 0xEBFD0208, 0x022AFAE9, 0x3210FB17, 0xEC10FD05);
	r0 = D(r0, s0_2_2, 0x1104FDFE, 0xE6FCF604, 0x160FECFD, 0x1B150006);
	r1 = D(r1, s0_2_2, 0x02F4FD08, 0x04FEFF02, 0x1908FDFB, 0x00000506);
	r2 = D(r2, s0_2_2, 0x020402FB, 0x06FC0202, 0xF7FE06FA, 0xEAFC03F4);
	r3 = D(r3, s0_2_2, 0xF7FBF801, 0xFFF700FE, 0xEA08FFFA, 0x15F80BF8);
	r4 = D(r4, s0_2_2, 0x12050604, 0x030501FF, 0xF5F40A04, 0x060400FD);
	r5 = D(r5, s0_2_2, 0x1C0400F6, 0x2FFB02F8, 0x0EF70404, 0x10F802FA);
	r6 = D(r6, s0_2_2, 0x210BDE07, 0x06FAFB01, 0x0B0004FB, 0x15050B03);
	r7 = D(r7, s0_2_2, 0xF3F60600, 0x02F30B12, 0x0FED0A09, 0xF604E7FC);
	r0 = D(r0, s1_0_0, 0xF9030900, 0x0EF9EBFC, 0x05010605, 0x18E50C0D);
	r1 = D(r1, s1_0_0, 0xFF000803, 0x02FFF802, 0xFAFA07F7, 0xFF02FF07);
	r2 = D(r2, s1_0_0, 0xFF0110F4, 0x010105F1, 0xFDF70507, 0x02F7F6FF);
	r3 = D(r3, s1_0_0, 0xFAFFFA0C, 0xFD01FB09, 0x04FEFCFE, 0x0100FF0D);
	r4 = D(r4, s1_0_0, 0x0204FAFC, 0xFE010002, 0x0BFBFA01, 0x0003F403);
	r5 = D(r5, s1_0_0, 0x0104120F, 0xF202F7FF, 0x0105FB14, 0xFB070003);
	r6 = D(r6, s1_0_0, 0x18F00DE1, 0xF907FFF9, 0xE6FBE600, 0x12091A0B);
	r7 = D(r7, s1_0_0, 0xFFFDEF06, 0xF40E08F2, 0x9024972D, 0x0A05F610);
	r0 = D(r0, s1_0_1, 0xF6030B05, 0xF703F50E, 0x0CF8F506, 0xDE0D0D13);
	r1 = D(r1, s1_0_1, 0x1103F9EC, 0x02FAFAFA, 0xFA020F06, 0x01FF0002);
	r2 = D(r2, s1_0_1, 0xF804F3F7, 0xF502EEFE, 0x00F20000, 0x0100F409);
	r3 = D(r3, s1_0_1, 0xFD01F700, 0xFB06FB0A, 0xFE010706, 0xF60B0508);
	r4 = D(r4, s1_0_1, 0x07FAFDF1, 0xF9020001, 0xFAFF08FF, 0xF8FF0604);
	r5 = D(r5, s1_0_1, 0x070811FF, 0xFC02FDF2, 0x080B0F0B, 0xFEFAF401);
	r6 = D(r6, s1_0_1, 0xFEE5E3CB, 0x030305F4, 0xDAF505EE, 0x29D9E7DE);
	r7 = D(r7, s1_0_1, 0x060104FE, 0x1CF1E3DC, 0x8113892F, 0xFEFB0002);
	r0 = D(r0, s1_0_2, 0x00020203, 0x03FD03F9, 0x0DF20405, 0xFEF9ECF8);
	r1 = D(r1, s1_0_2, 0xFBFC05FE, 0x07FB0503, 0xF805FC02, 0xFEFD0803);
	r2 = D(r2, s1_0_2, 0xFB020102, 0x06060AFC, 0x0700FBFB, 0xFD0102FF);
	r3 = D(r3, s1_0_2, 0xF8FAF8FE, 0xFF020003, 0xFE03FA03, 0xFB0B1002);
	r4 = D(r4, s1_0_2, 0x09030204, 0xFF05FD05, 0xFB060200, 0xFB010400);
	r5 = D(r5, s1_0_2, 0x01070902, 0xFCF21506, 0xF7020108, 0xF7FF0904);
	r6 = D(r6, s1_0_2, 0x18F115F4, 0xFEFD02F9, 0xFDFE07FA, 0xFB812AD0);
	r7 = D(r7, s1_0_2, 0xF909FCF9, 0x0600F900, 0x03FD30D5, 0xF2FCFE0C);
	r0 = D(r0, s1_1_0, 0x04F90BF1, 0xFD04DF03, 0xFCF5DBF7, 0x0AFDF1F9);
	r1 = D(r1, s1_1_0, 0x060CE605, 0xFDFDEE0A, 0x04021EEA, 0xFF040F02);
	r2 = D(r2, s1_1_0, 0xFEEEFB08, 0x04E80B01, 0xFBF4FF0C, 0x04DEC6DC);
	r3 = D(r3, s1_1_0, 0x0205FA07, 0x03FEF704, 0x06FDFAEE, 0xF3F80DEB);
	r4 = D(r4, s1_1_0, 0x05FEF0FF, 0xFFFE07FE, 0x0CEBFEF1, 0x02FD07F8);
	r5 = D(r5, s1_1_0, 0x02FB1601, 0x00F9FEF0, 0x03F601FD, 0x00010801);
	r6 = D(r6, s1_1_0, 0xF1EC1709, 0xF6F7E9F4, 0xF40112FC, 0x0EFBFD0B);
	r7 = D(r7, s1_1_0, 0x03FB25FB, 0x010BFBFE, 0x301B1AFF, 0xFAF4E5FA);
	r0 = D(r0, s1_1_1, 0xE3FFDE02, 0x0C12F6FD, 0xD4FF16F6, 0x2213DEF7);
	r1 = D(r1, s1_1_1, 0xF2DDD2ED, 0xFA0900F6, 0xEBD8F8F7, 0x08EEFC06);
	r2 = D(r2, s1_1_1, 0x01F019FB, 0x08F221F7, 0x0AF21008, 0xF0054DFA);
	r3 = D(r3, s1_1_1, 0xFE05FD05, 0x00FB0B07, 0x04120406, 0x1810E1DA);
	r4 = D(r4, s1_1_1, 0x09EB16FE, 0xEFFF0CFD, 0xFB01F9F5, 0xFAFB060C);
	r5 = D(r5, s1_1_1, 0x0CE81A07, 0x01CB1FDF, 0x02FCD309, 0xF9EE1FFC);
	r6 = D(r6, s1_1_1, 0x0A02121C, 0x0BFA1AF6, 0xF3FB0D00, 0xEFD632F8);
	r7 = D(r7, s1_1_1, 0x17202202, 0x08EBA4EA, 0xB3FE2BE2, 0x0D03DE08);
	r0 = D(r0, s1_1_2, 0x01FE0600, 0xF30F0B08, 0xF712FB0A, 0xFAF9FD07);
	r1 = D(r1, s1_1_2, 0x11FE09F9, 0x06FEFDF8, 0xFD06FB06, 0xFAFAFC04);
	r2 = D(r2, s1_1_2, 0xF5040FF8, 0xFB07EC04, 0xFE000AFB, 0x000401F3);
	r3 = D(r3, s1_1_2, 0xFE060EFF, 0xFD0EFD01, 0xFD05040C, 0x0EEAE9FE);
	r4 = D(r4, s1_1_2, 0x02F608FA, 0xF602FE04, 0xFCFB03ED, 0xFB01F804);
	r5 = D(r5, s1_1_2, 0x0C07F504, 0x1CDEF9FD, 0x0FF903FA, 0x06E4F300);
	r6 = D(r6, s1_1_2, 0x16BA811B, 0x05FB0DFE, 0xF106FAF5, 0xEE10D7FD);
	r7 = D(r7, s1_1_2, 0xFD090402, 0x121617F3, 0x31DAF7D5, 0x0301FD0C);
	r0 = D(r0, s1_2_0, 0x03FAEA0B, 0xFF020EFB, 0x01070EE8, 0xFBECFFFF);
	r1 = D(r1, s1_2_0, 0x0BFEF4FF, 0xFFFDF8FC, 0xFD00EB09, 0x04030203);
	r2 = D(r2, s1_2_0, 0xFF07F502, 0xFFFD0A03, 0xF7FBFA0A, 0x9E818192);
	r3 = D(r3, s1_2_0, 0x0205C40C, 0x06040005, 0xF004FB05, 0xFB09F008);
	r4 = D(r4, s1_2_0, 0x030F0D01, 0xFA020901, 0xF609FCF6, 0x0004FD00);
	r5 = D(r5, s1_2_0, 0xFF03F700, 0xFDFF0B00, 0xFD02F509, 0x01070902);
	r6 = D(r6, s1_2_0, 0xFDE50EF2, 0xFC02FFFA, 0x0403FDFC, 0x0705070F);
	r7 = D(r7, s1_2_0, 0xF80BFD04, 0x1504FF0E, 0x1CE8E402, 0x03FEEF13);
	r0 = D(r0, s1_2_1, 0xEFE71C03, 0x140BDA01, 0xACEF01F7, 0x0AF7D408);
	r1 = D(r1, s1_2_1, 0xEFED08E9, 0xFEF20800, 0xFEFA0906, 0x01020703);
	r2 = D(r2, s1_2_1, 0xEF031F00, 0xF9F81DFC, 0xFEFCFDFF, 0x24C9D005);
	r3 = D(r3, s1_2_1, 0x050DFBFE, 0x0000FDFB, 0x04121E08, 0x0506F404);
	r4 = D(r4, s1_2_1, 0xFD09EF00, 0xF1FB0801, 0xDF06FCFD, 0x0406F6FF);
	r5 = D(r5, s1_2_1, 0x07FF12F7, 0x02F1E70C, 0x05ED03FA, 0x0103EBFE);
	r6 = D(r6, s1_2_1, 0x26FEA318, 0x01FDF7FC, 0x1104FBFE, 0xF002FB0E);
	r7 = D(r7, s1_2_1, 0x08FE19FE, 0xDEB9E6E1, 0xD9E601DD, 0xFBFA1502);
	r0 = D(r0, s1_2_2, 0xF7F1FFF9, 0x0C02E807, 0xD0FB04EE, 0x06FBFD0A);
	r1 = D(r1, s1_2_2, 0xFF0905FD, 0xFBFE0500, 0xEF0209FC, 0xFE06FF08);
	r2 = D(r2, s1_2_2, 0xEAF50DFA, 0xF4030DFA, 0xF9F902FF, 0x0EF5EAE7);
	r3 = D(r3, s1_2_2, 0x0CFBF803, 0xFCFFF201, 0xFCFBFC03, 0xF40303FB);
	r4 = D(r4, s1_2_2, 0xFB030603, 0xF2FEFDFE, 0x0106F7FF, 0xF8FD0003);
	r5 = D(r5, s1_2_2, 0xFF120D00, 0xE1EA09FA, 0xFF05FD11, 0xF60A0301);
	r6 = D(r6, s1_2_2, 0xC491C1BF, 0x04FCF7FA, 0x0B0902F9, 0x000D0FF0);
	r7 = D(r7, s1_2_2, 0x0A060602, 0x0817D7F3, 0xF3160D01, 0x02FAF303);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x010700FD, 0xF9FF00F5, 0xFC01F2F7, 0x0D0EF8E7);
	r1 = D(r1, s0_0_0, 0xFD02F7FF, 0xFBFFFBFB, 0x03090AFE, 0xFDFE010A);
	r2 = D(r2, s0_0_0, 0x0DFC0603, 0x07FC09FB, 0x0EFE050A, 0x130D0115);
	r3 = D(r3, s0_0_0, 0x0AF8FBFE, 0x0202FD01, 0x030707FB, 0x02FF0308);
	r4 = D(r4, s0_0_0, 0x06F80AF4, 0x02020301, 0xFD020007, 0x02FC0404);
	r5 = D(r5, s0_0_0, 0x09000203, 0x080EFD03, 0xF707020A, 0x060503FE);
	r6 = D(r6, s0_0_0, 0x23E2E610, 0x0201FB02, 0x13FB05EA, 0xF70301E0);
	r7 = D(r7, s0_0_0, 0xFF030EFD, 0x000809E3, 0x38F7CBC7, 0x07FA0104);
	r0 = D(r0, s0_0_1, 0x010CF40E, 0xEF0D0507, 0xFDFFEAF4, 0x071410FD);
	r1 = D(r1, s0_0_1, 0xEAE0EDEF, 0xFA00FEFF, 0x08050506, 0xF70703FF);
	r2 = D(r2, s0_0_1, 0xF8F202FB, 0xFDF6FCF5, 0xFCFEFEFC, 0xFD09E205);
	r3 = D(r3, s0_0_1, 0xFEFFF3FB, 0xF5F7F50A, 0x09000D06, 0x0B0409FB);
	r4 = D(r4, s0_0_1, 0xFAFFFFF0, 0xFCFA0303, 0xEE0A0E05, 0xFC060CFC);
	r5 = D(r5, s0_0_1, 0x1C07000C, 0x110BF708, 0x09FDFF12, 0x14F6FCFE);
	r6 = D(r6, s0_0_1, 0xFDE003D4, 0x050EFF07, 0xDAEF13E3, 0xF0DD08F0);
	r7 = D(r7, s0_0_1, 0x05FF0DFA, 0xFF0BD7F8, 0xB1E7C243, 0x09060206);
	r0 = D(r0, s0_0_2, 0x0A02FD00, 0x0AFBF9FD, 0x0D0CF9FC, 0x0523EDFC);
	r1 = D(r1, s0_0_2, 0xF2040C09, 0xFD0802FC, 0xFEFAFD03, 0xF903FDF9);
	r2 = D(r2, s0_0_2, 0x070906FA, 0xFF090D04, 0x0BEEF0FF, 0x0D09F9F6);
	r3 = D(r3, s0_0_2, 0x08FEFBFC, 0x0BFFF2FE, 0x03FA01FD, 0xFB040B03);
	r4 = D(r4, s0_0_2, 0xFBFC11FD, 0x02040502, 0xFD03FBFA, 0xFD070801);
	r5 = D(r5, s0_0_2, 0xFF0A130A, 0xF40C0B10, 0xFAE40102, 0xEB090A08);
	r6 = D(r6, s0_0_2, 0xF9120AF7, 0x08F1FCFB, 0xFCE40600, 0x8181EAA1);
	r7 = D(r7, s0_0_2, 0x02001204, 0x01F9FFFD, 0xB8CEFCD9, 0x04F6FB00);
	r0 = D(r0, s0_1_0, 0x08090AF1, 0xF302EA02, 0x12080EFF, 0xF808F610);
	r1 = D(r1, s0_1_0, 0x060C02F2, 0xEF01FCFD, 0x0F0802F4, 0x0305FF00);
	r2 = D(r2, s0_1_0, 0x03000003, 0x0CFF00EF, 0xF40C090D, 0x22EA29E4);
	r3 = D(r3, s0_1_0, 0xF700DF11, 0xF708FE08, 0xE6F9ECE7, 0xF5F6F10A);
	r4 = D(r4, s0_1_0, 0xFF09F108, 0x0BFF01F9, 0xECF8E7F7, 0xFB04F7FD);
	r5 = D(r5, s0_1_0, 0x0CFD00FF, 0x08F6F801, 0xFCF5F4F3, 0x0A0201FE);
	r6 = D(r6, s0_1_0, 0x08051102, 0xF504FA10, 0xE401E90D, 0x00FF0301);
	r7 = D(r7, s0_1_0, 0xFF06FC05, 0x030703DB, 0xF70ADF1D, 0xFFF5EB08);
	r0 = D(r0, s0_1_1, 0x0EE102F6, 0xF412FB03, 0x09FE2CFE, 0xF7FB13FE);
	r1 = D(r1, s0_1_1, 0xF2E1E4DE, 0xFEF0F801, 0x02C8F6E5, 0xEB0002FB);
	r2 = D(r2, s0_1_1, 0x1BFF0DE8, 0x12F916E2, 0x23FAFD09, 0xC6044100);
	r3 = D(r3, s0_1_1, 0x01DEF303, 0xFE0A0402, 0xEC07FA0B, 0xE002CEE9);
	r4 = D(r4, s0_1_1, 0xFF331ED9, 0xFAFB0CFC, 0xD0E6DC00, 0xEC0307FD);
	r5 = D(r5, s0_1_1, 0x2C01E90E, 0xECE2F11B, 0xDF06D72C, 0xF3FBF5FE);
	r6 = D(r6, s0_1_1, 0x10010825, 0x0D2AFE03, 0xFE0CE311, 0x40E20A17);
	r7 = D(r7, s0_1_1, 0xFFF3F8FF, 0xE0E4E4F8, 0x1FBBA62E, 0x0E15EC0A);
	r0 = D(r0, s0_1_2, 0xFB050800, 0x09F7DB06, 0xE7E4130E, 0x1BFAE9FB);
	r1 = D(r1, s0_1_2, 0xF4101AFE, 0xF9270909, 0xED071701, 0xF71304FA);
	r2 = D(r2, s0_1_2, 0xE9F20CFF, 0x25E7EFFB, 0x04FD0602, 0x05EF02FD);
	r3 = D(r3, s0_1_2, 0xFDFA09F6, 0x07FBEC08, 0xF1EF0C04, 0xF013F6F7);
	r4 = D(r4, s0_1_2, 0xFA1A19FB, 0xFDF30004, 0xEEFFF5FE, 0x05F7F0FB);
	r5 = D(r5, s0_1_2, 0x1003F208, 0x0D03FC04, 0x09FFEC06, 0x080102F4);
	r6 = D(r6, s0_1_2, 0x0DDD09C1, 0x06FAFFFF, 0x140DEBFC, 0x02F7F8C9);
	r7 = D(r7, s0_1_2, 0x05E9FBEA, 0xF4082309, 0x054CEAFF, 0x000B08F8);
	r0 = D(r0, s0_2_0, 0x0C030301, 0xFA02F903, 0x0804FDE1, 0x19F3F5EF);
	r1 = D(r1, s0_2_0, 0x05FFFA06, 0xFDFFFEFE, 0x02020503, 0x00030205);
	r2 = D(r2, s0_2_0, 0x090308FB, 0x08FE0CEF, 0x09FF08FD, 0x819AB981);
	r3 = D(r3, s0_2_0, 0x0BFFFB0A, 0xFE040308, 0xFC02FFF8, 0x0804FE09);
	r4 = D(r4, s0_2_0, 0x020002F8, 0xFE00FC08, 0xF90D12FD, 0xFFFF01FE);
	r5 = D(r5, s0_2_0, 0x09FE08FD, 0x0000F604, 0x05FA0AFF, 0xFB030403);
	r6 = D(r6, s0_2_0, 0xE904F615, 0xFFFC0401, 0x0D0805F7, 0xFA030404);
	r7 = D(r7, s0_2_0, 0x0AFC05FF, 0x070512FB, 0x14031706, 0x0AF8F9F8);
	r0 = D(r0, s0_2_1, 0x0BFB09F1, 0x02FDFDF5, 0xD0ECFFBE, 0xFCF60803);
	r1 = D(r1, s0_2_1, 0xF5F7E4FA, 0x0000FAFF, 0x120909F7, 0x0703FD02);
	r2 = D(r2, s0_2_1, 0xFBF20106, 0x14EDEF01, 0x10F80501, 0x1B290B09);
	r3 = D(r3, s0_2_1, 0xF2FC04FE, 0x0EF501FF, 0xF30E0402, 0xFE1DFFE9);
	r4 = D(r4, s0_2_1, 0x07FDFA01, 0xFC01FC08, 0xE7FDF608, 0xFC020302);
	r5 = D(r5, s0_2_1, 0x00050CF9, 0x0B050DF9, 0xF90003FE, 0x07FD07FE);
	r6 = D(r6, s0_2_1, 0x1C0BD00A, 0x13F0E40A, 0x000515F7, 0xF9E9F901);
	r7 = D(r7, s0_2_1, 0xFCFD1806, 0x03E6B202, 0x1DF9F7E6, 0xF9EAEC04);
	r0 = D(r0, s0_2_2, 0xFCF30AFF, 0x00F9F9F6, 0xF2E106D1, 0x04E9ED06);
	r1 = D(r1, s0_2_2, 0x05080CFB, 0x0510FC03, 0xFDEF1400, 0x01030001);
	r2 = D(r2, s0_2_2, 0x08040106, 0x0A150BF4, 0x0BF80308, 0xF705F70D);
	r3 = D(r3, s0_2_2, 0xFEFDF502, 0x03090A05, 0xFEEAF107, 0xF41F0605);
	r4 = D(r4, s0_2_2, 0xFFFCFE02, 0xFCFF0208, 0x1200FA06, 0xFBF8FC03);
	r5 = D(r5, s0_2_2, 0x02EEFB05, 0x09F50905, 0xF7FC0611, 0x08F70C03);
	r6 = D(r6, s0_2_2, 0xC5FBB4F7, 0x0800F5F9, 0x03FE08FA, 0xFA0805FA);
	r7 = D(r7, s0_2_2, 0x08F5FD04, 0x0DFB080B, 0xF8DA1A15, 0x01F1F0F7);
	r0 = D(r0, s1_0_0, 0x00FE0600, 0x0403FB06, 0xF61005F4, 0x00F40302);
	r1 = D(r1, s1_0_0, 0x04FB0006, 0x000200FF, 0x020201F8, 0x01020004);
	r2 = D(r2, s1_0_0, 0x030106FC, 0x05FEFEFE, 0x02080BEE, 0x00E909E9);
	r3 = D(r3, s1_0_0, 0x0AFD05FF, 0x04000100, 0x0A05FCFB, 0x05FE0902);
	r4 = D(r4, s1_0_0, 0x000CFC02, 0x02000003, 0xFA03FF02, 0x01070006);
	r5 = D(r5, s1_0_0, 0xF4F604FC, 0x05FEFDFE, 0xF9F6FA04, 0x01FAFFF6);
	r6 = D(r6, s1_0_0, 0x163EEA12, 0xFB0204F0, 0x0D07ECEB, 0xFF1609EA);
	r7 = D(r7, s1_0_0, 0x0B07FB07, 0x0704FAF6, 0x3422D30A, 0xFFFF0503);
	r0 = D(r0, s1_0_1, 0xFFFE0FF3, 0xFDFF0002, 0xFBFB0AFE, 0x19FEF2E1);
	r1 = D(r1, s1_0_1, 0xFA041AF6, 0xF90108F9, 0x03FA08F7, 0x05020909);
	r2 = D(r2, s1_0_1, 0xFBFF07FF, 0x05F70506, 0x02FB0DF6, 0x000009F3);
	r3 = D(r3, s1_0_1, 0xFF020C06, 0xF6F9F401, 0xFE07FF04, 0xFD00EAF3);
	r4 = D(r4, s1_0_1, 0x04F9FFFE, 0x02FDFDFB, 0x04F9F406, 0x0201FA0C);
	r5 = D(r5, s1_0_1, 0xFEFD11EB, 0x10040EEC, 0xF805FF0C, 0x0BFC03FA);
	r6 = D(r6, s1_0_1, 0xE7380BB3, 0x05FCFDFA, 0xF2F6F1F7, 0xEC13250B);
	r7 = D(r7, s1_0_1, 0x00F6FB06, 0x010625ED, 0x8116F6EE, 0x0BFEF60A);
	r0 = D(r0, s1_0_2, 0xF901FFF7, 0x00F2FC04, 0xFA0B04F8, 0xFE041404);
	r1 = D(r1, s1_0_2, 0x0CFFF6F2, 0x0002FFF8, 0xFF030002, 0xFBFF0103);
	r2 = D(r2, s1_0_2, 0xFC030300, 0x000505FD, 0x010104FB, 0xFDFD02F6);
	r3 = D(r3, s1_0_2, 0x07F80404, 0x04FEF9F5, 0x04FC0702, 0x11FFF906);
	r4 = D(r4, s1_0_2, 0x010601FF, 0x020400FC, 0x01FF07F8, 0x00FDFCFF);
	r5 = D(r5, s1_0_2, 0x0709F302, 0x1002ECF4, 0x02FDF80A, 0x0601F6FC);
	r6 = D(r6, s1_0_2, 0x09B60216, 0x01F904FB, 0xFFF504FE, 0x81D88181);
	r7 = D(r7, s1_0_2, 0x0900FAFE, 0x051001FE, 0xD63C9E31, 0x06EFFF07);
	r0 = D(r0, s1_1_0, 0xF60305EE, 0xF102FC0E, 0x13F80701, 0x1409FC05);
	r1 = D(r1, s1_1_0, 0xF3F4F1F1, 0x01FCFEFD, 0x080B0FEC, 0x01FC05FD);
	r2 = D(r2, s1_1_0, 0x01060CFA, 0xFFFF0007, 0x04010BF0, 0xFCFC0D24);
	r3 = D(r3, s1_1_0, 0xF6FC18FE, 0xFD03FE01, 0xF60B0C0C, 0x12071C05);
	r4 = D(r4, s1_1_0, 0xF7FFF914, 0x060205FE, 0xFB0FF71E, 0x04080019);
	r5 = D(r5, s1_1_0, 0xF8FB060F, 0x12F304FE, 0x0A0C060B, 0x04FA06F5);
	r6 = D(r6, s1_1_0, 0x22EC041D, 0x0708FF06, 0x060601F2, 0x0909FCF7);
	r7 = D(r7, s1_1_0, 0x010A0421, 0xFCEAF1F4, 0x16080ECF, 0x010A0313);
	r0 = D(r0, s1_1_1, 0x1BF90A1C, 0xFD08FB09, 0xFDFA0525, 0xEC09FF28);
	r1 = D(r1, s1_1_1, 0xCE08EA02, 0x08F60216, 0xDFFA0836, 0xF3FCF804);
	r2 = D(r2, s1_1_1, 0xFBFBF107, 0xF4F9E704, 0x22F31813, 0x33FBE308);
	r3 = D(r3, s1_1_1, 0x17020DF4, 0x04F8FB13, 0xD808FCFE, 0x0203F902);
	r4 = D(r4, s1_1_1, 0xC409D3FC, 0xE5FCFDF0, 0xFF110306, 0xEF010623);
	r5 = D(r5, s1_1_1, 0xFAFC24F0, 0x20050807, 0x100A090C, 0x17060906);
	r6 = D(r6, s1_1_1, 0x8537D515, 0x1AFCF9F0, 0x0D02FEFE, 0xCCF2213F);
	r7 = D(r7, s1_1_1, 0xFD0501F0, 0x21F90813, 0xC0F8E945, 0x0AEAFB05);
	r0 = D(r0, s1_1_2, 0x09FB04F8, 0x0200F6F8, 0xFE08FF0C, 0x0A0DEEFA);
	r1 = D(r1, s1_1_2, 0x0CFB0712, 0x04F70403, 0x0AF008FF, 0x09FC0117);
	r2 = D(r2, s1_1_2, 0x06F30500, 0x00F50EF7, 0x00020801, 0xF1040502);
	r3 = D(r3, s1_1_2, 0x05FEFD0C, 0xFE00F801, 0xF3010202, 0x00E117FD);
	r4 = D(r4, s1_1_2, 0xFCF20004, 0xF9F90701, 0x02ECF6FD, 0x00FA0705);
	r5 = D(r5, s1_1_2, 0xEC020DF9, 0x47EEFD12, 0x04080C0C, 0x08F20819);
	r6 = D(r6, s1_1_2, 0x0BDAF516, 0x0A03FCFF, 0x010C00F7, 0xFDF8210C);
	r7 = D(r7, s1_1_2, 0xF1F30AFF, 0x140BDD08, 0x02F61305, 0x01FEFF03);
	r0 = D(r0, s1_2_0, 0x04FC06F9, 0xFBFB000C, 0xE81C0BF1, 0xFAF40804);
	r1 = D(r1, s1_2_0, 0xFEFBF400, 0x0103FEF5, 0x03FB02FF, 0xFBFF0300);
	r2 = D(r2, s1_2_0, 0x00FC05F6, 0x070509E6, 0x01FE04FA, 0x81818181);
	r3 = D(r3, s1_2_0, 0xF2F4FBFD, 0xFF0300FC, 0x06FFFCFD, 0xFCFEE8FE);
	r4 = D(r4, s1_2_0, 0x0705FEF7, 0x0B05FBEE, 0xF901F5F3, 0x070500F9);
	r5 = D(r5, s1_2_0, 0xFF04FB0A, 0x0AFFFB01, 0x07FEFA01, 0xFC010600);
	r6 = D(r6, s1_2_0, 0xFF0B06DE, 0x130310F0, 0xFFFC0101, 0x070700F0);
	r7 = D(r7, s1_2_0, 0xF8FB030F, 0x0BFFFDFC, 0x1F19F203, 0x080C0602);
	r0 = D(r0, s1_2_1, 0xF209FF21, 0xEB0306F7, 0xC1FEFD19, 0x02F8F702);
	r1 = D(r1, s1_2_1, 0x03F60BF6, 0xFD0303F8, 0xF6110309, 0x030202ED);
	r2 = D(r2, s1_2_1, 0x0CFD08F3, 0xF9F5EF17, 0x13020CFA, 0x21071634);
	r3 = D(r3, s1_2_1, 0x05051AF3, 0xFAFAFA0E, 0xED020401, 0xCA06DED9);
	r4 = D(r4, s1_2_1, 0x0D00F6F4, 0xF2FAFC11, 0xF8EF05FB, 0xFBFCF907);
	r5 = D(r5, s1_2_1, 0x0B00FD1A, 0x04090806, 0xF0FC0014, 0x000105F5);
	r6 = D(r6, s1_2_1, 0xFC19FE2D, 0x0D08020E, 0xF700FF01, 0x0AF504F2);
	r7 = D(r7, s1_2_1, 0xF0F902FD, 0x1301090D, 0x17EC18F9, 0x06040CEC);
	r0 = D(r0, s1_2_2, 0x08FE010B, 0x01F707FC, 0x00DD1504, 0xFD01FE0C);
	r1 = D(r1, s1_2_2, 0x0212FDFA, 0xFE0205FC, 0x00F9FA08, 0xFA0100FF);
	r2 = D(r2, s1_2_2, 0x08FAFF01, 0xF50006F6, 0xFF0A0CF5, 0xF7FE05F7);
	r3 = D(r3, s1_2_2, 0x08020502, 0x0306FBFD, 0xFAFE0300, 0x0B07FB0C);
	r4 = D(r4, s1_2_2, 0x09FD00FD, 0x04FF0003, 0x000F0101, 0xFD0004FB);
	r5 = D(r5, s1_2_2, 0xF003F005, 0x12F9EC14, 0xFBF9F008, 0xFCF9FD08);
	r6 = D(r6, s1_2_2, 0xEDD3F704, 0x04FC05FD, 0xFE05FFFD, 0x0E1F02E7);
	r7 = D(r7, s1_2_2, 0xF7FFF301, 0x0806F5FC, 0xF913EE12, 0xFFF50103);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0BFCFE01, 0xFD030105, 0x1003000A, 0xE9E91007);
	r1 = D(r1, s0_0_0, 0xFA0D0909, 0xFF03F900, 0x0FED0AFD, 0xF805FD01);
	r2 = D(r2, s0_0_0, 0xFA010402, 0x030A0B05, 0xFEFF000B, 0x14F000FC);
	r3 = D(r3, s0_0_0, 0xF8FBFF01, 0x0700FF07, 0xF8EB0604, 0xF9E80304);
	r4 = D(r4, s0_0_0, 0xF10400F7, 0x01FE04FF, 0xFDF60A02, 0xFD0102F9);
	r5 = D(r5, s0_0_0, 0x02F8FC01, 0x01FBF7FB, 0x04FEF802, 0x0804F801);
	r6 = D(r6, s0_0_0, 0xD8F90E1B, 0x08F3FDFF, 0x1AF001FD, 0x14170E09);
	r7 = D(r7, s0_0_0, 0xF7E906EF, 0x0A090208, 0x5A8DFACA, 0xF7E7F5FC);
	r0 = D(r0, s0_0_1, 0x03F00803, 0xFBF305FE, 0x09040D0D, 0x1CFB1409);
	r1 = D(r1, s0_0_1, 0x09F718FF, 0x0400FAF9, 0xF713F906, 0x000A04FF);
	r2 = D(r2, s0_0_1, 0x0BF812FC, 0x07F70800, 0x06FD0518, 0x13E9FE07);
	r3 = D(r3, s0_0_1, 0xF7F9FD08, 0x07FD0404, 0x0EFBFA07, 0x050C0D04);
	r4 = D(r4, s0_0_1, 0x0906040B, 0x000303FE, 0x0EF8F7FA, 0x040BF2F8);
	r5 = D(r5, s0_0_1, 0xD8070309, 0xF4F7FDF2, 0xCA16E7F7, 0xF6050100);
	r6 = D(r6, s0_0_1, 0x32FD02F5, 0x05F6F70C, 0xE9FEBF0D, 0xFFF305F1);
	r7 = D(r7, s0_0_1, 0xF613FB05, 0xFDFB0413, 0x12A7A8E1, 0xE9F2F504);
	r0 = D(r0, s0_0_2, 0xFFF80802, 0xF1010B04, 0x12FC0BFF, 0xFDEC0517);
	r1 = D(r1, s0_0_2, 0x0C03ED00, 0x0304F8F4, 0x04FB0604, 0xFE0100FC);
	r2 = D(r2, s0_0_2, 0x010F0AF7, 0xF50FFAF9, 0xF801FA0D, 0xFF05FEF9);
	r3 = D(r3, s0_0_2, 0xFCFC0205, 0xFAFBFFFD, 0xFB090BF9, 0x0A0AF0FE);
	r4 = D(r4, s0_0_2, 0x0608F9F6, 0x02020BFE, 0xF603F605, 0x03040104);
	r5 = D(r5, s0_0_2, 0x0302F8FC, 0x05FEED02, 0xFEFBFA03, 0x0D06EA1A);
	r6 = D(r6, s0_0_2, 0x1E00F11F, 0x06FB0104, 0xF904EF1D, 0x2C818181);
	r7 = D(r7, s0_0_2, 0x0508FCF8, 0x0601FAF7, 0xFCECEC11, 0xFBF800F3);
	r0 = D(r0, s0_1_0, 0x0B0007FD, 0xFBFA00F9, 0x05FDFFF0, 0x0E01F000);
	r1 = D(r1, s0_1_0, 0x02F40E01, 0xFF01FC0C, 0x08EE0704, 0x00EDFAFE);
	r2 = D(r2, s0_1_0, 0x01F30A02, 0xF5050D0A, 0x07020401, 0xCD2FEAEC);
	r3 = D(r3, s0_1_0, 0x04EEFD06, 0x08F908FA, 0xF20EFFF4, 0xFAF30808);
	r4 = D(r4, s0_1_0, 0xEE00EE00, 0xFAF80105, 0xE60AFF08, 0xF006FEFA);
	r5 = D(r5, s0_1_0, 0xFF1D02FC, 0x030BFE02, 0x0120F40C, 0x04FF0106);
	r6 = D(r6, s0_1_0, 0xE7EAF301, 0x0209F2F2, 0xF1EFFD02, 0xF709EDEF);
	r7 = D(r7, s0_1_0, 0xEC08FC01, 0xFD010107, 0x0BFF2210, 0xF1FDF7F0);
	r0 = D(r0, s0_1_1, 0xE116EDED, 0xFCF50715, 0x003B92F8, 0xEA21F10B);
	r1 = D(r1, s0_1_1, 0xEB17E719, 0xFBFA0B0E, 0xF319F3F8, 0x06040A13);
	r2 = D(r2, s0_1_1, 0xFB0EFAFE, 0x0A18EE10, 0xFA19FCEA, 0x1FF8CA0B);
	r3 = D(r3, s0_1_1, 0xF105FCFC, 0x0709F918, 0xFEE12306, 0x00FE0F04);
	r4 = D(r4, s0_1_1, 0x16F81427, 0xF7EE0E27, 0x00E7FA13, 0x10EB0B26);
	r5 = D(r5, s0_1_1, 0xD90907E4, 0xC606EBDC, 0xF60206ED, 0xE60904FD);
	r6 = D(r6, s0_1_1, 0xD1F1D205, 0x001DFAD5, 0x010111FC, 0x1F05EE03);
	r7 = D(r7, s0_1_1, 0xAD02FBEE, 0xE922D109, 0xD20AEC1B, 0xFAE315E6);
	r0 = D(r0, s0_1_2, 0x0006F6FF, 0x00F2110D, 0x0CF9F1F7, 0xF2FA030A);
	r1 = D(r1, s0_1_2, 0x0C0E0603, 0xFEFB0BF5, 0x0C10FBFC, 0x0608FBF5);
	r2 = D(r2, s0_1_2, 0xE607F0FF, 0xEDFE0103, 0xF1FBFD18, 0xE7F6F116);
	r3 = D(r3, s0_1_2, 0x05FDFF01, 0xFBFBFC1B, 0x0302FFEB, 0x060BEAF5);
	r4 = D(r4, s0_1_2, 0x090AFBF8, 0xFEFFF5FF, 0x0E120006, 0xF8FCF70D);
	r5 = D(r5, s0_1_2, 0xF8ED0800, 0x1E1C02C7, 0xFBF80107, 0x2203F404);
	r6 = D(r6, s0_1_2, 0xEA2ADFD5, 0xFAFF0102, 0x04000602, 0x040DDCF1);
	r7 = D(r7, s0_1_2, 0xFFF201F2, 0x0AF204F8, 0x1E013C1D, 0x0A02F115);
	r0 = D(r0, s0_2_0, 0x01F0FB00, 0xFC050301, 0x05F9FBF7, 0xF1F8F502);
	r1 = D(r1, s0_2_0, 0x070E0501, 0x05060402, 0x00FFFFF9, 0xFDFF03FD);
	r2 = D(r2, s0_2_0, 0x06F705FD, 0x04040D03, 0x0006FE0A, 0x7F81D081);
	r3 = D(r3, s0_2_0, 0x0700F601, 0x02FB0502, 0x050501FD, 0x0301FCF7);
	r4 = D(r4, s0_2_0, 0x07FE06FF, 0xF8080204, 0x0DFDFFF7, 0xFB02FCFE);
	r5 = D(r5, s0_2_0, 0xFD0BF7FC, 0x05FFF906, 0x0A0B01F6, 0x03000300);
	r6 = D(r6, s0_2_0, 0xDF1A0D2E, 0xFDF20805, 0x07FBFBFB, 0x090C09FC);
	r7 = D(r7, s0_2_0, 0xFCFAF601, 0x17051AFF, 0xFFF20EE5, 0xF1FDFB00);
	r0 = D(r0, s0_2_1, 0x02F6F8F9, 0x04F8040B, 0xE0FB09FE, 0xDB0B01F8);
	r1 = D(r1, s0_2_1, 0x090E13F6, 0x010A02F4, 0xFAE704EF, 0x06FE07F9);
	r2 = D(r2, s0_2_1, 0xFAFC0102, 0xFF0F07FC, 0xF9F00201, 0x2AF80EF3);
	r3 = D(r3, s0_2_1, 0xF2F5FDFD, 0x0604FD04, 0xEBF9FE13, 0x161D09F7);
	r4 = D(r4, s0_2_1, 0x060AF30F, 0x040EF7FF, 0xE5FE0200, 0x0400F90D);
	r5 = D(r5, s0_2_1, 0xEC02FAFF, 0xFCEDFAF0, 0xE202F302, 0x03F1FFF9);
	r6 = D(r6, s0_2_1, 0xFF0234EA, 0x09F408F8, 0x05F807F6, 0x0B07F7FC);
	r7 = D(r7, s0_2_1, 0xE5FC0205, 0xF300F806, 0xFAE3FEFB, 0xF00BFB0C);
	r0 = D(r0, s0_2_2, 0xFCFE02FB, 0xF415F904, 0xEB1B03E5, 0xFFEEF40B);
	r1 = D(r1, s0_2_2, 0xFCFBFF05, 0x04010101, 0xFEF8FF00, 0x03FEFFFB);
	r2 = D(r2, s0_2_2, 0x08FD0900, 0xF4F7F90B, 0xFBF20007, 0xF906F609);
	r3 = D(r3, s0_2_2, 0x05FA02F9, 0x05FE0604, 0xF70603F4, 0x0CF31709);
	r4 = D(r4, s0_2_2, 0x08F7FD05, 0x0504030C, 0x0903FE06, 0xFE020101);
	r5 = D(r5, s0_2_2, 0xEEF50204, 0x09F80EFD, 0x04FB00FA, 0x09FAFF08);
	r6 = D(r6, s0_2_2, 0xD633ED00, 0xFEFB02FC, 0x0905FCF9, 0xFEF7F605);
	r7 = D(r7, s0_2_2, 0x0C0304E6, 0xFCF9F701, 0x1D1316CA, 0xFDF403F6);
	r0 = D(r0, s1_0_0, 0x0BFDF404, 0xFBFF0000, 0x0909F205, 0xFA060505);
	r1 = D(r1, s1_0_0, 0xFE03F410, 0x01020001, 0x0B08ECFA, 0xFB000002);
	r2 = D(r2, s1_0_0, 0x07FDFC03, 0x0401FE02, 0x0CFBF1FD, 0x07F111FD);
	r3 = D(r3, s1_0_0, 0x01FDF908, 0x09FE03FE, 0xE80410FB, 0x13030101);
	r4 = D(r4, s1_0_0, 0xFAFE10FE, 0xFB0003FF, 0xFA030DFA, 0xF4FA0AFE);
	r5 = D(r5, s1_0_0, 0xF4F40F0B, 0xFF06FFF9, 0xFEFE0CF4, 0x010505FA);
	r6 = D(r6, s1_0_0, 0xF5FE151E, 0x070104FC, 0x111102DA, 0x1AEFF805);
	r7 = D(r7, s1_0_0, 0xF30A0902, 0x0317F4FF, 0x1C3DEBE9, 0xF6080C03);
	r0 = D(r0, s1_0_1, 0x05F90908, 0x01F6FC0C, 0x10FA0815, 0xEC010803);
	r1 = D(r1, s1_0_1, 0x11FE1607, 0xF7FAFD01, 0xF90010FF, 0x050902FF);
	r2 = D(r2, s1_0_1, 0x140002FF, 0x17F800FE, 0x1201F702, 0x0B09F012);
	r3 = D(r3, s1_0_1, 0x07F8F813, 0x0102F605, 0xEA03FAFD, 0x00F601FC);
	r4 = D(r4, s1_0_1, 0x0007F6F5, 0x0203FFFB, 0x0004F504, 0xF20FFBFA);
	r5 = D(r5, s1_0_1, 0xE0FEED00, 0xE9F50800, 0xE0F5FB02, 0xF1FC04F8);
	r6 = D(r6, s1_0_1, 0x4D21A688, 0x070D0604, 0x13DAF706, 0x0C2FF281);
	r7 = D(r7, s1_0_1, 0xEB05F802, 0x17FC1416, 0x2ACCAB1B, 0xE7150705);
	r0 = D(r0, s1_0_2, 0x06FEF802, 0xF7FAF2FA, 0x0C01ED04, 0xFFF402FE);
	r1 = D(r1, s1_0_2, 0x09F6FBFB, 0xFA080005, 0xFF040501, 0x03FE03FE);
	r2 = D(r2, s1_0_2, 0x070900FB, 0x000201FE, 0x0FFA0307, 0x02F70605);
	r3 = D(r3, s1_0_2, 0x02FFFE05, 0x07FB0408, 0xF30606FE, 0xFD07FDF2);
	r4 = D(r4, s1_0_2, 0x0007FDFF, 0x0303FEFF, 0x0BFE0506, 0xFE0400FB);
	r5 = D(r5, s1_0_2, 0xF51C03F9, 0x100AECFD, 0xE80F06F5, 0x0D0DFA09);
	r6 = D(r6, s1_0_2, 0xE7EB1519, 0x00030002, 0x10E6FD07, 0x81818181);
	r7 = D(r7, s1_0_2, 0xF11104F3, 0xFC03FD04, 0xD8A61B0D, 0xF5130901);
	r0 = D(r0, s1_1_0, 0x0C0CE800, 0xFEF40C0A, 0xF60B0201, 0xFB19E2E5);
	r1 = D(r1, s1_1_0, 0x0EFF0AE9, 0xFA080505, 0x16FDE6F8, 0xFEFF06FB);
	r2 = D(r2, s1_1_0, 0x03FCF10C, 0x03FEEE12, 0x09FCF807, 0x0607F2E8);
	r3 = D(r3, s1_1_0, 0xFEFB07F1, 0xFAFEFF01, 0xFF03FB0D, 0x0402F10C);
	r4 = D(r4, s1_1_0, 0x02F7FB09, 0x04FCF602, 0x1803F017, 0x0105F910);
	r5 = D(r5, s1_1_0, 0xE908EA0A, 0x0A0EEF00, 0xF306020F, 0x0501FAFB);
	r6 = D(r6, s1_1_0, 0xDD0806F2, 0xEF0C03FA, 0x11F60528, 0x0709FEF5);
	r7 = D(r7, s1_1_0, 0xD8F50024, 0x00FF0DE8, 0x11E621D6, 0xF20BFB23);
	r0 = D(r0, s1_1_1, 0x040CFBF2, 0xD70906ED, 0x0708FFEA, 0x020BEE0C);
	r1 = D(r1, s1_1_1, 0x0BEA08EC, 0x10F0F4F0, 0x06EBFDFA, 0x0BEAFFFF);
	r2 = D(r2, s1_1_1, 0x0CF1FD17, 0x0F070205, 0x0F0AF210, 0xFD1BEA0C);
	r3 = D(r3, s1_1_1, 0xE9FDFF0F, 0x120F0717, 0xF2DA0105, 0x3709041D);
	r4 = D(r4, s1_1_1, 0x06D4F404, 0x0DECFB0D, 0x10E70B0C, 0x0AE60E04);
	r5 = D(r5, s1_1_1, 0xF1FAEB17, 0x130AE310, 0xF3FF0310, 0x0C16F415);
	r6 = D(r6, s1_1_1, 0x6681A1BF, 0xFB1FFDF7, 0x010E13EE, 0x0FD010FD);
	r7 = D(r7, s1_1_1, 0xDC0BED08, 0xE80801E6, 0x35FC3930, 0xFA0D06D7);
	r0 = D(r0, s1_1_2, 0x0D050103, 0xFA1E0A01, 0x070D0300, 0x0318EF09);
	r1 = D(r1, s1_1_2, 0xFEFA0A03, 0x09F4FBFC, 0x00F9FF05, 0xF9F807FB);
	r2 = D(r2, s1_1_2, 0x04FDF706, 0xFDF0FDEE, 0x07F8EB08, 0x030B0801);
	r3 = D(r3, s1_1_2, 0xFD050209, 0xF501FD01, 0xEE15FDF9, 0x11E508EF);
	r4 = D(r4, s1_1_2, 0x09FAFCFC, 0x08F5FC03, 0x09EFF0FD, 0x02000204);
	r5 = D(r5, s1_1_2, 0x0AFAFB02, 0x18D91205, 0xEEFD0901, 0x07CB0E0D);
	r6 = D(r6, s1_1_2, 0x2FF0D1CF, 0xF50A0007, 0x08FFF5F6, 0x11DFF40A);
	r7 = D(r7, s1_1_2, 0xFE0809FE, 0xF40F07F6, 0xE31AFBF5, 0xE70917FF);
	r0 = D(r0, s1_2_0, 0x060602F1, 0xF509050B, 0x16F8FAE1, 0xFFF5F406);
	r1 = D(r1, s1_2_0, 0x01FFFFED, 0x05FEFF02, 0xF7FD00F2, 0x07FEFAFC);
	r2 = D(r2, s1_2_0, 0x01FD00F7, 0x0CF00909, 0x04FAF806, 0x81810D81);
	r3 = D(r3, s1_2_0, 0xF905F6E2, 0x030703F9, 0xF3FDF9F5, 0x06000EE2);
	r4 = D(r4, s1_2_0, 0x020C07F7, 0x03FAF902, 0x0BFD08DA, 0x0109FFFD);
	r5 = D(r5, s1_2_0, 0x0700F5FE, 0xFF0801F8, 0xF7FB09EF, 0x0403FFFC);
	r6 = D(r6, s1_2_0, 0xE5013337, 0x0B10FAFA, 0x00FEFBF6, 0x0107F6FE);
	r7 = D(r7, s1_2_0, 0xFFFEF1F6, 0xF21302E0, 0xFDFAFFFB, 0x1605FE0D);
	r0 = D(r0, s1_2_1, 0xF5EB0506, 0x0EF70BFC, 0xD8E2070D, 0xF2090609);
	r1 = D(r1, s1_2_1, 0x05F606F3, 0x04F402F9, 0x00EAF101, 0x02FDFEF3);
	r2 = D(r2, s1_2_1, 0x0805080D, 0x09FE000D, 0xFC04FAFF, 0x27AD1206);
	r3 = D(r3, s1_2_1, 0xFCFF02F7, 0xFB06F902, 0xFE04F40A, 0xF2E2EFF5);
	r4 = D(r4, s1_2_1, 0xF80003FF, 0x07EF0C0B, 0x12FAF9FC, 0xFFFCFE07);
	r5 = D(r5, s1_2_1, 0x0006F902, 0xFC050701, 0xF5190DFF, 0xFD0A01F0);
	r6 = D(r6, s1_2_1, 0xEF04FBF9, 0x05030505, 0x0A00F30B, 0x08F804F1);
	r7 = D(r7, s1_2_1, 0x120BEEFD, 0xFE151807, 0x03F509F1, 0xF70D1E03);
	r0 = D(r0, s1_2_2, 0x05F7FD04, 0xFF0D0A08, 0x0EFCF7FC, 0x03FCF9FC);
	r1 = D(r1, s1_2_2, 0x05FFFD00, 0x05FFFD02, 0x03FEFFFE, 0xFB00FDFE);
	r2 = D(r2, s1_2_2, 0x05F3FD00, 0x0013F502, 0x0D09F406, 0xF7030309);
	r3 = D(r3, s1_2_2, 0x0DF8FF05, 0x00070503, 0xFC0304FF, 0x00FE02F9);
	r4 = D(r4, s1_2_2, 0xFEF800FC, 0xFFFB01FF, 0xFFFCFCFF, 0x0006FB03);
	r5 = D(r5, s1_2_2, 0xFC17F605, 0xFAF5FC02, 0xF50508F8, 0x01F8F501);
	r6 = D(r6, s1_2_2, 0xFA0DDD08, 0x0100FB02, 0x0006FD01, 0x0BF007FC);
	r7 = D(r7, s1_2_2, 0x0608FAFB, 0xF9FB02FF, 0xF2E10A02, 0xF7081004);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF000102, 0x040301FB, 0x14F402F6, 0x00FC160C);
	r1 = D(r1, s0_0_0, 0x0201FAF5, 0x03FB02FF, 0x08000703, 0xFC030200);
	r2 = D(r2, s0_0_0, 0x00F2F903, 0x09FCF909, 0x0AF60004, 0xF4E90E10);
	r3 = D(r3, s0_0_0, 0x0508FDFB, 0x0206FDFD, 0x00FDFE03, 0xF306FF07);
	r4 = D(r4, s0_0_0, 0x03FF03FB, 0x00FF01FE, 0xFA040402, 0x0003FF02);
	r5 = D(r5, s0_0_0, 0x06FAFB03, 0x02050006, 0xF909FBFB, 0x0B080203);
	r6 = D(r6, s0_0_0, 0x04B5F906, 0xFE04FC04, 0x0FE721FE, 0x00FFF519);
	r7 = D(r7, s0_0_0, 0xFD0102F4, 0x0AFCEDFA, 0x2C91FC35, 0x0206FEE2);
	r0 = D(r0, s0_0_1, 0xF7FFFD02, 0x09F1FD07, 0xFFF31608, 0x0503FEFC);
	r1 = D(r1, s0_0_1, 0x0D15FEFE, 0x01070A06, 0xF00B04FD, 0x0A0CFCFC);
	r2 = D(r2, s0_0_1, 0x06ED0A0D, 0xFAFB120F, 0x0FFF0209, 0x10EF08FD);
	r3 = D(r3, s0_0_1, 0x11F3F8FC, 0x04F80508, 0x03F605F6, 0x0B0AF9F7);
	r4 = D(r4, s0_0_1, 0x03FF060A, 0xFFFF00FE, 0x00FCFAF5, 0xF90500F5);
	r5 = D(r5, s0_0_1, 0xFAFE1908, 0xF410FFEE, 0xF211EDF8, 0xF9090103);
	r6 = D(r6, s0_0_1, 0x22DE262F, 0x00F8FF07, 0x1303E70D, 0x04982E07);
	r7 = D(r7, s0_0_1, 0xF9030200, 0x070D1206, 0x61E7DEFF, 0x030AE9F3);
	r0 = D(r0, s0_0_2, 0xFAFCFF09, 0xF20E02F6, 0xFDFB06F5, 0xFF090409);
	r1 = D(r1, s0_0_2, 0x0804050C, 0xFFF902FE, 0x03F9EF0C, 0x00FE0002);
	r2 = D(r2, s0_0_2, 0xFC040AFA, 0xF50AFCFE, 0x01FE0705, 0xEEF9090E);
	r3 = D(r3, s0_0_2, 0x00FD09EF, 0x0502FFFD, 0xFBF9FE08, 0xF80F01F6);
	r4 = D(r4, s0_0_2, 0x04000006, 0x00FE0103, 0xFD06030D, 0xFB00FD05);
	r5 = D(r5, s0_0_2, 0x06FFF101, 0x0AF7EB05, 0x0B0200EA, 0x02F6FE07);
	r6 = D(r6, s0_0_2, 0xE5DA19E3, 0x03FCFB04, 0x0CFF0804, 0x7F8A9E81);
	r7 = D(r7, s0_0_2, 0xFD020304, 0x0DF206FF, 0x3281D5B2, 0x0D0405DF);
	r0 = D(r0, s0_1_0, 0x15FEFF0A, 0x0C07FB09, 0x0705FF07, 0x08FAF913);
	r1 = D(r1, s0_1_0, 0x0706EC0E, 0x00F70004, 0x08FF0101, 0xFF040502);
	r2 = D(r2, s0_1_0, 0x03F00600, 0x0FE6FBFB, 0x06FEFD0A, 0x3C1A14E6);
	r3 = D(r3, s0_1_0, 0xF920F404, 0x06FAF902, 0x06000CF9, 0xE30CEFFF);
	r4 = D(r4, s0_1_0, 0xF9FB04F2, 0xECF50602, 0xEF0DFAFD, 0xEE030101);
	r5 = D(r5, s0_1_0, 0xFA0DE907, 0x0306FE13, 0xFF06F50C, 0x0003FB04);
	r6 = D(r6, s0_1_0, 0x4CB70ACF, 0x0B06FD0F, 0x05F1E607, 0xFFEE1902);
	r7 = D(r7, s0_1_0, 0xD303F507, 0x35EFDA07, 0x310CC1F7, 0xEAF80BFD);
	r0 = D(r0, s0_1_1, 0xFB07F203, 0xE10D0104, 0xEF28E0DA, 0xF2000001);
	r1 = D(r1, s0_1_1, 0x1B1EDBFA, 0x030C0804, 0x1BFEF404, 0x100C1A0D);
	r2 = D(r2, s0_1_1, 0x01EBE0FD, 0x04CBE1F4, 0xFAF7E704, 0x0807CAFC);
	r3 = D(r3, s0_1_1, 0x09F2F602, 0x05F2DDF0, 0xFDF12B0F, 0x150AE9F7);
	r4 = D(r4, s0_1_1, 0x17F40300, 0x0DF4F8FE, 0x0B03F6F2, 0x01F70DF3);
	r5 = D(r5, s0_1_1, 0x02F0ED06, 0x0CF8FAF7, 0xF2EDE30D, 0x11F40009);
	r6 = D(r6, s0_1_1, 0x21F1EBEE, 0xF3000905, 0x0D01E6E9, 0x03F31EF7);
	r7 = D(r7, s0_1_1, 0xFBFF2303, 0x150FE619, 0xEE098110, 0xEA101E13);
	r0 = D(r0, s0_1_2, 0xFFFC06FC, 0xF6FA000C, 0x14F8FD00, 0xF0F6E307);
	r1 = D(r1, s0_1_2, 0x08F00AEE, 0xFE02FFF6, 0x08F303E9, 0x0102FCFD);
	r2 = D(r2, s0_1_2, 0x06F10B10, 0xFDFA100F, 0xFEF6FD0C, 0x0AF71309);
	r3 = D(r3, s0_1_2, 0x10FE04F9, 0x04020702, 0xFC0EFCEF, 0x00F30DF8);
	r4 = D(r4, s0_1_2, 0x0A0EFDEE, 0xFF020506, 0x000DFB05, 0x02000B02);
	r5 = D(r5, s0_1_2, 0x05F708FC, 0x2201CDCB, 0x0B03EA00, 0x14F9FEE9);
	r6 = D(r6, s0_1_2, 0x110A0C1A, 0x0104F403, 0xF905FDFF, 0x0B13FB0B);
	r7 = D(r7, s0_1_2, 0x080005F8, 0x0EF9F9FF, 0x162AF5D2, 0x0FF7F1EB);
	r0 = D(r0, s0_2_0, 0x08F212FE, 0xF708F8FE, 0xD5F90F09, 0xF2FF0BFE);
	r1 = D(r1, s0_2_0, 0xFB0202FD, 0x0201FBFF, 0x0C00FE08, 0x05FFFB02);
	r2 = D(r2, s0_2_0, 0xFF07FE0A, 0x0800FA0B, 0xFBFF0805, 0x4C8ADA81);
	r3 = D(r3, s0_2_0, 0x001C0BF5, 0x05FBFDFD, 0xFEFE06FA, 0xF7FD11EC);
	r4 = D(r4, s0_2_0, 0xF9FBF1FF, 0x01F0F402, 0x0B070AF5, 0xFFF7FFFE);
	r5 = D(r5, s0_2_0, 0xFEFB0C01, 0x0A01F1FC, 0x03F60AFA, 0x0403F40A);
	r6 = D(r6, s0_2_0, 0xFFF0D617, 0xFE03F009, 0x06080806, 0xFF07F704);
	r7 = D(r7, s0_2_0, 0xFC08FB02, 0x17FDEEF7, 0x13EF13FE, 0xF702F7E9);
	r0 = D(r0, s0_2_1, 0x0C031E05, 0xF30DF4F6, 0x19F60104, 0xFDED0707);
	r1 = D(r1, s0_2_1, 0x0903F9F7, 0x01030304, 0x09031705, 0x030103FE);
	r2 = D(r2, s0_2_1, 0xF602EB13, 0x06E9DCFD, 0xFBF7F110, 0x09F726A8);
	r3 = D(r3, s0_2_1, 0xFB091C03, 0xF70B03FF, 0xEDF6ED0A, 0x01FC0103);
	r4 = D(r4, s0_2_1, 0x0306FFF8, 0x050202F8, 0xF605F41C, 0x000000FE);
	r5 = D(r5, s0_2_1, 0x0FFC06F4, 0x16F40AFE, 0x080313FB, 0x0BFC07F9);
	r6 = D(r6, s0_2_1, 0xF7CED720, 0xFF01EC00, 0xFBFE0D04, 0x08060301);
	r7 = D(r7, s0_2_1, 0x0708FB00, 0x1616D6F1, 0x1EEA0E01, 0x02FFEBF7);
	r0 = D(r0, s0_2_2, 0x0EFFFEFF, 0xFDFE00FE, 0x0CF91303, 0x060A0100);
	r1 = D(r1, s0_2_2, 0xFCFBFBFE, 0xFEFF0401, 0x08040403, 0x03FC0501);
	r2 = D(r2, s0_2_2, 0x0602FFFA, 0x00FE11FE, 0x0009050E, 0x07FFF112);
	r3 = D(r3, s0_2_2, 0xFE0803F7, 0xFAFDFFF9, 0xFC05F8F8, 0xFD0200FD);
	r4 = D(r4, s0_2_2, 0x0500080B, 0x02FCF8FC, 0xFEFA08F4, 0x00000201);
	r5 = D(r5, s0_2_2, 0x01030400, 0x0605F107, 0x0501F8F4, 0xFE040406);
	r6 = D(r6, s0_2_2, 0x0123F3F5, 0x0BFD00FE, 0xFDFA010B, 0x05E80D06);
	r7 = D(r7, s0_2_2, 0x0100F600, 0x1DF4000B, 0xFA04F31C, 0x091605E4);
	r0 = D(r0, s1_0_0, 0xFDFDFB09, 0x08FE02FE, 0xFFE5F70E, 0x0403E0F9);
	r1 = D(r1, s1_0_0, 0xFDFBF20D, 0x0100FC03, 0xFFF4F107, 0xFB0CFEF9);
	r2 = D(r2, s1_0_0, 0x00F0FE0B, 0x03EA000C, 0xFCE9FD08, 0xF90F0304);
	r3 = D(r3, s1_0_0, 0x03F6F907, 0x05020301, 0xFD2102F4, 0x0706FEF6);
	r4 = D(r4, s1_0_0, 0x020FFCFE, 0xFF0F01FC, 0x0B10FBF3, 0x031600F5);
	r5 = D(r5, s1_0_0, 0xF9FA0507, 0x01FFF708, 0x00FF01FA, 0xFCFAFB05);
	r6 = D(r6, s1_0_0, 0x0FFDD70B, 0x050108F2, 0xFCCF0101, 0xEFEED209);
	r7 = D(r7, s1_0_0, 0x092306FC, 0xFCDEE616, 0x10AEC106, 0x0DFA08FC);
	r0 = D(r0, s1_0_1, 0xFB04FEFE, 0x0508F711, 0x05F8FA04, 0x13FED906);
	r1 = D(r1, s1_0_1, 0x0F08ED01, 0x0708FB03, 0x060CFAF5, 0x0D08EAF2);
	r2 = D(r2, s1_0_1, 0x06E7F609, 0x0BFDF5FF, 0x06F9FB08, 0xF1F6FD11);
	r3 = D(r3, s1_0_1, 0xFEF4070E, 0xFCE904FE, 0xFCFA0308, 0x0BEDE0F4);
	r4 = D(r4, s1_0_1, 0x0708F3FE, 0xFDF80801, 0xFBF9E20F, 0x08FCF801);
	r5 = D(r5, s1_0_1, 0xF3D8FE01, 0xEA180906, 0xF80A1203, 0xFA0F00E5);
	r6 = D(r6, s1_0_1, 0x18B28138, 0xF7031801, 0x0921070B, 0x0C1D1F0E);
	r7 = D(r7, s1_0_1, 0xF7F3080F, 0x0F07FD05, 0xA29948DE, 0xFFF80605);
	r0 = D(r0, s1_0_2, 0xFA02FB02, 0x020109FF, 0xF6F8FC09, 0xFDFDFE13);
	r1 = D(r1, s1_0_2, 0x090303F7, 0xFDFE0606, 0xFFFF01FA, 0x11FFF605);
	r2 = D(r2, s1_0_2, 0xFC050001, 0xFA1002F0, 0xFD08F8FA, 0x00010407);
	r3 = D(r3, s1_0_2, 0xF8F90508, 0x02F704FE, 0xFBF905FF, 0xF7FDFDF3);
	r4 = D(r4, s1_0_2, 0x05020502, 0xFD0005FD, 0x0601FE01, 0x010003FF);
	r5 = D(r5, s1_0_2, 0xF90306F0, 0xFE03FEF9, 0x05EAFEFF, 0x02FCF3FB);
	r6 = D(r6, s1_0_2, 0x211002D9, 0x01FF0202, 0x140203F0, 0xA45C8181);
	r7 = D(r7, s1_0_2, 0xFEF70402, 0xF609F8FA, 0xF11FCEEF, 0x07F00A03);
	r0 = D(r0, s1_1_0, 0xFADFF70E, 0x0304FB08, 0xFE17DEF2, 0xE41203F3);
	r1 = D(r1, s1_1_0, 0xF7E1FEF6, 0x01F8FDFF, 0x02D2FC13, 0xFAFD05F2);
	r2 = D(r2, s1_1_0, 0xFEEDFC0B, 0xFDEBFC08, 0xFBFA050C, 0x0641F32B);
	r3 = D(r3, s1_1_0, 0x08F3F6FE, 0xFC04FD03, 0x0CE6F4FD, 0xFA07E2FF);
	r4 = D(r4, s1_1_0, 0xFEEFFF01, 0x00E3FA08, 0x0DF6E701, 0xFA06F8FC);
	r5 = D(r5, s1_1_0, 0x09DCFC1D, 0xFD10FCFF, 0xFCFA0610, 0xFF00FE07);
	r6 = D(r6, s1_1_0, 0x0BE0DB13, 0x131C0A0F, 0x19F0FC1B, 0xF207F012);
	r7 = D(r7, s1_1_0, 0xF9E9F9EC, 0x03D0FC15, 0xFEBFF12D, 0x0711FE06);
	r0 = D(r0, s1_1_1, 0x0D10FAF6, 0xF1FEF703, 0x1211EA0A, 0xE6091612);
	r1 = D(r1, s1_1_1, 0x22F1001C, 0xFE180429, 0x15F0F40C, 0x0A05FB11);
	r2 = D(r2, s1_1_1, 0x09F7071E, 0x06E90F11, 0x09FD0613, 0xF8ED031F);
	r3 = D(r3, s1_1_1, 0x1510F7E5, 0x0F0EF81C, 0x12F903F9, 0xFAF8B40D);
	r4 = D(r4, s1_1_1, 0x00F6F603, 0xFC04FA0E, 0xEC1BFC15, 0xEFF1F1F7);
	r5 = D(r5, s1_1_1, 0x1DB500FA, 0x17F10610, 0xF7EA0710, 0x0DFCFF1A);
	r6 = D(r6, s1_1_1, 0x0C19FFD0, 0x08FB12F9, 0x04E201FE, 0x0B2CF719);
	r7 = D(r7, s1_1_1, 0xCABE1603, 0x0F101614, 0x25ACEE2D, 0xDCF30E20);
	r0 = D(r0, s1_1_2, 0xFE06FCF9, 0xFD020111, 0x07FAEEEB, 0xE007060A);
	r1 = D(r1, s1_1_2, 0x020304F7, 0x08FB060A, 0x0A09FAEE, 0x14F8FE0B);
	r2 = D(r2, s1_1_2, 0xF90BF7F9, 0xFF02FDFA, 0xF80206F9, 0x1212FBE5);
	r3 = D(r3, s1_1_2, 0xFAFBFFFD, 0xF7F60706, 0x0DFAFF01, 0x04F5F8E7);
	r4 = D(r4, s1_1_2, 0x11F7FFFF, 0x0300FEFF, 0x05F80007, 0xFC05FCFD);
	r5 = D(r5, s1_1_2, 0xE80EFA04, 0x0CF6EE07, 0x01050BFC, 0x0400F6F1);
	r6 = D(r6, s1_1_2, 0xE7FF1C0E, 0xEF0603FA, 0xF8FFFC0B, 0x0CE7F32C);
	r7 = D(r7, s1_1_2, 0x0D020BFB, 0x0B15F6F2, 0x2C1206F7, 0x18F806F7);
	r0 = D(r0, s1_2_0, 0xF8F80406, 0x0401F6EC, 0xF3D9F311, 0x0DF1FA10);
	r1 = D(r1, s1_2_0, 0xFC06FB11, 0x07FDFA0C, 0xF8F80705, 0xFCFE04F9);
	r2 = D(r2, s1_2_0, 0xFDFFFD00, 0xFEF4020D, 0xFB1201FC, 0x816E8181);
	r3 = D(r3, s1_2_0, 0xF90207F5, 0xFB0B00F8, 0x0AEDF709, 0xFAF906FF);
	r4 = D(r4, s1_2_0, 0x02FD03FA, 0x0200FE0E, 0x040C05FB, 0xFE00FDFE);
	r5 = D(r5, s1_2_0, 0xFB09FDFE, 0xFF04FE05, 0x06FBFE0A, 0xFE00FEFD);
	r6 = D(r6, s1_2_0, 0x09CEFC45, 0x01E90104, 0xF807FDEC, 0xFC0BFF09);
	r7 = D(r7, s1_2_0, 0xFDD702FC, 0x01FE0105, 0x0009071B, 0x0DEFF908);
	r0 = D(r0, s1_2_1, 0xFA0200F7, 0x041EFAFE, 0xFC010CF0, 0x0411F5EE);
	r1 = D(r1, s1_2_1, 0xF6F40508, 0x07F60101, 0xDB130AF7, 0xF60101FC);
	r2 = D(r2, s1_2_1, 0x08EA0007, 0xFA0200FB, 0xEF01FDFF, 0x0A0406F4);
	r3 = D(r3, s1_2_1, 0xF5FA0507, 0xEE0704FE, 0x09F30315, 0x03FF080B);
	r4 = D(r4, s1_2_1, 0xF001FF06, 0x1AF4051B, 0xFDF10612, 0xFE0B0404);
	r5 = D(r5, s1_2_1, 0xED140303, 0xF30902F7, 0xFDFDFEF7, 0xEE0507FC);
	r6 = D(r6, s1_2_1, 0xF4FFECCB, 0x0105F8F4, 0xFA060300, 0xEFFAFB0F);
	r7 = D(r7, s1_2_1, 0xFCD00411, 0xE3E50413, 0x0AD6FC25, 0x20ED03F8);
	r0 = D(r0, s1_2_2, 0x04FE04F8, 0xF700FF0E, 0x090304F4, 0x00F8F806);
	r1 = D(r1, s1_2_2, 0x010A06F5, 0x06010001, 0x0A0404F5, 0x000103FE);
	r2 = D(r2, s1_2_2, 0x0EF900FC, 0xFA0501F4, 0xFF08F7FD, 0xF7FEFC03);
	r3 = D(r3, s1_2_2, 0x01F50710, 0x0404FEFB, 0xFC04F605, 0xFDF50800);
	r4 = D(r4, s1_2_2, 0xFF0601F2, 0x04FDFA00, 0xFB040601, 0xF702FF01);
	r5 = D(r5, s1_2_2, 0xF3FBFD14, 0xFB0307F7, 0x0EFC05FB, 0xFB0B03FA);
	r6 = D(r6, s1_2_2, 0xE1EA07FF, 0x010201F2, 0xF807FB0A, 0x0D000B04);
	r7 = D(r7, s1_2_2, 0x14EB0419, 0x000306EA, 0xCFF9040B, 0x00F01110);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(4.958e-03, 8.967e-05, -2.412e-02, 6.953e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.951e-02, -8.746e-03, -1.691e-04, -1.127e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.378e-02, -1.698e-02, -2.095e-02, 9.518e-04);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(9.472e-03, 9.953e-04, -5.495e-04, -1.946e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-4.500e-03, -1.202e-02, -1.623e-02, -1.937e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(4.206e-03, 2.670e-02, -2.025e-03, -3.271e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.695e-02, -4.905e-03, -2.279e-02, 3.843e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.678e-03, -2.938e-02, -6.149e-02, -1.521e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -conv8
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0606F401, 0x00FD06F0, 0x02FCF8F8, 0x0001FEFF);
	r1 = D(r1, s0_0_0, 0x0704F90A, 0x00FBFCFF, 0xFE20F3FA, 0x02F6F808);
	r2 = D(r2, s0_0_0, 0x1A03052B, 0x02FFFCFA, 0x00FD00FF, 0x0202FD01);
	r3 = D(r3, s0_0_0, 0x03F9FCFD, 0x03FA0609, 0x0002FCFF, 0x01FDFF06);
	r4 = D(r4, s0_0_0, 0x0004FD04, 0xF5F5C70B, 0x0200FA00, 0xFE02EFF2);
	r5 = D(r5, s0_0_0, 0xDD2AEBFF, 0x00FE0002, 0x0303FE04, 0x00FE01FC);
	r6 = D(r6, s0_0_0, 0x02040003, 0x2802EDDB, 0x81C38181, 0x0006FEFB);
	r7 = D(r7, s0_0_0, 0x0303FA0A, 0x03FBF707, 0x0005FD04, 0x02FBFAFC);
	r0 = D(r0, s0_0_1, 0x0A02060A, 0x010002F6, 0x05F8EF17, 0xFF04FBFF);
	r1 = D(r1, s0_0_1, 0xE834F60A, 0x000DFC09, 0xF9F9FD06, 0x02FD0306);
	r2 = D(r2, s0_0_1, 0xF916F602, 0x02F8FB0C, 0x04EF0007, 0xFFFD0204);
	r3 = D(r3, s0_0_1, 0x02FF05F7, 0x04F1FAFA, 0x02060104, 0x00F3000B);
	r4 = D(r4, s0_0_1, 0x011FFD18, 0x3BBB0C14, 0x03F8F802, 0xF900F1F7);
	r5 = D(r5, s0_0_1, 0xEAF2D3E9, 0x02FD02FD, 0x03EB0C02, 0x02FE000A);
	r6 = D(r6, s0_0_1, 0x0210FF0C, 0xBCB9D618, 0x01F7FAE7, 0x000D02FC);
	r7 = D(r7, s0_0_1, 0x041D000B, 0x00F5FD05, 0x0020F50D, 0x01F5FD0A);
	r0 = D(r0, s0_0_2, 0x03F9FE14, 0x05090400, 0x03F90503, 0x0000FE02);
	r1 = D(r1, s0_0_2, 0x0B1AF30C, 0xFFFFFEFC, 0x05FBF908, 0x0101FFFE);
	r2 = D(r2, s0_0_2, 0x0C210DE3, 0x01FA06FC, 0x0109FC00, 0x01FB0304);
	r3 = D(r3, s0_0_2, 0x0301FC07, 0x0601FF04, 0x01FEFF06, 0x0315FD00);
	r4 = D(r4, s0_0_2, 0xFF0DFA04, 0xC8FEF9E0, 0x02FF0AF5, 0xFF0500FA);
	r5 = D(r5, s0_0_2, 0xD03BF0DF, 0x00F6F90D, 0xFE04F707, 0x01FEFB04);
	r6 = D(r6, s0_0_2, 0x0101FA06, 0x211603C3, 0xF9000003, 0x0AE7F8FD);
	r7 = D(r7, s0_0_2, 0x00040005, 0x01FE0200, 0x0003FE03, 0xFEFE04FF);
	r0 = D(r0, s0_1_0, 0xFF0CDCFB, 0x010005FF, 0x01FFFBFD, 0x00FEF706);
	r1 = D(r1, s0_1_0, 0x131B9A04, 0x0208FE0A, 0x10040909, 0x0603E7EC);
	r2 = D(r2, s0_1_0, 0xDF4181F9, 0x04050002, 0xFF07FE06, 0x01000801);
	r3 = D(r3, s0_1_0, 0x0301FBF9, 0x04FF0E11, 0x06F9F6F8, 0x01FF0003);
	r4 = D(r4, s0_1_0, 0xFEFFFD04, 0x0925EAE3, 0x04000100, 0x0002F504);
	r5 = D(r5, s0_1_0, 0x0FDAC40F, 0x0201FFFF, 0x0109090B, 0x03FCF705);
	r6 = D(r6, s0_1_0, 0xFFFFFF01, 0x2301FACA, 0xFCF1D806, 0x06FC03FC);
	r7 = D(r7, s0_1_0, 0xFD00F808, 0x0407F8FC, 0xFB02F602, 0x0308FDFE);
	r0 = D(r0, s0_1_1, 0xF1C1F2BD, 0x0703FCF8, 0x0502F7CA, 0x0004FB10);
	r1 = D(r1, s0_1_1, 0xAF55A28D, 0x02110B0C, 0x07070C14, 0x02FF09FA);
	r2 = D(r2, s0_1_1, 0xE44081BC, 0x01F9FEEA, 0x09FCFEF9, 0x010205DF);
	r3 = D(r3, s0_1_1, 0x080707FE, 0x00EBFAE8, 0x050BFD18, 0x03E80602);
	r4 = D(r4, s0_1_1, 0x000BF911, 0x1FF6E981, 0xFE09FCEA, 0xFE05F90A);
	r5 = D(r5, s0_1_1, 0xD7ECBFDA, 0x01000407, 0xFFFDEFFC, 0x02F0FBEF);
	r6 = D(r6, s0_1_1, 0xFC08FCF5, 0xE647ED9E, 0xFAF9F507, 0xF7000AE7);
	r7 = D(r7, s0_1_1, 0x03F5F1EF, 0x05E20214, 0x0417F907, 0x0601F8BE);
	r0 = D(r0, s0_1_2, 0xFFFEFE0C, 0x00000101, 0x06020300, 0x010200FE);
	r1 = D(r1, s0_1_2, 0xF1EDF901, 0x01110509, 0x0B0502FA, 0x000201FD);
	r2 = D(r2, s0_1_2, 0xB352DAE2, 0xFEF9FF11, 0xFEFE01FB, 0x06110405);
	r3 = D(r3, s0_1_2, 0x01FD01FC, 0xFFFEFF03, 0x0AFCFCFB, 0x07DC03FE);
	r4 = D(r4, s0_1_2, 0xFF0A00F8, 0xE22E21D6, 0xFFFD0205, 0xFF0100FB);
	r5 = D(r5, s0_1_2, 0xD2D3E818, 0xFD010607, 0xF80605FE, 0xFAFF02FF);
	r6 = D(r6, s0_1_2, 0x00080301, 0x0FFC0001, 0xFEFA05FA, 0x0F1EECE5);
	r7 = D(r7, s0_1_2, 0x02FDFC09, 0x000606F4, 0xFCFD00FC, 0x03040AFB);
	r0 = D(r0, s0_2_0, 0x8BECD60A, 0x01000101, 0xFE02FC02, 0x01FDFA02);
	r1 = D(r1, s0_2_0, 0xB511810A, 0xFEFFED10, 0x0403F204, 0xFC00FCFF);
	r2 = D(r2, s0_2_0, 0xECF3FC08, 0x0300FC01, 0x0003EBF5, 0xFF0102FB);
	r3 = D(r3, s0_2_0, 0x02FFFCFF, 0x03010703, 0x05FBFB01, 0x0501F400);
	r4 = D(r4, s0_2_0, 0x02FEFC01, 0x0F14B9EB, 0xFE00FE01, 0x02FF0302);
	r5 = D(r5, s0_2_0, 0xE80E07F4, 0x03FD0200, 0xF9FEF709, 0x00000801);
	r6 = D(r6, s0_2_0, 0xFFFFFC01, 0xDE15E0F5, 0x09F8FA03, 0x04FF0301);
	r7 = D(r7, s0_2_0, 0x020005FF, 0xFDFFFEFD, 0x05FEFB00, 0x01FD0106);
	r0 = D(r0, s0_2_1, 0xCAF181E2, 0xFE01FEFE, 0xFB04FAFF, 0xFD01FE00);
	r1 = D(r1, s0_2_1, 0x0B03E8F6, 0xFFFDDCDB, 0xFDFCFA00, 0xFF00FDFD);
	r2 = D(r2, s0_2_1, 0x0511F7EF, 0xFE0302FF, 0x00050AFE, 0xFC060401);
	r3 = D(r3, s0_2_1, 0xFDFEFFFD, 0x0CFE0806, 0xF9FFFD00, 0x06020B07);
	r4 = D(r4, s0_2_1, 0x02FCFE04, 0xF10DFAF4, 0xFC00FF01, 0xFC000101);
	r5 = D(r5, s0_2_1, 0xE208E2F9, 0xF4070113, 0xFA0CF40D, 0xF9060600);
	r6 = D(r6, s0_2_1, 0xFF01F7FF, 0xCB32E4BC, 0x00FF0601, 0x01000008);
	r7 = D(r7, s0_2_1, 0x010000FF, 0xFE0AFBFF, 0xFFFE0000, 0xF701FC03);
	r0 = D(r0, s0_2_2, 0x81FFBD81, 0x00010001, 0xFCFF0405, 0xFFFC0001);
	r1 = D(r1, s0_2_2, 0xCE02EE13, 0xF8FCE80B, 0x05010100, 0x00000001);
	r2 = D(r2, s0_2_2, 0xDFF11CFF, 0xFD02FEFE, 0x0204FFFB, 0xFEFBFF05);
	r3 = D(r3, s0_2_2, 0x03FEFFFE, 0x0300FF05, 0x09FA02FF, 0x05FE0407);
	r4 = D(r4, s0_2_2, 0xFFFDFF01, 0xD52DF8C7, 0xFE00FFFE, 0xFEFFFF02);
	r5 = D(r5, s0_2_2, 0xD22709DD, 0xFDFF0102, 0xFEFC0003, 0xFF0201FE);
	r6 = D(r6, s0_2_2, 0xFD010102, 0xFC140EF5, 0x0002FBFF, 0xFB06FDF3);
	r7 = D(r7, s0_2_2, 0xFFFF0003, 0xFE0000FF, 0xFDFEFF03, 0xFD01FEFE);
	r0 = D(r0, s1_0_0, 0x03EDF906, 0xFB02FF00, 0x090606F5, 0xFC02FC03);
	r1 = D(r1, s1_0_0, 0xF0E50BF2, 0xFD07FE05, 0xEC2009ED, 0xFAFFFD08);
	r2 = D(r2, s1_0_0, 0x1EF1F933, 0x0003FCFE, 0xFFFC02FF, 0xFFFFFFFE);
	r3 = D(r3, s1_0_0, 0xFB07FFFF, 0xFA01FB14, 0x01FE01F4, 0x00FBFF00);
	r4 = D(r4, s1_0_0, 0x0305F808, 0xF2FCF603, 0xFDFF0001, 0xFD08F9FA);
	r5 = D(r5, s1_0_0, 0xEE0A0801, 0x030301FF, 0x0200FFFA, 0x01FA01FA);
	r6 = D(r6, s1_0_0, 0x0300FE01, 0xED0B01DE, 0x81D38181, 0xF4080102);
	r7 = D(r7, s1_0_0, 0x080504FF, 0x0101F700, 0xFD0DFC06, 0xFC03FE00);
	r0 = D(r0, s1_0_1, 0x04ED0906, 0x13051706, 0xF9F30410, 0xFD0C00FA);
	r1 = D(r1, s1_0_1, 0x0AE216EC, 0xFF010200, 0x01EC1309, 0xF600FD05);
	r2 = D(r2, s1_0_1, 0xFC0217DF, 0x03FDFD03, 0xF509FE0B, 0xFE05F90C);
	r3 = D(r3, s1_0_1, 0xFD04FE04, 0xFE1C0CF1, 0x02E5FC10, 0x00FD0104);
	r4 = D(r4, s1_0_1, 0xF502010D, 0x191403FD, 0x0314040C, 0xF91F1BF4);
	r5 = D(r5, s1_0_1, 0xF5150912, 0x01FCFFF9, 0xF7FEFF09, 0x05F30502);
	r6 = D(r6, s1_0_1, 0xFEFBFB0A, 0x231CDF01, 0x242A012A, 0x150A00E4);
	r7 = D(r7, s1_0_1, 0xF9F7FE0C, 0xF9FCFD0A, 0xEBFAFF06, 0xFD02F60C);
	r0 = D(r0, s1_0_2, 0xF7EDFDFF, 0xFCFC07FA, 0x000304EC, 0xFF000003);
	r1 = D(r1, s1_0_2, 0xF6E717E3, 0xFE03F902, 0xF305FD03, 0xFEFF01FC);
	r2 = D(r2, s1_0_2, 0xF012000E, 0xFDFE0202, 0xFBFF04FF, 0xFB080206);
	r3 = D(r3, s1_0_2, 0x01FAFF08, 0xFDF7000C, 0x0205FFFB, 0x011005F5);
	r4 = D(r4, s1_0_2, 0xF5FE00F8, 0xFB0D01F8, 0xF9FC07FE, 0xFAFE04FC);
	r5 = D(r5, s1_0_2, 0xFC221D18, 0xFEF9F800, 0x04FEFA00, 0xFDF900FF);
	r6 = D(r6, s1_0_2, 0xFEFCFDFD, 0xE914F7D6, 0xF804F9FB, 0x04F5F608);
	r7 = D(r7, s1_0_2, 0x0203FD01, 0xFE000101, 0xFFFE02FD, 0xFE040500);
	r0 = D(r0, s1_1_0, 0xF705ED09, 0x0CFAFFF6, 0x03FAF9F9, 0x010503F9);
	r1 = D(r1, s1_1_0, 0x5EFEC955, 0xFFF70303, 0xFF00E21A, 0x0614FB1D);
	r2 = D(r2, s1_1_0, 0xC416E830, 0xFE010008, 0x0506FE01, 0x0208F90B);
	r3 = D(r3, s1_1_0, 0x0207F609, 0x0CF000FC, 0xF9100307, 0x0FFCFCFB);
	r4 = D(r4, s1_1_0, 0x01FBFBFD, 0x1039F818, 0xFE05F80D, 0x0105FB0F);
	r5 = D(r5, s1_1_0, 0x1528C719, 0x0205FDFB, 0xFCF7FA13, 0x03FF0306);
	r6 = D(r6, s1_1_0, 0x0100F904, 0xFDFC0E2D, 0x3009E827, 0xFB09000A);
	r7 = D(r7, s1_1_0, 0x17F4F3F8, 0x06F9FF0D, 0x0703FA06, 0x010BF909);
	r0 = D(r0, s1_1_1, 0x27541203, 0x06020F13, 0x1525191F, 0x00051009);
	r1 = D(r1, s1_1_1, 0xE023DF45, 0xF2DF010D, 0xF4ED28F1, 0xFF060A08);
	r2 = D(r2, s1_1_1, 0xF442E324, 0x21FD0AFE, 0xEDF5FE17, 0x09ECFAE7);
	r3 = D(r3, s1_1_1, 0x0108F2FD, 0x11EEB710, 0xEE114AF8, 0x00F70A02);
	r4 = D(r4, s1_1_1, 0x12E3FE09, 0xF918162B, 0x28D60019, 0xFF0804EB);
	r5 = D(r5, s1_1_1, 0xD968FDCE, 0x03F9EE19, 0x14FF07ED, 0xFB03F5F6);
	r6 = D(r6, s1_1_1, 0x090208F4, 0x1F50D719, 0xFE09F9BA, 0x22E1E2BC);
	r7 = D(r7, s1_1_1, 0x111409F3, 0x111B151D, 0x22F708E7, 0x1D1F1518);
	r0 = D(r0, s1_1_2, 0xF60B020F, 0x0002FAFD, 0xFEF6F807, 0xFDFD04FB);
	r1 = D(r1, s1_1_2, 0xE217042C, 0x03F209FE, 0x04FD0304, 0x0101FF00);
	r2 = D(r2, s1_1_2, 0xE3FA03D5, 0xFBFC07F4, 0x0010FEFF, 0x00091109);
	r3 = D(r3, s1_1_2, 0xFE030203, 0x03FF0608, 0xF700FC0B, 0xE9A709F6);
	r4 = D(r4, s1_1_2, 0x030307F4, 0x101202EF, 0xFB0102EE, 0xFDFE03FC);
	r5 = D(r5, s1_1_2, 0xD83CF9AC, 0x14080110, 0x0500000C, 0xFFFFF902);
	r6 = D(r6, s1_1_2, 0x01020509, 0x04E80611, 0xFAFC0402, 0x0A13F612);
	r7 = D(r7, s1_1_2, 0xFAFFFDFD, 0xFCF901F5, 0x000101F3, 0xF8EFFFF1);
	r0 = D(r0, s1_2_0, 0x98D44800, 0x02010201, 0x0AFE02F9, 0xFFFFFD07);
	r1 = D(r1, s1_2_0, 0xBE12F61A, 0x0702ED09, 0x04FB09F7, 0x0401F706);
	r2 = D(r2, s1_2_0, 0x0CFEF02F, 0x0103FE0A, 0x0512FE11, 0x010B0002);
	r3 = D(r3, s1_2_0, 0x0600FF05, 0xF70D06FB, 0x05F8FC02, 0xFE04F203);
	r4 = D(r4, s1_2_0, 0x00010004, 0xF72A07FB, 0x0103FEFD, 0x0301FD01);
	r5 = D(r5, s1_2_0, 0xFC123103, 0x0400FA06, 0x0EEA04F1, 0x0FFAF500);
	r6 = D(r6, s1_2_0, 0x00FE03FD, 0xE9F611F0, 0x07F8F2F7, 0x0003FD05);
	r7 = D(r7, s1_2_0, 0xFC070200, 0x0406F806, 0xFC03FF03, 0xFEFCFA04);
	r0 = D(r0, s1_2_1, 0x81855317, 0x03000300, 0x0D000501, 0xFF03FBF3);
	r1 = D(r1, s1_2_1, 0xCE3309BB, 0xFA22FA1A, 0xF00704EC, 0xFC0205F9);
	r2 = D(r2, s1_2_1, 0x0615F7E0, 0x11F6FBFE, 0x01E2FB09, 0x0AED0B1C);
	r3 = D(r3, s1_2_1, 0xFC01FF05, 0x05051203, 0xFEF9F801, 0x0002FC18);
	r4 = D(r4, s1_2_1, 0xFA01FFFF, 0xF3DE1AF2, 0x0402FC06, 0x0004FF02);
	r5 = D(r5, s1_2_1, 0x1FFBF030, 0x0CDE0108, 0x0EF6EF07, 0x06F40201);
	r6 = D(r6, s1_2_1, 0xFA0D04FE, 0x184807EB, 0x02F803F2, 0x14F8FDDF);
	r7 = D(r7, s1_2_1, 0x0B00FDFE, 0x0CF50703, 0xF8090601, 0x11F4F715);
	r0 = D(r0, s1_2_2, 0xC381161F, 0x01010000, 0xFE0600F2, 0xFD020001);
	r1 = D(r1, s1_2_2, 0xC20C07F5, 0xF7150AEF, 0xFA0000FB, 0xFF01FE02);
	r2 = D(r2, s1_2_2, 0x0C0300F1, 0x020205F8, 0x020309F5, 0xF808F0F5);
	r3 = D(r3, s1_2_2, 0xFB01FE04, 0xFEFD04FC, 0x05FFFD09, 0x03ED23F4);
	r4 = D(r4, s1_2_2, 0xFF020202, 0xFE27F5EB, 0xFD0803F7, 0x00FC0200);
	r5 = D(r5, s1_2_2, 0x0B0BE335, 0xF80BF4EE, 0xFCFD02FE, 0x040001FE);
	r6 = D(r6, s1_2_2, 0xF60501FA, 0xEEFA00FA, 0x07FE03F7, 0x1EF5FD12);
	r7 = D(r7, s1_2_2, 0x0500FEFE, 0xFC0502FC, 0xFBFD0303, 0xFE0D07F0);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE00EE0A, 0xFB0009F6, 0x020210F0, 0x0000FFF0);
	r1 = D(r1, s0_0_0, 0x22EBE512, 0x0403FFFF, 0xD3FFEBE6, 0xF9071EEF);
	r2 = D(r2, s0_0_0, 0x08F40613, 0xFB0607FA, 0x01FC050A, 0x01FAFB0C);
	r3 = D(r3, s0_0_0, 0xFB070DFE, 0x080CF701, 0x05F80008, 0x05000201);
	r4 = D(r4, s0_0_0, 0x02010102, 0xF3F5D432, 0xFFFE020E, 0xFFF30E0B);
	r5 = D(r5, s0_0_0, 0xF1F9EF00, 0x00FF0200, 0xF6F90305, 0xFF00F507);
	r6 = D(r6, s0_0_0, 0x01FF0202, 0xF00EEFF0, 0xEB81D3A6, 0x0102F504);
	r7 = D(r7, s0_0_0, 0x0400FF06, 0xF7010DFA, 0x020101F4, 0xFF000906);
	r0 = D(r0, s0_0_1, 0x24FAEAFD, 0xDCF900F3, 0xE9FE1701, 0xEDFCF50A);
	r1 = D(r1, s0_0_1, 0x2EFD2719, 0xFBFDFA01, 0xDA0A040E, 0xFB02FA04);
	r2 = D(r2, s0_0_1, 0xCAE1BC13, 0xFFF90CFE, 0x0E07FF02, 0x0E050201);
	r3 = D(r3, s0_0_1, 0x1E03F2FD, 0xE501FA21, 0x2C0903EA, 0x0EFDF2FE);
	r4 = D(r4, s0_0_1, 0x060BF109, 0x21C73DCA, 0x1FF313F1, 0xE106DEE7);
	r5 = D(r5, s0_0_1, 0xFDD919EA, 0x02FFFD0A, 0x1909FF0B, 0x17030402);
	r6 = D(r6, s0_0_1, 0xFC030005, 0x81C3713E, 0x06F6F6BD, 0x10F2FA01);
	r7 = D(r7, s0_0_1, 0x0F030CF3, 0x1E000300, 0xD40A0AFD, 0x060006FE);
	r0 = D(r0, s0_0_2, 0x2908F908, 0xF0030602, 0x02FFFC01, 0x17030201);
	r1 = D(r1, s0_0_2, 0x81F1E9E7, 0xCB010104, 0x7FFF02FF, 0x3901FE00);
	r2 = D(r2, s0_0_2, 0x8113F92B, 0xA605FFFC, 0xEE000701, 0x0100FA05);
	r3 = D(r3, s0_0_2, 0x3D010402, 0x63040402, 0x9AF8FCFB, 0x81FCF300);
	r4 = D(r4, s0_0_2, 0xE30205FB, 0x7FFE0631, 0xF207FCFC, 0x18030202);
	r5 = D(r5, s0_0_2, 0x811926F3, 0xFFFBFF05, 0x94FD03F8, 0xF7FD0100);
	r6 = D(r6, s0_0_2, 0xFFFF03FF, 0x5FF103F0, 0xEEF6F806, 0xD20AFFF6);
	r7 = D(r7, s0_0_2, 0xFCFEFEFE, 0x3003FFFE, 0x0503FEFC, 0x1703F604);
	r0 = D(r0, s0_1_0, 0xF40111F8, 0x03020206, 0x0403FC11, 0x0004EB1A);
	r1 = D(r1, s0_1_0, 0x02CCEACD, 0xFFFBEE06, 0x11E9D9DC, 0xFDFD1910);
	r2 = D(r2, s0_1_0, 0x10E092EE, 0x020CF504, 0xFD01DD10, 0x030AFAFA);
	r3 = D(r3, s0_1_0, 0xFC08F3F5, 0x0502191D, 0xFD0AE9E0, 0xFEFEF703);
	r4 = D(r4, s0_1_0, 0x0006FA08, 0xFB27EA9A, 0xFB07F6EC, 0xFC07F303);
	r5 = D(r5, s0_1_0, 0xF80A20FB, 0x02FDFA07, 0x0B0E02FB, 0x00FFF3FA);
	r6 = D(r6, s0_1_0, 0x0200FC09, 0x1CEBE016, 0xF0DDE9DE, 0xFB08F7F4);
	r7 = D(r7, s0_1_0, 0x03FE0AFE, 0x00011909, 0xF903ED1D, 0xF701E90D);
	r0 = D(r0, s0_1_1, 0x0DF5DF19, 0xFDFDFEF9, 0xFDE31108, 0x15F106F0);
	r1 = D(r1, s0_1_1, 0xDB8181E8, 0x140310FA, 0xD708EBB6, 0x0AFDF5ED);
	r2 = D(r2, s0_1_1, 0x1D8CFE10, 0x01F10EE6, 0x24F0EEE1, 0x06EE01FC);
	r3 = D(r3, s0_1_1, 0x0AFB17E8, 0xE5F5F7C7, 0x2E0B0E2E, 0xF308EE06);
	r4 = D(r4, s0_1_1, 0x02DD023F, 0x0EA620BF, 0x0AD72618, 0x09FA0124);
	r5 = D(r5, s0_1_1, 0xEDDDE20A, 0x0D110CEF, 0xF8E9F102, 0x02F6F9EF);
	r6 = D(r6, s0_1_1, 0x0CF4FDE0, 0xB89B38A7, 0x0CFB0C1E, 0x0DEF1D08);
	r7 = D(r7, s0_1_1, 0xE9FFFD0C, 0xDBEF0B0A, 0x14BF1026, 0x1CD032D9);
	r0 = D(r0, s0_1_2, 0x180DF61E, 0xFAFFFF02, 0x0C0503FE, 0x1BFEFE04);
	r1 = D(r1, s0_1_2, 0x8122D9F5, 0x810105FD, 0x0EFF0506, 0xF80303FF);
	r2 = D(r2, s0_1_2, 0x03FA2B06, 0x00080501, 0x01FF0A08, 0xF1FBFF01);
	r3 = D(r3, s0_1_2, 0xF8FCFFFF, 0xF70508FF, 0x25FFFC02, 0x7FF90E00);
	r4 = D(r4, s0_1_2, 0x1EF50200, 0xFB0315F2, 0x040B0202, 0xFE020611);
	r5 = D(r5, s0_1_2, 0x14FD02F4, 0x04F4F502, 0xFE0606F1, 0xF600FE02);
	r6 = D(r6, s0_1_2, 0xF9FEF601, 0x1C14FEDF, 0xEF08FEF5, 0x27EA1300);
	r7 = D(r7, s0_1_2, 0x02FE01FF, 0x170600FE, 0x0900FC01, 0xF80B0800);
	r0 = D(r0, s0_2_0, 0x032181E3, 0xFFFE0100, 0xFD0B01F6, 0x000200FC);
	r1 = D(r1, s0_2_0, 0x0B0BF0EA, 0x05F90806, 0x02F7091D, 0xFF0207FC);
	r2 = D(r2, s0_2_0, 0x0B331B06, 0xFD06FCF6, 0xFC0EF2DD, 0x010AFD04);
	r3 = D(r3, s0_2_0, 0xFFFFFF03, 0xFF09FCFA, 0x04F8FF12, 0x010303FF);
	r4 = D(r4, s0_2_0, 0xFFFF0302, 0xE116FDAB, 0x0304FD03, 0xFF030107);
	r5 = D(r5, s0_2_0, 0x1E05F5FA, 0x030AFEFE, 0x00FDFB0D, 0x0006FD08);
	r6 = D(r6, s0_2_0, 0xFF0202FD, 0xF714FE18, 0x03FFFC0F, 0xFF01FF00);
	r7 = D(r7, s0_2_0, 0x0005FFF6, 0xFF0800FE, 0xFE010204, 0x02030301);
	r0 = D(r0, s0_2_1, 0x08E83122, 0xFE000102, 0x03FD0607, 0xFD04F805);
	r1 = D(r1, s0_2_1, 0xEAEF15D8, 0xFFF5FE19, 0x13FEF300, 0xFE0104FF);
	r2 = D(r2, s0_2_1, 0xEF080CBA, 0x01FC0D05, 0x00EC02FA, 0xFFFEFC08);
	r3 = D(r3, s0_2_1, 0x010A04F7, 0x07FCFA06, 0xFB0604EE, 0xFDF414E7);
	r4 = D(r4, s0_2_1, 0x0004FEF2, 0x1EF2EB23, 0xFB030404, 0xFEFFFEFC);
	r5 = D(r5, s0_2_1, 0x00FAFD10, 0x01F0FF13, 0x09F01405, 0x00F2010D);
	r6 = D(r6, s0_2_1, 0xFF05F30E, 0xFEDA10D2, 0xFDF70906, 0xF9000108);
	r7 = D(r7, s0_2_1, 0x0102FF08, 0x02E80AF8, 0xFF03FEF9, 0xFEFE0A11);
	r0 = D(r0, s0_2_2, 0x9D2A0402, 0x01020106, 0x000202FE, 0xFF050306);
	r1 = D(r1, s0_2_2, 0xFFE102E9, 0xE0F2020C, 0xF3FFFFFA, 0x01020201);
	r2 = D(r2, s0_2_2, 0x1F0107EB, 0xFE03FEF5, 0xFBFF0205, 0x000DF9F3);
	r3 = D(r3, s0_2_2, 0xFEFF04FE, 0x04080500, 0xFFFAFAFB, 0xFB05F3EF);
	r4 = D(r4, s0_2_2, 0x000501FD, 0x09FDFCEB, 0x03FD0304, 0xFFFE0002);
	r5 = D(r5, s0_2_2, 0xE2FFEDF7, 0x050AFCF4, 0x02070405, 0xFC0501FC);
	r6 = D(r6, s0_2_2, 0x0305070C, 0x00F7FD06, 0xFEF80301, 0xFC0C03FC);
	r7 = D(r7, s0_2_2, 0x00010105, 0xFE0405FB, 0x02020206, 0x04FD03FF);
	r0 = D(r0, s1_0_0, 0xF1090507, 0x02FF00FC, 0x020405FE, 0xFA000505);
	r1 = D(r1, s1_0_0, 0xF8DAEFD5, 0x04070302, 0x050C02F9, 0xF2F703FC);
	r2 = D(r2, s1_0_0, 0xF3291A1E, 0x000102FC, 0x03FEFBFE, 0xFEFDFDFC);
	r3 = D(r3, s1_0_0, 0x02FF04FA, 0xFB040806, 0x0BF8FA03, 0x00060101);
	r4 = D(r4, s1_0_0, 0x0204FEFF, 0xF516EE06, 0x000100F8, 0x0807F5FA);
	r5 = D(r5, s1_0_0, 0x1727FFD5, 0xFF03FDFF, 0x0C01FDFB, 0xFBFAFEFC);
	r6 = D(r6, s1_0_0, 0xFFFE02FF, 0xEE1212C6, 0xFD818181, 0x01F800FC);
	r7 = D(r7, s1_0_0, 0x0001F9FE, 0xFCFF04FD, 0x0705FAFF, 0xFE02FFFE);
	r0 = D(r0, s1_0_1, 0xE805FFF8, 0x07FE0403, 0xE204EF02, 0xFE05FEFF);
	r1 = D(r1, s1_0_1, 0xC8ECDE08, 0xFA0901FD, 0xF813F8EB, 0xFFFD02FC);
	r2 = D(r2, s1_0_1, 0xD70DE2F1, 0x02020101, 0xFE0300FE, 0xF0FCFFFF);
	r3 = D(r3, s1_0_1, 0x03FE01FC, 0x1A0C05F8, 0xF3F5FD09, 0xFBFEFB03);
	r4 = D(r4, s1_0_1, 0x0404FA05, 0xE41718B3, 0x03FBFC04, 0x070BF006);
	r5 = D(r5, s1_0_1, 0xF12915F7, 0x07F7FBFA, 0xF7FDF9F9, 0xF6000001);
	r6 = D(r6, s1_0_1, 0xFC0300FE, 0xBED1EEEB, 0xDF0CF1FF, 0xF808F808);
	r7 = D(r7, s1_0_1, 0xFAFFFF03, 0xFD03FBFD, 0x0407FC04, 0xFDFEFDFE);
	r0 = D(r0, s1_0_2, 0xF9FDFAFF, 0x04FFFCFC, 0x020500FF, 0xFE02FDFC);
	r1 = D(r1, s1_0_2, 0xCC052422, 0xFF0302FC, 0x040302FD, 0x01FEFE01);
	r2 = D(r2, s1_0_2, 0x11E8EAEC, 0x03FDFFFE, 0x0200FA04, 0xF8FDF902);
	r3 = D(r3, s1_0_2, 0xFDFEFDFE, 0xF8FEF7FD, 0x0B040809, 0x00F50706);
	r4 = D(r4, s1_0_2, 0x1101FC01, 0x01E80409, 0x01FDFEFE, 0x08FFF7FC);
	r5 = D(r5, s1_0_2, 0x0D190E2B, 0xF4FD01FC, 0xFEFE02FF, 0x0200FF05);
	r6 = D(r6, s1_0_2, 0x02000201, 0x0F0AF807, 0x0AFC00F4, 0xF4FBFDF9);
	r7 = D(r7, s1_0_2, 0x07000000, 0x0502FEFF, 0x0EFFFBFE, 0x0200FDFD);
	r0 = D(r0, s1_1_0, 0x1A0E0B02, 0xF900F9FE, 0xF903FBEE, 0xF8040AFC);
	r1 = D(r1, s1_1_0, 0xCF27EA2B, 0xEBFD05F1, 0x0DFE2CF8, 0xF7042BF9);
	r2 = D(r2, s1_1_0, 0xFC05E8AE, 0xFD0107F8, 0xE3FB02FA, 0x01F701FF);
	r3 = D(r3, s1_1_0, 0xFCFF0B00, 0xF6F9EAF8, 0x0C020F08, 0x0105FF02);
	r4 = D(r4, s1_1_0, 0x00FF0400, 0x0A02F5F8, 0xFA000503, 0x05FF0400);
	r5 = D(r5, s1_1_0, 0xFF14E816, 0xF4F8FFFD, 0xDCEFF8F5, 0x0BFC0FFE);
	r6 = D(r6, s1_1_0, 0x070205FD, 0xF9FDFBBC, 0x2E0404F3, 0x0CFA0A00);
	r7 = D(r7, s1_1_0, 0x0901F503, 0xFA040EF7, 0xFAFE01F7, 0xF90306FB);
	r0 = D(r0, s1_1_1, 0xEDF2FFFE, 0xFAFE0801, 0xD4FDFF0D, 0xFBFD0F02);
	r1 = D(r1, s1_1_1, 0x90E2C801, 0xD1FAFDFA, 0x110A03FB, 0xFB0AF803);
	r2 = D(r2, s1_1_1, 0x141D0BED, 0x05FEFF02, 0xFCDF2DF8, 0xF3001100);
	r3 = D(r3, s1_1_1, 0xF8F208FD, 0xEC0D1039, 0x1BF6EFCF, 0x03F9F0FC);
	r4 = D(r4, s1_1_1, 0xEC0505F8, 0xAEC7E4A8, 0x00F409F2, 0xFD040FFE);
	r5 = D(r5, s1_1_1, 0xEFCF1711, 0xFA031001, 0x03EE1AFA, 0xF8EB0907);
	r6 = D(r6, s1_1_1, 0x10FAF60C, 0xE7C217F8, 0xF0EDF9FB, 0x0B0EEC04);
	r7 = D(r7, s1_1_1, 0xF600F90C, 0xF9FCF805, 0xF90AFA02, 0x0AF007FE);
	r0 = D(r0, s1_1_2, 0x0B10F30C, 0x03FFFDFC, 0x0BFC01F9, 0x01FDFE04);
	r1 = D(r1, s1_1_2, 0x13C7CAD6, 0xFDFE0408, 0x02FFF805, 0x03FFFEFC);
	r2 = D(r2, s1_1_2, 0x061F1933, 0x01FDFDFC, 0x0308F903, 0xFCF906FE);
	r3 = D(r3, s1_1_2, 0x01FEFAFB, 0x050203FB, 0xF9FFFA09, 0x09EE0AFB);
	r4 = D(r4, s1_1_2, 0xFA040003, 0x0901181E, 0x0805FF01, 0xFC05FE05);
	r5 = D(r5, s1_1_2, 0x0CD5F2F7, 0xF2F9F7FC, 0xF60F02FB, 0x0604FDFE);
	r6 = D(r6, s1_1_2, 0x0301F801, 0xF6E21C04, 0x050DFA01, 0xEEEA1CF6);
	r7 = D(r7, s1_1_2, 0x04FEFDFD, 0x03FB0101, 0xFF00FB01, 0x070004FF);
	r0 = D(r0, s1_2_0, 0x51C0F9DB, 0xFF01FFFD, 0xFBFF05FF, 0x0302FF01);
	r1 = D(r1, s1_2_0, 0x09F8FDDB, 0x160AFD00, 0xFCF7F602, 0xFEF904FF);
	r2 = D(r2, s1_2_0, 0xF9F1FB0F, 0x00FF0300, 0xF9FC10FE, 0xF90208FB);
	r3 = D(r3, s1_2_0, 0x04000401, 0x03FBF5F5, 0xFDFE0208, 0xFC010309);
	r4 = D(r4, s1_2_0, 0x0302FD02, 0x08FF2511, 0xFC010300, 0x00030202);
	r5 = D(r5, s1_2_0, 0xE8F1F7F4, 0xFE000AFC, 0xF5F913F9, 0xFAFEFFFE);
	r6 = D(r6, s1_2_0, 0x020201FF, 0xE5F2F0FC, 0xF5030116, 0xFCFA04FF);
	r7 = D(r7, s1_2_0, 0x0000FEFD, 0xFFFF0EFC, 0x02040404, 0x00010603);
	r0 = D(r0, s1_2_1, 0x2ED25CA7, 0xFFFF00FF, 0xF1FC0006, 0xF7030202);
	r1 = D(r1, s1_2_1, 0x08262C06, 0x05F1EA12, 0xFD00FCFF, 0x0001FF01);
	r2 = D(r2, s1_2_1, 0xE2E81113, 0xFDFE00FC, 0xF4F6F604, 0xF2FBFBFF);
	r3 = D(r3, s1_2_1, 0x0100FE00, 0x0803FBFC, 0xFBFDFC06, 0xE1FF04FA);
	r4 = D(r4, s1_2_1, 0xFF010301, 0xEAD8060F, 0x01FDFBFF, 0x02000602);
	r5 = D(r5, s1_2_1, 0x0C010CF3, 0xF0FBFDF8, 0xFB0F09F6, 0x02FFF200);
	r6 = D(r6, s1_2_1, 0x04040AFE, 0xE2014027, 0xFDF4F7FF, 0x0701F4FD);
	r7 = D(r7, s1_2_1, 0x0301F8FD, 0xF9FFF9FF, 0x02FF07FE, 0xFEF9F9F7);
	r0 = D(r0, s1_2_2, 0xDC81E913, 0x00FFFEFE, 0x02FDFEF9, 0x0102FCFF);
	r1 = D(r1, s1_2_2, 0xF4052419, 0x0405F001, 0xFBFE0104, 0x0200FDFF);
	r2 = D(r2, s1_2_2, 0xF8E403FB, 0x02FFFEFD, 0xFE00FD00, 0x03FCFAF6);
	r3 = D(r3, s1_2_2, 0x010000FD, 0xFEFCFA00, 0xFC000106, 0x01F8E404);
	r4 = D(r4, s1_2_2, 0xFFFE0001, 0xFC0C2106, 0x00FDFC02, 0xFDFD0201);
	r5 = D(r5, s1_2_2, 0x060F210B, 0x02FC02F9, 0xFDF6FCFF, 0x00FDFFFE);
	r6 = D(r6, s1_2_2, 0xFE0202FF, 0x020DFFF5, 0xFDFD0107, 0xF5EA02FF);
	r7 = D(r7, s1_2_2, 0x02FFFCFF, 0x0401FBFF, 0xFDFF0003, 0x03FFFB00);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF0007FC, 0x050000F8, 0xF902FA09, 0x01FC0701);
	r1 = D(r1, s0_0_0, 0x09F24106, 0xFF03FC02, 0xFE05E70E, 0x00060502);
	r2 = D(r2, s0_0_0, 0x0BFA0EE4, 0xFC05FF01, 0xFFFFFF01, 0x01FF00FF);
	r3 = D(r3, s0_0_0, 0xFD050701, 0xFF0300F6, 0x09F70305, 0xFE0100FE);
	r4 = D(r4, s0_0_0, 0xFF0305FE, 0x01FC1508, 0x0101FE02, 0xFFFF0EF7);
	r5 = D(r5, s0_0_0, 0x00FF1EF8, 0xFEFFFFFF, 0x01FDF900, 0xFE060403);
	r6 = D(r6, s0_0_0, 0xFE03FE01, 0xECFA04F8, 0x8181819F, 0x0503FE03);
	r7 = D(r7, s0_0_0, 0xFE0106F9, 0xFC04FA05, 0x05F907F2, 0xFE020102);
	r0 = D(r0, s0_0_1, 0xFAEC02F4, 0xF4141BFD, 0xF9070803, 0x0CF7FCFF);
	r1 = D(r1, s0_0_1, 0x1F1224E7, 0x04FBFFFE, 0xF203EFE7, 0x070AF809);
	r2 = D(r2, s0_0_1, 0x06FE28EF, 0x02F3FC03, 0x05F80006, 0xFB0501FD);
	r3 = D(r3, s0_0_1, 0x0FEC0A04, 0x10F1DFFE, 0x000422F7, 0xFFF40001);
	r4 = D(r4, s0_0_1, 0x08F10EF3, 0xF5BBF30A, 0xFCF60605, 0x06002DED);
	r5 = D(r5, s0_0_1, 0xEE06FD25, 0xFC080701, 0xFAF20F03, 0x050410F8);
	r6 = D(r6, s0_0_1, 0x00FB03FE, 0x090E0720, 0x0B114DCE, 0xEEF1FF03);
	r7 = D(r7, s0_0_1, 0xF8F816FC, 0x04FEFA07, 0x0AEC1CFA, 0x01F8FB03);
	r0 = D(r0, s0_0_2, 0x0BFDFD03, 0x020EFE02, 0xFDFD0100, 0x010903FE);
	r1 = D(r1, s0_0_2, 0x1DE10019, 0x0000F601, 0x02F4FE05, 0x02FC0200);
	r2 = D(r2, s0_0_2, 0x07341715, 0x00F20502, 0x0313F8FC, 0xFF0D0800);
	r3 = D(r3, s0_0_2, 0xFDF2FFFD, 0xFCF7FDF8, 0x020000FF, 0xFF0306FC);
	r4 = D(r4, s0_0_2, 0x0B060701, 0x1318FA12, 0xFCFC0207, 0x030A0CFF);
	r5 = D(r5, s0_0_2, 0x081E2502, 0xF9FB0000, 0xF70EFF02, 0x020BFD00);
	r6 = D(r6, s0_0_2, 0x04FCF801, 0xEC260E0F, 0xFFFFF80F, 0xFAFB1304);
	r7 = D(r7, s0_0_2, 0xFFFF0301, 0xFFFB0101, 0x010704FD, 0xFE0600FE);
	r0 = D(r0, s0_1_0, 0x1BE4F0FC, 0xFB070CFC, 0xFDF8FF05, 0xF00612FF);
	r1 = D(r1, s0_1_0, 0xF40BF3D7, 0x03FE0106, 0xDC170909, 0x02FAE9FE);
	r2 = D(r2, s0_1_0, 0xD0C2F525, 0xFA03FF05, 0xF30CFF09, 0x02FFFDFF);
	r3 = D(r3, s0_1_0, 0xF507FD0A, 0x22F10CEB, 0xE807F619, 0x0001FCFF);
	r4 = D(r4, s0_1_0, 0x0107FEFA, 0x070ACE28, 0x00FBFD07, 0x04FBF901);
	r5 = D(r5, s0_1_0, 0xD71710E1, 0xFE05FE04, 0xFD050504, 0xFE06FBFD);
	r6 = D(r6, s0_1_0, 0xFB0009FD, 0xF5DBF3FB, 0x090BE6F4, 0xFC0BFD03);
	r7 = D(r7, s0_1_0, 0x0D0002FA, 0xF6F4FA11, 0xF80AFC05, 0xFF01F50B);
	r0 = D(r0, s0_1_1, 0x1E0603FA, 0x09FAEFF7, 0x09F6DEF8, 0xFFF81CFC);
	r1 = D(r1, s0_1_1, 0xECFEFEF7, 0xFA0D1AF5, 0xEC1403E7, 0x0A09FC0A);
	r2 = D(r2, s0_1_1, 0x049FFAED, 0x04F30412, 0x1AED0600, 0x070708EC);
	r3 = D(r3, s0_1_1, 0x0CF90E18, 0xE50C280C, 0x28E2E7E2, 0xF7FEFBF2);
	r4 = D(r4, s0_1_1, 0xF8030701, 0xE004E6E9, 0x0108F809, 0x0809F9F9);
	r5 = D(r5, s0_1_1, 0xFC3228CE, 0x0A0004F3, 0x002C0AEF, 0x2D21FCFE);
	r6 = D(r6, s0_1_1, 0x12FC1DF5, 0x0F00BA3C, 0x203CFA00, 0x07F30AF1);
	r7 = D(r7, s0_1_1, 0x1E08F7F6, 0x010B05FF, 0x0DFEF300, 0xFBF7060E);
	r0 = D(r0, s0_1_2, 0xFF17F9FC, 0xFD07FD02, 0xF71C0107, 0x00FF0801);
	r1 = D(r1, s0_1_2, 0x35293B0B, 0x00E4020D, 0xFE0405FB, 0x010200FF);
	r2 = D(r2, s0_1_2, 0x00D9FC35, 0x01F9FC05, 0xFEFDF7FC, 0xFD0A02F6);
	r3 = D(r3, s0_1_2, 0x02F806FE, 0x02E700F5, 0xFF0AFF05, 0xDE12F1EB);
	r4 = D(r4, s0_1_2, 0x09FAFD02, 0xFCCF0A19, 0xF9FE0107, 0x0108F908);
	r5 = D(r5, s0_1_2, 0x0636F802, 0xF32514EC, 0xFC03FCF7, 0x06F9FC00);
	r6 = D(r6, s0_1_2, 0x020A12FA, 0x0428F81A, 0xFDFBFB02, 0xE6EC15F1);
	r7 = D(r7, s0_1_2, 0x0401FFFF, 0x0002FD0A, 0x020104FF, 0xFAFE010F);
	r0 = D(r0, s0_2_0, 0xBDD7ECEF, 0xFE00FF00, 0xFD080102, 0xFBFBFE04);
	r1 = D(r1, s0_2_0, 0xFC8BED2B, 0xF6FF03F9, 0x0BF9FD05, 0x0A02FA02);
	r2 = D(r2, s0_2_0, 0xF00510FB, 0x02F80003, 0xFE02FA0D, 0xFD0406F9);
	r3 = D(r3, s0_2_0, 0xFBF70203, 0x05FCFCFA, 0x04FB0301, 0x04FD0200);
	r4 = D(r4, s0_2_0, 0xFFFCFE03, 0xDEEEEC35, 0xFEFF0300, 0xF90001FD);
	r5 = D(r5, s0_2_0, 0x19D9EF14, 0xFF0806F8, 0xF7200AF2, 0x090602F6);
	r6 = D(r6, s0_2_0, 0xFCFFFD04, 0x07E30C00, 0x07000CF6, 0x07FBFFFC);
	r7 = D(r7, s0_2_0, 0x00FFFFFE, 0x05F0FC00, 0xFD010000, 0xFEF10400);
	r0 = D(r0, s0_2_1, 0xEAD893B6, 0x02FDFEFE, 0x0CF7FB03, 0xFC08FFF9);
	r1 = D(r1, s0_2_1, 0xDDD3FF0F, 0x121404EE, 0x0D020302, 0xFDFBFF03);
	r2 = D(r2, s0_2_1, 0xF53911D7, 0x02FE0208, 0x160EFF13, 0xFA12FD03);
	r3 = D(r3, s0_2_1, 0x05FCFA05, 0x08F2FFF4, 0x0306FDFC, 0x1FFB02EB);
	r4 = D(r4, s0_2_1, 0xFC050303, 0x312517F8, 0x0206FD06, 0xFC02FE00);
	r5 = D(r5, s0_2_1, 0x19C900E6, 0xFA1B04F7, 0x0707F4E9, 0x05F7FF01);
	r6 = D(r6, s0_2_1, 0x00F2FBF6, 0xEBC7ED29, 0x02090303, 0xF70111F9);
	r7 = D(r7, s0_2_1, 0xFEFA06FC, 0x05F6FD08, 0xFC06FEFB, 0x070DFB06);
	r0 = D(r0, s0_2_2, 0xF911A61C, 0x00FF01FF, 0xFA030609, 0x02040101);
	r1 = D(r1, s0_2_2, 0xFE25133A, 0x1918F6F0, 0x0001FF08, 0xFF000203);
	r2 = D(r2, s0_2_2, 0xF80900F4, 0x01FBFE00, 0xFCF700FB, 0xFE0E0507);
	r3 = D(r3, s0_2_2, 0xFF000103, 0x0304F900, 0x04F805FF, 0x33F7FADD);
	r4 = D(r4, s0_2_2, 0x0001FEFD, 0xF8F2FB14, 0x01050101, 0x0201FE01);
	r5 = D(r5, s0_2_2, 0x00E110FC, 0x02080002, 0xFF0DFF07, 0x00FCFD00);
	r6 = D(r6, s0_2_2, 0x00080006, 0xF80B1406, 0x0800FDF9, 0x0E0BF0FD);
	r7 = D(r7, s0_2_2, 0x0305FDFF, 0xFC030307, 0x0302FD02, 0xFF020103);
	r0 = D(r0, s1_0_0, 0x0E020402, 0xF9FEFCFC, 0x01F310F8, 0x0201FDFA);
	r1 = D(r1, s1_0_0, 0xE5E81C1A, 0x030303FA, 0xFC02F3F8, 0x06FCF9FE);
	r2 = D(r2, s1_0_0, 0x1E28F3DB, 0x00FD0300, 0x0B03FD00, 0xFF000305);
	r3 = D(r3, s1_0_0, 0x03FE0203, 0x0501FAF9, 0xFFF90303, 0x05FFFFFF);
	r4 = D(r4, s1_0_0, 0x07FD03FD, 0x021AF8FE, 0x03FC0603, 0x1DFDE4F4);
	r5 = D(r5, s1_0_0, 0xD0DF1CD0, 0x0403FEFE, 0x0802FC01, 0x01020202);
	r6 = D(r6, s1_0_0, 0x04000100, 0xD70A23B6, 0x82818181, 0x0706FA00);
	r7 = D(r7, s1_0_0, 0x01FFFE03, 0x02F901FD, 0x05F60BFF, 0x03FDFF01);
	r0 = D(r0, s1_0_1, 0x00F20CFF, 0x01FD01F7, 0x0400FC02, 0xFD0303FE);
	r1 = D(r1, s1_0_1, 0xF003FE19, 0xFF0103FC, 0x0401F8FD, 0x05FD00FC);
	r2 = D(r2, s1_0_1, 0xFDFBFCFF, 0x01FA00FF, 0x02FBFFFF, 0x03000204);
	r3 = D(r3, s1_0_1, 0x03FCFF01, 0x030100F1, 0x0401020C, 0x02010401);
	r4 = D(r4, s1_0_1, 0x020504FC, 0x02D62AD5, 0x01ED04FF, 0xFCFE0BFE);
	r5 = D(r5, s1_0_1, 0xD7DE34D8, 0x01FF0309, 0x08F70609, 0x05FEFB01);
	r6 = D(r6, s1_0_1, 0x01030101, 0xF30617DD, 0x07E3FC14, 0x08FFFCFF);
	r7 = D(r7, s1_0_1, 0x0404FF04, 0x04FC0002, 0x0803FDFD, 0x05F8FFFF);
	r0 = D(r0, s1_0_2, 0x050102FD, 0x02010301, 0x04FDFB01, 0x0101FD00);
	r1 = D(r1, s1_0_2, 0x05E304F2, 0x00FE01FE, 0xFEFDFBFF, 0xFFFF0300);
	r2 = D(r2, s1_0_2, 0xF410FF03, 0x01FE0202, 0x04FFFDFC, 0x05FAFFFB);
	r3 = D(r3, s1_0_2, 0x000201FF, 0x0401FC00, 0xFEFC0203, 0x01FB0101);
	r4 = D(r4, s1_0_2, 0x010102FF, 0xF3EE05F1, 0x03FB0104, 0x00FFFF02);
	r5 = D(r5, s1_0_2, 0xF2EE0DF1, 0x06F70205, 0xFFFE0005, 0x01FEFEFF);
	r6 = D(r6, s1_0_2, 0x02FE0300, 0x10FB0DE7, 0x01FFF602, 0x000006FF);
	r7 = D(r7, s1_0_2, 0x01FE01FE, 0x01FEFF02, 0x00FC0104, 0x01FBFE03);
	r0 = D(r0, s1_1_0, 0x1E03DDE9, 0x00F700FE, 0xE8F4AF0C, 0xEDF9F601);
	r1 = D(r1, s1_1_0, 0xC84D8181, 0xFB05060B, 0x10FEE713, 0xD6FAF901);
	r2 = D(r2, s1_1_0, 0x81B3EE13, 0x04FEFD00, 0x13FEF506, 0x0F02FB08);
	r3 = D(r3, s1_1_0, 0x1700ED03, 0xE7F3C7F2, 0x14FFFD0E, 0x0AFC00FF);
	r4 = D(r4, s1_1_0, 0xFCF9F4FE, 0xD1FA81CC, 0x1EFEDDFD, 0xF4F3E9FF);
	r5 = D(r5, s1_1_0, 0xE10691E7, 0xF2FC0B0A, 0x06FC0A10, 0x0FFFF101);
	r6 = D(r6, s1_1_0, 0x02FBFFFD, 0xAE0181EB, 0x0D14D7EE, 0x1004FEFD);
	r7 = D(r7, s1_1_0, 0xF9FEF2F9, 0x0EF8DFFD, 0xC0EAC105, 0x0AF8FB04);
	r0 = D(r0, s1_1_1, 0xFEF8FFD6, 0x00FFFFFD, 0x03F7F7F6, 0xFCFAFAFE);
	r1 = D(r1, s1_1_1, 0xE2FBFAA6, 0x0600FE0B, 0x03F60100, 0xFFFA02FF);
	r2 = D(r2, s1_1_1, 0xB90BF0BF, 0x10F6EF01, 0xFAF31109, 0xFAF803E9);
	r3 = D(r3, s1_1_1, 0xFAFDFD06, 0x1BF8ED37, 0xF8F801D2, 0xF6FE080B);
	r4 = D(r4, s1_1_1, 0xD9F3E102, 0xE4D1A6D6, 0x19F2E00B, 0xF9EC0705);
	r5 = D(r5, s1_1_1, 0xFC0BFAD3, 0x18FFD3F2, 0x07EFFEDF, 0xF7FD03FA);
	r6 = D(r6, s1_1_1, 0xF4FE03FA, 0xC804D4C0, 0x03F3FCFB, 0x14F70705);
	r7 = D(r7, s1_1_1, 0xFFFC0100, 0xFBFA01FC, 0x04EAFF00, 0x07ED0101);
	r0 = D(r0, s1_1_2, 0xF3F8F706, 0xFE02FF01, 0x03FF0106, 0x02FC00FD);
	r1 = D(r1, s1_1_2, 0x06201307, 0x02FA0406, 0x01FDFBFD, 0xFF030000);
	r2 = D(r2, s1_1_2, 0xFFA62CC7, 0x000400FE, 0x01FDFFFB, 0xFFF200F9);
	r3 = D(r3, s1_1_2, 0xFF0101FD, 0x00FBFEF4, 0x01FD0108, 0xFE010100);
	r4 = D(r4, s1_1_2, 0x02F1FFFD, 0x0506F903, 0x01FB0001, 0x00F502F9);
	r5 = D(r5, s1_1_2, 0xF6F8E20C, 0x06F8FCEB, 0x00FF01FC, 0x01FC02FC);
	r6 = D(r6, s1_1_2, 0x02FFFB00, 0xF3FD0FEF, 0xFE01FF0A, 0xFCF6F904);
	r7 = D(r7, s1_1_2, 0xFF000005, 0x02FF0200, 0xFFF401FE, 0x03FB0402);
	r0 = D(r0, s1_2_0, 0xB2C13C81, 0x02FE0100, 0xFFFD0100, 0xFD03FDFC);
	r1 = D(r1, s1_2_0, 0xC9D9160F, 0x0000EEF2, 0xF6FD0A03, 0x05FDF9FF);
	r2 = D(r2, s1_2_0, 0xD813E2E2, 0x0401F6FE, 0xEE00F6F9, 0xFFF600FF);
	r3 = D(r3, s1_2_0, 0x030503FA, 0x13F8E207, 0xFAFF0CFF, 0x0BFAFF00);
	r4 = D(r4, s1_2_0, 0x000201FD, 0xEC0FCDE2, 0x01FF05FD, 0xFFFE01FC);
	r5 = D(r5, s1_2_0, 0xB5DCE818, 0x06F9FD01, 0xE3EFC1E0, 0xFAFC06FE);
	r6 = D(r6, s1_2_0, 0xFBFFFEFE, 0xD3EEC3EF, 0x07F5FB04, 0x0502FCFF);
	r7 = D(r7, s1_2_0, 0xFD00FD02, 0xE4F8E000, 0x05FF01FD, 0x13FFF6F8);
	r0 = D(r0, s1_2_1, 0x15EEEB81, 0x0103FFFD, 0x04FA05F8, 0x01010204);
	r1 = D(r1, s1_2_1, 0xAB0A0FEB, 0xFBFCF1EF, 0x03F904FF, 0x07F900FB);
	r2 = D(r2, s1_2_1, 0x1406F1FD, 0x02F80302, 0x12EEFE08, 0x12FAFCF3);
	r3 = D(r3, s1_2_1, 0xFEFD0502, 0x15F5EEF1, 0xFAFE080E, 0xED040208);
	r4 = D(r4, s1_2_1, 0x010201FC, 0x089710D1, 0xFBFC05FE, 0xFE02FCFE);
	r5 = D(r5, s1_2_1, 0xC0F800F4, 0x08F5E7DE, 0xFCE809ED, 0x07FAF9FE);
	r6 = D(r6, s1_2_1, 0xF6FCF501, 0xF5160AA7, 0x00FCFB0E, 0x0CF30105);
	r7 = D(r7, s1_2_1, 0xFBFA02FF, 0x0BF4FCF9, 0xFF04FDF9, 0x01F7F506);
	r0 = D(r0, s1_2_2, 0xF5AA531A, 0xFF000000, 0x01FBFF06, 0xFE000200);
	r1 = D(r1, s1_2_2, 0xFFDDE8D3, 0xFFF70105, 0x00F9FEFF, 0x00000000);
	r2 = D(r2, s1_2_2, 0x0614FD08, 0x00FF03FE, 0x060300F4, 0xFB05FF07);
	r3 = D(r3, s1_2_2, 0x020101FF, 0x04FBFC00, 0xFFFA0004, 0x0800FAF8);
	r4 = D(r4, s1_2_2, 0x01000200, 0xF811FFEC, 0x01FAFEFE, 0xFFFD0100);
	r5 = D(r5, s1_2_2, 0x12FB0FDD, 0xF7F809FE, 0x040002FB, 0x030202FB);
	r6 = D(r6, s1_2_2, 0x01FD02FD, 0x18E9FA0C, 0x020001F8, 0x0402FEFE);
	r7 = D(r7, s1_2_2, 0x00FE03FA, 0x00FF0106, 0x02FE02FE, 0x01F8FF00);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF106000A, 0x0100FE00, 0x0201FE06, 0xFB01FEFF);
	r1 = D(r1, s0_0_0, 0xFB0B1634, 0xFC01FE03, 0xE2FC0801, 0xFFFE0804);
	r2 = D(r2, s0_0_0, 0x05FB10CE, 0xFF0100FE, 0x01010001, 0xFC02FCF3);
	r3 = D(r3, s0_0_0, 0xFEFF02FC, 0x04FFFC00, 0x0301FFFD, 0x01FE0103);
	r4 = D(r4, s0_0_0, 0x0200FFFB, 0xFD0303DE, 0x010103F1, 0xFFFCF9FC);
	r5 = D(r5, s0_0_0, 0xDAF2F51D, 0xF90000FE, 0xFC050001, 0xFC0104FF);
	r6 = D(r6, s0_0_0, 0x02010000, 0x0B1EE81E, 0xEE8B810D, 0xFD00FFE3);
	r7 = D(r7, s0_0_0, 0x06FE02FC, 0xFF010607, 0x050001FC, 0x010103FB);
	r0 = D(r0, s0_0_1, 0x08FC11F7, 0xFEFEFEFE, 0xFEFFEBF6, 0xFD01F9FE);
	r1 = D(r1, s0_0_1, 0x0BFCF11C, 0xFC03F902, 0x0701E9DC, 0xFEFFEBFE);
	r2 = D(r2, s0_0_1, 0xF90F0381, 0xFF02FE02, 0xFD010904, 0x04FE09FF);
	r3 = D(r3, s0_0_1, 0xFD03FA01, 0xF9FDF1FA, 0x09030205, 0x01FFFF02);
	r4 = D(r4, s0_0_1, 0xFB01EB00, 0x0102C73B, 0xFF04FE01, 0xF10881FC);
	r5 = D(r5, s0_0_1, 0x19F9CBF3, 0x0104FFFC, 0x01FD0800, 0x03FF0103);
	r6 = D(r6, s0_0_1, 0xFD00FAFE, 0x040481D1, 0xF10812F3, 0xF9FD0606);
	r7 = D(r7, s0_0_1, 0xFBFFFE02, 0xFEFD07FB, 0xF4FFE5FE, 0xFF010502);
	r0 = D(r0, s0_0_2, 0x13FAF306, 0x01FDFB02, 0x00FE0205, 0x01020400);
	r1 = D(r1, s0_0_2, 0xECF5FD43, 0xFD02F600, 0x03FE0603, 0x01000100);
	r2 = D(r2, s0_0_2, 0x0D041881, 0xFFFE0204, 0x00FFFDF7, 0xFF00F5FA);
	r3 = D(r3, s0_0_2, 0xFF02FF00, 0x01040004, 0x0000FCFD, 0xFC01FD04);
	r4 = D(r4, s0_0_2, 0xFD02FAFF, 0x0A1B03E3, 0xFFF9FA03, 0x02F8FC00);
	r5 = D(r5, s0_0_2, 0x06C9A418, 0x0000FF04, 0xFCFFF801, 0x01000200);
	r6 = D(r6, s0_0_2, 0x010100FF, 0x1411F627, 0x0CF106F9, 0x0605030C);
	r7 = D(r7, s0_0_2, 0xFF0003FE, 0x00FFFC03, 0xFF00FD01, 0x0200FF01);
	r0 = D(r0, s0_1_0, 0xD70A06EC, 0x09F7FD00, 0x1300F4FC, 0x00FDFDFD);
	r1 = D(r1, s0_1_0, 0x45D7AF88, 0xF004FC08, 0x40F20804, 0x13050002);
	r2 = D(r2, s0_1_0, 0x310BC950, 0xFD0000FD, 0xFD0004F7, 0xF2FF01F6);
	r3 = D(r3, s0_1_0, 0x02FB0205, 0x0F10F4FA, 0xF9F70601, 0x04000303);
	r4 = D(r4, s0_1_0, 0x0800FCF9, 0xE2FE1106, 0xFB0003F7, 0xB8F608F8);
	r5 = D(r5, s0_1_0, 0x29150581, 0x090300F6, 0xFDFF04FB, 0x020005FE);
	r6 = D(r6, s0_1_0, 0x0501FEFE, 0x130209FA, 0x2A25FFF0, 0xE7FF0106);
	r7 = D(r7, s0_1_0, 0x0AFDF601, 0x05090005, 0x20040201, 0x01FD05EB);
	r0 = D(r0, s0_1_1, 0x0B189BF5, 0x13EBFCFA, 0x17F2EBF3, 0x0400EBFF);
	r1 = D(r1, s0_1_1, 0x12F781DB, 0xFD030602, 0xFAE1F2E6, 0x02F4C1F9);
	r2 = D(r2, s0_1_1, 0x32F1BB1E, 0x0600E404, 0x040AE708, 0x040FF706);
	r3 = D(r3, s0_1_1, 0x03F4F001, 0xF9252E01, 0x0FE6CCF9, 0x00FA01FC);
	r4 = D(r4, s0_1_1, 0x1808CF00, 0x42BFE5E5, 0x24EDD50C, 0x15FA05FF);
	r5 = D(r5, s0_1_1, 0x26E681DA, 0xF0F7FC05, 0xFE08B703, 0x08F8EE03);
	r6 = D(r6, s0_1_1, 0x0107E504, 0x3CDA81DB, 0x2019DAFE, 0xFD02FBFC);
	r7 = D(r7, s0_1_1, 0x0900EE01, 0x0408C1F3, 0x19F6C705, 0x0A10CE02);
	r0 = D(r0, s0_1_2, 0xF406EE07, 0x040C0702, 0xFA06FF04, 0x0201FDFF);
	r1 = D(r1, s0_1_2, 0x1703C7AE, 0xFF020707, 0xF707FCFE, 0xFC030002);
	r2 = D(r2, s0_1_2, 0x0EC0B436, 0xFE03F003, 0x01FBEDF2, 0x04F3E5F4);
	r3 = D(r3, s0_1_2, 0xFDFCFD02, 0x0602ECFF, 0xFCFD0A02, 0xF9F501F0);
	r4 = D(r4, s0_1_2, 0x06EFF2FD, 0xF604E7F9, 0xF9FF0203, 0xFD000701);
	r5 = D(r5, s0_1_2, 0x1FE1A281, 0xFF0FBCEB, 0x05F7EFFA, 0x0105FBFC);
	r6 = D(r6, s0_1_2, 0xFF09EDFF, 0xDCF70A03, 0x08021201, 0x0FF8D40D);
	r7 = D(r7, s0_1_2, 0x02020101, 0xFE00FF02, 0x01F30C00, 0xFCF6F405);
	r0 = D(r0, s0_2_0, 0x0781FEEB, 0x2EFE0101, 0xC40200FC, 0x81070202);
	r1 = D(r1, s0_2_0, 0x2A420458, 0x10F904EC, 0x22E70119, 0x08FE00F7);
	r2 = D(r2, s0_2_0, 0x811DEC81, 0xD4070203, 0x810B05F6, 0xFE03FEFD);
	r3 = D(r3, s0_2_0, 0xBD05FF04, 0x61EF03F3, 0x2812000B, 0x1F0200FE);
	r4 = D(r4, s0_2_0, 0x810604FD, 0x810EFC07, 0xC204FF00, 0x810B00FB);
	r5 = D(r5, s0_2_0, 0x8107FE0F, 0xFD01FC00, 0x3A11EE08, 0x1B07FF06);
	r6 = D(r6, s0_2_0, 0xD702FFFE, 0xE0F7F142, 0x37EBFDF9, 0xBA0901FF);
	r7 = D(r7, s0_2_0, 0x20FC05FE, 0x180301F6, 0x831104EE, 0xA809FDFE);
	r0 = D(r0, s0_2_1, 0x05EF81E6, 0xFBF80600, 0x0B010006, 0x132C07FC);
	r1 = D(r1, s0_2_1, 0x450D003A, 0x2100B9DE, 0x03FEFFFE, 0x01040100);
	r2 = D(r2, s0_2_1, 0x21E60081, 0x0DEDF605, 0x03F9EE0B, 0x1FECF703);
	r3 = D(r3, s0_2_1, 0xFAFCFE01, 0xE2FFF50A, 0x36FC07F1, 0x7FF7FF02);
	r4 = D(r4, s0_2_1, 0xFA1A01FA, 0xD896E245, 0xFE030108, 0xFEFA00FB);
	r5 = D(r5, s0_2_1, 0x33F2EBCF, 0x160EE40B, 0x14DBC1F6, 0xFBFFF901);
	r6 = D(r6, s0_2_1, 0x0FED0705, 0x2F24F3CF, 0x12DAFCFE, 0x74FE01FC);
	r7 = D(r7, s0_2_1, 0xFFFCFA01, 0x15DEEEFC, 0xF20901F8, 0x1CE0FD0D);
	r0 = D(r0, s0_2_2, 0x3B2F810E, 0xFB000001, 0xFCEFFE08, 0x00040103);
	r1 = D(r1, s0_2_2, 0xEC031C34, 0x0405EDF6, 0x04FBFE06, 0x01FF0100);
	r2 = D(r2, s0_2_2, 0xEA26F1C0, 0x00FFFDFD, 0x0100FCF6, 0x010307FB);
	r3 = D(r3, s0_2_2, 0xFD0102FB, 0x06FDFDFB, 0x04FCFC0A, 0x1D00F7E8);
	r4 = D(r4, s0_2_2, 0xFC0C0103, 0x05090ACC, 0x04FD03FB, 0x0000FE00);
	r5 = D(r5, s0_2_2, 0xED04F624, 0x0C0402F7, 0x02190900, 0x000D02FC);
	r6 = D(r6, s0_2_2, 0x01090403, 0xF9DBE334, 0x060C05FF, 0x35F7F815);
	r7 = D(r7, s0_2_2, 0xFC0A0203, 0xFE050303, 0xFC02FF02, 0x000708FB);
	r0 = D(r0, s1_0_0, 0x00D7FA09, 0x0403FF01, 0x00FDFF03, 0xFF03FF01);
	r1 = D(r1, s1_0_0, 0x142F4FF4, 0x000B02FD, 0x120814F0, 0xFEFF02FC);
	r2 = D(r2, s1_0_0, 0x0413DACB, 0xFE010302, 0x00FFFEF9, 0xFCFF00FF);
	r3 = D(r3, s1_0_0, 0xFF0202FD, 0x02FEFC07, 0x09FE01F8, 0x040300FD);
	r4 = D(r4, s1_0_0, 0xFE010203, 0x083516BF, 0xFFFD0001, 0x020DEDFE);
	r5 = D(r5, s1_0_0, 0xFACE0BD5, 0xFB0302FF, 0xF6FD0101, 0xFC0004FB);
	r6 = D(r6, s1_0_0, 0xFCFF0103, 0x250C1C81, 0x81D78181, 0x0006FC01);
	r7 = D(r7, s1_0_0, 0xFCFD0200, 0xFFFF0205, 0xFE03FAFB, 0xFCFF0001);
	r0 = D(r0, s1_0_1, 0x12EEF6F0, 0xFB02FEFA, 0x04010202, 0xFF03FDFC);
	r1 = D(r1, s1_0_1, 0xC718E54B, 0x000600FB, 0xFBFF0005, 0x00FD0403);
	r2 = D(r2, s1_0_1, 0x0F0CD6D4, 0x0102F7FE, 0xFF01FAFB, 0x06FFFF05);
	r3 = D(r3, s1_0_1, 0xFB04F3FE, 0x1101F7FA, 0xF3FDFD06, 0x0700FEFB);
	r4 = D(r4, s1_0_1, 0x0201E0F5, 0x02C4DCEB, 0xFF02D3F8, 0xFE0FF1FC);
	r5 = D(r5, s1_0_1, 0x0ED4EEFE, 0xFCFF0B06, 0x040B05FF, 0xFE01FFFC);
	r6 = D(r6, s1_0_1, 0x0200FD01, 0xEB242509, 0xF506EEF7, 0x0005F604);
	r7 = D(r7, s1_0_1, 0x07FEF901, 0x070104FE, 0x0801F8F6, 0x06FCF0FF);
	r0 = D(r0, s1_0_2, 0x0C03F809, 0xFE0004FB, 0x01020103, 0x00000000);
	r1 = D(r1, s1_0_2, 0x0813FE00, 0xFF090001, 0x0E07FB00, 0x0000FD01);
	r2 = D(r2, s1_0_2, 0xED090A08, 0x02030603, 0xFE000A03, 0xFE0006FE);
	r3 = D(r3, s1_0_2, 0x0201FB04, 0x04FCF4FD, 0x04000302, 0x01FF0306);
	r4 = D(r4, s1_0_2, 0x03FF04FE, 0xF7121B0E, 0x03FF07FF, 0x04FF0800);
	r5 = D(r5, s1_0_2, 0xFEBCFD02, 0x0903FC03, 0x04030205, 0x000001FF);
	r6 = D(r6, s1_0_2, 0x0401FEFF, 0x06F315E9, 0x06FB0304, 0x000300F8);
	r7 = D(r7, s1_0_2, 0xFEFE0100, 0xFF000003, 0x02FD0103, 0x01FE01FE);
	r0 = D(r0, s1_1_0, 0xFF180403, 0x000000FE, 0x09DCFEFF, 0x05FAFBFE);
	r1 = D(r1, s1_1_0, 0xFE0381C6, 0x00F9FFFE, 0x0CC1FDE9, 0x0905FD02);
	r2 = D(r2, s1_1_0, 0x1009F704, 0x04FFFBFF, 0x0202FC00, 0x0105FE04);
	r3 = D(r3, s1_1_0, 0x0704FF02, 0x14FA0CFB, 0xF4FFFAFF, 0x00FAFEFE);
	r4 = D(r4, s1_1_0, 0x03070601, 0x0A2CE5FC, 0x09080401, 0x04090304);
	r5 = D(r5, s1_1_0, 0x210D1501, 0x01FC0103, 0x10FB0104, 0x0602FFF9);
	r6 = D(r6, s1_1_0, 0x03FD03FF, 0x32D51181, 0xF1F61200, 0x0508FCFC);
	r7 = D(r7, s1_1_0, 0xFB02F804, 0x0301FBFD, 0x01020305, 0x080206FF);
	r0 = D(r0, s1_1_1, 0xDC24EBF6, 0x0201FFFD, 0xFA0F08F4, 0xFCF9FE01);
	r1 = D(r1, s1_1_1, 0xF24CC2D3, 0x08060511, 0xF5FE0611, 0xF8FA06FC);
	r2 = D(r2, s1_1_1, 0xF900E5F5, 0xFEFFEDF7, 0x09FCF7F9, 0x01FDF9FD);
	r3 = D(r3, s1_1_1, 0x00FAFAFB, 0xD3E8F8D9, 0x2C14FF25, 0xFD0102F8);
	r4 = D(r4, s1_1_1, 0xFEF30106, 0xFFA4EA81, 0x01CDEBFB, 0x05FD0904);
	r5 = D(r5, s1_1_1, 0x1B10B9C0, 0x1007ECFB, 0x040CEE06, 0x040402F7);
	r6 = D(r6, s1_1_1, 0xFB0EE8FD, 0xC52EEB0B, 0x17001000, 0xFAEA0A01);
	r7 = D(r7, s1_1_1, 0xFB0CF802, 0xFA0007FF, 0xFCFF1708, 0xF9F9C6F1);
	r0 = D(r0, s1_1_2, 0xD8130C17, 0x05FE02F7, 0x06F9F6F5, 0xFDF70305);
	r1 = D(r1, s1_1_2, 0x1EFE30E6, 0x06F70102, 0x08F50104, 0x01FCFD04);
	r2 = D(r2, s1_1_2, 0xFD072412, 0x03050603, 0xFC030503, 0xF90502FB);
	r3 = D(r3, s1_1_2, 0xFE040006, 0x07F80217, 0x0000FEED, 0x05030000);
	r4 = D(r4, s1_1_2, 0xFB030A06, 0xEB180318, 0x030403FE, 0xFC000009);
	r5 = D(r5, s1_1_2, 0x060F0481, 0xF60304FE, 0xF9FBFEF6, 0xFD010108);
	r6 = D(r6, s1_1_2, 0xFDFFFFFF, 0xF9C700D2, 0x03FA05F5, 0x0C04F9EA);
	r7 = D(r7, s1_1_2, 0x0304FEFC, 0x06FEFFFD, 0xFF020307, 0x070108FD);
	r0 = D(r0, s1_2_0, 0xED42FDF2, 0xFF02FDFF, 0x03F9FE03, 0x00010201);
	r1 = D(r1, s1_2_0, 0x121B070C, 0xFF1E0106, 0x01080FFD, 0x00F704FE);
	r2 = D(r2, s1_2_0, 0x006805FA, 0x04000200, 0x040A04FC, 0x03FD04FD);
	r3 = D(r3, s1_2_0, 0xFC0600FE, 0x06FC01FA, 0x01F50000, 0x000103FD);
	r4 = D(r4, s1_2_0, 0xFFFFFD01, 0x040D2301, 0x00FF02FF, 0xFE0001FE);
	r5 = D(r5, s1_2_0, 0x06F309F7, 0x04040000, 0xFDFDFAFE, 0x00020200);
	r6 = D(r6, s1_2_0, 0xFF040102, 0x0D8106EA, 0x000EFF03, 0x021003FF);
	r7 = D(r7, s1_2_0, 0x040102FF, 0x08FF0104, 0x0107FFFF, 0x020500FF);
	r0 = D(r0, s1_2_1, 0x1C2009DE, 0xFFFB0102, 0xFE030C04, 0x05F903FF);
	r1 = D(r1, s1_2_1, 0x08070913, 0xFD09BAF6, 0xF7020A05, 0x010703FE);
	r2 = D(r2, s1_2_1, 0xFF4702E8, 0x0205FE01, 0xFC07FEF6, 0xF8FFF5FF);
	r3 = D(r3, s1_2_1, 0xFF03FAFD, 0x0811FF10, 0xFAF0FEF3, 0x00B503FA);
	r4 = D(r4, s1_2_1, 0x0402FD01, 0xD799E4B8, 0x02F40201, 0xFFFF00FD);
	r5 = D(r5, s1_2_1, 0xDF47FC00, 0xF505F6FD, 0xFDFB07F2, 0xFA05FE05);
	r6 = D(r6, s1_2_1, 0x05040705, 0xBD2B40F3, 0xFEFDFFFD, 0xFF0402FD);
	r7 = D(r7, s1_2_1, 0x00060204, 0xF90C0A03, 0x05FFFDFE, 0x02F8FD00);
	r0 = D(r0, s1_2_2, 0x2581DD81, 0xFEFB0002, 0xFFF8FF00, 0xFFFD00FB);
	r1 = D(r1, s1_2_2, 0x06DE031F, 0xFC140FEA, 0x050C0700, 0x00FAFF02);
	r2 = D(r2, s1_2_2, 0x03481AC4, 0xFCFB0302, 0xFC04030B, 0x0E0CFAF8);
	r3 = D(r3, s1_2_2, 0xFEFF0002, 0x0401FD02, 0x01F503FD, 0xF8B109F7);
	r4 = D(r4, s1_2_2, 0x0100FEFF, 0xE01424E6, 0xFF040101, 0xFFFE0202);
	r5 = D(r5, s1_2_2, 0x05010600, 0x0E0201FC, 0x0CFFFEFA, 0x01FE0107);
	r6 = D(r6, s1_2_2, 0xFF030101, 0x0809F7A1, 0xFEF30405, 0xF907FBEA);
	r7 = D(r7, s1_2_2, 0xFFF90106, 0x030101FD, 0xFBFE0003, 0xFF040505);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.835e-02, -3.086e-03, -5.523e-03, -4.839e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-5.018e-02, -6.149e-03, -3.114e-03, -9.951e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.278e-02, -1.409e-03, -1.339e-02, -6.563e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-4.547e-03, -1.525e-02, -7.200e-03, -8.397e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.924e-03, -2.471e-02, -1.321e-02, -1.188e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-2.360e-02, -9.118e-03, -1.053e-02, -3.653e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.247e-03, -3.320e-02, -1.202e-04, -1.242e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-4.668e-03, -9.759e-03, -8.849e-03, -1.478e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_DS_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv8_pt;
			V4 sr0 = V4(conv8_gather(p, 0));
			V4 sg0 = V4(conv8_gather(p, 1));
			V4 sb0 = V4(conv8_gather(p, 2));
			V4 sa0 = V4(conv8_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv8_pt;
			V4 sr1 = V4(conv8_gather(p, 0));
			V4 sg1 = V4(conv8_gather(p, 1));
			V4 sb1 = V4(conv8_gather(p, 2));
			V4 sa1 = V4(conv8_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.674e-02, 8.406e-03, 4.444e-03, 3.987e-03, 3.693e-03, 1.436e-04, -7.025e-04, 8.679e-05, -3.396e-03, -1.556e-03, -2.730e-03, -6.261e-04, 1.886e-02, 1.076e-03, 2.247e-03, 6.773e-04) * s0_0_0;
	r0 += M4(1.563e-01, 1.232e-01, 1.370e-03, -1.025e-04, 5.631e-03, 4.608e-03, -2.298e-03, -1.253e-03, 1.759e-02, -4.947e-03, 2.271e-04, -3.162e-04, 5.607e-02, 5.066e-02, 1.098e-03, 2.428e-03) * s0_0_1;
	r0 += M4(6.258e-03, 6.955e-02, 1.929e-02, 1.752e-02, 2.328e-03, -1.511e-04, -1.378e-03, -1.564e-03, 3.501e-03, -8.388e-03, -9.710e-04, -1.495e-04, 5.812e-03, 2.672e-02, -5.949e-04, -9.849e-04) * s0_0_2;
	r0 += M4(2.187e-02, -6.411e-03, -3.566e-02, 1.910e-02, 4.873e-02, 2.779e-03, 1.053e-02, 1.429e-03, 1.654e-02, -1.075e-02, 1.908e-02, -8.192e-03, 1.825e-02, 4.404e-03, 3.166e-02, 3.127e-03) * s0_1_0;
	r0 += M4(6.792e-02, 6.796e-02, -2.123e-01, -2.366e-01, -4.452e-02, 9.468e-02, 1.395e-02, 2.123e-02, -2.274e-01, 2.038e-01, -9.643e-02, 8.226e-02, -1.804e-01, -8.374e-02, 1.327e-01, 1.150e-01) * s0_1_1;
	r0 += M4(-1.270e-03, 2.712e-02, -7.881e-03, -4.244e-02, -4.848e-03, -6.041e-02, 2.036e-04, -1.286e-02, 9.308e-03, -1.505e-02, 5.844e-03, -5.865e-03, 1.090e-02, -2.547e-02, 1.048e-02, 4.365e-02) * s0_1_2;
	r0 += M4(5.809e-04, 3.724e-04, 4.410e-03, -1.147e-03, 5.359e-02, 6.467e-03, 8.374e-02, 6.554e-03, -4.855e-03, -2.574e-03, -2.739e-03, -5.102e-03, 3.479e-03, -3.018e-03, -2.093e-02, -2.570e-03) * s0_2_0;
	r0 += M4(-1.085e-03, -1.238e-03, 5.269e-03, 8.209e-03, -7.084e-02, -5.154e-02, -1.237e-01, 5.799e-02, -7.093e-04, -1.293e-03, -1.779e-02, 4.601e-02, 1.036e-02, 5.979e-03, -5.725e-02, -5.431e-02) * s0_2_1;
	r0 += M4(-3.311e-04, -6.937e-04, -3.441e-03, -6.532e-04, 4.395e-03, -1.016e-02, 1.888e-03, -6.468e-02, -6.099e-04, 8.623e-04, 3.350e-06, -2.387e-02, -1.598e-03, 5.659e-04, -9.543e-03, -3.699e-02) * s0_2_2;
	r0 += M4(-1.798e-03, -1.598e-03, 3.058e-03, 2.524e-03, 1.186e-01, 2.096e-02, -9.005e-02, 1.322e-02, -1.482e-03, -5.111e-05, 6.209e-06, -3.316e-04, -4.007e-03, 7.826e-04, 4.388e-05, -4.459e-04) * s1_0_0;
	r0 += M4(-1.151e-03, 3.055e-04, 5.297e-03, 5.247e-03, 7.660e-02, 1.772e-01, -5.817e-02, -1.743e-01, -3.613e-03, -1.322e-03, 9.681e-04, -9.408e-04, 1.432e-02, -5.729e-03, -5.289e-03, -1.430e-03) * s1_0_1;
	r0 += M4(-3.589e-03, -3.635e-03, 6.431e-03, 5.946e-03, 4.638e-03, 7.203e-03, -1.258e-04, 4.865e-03, 4.545e-04, -8.848e-03, 3.742e-03, 2.545e-03, -1.507e-03, 2.082e-02, 1.749e-03, 3.842e-03) * s1_0_2;
	r0 += M4(1.467e-01, 9.386e-02, -1.686e-01, -9.830e-02, -4.861e-03, -2.709e-03, -1.606e-02, 8.921e-04, -2.516e-03, -1.615e-03, -1.281e-03, -8.569e-04, -9.303e-04, -4.767e-04, -1.358e-03, 1.991e-03) * s1_1_0;
	r0 += M4(2.174e-01, 1.902e-01, -2.035e-01, -1.990e-01, -7.797e-03, -5.605e-03, -9.235e-03, -2.355e-02, -1.823e-02, -5.170e-05, -1.356e-02, -9.920e-05, -2.280e-01, 5.790e-03, -1.194e-01, -1.834e-02) * s1_1_1;
	r0 += M4(1.230e-01, 2.052e-01, -1.375e-01, -2.069e-01, 9.458e-04, -2.555e-03, 1.712e-03, -1.197e-03, -2.690e-02, -4.452e-02, -2.188e-02, -3.666e-02, 1.361e-03, 1.664e-01, -3.502e-03, 1.380e-01) * s1_1_2;
	r0 += M4(-6.777e-03, -2.669e-03, 2.572e-03, 6.547e-03, -6.422e-04, -1.772e-04, -2.223e-04, -3.104e-04, -4.477e-05, -7.792e-04, -9.752e-04, -1.411e-03, 4.686e-03, 1.581e-03, 9.551e-04, 3.460e-04) * s1_2_0;
	r0 += M4(-6.017e-03, -7.655e-03, 3.092e-03, 1.138e-03, 2.275e-04, -6.993e-05, -7.207e-04, -5.088e-04, 7.284e-04, -4.316e-04, -6.330e-03, 2.107e-06, -2.241e-04, 1.783e-03, -2.709e-02, -8.095e-03) * s1_2_1;
	r0 += M4(-7.767e-03, -9.199e-03, 5.108e-03, 2.639e-03, -3.179e-05, 8.238e-05, -5.164e-04, -1.159e-03, 2.597e-04, 1.423e-04, -8.359e-03, -1.388e-02, 6.765e-04, 1.236e-02, 4.929e-03, 4.566e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(8.492e-04, 6.503e-03, -6.558e-03, -5.393e-03, -1.042e-02, 1.644e-02, 8.718e-03, 1.703e-03, -3.210e-02, 1.215e-02, 4.705e-03, 4.437e-03, 7.877e-02, 6.273e-03, 1.727e-02, -5.682e-03) * s0_0_0;
	r0 += M4(-6.485e-03, -7.266e-03, -5.535e-03, -4.531e-03, 3.325e-02, -9.559e-02, 7.078e-03, 7.244e-03, 1.234e-01, -1.414e-01, -2.675e-04, -2.863e-02, -3.826e-02, -1.703e-02, -9.270e-03, 3.506e-02) * s0_0_1;
	r0 += M4(1.125e-03, -1.787e-03, -3.627e-03, -6.146e-03, 1.593e-04, 1.788e-02, 1.770e-03, 2.323e-03, -1.547e-04, 2.823e-02, 7.378e-04, 1.517e-02, -1.826e-03, 8.814e-03, 2.764e-03, 4.301e-03) * s0_0_2;
	r0 += M4(-1.105e-01, -5.874e-02, 1.160e-01, 5.996e-02, 9.920e-02, 2.875e-02, 5.774e-02, 3.724e-02, 3.818e-03, 1.537e-03, -3.965e-02, 1.009e-02, -1.309e-01, 4.970e-02, 3.333e-02, 6.303e-02) * s0_1_0;
	r0 += M4(-1.377e-01, -1.397e-01, 1.489e-01, 1.548e-01, -4.883e-02, -7.858e-02, 3.985e-03, -2.525e-01, 1.684e-02, 1.419e-02, 1.625e-01, -9.929e-02, 6.082e-02, -2.395e-02, 2.887e-02, -2.004e-01) * s0_1_1;
	r0 += M4(-6.957e-02, -1.251e-01, 6.958e-02, 1.232e-01, 3.763e-03, 8.313e-04, 1.818e-04, 3.287e-02, -3.474e-03, -1.024e-02, -1.242e-02, 3.349e-03, -9.800e-04, 5.468e-03, -1.035e-03, 1.393e-02) * s0_1_2;
	r0 += M4(2.471e-03, 2.370e-03, -1.927e-03, 2.062e-04, 2.762e-03, 9.056e-04, 2.891e-02, 3.538e-03, 4.498e-04, -2.194e-04, -2.461e-03, -3.895e-03, 4.812e-03, 1.364e-03, -1.673e-02, 1.796e-03) * s0_2_0;
	r0 += M4(3.324e-03, 1.093e-03, 2.645e-03, 1.280e-03, 5.722e-03, 6.679e-05, 8.590e-03, 2.430e-02, 1.156e-03, -3.699e-03, 2.914e-03, 7.873e-03, 2.917e-04, 6.503e-03, 4.494e-03, 1.600e-02) * s0_2_1;
	r0 += M4(1.410e-03, 4.899e-03, 1.469e-03, 7.463e-04, -1.378e-03, -2.906e-03, 2.310e-03, -1.904e-02, 1.243e-04, -3.982e-04, 4.942e-04, 3.849e-03, 1.126e-04, 2.645e-04, -9.868e-05, 2.834e-03) * s0_2_2;
	r0 += M4(4.209e-03, -8.895e-03, -3.634e-03, -4.800e-04, -5.813e-03, -8.503e-04, -5.682e-04, 2.183e-05, 7.237e-03, -9.250e-05, 2.060e-05, -3.175e-04, 5.400e-02, 3.126e-02, 3.583e-02, 2.484e-02) * s1_0_0;
	r0 += M4(3.209e-02, 4.431e-02, 6.821e-04, 2.907e-03, -1.741e-02, -1.666e-02, -1.109e-03, -1.125e-03, 1.982e-02, 2.019e-02, -2.581e-04, 2.455e-05, -3.253e-03, 3.194e-02, -5.048e-04, 1.368e-02) * s1_0_1;
	r0 += M4(-1.758e-03, 1.228e-02, 3.495e-04, -8.672e-04, -3.899e-04, -6.208e-03, -5.577e-04, -7.416e-04, 3.026e-05, 5.990e-03, -2.465e-04, -3.098e-04, -3.161e-04, -3.825e-03, 6.850e-04, -3.039e-03) * s1_0_2;
	r0 += M4(-1.091e-01, -9.211e-03, -7.436e-02, -1.804e-02, -1.627e-02, -1.082e-03, -1.727e-02, -1.478e-03, 2.129e-02, 1.432e-03, 2.125e-02, 1.108e-03, 4.283e-03, 3.536e-03, 2.422e-02, 1.089e-02) * s1_1_0;
	r0 += M4(9.834e-02, -1.177e-01, 1.199e-01, 2.540e-02, -4.881e-02, -4.724e-02, -4.895e-02, -4.773e-02, 5.528e-02, 5.749e-02, 5.711e-02, 5.822e-02, -2.015e-03, -6.921e-05, -1.023e-03, 1.776e-02) * s1_1_1;
	r0 += M4(3.353e-03, 4.700e-02, -9.981e-04, 3.575e-02, -7.942e-04, -1.715e-02, -1.083e-03, -1.752e-02, -1.583e-04, 1.825e-02, -1.840e-04, 1.886e-02, -4.888e-04, -8.127e-04, -3.383e-04, -3.670e-03) * s1_1_2;
	r0 += M4(-9.247e-03, -3.576e-03, -4.258e-02, -8.596e-05, -1.030e-03, -4.484e-04, -5.925e-03, -9.291e-04, 7.356e-04, 6.180e-04, 8.089e-03, 1.206e-03, 1.542e-03, 9.021e-04, 3.937e-03, 1.532e-03) * s1_2_0;
	r0 += M4(9.248e-03, 1.533e-02, -2.689e-03, -6.137e-02, -4.403e-04, -6.504e-04, -1.703e-02, -1.642e-02, 5.818e-05, 1.819e-04, 1.910e-02, 1.970e-02, -2.482e-04, 5.980e-04, -2.236e-03, 9.656e-04) * s1_2_1;
	r0 += M4(1.071e-03, 5.236e-03, 2.998e-05, 2.075e-02, -3.593e-04, -6.775e-04, -6.211e-04, -6.312e-03, -8.303e-05, -1.544e-04, 4.787e-04, 5.709e-03, 4.038e-04, 5.079e-05, 1.145e-03, 4.297e-04) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(5.357e-03, 9.674e-03, -3.319e-03, 4.625e-04, 4.296e-03, 2.434e-03, -2.786e-03, 2.640e-03, 4.773e-03, -1.497e-03, 4.464e-04, -1.277e-04, -5.180e-04, 7.319e-04, 4.182e-04, -1.403e-05) * s0_0_0;
	r0 += M4(1.160e-02, 3.146e-03, -3.469e-04, -4.658e-03, 1.320e-01, -1.360e-01, 8.121e-02, -8.418e-02, -1.403e-03, 6.982e-03, -6.916e-04, -1.197e-03, -5.866e-03, -1.896e-03, 1.331e-03, 1.517e-04) * s0_0_1;
	r0 += M4(-4.131e-04, 2.589e-03, 7.842e-04, 2.914e-04, -6.957e-03, 5.166e-03, -2.792e-03, 6.099e-03, 1.190e-03, 3.989e-03, -1.430e-04, -4.049e-05, 4.187e-04, -1.977e-03, -2.615e-04, 8.003e-04) * s0_0_2;
	r0 += M4(-1.302e-01, 1.726e-02, 5.444e-02, 1.356e-03, 4.232e-03, 2.743e-03, 3.917e-03, 2.657e-03, 1.359e-01, -8.951e-03, 3.444e-03, 1.916e-03, 5.885e-03, 2.661e-04, -6.068e-03, -2.572e-03) * s0_1_0;
	r0 += M4(5.110e-03, -3.232e-01, 1.611e-02, 1.348e-01, 1.857e-01, -1.780e-01, 1.658e-01, -1.682e-01, 1.359e-01, -3.390e-01, -2.712e-03, 3.674e-02, 1.169e-01, 7.135e-02, -8.454e-03, -6.697e-03) * s0_1_1;
	r0 += M4(-4.111e-03, 1.614e-02, -4.670e-04, 7.036e-03, -7.674e-03, -1.450e-03, -5.899e-03, -2.246e-03, -3.885e-03, 1.046e-02, 6.803e-04, 2.192e-04, -1.173e-03, 3.212e-02, -8.075e-04, -4.939e-03) * s0_1_2;
	r0 += M4(5.347e-03, 8.758e-03, 2.231e-02, -5.457e-03, -1.135e-03, 3.531e-03, 2.817e-03, 4.699e-03, -1.184e-02, -6.164e-03, 1.513e-02, -7.012e-03, -2.114e-04, 6.786e-04, 1.898e-02, -3.206e-04) * s0_2_0;
	r0 += M4(5.700e-03, 1.480e-02, 1.664e-02, 6.714e-02, 8.563e-02, -9.715e-02, 1.487e-01, -1.550e-01, -4.989e-03, -1.005e-03, -2.228e-02, 3.784e-02, 9.985e-02, 4.489e-02, -2.417e-01, -1.253e-01) * s0_2_1;
	r0 += M4(-1.963e-05, -5.035e-03, 1.764e-03, 6.853e-03, -2.241e-03, 3.746e-03, -6.296e-03, 3.257e-03, 1.692e-03, 2.434e-03, 4.500e-03, 8.638e-03, -4.723e-03, 1.467e-02, 2.750e-02, -2.690e-02) * s0_2_2;
	r0 += M4(-1.002e-05, -2.262e-06, 6.364e-03, 3.140e-03, 7.239e-02, 2.735e-02, 2.838e-02, -1.028e-02, 5.603e-03, -3.562e-03, -8.556e-03, 1.725e-04, -2.154e-02, 4.103e-04, 6.075e-04, 1.126e-03) * s1_0_0;
	r0 += M4(-5.205e-03, 2.216e-03, 1.041e-02, 6.718e-03, 3.785e-02, -1.983e-01, -2.304e-02, 4.430e-02, -1.975e-01, 1.072e-01, 6.205e-02, 1.822e-02, -6.792e-02, -5.378e-02, -6.503e-03, 1.374e-03) * s1_0_1;
	r0 += M4(-1.316e-03, -6.663e-03, 3.773e-03, 8.782e-03, 1.344e-03, 1.259e-02, -3.628e-03, 2.473e-03, 1.053e-02, 3.478e-02, -9.052e-03, -4.821e-02, -6.915e-03, -2.106e-02, -4.010e-03, -9.864e-03) * s1_0_2;
	r0 += M4(1.274e-01, 6.500e-02, -1.316e-01, -4.721e-02, 8.915e-02, -4.597e-02, -2.627e-01, 7.785e-02, -2.728e-02, -1.264e-03, 4.459e-02, -6.766e-03, -3.483e-02, -9.220e-03, -4.694e-02, -7.352e-03) * s1_1_0;
	r0 += M4(1.438e-01, 1.566e-01, -1.247e-01, -1.657e-01, -1.715e-02, 4.681e-02, 2.582e-02, 1.002e-01, 2.301e-03, 6.334e-02, 1.158e-01, -1.835e-01, 1.223e-01, 2.164e-02, -2.948e-02, -1.201e-01) * s1_1_1;
	r0 += M4(3.724e-02, 8.332e-02, -2.068e-02, -6.444e-02, -5.967e-04, 1.076e-04, 2.974e-03, 5.630e-03, -2.766e-03, -2.654e-02, -8.560e-03, 1.837e-02, 5.297e-03, 6.610e-02, 2.216e-02, 6.682e-02) * s1_1_2;
	r0 += M4(-9.673e-03, -7.450e-03, -1.397e-03, -1.183e-03, -3.452e-03, 2.805e-03, 2.124e-02, -2.034e-03, 3.334e-03, -3.396e-03, 2.224e-04, 6.459e-03, -1.290e-03, 1.134e-03, 1.654e-02, -2.253e-03) * s1_2_0;
	r0 += M4(-4.099e-03, -3.650e-03, -2.165e-02, -1.045e-02, -1.399e-03, -9.380e-04, 2.034e-03, -4.919e-03, -8.860e-05, -3.486e-04, -1.210e-02, -2.830e-03, -1.293e-03, -5.276e-04, 3.674e-02, 5.174e-02) * s1_2_1;
	r0 += M4(2.780e-03, -4.653e-04, -7.081e-03, -1.828e-02, 2.442e-04, -8.772e-04, -5.990e-04, -2.635e-03, -3.339e-05, -2.205e-03, -2.708e-03, -2.123e-03, -3.264e-04, 1.523e-03, -1.922e-03, 1.011e-02) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(5.139e-02, -4.375e-04, 3.203e-03, 2.897e-03, 1.664e-03, -6.520e-03, 5.774e-03, -1.974e-03, -5.111e-04, 9.999e-04, -8.038e-04, 4.455e-04, -4.277e-02, 5.908e-02, 1.661e-03, -1.316e-03) * s0_0_0;
	r0 += M4(4.210e-02, 9.731e-02, 8.762e-03, 8.768e-03, -1.634e-01, 1.411e-01, -9.141e-02, 8.120e-02, 7.004e-04, 1.234e-04, -1.379e-03, 7.343e-04, 3.792e-03, -1.203e-02, 1.055e-03, -2.858e-03) * s0_0_1;
	r0 += M4(1.179e-03, 6.868e-03, -1.131e-03, 2.898e-03, 3.781e-03, 7.299e-03, 2.320e-03, 1.534e-03, -3.183e-04, -5.657e-03, -3.277e-03, -4.668e-03, -3.194e-04, -7.517e-04, -3.950e-04, -2.787e-05) * s0_0_2;
	r0 += M4(-4.602e-02, -1.908e-02, -1.564e-01, 1.691e-02, 1.120e-03, -8.767e-03, -2.359e-03, -7.854e-03, -4.357e-03, 1.961e-03, -2.540e-03, 3.354e-03, -4.041e-02, 3.801e-02, -9.964e-02, 1.193e-01) * s0_1_0;
	r0 += M4(1.137e-02, 2.541e-03, -3.561e-02, -2.897e-01, -1.977e-01, 1.889e-01, -1.978e-01, 1.952e-01, 1.506e-01, 3.943e-02, 1.828e-02, -9.994e-03, 4.413e-03, -2.069e-02, 5.444e-03, -2.000e-02) * s0_1_1;
	r0 += M4(6.731e-04, 1.537e-02, -9.206e-03, 1.735e-02, 4.136e-03, 3.418e-03, 5.028e-03, 4.832e-03, -6.080e-04, 7.528e-02, -3.696e-03, -4.920e-03, -1.736e-04, 3.134e-03, -4.773e-05, 1.279e-03) * s0_1_2;
	r0 += M4(-2.941e-03, 2.834e-03, 3.186e-02, 8.292e-03, -2.197e-03, -5.089e-03, 8.641e-04, -1.123e-02, -7.925e-04, 1.450e-03, 8.867e-03, 4.069e-03, 2.015e-03, 4.671e-03, 3.727e-03, 2.251e-04) * s0_2_0;
	r0 += M4(8.748e-04, -1.699e-03, 2.660e-02, 4.696e-02, -1.267e-01, 1.202e-01, -2.014e-01, 1.741e-01, -9.331e-02, 1.483e-02, -2.568e-01, 5.856e-02, -3.430e-03, -3.641e-03, -2.671e-03, -5.462e-03) * s0_2_1;
	r0 += M4(-2.363e-04, 5.922e-04, 1.408e-03, 5.908e-03, 6.491e-03, -2.819e-03, 9.111e-03, 2.140e-03, -5.371e-02, -3.097e-02, 6.892e-03, -6.589e-02, 2.413e-05, -1.768e-04, -6.706e-05, 1.570e-03) * s0_2_2;
	r0 += M4(-2.747e-02, -3.222e-05, 1.287e-03, -3.514e-03, 2.606e-02, -1.394e-03, 3.556e-03, 1.274e-03, 4.915e-03, -4.960e-03, 6.190e-05, 6.892e-04, -7.831e-03, -6.882e-03, 2.606e-05, -3.866e-03) * s1_0_0;
	r0 += M4(-5.255e-02, -7.104e-02, 4.400e-03, 2.682e-03, -1.274e-01, 3.234e-02, 2.350e-02, 2.342e-03, 8.188e-03, 1.678e-02, -2.602e-03, -1.179e-03, 9.449e-03, 3.289e-02, -1.129e-02, -9.386e-03) * s1_0_1;
	r0 += M4(-3.035e-03, -1.677e-02, -1.294e-03, 9.715e-04, 1.580e-03, 4.409e-02, 2.098e-03, 2.045e-03, 8.634e-05, 1.342e-03, -4.896e-05, 3.754e-04, -1.072e-03, -1.357e-02, -1.044e-03, -8.429e-04) * s1_0_2;
	r0 += M4(4.428e-02, -4.456e-04, 4.052e-02, 4.152e-03, 7.656e-03, -1.990e-03, 2.787e-02, -5.142e-03, 4.963e-02, -5.184e-03, -6.310e-03, -1.831e-03, -1.263e-02, -8.190e-03, 9.634e-02, -2.131e-02) * s1_1_0;
	r0 += M4(7.011e-02, 1.304e-01, -1.518e-01, -3.802e-02, 2.402e-02, 3.308e-02, -2.529e-01, 1.240e-01, -2.995e-01, -5.725e-02, 1.090e-01, 2.012e-02, 5.319e-03, 4.920e-02, 1.958e-01, -2.844e-01) * s1_1_1;
	r0 += M4(-1.626e-02, -2.752e-02, -3.191e-03, -5.718e-02, 2.357e-03, -1.436e-02, 3.744e-03, 4.375e-02, 1.101e-02, -1.365e-02, 2.799e-03, 1.101e-02, -2.465e-03, 1.702e-02, -6.801e-03, -3.950e-03) * s1_1_2;
	r0 += M4(3.385e-04, -2.764e-04, 1.924e-02, -1.250e-03, -3.467e-04, -2.832e-04, 1.489e-03, -4.818e-04, -8.367e-04, -3.367e-03, 2.048e-03, -3.380e-04, 2.986e-03, 1.240e-03, -7.138e-03, 3.225e-03) * s1_2_0;
	r0 += M4(8.222e-03, 2.082e-03, 9.188e-02, 6.782e-02, -8.893e-04, 1.641e-04, 6.531e-03, 4.928e-04, -8.472e-03, -1.120e-02, 9.974e-02, 6.199e-02, -2.878e-03, -1.311e-03, 8.225e-03, -1.407e-02) * s1_2_1;
	r0 += M4(3.288e-03, 3.580e-03, 6.179e-03, 4.818e-02, -1.647e-04, 1.014e-03, -1.203e-03, 4.263e-03, -8.543e-04, -1.068e-03, -2.123e-03, 6.785e-03, -4.602e-05, -9.049e-04, -1.355e-03, 6.970e-03) * s1_2_2;
	r0 += V4(-3.568e-05, -3.795e-05, -3.815e-05, -3.620e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
