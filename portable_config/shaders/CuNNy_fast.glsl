// CuNNy fast
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_fast] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(9.911e-02, 7.754e-01, 1.674e-01, 1.110e-01) * s0_0_0;
	r1 += V4(-3.140e-01, -2.822e-01, -7.051e-01, -2.784e-02) * s0_0_0;
	r2 += V4(3.564e-02, 2.870e-03, -6.675e-03, -8.755e-02) * s0_0_0;
	r0 += V4(5.793e-02, -4.037e-02, 3.547e-01, 1.106e-01) * s0_0_1;
	r1 += V4(-4.347e-01, 2.768e-01, 7.663e-01, 7.560e-02) * s0_0_1;
	r2 += V4(-7.832e-01, -1.618e-01, -5.049e-04, 9.447e-02) * s0_0_1;
	r0 += V4(6.714e-02, 5.360e-03, 1.228e-02, -2.014e-02) * s0_0_2;
	r1 += V4(3.536e-01, 4.662e-01, -9.308e-04, -2.787e-03) * s0_0_2;
	r2 += V4(-6.138e-03, -2.639e-05, 8.768e-03, -1.401e-02) * s0_0_2;
	r0 += V4(3.215e-01, -7.086e-01, -3.754e-01, -4.535e-01) * s0_1_0;
	r1 += V4(-3.291e-01, -2.329e-01, -3.144e-02, -3.393e-02) * s0_1_0;
	r2 += V4(-2.397e-02, 7.730e-01, 7.912e-01, 7.246e-01) * s0_1_0;
	r0 += V4(-1.003e+00, -3.477e-02, -7.701e-01, 1.442e-01) * s0_1_1;
	r1 += V4(5.351e-01, -5.208e-01, -2.730e-02, -5.967e-02) * s0_1_1;
	r2 += V4(7.991e-01, -3.838e-01, -7.822e-01, -6.247e-02) * s0_1_1;
	r0 += V4(3.710e-01, 3.364e-03, 1.267e-01, -1.704e-02) * s0_1_2;
	r1 += V4(1.900e-01, 2.996e-01, 1.239e-03, 3.584e-01) * s0_1_2;
	r2 += V4(-2.068e-02, 1.823e-02, -1.261e-02, -8.521e-02) * s0_1_2;
	r0 += V4(-2.764e-02, -4.344e-02, 2.025e-01, 1.593e-01) * s0_2_0;
	r1 += V4(1.645e-01, 2.510e-01, 1.801e-02, -3.408e-02) * s0_2_0;
	r2 += V4(-1.566e-02, 2.590e-02, -1.740e-02, -6.520e-02) * s0_2_0;
	r0 += V4(1.312e-01, 5.507e-02, 3.866e-01, 1.519e-01) * s0_2_1;
	r1 += V4(5.428e-02, -1.844e-02, -1.232e-02, 2.219e-01) * s0_2_1;
	r2 += V4(-1.155e-02, -2.014e-01, 2.061e-02, -6.034e-01) * s0_2_1;
	r0 += V4(-2.351e-02, -1.173e-02, -1.142e-01, -8.081e-02) * s0_2_2;
	r1 += V4(-2.107e-01, -2.309e-01, -5.480e-03, -2.347e-01) * s0_2_2;
	r2 += V4(2.536e-02, -1.750e-02, -2.516e-03, 1.025e-01) * s0_2_2;
	r0 += V4(1.129e-02, 2.899e-06, 8.874e-03, -4.269e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.994e-03, -1.077e-03, -1.803e-04, 2.286e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-2.137e-04, 3.246e-03, -5.766e-08, -1.464e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_fast] -conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-7.407e-02, 2.095e-01, 1.978e-01, 3.535e-02, -1.884e-02, -5.006e-02, -9.574e-02, -3.892e-02, 3.694e-03, -1.460e-01, -1.741e-01, 7.374e-02, 7.933e-02, 5.285e-01, 1.663e-01, 1.268e-01) * s0_0_0;
	r1 += M4(1.071e-01, -1.713e-01, -5.690e-02, 6.324e-02, 9.570e-02, 9.028e-02, 4.187e-02, -1.750e-02, -2.427e-01, -1.023e-01, -1.189e-01, 2.359e-02, 4.565e-01, 7.992e-02, 1.758e-01, 7.024e-02) * s0_0_0;
	r0 += M4(-5.188e-01, -9.625e-02, -2.301e-01, 2.882e-01, 5.281e-02, 2.470e-01, -3.225e-02, -1.523e-01, 1.354e-01, 1.695e-01, 1.054e-01, 1.295e-01, -2.842e-01, -5.065e-01, -6.296e-01, -2.781e-02) * s0_0_1;
	r1 += M4(3.270e-01, -6.854e-01, 8.878e-02, 5.305e-02, 4.474e-01, 2.138e-01, 4.011e-02, 2.815e-03, 3.529e-02, 5.136e-02, 6.021e-02, 3.903e-02, 1.001e-01, -2.120e-01, 1.450e-01, -1.787e-01) * s0_0_1;
	r0 += M4(-2.984e-02, 1.548e-01, 2.239e-03, 8.743e-02, 6.835e-02, 3.350e-01, 7.590e-02, -1.096e-02, 3.035e-04, 7.691e-02, -1.968e-01, 2.540e-01, -1.718e-01, -2.027e-01, -9.571e-02, -5.715e-02) * s0_0_2;
	r1 += M4(1.023e-01, -2.111e-01, 1.073e-01, -2.989e-02, 2.180e-01, 7.689e-02, -9.841e-02, 7.146e-03, 1.685e-01, -4.979e-02, -1.213e-01, 2.744e-02, -5.010e-01, -9.299e-02, -6.855e-02, -1.868e-01) * s0_0_2;
	r0 += M4(1.494e-01, 5.531e-01, 3.174e-01, -9.496e-02, -4.290e-02, -6.398e-02, -1.405e-01, -6.073e-02, 5.851e-02, 8.980e-02, 1.368e-02, 1.215e-01, 7.529e-02, 2.185e-01, 1.387e-02, 1.104e-01) * s0_1_0;
	r1 += M4(4.102e-01, 2.414e-01, 9.121e-01, -3.944e-02, -1.251e-01, -2.307e-03, -1.782e-01, 4.812e-03, 2.638e-01, 3.215e-02, 9.163e-01, 9.089e-02, 3.475e-03, 8.133e-02, -4.593e-01, 1.004e-01) * s0_1_0;
	r0 += M4(-7.142e-01, -4.681e-01, -4.717e-01, -1.120e-01, 4.731e-01, 3.623e-01, 1.650e-01, 3.290e-01, 1.884e-01, -3.562e-01, -2.654e-01, 9.902e-02, -6.409e-02, 2.324e-01, 3.200e-01, -4.677e-02) * s0_1_1;
	r1 += M4(-5.820e-01, -4.739e-01, -3.687e-01, -2.800e-01, -2.449e-02, 1.652e-01, -1.000e+00, 2.661e-01, -4.260e-01, 1.841e-01, 4.952e-01, -2.170e-01, -3.490e-01, -1.184e-01, -6.910e-01, 5.158e-02) * s0_1_1;
	r0 += M4(2.822e-01, -5.905e-02, -7.901e-02, 7.172e-02, 1.000e+00, -4.283e-02, 2.358e-01, 1.505e-01, -3.404e-01, 3.696e-02, -1.329e-01, -6.387e-01, 3.401e-01, 1.412e-02, 3.009e-02, 1.971e-01) * s0_1_2;
	r1 += M4(4.415e-02, 4.832e-02, 1.114e-01, -2.100e-02, 1.487e-01, 9.745e-01, 2.009e-01, 2.025e-01, -7.951e-03, -2.163e-02, -3.040e-02, -1.802e-01, 4.205e-01, 2.430e-01, 1.710e-01, 1.997e-01) * s0_1_2;
	r0 += M4(-1.223e-02, 6.788e-02, -9.196e-02, 6.720e-05, -1.412e-02, -1.621e-02, -1.738e-02, -2.083e-02, -1.203e-02, 1.940e-01, 7.675e-02, 6.573e-02, 9.623e-02, -2.711e-01, -1.002e-01, 2.970e-02) * s0_2_0;
	r1 += M4(1.696e-01, 3.098e-02, 4.622e-01, 3.996e-03, -2.946e-02, -7.131e-02, 7.391e-02, -3.852e-03, 5.261e-02, -1.677e-01, -3.027e-01, 1.337e-01, -3.247e-02, 1.258e-01, 2.842e-02, 2.545e-02) * s0_2_0;
	r0 += M4(-6.436e-02, -5.687e-02, -3.368e-01, 1.190e-01, 1.583e-01, 2.876e-01, 3.408e-01, 1.538e-01, 1.760e-01, -1.103e-01, -3.030e-02, 5.366e-02, -3.522e-02, 1.225e-01, 1.010e-01, 1.062e-01) * s0_2_1;
	r1 += M4(-2.604e-02, 1.241e-01, 9.809e-02, -1.739e-01, 3.226e-02, -4.586e-02, -1.000e+00, 1.232e-01, -1.500e-01, -9.325e-02, 7.227e-02, 3.268e-02, 3.707e-02, 1.300e-02, 2.586e-01, -4.627e-02) * s0_2_1;
	r0 += M4(7.060e-02, 6.265e-04, -1.945e-03, 5.143e-02, 1.372e-01, 3.779e-01, 1.400e-01, 1.521e-01, -4.300e-02, -1.763e-01, -1.105e-02, -1.948e-01, -1.440e-01, 1.223e-01, 1.066e-01, -1.359e-01) * s0_2_2;
	r1 += M4(-1.231e-02, 3.691e-02, 1.399e-01, -2.040e-05, 3.494e-01, -3.096e-01, 5.964e-01, 1.419e-01, -2.685e-02, -4.673e-02, -1.989e-01, -3.463e-03, 2.159e-02, -1.255e-01, -3.087e-02, 3.035e-02) * s0_2_2;
	r0 += M4(3.929e-02, 5.332e-01, 6.086e-02, 8.169e-03, -3.643e-02, -4.045e-01, 2.056e-01, -1.780e-02, -3.525e-02, -2.653e-02, -1.168e-01, -2.408e-02, 3.252e-01, -2.755e-01, -2.469e-01, 1.325e-01) * s1_0_0;
	r1 += M4(6.627e-01, 2.094e-02, -1.690e-02, -3.869e-02, -7.254e-01, -5.519e-02, 2.658e-02, 6.606e-02, 1.026e-01, -2.735e-02, 4.945e-02, -3.183e-02, 2.700e-01, 5.566e-01, 5.463e-01, 1.818e-01) * s1_0_0;
	r0 += M4(-1.849e-01, 2.851e-01, 5.590e-02, 7.303e-03, 7.280e-02, -2.841e-01, 1.120e-01, -1.104e-01, -2.921e-02, -6.508e-02, -2.140e-01, 7.960e-02, -3.350e-01, -7.518e-02, -3.684e-01, -8.210e-01) * s1_0_1;
	r1 += M4(6.231e-01, -1.390e-01, -1.233e-01, 3.501e-02, -3.135e-01, 5.112e-02, 5.370e-02, 4.230e-02, -8.212e-02, -2.716e-05, 5.489e-02, 1.580e-02, -3.860e-01, -1.751e-01, -2.528e-01, -4.057e-01) * s1_0_1;
	r0 += M4(-4.211e-02, 2.350e-01, 9.615e-03, 1.138e-01, -1.762e-02, -2.529e-01, 1.742e-02, -1.171e-01, 1.981e-01, 1.920e-01, -4.913e-02, 5.735e-02, 1.545e-02, 3.653e-03, -1.484e-02, -1.107e-01) * s1_0_2;
	r1 += M4(2.825e-01, -1.305e-01, 3.213e-02, 3.978e-02, -2.531e-01, 1.107e-01, 3.868e-02, -2.779e-02, -8.667e-02, 7.373e-02, 1.330e-02, 3.806e-03, 2.050e-01, 1.894e-01, -3.470e-02, 3.481e-02) * s1_0_2;
	r0 += M4(1.125e-01, 5.488e-01, -4.167e-02, 1.251e-01, -1.340e-01, -3.658e-01, 2.383e-01, -1.421e-01, -8.321e-02, -5.024e-01, -1.216e-01, -5.893e-02, 6.402e-02, 1.682e-01, 4.441e-01, 1.928e-01) * s1_1_0;
	r1 += M4(9.924e-01, 1.343e-01, 1.465e-01, -4.368e-02, -8.314e-01, -1.639e-01, 9.388e-02, -1.416e-02, -5.991e-01, -4.769e-02, -3.837e-01, -2.319e-03, -2.934e-01, -3.918e-01, 3.057e-01, -7.731e-02) * s1_1_0;
	r0 += M4(-3.115e-01, 2.895e-01, -1.487e-02, 6.087e-03, -1.900e-02, -4.947e-01, 1.523e-02, -2.382e-01, 6.895e-01, -8.370e-03, -9.591e-02, 3.799e-01, 2.572e-01, 5.704e-01, 1.756e-01, 4.436e-01) * s1_1_1;
	r1 += M4(3.369e-01, -3.100e-01, -2.192e-01, -1.274e-01, -6.117e-01, -3.844e-02, -1.809e-02, -4.167e-02, 2.958e-01, 4.444e-01, -5.216e-01, 2.201e-01, 6.113e-01, 2.527e-01, -9.509e-02, 2.896e-01) * s1_1_1;
	r0 += M4(2.288e-02, 1.055e-01, -1.656e-02, 7.097e-02, -4.865e-02, -2.398e-01, 4.607e-02, -9.781e-02, 7.441e-01, 3.150e-01, 2.747e-01, 9.279e-01, 6.301e-02, -5.329e-02, 7.739e-02, 1.727e-01) * s1_1_2;
	r1 += M4(1.489e-01, -1.029e-01, -1.360e-01, 4.376e-02, -2.979e-01, 2.537e-03, 2.995e-02, -2.737e-02, 1.451e-01, 4.717e-01, 2.358e-01, 3.604e-01, -2.104e-01, -8.526e-02, 8.274e-02, 6.889e-02) * s1_1_2;
	r0 += M4(7.019e-02, 6.005e-01, 2.171e-01, 7.984e-02, -6.017e-02, -3.686e-01, -1.796e-03, -1.524e-01, -5.513e-02, -2.588e-01, -9.961e-02, -5.188e-02, -4.223e-02, -2.071e-02, -6.819e-02, -9.344e-02) * s1_2_0;
	r1 += M4(5.098e-01, 8.764e-02, 6.665e-02, 4.407e-02, -3.066e-01, -4.824e-02, -1.584e-02, -1.064e-01, -4.097e-01, -7.026e-02, 1.410e-01, 3.569e-03, 2.339e-01, -2.859e-02, 3.778e-02, 1.428e-02) * s1_2_0;
	r0 += M4(-1.517e-03, 3.350e-01, 2.891e-02, 9.191e-02, -1.127e-01, -4.678e-01, -1.029e-01, -2.807e-01, -5.993e-02, -9.109e-02, 3.457e-01, -1.242e-01, -1.657e-01, -2.674e-01, 9.353e-02, -2.011e-01) * s1_2_1;
	r1 += M4(1.643e-01, 1.949e-02, 2.082e-01, -2.240e-02, -3.236e-01, 2.357e-02, -6.342e-02, -9.478e-02, -3.730e-01, -1.060e-02, -1.000e+00, -3.019e-02, -1.905e-01, -2.496e-01, -3.659e-01, 3.535e-03) * s1_2_1;
	r0 += M4(1.801e-02, 3.112e-01, 7.970e-02, -4.033e-02, -7.984e-02, -1.108e-01, -3.429e-02, -3.650e-02, 3.922e-01, 2.822e-01, 2.126e-01, 7.174e-01, -3.310e-03, -3.157e-02, -2.843e-02, 1.792e-01) * s1_2_2;
	r1 += M4(2.610e-01, -5.036e-02, -7.900e-02, 4.928e-02, -7.206e-02, 3.407e-02, -2.016e-02, -7.008e-02, 3.943e-01, 2.586e-01, 2.737e-01, 4.463e-01, -8.942e-02, -1.966e-02, -1.231e-02, 8.472e-04) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.261e-02, -3.143e-01, -7.689e-02, -1.811e-02, 4.829e-02, 2.601e-01, 1.483e-01, 1.726e-02, 6.873e-02, -2.244e-01, -2.103e-01, 3.108e-02, -8.276e-02, -9.696e-02, -9.519e-03, 2.502e-02) * s0_0_0;
	r1 += M4(-4.116e-01, 5.586e-02, 1.588e-01, 2.792e-03, 7.891e-02, -3.986e-02, -1.981e-01, -1.602e-02, 1.720e-01, 1.920e-01, 4.359e-01, 6.003e-03, -4.979e-02, -8.241e-02, -4.302e-01, -6.333e-03) * s0_0_0;
	r0 += M4(1.641e-02, -2.850e-01, -1.973e-01, -7.641e-02, -6.019e-02, -5.383e-02, 1.359e-01, -6.824e-03, -2.838e-01, -6.337e-02, -1.686e-01, -5.257e-01, 1.927e-01, 3.059e-01, -1.212e-01, -3.871e-02) * s0_0_1;
	r1 += M4(-3.626e-01, 1.586e-01, 1.146e-01, -3.398e-02, -2.225e-01, -3.019e-01, -4.834e-01, -5.082e-02, -5.890e-01, 2.606e-01, 8.221e-01, -8.836e-02, 1.000e+00, 4.303e-01, 2.760e-01, 1.697e-01) * s0_0_1;
	r0 += M4(1.050e-01, 6.137e-05, 3.187e-03, -7.251e-02, -4.385e-01, -1.849e-01, 9.628e-02, 9.639e-02, 1.328e-01, -3.614e-02, -2.462e-01, -6.736e-01, 1.619e-01, 4.390e-01, -2.006e-02, 2.588e-01) * s0_0_2;
	r1 += M4(-7.739e-02, 1.128e-01, 1.269e-02, -7.675e-03, 2.771e-01, -4.341e-01, -6.033e-02, -1.159e-02, -3.856e-01, 2.455e-01, -5.171e-03, -1.498e-01, 5.069e-01, 1.883e-02, 8.355e-03, 5.308e-02) * s0_0_2;
	r0 += M4(-4.942e-01, -6.270e-01, -1.577e-01, -5.383e-01, -2.588e-02, -1.717e-01, -3.713e-02, -1.101e-02, -3.307e-02, 2.516e-02, -1.139e-02, 1.747e-02, -1.549e-02, -1.113e-01, -5.284e-02, -4.433e-02) * s0_1_0;
	r1 += M4(-5.798e-01, -2.368e-04, 2.322e-01, -5.507e-02, -9.965e-02, 2.033e-02, 3.296e-01, -3.118e-02, -1.279e-03, -8.328e-02, -1.000e+00, 3.932e-02, -1.528e-01, 2.032e-02, -5.293e-01, -2.434e-02) * s0_1_0;
	r0 += M4(4.656e-01, 1.978e-01, 1.059e-01, -1.463e-01, 8.120e-03, 5.573e-02, -6.129e-01, 1.059e-01, 5.464e-01, -4.093e-02, 1.000e+00, 3.448e-01, -2.438e-02, 2.336e-02, 2.882e-01, -1.430e-01) * s0_1_1;
	r1 += M4(-6.666e-02, 3.408e-01, -3.169e-01, 8.276e-02, -5.224e-02, -4.198e-02, 7.030e-01, -2.456e-01, 1.318e-01, 3.018e-01, -4.662e-01, 8.946e-01, 2.916e-01, -6.723e-02, -1.869e-01, 2.081e-01) * s0_1_1;
	r0 += M4(2.371e-01, -7.618e-02, 1.322e-01, 4.736e-01, -3.622e-01, -3.533e-01, -1.063e-01, -2.803e-01, 7.973e-01, 2.319e-01, 1.782e-01, 5.462e-01, 2.968e-02, 9.972e-02, 3.944e-02, 1.413e-01) * s0_1_2;
	r1 += M4(-8.610e-02, 4.364e-02, 1.347e-01, 1.996e-01, -6.821e-01, -1.420e-01, -3.765e-01, -4.889e-01, 2.681e-01, 1.894e-01, 2.188e-01, 4.061e-01, 8.423e-02, -3.605e-02, 1.723e-01, 1.207e-01) * s0_1_2;
	r0 += M4(-1.674e-01, -2.332e-01, 2.759e-01, -1.335e-01, -3.188e-02, -4.819e-02, -2.491e-02, 8.898e-03, 1.320e-02, -5.694e-02, 3.328e-02, -1.846e-02, 2.775e-02, 6.236e-02, 1.022e-02, -6.146e-02) * s0_2_0;
	r1 += M4(-2.233e-01, -1.362e-01, -1.000e+00, 1.860e-01, -2.315e-01, 1.714e-02, 1.644e-01, -6.592e-03, 2.736e-02, -3.782e-02, -9.426e-01, 7.415e-02, 6.342e-02, -2.255e-02, 1.213e-01, -2.155e-02) * s0_2_0;
	r0 += M4(1.007e-01, -1.096e-01, 8.340e-01, 1.609e-01, -1.837e-02, -2.725e-01, -4.577e-02, -8.468e-03, 1.072e-01, 1.019e-01, 3.357e-01, -4.608e-02, -4.696e-02, 1.203e-02, -8.208e-03, -6.566e-02) * s0_2_1;
	r1 += M4(-9.890e-03, -7.213e-02, -3.954e-01, 7.705e-01, -3.545e-01, 1.597e-01, 2.604e-01, -2.128e-02, 9.951e-02, -1.724e-01, -6.467e-01, 2.427e-01, 1.047e-01, -2.496e-02, -2.974e-01, 7.284e-03) * s0_2_1;
	r0 += M4(-2.767e-02, -1.950e-01, 1.090e-01, 2.092e-01, 1.328e-01, 1.032e-01, -6.401e-02, 2.655e-02, -8.303e-02, -1.268e-01, 2.075e-01, -5.139e-02, -2.459e-02, 4.621e-02, 3.305e-02, 1.243e-01) * s0_2_2;
	r1 += M4(-1.851e-01, -8.518e-02, 1.772e-01, 1.638e-01, 2.045e-01, 3.623e-01, -1.157e-01, -4.836e-02, -1.822e-01, -4.078e-01, 3.115e-01, 1.754e-01, -1.270e-03, -1.262e-01, 1.518e-01, 3.375e-02) * s0_2_2;
	r0 += V4(2.155e-02, 4.201e-03, 1.631e-02, -1.021e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.783e-03, 1.491e-02, -1.658e-02, 1.757e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC [CuNNy_fast] -conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.503e-02, -7.688e-02, -1.814e-02, -1.757e-03, -3.455e-02, -4.461e-03, -5.781e-02, -1.872e-02, 6.213e-02, 8.366e-02, 2.997e-02, -5.905e-03, -3.700e-02, -1.332e-01, 3.479e-02, -1.939e-03) * s0_0_0;
	r1 += M4(-1.255e-01, -5.114e-02, -2.495e-02, -5.414e-02, 3.224e-03, -2.074e-04, 2.481e-02, -6.592e-02, 1.233e-02, 3.125e-02, -1.298e-02, 2.981e-02, -1.551e-02, 7.057e-03, -4.750e-02, -6.971e-02) * s0_0_0;
	r0 += M4(-1.557e-01, 6.091e-02, -1.663e-01, -8.847e-02, -4.099e-03, -1.906e-02, 8.831e-02, 4.576e-02, 5.680e-02, 9.935e-02, 2.596e-02, 9.053e-02, 7.700e-02, -2.317e-01, -1.443e-02, -7.750e-02) * s0_0_1;
	r1 += M4(1.351e-01, -1.193e-01, 9.545e-02, 4.406e-02, -1.580e-01, 6.942e-02, -3.396e-02, -1.632e-01, 2.360e-02, -3.841e-02, 1.048e-01, 3.127e-02, -2.761e-01, 8.620e-02, -2.163e-01, -1.059e-01) * s0_0_1;
	r0 += M4(-5.232e-02, -2.687e-02, -2.888e-02, -5.042e-02, -2.088e-02, -9.476e-02, 6.911e-02, -3.870e-02, 2.469e-02, 3.974e-02, -8.703e-02, 1.135e-01, -2.558e-02, 7.391e-02, 2.249e-02, 1.038e-01) * s0_0_2;
	r1 += M4(-6.351e-02, -3.574e-02, -2.951e-02, -2.654e-02, -3.101e-02, 4.561e-02, -1.385e-01, -3.389e-02, 7.184e-02, -6.025e-02, 7.279e-02, 3.457e-02, 8.256e-02, -5.916e-03, 8.618e-02, 7.453e-02) * s0_0_2;
	r0 += M4(1.984e-01, 6.006e-02, -1.472e-01, 9.115e-02, -5.483e-04, 5.056e-02, 1.169e-01, -1.782e-01, -2.416e-02, -2.561e-02, 1.187e-02, -6.172e-02, 4.114e-01, 2.221e-01, -3.096e-01, 3.078e-01) * s0_1_0;
	r1 += M4(-1.821e-01, 1.413e-01, -1.645e-01, -8.854e-02, 1.619e-01, -5.607e-02, -1.418e-01, -4.298e-02, -4.675e-02, -5.622e-02, 4.777e-02, -8.314e-02, -9.063e-02, 5.057e-03, 1.880e-01, 3.447e-01) * s0_1_0;
	r0 += M4(4.313e-02, 3.897e-01, 8.334e-01, 1.000e+00, 4.583e-03, 8.253e-02, -3.738e-01, 7.596e-02, 1.092e-01, 3.078e-02, -7.030e-02, 1.420e-01, -6.444e-02, -1.485e-01, -2.076e-01, -6.825e-02) * s0_1_1;
	r1 += M4(9.841e-02, 4.843e-01, 2.663e-01, -1.117e-01, -6.858e-02, -2.710e-02, 1.261e-01, 5.700e-01, -1.807e-01, -9.529e-02, 2.244e-01, -3.955e-01, 6.113e-01, -4.691e-01, -7.105e-02, 8.855e-02) * s0_1_1;
	r0 += M4(-1.369e-01, 5.457e-02, 9.924e-02, 1.210e-01, 3.115e-01, 7.184e-02, 3.435e-02, -7.013e-02, -3.352e-01, -5.288e-01, -2.017e-01, -3.483e-01, -7.107e-02, -1.336e-01, -8.716e-02, -1.016e-01) * s0_1_2;
	r1 += M4(9.289e-02, 9.103e-02, 2.168e-02, 8.130e-02, 5.215e-01, -1.743e-01, 1.030e-01, -1.350e-01, -8.264e-01, -5.494e-02, -3.732e-01, -4.470e-01, -2.509e-01, 6.898e-02, -8.674e-02, -4.259e-02) * s0_1_2;
	r0 += M4(-2.973e-02, -4.429e-02, -1.607e-01, -1.769e-01, -2.614e-02, 5.883e-02, 1.538e-01, -1.104e-01, 1.248e-02, -8.007e-02, -6.160e-02, -2.674e-02, 2.130e-01, -1.802e-01, 9.197e-02, 1.255e-01) * s0_2_0;
	r1 += M4(-2.719e-02, -3.174e-01, -2.320e-01, -1.011e-01, 1.111e-01, -1.901e-02, 2.934e-02, 3.664e-02, -4.847e-02, -3.032e-02, 1.025e-03, -2.349e-02, -1.863e-02, 2.723e-01, 2.959e-01, -1.380e-02) * s0_2_0;
	r0 += M4(1.121e-01, 1.115e-01, -2.201e-01, 8.708e-02, -7.069e-02, 1.629e-01, 1.848e-02, 3.080e-01, 6.689e-02, -1.246e-01, 1.060e-03, -1.450e-01, -1.334e-01, -1.131e-01, 4.697e-01, -3.624e-02) * s0_2_1;
	r1 += M4(8.432e-02, -9.237e-02, 4.222e-01, 1.841e-01, -6.247e-02, 4.452e-01, 1.349e-01, -2.413e-02, 3.186e-02, -3.252e-01, -3.533e-03, -3.504e-02, -2.636e-02, 1.812e-01, -4.319e-02, -6.796e-02) * s0_2_1;
	r0 += M4(-9.837e-02, 7.056e-02, 4.777e-02, 1.138e-01, 1.679e-01, 9.839e-02, 4.386e-01, 1.253e-01, 5.285e-02, 6.475e-02, -5.293e-01, 1.446e-01, -8.883e-02, -1.822e-03, -1.206e-01, 1.484e-02) * s0_2_2;
	r1 += M4(3.973e-02, 6.455e-02, 5.309e-02, 1.997e-02, -1.172e-02, -2.950e-02, -1.588e-01, -1.018e-01, 4.474e-02, -1.445e-01, 2.861e-01, 1.228e-01, -4.009e-02, 2.476e-02, 7.006e-02, 1.405e-02) * s0_2_2;
	r0 += M4(2.240e-02, -2.586e-03, 6.331e-03, -8.777e-03, -2.656e-02, 5.998e-02, 1.268e-02, 2.727e-02, -1.618e-01, 5.006e-02, 6.363e-03, 2.210e-02, -1.419e-02, 2.187e-02, -3.310e-02, 6.771e-02) * s1_0_0;
	r1 += M4(2.482e-03, 9.952e-03, -1.666e-02, -2.272e-02, 8.432e-02, 5.740e-02, 4.064e-02, 2.006e-02, -5.549e-03, 8.166e-02, 1.789e-02, 9.590e-02, -1.163e-01, -4.649e-02, 8.583e-02, -5.847e-02) * s1_0_0;
	r0 += M4(4.310e-02, 6.043e-02, -2.216e-02, 2.001e-03, 9.732e-02, -1.243e-01, 1.717e-01, 4.007e-02, -5.411e-01, -4.292e-02, -3.271e-02, -1.161e-01, -1.069e-01, 1.675e-01, -9.190e-02, -2.625e-02) * s1_0_1;
	r1 += M4(9.240e-03, -3.650e-02, 4.992e-02, 1.175e-01, -2.017e-01, 1.096e-01, -1.565e-01, -1.635e-01, -9.704e-02, -2.588e-01, -8.453e-02, -7.577e-01, 2.618e-01, -1.724e-01, 1.592e-01, 1.024e-03) * s1_0_1;
	r0 += M4(-1.207e-03, 3.769e-02, -7.468e-02, -2.305e-03, 8.266e-02, 1.235e-02, 9.479e-03, 4.134e-02, 7.337e-02, -4.227e-02, -2.456e-01, -1.238e-01, 1.497e-02, -1.609e-01, -4.676e-02, -1.679e-01) * s1_0_2;
	r1 += M4(1.454e-01, -5.813e-02, 5.649e-02, 9.936e-02, -4.487e-02, 3.131e-02, 2.118e-02, -7.063e-03, -5.605e-01, -1.645e-01, -1.030e-01, -5.497e-02, -3.676e-01, 7.593e-02, -1.672e-01, -1.548e-01) * s1_0_2;
	r0 += M4(-5.579e-02, -8.889e-02, -6.419e-02, 1.440e-02, -3.851e-02, -1.630e-01, 7.153e-02, 7.343e-03, -1.374e-01, 6.909e-02, 1.418e-02, 1.147e-01, 2.200e-01, -4.249e-01, -4.160e-02, -4.013e-02) * s1_1_0;
	r1 += M4(-9.349e-02, -4.252e-02, 5.424e-03, 7.300e-02, -1.088e-03, -1.675e-01, 6.893e-02, -1.107e-01, -1.654e-02, 8.032e-02, 1.894e-02, -8.584e-03, 3.974e-02, -4.075e-02, -2.851e-02, -5.227e-02) * s1_1_0;
	r0 += M4(4.543e-02, -5.339e-02, 1.548e-01, -2.431e-02, -2.104e-01, -5.137e-01, -7.065e-01, -5.801e-01, -1.000e+00, -2.173e-01, -1.016e-01, -2.154e-01, -3.201e-01, 9.031e-01, 9.132e-01, 1.656e-02) * s1_1_1;
	r1 += M4(8.158e-02, 8.341e-02, -1.012e-01, -4.487e-01, 2.699e-01, -4.451e-01, -4.668e-01, 4.679e-01, -7.943e-02, -9.516e-01, -2.108e-01, -4.688e-01, 4.315e-01, 1.000e+00, 7.632e-01, 1.000e+00) * s1_1_1;
	r0 += M4(-9.051e-02, -9.753e-02, 9.155e-02, -4.064e-02, 7.421e-02, -1.343e-01, -2.192e-01, -2.222e-01, -3.188e-02, -2.549e-01, -8.294e-01, -3.048e-01, 3.526e-01, 3.966e-01, -5.603e-02, 1.559e-01) * s1_1_2;
	r1 += M4(-6.630e-01, 1.723e-01, -4.686e-02, -1.202e-01, -1.058e-01, -1.470e-01, -1.189e-01, -1.365e-01, -1.000e+00, -8.314e-03, -2.870e-01, -3.310e-01, 8.809e-01, -3.020e-01, 3.122e-01, 2.967e-01) * s1_1_2;
	r0 += M4(-5.364e-02, 6.913e-02, -8.766e-02, 1.531e-01, -9.388e-02, 3.370e-02, -4.108e-02, 4.996e-02, 8.234e-02, 8.733e-02, -3.748e-04, 1.059e-02, -2.742e-02, 4.751e-02, -1.906e-02, 5.312e-03) * s1_2_0;
	r1 += M4(-6.456e-02, 1.227e-01, 4.268e-02, 1.089e-02, 4.260e-02, 2.838e-03, -4.066e-02, 3.917e-02, 4.390e-02, -3.091e-02, 2.421e-02, 4.517e-02, 1.955e-02, -5.797e-02, -6.961e-02, 3.543e-03) * s1_2_0;
	r0 += M4(-1.805e-01, -2.666e-01, 3.025e-04, -3.299e-01, 1.478e-01, 1.469e-01, 1.401e-01, 1.802e-01, -6.988e-02, 5.432e-02, -2.522e-02, 3.331e-02, -1.912e-01, 9.040e-02, -1.037e-01, 5.109e-02) * s1_2_1;
	r1 += M4(7.006e-02, -6.401e-01, -3.254e-01, -1.629e-01, -2.725e-01, 2.016e-01, -9.207e-02, -2.280e-01, -2.589e-04, 3.948e-02, 2.170e-02, 7.193e-02, -7.009e-02, 2.738e-01, -3.389e-01, 2.229e-02) * s1_2_1;
	r0 += M4(-1.602e-02, -1.538e-01, -6.973e-01, -1.743e-01, 9.625e-02, 2.732e-02, 6.474e-02, 7.459e-02, -6.478e-03, 2.965e-02, -1.925e-01, 1.240e-05, 3.685e-02, -1.057e-01, 4.478e-01, -1.987e-01) * s1_2_2;
	r1 += M4(-5.907e-02, -5.028e-02, -1.837e-02, 1.538e-01, -2.820e-02, -7.810e-03, -3.588e-02, -3.678e-02, 1.564e-01, -3.096e-01, 9.019e-02, 1.072e-01, -1.042e-01, 3.484e-02, -3.279e-01, -1.841e-01) * s1_2_2;
	r0 += V4(-4.272e-03, -2.072e-02, -2.167e-02, -1.861e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.947e-02, -1.666e-02, -1.569e-02, -1.535e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC [CuNNy_fast] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-8.019e-03, -1.225e-03, -1.641e-03, -2.824e-07, -2.305e-02, 1.077e-02, -4.294e-03, 1.160e-03, 8.576e-03, 2.316e-03, -2.559e-02, 1.134e-02, -3.298e-03, 3.211e-03, 9.861e-03, -6.407e-04) * s0_0_0;
	r0 += M4(1.140e-02, -3.740e-02, -1.233e-02, 4.041e-03, -1.001e-01, -1.067e-01, -2.313e-02, -1.704e-02, 1.322e-01, 6.567e-02, -1.791e-03, 3.517e-04, -1.169e-01, -9.195e-02, 1.195e-02, 2.159e-02) * s0_0_1;
	r0 += M4(-5.787e-02, -5.169e-02, 5.273e-03, 5.542e-03, -8.157e-03, -2.940e-04, -1.861e-03, -3.849e-02, -6.032e-03, -1.020e-02, -8.999e-04, -8.099e-03, 4.738e-03, -3.598e-02, -4.486e-03, 1.447e-02) * s0_0_2;
	r0 += M4(-1.091e-02, 7.420e-04, -3.177e-03, 3.294e-03, -5.261e-02, 1.234e-02, -3.639e-02, 2.390e-02, 5.405e-02, -2.960e-02, -5.310e-02, -5.137e-04, 4.039e-02, -2.338e-02, -1.100e-02, -6.977e-03) * s0_1_0;
	r0 += M4(2.646e-01, -7.793e-02, 3.057e-01, -6.068e-02, 1.391e-01, -2.266e-01, 2.046e-01, -1.323e-01, 1.714e-01, 1.206e-01, 2.143e-01, -8.014e-01, 8.765e-02, 3.334e-01, -2.110e-01, -6.514e-02) * s0_1_1;
	r0 += M4(-1.812e-01, 1.570e-01, -1.291e-01, 1.202e-01, -1.941e-02, 2.638e-01, 4.650e-02, 3.889e-01, -2.770e-03, 1.531e-02, -1.539e-02, 3.223e-02, 1.130e-03, -1.655e-01, 3.954e-03, -1.997e-01) * s0_1_2;
	r0 += M4(-2.143e-03, 2.121e-05, -1.603e-02, -4.344e-03, -1.790e-03, -1.257e-03, -2.826e-02, 3.472e-03, -2.318e-03, -6.705e-03, -4.629e-03, -5.022e-03, -1.844e-03, -2.768e-03, 3.625e-02, 4.565e-04) * s0_2_0;
	r0 += M4(-1.415e-04, -6.084e-04, -1.248e-02, -6.190e-02, 1.995e-02, 6.420e-03, -9.058e-02, -1.255e-01, -1.653e-03, -1.315e-02, 4.583e-02, 7.104e-02, -1.773e-02, -6.332e-03, 1.193e-01, 1.532e-01) * s0_2_1;
	r0 += M4(4.816e-03, 9.804e-03, -8.764e-02, -2.684e-02, 5.486e-03, 5.159e-03, -4.413e-02, -4.529e-02, 3.601e-03, -7.294e-03, -4.108e-04, 2.512e-02, -7.213e-03, -6.950e-03, 4.822e-02, 5.477e-02) * s0_2_2;
	r0 += M4(-1.046e-02, -8.644e-03, -3.223e-03, 7.918e-04, 2.349e-04, -1.800e-02, 2.077e-02, -8.336e-03, 1.752e-02, -5.922e-04, 1.447e-03, -7.823e-04, 2.518e-02, 1.321e-02, -7.061e-03, -8.742e-04) * s1_0_0;
	r0 += M4(3.683e-02, 4.250e-02, -8.667e-04, -1.192e-02, 2.073e-02, 1.018e-01, -2.575e-03, -1.870e-04, 1.987e-01, 1.812e-01, 6.909e-04, -1.959e-02, 4.961e-02, 3.402e-02, -8.073e-03, -2.488e-03) * s1_0_1;
	r0 += M4(4.322e-03, 2.106e-02, 2.313e-03, -5.875e-03, -7.139e-04, 5.056e-02, 1.263e-02, -1.040e-02, 4.230e-03, 2.962e-02, 6.019e-03, 4.161e-02, 6.747e-03, 1.654e-02, 1.488e-03, -5.105e-03) * s1_0_2;
	r0 += M4(2.813e-02, -1.579e-02, 5.970e-02, -2.180e-02, -5.958e-03, 1.596e-02, 5.322e-03, -1.527e-02, -2.619e-02, 2.557e-02, 1.138e-02, 8.455e-03, 8.102e-03, -9.774e-03, -4.474e-02, 8.529e-03) * s1_1_0;
	r0 += M4(2.358e-01, -7.559e-01, 8.716e-02, 1.251e-01, 1.773e-01, 2.031e-01, -9.437e-01, 1.984e-01, -1.854e-01, -2.026e-01, 1.204e-01, 2.329e-01, -9.389e-01, 2.406e-01, 1.489e-01, 1.052e-01) * s1_1_1;
	r0 += M4(-9.875e-03, 4.342e-02, -4.279e-04, 7.305e-03, -1.213e-02, 1.292e-01, 3.308e-02, 3.642e-03, 2.155e-02, -1.153e-01, -5.879e-02, -2.128e-01, 2.561e-02, -1.967e-03, 2.709e-03, 1.101e-01) * s1_1_2;
	r0 += M4(-2.723e-02, 1.200e-02, 8.520e-02, -2.681e-02, -1.054e-02, 6.466e-04, 2.778e-02, 9.001e-03, 5.862e-03, 4.347e-03, -1.630e-02, 6.431e-03, 1.790e-02, 1.870e-04, 2.748e-02, 4.192e-04) * s1_2_0;
	r0 += M4(-3.405e-02, 1.765e-02, 1.587e-01, 1.218e-01, -1.802e-02, -3.912e-03, 7.538e-02, 2.863e-02, 2.191e-02, 1.605e-02, -6.763e-02, -7.495e-02, -3.969e-02, -4.838e-02, 1.534e-02, 1.685e-01) * s1_2_1;
	r0 += M4(3.807e-03, -1.361e-02, -4.115e-03, -1.566e-02, -3.456e-03, -1.608e-02, -5.111e-03, -5.899e-03, -5.810e-03, 1.837e-02, 6.603e-03, -1.296e-02, 1.592e-02, -4.402e-02, -7.093e-03, 4.167e-02) * s1_2_2;
	r0 += V4(-6.633e-09, -1.383e-08, -5.645e-09, -1.212e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
