// CuNNy 4x32 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x32_DS_vk] -in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(1.402e-01, 1.158e-01, -1.515e-02, 1.869e-02) * s0_0_0;
	r1 += V4(-1.961e-04, 1.321e-02, -2.776e-01, 5.414e-02) * s0_0_0;
	r2 += V4(2.810e-02, 3.022e-02, -3.687e-02, 5.919e-02) * s0_0_0;
	r3 += V4(-1.106e-01, -4.058e-01, -2.581e-02, 5.039e-02) * s0_0_0;
	r4 += V4(-3.633e-02, 8.136e-03, -1.644e-02, -3.799e-02) * s0_0_0;
	r5 += V4(2.147e-02, -1.253e-01, -4.397e-01, -4.951e-01) * s0_0_0;
	r6 += V4(5.941e-03, 4.134e-02, 4.427e-02, 1.157e-02) * s0_0_0;
	r7 += V4(-3.351e-02, -6.339e-02, 3.101e-02, -1.567e-01) * s0_0_0;
	r0 += V4(3.376e-01, 5.137e-01, 6.801e-01, 4.309e-01) * s0_0_1;
	r1 += V4(1.431e-01, -1.499e-01, 3.232e-01, -1.587e-01) * s0_0_1;
	r2 += V4(-3.429e-02, -3.292e-02, -6.559e-02, 6.684e-02) * s0_0_1;
	r3 += V4(7.400e-02, 1.826e-01, 1.436e-01, 1.440e-01) * s0_0_1;
	r4 += V4(-1.836e-02, -1.261e-01, -3.097e-01, -2.496e-01) * s0_0_1;
	r5 += V4(3.804e-01, 1.552e-01, 3.195e-01, 4.830e-01) * s0_0_1;
	r6 += V4(4.745e-02, -1.231e-01, -1.913e-01, 5.139e-02) * s0_0_1;
	r7 += V4(2.849e-01, 1.180e-01, -4.824e-02, 2.716e-01) * s0_0_1;
	r0 += V4(3.582e-02, -3.525e-02, -1.847e-02, 5.094e-03) * s0_0_2;
	r1 += V4(-1.485e-01, 5.103e-03, -4.829e-02, -1.631e-02) * s0_0_2;
	r2 += V4(7.499e-03, -3.154e-01, -9.550e-02, -8.201e-02) * s0_0_2;
	r3 += V4(3.615e-02, 2.094e-01, 7.373e-02, 5.096e-02) * s0_0_2;
	r4 += V4(2.692e-02, 1.821e-01, 3.291e-01, 3.030e-01) * s0_0_2;
	r5 += V4(2.130e-03, -3.400e-02, 2.484e-02, 1.721e-02) * s0_0_2;
	r6 += V4(-1.707e-02, 2.962e-02, -3.041e-02, -7.366e-02) * s0_0_2;
	r7 += V4(3.480e-02, -5.461e-02, 8.208e-03, -9.317e-02) * s0_0_2;
	r0 += V4(1.093e-01, -7.212e-02, -5.826e-03, -4.224e-04) * s0_1_0;
	r1 += V4(-1.713e-01, 9.822e-03, 3.154e-01, -4.188e-02) * s0_1_0;
	r2 += V4(-2.456e-01, -9.539e-02, -8.558e-02, -3.292e-01) * s0_1_0;
	r3 += V4(-1.156e-01, 3.057e-01, -6.714e-02, -4.720e-02) * s0_1_0;
	r4 += V4(1.948e-01, 3.308e-02, 2.064e-01, 7.105e-02) * s0_1_0;
	r5 += V4(-1.098e-01, 5.235e-02, -1.262e-01, -2.109e-01) * s0_1_0;
	r6 += V4(-8.121e-02, 4.995e-02, -1.210e-01, 1.983e-01) * s0_1_0;
	r7 += V4(3.997e-02, 8.066e-02, 4.347e-01, 2.435e-01) * s0_1_0;
	r0 += V4(-3.200e-01, -3.199e-01, -5.544e-02, -1.067e-02) * s0_1_1;
	r1 += V4(4.591e-01, 4.506e-01, -1.431e-01, 3.325e-01) * s0_1_1;
	r2 += V4(-1.996e-02, 2.732e-01, 1.476e-01, 3.350e-01) * s0_1_1;
	r3 += V4(-4.050e-01, -1.686e-01, -2.510e-01, -2.017e-01) * s0_1_1;
	r4 += V4(-1.562e-01, -7.693e-02, 2.019e-01, -2.490e-01) * s0_1_1;
	r5 += V4(3.747e-02, -2.020e-02, 2.629e-01, 2.049e-01) * s0_1_1;
	r6 += V4(-3.467e-01, -9.644e-02, -2.630e-01, -3.505e-01) * s0_1_1;
	r7 += V4(1.971e-01, 2.998e-01, -2.906e-01, -1.457e-01) * s0_1_1;
	r0 += V4(-2.705e-01, -1.971e-01, -5.310e-03, 4.424e-03) * s0_1_2;
	r1 += V4(-2.735e-01, -1.382e-01, -1.962e-01, -9.253e-02) * s0_1_2;
	r2 += V4(2.800e-01, 2.649e-01, 4.000e-03, 4.707e-02) * s0_1_2;
	r3 += V4(-6.534e-02, -1.062e-01, 1.412e-01, -4.043e-02) * s0_1_2;
	r4 += V4(2.230e-02, 8.610e-02, -3.994e-01, 1.294e-01) * s0_1_2;
	r5 += V4(4.769e-02, -9.240e-03, -2.876e-02, -8.654e-03) * s0_1_2;
	r6 += V4(4.747e-02, -2.890e-01, -6.488e-02, 2.029e-01) * s0_1_2;
	r7 += V4(-1.980e-01, 1.500e-01, -2.460e-02, -8.116e-02) * s0_1_2;
	r0 += V4(4.257e-03, -3.254e-02, 2.764e-03, -1.731e-02) * s0_2_0;
	r1 += V4(6.236e-03, -7.774e-03, -4.405e-02, -1.989e-03) * s0_2_0;
	r2 += V4(-1.303e-01, -4.927e-02, 4.351e-02, 3.376e-03) * s0_2_0;
	r3 += V4(2.153e-01, 1.005e-01, 3.856e-02, -8.021e-03) * s0_2_0;
	r4 += V4(-1.606e-01, 8.293e-03, -1.849e-01, -3.370e-02) * s0_2_0;
	r5 += V4(-1.476e-01, -4.229e-01, -4.017e-02, 4.499e-03) * s0_2_0;
	r6 += V4(8.462e-02, 1.015e-01, 7.625e-02, -2.431e-01) * s0_2_0;
	r7 += V4(-7.037e-03, -1.818e-02, 1.577e-01, -2.523e-02) * s0_2_0;
	r0 += V4(-8.824e-02, -6.970e-03, -6.666e-03, -4.229e-01) * s0_2_1;
	r1 += V4(-2.979e-01, -5.160e-02, -2.251e-01, -1.963e-01) * s0_2_1;
	r2 += V4(-1.030e-01, -1.068e-02, 6.134e-02, -9.472e-02) * s0_2_1;
	r3 += V4(3.514e-01, 1.137e-02, 3.034e-01, 1.053e-01) * s0_2_1;
	r4 += V4(-3.390e-02, -3.857e-02, 1.059e-01, -5.517e-03) * s0_2_1;
	r5 += V4(-1.999e-01, 3.659e-01, 2.230e-02, -3.166e-03) * s0_2_1;
	r6 += V4(3.258e-01, 3.372e-01, 4.482e-01, 3.489e-01) * s0_2_1;
	r7 += V4(-1.239e-01, -4.115e-01, -2.568e-01, -1.101e-01) * s0_2_1;
	r0 += V4(5.657e-02, 3.186e-02, 1.114e-03, -9.801e-03) * s0_2_2;
	r1 += V4(2.842e-01, -5.554e-02, 2.881e-01, 1.431e-01) * s0_2_2;
	r2 += V4(2.175e-01, -6.810e-02, 1.050e-01, 2.083e-02) * s0_2_2;
	r3 += V4(2.015e-02, -1.250e-01, -3.721e-01, 5.211e-03) * s0_2_2;
	r4 += V4(1.896e-03, 1.844e-02, 6.775e-02, 4.782e-02) * s0_2_2;
	r5 += V4(-4.119e-02, 5.519e-02, 7.110e-03, 4.139e-03) * s0_2_2;
	r6 += V4(-2.788e-02, -4.450e-02, 9.456e-02, -1.450e-01) * s0_2_2;
	r7 += V4(-1.802e-01, -8.282e-02, -1.122e-02, 6.999e-02) * s0_2_2;
	r0 += V4(-1.535e-02, 1.132e-02, -5.610e-01, 4.152e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.445e-03, -2.239e-02, 3.314e-04, 2.360e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.592e-02, 1.555e-03, -3.941e-02, 6.883e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(3.660e-03, 4.294e-03, 1.067e-02, 7.502e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(6.860e-02, 3.952e-03, 5.099e-03, 3.528e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(1.923e-02, -3.455e-02, 8.268e-03, -7.333e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(1.123e-02, 1.034e-02, 2.022e-02, 6.489e-03);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(8.537e-03, 1.178e-02, 1.004e-02, 5.314e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC [CuNNy_4x32_DS_vk] -conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xC1370610, 0xFB3C0FF9, 0xE3F71108, 0x0CEA04F7);
	r1 = D(r1, s0_0_0, 0x1CFFEAF8, 0x09F50F0F, 0xE62424F2, 0xE6EBFB19);
	r2 = D(r2, s0_0_0, 0xDB1B20D0, 0x07F3ED03, 0xF7014AF3, 0x0EFBE10C);
	r3 = D(r3, s0_0_0, 0xF8FCF709, 0x1BE7E515, 0xFE0D26C6, 0x0CDCFB14);
	r4 = D(r4, s0_0_0, 0xEAD3D028, 0xEFD20E0A, 0x34FDF6DA, 0xFDF5FD16);
	r5 = D(r5, s0_0_0, 0xDB0E1CF5, 0x1F10E908, 0x302FF314, 0x32CAA74E);
	r6 = D(r6, s0_0_0, 0xFBF5FCF6, 0xDD0BFE1D, 0xF2D01B0F, 0x18F21FDF);
	r7 = D(r7, s0_0_0, 0xF30D14F8, 0xF0811B0A, 0xF3DC33C5, 0xF1E91F01);
	r0 = D(r0, s0_0_1, 0xF204F326, 0x014805FC, 0xD4050D01, 0xF6E80700);
	r1 = D(r1, s0_0_1, 0x0618F720, 0xD7FC29CD, 0x2137FFF9, 0x211806E6);
	r2 = D(r2, s0_0_1, 0x2E11E127, 0x0248F6E7, 0xEEF9CC53, 0x2012E609);
	r3 = D(r3, s0_0_1, 0x0F07070E, 0xF1ECF113, 0x0D0C3506, 0x532DF40F);
	r4 = D(r4, s0_0_1, 0xE20EFB04, 0xEE060E00, 0xE628089F, 0x27DEE5FB);
	r5 = D(r5, s0_0_1, 0x134AEC02, 0xD31CE630, 0xDCFB0B0B, 0xC0DDE4F5);
	r6 = D(r6, s0_0_1, 0xF21714D9, 0xE5EC180C, 0x042012E9, 0xCFFCE02F);
	r7 = D(r7, s0_0_1, 0x035649E6, 0x02810A94, 0x00B604BE, 0xFFDB03E9);
	r0 = D(r0, s0_0_2, 0x1FFB3CE5, 0x03F80E07, 0xF9D9FB10, 0x061104F6);
	r1 = D(r1, s0_0_2, 0x23E8FBFB, 0x00EE0705, 0xF21FE914, 0x1AEBED15);
	r2 = D(r2, s0_0_2, 0xF61BE409, 0x01180B15, 0x834932CC, 0xE7090102);
	r3 = D(r3, s0_0_2, 0xEC01070A, 0x11180CEA, 0xC2B1F70C, 0x09DB08F2);
	r4 = D(r4, s0_0_2, 0x0B0F020D, 0xE8F215F0, 0xEE99C0E5, 0x0802E31D);
	r5 = D(r5, s0_0_2, 0xFC7F0103, 0xE42CFE0D, 0x0E18FC04, 0x1321F706);
	r6 = D(r6, s0_0_2, 0x03190BF9, 0x33D3FEEF, 0x0D81EA01, 0x81D909FA);
	r7 = D(r7, s0_0_2, 0xFE4105E4, 0xF4A335F4, 0x2609F6F5, 0xF61AD52B);
	r0 = D(r0, s0_1_0, 0xDFC0F967, 0x07020EF7, 0x0A0DF510, 0xF21C041A);
	r1 = D(r1, s0_1_0, 0x0008D90D, 0xFDDA0803, 0xEC6410EB, 0x01D118DC);
	r2 = D(r2, s0_1_0, 0x1DD71DE0, 0x09C7F502, 0x09EB0505, 0x0E7FCADD);
	r3 = D(r3, s0_1_0, 0x0C0404F3, 0x1F21E6E5, 0xEEE5CD1B, 0xF6D30D17);
	r4 = D(r4, s0_1_0, 0xD07F5EB9, 0x13F3172D, 0xFAF1C521, 0xEDE40B00);
	r5 = D(r5, s0_1_0, 0xCA7F0C17, 0x32F903E0, 0x10BE1DE8, 0xFFCBFCB4);
	r6 = D(r6, s0_1_0, 0x08D020EC, 0xF647DB28, 0xD88139B7, 0x1FD4C90C);
	r7 = D(r7, s0_1_0, 0xFB3B170B, 0xE5812D18, 0x0D6B1316, 0xE4FE3AF7);
	r0 = D(r0, s0_1_1, 0xD8E6BF24, 0x28B70BF2, 0x28EC0D06, 0xE3FD04F0);
	r1 = D(r1, s0_1_1, 0xF3BA06EE, 0x9D05E116, 0x1915EDDF, 0x3181E0F4);
	r2 = D(r2, s0_1_1, 0x181F29F3, 0x06C8E3D7, 0x40DCF6DF, 0x43FC2207);
	r3 = D(r3, s0_1_1, 0x06E9FA01, 0xE09AD1ED, 0x4AEC48F9, 0xDA87CF25);
	r4 = D(r4, s0_1_1, 0xDA2500EE, 0x16DD4A15, 0xDB6353B2, 0x0F4D57C1);
	r5 = D(r5, s0_1_1, 0xE67FDD15, 0x95EDDD17, 0xCDF0FBE7, 0xDF3217C3);
	r6 = D(r6, s0_1_1, 0x0214EB14, 0xE42B3403, 0x0EE27FC6, 0x1B81812B);
	r7 = D(r7, s0_1_1, 0x02580E01, 0x81819581, 0x3858E4FF, 0xF92F230B);
	r0 = D(r0, s0_1_2, 0xFA8128CB, 0x20AB0503, 0x031B10FD, 0xEEEEF309);
	r1 = D(r1, s0_1_2, 0xFF710F09, 0xF35A0CF6, 0x1BE6F201, 0xEBDB0FFE);
	r2 = D(r2, s0_1_2, 0xE60303F1, 0x145C2B0C, 0xAC8C07E6, 0xECD30200);
	r3 = D(r3, s0_1_2, 0x1B17F3FA, 0xF032DEF0, 0xDD3DE639, 0xF113E112);
	r4 = D(r4, s0_1_2, 0x10F019F2, 0xF0DB180D, 0xF3E7D0F4, 0xFAED05F7);
	r5 = D(r5, s0_1_2, 0x0517F411, 0xD6EF33E5, 0xF0B6CF23, 0x0D430323);
	r6 = D(r6, s0_1_2, 0x19ECCB3F, 0x122511D2, 0xEA15AD47, 0x064E9325);
	r7 = D(r7, s0_1_2, 0xE17FF706, 0xB2811BD6, 0x25420FE1, 0xF4400711);
	r0 = D(r0, s0_2_0, 0xF50EC940, 0x0FA106F7, 0xF7A9E2F3, 0x12C0E9F5);
	r1 = D(r1, s0_2_0, 0xEA2BDD03, 0x2A7FCFFF, 0xF7FAF109, 0x13263009);
	r2 = D(r2, s0_2_0, 0x0F81D1F2, 0xFC9A0AEC, 0xF5DCF1EA, 0xF47F09F9);
	r3 = D(r3, s0_2_0, 0x0F25E817, 0xFE6006F5, 0x1E813032, 0xE76309EC);
	r4 = D(r4, s0_2_0, 0xFA56ECFA, 0xE1671EF2, 0x0895DCE5, 0x1714EB04);
	r5 = D(r5, s0_2_0, 0xDA2614E3, 0x0A0FF014, 0x0D62031E, 0x144B0602);
	r6 = D(r6, s0_2_0, 0x18021215, 0xECF4E236, 0xFF8130F4, 0xEDDB15F1);
	r7 = D(r7, s0_2_0, 0x042FFFF6, 0xCA7FD145, 0xC33DDAF6, 0xF30D0EFB);
	r0 = D(r0, s0_2_1, 0x454009EE, 0x073A26FD, 0xFF7FDF21, 0x0319FA08);
	r1 = D(r1, s0_2_1, 0x0B02E618, 0xC7F4D0F7, 0x11EFF80D, 0x1E31F013);
	r2 = D(r2, s0_2_1, 0xFA17CF11, 0xE39F08F2, 0x2227B2E3, 0x05ECF00A);
	r3 = D(r3, s0_2_1, 0x0422ED0E, 0xC97FFAFB, 0x17818B43, 0xF942F902);
	r4 = D(r4, s0_2_1, 0x158126D9, 0x0651F7FE, 0x21DFF0F1, 0x07E3F2FF);
	r5 = D(r5, s0_2_1, 0x217D31E9, 0xB10CFAE2, 0x1F81E1F9, 0xE07F1DF5);
	r6 = D(r6, s0_2_1, 0x03F3FEEA, 0xDC53E637, 0x066424C2, 0xCB4BF9F2);
	r7 = D(r7, s0_2_1, 0xF5260506, 0xD8810421, 0x0B81F001, 0xBD7F24D0);
	r0 = D(r0, s0_2_2, 0x36810506, 0x0508FFFC, 0x07B10406, 0x05240DF4);
	r1 = D(r1, s0_2_2, 0xF6EE4131, 0xF38131F6, 0x16E510ED, 0xEF24150F);
	r2 = D(r2, s0_2_2, 0x03FFDD1F, 0x11F10FF7, 0xD4D9BAFC, 0xED05EAFC);
	r3 = D(r3, s0_2_2, 0x01BDFB0F, 0xF3EB14F4, 0xD06422D3, 0xE8EFFBF8);
	r4 = D(r4, s0_2_2, 0xF9BDF912, 0xDE01F6EC, 0xDD1815D1, 0x02220403);
	r5 = D(r5, s0_2_2, 0xCE7FED14, 0xD2B412E0, 0x0F81EDF9, 0x1A28F0FF);
	r6 = D(r6, s0_2_2, 0x03D9F60F, 0x0C1C30E1, 0xC87F11CE, 0xF27F21D1);
	r7 = D(r7, s0_2_2, 0xF17F01F3, 0xB4B72011, 0x27A501FB, 0xDBFF07E7);
	r0 = D(r0, s1_0_0, 0x18FBE403, 0x040DFD04, 0xF7050CED, 0x1AF80400);
	r1 = D(r1, s1_0_0, 0xE4DD09F9, 0xF53B0404, 0x1AFF151A, 0x280DF908);
	r2 = D(r2, s1_0_0, 0xF72AFFDF, 0xF9E90CED, 0x221F072E, 0x33E11B0D);
	r3 = D(r3, s1_0_0, 0x05F3FD08, 0xFEE62FE2, 0x25FD2711, 0xF80DF902);
	r4 = D(r4, s1_0_0, 0xFE1504DF, 0xFF0A06E3, 0xFD4715EC, 0xE607F70A);
	r5 = D(r5, s1_0_0, 0xE7E1FCEC, 0x000DFBF4, 0x0A0ADDDC, 0xEEE5E502);
	r6 = D(r6, s1_0_0, 0xF20F2DDB, 0x04E30DF0, 0x19E3F03D, 0xEDF404DF);
	r7 = D(r7, s1_0_0, 0x04FBD506, 0xFC16240C, 0xDC2D041B, 0xE71A02F2);
	r0 = D(r0, s1_0_1, 0xD22514E4, 0x0418DEE6, 0xDE06EFE4, 0xF2F601F8);
	r1 = D(r1, s1_0_1, 0xD3EB12E7, 0x07EC0822, 0xF3F3161B, 0xE701E305);
	r2 = D(r2, s1_0_1, 0xFA19FB0D, 0x1107F04A, 0x062D0C13, 0x1BFCF5FE);
	r3 = D(r3, s1_0_1, 0x010C0605, 0xD7E413ED, 0xA8221202, 0xEDEFE0E9);
	r4 = D(r4, s1_0_1, 0xF9FCF8E4, 0x1506CCE3, 0xF8DA00B4, 0x3BEE2321);
	r5 = D(r5, s1_0_1, 0xEA13F237, 0x06F50D07, 0xFCDFF00A, 0x11EB10ED);
	r6 = D(r6, s1_0_1, 0xDFE9F5F4, 0xFBFCEDF0, 0xBD07EBC3, 0x0FF2EF37);
	r7 = D(r7, s1_0_1, 0xF7FAD317, 0x8E192741, 0xE432C827, 0xF8160E1C);
	r0 = D(r0, s1_0_2, 0x270CFB1F, 0xFEF0F8F2, 0x110BE3F1, 0x11FDFCFF);
	r1 = D(r1, s1_0_2, 0xF52101F6, 0xCF2CF901, 0xF50FEE0D, 0x0DF3F007);
	r2 = D(r2, s1_0_2, 0x04EC0319, 0x1F1213FB, 0xF4E8DA13, 0xE40F180A);
	r3 = D(r3, s1_0_2, 0xFD10001E, 0xE7011A11, 0x1C0A26EB, 0xFFFA04EE);
	r4 = D(r4, s1_0_2, 0xECF7F400, 0xF901DBFA, 0x07FF1800, 0xEB1107F9);
	r5 = D(r5, s1_0_2, 0xE61C0A0A, 0x04FFFE06, 0x1805E3E7, 0xFB10F301);
	r6 = D(r6, s1_0_2, 0xF2E1F319, 0xD8EF0A16, 0xF9DEE005, 0xFAD4DE00);
	r7 = D(r7, s1_0_2, 0x142A4401, 0xF0820B09, 0x1FDBF832, 0xE724030A);
	r0 = D(r0, s1_1_0, 0x0E13FFFA, 0xED26FDFA, 0x080110F6, 0xC50ABDE0);
	r1 = D(r1, s1_1_0, 0xFCEBEEF2, 0x0BF41AF5, 0xECE60EF8, 0xEC19011B);
	r2 = D(r2, s1_1_0, 0xF7E3F9F7, 0xFB0B0AE4, 0xFBCDFD13, 0xE218EE06);
	r3 = D(r3, s1_1_0, 0xF5F30FFB, 0x08F6EAEC, 0xEA2AFAF4, 0x0200FCF9);
	r4 = D(r4, s1_1_0, 0x16F0201D, 0xF21B05DF, 0xF92FF3EF, 0x1F120D07);
	r5 = D(r5, s1_1_0, 0x0A131018, 0xE3EF0DE2, 0xFD1E1038, 0xE8D5EFF2);
	r6 = D(r6, s1_1_0, 0x053009F5, 0x0FD80F9D, 0xFCFFC911, 0xFEFB0B01);
	r7 = D(r7, s1_1_0, 0xE102FC07, 0x031AFE12, 0x34F339D4, 0xC614F233);
	r0 = D(r0, s1_1_1, 0x1B3D152D, 0x4A130EF8, 0xFD0822EA, 0x1C1B290B);
	r1 = D(r1, s1_1_1, 0x0816FA22, 0xF6E917F5, 0xF715EEFB, 0xF2004326);
	r2 = D(r2, s1_1_1, 0x02260AF9, 0xF101D9F5, 0x03D2F610, 0xF8EEE109);
	r3 = D(r3, s1_1_1, 0x26ED1C17, 0x30FBF01E, 0x12E2CED9, 0x1D122011);
	r4 = D(r4, s1_1_1, 0x0A1F06EA, 0x100C46B9, 0xFD35F610, 0xEA02EB05);
	r5 = D(r5, s1_1_1, 0x0205EB01, 0xCDF621FC, 0xCFE90E0C, 0x2CD6352A);
	r6 = D(r6, s1_1_1, 0xC54AF0E4, 0xF008D2F8, 0x17CC0700, 0x0BF1FBEF);
	r7 = D(r7, s1_1_1, 0x01F51FF5, 0x1C3A2E3B, 0xEE22F7F6, 0xEA16642F);
	r0 = D(r0, s1_1_2, 0xF514E40D, 0xE4F103F2, 0x230CD8EF, 0x0409FAFD);
	r1 = D(r1, s1_1_2, 0x2436CAFD, 0xFCDDF9D1, 0xFBF70C0D, 0x25F7F817);
	r2 = D(r2, s1_1_2, 0x0FCFFF0D, 0x02181803, 0x01E32533, 0x0FF10506);
	r3 = D(r3, s1_1_2, 0xF900D8E7, 0x011EE0FC, 0x1606EF0D, 0xF209F202);
	r4 = D(r4, s1_1_2, 0xF7ED1C04, 0x070D1FF3, 0x1AF21416, 0x0FFB09FC);
	r5 = D(r5, s1_1_2, 0x03F31F0D, 0x1502F3F7, 0xF4121FFC, 0x0703E018);
	r6 = D(r6, s1_1_2, 0x3621F8EA, 0xFD070504, 0x08E6234B, 0x052A1025);
	r7 = D(r7, s1_1_2, 0x01041FF5, 0x1231DEE8, 0x24E4EBF7, 0x390B24F3);
	r0 = D(r0, s1_2_0, 0xDCF60E1E, 0xE8FFF009, 0x0FFDFD0A, 0xEBE9F40D);
	r1 = D(r1, s1_2_0, 0x09F90B0F, 0x2D011700, 0x0BEA0202, 0x02F8090C);
	r2 = D(r2, s1_2_0, 0xF1F4FDE6, 0xFC00EB14, 0xF1191D32, 0xF0111222);
	r3 = D(r3, s1_2_0, 0xEEEA10F3, 0x0010F407, 0xFA15131B, 0xF708000D);
	r4 = D(r4, s1_2_0, 0x0300050E, 0xF3101A20, 0xFBF30609, 0x02FEFCF3);
	r5 = D(r5, s1_2_0, 0x0C00012A, 0x211BF704, 0x2A23FB03, 0xE0FB05F1);
	r6 = D(r6, s1_2_0, 0x04F109F9, 0x09F4F1F3, 0x2FF8D30A, 0xFBFD0306);
	r7 = D(r7, s1_2_0, 0xF4ED0E08, 0x2A2005C4, 0x0CEBEAF8, 0xE00502FC);
	r0 = D(r0, s1_2_1, 0xED05FDE2, 0xCDFCF913, 0xEEF3F5ED, 0x00F00DF1);
	r1 = D(r1, s1_2_1, 0x001A110F, 0x08F3D803, 0x08FDFE02, 0xFF14F600);
	r2 = D(r2, s1_2_1, 0xF72310E6, 0xFDF7030C, 0xF42611EB, 0x100D2301);
	r3 = D(r3, s1_2_1, 0x0CF4E4EC, 0xFC17F80D, 0x01090F05, 0x02131AFD);
	r4 = D(r4, s1_2_1, 0x06F4FDED, 0xFAFE05E1, 0xEAC9E844, 0xF300FD09);
	r5 = D(r5, s1_2_1, 0x181108FD, 0xEF03E614, 0xDF0F281A, 0x1C10F80E);
	r6 = D(r6, s1_2_1, 0x1CFC0610, 0x150403F1, 0x0FF1F9FD, 0x01F6130D);
	r7 = D(r7, s1_2_1, 0x0D090E04, 0x150B14EE, 0xFA1323F4, 0x0CF5E4FC);
	r0 = D(r0, s1_2_2, 0x1FE22ACE, 0x06FC0F00, 0xF708F0FF, 0x06000501);
	r1 = D(r1, s1_2_2, 0x3626F2DD, 0x000DDAFC, 0x0AFCDC06, 0xE0FDFC1B);
	r2 = D(r2, s1_2_2, 0x1800FBF7, 0xF006F703, 0x0A38EF1A, 0xEDF3FC15);
	r3 = D(r3, s1_2_2, 0x06FB0DFF, 0x04130200, 0x00EFEA0C, 0x05F50303);
	r4 = D(r4, s1_2_2, 0x030EFFEB, 0xFB02E201, 0xFD2FEAFC, 0xFA09FBFD);
	r5 = D(r5, s1_2_2, 0x2913F4EE, 0x1407E5EC, 0x0001F501, 0x08FFF223);
	r6 = D(r6, s1_2_2, 0xFEECF309, 0x202AFFDF, 0xFEFAC528, 0x1516EDF9);
	r7 = D(r7, s1_2_2, 0x030505E4, 0xF0EFF71A, 0xEEC9131D, 0x3405F502);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xD60BD4E5, 0xE308EE01, 0xFAFB1B0B, 0xF9260823);
	r1 = D(r1, s0_0_0, 0xFBFA0309, 0xF6DF0007, 0x130BE4F8, 0xFB120C0A);
	r2 = D(r2, s0_0_0, 0x2FF21220, 0x04F90013, 0x00F3E9E1, 0x0C0800EB);
	r3 = D(r3, s0_0_0, 0x070FFBF2, 0x02D0FBF8, 0x0AE9E2FC, 0x04F0F7EE);
	r4 = D(r4, s0_0_0, 0x21182AD3, 0xFFFEECDD, 0x20100904, 0xEFF3100B);
	r5 = D(r5, s0_0_0, 0x0C0B15F8, 0x26E1000B, 0x11FF022C, 0xF72DF91F);
	r6 = D(r6, s0_0_0, 0x18F41BED, 0xDC110DE5, 0xE4F52BCB, 0x0D21F31A);
	r7 = D(r7, s0_0_0, 0x0EF8EEFA, 0xDA6E8102, 0x051F3113, 0x0B102AD6);
	r0 = D(r0, s0_0_1, 0x10E7EBF8, 0xEF15F410, 0x050C09F4, 0x06F5F508);
	r1 = D(r1, s0_0_1, 0x020E141E, 0x0E141EFD, 0x10EC0FFD, 0xE8D30803);
	r2 = D(r2, s0_0_1, 0xE3F70BE1, 0x0F0EF61B, 0x0801E5D4, 0xE5E1EFEA);
	r3 = D(r3, s0_0_1, 0x01E9FCFF, 0xE803FE05, 0xB215DBF0, 0x01EFFDEF);
	r4 = D(r4, s0_0_1, 0x11DF00DC, 0xFAFA0B00, 0x0C1EF922, 0x18F71003);
	r5 = D(r5, s0_0_1, 0xE0160BF7, 0xFD0505FE, 0xF513F310, 0x0503070B);
	r6 = D(r6, s0_0_1, 0x18ECFC14, 0x06060BE7, 0xBA0AE5ED, 0x170CE022);
	r7 = D(r7, s0_0_1, 0xDF22EE02, 0xF1811D06, 0x13110C12, 0x03C211F2);
	r0 = D(r0, s0_0_2, 0xF416F31A, 0xFA0C0102, 0x1608FEF4, 0xFAFD07FF);
	r1 = D(r1, s0_0_2, 0x080509F9, 0x20FF0B0B, 0x110FF603, 0x0D1EF301);
	r2 = D(r2, s0_0_2, 0x11EE1200, 0x0E07002D, 0xE701230A, 0xF2FE0409);
	r3 = D(r3, s0_0_2, 0xF905F5F1, 0xF50302FF, 0xF6040FFD, 0xDCFD0BF5);
	r4 = D(r4, s0_0_2, 0x1206FD04, 0xE80D00F4, 0xFC0908F7, 0xFC0A06F8);
	r5 = D(r5, s0_0_2, 0x00FF05F2, 0x1F020202, 0x51FA0E2C, 0xDDF40C17);
	r6 = D(r6, s0_0_2, 0xBF062BEC, 0x0BFD13FA, 0xFF090AE4, 0xF8FD0F0C);
	r7 = D(r7, s0_0_2, 0x191F13F8, 0xD68B28E6, 0xFF00F405, 0xEDDA0FF3);
	r0 = D(r0, s0_1_0, 0x090B0C0C, 0xF0F6F814, 0x09F2FA39, 0xFDFCF851);
	r1 = D(r1, s0_1_0, 0xFDF2E706, 0x000EE6E8, 0xFEFD1005, 0xE8020004);
	r2 = D(r2, s0_1_0, 0x0615F4F9, 0x0908F025, 0xDEFFDC1C, 0x1D041208);
	r3 = D(r3, s0_1_0, 0xFD0CFFF1, 0x0E01E6F6, 0xF8EEF9F6, 0x1A0DE8F9);
	r4 = D(r4, s0_1_0, 0x0E2204D7, 0xFDC1A6F3, 0xDDE5C6DE, 0xF002D9F5);
	r5 = D(r5, s0_1_0, 0xFEF50515, 0xFE050FF2, 0xEFFBEB24, 0x210702EC);
	r6 = D(r6, s0_1_0, 0x01F20617, 0x0EE9F713, 0x07022F03, 0x0ADAFC1A);
	r7 = D(r7, s0_1_0, 0xFF000B0D, 0x1D11F6F4, 0xF7EA1BDF, 0x04FEE5E4);
	r0 = D(r0, s0_1_1, 0x21130CF2, 0x37120027, 0x220B1617, 0x37101E29);
	r1 = D(r1, s0_1_1, 0xFDF6D609, 0x010503D1, 0x26E6091D, 0x050AE2D7);
	r2 = D(r2, s0_1_1, 0xE1FCEE07, 0xF710F02E, 0xFDF50A0D, 0xFAFFF10B);
	r3 = D(r3, s0_1_1, 0x0A1B08D5, 0x090C13E6, 0x13F9E9F3, 0x020C0EE4);
	r4 = D(r4, s0_1_1, 0xC5EFD2DC, 0xED2E0523, 0x1C264603, 0x0A190908);
	r5 = D(r5, s0_1_1, 0x1CEC0D10, 0xF7D9DBFF, 0x0BF60022, 0x29F7FCDF);
	r6 = D(r6, s0_1_1, 0x25151848, 0xDB300723, 0x5EEA0EFD, 0x0CFBFF1F);
	r7 = D(r7, s0_1_1, 0xF403FCEA, 0x0C29FE00, 0xDBF5E8EC, 0x160AD20B);
	r0 = D(r0, s0_1_2, 0x0400C2CE, 0xEBFEF00C, 0x07F8F9FC, 0x02F706FA);
	r1 = D(r1, s0_1_2, 0x08090BFB, 0x000DDDBE, 0xC60CE70C, 0x2112F703);
	r2 = D(r2, s0_1_2, 0xEB0F05EC, 0x0B011C04, 0xF1D81B23, 0x08100604);
	r3 = D(r3, s0_1_2, 0xFD00EBE0, 0xFE0DEE07, 0x29F6F905, 0x13E5F900);
	r4 = D(r4, s0_1_2, 0xF31A09F3, 0x290EFFFE, 0x43F1D602, 0x0E0506F9);
	r5 = D(r5, s0_1_2, 0x0913DA14, 0xDC07F42E, 0xFE14F9FC, 0xF4E90909);
	r6 = D(r6, s0_1_2, 0x25F0DD22, 0x2EDD0910, 0x14DB0731, 0xF11814FE);
	r7 = D(r7, s0_1_2, 0x0A05EFEC, 0x0CF1DEE9, 0xFED108F4, 0x16EB0B0F);
	r0 = D(r0, s0_2_0, 0xEFD2DC03, 0xEE03FD11, 0x03FEF9E4, 0xE9F8F7EE);
	r1 = D(r1, s0_2_0, 0xF5FC1300, 0x08FAF50F, 0x07F70BFE, 0xF3DF16EB);
	r2 = D(r2, s0_2_0, 0x0800CFFF, 0xE7F503EB, 0x15FD0807, 0x090FE8F4);
	r3 = D(r3, s0_2_0, 0x10F60217, 0xF80AFA0D, 0xE300EDFE, 0xD60FFA06);
	r4 = D(r4, s0_2_0, 0x04F1E00F, 0xF1E11AEC, 0xDCF3F9FF, 0x09F9FD0A);
	r5 = D(r5, s0_2_0, 0xF9E709F3, 0x0810E8EA, 0xE501F5F4, 0x16F4F512);
	r6 = D(r6, s0_2_0, 0x070105E1, 0xF309E705, 0x0A13D8F2, 0x100FECF9);
	r7 = D(r7, s0_2_0, 0xF31301FF, 0xD31FD4F6, 0x13FC1814, 0x081201F2);
	r0 = D(r0, s0_2_1, 0xE8F71BFE, 0xE5DA0104, 0xE6FBF918, 0xFEF7FFF0);
	r1 = D(r1, s0_2_1, 0xFD181308, 0xE215E60B, 0x0AFEED14, 0x192D06FD);
	r2 = D(r2, s0_2_1, 0xEC0CF6FB, 0xF406CF05, 0x2F171409, 0x0305F002);
	r3 = D(r3, s0_2_1, 0x21E50BFF, 0x1EFDF6F7, 0x1B2FC4EB, 0x0A001BF6);
	r4 = D(r4, s0_2_1, 0xDEEF0D19, 0x20200705, 0xC7061801, 0x0CFBF908);
	r5 = D(r5, s0_2_1, 0xE3E6C7FD, 0xDBECF713, 0x14FAFAFC, 0xFE13D9F3);
	r6 = D(r6, s0_2_1, 0xCA1803F2, 0xEC0A0103, 0x0CDCE6DD, 0x0CE90906);
	r7 = D(r7, s0_2_1, 0xEFEA07FB, 0xF7F800F8, 0x1EF305FF, 0xFFEE0FEF);
	r0 = D(r0, s0_2_2, 0x04FAD12D, 0x1AFFE7F9, 0xF90BF2FE, 0xF90101FF);
	r1 = D(r1, s0_2_2, 0xFEFE0A03, 0xECF41916, 0xE700020C, 0xE2D812F8);
	r2 = D(r2, s0_2_2, 0x0FF81C0E, 0x08F504FC, 0xF71303E4, 0xEFE80503);
	r3 = D(r3, s0_2_2, 0xB9FAFB09, 0xDD09EC0D, 0xFCE30B09, 0x0A1605FA);
	r4 = D(r4, s0_2_2, 0x08F6F807, 0x0F0006F2, 0xF3E1E004, 0xFBEFF507);
	r5 = D(r5, s0_2_2, 0x090DE9FB, 0xFE24E30F, 0xC0EEE610, 0xF3EE0AF4);
	r6 = D(r6, s0_2_2, 0xCD13D5FE, 0x0D1204F9, 0x03A614BA, 0xE7FCFDEB);
	r7 = D(r7, s0_2_2, 0x12011109, 0x120702F4, 0xF90807FD, 0xECEB16E2);
	r0 = D(r0, s1_0_0, 0x005705E0, 0x07F7F80F, 0xF5EB0C0B, 0xFBCE0400);
	r1 = D(r1, s1_0_0, 0x06F304E4, 0xF6FBF0EC, 0x1D03F80F, 0x32E302F6);
	r2 = D(r2, s1_0_0, 0xFBE8D91B, 0xF109031C, 0xF2FA13EC, 0x0FE1F5F6);
	r3 = D(r3, s1_0_0, 0x00FB07F8, 0x0EF206DE, 0xEFE0D7FA, 0xE8F7FDE4);
	r4 = D(r4, s1_0_0, 0xEA0C031C, 0xDC150A07, 0xEF390D57, 0xE90007EB);
	r5 = D(r5, s1_0_0, 0xFEECED09, 0x0F060305, 0xF10017F8, 0x272912F0);
	r6 = D(r6, s1_0_0, 0x16090F20, 0x12D902F7, 0x1FB215FB, 0xF8F513F0);
	r7 = D(r7, s1_0_0, 0xC80901FF, 0x06CF1290, 0xF41802E4, 0xC913F7F6);
	r0 = D(r0, s1_0_1, 0x1624F904, 0x050705E3, 0xEFF22313, 0x080BFAFF);
	r1 = D(r1, s1_0_1, 0xF7F124E2, 0xE705FE3C, 0xFB00FB39, 0x16E9E528);
	r2 = D(r2, s1_0_1, 0x04EEC9DD, 0xE9FB06F7, 0xFFF624F9, 0xFA09FA08);
	r3 = D(r3, s1_0_1, 0x19040003, 0x220BEC14, 0x162CB4EF, 0x0822041D);
	r4 = D(r4, s1_0_1, 0xEDF604D6, 0x05F415CA, 0xFFE09F81, 0xE1EB01F8);
	r5 = D(r5, s1_0_1, 0xF50AFC22, 0xFF1414D5, 0xCDFA19F9, 0xF20704FE);
	r6 = D(r6, s1_0_1, 0x0519EDE5, 0xF217F906, 0x1AEFFD03, 0xEA37E5F3);
	r7 = D(r7, s1_0_1, 0xE10808F2, 0x1403C2FB, 0x2926F902, 0x0614D831);
	r0 = D(r0, s1_0_2, 0xE301F8E3, 0xF70516E7, 0xEFF8FB01, 0x0DFBF6FD);
	r1 = D(r1, s1_0_2, 0xE207054C, 0xD703EB12, 0xFBFF04F9, 0x19FB0914);
	r2 = D(r2, s1_0_2, 0x0D01DE5B, 0xDCDEE4D4, 0xEEFC0BFD, 0xF806FFFF);
	r3 = D(r3, s1_0_2, 0x02FBF9E7, 0x17F8071C, 0x0B1302F9, 0xF40FF328);
	r4 = D(r4, s1_0_2, 0xF00A0C0D, 0x02F904EE, 0xFD22DDDB, 0xEDF70D03);
	r5 = D(r5, s1_0_2, 0xFBFDE5FD, 0x19EC02E6, 0xF10808C3, 0xEFFF09F6);
	r6 = D(r6, s1_0_2, 0x11F2DD00, 0xFD0FEC1E, 0x0BFFFBDD, 0x0217F2EE);
	r7 = D(r7, s1_0_2, 0xEB0BF0F4, 0x2F09D8DA, 0xFEF3D9EC, 0xFD00ECF5);
	r0 = D(r0, s1_1_0, 0x113C0533, 0x0E0407FA, 0xFBFE0D32, 0xE420FD17);
	r1 = D(r1, s1_1_0, 0x03F80EF1, 0x15012DFA, 0x09E60515, 0xF1F6DF02);
	r2 = D(r2, s1_1_0, 0x0AF60901, 0xFEFCFF20, 0xF30009C8, 0x0D08F214);
	r3 = D(r3, s1_1_0, 0x080D0815, 0xF5F619F7, 0x00FCA415, 0x001302FA);
	r4 = D(r4, s1_1_0, 0x08EA0E0E, 0x07F104EA, 0x00E0FC30, 0x0404FE02);
	r5 = D(r5, s1_1_0, 0xFE15EBF8, 0x1801FDF5, 0x0118E70B, 0xFA03F31B);
	r6 = D(r6, s1_1_0, 0xDC160B0D, 0xE1F51625, 0x5181DCC9, 0xFCF21CFD);
	r7 = D(r7, s1_1_0, 0x12080302, 0xA507D5E2, 0x04E71406, 0xD215F206);
	r0 = D(r0, s1_1_1, 0x0101EDF1, 0xF9FAF30D, 0xF70A1521, 0xF106FB0C);
	r1 = D(r1, s1_1_1, 0x03FB0FF9, 0x10E910E2, 0xDDEFFD05, 0xD71BF607);
	r2 = D(r2, s1_1_1, 0x0314F6F0, 0x15E712D9, 0xEA6919B5, 0x11FDFFF3);
	r3 = D(r3, s1_1_1, 0x09F81208, 0xF0ECF6E6, 0x0CC426ED, 0xE8F9000C);
	r4 = D(r4, s1_1_1, 0x0B0411B8, 0x3A0A0200, 0x19E5C4F6, 0x38F91418);
	r5 = D(r5, s1_1_1, 0x19EA03D7, 0x04FE0BAA, 0x0A03D40E, 0xF006E8FD);
	r6 = D(r6, s1_1_1, 0xE9FAE419, 0xEDE505F1, 0x811626C3, 0xF9FA0013);
	r7 = D(r7, s1_1_1, 0x1705F1ED, 0xE8360FCD, 0x0AF00E1F, 0xC816F01D);
	r0 = D(r0, s1_1_2, 0xF9EB1691, 0xF21208F7, 0x0006FC25, 0x14F905F1);
	r1 = D(r1, s1_1_2, 0xFB0AE30A, 0xFB0A13ED, 0xFE0AF501, 0xF7F4F424);
	r2 = D(r2, s1_1_2, 0xF8150229, 0x1D07100A, 0xF901F9F4, 0x11F20BDF);
	r3 = D(r3, s1_1_2, 0x050D20F5, 0x08F901E9, 0x16E71A0A, 0x01FFFEF6);
	r4 = D(r4, s1_1_2, 0x0611F6F9, 0x1BFB24EA, 0xFCF6DAF6, 0xF9020FF0);
	r5 = D(r5, s1_1_2, 0xFFFC0EE6, 0xECF7F3CC, 0x0924EBD9, 0x172DEFF0);
	r6 = D(r6, s1_1_2, 0xFEECE1CF, 0x20FEF8E3, 0xFFF8FD07, 0xFDF70206);
	r7 = D(r7, s1_1_2, 0x21F7FD18, 0xE31A0419, 0xDCEA2DF6, 0xF308CF11);
	r0 = D(r0, s1_2_0, 0xFFCED822, 0xFCFE0112, 0xEE18FB00, 0x0003100C);
	r1 = D(r1, s1_2_0, 0xF5F3FC05, 0x3211F303, 0x01F0060E, 0x07DAFD01);
	r2 = D(r2, s1_2_0, 0x0C2114E8, 0xEFFEF4F3, 0x12F0E50E, 0x0406FD05);
	r3 = D(r3, s1_2_0, 0x070F0B00, 0x040BF506, 0x110AFAE6, 0x1300F7F4);
	r4 = D(r4, s1_2_0, 0x09FB15FE, 0xCFFDFFFA, 0x10F90423, 0x0A08FB0A);
	r5 = D(r5, s1_2_0, 0x04E9EEF0, 0x1D05ED0B, 0x2B061216, 0xD10A0E15);
	r6 = D(r6, s1_2_0, 0xDFF410F5, 0xE9DC0604, 0xF9E7CBF3, 0xF3F30900);
	r7 = D(r7, s1_2_0, 0x0B030101, 0x0327F007, 0x0801DDF3, 0xBE13021F);
	r0 = D(r0, s1_2_1, 0x0BE8DBFB, 0x1BFB1000, 0x0D10030D, 0x03080E02);
	r1 = D(r1, s1_2_1, 0xE514F622, 0x03E9E40D, 0xFAEF08FD, 0xDDF71BDC);
	r2 = D(r2, s1_2_1, 0xFC19E4EC, 0x02F904F3, 0x290CEFFA, 0xDF171508);
	r3 = D(r3, s1_2_1, 0xF10CEAFA, 0xFF05F4FA, 0xF62821DE, 0x1111F9F8);
	r4 = D(r4, s1_2_1, 0x1816EF1B, 0xF5FA0211, 0x08161AE0, 0x09FFEBEE);
	r5 = D(r5, s1_2_1, 0xFBFA33F9, 0xF608DFE7, 0xF9F410FC, 0x3010FCF8);
	r6 = D(r6, s1_2_1, 0x0BF436D6, 0x0FF1F4F3, 0x0E10F808, 0x14ED02F0);
	r7 = D(r7, s1_2_1, 0x0C0F04E9, 0xFB0D22B6, 0x20FEE914, 0x3AF7FB0D);
	r0 = D(r0, s1_2_2, 0xE5E4D4E0, 0xFEFD07F7, 0x220D0206, 0xFFFF0601);
	r1 = D(r1, s1_2_2, 0x20200322, 0xFCF33216, 0x19050009, 0xF1FAFFD1);
	r2 = D(r2, s1_2_2, 0xDE15FEE8, 0x18FA040B, 0x06FE00DE, 0x0FF006FD);
	r3 = D(r3, s1_2_2, 0xE206F009, 0x02FE0602, 0xD9FAFD20, 0xF704FD08);
	r4 = D(r4, s1_2_2, 0xF1FE020B, 0xF4F10CF5, 0xECFE29FB, 0x0A030701);
	r5 = D(r5, s1_2_2, 0x05FFF4F9, 0xE808FBEA, 0x0500F720, 0xFD15E70A);
	r6 = D(r6, s1_2_2, 0x29E9FF14, 0xEE15F6FF, 0xD217EA01, 0x19FE0002);
	r7 = D(r7, s1_2_2, 0x17F911FF, 0xED0CEF1B, 0x0C04E307, 0xD4F1EE06);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDEC0308, 0x0114E7FE, 0xFFFB0E04, 0x0EFCF9F2);
	r1 = D(r1, s0_0_0, 0xF7D4F3EC, 0x28271DE9, 0xE7141903, 0x0D05F617);
	r2 = D(r2, s0_0_0, 0xD2FBF801, 0xED00EEFB, 0xFC17E9FF, 0xE5E90205);
	r3 = D(r3, s0_0_0, 0xFBFCFE06, 0x15EE0203, 0xE5260320, 0x17F8F2FA);
	r4 = D(r4, s0_0_0, 0xF902EAEF, 0xFDF8E9FD, 0x0AFF1105, 0xF40BED07);
	r5 = D(r5, s0_0_0, 0x03F61E11, 0xF7FE25F5, 0xCAFF0120, 0xF5EC010B);
	r6 = D(r6, s0_0_0, 0x000AFEEF, 0x1514F1FF, 0x2D14AEDD, 0xF6EF14F9);
	r7 = D(r7, s0_0_0, 0xECFA14DC, 0x14D9EC1F, 0x2308FAF9, 0x0907B2F9);
	r0 = D(r0, s0_0_1, 0xFEFE0804, 0xF9F81AF4, 0x0B0E0D1A, 0xFC0DFC13);
	r1 = D(r1, s0_0_1, 0x2DDFF81A, 0xF304FD0B, 0x0615EE03, 0x0CEEEFF6);
	r2 = D(r2, s0_0_1, 0x2104F7DE, 0xFB10FAF9, 0xFDEFDEF0, 0x1211EBE1);
	r3 = D(r3, s0_0_1, 0x1E06FEFD, 0xEADBF525, 0x131DFEFA, 0x04F1FB0F);
	r4 = D(r4, s0_0_1, 0x12E20C06, 0xF1F8EF15, 0xE4090509, 0x02F60E0E);
	r5 = D(r5, s0_0_1, 0xFE0DF2F8, 0x24F60519, 0xEBFEF004, 0x16F704D2);
	r6 = D(r6, s0_0_1, 0x0528FB16, 0x3319110E, 0x17FAF6B4, 0xF4230603);
	r7 = D(r7, s0_0_1, 0xF8082C00, 0xEFF19EE4, 0x1929F23B, 0x031DC414);
	r0 = D(r0, s0_0_2, 0xDB31DEF6, 0xFDF4F3F6, 0x05110303, 0x000207F5);
	r1 = D(r1, s0_0_2, 0x03FE081A, 0x022805FD, 0xFD0BE814, 0xF2F007EC);
	r2 = D(r2, s0_0_2, 0xF9EC1120, 0xDE2A0816, 0xFB1C0909, 0x08F5EFFF);
	r3 = D(r3, s0_0_2, 0xF70C07DD, 0x0BF7FEFB, 0xEE1001F9, 0x09FD06ED);
	r4 = D(r4, s0_0_2, 0x03FEF105, 0xF4FC041E, 0x3CDB0BF1, 0x05F70BEC);
	r5 = D(r5, s0_0_2, 0x0721F0EC, 0x08FAFD0E, 0x0CFF16DB, 0xF61BF51D);
	r6 = D(r6, s0_0_2, 0xFD240AFD, 0x100C1310, 0x3507BBDA, 0x1B05ED15);
	r7 = D(r7, s0_0_2, 0x093A06FD, 0x1902E5A1, 0xEAD30F2A, 0x12FEF212);
	r0 = D(r0, s0_1_0, 0x05F70628, 0x021F10F8, 0xFDEE0B11, 0x3DED1F09);
	r1 = D(r1, s0_1_0, 0xFAE80DF2, 0xF702F017, 0x04E9F2F7, 0x18F1EC1C);
	r2 = D(r2, s0_1_0, 0x1B0B0EE6, 0x0EEBF104, 0x2ED70412, 0x2BFB0D16);
	r3 = D(r3, s0_1_0, 0xF60018EC, 0xF60AFD07, 0x08FFFC02, 0x0910F600);
	r4 = D(r4, s0_1_0, 0xFB17EC00, 0x0A14D3EF, 0xFB120725, 0xEA1006FF);
	r5 = D(r5, s0_1_0, 0x0FF91E02, 0x010517F6, 0x36092813, 0x0C0509FD);
	r6 = D(r6, s0_1_0, 0x1D0DF903, 0x04E31A1D, 0x10D522FE, 0x0DF4FE06);
	r7 = D(r7, s0_1_0, 0xF90515E1, 0x0D54F521, 0xFCE8EAED, 0x2A14F32C);
	r0 = D(r0, s0_1_1, 0xEC1AFB01, 0xF500120C, 0xEA0BF6E6, 0xD207F0F1);
	r1 = D(r1, s0_1_1, 0xF229F9E1, 0x2D31F401, 0x2308FDFE, 0xE2FDF4E0);
	r2 = D(r2, s0_1_1, 0x0C1703EC, 0x24091805, 0xF8B1F0DE, 0xF306F8E6);
	r3 = D(r3, s0_1_1, 0xB91FEE0E, 0x1607FD02, 0xF7FFFDD8, 0xD3030AFA);
	r4 = D(r4, s0_1_1, 0x07090DFA, 0x23F81619, 0x24CF03FE, 0x120C00FF);
	r5 = D(r5, s0_1_1, 0x1AFCEF00, 0xF2DCF114, 0x49E5FAF1, 0x0D11F9F6);
	r6 = D(r6, s0_1_1, 0xAAE6DBE9, 0xBD03F6FC, 0xE51AFF28, 0x27F21DD3);
	r7 = D(r7, s0_1_1, 0xF1FD3AF9, 0xF7099DB1, 0x1EFA17EB, 0x3C28CC7F);
	r0 = D(r0, s0_1_2, 0xFB040A0E, 0x03FA0D0D, 0x0613F712, 0xF9FF0A14);
	r1 = D(r1, s0_1_2, 0xE53C100C, 0x0ADA0116, 0x09F703F7, 0x03FDF210);
	r2 = D(r2, s0_1_2, 0xF61CF5F9, 0xEAF6FEEC, 0xE0161E04, 0x1104EE15);
	r3 = D(r3, s0_1_2, 0x29FF1020, 0x050902FA, 0xFAE4061E, 0xFC020820);
	r4 = D(r4, s0_1_2, 0x060507FC, 0x1BE802B4, 0xD5F303E6, 0xFC000205);
	r5 = D(r5, s0_1_2, 0x0204140C, 0xED3102EF, 0xF2DAE8EC, 0x0310E9F4);
	r6 = D(r6, s0_1_2, 0xFD0C2210, 0xE4F9F6F4, 0xE5D4BBD4, 0xEEF8E811);
	r7 = D(r7, s0_1_2, 0x21FBF4D0, 0x20D0E7EE, 0x0C1C03E7, 0x230CB861);
	r0 = D(r0, s0_2_0, 0x1CDF1402, 0x13FC090D, 0xFA041407, 0x490B170B);
	r1 = D(r1, s0_2_0, 0xE5FF0515, 0xD1F401D0, 0xE5FB20FA, 0x0EF620E8);
	r2 = D(r2, s0_2_0, 0xF12314EE, 0x20F80108, 0x1B08131C, 0xF1021BF7);
	r3 = D(r3, s0_2_0, 0x07F30702, 0xFF0113F2, 0x1EF8F8EA, 0xF0F811FA);
	r4 = D(r4, s0_2_0, 0xD4FFFFFC, 0xC8FEE905, 0xFB0805E8, 0x05FDEE06);
	r5 = D(r5, s0_2_0, 0x29EB0901, 0x091502EE, 0x0D1C2201, 0xF801050C);
	r6 = D(r6, s0_2_0, 0x1DE5EC05, 0x0911FBEF, 0x2FEE3707, 0x0409DF07);
	r7 = D(r7, s0_2_0, 0xFDFD2DF7, 0x00D60A21, 0xD203BFE5, 0xF3F4CB06);
	r0 = D(r0, s0_2_1, 0x3FFCE7E8, 0xC4E42813, 0xF5EE1009, 0xE101F3FD);
	r1 = D(r1, s0_2_1, 0xFADCF9FC, 0xF2F0F006, 0xE0E6FCFF, 0xE2100911);
	r2 = D(r2, s0_2_1, 0xFE01DC15, 0x10071F0C, 0x0F28FFFD, 0x041FF80E);
	r3 = D(r3, s0_2_1, 0x00EFD1FB, 0x0912F006, 0x16E7FBE8, 0x220E03FA);
	r4 = D(r4, s0_2_1, 0xE6F0F401, 0xD8060BF5, 0xEDF6F00A, 0xFEF8FDF9);
	r5 = D(r5, s0_2_1, 0xF4FCEBF2, 0x1DF4D806, 0x0020F40A, 0x031906FF);
	r6 = D(r6, s0_2_1, 0x2F010DF2, 0x04D32BE3, 0x40092327, 0x0C0A3EF4);
	r7 = D(r7, s0_2_1, 0xE9EF04F4, 0xDBEABEF6, 0xE2002408, 0x10318C06);
	r0 = D(r0, s0_2_2, 0x0BE000D4, 0x01FE0908, 0x0F0DF6E1, 0x04FEFDF8);
	r1 = D(r1, s0_2_2, 0xF83735FD, 0xDDE1F9FF, 0x05F2F708, 0x031311EC);
	r2 = D(r2, s0_2_2, 0x14EAF319, 0xFEEE03E6, 0xDD1010FC, 0xFBF2F304);
	r3 = D(r3, s0_2_2, 0xFA080005, 0xF905F402, 0xF1F9FB33, 0x0DFEFEF8);
	r4 = D(r4, s0_2_2, 0x08FAF310, 0xFAE80302, 0xF427EF0C, 0x02F7FA04);
	r5 = D(r5, s0_2_2, 0xF90900F0, 0xF9F4D7FD, 0xF1F4F50C, 0x02F82116);
	r6 = D(r6, s0_2_2, 0x05EF05F4, 0x1808FE0A, 0x4805BA34, 0x0011F90C);
	r7 = D(r7, s0_2_2, 0x04F5E7F5, 0x20FA380D, 0x16251E11, 0x1923EB14);
	r0 = D(r0, s1_0_0, 0x01050F0E, 0x03FE02F4, 0xF80A1519, 0x15EEEF04);
	r1 = D(r1, s1_0_0, 0x09F2F9F4, 0xF90CFD00, 0xFE08EEF4, 0x0EF4FD10);
	r2 = D(r2, s1_0_0, 0xE826DC24, 0x0FE8FE13, 0x25DE11D4, 0x17FDE7E4);
	r3 = D(r3, s1_0_0, 0xF30A0DFF, 0x0DF7F703, 0xE803370A, 0xFC040506);
	r4 = D(r4, s1_0_0, 0xD023FE29, 0xE80F160A, 0xD40A051A, 0xF703100A);
	r5 = D(r5, s1_0_0, 0xF21907EC, 0xEE1D07F9, 0x0307E3E2, 0xF6F3250A);
	r6 = D(r6, s1_0_0, 0xF209130E, 0x18EA090E, 0x0D0D0EF5, 0xFE0202F2);
	r7 = D(r7, s1_0_0, 0x030314F3, 0xCD1EE207, 0xD8121CFC, 0x08FCFA05);
	r0 = D(r0, s1_0_1, 0x1200E2F4, 0x10EBF6F4, 0x04DC111E, 0x11EBCC10);
	r1 = D(r1, s1_0_1, 0x19D9F3FF, 0xF0F438FD, 0x27EDECEB, 0x0EFCE6DD);
	r2 = D(r2, s1_0_1, 0x56EC5CDE, 0xFB0EC801, 0x04070205, 0x20FF00EB);
	r3 = D(r3, s1_0_1, 0xFD060FE6, 0x1DE62DF4, 0x20EB18DD, 0xD3274FC9);
	r4 = D(r4, s1_0_1, 0x0D06100F, 0xFBE50104, 0x0218F9DF, 0xEB1CF70E);
	r5 = D(r5, s1_0_1, 0x15F104EA, 0xF81813FF, 0x1209E004, 0xE01B243D);
	r6 = D(r6, s1_0_1, 0xF8FBE706, 0xFFF20A09, 0xCD06E009, 0xF21521F2);
	r7 = D(r7, s1_0_1, 0x07ED19FA, 0xCFD32B11, 0xB70DE423, 0xFC18F80E);
	r0 = D(r0, s1_0_2, 0xA85D6CBB, 0x00040AE4, 0x14E737EC, 0x18EC03F3);
	r1 = D(r1, s1_0_2, 0xD3F213FA, 0xFD07E515, 0x071DC904, 0xF70AC400);
	r2 = D(r2, s1_0_2, 0xE82E381A, 0xEA2DB212, 0x1A0BC541, 0x07F8F921);
	r3 = D(r3, s1_0_2, 0xF602B003, 0x24F20E05, 0x04FEEE11, 0xFDF0FA04);
	r4 = D(r4, s1_0_2, 0xF9F321FC, 0xF9FD1025, 0x27E9ED11, 0xE5101716);
	r5 = D(r5, s1_0_2, 0x0D0ECDF7, 0x00E84A0B, 0xEE00ED1E, 0x02FDDFD9);
	r6 = D(r6, s1_0_2, 0x30D89E00, 0x22C2C5D9, 0x05FBC6F2, 0x0C14E1FB);
	r7 = D(r7, s1_0_2, 0xFC0BFEF6, 0x1B06032B, 0xE0F900F7, 0xE327152B);
	r0 = D(r0, s1_1_0, 0x19E5222A, 0x1EF9F405, 0xEEEE2809, 0x02CE1D1D);
	r1 = D(r1, s1_1_0, 0xF712FE0C, 0x0707DC13, 0xF318F20F, 0xF906EAEA);
	r2 = D(r2, s1_1_0, 0x99441312, 0xECFC35F2, 0x0E00CF02, 0x05FFD216);
	r3 = D(r3, s1_1_0, 0xF215FCFB, 0x0A15EF01, 0x18E525FF, 0x04FE03F0);
	r4 = D(r4, s1_1_0, 0x000BF716, 0xF82FF9EF, 0xE10E2C20, 0xF816FFFA);
	r5 = D(r5, s1_1_0, 0x0CFCDFF7, 0xF2FFF6F9, 0xF4FF2503, 0xD5170703);
	r6 = D(r6, s1_1_0, 0xF6F116EA, 0xDF333613, 0x1AEBEFE5, 0x0DE102F7);
	r7 = D(r7, s1_1_0, 0xD3210AF9, 0x81E6380E, 0x0701F2EC, 0xE20F14FB);
	r0 = D(r0, s1_1_1, 0xDF112EFC, 0x16F7EF0F, 0xDA1E39F7, 0xD538FB19);
	r1 = D(r1, s1_1_1, 0xFF160808, 0xFE1B081F, 0xDAFF0611, 0xF91FD5E8);
	r2 = D(r2, s1_1_1, 0xD70DE8DF, 0xD4072E23, 0xF208E00E, 0x17F508E2);
	r3 = D(r3, s1_1_1, 0x0C08FCEA, 0x0A07F3DD, 0xF731C4EC, 0xE708F7DD);
	r4 = D(r4, s1_1_1, 0x52A5FEF1, 0x1C1BF6D5, 0xBAFF2F15, 0xEEE00623);
	r5 = D(r5, s1_1_1, 0x17E61A08, 0x1607181E, 0xF8F5F9FD, 0xFAE1041E);
	r6 = D(r6, s1_1_1, 0xE6F532F2, 0xE70D4718, 0x49D4240A, 0xCBF10109);
	r7 = D(r7, s1_1_1, 0x1EF518F6, 0x07E9F010, 0xEA330DF1, 0xDDE831EF);
	r0 = D(r0, s1_1_2, 0xEAF3B71B, 0x09F3FDE0, 0x0DFB3B08, 0x0D091204);
	r1 = D(r1, s1_1_2, 0xBD060F21, 0xCAE0D812, 0x17320F08, 0x0DE5FD17);
	r2 = D(r2, s1_1_2, 0xC9FCC6FB, 0xF626F318, 0xF224E2F5, 0x16FEF626);
	r3 = D(r3, s1_1_2, 0xFECE1DE8, 0x0D080C04, 0xF7160F05, 0x3EE203E8);
	r4 = D(r4, s1_1_2, 0x28E0FFEE, 0x07FB22FB, 0x82D12141, 0xD9FB060D);
	r5 = D(r5, s1_1_2, 0x030707FC, 0x0ADBFF16, 0x8138FF1C, 0x0B1E0107);
	r6 = D(r6, s1_1_2, 0x5BE7DFF5, 0x46EB1EFC, 0x520D2603, 0xACFC1E18);
	r7 = D(r7, s1_1_2, 0x0623FA2D, 0x2D3202FB, 0xEA10F2FE, 0x02110C08);
	r0 = D(r0, s1_2_0, 0xF7EFF9EC, 0x09EB02FC, 0xE0F00F0D, 0xF1F70CFF);
	r1 = D(r1, s1_2_0, 0x11EA0510, 0x0B09FD04, 0x01FF0603, 0xDC4BF8F9);
	r2 = D(r2, s1_2_0, 0x15EE140E, 0xFFEE0DE6, 0x0F0008D7, 0xF20E09FF);
	r3 = D(r3, s1_2_0, 0xEE12FB01, 0x08FFF40E, 0x19D101CD, 0x0DF9F823);
	r4 = D(r4, s1_2_0, 0x05F40AFB, 0x0705050A, 0x2DF415F6, 0x02F102F4);
	r5 = D(r5, s1_2_0, 0xE021F81F, 0x070E06FD, 0xD91EF7FB, 0xF6FAFEF1);
	r6 = D(r6, s1_2_0, 0xEB1A12EF, 0xB14209F4, 0xFFF32DE0, 0xFDFB09F2);
	r7 = D(r7, s1_2_0, 0xF00B02F9, 0xF3C41537, 0x0CEFE42D, 0xFA0501F2);
	r0 = D(r0, s1_2_1, 0xF41EFDDC, 0xF2F10106, 0xE5FC0107, 0xB43F01F6);
	r1 = D(r1, s1_2_1, 0xD8F00FED, 0x07EEF90A, 0xF10914F2, 0x3AFE0CD7);
	r2 = D(r2, s1_2_1, 0x35D9E8E7, 0xC913F82A, 0xF4F109FC, 0x150802F1);
	r3 = D(r3, s1_2_1, 0x22DFF500, 0x0CE6EE18, 0x1348DCD6, 0x28F2F6F9);
	r4 = D(r4, s1_2_1, 0x2C0EF106, 0xFB00E7E6, 0x2AD2F7F0, 0xFDF009FD);
	r5 = D(r5, s1_2_1, 0xE5FA112B, 0xEFCE0F22, 0x10F4FAFC, 0x37AB090F);
	r6 = D(r6, s1_2_1, 0xC92011EA, 0x8C26133F, 0xBB0D0B2B, 0xCC100338);
	r7 = D(r7, s1_2_1, 0x08FD05FF, 0x13FF0FFE, 0x45BC0C17, 0xBD1217F6);
	r0 = D(r0, s1_2_2, 0x61810CAC, 0xCB0703EA, 0xBED414FF, 0x00F21801);
	r1 = D(r1, s1_2_2, 0x9CE4F80D, 0x81B03D09, 0xE60407EC, 0xC82A1118);
	r2 = D(r2, s1_2_2, 0x3FFAEFE4, 0xE7FB0BE5, 0x1FFCE9F5, 0x07F9000C);
	r3 = D(r3, s1_2_2, 0x7F88FAF3, 0xED1CFC08, 0xF425FCE1, 0x031DF51C);
	r4 = D(r4, s1_2_2, 0x1AEAF317, 0x1BD8FFEE, 0xCA2EE61F, 0x18EBFB0A);
	r5 = D(r5, s1_2_2, 0xCD180101, 0xC304E52F, 0xC4120AF6, 0xFD0119FE);
	r6 = D(r6, s1_2_2, 0xA9340AF6, 0xE0F90403, 0xD8F6182A, 0xCE1A0419);
	r7 = D(r7, s1_2_2, 0x0512F416, 0x0D2CF6FC, 0x0A1CEF12, 0x1D201113);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xED34D3C3, 0x1007E9F2, 0xDDF3F703, 0xF506DBFF);
	r1 = D(r1, s0_0_0, 0xE70800F8, 0x0BF201F6, 0x0AF61DEB, 0xDA04EE06);
	r2 = D(r2, s0_0_0, 0xE7B9121A, 0x070CF3DF, 0xFD220F16, 0xFD0202F6);
	r3 = D(r3, s0_0_0, 0x0F0BFFEB, 0x071202F1, 0xF9F90BE1, 0xF70E0BEC);
	r4 = D(r4, s0_0_0, 0xF4D11B2C, 0xE90910F1, 0x29D71712, 0x03F6E315);
	r5 = D(r5, s0_0_0, 0x04DFF21B, 0x20EEFA0A, 0x1E0AEA26, 0x03FC131D);
	r6 = D(r6, s0_0_0, 0x1912F2D9, 0xE825C8D6, 0x010F1F14, 0x0E0D0A0E);
	r7 = D(r7, s0_0_0, 0x0A13040C, 0xA83E0409, 0x010D0C06, 0x25E30702);
	r0 = D(r0, s0_0_1, 0xC11B2929, 0xF303FC03, 0xF91F082A, 0x1704EF13);
	r1 = D(r1, s0_0_1, 0xF9F7E018, 0xF0180819, 0x120C054A, 0x0F0A071E);
	r2 = D(r2, s0_0_1, 0x5A55E5FA, 0x1DE1BDD5, 0x0408EEFC, 0x13D003D2);
	r3 = D(r3, s0_0_1, 0xFE09041F, 0x14321051, 0x2939F432, 0x0F22243C);
	r4 = D(r4, s0_0_1, 0xFAE605F0, 0xD9F00141, 0x0ED7E8F6, 0xD895DBB3);
	r5 = D(r5, s0_0_1, 0x0CF527F1, 0xF924DFFB, 0x04E1FBFA, 0xECBC01EC);
	r6 = D(r6, s0_0_1, 0xF9D620DC, 0xDFE9F0FF, 0xEB1C0E17, 0x2A1DE0F4);
	r7 = D(r7, s0_0_1, 0xFCF3EDF9, 0x05D699F3, 0x26E26104, 0x00EDE213);
	r0 = D(r0, s0_0_2, 0x1CE1F5FB, 0xE51CF105, 0x0FFE23E0, 0xFDFF0506);
	r1 = D(r1, s0_0_2, 0xE9FF04EC, 0x22DD02E8, 0xFA020AEB, 0x330CF3EF);
	r2 = D(r2, s0_0_2, 0xD8D8C9D9, 0x1DDDB9DB, 0xD8DE12E4, 0xFB12EDEE);
	r3 = D(r3, s0_0_2, 0x050E0500, 0x020618FF, 0xEC03DB1C, 0xF9001005);
	r4 = D(r4, s0_0_2, 0xF7040DF9, 0x0CF011E5, 0xEEF8301C, 0x0FEA0FD9);
	r5 = D(r5, s0_0_2, 0x02EA0618, 0xF0FB27DF, 0xE40B3D0A, 0x0E1AFA1E);
	r6 = D(r6, s0_0_2, 0x16FB1F26, 0x0E01080A, 0xD3CCCEE1, 0x01F0140C);
	r7 = D(r7, s0_0_2, 0xFBE7E005, 0xE126DDF9, 0xF295FCE2, 0xFFD2EF16);
	r0 = D(r0, s0_1_0, 0x1F0CF208, 0x271508DB, 0xED00E411, 0x1319E9F6);
	r1 = D(r1, s0_1_0, 0x181810E5, 0x0D13060B, 0x030C05F9, 0xF8ECFA09);
	r2 = D(r2, s0_1_0, 0xFCC42109, 0xFB09FBFB, 0xF8F9D5F7, 0x35EEFD10);
	r3 = D(r3, s0_1_0, 0x09F41804, 0x10E60204, 0x14DDFA00, 0xFDEEFEFC);
	r4 = D(r4, s0_1_0, 0xF7EE1E14, 0xFC27EA09, 0xF5062206, 0x0D10070E);
	r5 = D(r5, s0_1_0, 0x170AFAE3, 0x09F9F428, 0x14010008, 0xF4D11B00);
	r6 = D(r6, s0_1_0, 0xEDFC0A11, 0xEE1C1CF2, 0x1C16411B, 0xFAFAFD09);
	r7 = D(r7, s0_1_0, 0xFFFAF904, 0x0D15164D, 0x01F9FF1D, 0xF818140C);
	r0 = D(r0, s0_1_1, 0x24F23DE2, 0x1612D9E9, 0x0810E1F7, 0xF103D8FD);
	r1 = D(r1, s0_1_1, 0x230714F9, 0xF533DA26, 0xF42BF008, 0x040220FB);
	r2 = D(r2, s0_1_1, 0x1F2C0A14, 0xC8E1E907, 0x09B51DD9, 0xDF17F913);
	r3 = D(r3, s0_1_1, 0xE7F221FD, 0xF41D1FF7, 0x060705F0, 0x0F08FEFB);
	r4 = D(r4, s0_1_1, 0x11E501F1, 0x1CEBEAFD, 0x03C500E9, 0xF2F0F4FA);
	r5 = D(r5, s0_1_1, 0x032DE005, 0x0381DD0B, 0xA30CF004, 0xFFF717DD);
	r6 = D(r6, s0_1_1, 0xFF0CE615, 0x3AF4E71C, 0x1611FD1D, 0xF9F6EC10);
	r7 = D(r7, s0_1_1, 0x04E00E12, 0x2702E508, 0xFBF5E500, 0x08F30D05);
	r0 = D(r0, s0_1_2, 0x02BCDBF9, 0x0E1B0115, 0x0DEB07F3, 0x0A080405);
	r1 = D(r1, s0_1_2, 0x190F13F0, 0xC4EDEA0E, 0xE4F3E8FE, 0xEBDAE7F5);
	r2 = D(r2, s0_1_2, 0xF3E603E3, 0xFA0B001D, 0x230EF014, 0xF714042D);
	r3 = D(r3, s0_1_2, 0xFD111907, 0xE907100F, 0x1400FC11, 0x04F7FDFE);
	r4 = D(r4, s0_1_2, 0xF11509F1, 0xF90DEA0C, 0xD50523F1, 0x07080910);
	r5 = D(r5, s0_1_2, 0x05F7F5F0, 0x13B3FF2B, 0xF12407E2, 0xE824F61C);
	r6 = D(r6, s0_1_2, 0xEEFE0303, 0xECEAF2FA, 0xDFF9FD50, 0x02F615F9);
	r7 = D(r7, s0_1_2, 0x12E3010F, 0xD8FDE2EC, 0x0ED722F0, 0xF9F0F6FA);
	r0 = D(r0, s0_2_0, 0x1CF61611, 0xECF5EFFD, 0xFC0004FC, 0xF3F301EF);
	r1 = D(r1, s0_2_0, 0xEE14F2FC, 0x2ED30F07, 0xF60CF6FB, 0x030FF5F8);
	r2 = D(r2, s0_2_0, 0xF1D90C16, 0x000F0CFF, 0xF7EA080C, 0x05EB0BFC);
	r3 = D(r3, s0_2_0, 0x00F3F30E, 0x090201F9, 0x1C011CE4, 0x010106FD);
	r4 = D(r4, s0_2_0, 0x09F7F90B, 0xE8F21307, 0xEDE5ECFC, 0x06FDF9FD);
	r5 = D(r5, s0_2_0, 0xFB22FA1C, 0x1A0B25E8, 0x26EC1002, 0xFAFDEB02);
	r6 = D(r6, s0_2_0, 0xFA1DEE02, 0xF31EE9FE, 0xECFC3C0D, 0x02100BF5);
	r7 = D(r7, s0_2_0, 0xFD04F800, 0x0FE62BFC, 0x221DEFFC, 0x1505FDD5);
	r0 = D(r0, s0_2_1, 0x1AEDFF21, 0xF6000912, 0x000AEA00, 0xFD030003);
	r1 = D(r1, s0_2_1, 0x00EFEFE6, 0xF5210102, 0x04FA0301, 0x1327F80A);
	r2 = D(r2, s0_2_1, 0xEB2A03F6, 0x0BF90A06, 0x1EE02716, 0x0002FEE4);
	r3 = D(r3, s0_2_1, 0xFF0FF0FE, 0x11120CF7, 0xEB2FF4D8, 0x07030204);
	r4 = D(r4, s0_2_1, 0x06F7E8F7, 0x001FFBEF, 0x051818D8, 0xFEFA0910);
	r5 = D(r5, s0_2_1, 0xF104F8F0, 0xE4DB13EE, 0x1314F0F0, 0x0EF917F1);
	r6 = D(r6, s0_2_1, 0x180D01F8, 0x24F9EB16, 0xFEE70202, 0xFFFD0503);
	r7 = D(r7, s0_2_1, 0xFD0904FB, 0x233603D6, 0xE9F4080C, 0xEF30F2D6);
	r0 = D(r0, s0_2_2, 0xDF070E14, 0xF604FF17, 0x03F10209, 0xF2FA0018);
	r1 = D(r1, s0_2_2, 0x17D70022, 0xF510E6DF, 0xE1F60EF4, 0xF2030705);
	r2 = D(r2, s0_2_2, 0x0209EB15, 0xFCEF0D08, 0x2E090C07, 0x000707F0);
	r3 = D(r3, s0_2_2, 0x001AF3F8, 0xFA03F9EC, 0xD40DE803, 0xFFF700FC);
	r4 = D(r4, s0_2_2, 0x0318F5F5, 0x12F90BF7, 0x17190A01, 0x0105F907);
	r5 = D(r5, s0_2_2, 0xFC01F902, 0x0C1DDFEF, 0xF8FBF1E3, 0xFAF714FB);
	r6 = D(r6, s0_2_2, 0x01DF17ED, 0xF2F60310, 0xEE030DE8, 0x00000103);
	r7 = D(r7, s0_2_2, 0xFF0EED08, 0x051FF7D0, 0x05E208F5, 0x221002CE);
	r0 = D(r0, s1_0_0, 0xEBF40210, 0xF4FDF009, 0xFF121705, 0x0B1D0DEF);
	r1 = D(r1, s1_0_0, 0x1A00FB0F, 0xD404020C, 0x06091E06, 0xF3091FF4);
	r2 = D(r2, s1_0_0, 0xEB02070E, 0x0E1AF61C, 0xFDFBD1DB, 0x160C0A09);
	r3 = D(r3, s1_0_0, 0x0DFD0105, 0x1B01E9FB, 0x38F90CF0, 0x0FEED3CC);
	r4 = D(r4, s1_0_0, 0xD8E25415, 0xE7FD17FF, 0xE8F01DDB, 0xEEF30D01);
	r5 = D(r5, s1_0_0, 0x12000F07, 0xF21A0BF3, 0xE40DFE17, 0x05FBFEEB);
	r6 = D(r6, s1_0_0, 0xE3140808, 0x27FB030D, 0x0CE0CE19, 0xF2181CFF);
	r7 = D(r7, s1_0_0, 0x0207F300, 0x02D1ECF0, 0xF005C223, 0xEB02E711);
	r0 = D(r0, s1_0_1, 0x02E6E6C4, 0xF3191812, 0x0DC9F41D, 0xF8B7FD01);
	r1 = D(r1, s1_0_1, 0xFF01F918, 0x15EDFB02, 0xF2F5D2F1, 0xF21607EB);
	r2 = D(r2, s1_0_1, 0xFCF4C3E3, 0x15DD071C, 0xD2E2E9EB, 0x22F93B0D);
	r3 = D(r3, s1_0_1, 0xF8EFFCD8, 0x12E3CFEB, 0xE0DA8110, 0xF5ECB2DE);
	r4 = D(r4, s1_0_1, 0x101DFEFA, 0xE6DF220A, 0xF3C7131A, 0xF8065900);
	r5 = D(r5, s1_0_1, 0x001CF7FA, 0xF9EEF515, 0x03D90113, 0x32DFEEFC);
	r6 = D(r6, s1_0_1, 0x3018F01A, 0x02D9FBFA, 0x3BC26006, 0x25FBE7F1);
	r7 = D(r7, s1_0_1, 0xF20509DE, 0x181EFA10, 0xE5E442D2, 0x370314F0);
	r0 = D(r0, s1_0_2, 0xF1140409, 0x1406F6FD, 0xFAE9F009, 0xFAF80206);
	r1 = D(r1, s1_0_2, 0x021AEEF6, 0xFB1905FD, 0xDA050914, 0xE61814FA);
	r2 = D(r2, s1_0_2, 0xF41A1C24, 0xF8D30A0D, 0x24BB47D7, 0xF7F1DCF5);
	r3 = D(r3, s1_0_2, 0xF141050B, 0x03FFE3FB, 0xE6FAEA08, 0x16E3F4F4);
	r4 = D(r4, s1_0_2, 0x03F6EEF0, 0xF1CFD5F5, 0x31EFE50B, 0x05DA0100);
	r5 = D(r5, s1_0_2, 0xEBFBE703, 0xE91F17F6, 0xF1AAF7F4, 0xECDF01FC);
	r6 = D(r6, s1_0_2, 0x2DD7BD14, 0xF9F4D8F9, 0x3DFDFBE5, 0x0781CCF1);
	r7 = D(r7, s1_0_2, 0x04D617F0, 0x32D1DF11, 0xFFF52E21, 0xE3CB260E);
	r0 = D(r0, s1_1_0, 0x04E9EE08, 0xE21BF1E7, 0x04FFFCD4, 0x14F018BE);
	r1 = D(r1, s1_1_0, 0xFAF50625, 0xF6FA042B, 0x0B0DFAFB, 0xF3FF04E5);
	r2 = D(r2, s1_1_0, 0x17152CFE, 0xFEFDEF0B, 0x081803F3, 0xE82AE901);
	r3 = D(r3, s1_1_0, 0x0E0E0505, 0xF302011F, 0xF6030D00, 0xFCF92CEF);
	r4 = D(r4, s1_1_0, 0x2813FB20, 0x0FDE01EE, 0xECF6DAF5, 0xF10EE11D);
	r5 = D(r5, s1_1_0, 0xFC040434, 0x0EEA0B23, 0x06EDF2FE, 0x2E0BF023);
	r6 = D(r6, s1_1_0, 0xE903ECFC, 0xF0E1E1E6, 0xE61C0E25, 0x01F9F10E);
	r7 = D(r7, s1_1_0, 0xF8FC1000, 0xEC0517E4, 0x01EBD00E, 0x0808CAEE);
	r0 = D(r0, s1_1_1, 0x0BCDFEE6, 0xFA13D6EA, 0xE58BF504, 0xD281091B);
	r1 = D(r1, s1_1_1, 0x001AFED8, 0xEF292009, 0x05FDBD18, 0x28F7D007);
	r2 = D(r2, s1_1_1, 0xDFF6841E, 0xF2E01AE0, 0x0BF91400, 0xF5FCEAE3);
	r3 = D(r3, s1_1_1, 0xF305D615, 0xF30B30E8, 0x2BE5B6F0, 0xDA012AF1);
	r4 = D(r4, s1_1_1, 0x0F18272F, 0x30E13FF4, 0x2DD11225, 0x41110108);
	r5 = D(r5, s1_1_1, 0xF90B0617, 0x050812E4, 0x26D02D0B, 0xE5F60EE3);
	r6 = D(r6, s1_1_1, 0xEDF9F00A, 0x1AB80A49, 0x0FE417F2, 0x0EDA068F);
	r7 = D(r7, s1_1_1, 0x0FE40818, 0x08E44F15, 0xD7F1F6DE, 0x3E1D17E3);
	r0 = D(r0, s1_1_2, 0xE6131618, 0x3355FAF0, 0xFE0EFF02, 0x00030E07);
	r1 = D(r1, s1_1_2, 0x19310AED, 0x0827E707, 0x07F20C01, 0x271A15F5);
	r2 = D(r2, s1_1_2, 0x03F3380E, 0xDBE4FBF1, 0xE2DCE51A, 0x041603F7);
	r3 = D(r3, s1_1_2, 0x3059EDFB, 0x091FFA0F, 0xD3EB5408, 0x1B071B15);
	r4 = D(r4, s1_1_2, 0xF616F0E7, 0xDFEEFC04, 0xD800F3DE, 0xFA13F2F4);
	r5 = D(r5, s1_1_2, 0xE80107FB, 0xF3C70821, 0x02F00705, 0xE901FBFC);
	r6 = D(r6, s1_1_2, 0xD11A39DF, 0xEA08020A, 0xA7E312F5, 0xF1DC130C);
	r7 = D(r7, s1_1_2, 0xFFE8FA25, 0x160006FF, 0x15E831DB, 0xE0EC16F2);
	r0 = D(r0, s1_2_0, 0xFDF5E749, 0x0608FE07, 0xEB0412EB, 0xF6FA05FB);
	r1 = D(r1, s1_2_0, 0x01FEE50B, 0x180807DF, 0xFFFA06F1, 0xFBFC07CC);
	r2 = D(r2, s1_2_0, 0x16FD41F6, 0x01F7031C, 0xE913E920, 0xDF0712F3);
	r3 = D(r3, s1_2_0, 0x09F104F9, 0xF20EFF09, 0xE3F459EC, 0xF90DFB0D);
	r4 = D(r4, s1_2_0, 0xF3FC0405, 0x0912ED22, 0x02F733D1, 0x020002F1);
	r5 = D(r5, s1_2_0, 0x0F04EEF9, 0xE507ED0A, 0xDC0A08EC, 0xF4EFFBEE);
	r6 = D(r6, s1_2_0, 0x1DD708D8, 0xE4000CF8, 0x1A08DD23, 0xFDF70508);
	r7 = D(r7, s1_2_0, 0x17F710FB, 0xF7EF2EF6, 0x3711F30D, 0xEA000719);
	r0 = D(r0, s1_2_1, 0x1CD82203, 0x13F3F433, 0x20ECFDFE, 0x24FF0104);
	r1 = D(r1, s1_2_1, 0xE8EBFFEB, 0x000A1606, 0x02F6FCFF, 0xEA09FBF3);
	r2 = D(r2, s1_2_1, 0xF715E4FC, 0x09071701, 0x3F3316D0, 0xFBFE1AF8);
	r3 = D(r3, s1_2_1, 0xFFF108F1, 0xF6180322, 0xF9FDE121, 0xFF0F0600);
	r4 = D(r4, s1_2_1, 0xFDFD02F1, 0xFAF81FFF, 0xEF0AFFFD, 0xF3FF010A);
	r5 = D(r5, s1_2_1, 0x02F7E2F0, 0x2D0E3619, 0xF609F1F3, 0xFA1F14F6);
	r6 = D(r6, s1_2_1, 0xD7E41B08, 0xF9C80A09, 0x1FF424E7, 0x05FFEB27);
	r7 = D(r7, s1_2_1, 0xF0FF0E00, 0xD7070608, 0xD9E8FBBA, 0xEFFC00EE);
	r0 = D(r0, s1_2_2, 0x1B05E518, 0xFDF8F4FE, 0x03F41100, 0xF2EFF602);
	r1 = D(r1, s1_2_2, 0xE3FB24F2, 0x15C80E1D, 0x06F10A15, 0x04EB0D16);
	r2 = D(r2, s1_2_2, 0x00F1F7FD, 0x1D04FE02, 0xE730141C, 0xFF08EF05);
	r3 = D(r3, s1_2_2, 0xE00602F5, 0xEA040409, 0x20F20331, 0xF905FDF2);
	r4 = D(r4, s1_2_2, 0xF9F8F3FA, 0x22FBF724, 0x0BFEF01A, 0x07FBFAFC);
	r5 = D(r5, s1_2_2, 0x17023518, 0xF724F616, 0xFFE40109, 0xE91EF8FD);
	r6 = D(r6, s1_2_2, 0x13F11123, 0xFB0604F9, 0x1A29ED02, 0xF8080513);
	r7 = D(r7, s1_2_2, 0xF311F7ED, 0xF4020724, 0x2207F5E2, 0xE0160D0B);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.887e-02, -1.678e-02, 2.718e-02, -2.009e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-5.249e-03, 8.214e-03, 4.977e-03, -5.281e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.590e-02, -2.112e-02, 2.787e-02, 2.070e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.193e-02, -4.619e-03, 9.362e-03, 1.289e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.571e-02, 1.669e-02, 1.936e-02, -4.061e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.456e-02, 3.069e-02, 1.055e-02, 1.382e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.110e-02, 2.217e-02, -1.001e-01, -2.187e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.163e-01, 5.240e-02, -5.012e-02, -1.690e-01);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_DS_vk] -conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x06F10BFB, 0xFF11F906, 0x0309F803, 0xFCFB070E);
	r1 = D(r1, s0_0_0, 0x030E0618, 0x07EA1C23, 0xF80BFC04, 0xF30FF4F7);
	r2 = D(r2, s0_0_0, 0xF4F8FA1E, 0xFEEC0EFB, 0x07EEEF10, 0xDB021E10);
	r3 = D(r3, s0_0_0, 0x07150108, 0x010102F4, 0x0BFCFEF8, 0xEF080A0E);
	r4 = D(r4, s0_0_0, 0xED19F6FE, 0xFFF60006, 0x08F3160A, 0x16DF0D14);
	r5 = D(r5, s0_0_0, 0x0ECDFEF7, 0x13F400FD, 0x0E01EF06, 0xE531F4E3);
	r6 = D(r6, s0_0_0, 0xFD0AFAF8, 0xF00A020F, 0xF7FF0202, 0x12F7FEFC);
	r7 = D(r7, s0_0_0, 0x03FEF407, 0xFFF11002, 0x00FAF8FC, 0x02ECF4F4);
	r0 = D(r0, s0_0_1, 0x0118E910, 0x01FC0A07, 0x0DF60A0B, 0x0800FD08);
	r1 = D(r1, s0_0_1, 0x0918D1F0, 0xEFF8223D, 0x030406FA, 0x060D00FF);
	r2 = D(r2, s0_0_1, 0xE407392E, 0xF0F01AF7, 0xFD010BFE, 0xFF041FF6);
	r3 = D(r3, s0_0_1, 0xFD181302, 0xFDE516E5, 0x08040A02, 0xF617FE08);
	r4 = D(r4, s0_0_1, 0x0CFDF80E, 0x1417DAFD, 0x0CFDF8F7, 0x07F902F5);
	r5 = D(r5, s0_0_1, 0xE12901FA, 0x230FF02B, 0x26FAEE3A, 0xEDFE0F0C);
	r6 = D(r6, s0_0_1, 0xE810F50D, 0x13FE0403, 0x03F70EF4, 0x1AFA1323);
	r7 = D(r7, s0_0_1, 0xFD11F501, 0xF31BF80A, 0xFF000AF9, 0x0AFE0310);
	r0 = D(r0, s0_0_2, 0x00FA0907, 0x10F3F5FE, 0xF7F5FD11, 0xF101FDFE);
	r1 = D(r1, s0_0_2, 0x2FF10D0D, 0x1AECF023, 0xFEF10306, 0xE40CFBF3);
	r2 = D(r2, s0_0_2, 0x0CFB150C, 0xFB16000B, 0x06EF010A, 0x0700D22C);
	r3 = D(r3, s0_0_2, 0xC11AF80A, 0x03E40700, 0xFB0F0801, 0xEBFB0B0F);
	r4 = D(r4, s0_0_2, 0x11F0F6FE, 0x08FC0BF3, 0x01FF07EE, 0xF1052104);
	r5 = D(r5, s0_0_2, 0xC90714F9, 0x070502FD, 0x2204F2DB, 0xF0F7FB05);
	r6 = D(r6, s0_0_2, 0xEB12F602, 0x0DF3FCF5, 0xF1F4E3E5, 0x07F6FFF7);
	r7 = D(r7, s0_0_2, 0xF3F4FBF2, 0xDBF9061D, 0xFD06EFFD, 0x0D1401E0);
	r0 = D(r0, s0_1_0, 0x00F2FF02, 0xFAF4FF09, 0x02051CF6, 0x0103FCFD);
	r1 = D(r1, s0_1_0, 0xF41017FD, 0x0C1EFE13, 0x00FF0B01, 0x010703FF);
	r2 = D(r2, s0_1_0, 0xF50A02EC, 0x08FFF0EB, 0x04D7120C, 0x0EE2CCFE);
	r3 = D(r3, s0_1_0, 0xF21A01FD, 0x0F12E411, 0x09F7F8EB, 0xFDF717E2);
	r4 = D(r4, s0_1_0, 0x000A07DF, 0x08F6F3F2, 0x01FBE7F5, 0xEC330C0D);
	r5 = D(r5, s0_1_0, 0xF02B141D, 0xFC04000B, 0xD037240D, 0x0A17FE07);
	r6 = D(r6, s0_1_0, 0x22D9E7E4, 0xE20B0C17, 0x0C10F01D, 0xE31214F7);
	r7 = D(r7, s0_1_0, 0x0AF2F322, 0x04F50A13, 0xFC0102F8, 0xE32FEAEA);
	r0 = D(r0, s0_1_1, 0x2EF9E714, 0xE810130C, 0x0CD911FF, 0x041921F7);
	r1 = D(r1, s0_1_1, 0x44ABF106, 0x19D14621, 0xF107F200, 0x3DD5D519);
	r2 = D(r2, s0_1_1, 0xF0090129, 0x0A2ED60E, 0x29DEDB1E, 0xE129EB30);
	r3 = D(r3, s0_1_1, 0xEA06FDF0, 0x1B04EB04, 0x0AFE1410, 0x110EFFEF);
	r4 = D(r4, s0_1_1, 0xE004E608, 0xF01BFB16, 0x1507F2F1, 0x26FCB80E);
	r5 = D(r5, s0_1_1, 0x29C6EBD3, 0xDCF9FF19, 0xA707313C, 0xFCE3FD06);
	r6 = D(r6, s0_1_1, 0x08290BFF, 0x81DE2617, 0x0D092703, 0xBC3CEF11);
	r7 = D(r7, s0_1_1, 0x1BFE14F9, 0x0DEA2705, 0xE60C2A0E, 0xC81201EE);
	r0 = D(r0, s0_1_2, 0x230202EC, 0xF3F60005, 0x23F70C02, 0x10FEEFFA);
	r1 = D(r1, s0_1_2, 0x1DF6091D, 0x1BD61838, 0x2515FDFF, 0x340C27FE);
	r2 = D(r2, s0_1_2, 0xF9110F09, 0x0F04F4FB, 0xF11C2601, 0xEF3A452B);
	r3 = D(r3, s0_1_2, 0x9B160408, 0x1315EE06, 0x07070EFD, 0xEE13EB05);
	r4 = D(r4, s0_1_2, 0x18EC1204, 0xFC202FFB, 0x120D02F5, 0x0C121307);
	r5 = D(r5, s0_1_2, 0x1DC9E609, 0xE90C1304, 0xF4FBF6E9, 0x24CCE712);
	r6 = D(r6, s0_1_2, 0x81000DF0, 0xB524F109, 0xE5191801, 0xAAEFFCFF);
	r7 = D(r7, s0_1_2, 0x0BDB0110, 0x81FC0126, 0x81D5F1FF, 0xCCE80701);
	r0 = D(r0, s0_2_0, 0x06FB00DC, 0xFFF605F1, 0x08F8FDF7, 0xFC060601);
	r1 = D(r1, s0_2_0, 0x0DE30936, 0xF233EF54, 0xFB04100A, 0xF20BF50E);
	r2 = D(r2, s0_2_0, 0x05F30BED, 0xF612FDEC, 0x0CF60CE4, 0xF9F83914);
	r3 = D(r3, s0_2_0, 0xF91909F5, 0x08FB1203, 0x05FC03EF, 0xF8FA10F2);
	r4 = D(r4, s0_2_0, 0x0CF9F8F1, 0x0AF0EEF6, 0x00000CF3, 0x02E9FD1A);
	r5 = D(r5, s0_2_0, 0xF9F80A2F, 0x0707FEFA, 0x06F9F9ED, 0xF507E703);
	r6 = D(r6, s0_2_0, 0xFC0003EE, 0xF20C19FA, 0xD4380733, 0xFA0903F6);
	r7 = D(r7, s0_2_0, 0xFD08FF0E, 0x04FE0204, 0x0002FBFA, 0x010012DE);
	r0 = D(r0, s0_2_1, 0xFC0A0C06, 0xEB0C03FB, 0x02F5F714, 0xF9FB0410);
	r1 = D(r1, s0_2_1, 0x25010073, 0x0DF0BEDD, 0x0603FD19, 0xF51EE80E);
	r2 = D(r2, s0_2_1, 0x04FAFA18, 0xE0040404, 0x04F0FD10, 0xF5E9CA17);
	r3 = D(r3, s0_2_1, 0x07F7FC0E, 0x0EEC0E08, 0xF30007F6, 0x01F80008);
	r4 = D(r4, s0_2_1, 0xBF170628, 0x0D02F709, 0xFC05F90A, 0x2403FB15);
	r5 = D(r5, s0_2_1, 0xFB3615F2, 0xF40C051D, 0x000010F7, 0x0C0E06C7);
	r6 = D(r6, s0_2_1, 0x06FA0F0F, 0xE8FAFB09, 0xE9E2F10A, 0x13E9F9CC);
	r7 = D(r7, s0_2_1, 0x090008E7, 0x0011F90E, 0xFF16F7FE, 0x0E06FFFF);
	r0 = D(r0, s0_2_2, 0x0509F507, 0xE506FD02, 0xFEFC0301, 0xF8FE0204);
	r1 = D(r1, s0_2_2, 0x09FE1B2C, 0xFB3D1504, 0x13F902F8, 0xC9ECD917);
	r2 = D(r2, s0_2_2, 0x0A07EE09, 0xF1100CE8, 0xE815060C, 0xF110EA06);
	r3 = D(r3, s0_2_2, 0xF514F917, 0x07000EEF, 0x0FE8FDF8, 0x00FD030F);
	r4 = D(r4, s0_2_2, 0xDF170C06, 0x16E302DD, 0xFDEE02F8, 0xF81C0100);
	r5 = D(r5, s0_2_2, 0x161BF7EF, 0x19EDFBFE, 0xE80D04F3, 0xF8F3DD0B);
	r6 = D(r6, s0_2_2, 0xF7F7FE10, 0x08E9FF12, 0xF81A02FC, 0x19E1F00E);
	r7 = D(r7, s0_2_2, 0xF8FCF3FD, 0xECF50708, 0xF8F6FD01, 0x0406FEFC);
	r0 = D(r0, s1_0_0, 0x0002ED02, 0xFC010200, 0xF2090700, 0x040004F1);
	r1 = D(r1, s1_0_0, 0xF7100C1C, 0xFE190CF7, 0x08F7F6FF, 0xF90201DC);
	r2 = D(r2, s1_0_0, 0x0B0E120F, 0x0C000EFC, 0xFC010CFF, 0x37EAC4EE);
	r3 = D(r3, s1_0_0, 0xE9F402DA, 0xF2FE0BFF, 0xFD0B060A, 0x0AF5EA15);
	r4 = D(r4, s1_0_0, 0x33010300, 0x270A00F8, 0xFB0C0AFD, 0x0107FA12);
	r5 = D(r5, s1_0_0, 0xEB07FEF5, 0xF5FA0E1A, 0xEAE3EBE7, 0xF6FA0A06);
	r6 = D(r6, s1_0_0, 0xFA0DF401, 0x16F10400, 0xEC17FDD3, 0xF5092AF6);
	r7 = D(r7, s1_0_0, 0xF806FC15, 0xFD0502F8, 0x0501030A, 0x06F71B13);
	r0 = D(r0, s1_0_1, 0x04F3FFFF, 0xFE070FFF, 0xFD03F4F6, 0xFCFEF817);
	r1 = D(r1, s1_0_1, 0xE11AF529, 0x0F091D17, 0x14FAF7FF, 0xD6F6F1DE);
	r2 = D(r2, s1_0_1, 0x24F51EF7, 0xF9F3EEF0, 0x040DF8EB, 0xEE18E813);
	r3 = D(r3, s1_0_1, 0xC2FF05FE, 0x1100E5EB, 0x00FE000F, 0x01FCFCF1);
	r4 = D(r4, s1_0_1, 0x1411FB0D, 0xEDFDE2FB, 0xE8FF0003, 0xF10106FD);
	r5 = D(r5, s1_0_1, 0xE0F7EBF7, 0x0904FE05, 0xE409CFEA, 0xFE161627);
	r6 = D(r6, s1_0_1, 0x01020E13, 0xF8F11E02, 0x1A0600EF, 0x14F93115);
	r7 = D(r7, s1_0_1, 0xF90B1104, 0x041503F8, 0x0B090300, 0xE9110006);
	r0 = D(r0, s1_0_2, 0x0102F2F8, 0x060BFBFD, 0xEE0F0203, 0x00071704);
	r1 = D(r1, s1_0_2, 0xE315FB27, 0x2834D703, 0x01060705, 0xFCECF9E6);
	r2 = D(r2, s1_0_2, 0x2118F800, 0x00ECF2F8, 0x140CF3F3, 0x020F3715);
	r3 = D(r3, s1_0_2, 0xEBEE1304, 0x04F6FBF7, 0xFFF60507, 0x0509040A);
	r4 = D(r4, s1_0_2, 0x0005F70C, 0x08F60502, 0xFCFA0E03, 0x19FD02F5);
	r5 = D(r5, s1_0_2, 0x04F60FF5, 0xF6F70508, 0xE8EAD7F1, 0x11F5EC00);
	r6 = D(r6, s1_0_2, 0xF805050A, 0x1307150C, 0x050EE103, 0x19F91407);
	r7 = D(r7, s1_0_2, 0x07F708FA, 0x01F51309, 0x0903F404, 0xDCF3F809);
	r0 = D(r0, s1_1_0, 0x07FDFBF3, 0x02F20A00, 0xFE00F918, 0x050804F2);
	r1 = D(r1, s1_1_0, 0x200B0714, 0xF103EB20, 0xFFF90D06, 0xF9FBF4D7);
	r2 = D(r2, s1_1_0, 0x03020928, 0x0506E3DF, 0xFA03150B, 0x0A05F1DF);
	r3 = D(r3, s1_1_0, 0xDA0E1406, 0xE2EE02EF, 0x040502F8, 0x0213F315);
	r4 = D(r4, s1_1_0, 0xF7F4270C, 0x1516ED00, 0xEC11E7F8, 0x070BE2FD);
	r5 = D(r5, s1_1_0, 0xE4000EFF, 0xE5FB1508, 0xEED80DE7, 0x01CC20F8);
	r6 = D(r6, s1_1_0, 0xEA1F0FEB, 0xFBEB16F9, 0xCFF8111A, 0xF8F10F05);
	r7 = D(r7, s1_1_0, 0x07FAE6E2, 0x130AFC19, 0x080403FF, 0xF3B511FA);
	r0 = D(r0, s1_1_1, 0xDE042712, 0xF1F2FE14, 0x0DF2F812, 0x0B2E0806);
	r1 = D(r1, s1_1_1, 0xDAE111EB, 0xC608EFBE, 0x0C05FEF1, 0x0220FEED);
	r2 = D(r2, s1_1_1, 0x08EC0516, 0xE7DEFD01, 0x0A10080E, 0x9B0ACAE8);
	r3 = D(r3, s1_1_1, 0xFBD22902, 0x01EFFBE9, 0xE110FCFC, 0x052504EB);
	r4 = D(r4, s1_1_1, 0xF206FB15, 0x0F22ED0B, 0xF70FF7F4, 0x1C1FEDEE);
	r5 = D(r5, s1_1_1, 0xFC1806FE, 0x00FFF101, 0x0CFB2004, 0x08001024);
	r6 = D(r6, s1_1_1, 0xEFE5F1F8, 0xE318270F, 0x08E7151A, 0xF2FBFB2D);
	r7 = D(r7, s1_1_1, 0x060C0807, 0x22F50810, 0x20F50C15, 0xE10811FA);
	r0 = D(r0, s1_1_2, 0xF3FC0DFD, 0x11FFF8FE, 0xF5001703, 0xFC0EFCF1);
	r1 = D(r1, s1_1_2, 0xD314E8D7, 0x2019F517, 0xFD04F508, 0xDADD211A);
	r2 = D(r2, s1_1_2, 0x220AF6FC, 0xE8FE0703, 0x13F2FE01, 0xE2120D0C);
	r3 = D(r3, s1_1_2, 0xDEF70503, 0xFFE7FDF7, 0xF3F804FC, 0x000A0101);
	r4 = D(r4, s1_1_2, 0x06F5F00D, 0x0A09FAFB, 0x0A01E9EA, 0xFCF6F2FC);
	r5 = D(r5, s1_1_2, 0x06D8FF02, 0xFD0704F4, 0x13ECF8EB, 0x15EFFE00);
	r6 = D(r6, s1_1_2, 0x190B031A, 0x1615FD0D, 0x01F7F20E, 0xFF1AFE01);
	r7 = D(r7, s1_1_2, 0xEAFD00FA, 0x06B5150F, 0xFD04F504, 0xEEF7FDF8);
	r0 = D(r0, s1_2_0, 0xF817FEF5, 0xFB0AF506, 0xFC1706FD, 0xFF0602FB);
	r1 = D(r1, s1_2_0, 0xEB1A2DEA, 0xEBE2F4F4, 0x03F6F903, 0x04DF1112);
	r2 = D(r2, s1_2_0, 0xFE15F911, 0xE90A11F3, 0x0904F311, 0xF01511FF);
	r3 = D(r3, s1_2_0, 0xFFF20D0C, 0xE9020A05, 0xF80CFDE8, 0x0907FFF1);
	r4 = D(r4, s1_2_0, 0xF3F40700, 0x0615F305, 0xE8090306, 0x010BE806);
	r5 = D(r5, s1_2_0, 0x14DB0607, 0x0ECD0904, 0xFBDE0707, 0x29050706);
	r6 = D(r6, s1_2_0, 0xFDF30F05, 0x01DE0117, 0x1AF1FBF0, 0x00EEF321);
	r7 = D(r7, s1_2_0, 0x16EB0905, 0x0A0714EE, 0x0D06F2FF, 0x0A060223);
	r0 = D(r0, s1_2_1, 0x1AF7FD00, 0xF4F90E04, 0x00F4F80E, 0xFDF70010);
	r1 = D(r1, s1_2_1, 0x9E060723, 0x20C1B318, 0x000CFD10, 0xFE2CEBE4);
	r2 = D(r2, s1_2_1, 0xFE000416, 0xF0F90007, 0xFA0EFB05, 0x15E00507);
	r3 = D(r3, s1_2_1, 0xE706FC06, 0x01F50712, 0x10F3050A, 0x02F600F7);
	r4 = D(r4, s1_2_1, 0xE02B05ED, 0x03F4FE04, 0xEF16FFEE, 0xF5F4F2FE);
	r5 = D(r5, s1_2_1, 0x0B0EFDEE, 0x0A1F0F0F, 0xFB3103F9, 0x170503FD);
	r6 = D(r6, s1_2_1, 0xE5E21400, 0xF6091100, 0x1FE201FD, 0xF82BF8F8);
	r7 = D(r7, s1_2_1, 0x02F11209, 0x11D2011A, 0xF0F4EF0B, 0xEAFDFCF6);
	r0 = D(r0, s1_2_2, 0x0D0100F9, 0x0A1DF50A, 0xFE0C01FF, 0x0DFBFD00);
	r1 = D(r1, s1_2_2, 0xE82D1C30, 0xEFDE2107, 0xFFFD0105, 0x320FEB1D);
	r2 = D(r2, s1_2_2, 0x10FFF902, 0x0FFF05FE, 0xF1FE06FF, 0x1CED0512);
	r3 = D(r3, s1_2_2, 0xFB0FE211, 0xFA0C0706, 0x0202FCFC, 0xFCFD050B);
	r4 = D(r4, s1_2_2, 0xF1FF0300, 0xFCF0FDF2, 0xFC0AF901, 0xDBF41D0C);
	r5 = D(r5, s1_2_2, 0xDF02F909, 0x1111FD01, 0xE505E0F0, 0x0AF6FB01);
	r6 = D(r6, s1_2_2, 0xE612FBFF, 0xFD0CFA12, 0x0D070600, 0xFE0BEB03);
	r7 = D(r7, s1_2_2, 0x13EC0A00, 0x0E2708FB, 0x1809EDF7, 0x0107FF08);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9EE0BF8, 0x060106F3, 0xFFFCFEF0, 0xFF01FFFC);
	r1 = D(r1, s0_0_0, 0xF507D106, 0x0408FEE8, 0xFF0C05F9, 0xFD0AF1FE);
	r2 = D(r2, s0_0_0, 0x081202F6, 0x12F3F7F4, 0x05E8EFE3, 0x1602EEFB);
	r3 = D(r3, s0_0_0, 0x06FCFF1E, 0x07030DF6, 0xFD02FF07, 0xFE05F6EF);
	r4 = D(r4, s0_0_0, 0x03F9000A, 0xFBFBFCFE, 0x02F5F206, 0xF2E6F80A);
	r5 = D(r5, s0_0_0, 0xEDEA0113, 0x040EFD0C, 0xF70F18FA, 0xF6100F03);
	r6 = D(r6, s0_0_0, 0x00FE0303, 0xFA0C11F8, 0x1000EE18, 0x05191410);
	r7 = D(r7, s0_0_0, 0x0108FDF0, 0x04F4F608, 0xF7F603FA, 0xE71FF0F3);
	r0 = D(r0, s0_0_1, 0xF8010F06, 0x1908FC07, 0xE9F001F0, 0x0307FBFB);
	r1 = D(r1, s0_0_1, 0xDB0ECEED, 0xF817ECEE, 0x00F7FFF7, 0xEE110E0E);
	r2 = D(r2, s0_0_1, 0x140803F0, 0xFB04EF14, 0xFDEDF5FF, 0x03E5CED3);
	r3 = D(r3, s0_0_1, 0xF606F901, 0xF1F4EFE6, 0x0204FE09, 0x051706EE);
	r4 = D(r4, s0_0_1, 0x28F1E906, 0x0B110015, 0x021E0519, 0xF805F701);
	r5 = D(r5, s0_0_1, 0xF11710FC, 0xF6160F21, 0xFD060D3F, 0x221A0021);
	r6 = D(r6, s0_0_1, 0x0A140411, 0x0EFE0DEE, 0xEA151122, 0x0E1BFC10);
	r7 = D(r7, s0_0_1, 0x06060514, 0x0A050DFF, 0xF4090006, 0x0504ED0A);
	r0 = D(r0, s0_0_2, 0xF4FC0B01, 0x0600FAFE, 0xF60D04FE, 0xFC0800FE);
	r1 = D(r1, s0_0_2, 0x1811F6E9, 0x08160D26, 0xFAFEFCFF, 0x19F502F0);
	r2 = D(r2, s0_0_2, 0x1107FFE9, 0xF1F5060F, 0xFC00F8EB, 0xE6E7FA15);
	r3 = D(r3, s0_0_2, 0xF315FAFE, 0xEB00F7EF, 0xF30602FC, 0x0707FFF3);
	r4 = D(r4, s0_0_2, 0x150A0512, 0xEB010306, 0xE50D08FB, 0x21E8FAF1);
	r5 = D(r5, s0_0_2, 0x0CE6F5EB, 0x000CFDF4, 0x01F70007, 0xE5FDF3FF);
	r6 = D(r6, s0_0_2, 0x0719FDF7, 0x0E0706EE, 0xFD02FFF4, 0x0B0B09F1);
	r7 = D(r7, s0_0_2, 0x0FF0FBFD, 0x0E03F907, 0xFF06020B, 0xEA021424);
	r0 = D(r0, s0_1_0, 0xF90A02FC, 0xFA0804F8, 0x070400EE, 0xF5FEFDFF);
	r1 = D(r1, s0_1_0, 0x28149E03, 0x01DED4F2, 0x020802FE, 0x0B0B0900);
	r2 = D(r2, s0_1_0, 0x04FBF2F8, 0xE8F006F7, 0x09FCEDDE, 0x03F1F1EA);
	r3 = D(r3, s0_1_0, 0xFA1F0617, 0xF2FB03F2, 0x020BF708, 0xEC01EFE8);
	r4 = D(r4, s0_1_0, 0xF8EEDF11, 0xFD03FB02, 0xFFFCEAF0, 0xF4E3D2EB);
	r5 = D(r5, s0_1_0, 0x141902F5, 0x130EF610, 0x0022200F, 0x1309EFF8);
	r6 = D(r6, s0_1_0, 0x090500FE, 0x06FDFFF3, 0x0CF6F714, 0x07EFC01F);
	r7 = D(r7, s0_1_0, 0x0C1005F7, 0x030912F8, 0xFB07030E, 0xFD0C0313);
	r0 = D(r0, s0_1_1, 0x27070921, 0xDDFDF90F, 0x0E0AF3F1, 0x00FDF901);
	r1 = D(r1, s0_1_1, 0x28208C18, 0x3D09FB2D, 0x1BF90005, 0x27E71B1E);
	r2 = D(r2, s0_1_1, 0x0DF2ECF8, 0xF5FD10FB, 0x0DFCFFFC, 0xFFE8DD0D);
	r3 = D(r3, s0_1_1, 0x0FE5042A, 0x2C1114F1, 0x0508EA15, 0xE217ECE9);
	r4 = D(r4, s0_1_1, 0xF7F4F620, 0x0827100C, 0x040F0AFD, 0xEE1DE2EA);
	r5 = D(r5, s0_1_1, 0x2DEE1509, 0x0C140119, 0x2405270C, 0xDF07FB23);
	r6 = D(r6, s0_1_1, 0x0315881E, 0x05D100F7, 0x122B232F, 0x0BE281EC);
	r7 = D(r7, s0_1_1, 0x0902EB0D, 0x060B0609, 0x1204FD14, 0x13FD081D);
	r0 = D(r0, s0_1_2, 0x0307FEFF, 0x0616080C, 0xE803FFE9, 0xF4FFFDEF);
	r1 = D(r1, s0_1_2, 0xEE1CE401, 0xF225FA18, 0x14F7F6F1, 0xF0E40AF7);
	r2 = D(r2, s0_1_2, 0x07FE00F4, 0x0CF70E04, 0xF70AFBF7, 0x0AD4C4C2);
	r3 = D(r3, s0_1_2, 0xED0AFD17, 0xF8F1F9FE, 0xFBFAFA09, 0x060AFCEC);
	r4 = D(r4, s0_1_2, 0xEDEB01FF, 0x08F5F0FE, 0x12EDF2F3, 0x0701EADA);
	r5 = D(r5, s0_1_2, 0xE8251921, 0x2201F9FE, 0xFF1F0139, 0xDE1F1116);
	r6 = D(r6, s0_1_2, 0x000BE8F6, 0x1308EE00, 0xFCEBE8FE, 0x1F03F1F0);
	r7 = D(r7, s0_1_2, 0xF7050D07, 0xDE0D0CE6, 0x00060BFA, 0x190E0614);
	r0 = D(r0, s0_2_0, 0xFDDE12F1, 0xFEFE1305, 0x03F502F4, 0xFFFA00FB);
	r1 = D(r1, s0_2_0, 0xFE0EA1EB, 0x1A300C23, 0x060001F7, 0xF6180833);
	r2 = D(r2, s0_2_0, 0xFF01FD09, 0xFD0D2D02, 0x0901E7E7, 0x42E7CEE3);
	r3 = D(r3, s0_2_0, 0xFE09FE16, 0xFFF9FD07, 0xFC03FDFB, 0xF7F9FAF9);
	r4 = D(r4, s0_2_0, 0xFBF35409, 0xFA0EEFF1, 0xF20FF006, 0xF5E5F4E5);
	r5 = D(r5, s0_2_0, 0xFBE9130D, 0x03FF1B17, 0x0AFD0B0D, 0xFD020222);
	r6 = D(r6, s0_2_0, 0xF4F6D60F, 0x07090803, 0x150E03F4, 0xFF1FD3F3);
	r7 = D(r7, s0_2_0, 0xF5FF13FB, 0x04FFFE09, 0x04FFF5FA, 0xFD07F80D);
	r0 = D(r0, s0_2_1, 0x07EBFA0D, 0xF3E3EF03, 0x18F5F505, 0xFB07FDF4);
	r1 = D(r1, s0_2_1, 0x03BC9322, 0xECEFE612, 0xFC0A0207, 0xFD10DAE7);
	r2 = D(r2, s0_2_1, 0xF30CFBFC, 0x16E9FE04, 0xEDF6F405, 0xF5EDC7E4);
	r3 = D(r3, s0_2_1, 0x04FAEA08, 0x0A0B1706, 0x1A010106, 0x000C09EF);
	r4 = D(r4, s0_2_1, 0xF600D0EB, 0xF20AF3FB, 0xFCF50CF4, 0x0207DE0C);
	r5 = D(r5, s0_2_1, 0xF029ED16, 0xF90A1D13, 0xF0FF010F, 0xC8DF2609);
	r6 = D(r6, s0_2_1, 0xFBFD1816, 0xF3E20D00, 0x201116FE, 0xEF000504);
	r7 = D(r7, s0_2_1, 0x01F50210, 0x10020504, 0x03F9EDF5, 0xEB05F203);
	r0 = D(r0, s0_2_2, 0xFFFC1115, 0xE8240D09, 0x0301FBF8, 0xF40106FB);
	r1 = D(r1, s0_2_2, 0xEBFCEB22, 0xD7F6F513, 0xF902000B, 0xDCE4031D);
	r2 = D(r2, s0_2_2, 0xF40405FE, 0x08E8FC17, 0x07E900F5, 0xFFF211EA);
	r3 = D(r3, s0_2_2, 0xF6070803, 0x0AFA0DF5, 0x080200FF, 0x060B0305);
	r4 = D(r4, s0_2_2, 0xE20E0018, 0xF802FFF8, 0xDCFC09E9, 0x0F0AF10E);
	r5 = D(r5, s0_2_2, 0xFBFFF4F1, 0xFC040CDC, 0x22170EE2, 0xF9370800);
	r6 = D(r6, s0_2_2, 0x1B19FBE0, 0x02030008, 0xFEEA0A0B, 0x060BF513);
	r7 = D(r7, s0_2_2, 0x091101F9, 0xFBF8F4F2, 0xEBF8FEEB, 0xEB13FD0B);
	r0 = D(r0, s1_0_0, 0xF1F612F4, 0x0E03E80D, 0x03F0F0F7, 0xFD080108);
	r1 = D(r1, s1_0_0, 0xFBECD9D4, 0xF704E1D2, 0xFD08FEF5, 0xCD10232D);
	r2 = D(r2, s1_0_0, 0xF517F4CD, 0xF211110E, 0x012EFFF5, 0xD30D4EA0);
	r3 = D(r3, s1_0_0, 0x1AF1F5EA, 0x1103EC09, 0x01F5FFFD, 0xF80CFBF4);
	r4 = D(r4, s1_0_0, 0x04FBE70A, 0xE3FC02FB, 0x0A000008, 0xFBEB03EE);
	r5 = D(r5, s1_0_0, 0x1007F913, 0x09FFFC06, 0xE3EF3A10, 0xE81D1217);
	r6 = D(r6, s1_0_0, 0x07FFF901, 0xFC1702FA, 0x06D1EC06, 0x03FBFEF2);
	r7 = D(r7, s1_0_0, 0xFAFFFFF9, 0x02FBFA04, 0x04FDF906, 0xCA003A25);
	r0 = D(r0, s1_0_1, 0x0605F8EA, 0xF8F407FC, 0xF0ED1A07, 0x0704FC11);
	r1 = D(r1, s1_0_1, 0x01DF11F2, 0xF613DBF1, 0xFD0C00FA, 0x02061508);
	r2 = D(r2, s1_0_1, 0xE00C17C7, 0xE6203408, 0xF508F703, 0x2EFFD3D7);
	r3 = D(r3, s1_0_1, 0x08EC1D1C, 0xF8101005, 0xFEFBFB0A, 0xFD04F706);
	r4 = D(r4, s1_0_1, 0x24FDDB09, 0x11FDEB0A, 0x020B0710, 0x0615F5F6);
	r5 = D(r5, s1_0_1, 0x09D9FF0D, 0xD9D915FF, 0x0B95F0F2, 0x1011F103);
	r6 = D(r6, s1_0_1, 0x0600FCFB, 0x0808FCE5, 0xFAFC0BF5, 0xF50209E8);
	r7 = D(r7, s1_0_1, 0x0C05E402, 0x0CF4EF15, 0x06F9F912, 0x0AF3FD0B);
	r0 = D(r0, s1_0_2, 0xFD0D03FC, 0x00EBFE13, 0x000C09FF, 0x04FFF707);
	r1 = D(r1, s1_0_2, 0xEAC82110, 0xD2000016, 0x0503F7FA, 0xF719120C);
	r2 = D(r2, s1_0_2, 0xF6E606FC, 0xEA0013F9, 0xED0D03FF, 0xF6F9DBE3);
	r3 = D(r3, s1_0_2, 0xEFE91809, 0x1101F5FF, 0xF7FA13FF, 0x010CF202);
	r4 = D(r4, s1_0_2, 0xF804FD00, 0xF3FB09FD, 0xFE0A0DFC, 0xF6FFF9EE);
	r5 = D(r5, s1_0_2, 0x0700FD05, 0x15FB0701, 0x28E60405, 0xE921100D);
	r6 = D(r6, s1_0_2, 0x1006E601, 0x08FAF905, 0x0AE0EC1B, 0xED0816F7);
	r7 = D(r7, s1_0_2, 0xFD080604, 0x0AE90EEA, 0x01FDFE06, 0xEB062906);
	r0 = D(r0, s1_1_0, 0xEAED1F04, 0xEE0A14F8, 0xF10C0F08, 0x1BFAF3F6);
	r1 = D(r1, s1_1_0, 0xDE0311D5, 0xBE232D06, 0xFEFEFA04, 0xF2032024);
	r2 = D(r2, s1_1_0, 0xFF0BD9DB, 0x24FDB2F9, 0x1306C000, 0xFAE4E8C8);
	r3 = D(r3, s1_1_0, 0x11E31602, 0xF8F41509, 0xFCE70E08, 0xE1F40BF3);
	r4 = D(r4, s1_1_0, 0x0EED0618, 0xEFF80916, 0x06F8FF17, 0x0AF503F8);
	r5 = D(r5, s1_1_0, 0x3003E801, 0xF8FBF8FB, 0x08FBF609, 0xC81613F6);
	r6 = D(r6, s1_1_0, 0xEB14FF0A, 0x150305EA, 0xF82017FB, 0x0919E381);
	r7 = D(r7, s1_1_0, 0xDEF90F07, 0xF60106E9, 0xF6FD07EC, 0xF2E9FAEF);
	r0 = D(r0, s1_1_1, 0x00211A04, 0x0900F015, 0x151CE7F6, 0x25041D12);
	r1 = D(r1, s1_1_1, 0xE812D0E5, 0xE3F08A11, 0x04E8FBFE, 0x35C7F9AB);
	r2 = D(r2, s1_1_1, 0xBF16CCDA, 0x1401D4FE, 0xF8091EEB, 0x2DD108D0);
	r3 = D(r3, s1_1_1, 0x1CA1F306, 0x0807FC1E, 0x1DFEF016, 0xE003180C);
	r4 = D(r4, s1_1_1, 0xFA24FDE9, 0x141605FA, 0x1813E602, 0xEE13FA0C);
	r5 = D(r5, s1_1_1, 0x00D12C28, 0x00D616EF, 0x04E20308, 0xEDDA19FE);
	r6 = D(r6, s1_1_1, 0xD00C2BF2, 0x28D4E1F0, 0x010FF4D4, 0xF3DDF7D7);
	r7 = D(r7, s1_1_1, 0x1A120314, 0x0F0B1604, 0x0DF8F91B, 0x19C1142E);
	r0 = D(r0, s1_1_2, 0x28F40F0A, 0xF7FA100C, 0xF7FC0C02, 0xF812FB10);
	r1 = D(r1, s1_1_2, 0x2CD3ECF7, 0xD4E743D8, 0x06FC06FE, 0x321BC506);
	r2 = D(r2, s1_1_2, 0xFFF3EC01, 0x21F6E708, 0x060AEEF5, 0xF9EE0EBD);
	r3 = D(r3, s1_1_2, 0xF6E1F3FD, 0x030E00FC, 0xF2FF1102, 0xF314FF11);
	r4 = D(r4, s1_1_2, 0x011204F2, 0x01D806F3, 0xFBE8FA08, 0xE91018E5);
	r5 = D(r5, s1_1_2, 0xE629FEF9, 0x06FCF003, 0x28DBF018, 0xDA39FEFB);
	r6 = D(r6, s1_1_2, 0xDAF806F9, 0x1202F20A, 0x27F7FEE9, 0x040F08FF);
	r7 = D(r7, s1_1_2, 0xF01A02F7, 0xAB021ECD, 0xE8E90804, 0x0BD5F208);
	r0 = D(r0, s1_2_0, 0x13F6F40C, 0x04EB05F2, 0x16F8F705, 0x0B06F800);
	r1 = D(r1, s1_2_0, 0xC509E0F0, 0xD93D1D00, 0xFB1906F8, 0xED0B0B00);
	r2 = D(r2, s1_2_0, 0xEC0EFD00, 0x0F03F612, 0xFD16F1FA, 0x18F901BF);
	r3 = D(r3, s1_2_0, 0x03F8F903, 0xF621F90F, 0xF6F3F218, 0x05FCFBFE);
	r4 = D(r4, s1_2_0, 0xFBF607D6, 0xFC0F0206, 0xFB09FF0C, 0x11110ED0);
	r5 = D(r5, s1_2_0, 0xEA1A12ED, 0xFAFE0D00, 0xFCF81DF4, 0xDBF60807);
	r6 = D(r6, s1_2_0, 0x0217D80A, 0x0DDBF6F8, 0xC7080308, 0x8D28FDE1);
	r7 = D(r7, s1_2_0, 0x000503FA, 0x10F4FB04, 0x02030303, 0x06D807F8);
	r0 = D(r0, s1_2_1, 0x1115EEF5, 0x01F9030F, 0x0502F8F9, 0xF70D010F);
	r1 = D(r1, s1_2_1, 0xF30CABDF, 0xD835F8F4, 0x190B05FB, 0x06CAFCF2);
	r2 = D(r2, s1_2_1, 0xEA1914EF, 0x4200EC01, 0x00050DF4, 0x02E020CC);
	r3 = D(r3, s1_2_1, 0xEED6F30F, 0x1E0A050B, 0x03FAD7FB, 0xF416F609);
	r4 = D(r4, s1_2_1, 0x29E823D2, 0xDC260905, 0xFF0F0C06, 0x1B0A08FD);
	r5 = D(r5, s1_2_1, 0x04D61610, 0xEDDF1AFA, 0xEFD91200, 0xE6CD050A);
	r6 = D(r6, s1_2_1, 0x8102D303, 0xF4050DE9, 0x981411E9, 0xDA1DE0E8);
	r7 = D(r7, s1_2_1, 0x0DF60507, 0x0AF901F5, 0xC9022004, 0xB8DE1103);
	r0 = D(r0, s1_2_2, 0x03FFF906, 0xF702E704, 0x0108F906, 0x0A13F104);
	r1 = D(r1, s1_2_2, 0xC4DE44E5, 0xC51C07DD, 0x07EA0BFF, 0xDFF7FA00);
	r2 = D(r2, s1_2_2, 0xEF0A09F9, 0x0AE80402, 0xF30913FD, 0xD52218E6);
	r3 = D(r3, s1_2_2, 0x0FE5FAF4, 0x08F6F605, 0xEB0406FE, 0x020BFEFC);
	r4 = D(r4, s1_2_2, 0x11E51A00, 0xC5FB2611, 0xFCE9010A, 0x13EC16FC);
	r5 = D(r5, s1_2_2, 0xF5F8F511, 0xEEF70A06, 0x2010DB09, 0x120CF908);
	r6 = D(r6, s1_2_2, 0xFA0A1900, 0x00FC03F8, 0xF1F40E08, 0xF308100E);
	r7 = D(r7, s1_2_2, 0x0914F8FC, 0xE4EF0DF4, 0xFD0DF609, 0xF4DA050C);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF020104, 0xFDF5ED03, 0x0CF7F90B, 0xFB0300FF);
	r1 = D(r1, s0_0_0, 0x1FD21AFE, 0xFFB90E00, 0xFA0300FF, 0x0D16EEE7);
	r2 = D(r2, s0_0_0, 0x06F7F30C, 0xF9FF17EB, 0xF3FB0CFD, 0xE7B92D07);
	r3 = D(r3, s0_0_0, 0x0B2803EB, 0xFFF500F7, 0x030B02FD, 0xFF1EF0F6);
	r4 = D(r4, s0_0_0, 0xF4EAFA0A, 0x02FEFFFE, 0x010E07F9, 0x0B0DF709);
	r5 = D(r5, s0_0_0, 0x092500FA, 0x020BF5FA, 0xF412FDEE, 0xEE081CFA);
	r6 = D(r6, s0_0_0, 0x04E70705, 0xFE02FC0C, 0x08CAFCFB, 0x0DF3060C);
	r7 = D(r7, s0_0_0, 0xF7000601, 0x06FCFAFE, 0x0B0300FD, 0x042820D8);
	r0 = D(r0, s0_0_1, 0x00F4F828, 0xF8F20709, 0x010307FB, 0x0F08000C);
	r1 = D(r1, s0_0_1, 0x0FE6F9E5, 0xE1843A15, 0xFE010205, 0x072B1BED);
	r2 = D(r2, s0_0_1, 0xECEE0F0F, 0x01EB12DE, 0x10EA0705, 0x0AB9DE16);
	r3 = D(r3, s0_0_1, 0xF90FF7BE, 0xFBF41E0A, 0x0307F6F1, 0x0117DEF8);
	r4 = D(r4, s0_0_1, 0x00E9FA19, 0x0CF2E7FD, 0x1702EB0D, 0xF0FFF4FC);
	r5 = D(r5, s0_0_1, 0x0D1FF6F3, 0x05140104, 0x2818D0FC, 0xE9FAFCF4);
	r6 = D(r6, s0_0_1, 0xF915FD07, 0x06FFF00F, 0x0EE31410, 0xFBF8FDEA);
	r7 = D(r7, s0_0_1, 0xFF0DFE14, 0x06E8EBFE, 0x0502F1F1, 0x0C07E5C3);
	r0 = D(r0, s0_0_2, 0xFB050510, 0x07010903, 0x07F7F1FF, 0x0DFFF303);
	r1 = D(r1, s0_0_2, 0x0EF5F0FF, 0x0ADEB6FA, 0x01FD0200, 0xDC1B2ADD);
	r2 = D(r2, s0_0_2, 0xF7FBF125, 0xFE17F3FE, 0x01ED0F01, 0x39D3CF07);
	r3 = D(r3, s0_0_2, 0x0C01F8FC, 0x02F40A00, 0x03F4F103, 0xF6150CFC);
	r4 = D(r4, s0_0_2, 0x0808F903, 0x09F5F8EE, 0x04F901F0, 0xF9F91500);
	r5 = D(r5, s0_0_2, 0xF40A15EA, 0xF604FE0A, 0xD12E0807, 0xF0FC2F0C);
	r6 = D(r6, s0_0_2, 0xF3011CF6, 0xF50302FE, 0xF700EE06, 0xF2EDF4F1);
	r7 = D(r7, s0_0_2, 0x0300F905, 0xEAF81C00, 0x00FF08FB, 0x0F0701F4);
	r0 = D(r0, s0_1_0, 0xE7DD0C12, 0xFF090BFD, 0xF009FF0C, 0x09FCF303);
	r1 = D(r1, s0_1_0, 0x000BC705, 0xB9CDFC1F, 0xF6EB0A06, 0x122DE3FD);
	r2 = D(r2, s0_1_0, 0x1C02E30B, 0x100FF511, 0x26E8FB10, 0x11B40617);
	r3 = D(r3, s0_1_0, 0x1F17F8DE, 0xFEF700FE, 0x07020F07, 0xFF18FD05);
	r4 = D(r4, s0_1_0, 0xEFE6F7F6, 0x14DA000C, 0x180BF0EF, 0x00D200FF);
	r5 = D(r5, s0_1_0, 0xFA0E02F4, 0xF4011708, 0xF009FBFC, 0xF2FF050E);
	r6 = D(r6, s0_1_0, 0x11050AF9, 0xF9E120FF, 0xDC37F7FC, 0x1608F7EF);
	r7 = D(r7, s0_1_0, 0xE7FD180C, 0x0501010B, 0x020B0EFC, 0xDE2E27CD);
	r0 = D(r0, s0_1_1, 0x1AF909FB, 0xF60BE2FF, 0x110BE42D, 0x0CEFD5FF);
	r1 = D(r1, s0_1_1, 0x1B7CCBE1, 0x03F6F216, 0x21FF1710, 0x1DCC18E9);
	r2 = D(r2, s0_1_1, 0xD0F70511, 0x2DEC000B, 0x18CDF50B, 0x1500E30D);
	r3 = D(r3, s0_1_1, 0xE93DEBB0, 0x0D0FFBFA, 0x0014FAE4, 0xE422F4E1);
	r4 = D(r4, s0_1_1, 0x16FCED22, 0x05FAD709, 0x0F0EF9F3, 0x27D5FA2A);
	r5 = D(r5, s0_1_1, 0x0510E91F, 0x9B1F1EE3, 0xF8EA1BE8, 0xE11613FC);
	r6 = D(r6, s0_1_1, 0x812C1BD6, 0xE5D71703, 0x121C0F0F, 0xB402E4DF);
	r7 = D(r7, s0_1_1, 0xEA1DDB16, 0x2208DE0D, 0xDEFF14F9, 0xBDE5CF81);
	r0 = D(r0, s0_1_2, 0xFBF80415, 0x19142518, 0x04F7E918, 0x0B0CEEFD);
	r1 = D(r1, s0_1_2, 0xEC2221E5, 0xB1CABC0F, 0xF106FA08, 0xE918FCE5);
	r2 = D(r2, s0_1_2, 0xFCE8EF18, 0xF9FEF90E, 0xFDEC0B1B, 0x25C0BC08);
	r3 = D(r3, s0_1_2, 0x142009C8, 0xF7FE3103, 0xF90D08D5, 0x1111F201);
	r4 = D(r4, s0_1_2, 0x00051B1A, 0xD7FEFAFA, 0xF60D0A0B, 0xF2E92108);
	r5 = D(r5, s0_1_2, 0x080F0EE8, 0xDA1BFBE5, 0x013717EC, 0x2EEB182D);
	r6 = D(r6, s0_1_2, 0xFC052F01, 0xF31BFDF4, 0xF0DBFD0F, 0x16FA062F);
	r7 = D(r7, s0_1_2, 0x240C250E, 0xBB010A17, 0x0803FA21, 0x072012E0);
	r0 = D(r0, s0_2_0, 0xF31206F7, 0x021BEF15, 0x0A0A050D, 0x01000A00);
	r1 = D(r1, s0_2_0, 0x1C08FAEE, 0xDBFFF90C, 0xF7FB00FB, 0x02FD08EB);
	r2 = D(r2, s0_2_0, 0x03FCFE09, 0xFBFEF901, 0x19FEF710, 0x2ADCDBFB);
	r3 = D(r3, s0_2_0, 0x030B1802, 0x0EFA08F5, 0x020B1EFD, 0xFC00EF01);
	r4 = D(r4, s0_2_0, 0xDDEDEDCB, 0x08011F0C, 0x1819F804, 0xFC03FFF5);
	r5 = D(r5, s0_2_0, 0xF61400F2, 0xE31AEEFC, 0xED18EFF4, 0xF2FBD2F4);
	r6 = D(r6, s0_2_0, 0x150910FB, 0x09F1F607, 0xF8FD0BF5, 0x0DFEF4FC);
	r7 = D(r7, s0_2_0, 0xF7F7FDFB, 0xFD0A0003, 0xFE05FEFC, 0xF722EDEC);
	r0 = D(r0, s0_2_1, 0x1CF1E7E7, 0x0DFA21F3, 0x22010200, 0x1207F3FD);
	r1 = D(r1, s0_2_1, 0x4226E0EB, 0x1C0D020D, 0x0306FF0C, 0x3AB5060A);
	r2 = D(r2, s0_2_1, 0xEC0CE720, 0x10E504FF, 0xF5EEE50E, 0xFF35F1F8);
	r3 = D(r3, s0_2_1, 0x1616F8C7, 0x0FFDF601, 0x3AFD1DDB, 0x190C04FB);
	r4 = D(r4, s0_2_1, 0x81CD2DDC, 0x0CDC04FF, 0xDEF9080A, 0x35DCED02);
	r5 = D(r5, s0_2_1, 0xFE210CEE, 0xB709F30C, 0xDD0726F6, 0xDA419805);
	r6 = D(r6, s0_2_1, 0xE406E918, 0xCB1A1407, 0xD5FE191C, 0xF9FAFA17);
	r7 = D(r7, s0_2_1, 0x10F010F6, 0x1329EAF0, 0x0C020801, 0x031905E9);
	r0 = D(r0, s0_2_2, 0xF9FDFDFE, 0x2301FD05, 0xFAF1FC02, 0x020401FD);
	r1 = D(r1, s0_2_2, 0xD82B0C04, 0x15A2F714, 0xFBF90CFA, 0xA709F23B);
	r2 = D(r2, s0_2_2, 0xFA010B13, 0x0A0CFDF6, 0xEAFF040A, 0x01BA1E23);
	r3 = D(r3, s0_2_2, 0xFA34FF09, 0x150DEE01, 0x010D04E8, 0x0F2401E8);
	r4 = D(r4, s0_2_2, 0xFDD3E626, 0xEAFC0CF3, 0x08010703, 0xFEDF0A0B);
	r5 = D(r5, s0_2_2, 0x10290EE3, 0xF00DFCFA, 0x1719CFEB, 0x22DBE7F9);
	r6 = D(r6, s0_2_2, 0xEBE61D05, 0x0C060C0B, 0xE8F8111C, 0x100DFC29);
	r7 = D(r7, s0_2_2, 0xFDEAEAFC, 0xB201DEFA, 0xF2F8030A, 0x1B1AF3EC);
	r0 = D(r0, s1_0_0, 0xF7EBE5F4, 0xF206FD15, 0x000402FA, 0x00010B05);
	r1 = D(r1, s1_0_0, 0xCC0EDAE3, 0xD5FB21F3, 0xFDFD05FD, 0xFE050307);
	r2 = D(r2, s1_0_0, 0x001705FB, 0x1606FC04, 0x0FFA0E12, 0x08030BD2);
	r3 = D(r3, s1_0_0, 0xDC0FF216, 0xFB0EFFF1, 0xF6FFF900, 0x05F90FF7);
	r4 = D(r4, s1_0_0, 0x02041DEE, 0xF003F1F0, 0x0207090B, 0xF20CF9F3);
	r5 = D(r5, s1_0_0, 0xF10B0B0D, 0x0007FAF6, 0x02EF1611, 0x120F0BFE);
	r6 = D(r6, s1_0_0, 0xF414FAE6, 0xFF080010, 0xEC20E003, 0xDA070311);
	r7 = D(r7, s1_0_0, 0xE8FD000C, 0xF4040206, 0x07F40301, 0x1BF9160C);
	r0 = D(r0, s1_0_1, 0xDE04F9FD, 0x0A041C0D, 0x1A051F02, 0x000602FA);
	r1 = D(r1, s1_0_1, 0xE0181D1A, 0x3B04C318, 0x08000403, 0xECFBD3F0);
	r2 = D(r2, s1_0_1, 0x241D29F6, 0x22F50C10, 0x2808FE19, 0x19F31216);
	r3 = D(r3, s1_0_1, 0x150B22F5, 0x02030207, 0x02061403, 0x0110FAFC);
	r4 = D(r4, s1_0_1, 0xFB07EEFA, 0xF40C1427, 0xF6FCF31F, 0xF6FB19FD);
	r5 = D(r5, s1_0_1, 0xF418E7FD, 0xEF03F6F8, 0xD0F4CF00, 0x0301DD09);
	r6 = D(r6, s1_0_1, 0x0AFDEA06, 0x11E202FE, 0x0B193CFF, 0xFFEDFA0B);
	r7 = D(r7, s1_0_1, 0xFFFFE810, 0x1804F600, 0x080A18EB, 0xF00FE7E6);
	r0 = D(r0, s1_0_2, 0xFDF50804, 0x010D0400, 0xF60AF709, 0xFD04FD04);
	r1 = D(r1, s1_0_2, 0x10EF3708, 0xD6EBFA18, 0xFBFB0D05, 0x0805330A);
	r2 = D(r2, s1_0_2, 0xFAF00507, 0xF2F4FEFD, 0xF4FAFCFE, 0x20CB1A00);
	r3 = D(r3, s1_0_2, 0x102101F6, 0x1400FB0A, 0x07F4F900, 0xFC0D0503);
	r4 = D(r4, s1_0_2, 0x15F2100C, 0xF6F50101, 0x01021501, 0xFB09F6F1);
	r5 = D(r5, s1_0_2, 0x101524FF, 0x09061901, 0x06143FFA, 0xFD001002);
	r6 = D(r6, s1_0_2, 0xFF11F7F1, 0x000104F6, 0x0816F1EC, 0x0EEFEC10);
	r7 = D(r7, s1_0_2, 0x0606FEF7, 0x1318F9F0, 0xFC01E9FE, 0x1EF31D04);
	r0 = D(r0, s1_1_0, 0x15160FED, 0x0406F7DE, 0xF8F00BFD, 0x03050902);
	r1 = D(r1, s1_1_0, 0xFBCE0A05, 0xF4E80A09, 0x0713FFFA, 0xD501E11E);
	r2 = D(r2, s1_1_0, 0x03161AE7, 0xF706F023, 0xF6F52EEF, 0xE31AE1E5);
	r3 = D(r3, s1_1_0, 0x07F80B03, 0xE911FFF5, 0xFFFD0705, 0x170F1802);
	r4 = D(r4, s1_1_0, 0x0E1CDE07, 0xF3FD1FF9, 0x08FD0A20, 0x13E8E802);
	r5 = D(r5, s1_1_0, 0x01EFE70C, 0xFF00CCFB, 0x1721E1F0, 0xF213E0ED);
	r6 = D(r6, s1_1_0, 0xDBF4F119, 0x3319F812, 0xEEF2FE39, 0x0C02FF15);
	r7 = D(r7, s1_1_0, 0xF00EFDE1, 0x11FEF704, 0x07030110, 0x1307D8FB);
	r0 = D(r0, s1_1_1, 0xFF01F1E7, 0x09000B00, 0x2601100E, 0xF405E7EF);
	r1 = D(r1, s1_1_1, 0x00BD83DB, 0x1EAC14D2, 0x0207FCEE, 0xEA10E90D);
	r2 = D(r2, s1_1_1, 0x11080DE8, 0xB4FF05F8, 0xEFD8F402, 0xB10F132C);
	r3 = D(r3, s1_1_1, 0xFCF1F719, 0x2515E616, 0x0F0CFF03, 0x1036F80C);
	r4 = D(r4, s1_1_1, 0xF4F213FC, 0xF6F6CD01, 0xF60915F1, 0xDAE008FC);
	r5 = D(r5, s1_1_1, 0xD7D3C707, 0x110BF01E, 0x2BF90513, 0xF5D528F7);
	r6 = D(r6, s1_1_1, 0x24FD0E1C, 0xF7151EEC, 0x19BA1B05, 0x041F1801);
	r7 = D(r7, s1_1_1, 0xF5190224, 0xF003010A, 0x16F8FAF6, 0xEA0C1A23);
	r0 = D(r0, s1_1_2, 0xFDF904F1, 0x0BFAE3E1, 0xFEFCFEFA, 0x0A001000);
	r1 = D(r1, s1_1_2, 0x170DD9C4, 0x05E40BD6, 0xFD050106, 0xD810F1EE);
	r2 = D(r2, s1_1_2, 0xFE13FE12, 0x1009F2FD, 0xFB0D06F8, 0x15C4E9D0);
	r3 = D(r3, s1_1_2, 0xF7F3F009, 0xED190BFD, 0x05FCF505, 0x0020F203);
	r4 = D(r4, s1_1_2, 0xFCE4E816, 0xF8081DF4, 0xFF0A0109, 0x03F11604);
	r5 = D(r5, s1_1_2, 0x2D0C1B12, 0xF707F8FE, 0xFBDDF3EC, 0xFA02FDE5);
	r6 = D(r6, s1_1_2, 0xED24EA0A, 0x0B1FEB0E, 0xEE0CF0EA, 0xF0431AF9);
	r7 = D(r7, s1_1_2, 0x05DC11E3, 0xF2010900, 0xF5D60522, 0x03E3FA14);
	r0 = D(r0, s1_2_0, 0xF5EE1803, 0xEC0F0EE9, 0x0606FA01, 0xFF030CFE);
	r1 = D(r1, s1_2_0, 0x1D260916, 0x11FBF1CD, 0x05F9F9FA, 0x0E07E31A);
	r2 = D(r2, s1_2_0, 0xF90BF005, 0x0BF8E005, 0xDD070C04, 0x08EDECE5);
	r3 = D(r3, s1_2_0, 0x00080601, 0x0B030312, 0x0A070AFB, 0x11070511);
	r4 = D(r4, s1_2_0, 0xDCF9C90F, 0x05FE0FF1, 0xF512FEF8, 0xEBF7EDF9);
	r5 = D(r5, s1_2_0, 0xF8020C07, 0xF20005F8, 0xE3E4E403, 0x080CD701);
	r6 = D(r6, s1_2_0, 0xFF0D0907, 0x081711FB, 0x150DCDD7, 0x09FE02FF);
	r7 = D(r7, s1_2_0, 0x0AF9F0E6, 0xF4FB050E, 0xFCF811F8, 0xEE020906);
	r0 = D(r0, s1_2_1, 0xE9F70200, 0xFF1CF3FC, 0xF80BEB00, 0x0D0201FD);
	r1 = D(r1, s1_2_1, 0x190CEB38, 0xD139201C, 0x0BF4F1F8, 0x3BD7B9DF);
	r2 = D(r2, s1_2_1, 0x010DFA0B, 0x01F6F6ED, 0xF719E8D9, 0xFBE6E9D0);
	r3 = D(r3, s1_2_1, 0xF9F6050B, 0xECF11200, 0x07130B06, 0xFA05EC0D);
	r4 = D(r4, s1_2_1, 0x02E80AE5, 0x180FE2EB, 0x06FEE5E6, 0xF5F0F111);
	r5 = D(r5, s1_2_1, 0xF1ECEBF8, 0x080809E7, 0xE818FFFA, 0xEFE5F1FE);
	r6 = D(r6, s1_2_1, 0x0F0802FA, 0x130E07E2, 0x15DF3619, 0x1C0D02FA);
	r7 = D(r7, s1_2_1, 0xEEF9FBFA, 0x01EF0508, 0xF406F0F8, 0x050DF8EE);
	r0 = D(r0, s1_2_2, 0xFFEB14FA, 0x12E40605, 0x0600FC08, 0x00020303);
	r1 = D(r1, s1_2_2, 0xC8ED31FD, 0xF218DCDA, 0xFFF803FE, 0xFDFAF31A);
	r2 = D(r2, s1_2_2, 0x07EBF603, 0x00F804FB, 0x040AF7FE, 0xF11003FD);
	r3 = D(r3, s1_2_2, 0xF40B0816, 0x020DEFF5, 0x0CF901F2, 0xFCE40501);
	r4 = D(r4, s1_2_2, 0xEA1DF401, 0x00070E09, 0x060DF107, 0x0B071E00);
	r5 = D(r5, s1_2_2, 0xF2D10009, 0xFAF60212, 0x0BF3230A, 0x1DDF1F1B);
	r6 = D(r6, s1_2_2, 0xFE0C0626, 0xF602EBFD, 0xF5FFCDFB, 0x0CFAD405);
	r7 = D(r7, s1_2_2, 0x0FFC11F9, 0x0314F9F9, 0x08010E16, 0x0701EA12);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0AFB09F4, 0xFEFDFB02, 0x090500FB, 0xFDF702FB);
	r1 = D(r1, s0_0_0, 0x16501901, 0x0CDA1DEA, 0xFD05F7F7, 0x0E09ED17);
	r2 = D(r2, s0_0_0, 0x12EFF50D, 0x02FFF9FE, 0xFA221007, 0x00811433);
	r3 = D(r3, s0_0_0, 0xF2FE0800, 0xF9F1FDD8, 0xFDF4FC0C, 0xF70EF6F5);
	r4 = D(r4, s0_0_0, 0xE12106ED, 0x0A06E801, 0xEC04F90D, 0x1F0B10F4);
	r5 = D(r5, s0_0_0, 0xEA130419, 0xE808FC15, 0xD5EBE314, 0xF50700FE);
	r6 = D(r6, s0_0_0, 0x070BFE10, 0xF9030A0F, 0x202DE30E, 0x1408F21A);
	r7 = D(r7, s0_0_0, 0x03FEEDFC, 0xFAF60A01, 0x041701FC, 0xDEB3ED08);
	r0 = D(r0, s0_0_1, 0xED250BF2, 0x01F4F702, 0x042C0503, 0xF4FDFC0A);
	r1 = D(r1, s0_0_1, 0xF4AAF919, 0x16DA43E7, 0xF213FA07, 0x080E14EE);
	r2 = D(r2, s0_0_1, 0x07F719EF, 0x02150707, 0x1501EA0A, 0x02DAE41B);
	r3 = D(r3, s0_0_1, 0x0C2D0F0F, 0xED0C10EE, 0x01030102, 0xEEEEE4F0);
	r4 = D(r4, s0_0_1, 0xF8DF0010, 0xF6F7000D, 0xF5F9010F, 0x0E10070B);
	r5 = D(r5, s0_0_1, 0xFC141FF9, 0xF600E504, 0xFC19F1FD, 0xFACFE2FD);
	r6 = D(r6, s0_0_1, 0x0306E60E, 0xFEEFF3FB, 0x0011292C, 0xFE0D0CFB);
	r7 = D(r7, s0_0_1, 0x0EEE07F4, 0xFC110F09, 0xF60F14FA, 0xF8161812);
	r0 = D(r0, s0_0_2, 0x10FC05FB, 0x00F3FF0F, 0x02F6F312, 0x01F605FC);
	r1 = D(r1, s0_0_2, 0x13F00715, 0xFEEFDB1F, 0x07F703F8, 0xF33013F3);
	r2 = D(r2, s0_0_2, 0x0EFDFFF9, 0xFB0CFEF4, 0x090BF80C, 0x09B2C742);
	r3 = D(r3, s0_0_2, 0xFE02FCFB, 0xF50B0DE1, 0x0B030502, 0xF7FC04FB);
	r4 = D(r4, s0_0_2, 0x0205FC0C, 0xFD0411F8, 0xFA06F806, 0x1F0404F5);
	r5 = D(r5, s0_0_2, 0xFA1035DA, 0x021019FC, 0xEB0834E8, 0xF10B0E03);
	r6 = D(r6, s0_0_2, 0xED0FFDFC, 0x0703F904, 0x0CFAE609, 0x080BF308);
	r7 = D(r7, s0_0_2, 0x030B1004, 0x0908F8DF, 0x06F6F702, 0xFC260711);
	r0 = D(r0, s0_1_0, 0x270CF4F2, 0x0714FEFD, 0xEDE40102, 0xF61E0D0B);
	r1 = D(r1, s0_1_0, 0x033B1B22, 0x1F20F012, 0x0EEEFE12, 0x9FF91015);
	r2 = D(r2, s0_1_0, 0xEE69FAF9, 0xDA001E0B, 0x0F540607, 0x07813640);
	r3 = D(r3, s0_1_0, 0xE2D0E822, 0xCE00E9F3, 0xF211F30C, 0x17F80000);
	r4 = D(r4, s0_1_0, 0x2081EDF5, 0x2205F915, 0xF815FE03, 0x18DE0109);
	r5 = D(r5, s0_1_0, 0xCED6F919, 0xF425DEFC, 0xECF1ECF8, 0xE7090EF0);
	r6 = D(r6, s0_1_0, 0x2209DEF4, 0xDDFAF0F6, 0xC90BFEFF, 0x2E0E0A18);
	r7 = D(r7, s0_1_0, 0x0C00F3EC, 0x00F6F60E, 0xE9090FFE, 0x011203E7);
	r0 = D(r0, s0_1_1, 0xF01315FC, 0xF12015F9, 0x0CDAEB16, 0x052AEA03);
	r1 = D(r1, s0_1_1, 0x8A81EEE2, 0x28C8E109, 0x03040602, 0xEC03092A);
	r2 = D(r2, s0_1_1, 0x05E913F2, 0x061007FF, 0x14FDDD20, 0x191D0C36);
	r3 = D(r3, s0_1_1, 0xAFD9ECE6, 0x00EAEBD1, 0xF6F409FE, 0xFAF80502);
	r4 = D(r4, s0_1_1, 0x13E710F3, 0x18F6EE0B, 0xEE1013F6, 0x0DF10208);
	r5 = D(r5, s0_1_1, 0xDB0FB5D7, 0x07000EDD, 0xEFD84CEC, 0xEED4DA09);
	r6 = D(r6, s0_1_1, 0x1E0CD905, 0xF32AF108, 0xD2211813, 0x0657E60D);
	r7 = D(r7, s0_1_1, 0x03E805FB, 0xA8DF02EF, 0xEC070B04, 0x020A0D04);
	r0 = D(r0, s0_1_2, 0x0E240511, 0x15F811F7, 0xFA08FA06, 0xF2060BFC);
	r1 = D(r1, s0_1_2, 0x17ED100A, 0x1A042FD2, 0xFB190A0F, 0x12FE01F1);
	r2 = D(r2, s0_1_2, 0x01F31805, 0x0AFB0DF8, 0x16FCF505, 0x110E2126);
	r3 = D(r3, s0_1_2, 0xEA00E9EB, 0xFEF70CF2, 0xFB07FEFA, 0xF8F41811);
	r4 = D(r4, s0_1_2, 0x001DFD13, 0x061021EC, 0xF91002F4, 0x09E7ECF0);
	r5 = D(r5, s0_1_2, 0x02E9E2FD, 0x01FD11F6, 0x0A27E60D, 0x08EBE31A);
	r6 = D(r6, s0_1_2, 0xEFF50BFD, 0xF808080B, 0x061A0100, 0xF8F5F11C);
	r7 = D(r7, s0_1_2, 0x06ED0101, 0xF702EDEF, 0x0802C50A, 0x0B04FC17);
	r0 = D(r0, s0_2_0, 0xF4E61001, 0x271EEBEC, 0x0012F906, 0xFEEF0208);
	r1 = D(r1, s0_2_0, 0xEA7F010B, 0xF5C006E2, 0xF9F7FD0E, 0xED06F80D);
	r2 = D(r2, s0_2_0, 0x00EDEE02, 0x08F6F303, 0x0D2BED00, 0x10AA291B);
	r3 = D(r3, s0_2_0, 0xDD2B0D05, 0xF0020008, 0xF61EFEF8, 0x01D50308);
	r4 = D(r4, s0_2_0, 0x05BA01F7, 0x0E2AF602, 0xEBE0F3E5, 0x1BD90004);
	r5 = D(r5, s0_2_0, 0xFEE01FF6, 0xF81803F2, 0xEFC80701, 0xEF2C16E2);
	r6 = D(r6, s0_2_0, 0x272AFBED, 0x121C1204, 0x04E20E0D, 0x0BB50601);
	r7 = D(r7, s0_2_0, 0x191AF60B, 0x02E70205, 0x03010AFA, 0xDD94FB04);
	r0 = D(r0, s0_2_1, 0x03EDF806, 0x0C1B2306, 0x0C0307FA, 0x09EEFAFD);
	r1 = D(r1, s0_2_1, 0xFBF0F7FA, 0x0728CDFA, 0x0CF7F402, 0x021AD421);
	r2 = D(r2, s0_2_1, 0xF8FCEDF8, 0x0019110E, 0x09F608F9, 0x200BFE0E);
	r3 = D(r3, s0_2_1, 0xC01BFA0D, 0x13B50914, 0xFAEB1101, 0xECF9FD0D);
	r4 = D(r4, s0_2_1, 0x0504FBFA, 0x04DF000B, 0x09FE13DD, 0x0E01DF03);
	r5 = D(r5, s0_2_1, 0x1B2DFB0D, 0xF7EE0BFB, 0xFE021601, 0xF37FFA01);
	r6 = D(r6, s0_2_1, 0xC1D508F9, 0xF2F6FD0A, 0x0700F8E3, 0xC9B81010);
	r7 = D(r7, s0_2_1, 0x05E000F4, 0x052007F6, 0x000CF9F5, 0xC7271DF7);
	r0 = D(r0, s0_2_2, 0x03F6E908, 0x20F6F10D, 0x0B1407FD, 0x0CFB0702);
	r1 = D(r1, s0_2_2, 0x1B0CE410, 0x0D1EE4FA, 0x0108000D, 0xF2C606F4);
	r2 = D(r2, s0_2_2, 0x0AE904FF, 0x131DF508, 0x050E0BF5, 0xDB08E523);
	r3 = D(r3, s0_2_2, 0xF9DD12F0, 0x070BF3FE, 0xF1E7EF06, 0x16F90409);
	r4 = D(r4, s0_2_2, 0xFC151C02, 0xD6051BF4, 0x0DFF0AFA, 0x0807F210);
	r5 = D(r5, s0_2_2, 0x0800DD07, 0xF7040102, 0x141EDDF8, 0x12E0E906);
	r6 = D(r6, s0_2_2, 0xE00620F0, 0x04F90D12, 0x000916FC, 0xF0DA170A);
	r7 = D(r7, s0_2_2, 0xF9F9F2FA, 0xF600E3ED, 0xFEF8E9FB, 0xE5E4F60D);
	r0 = D(r0, s1_0_0, 0x11050601, 0x0AFB0D0F, 0x09F20AFB, 0xF9F60F05);
	r1 = D(r1, s1_0_0, 0x0ADEF3F3, 0xF8C614F7, 0xEFFDFF09, 0x19FB1907);
	r2 = D(r2, s1_0_0, 0xF609280E, 0xFEFAFDFD, 0xD509FDFC, 0xE1E00819);
	r3 = D(r3, s1_0_0, 0x24120406, 0x0CF2F8EE, 0xF9FDFEF6, 0x0B16E7FD);
	r4 = D(r4, s1_0_0, 0x21F6FF03, 0x0DFD0DF8, 0x28FEF7F6, 0x0E17FF0D);
	r5 = D(r5, s1_0_0, 0x02F2E1F5, 0xF92010FF, 0xEFFCE90D, 0x18F6E2F1);
	r6 = D(r6, s1_0_0, 0x04F2F7E8, 0x00F9FAFB, 0xF4000F02, 0xDD1023DC);
	r7 = D(r7, s1_0_0, 0x12F208EC, 0xF617002B, 0xFD030AFA, 0xFA240002);
	r0 = D(r0, s1_0_1, 0x1FF20002, 0x17F20E07, 0xF009FEF2, 0xFEFD08F8);
	r1 = D(r1, s1_0_1, 0x3F11241F, 0xEF43E6D6, 0x07050109, 0x0B08EDE5);
	r2 = D(r2, s1_0_1, 0x1D15FB04, 0xF716EBFD, 0x10FBF8FC, 0xFEA71D0B);
	r3 = D(r3, s1_0_1, 0xB817010B, 0xF00FE5ED, 0xDB0C0D01, 0x310205FC);
	r4 = D(r4, s1_0_1, 0xFEFDEC09, 0xFBF10301, 0xEEF70500, 0x24FCEF08);
	r5 = D(r5, s1_0_1, 0x26FA05F8, 0x20E9FCFC, 0xDDDBFD18, 0x05091B11);
	r6 = D(r6, s1_0_1, 0xF30C0BEF, 0x05050C0C, 0xEE17FB0C, 0x1B17ECF3);
	r7 = D(r7, s1_0_1, 0xF1EDF8FE, 0x06001908, 0x0702FD05, 0xFBFBEC07);
	r0 = D(r0, s1_0_2, 0xFFFCF903, 0xFD05FF03, 0x0FF9E701, 0x00FCF604);
	r1 = D(r1, s1_0_2, 0xCF172AFA, 0xECCB181F, 0xFD00FA04, 0xE911E513);
	r2 = D(r2, s1_0_2, 0xEF0BFA09, 0x0300FDFE, 0xFC000A13, 0x05E9312A);
	r3 = D(r3, s1_0_2, 0xFD11E9FF, 0xF80CECF5, 0x0108F7FF, 0x2207FDFE);
	r4 = D(r4, s1_0_2, 0x0AFF13EC, 0x07FF120A, 0x0904F8EE, 0xE8FAF0FA);
	r5 = D(r5, s1_0_2, 0xCB26FEFD, 0xE111EB0C, 0xB41E020C, 0x0E0F0FEF);
	r6 = D(r6, s1_0_2, 0x16FEFDFB, 0x0D05FD01, 0xE0FB0516, 0xF600F9FB);
	r7 = D(r7, s1_0_2, 0xFD050EF7, 0x0D0EDC10, 0x05FBEEF8, 0x05F92CF1);
	r0 = D(r0, s1_1_0, 0x01132704, 0xFA18EFFA, 0xFEF6081B, 0xF6F5FEF2);
	r1 = D(r1, s1_1_0, 0x3281E9F5, 0xBADA242A, 0x1101F6F8, 0x00FE1418);
	r2 = D(r2, s1_1_0, 0xE5D319ED, 0x08FC0E0F, 0x05DF1725, 0xF9D7F5D1);
	r3 = D(r3, s1_1_0, 0xEA280601, 0xFCFB0417, 0xF8FD0DF8, 0xDA1FE71E);
	r4 = D(r4, s1_1_0, 0xE03609F7, 0xFF170A07, 0xEA082402, 0x1C08F3FD);
	r5 = D(r5, s1_1_0, 0x16031533, 0x1D2514E7, 0x0310B2A3, 0xDBBC2915);
	r6 = D(r6, s1_1_0, 0xE21906E3, 0x10F725E8, 0xD7D022F4, 0x38BC1FC9);
	r7 = D(r7, s1_1_0, 0x0509F100, 0xECFD05E7, 0x0904FA08, 0x38003744);
	r0 = D(r0, s1_1_1, 0xBA004117, 0x0CF7400C, 0xC4FE1301, 0xF817F306);
	r1 = D(r1, s1_1_1, 0xC0AC51FC, 0xD333DBFC, 0x281A1003, 0x1C00E219);
	r2 = D(r2, s1_1_1, 0x331227FD, 0xFB0204ED, 0x360CFE03, 0xD33C34E1);
	r3 = D(r3, s1_1_1, 0xE2141FE3, 0x0010FBF7, 0xBD0E0CFC, 0x100EFF18);
	r4 = D(r4, s1_1_1, 0xEAF10B25, 0xAFFE0DEE, 0x21FFEE14, 0x321DE90C);
	r5 = D(r5, s1_1_1, 0xD6EFFFEE, 0x101118FB, 0x56C6F411, 0xE2EE3E06);
	r6 = D(r6, s1_1_1, 0xFBE0FA17, 0x0E0AF2F6, 0xE6E4EEEC, 0x06E633F3);
	r7 = D(r7, s1_1_1, 0xF6FDFD07, 0x051F16C0, 0x81FA16FE, 0xCCE51DED);
	r0 = D(r0, s1_1_2, 0xF30E1A04, 0x0F011209, 0xF609EBF8, 0x0C06F50F);
	r1 = D(r1, s1_1_2, 0x1708F8D3, 0x0286F31D, 0xE60EFFFF, 0xABDF02FA);
	r2 = D(r2, s1_1_2, 0xE208310F, 0xE8FB1C01, 0xE71DFAF9, 0xDC2117DB);
	r3 = D(r3, s1_1_2, 0xFFF83314, 0x1EFDE502, 0x10080503, 0xEE00100A);
	r4 = D(r4, s1_1_2, 0x06F50801, 0xF41D18E9, 0xF6130EF7, 0xE50B18E3);
	r5 = D(r5, s1_1_2, 0x16E808FF, 0xF00B100E, 0xFD13DB09, 0xEFF70E11);
	r6 = D(r6, s1_1_2, 0x0F1520FA, 0x0B0A0B09, 0xEA21081F, 0xFE082AFE);
	r7 = D(r7, s1_1_2, 0x11EB11F5, 0x460443F4, 0x0DF118FE, 0xEEF4150F);
	r0 = D(r0, s1_2_0, 0xF3F1E1A5, 0x010AFFA1, 0x03ECF64E, 0x03FA01ED);
	r1 = D(r1, s1_2_0, 0xE0817FF5, 0xFF81C8AE, 0x11F009FA, 0xE2074BF3);
	r2 = D(r2, s1_2_0, 0x09060819, 0x11DBDFB2, 0x0F12FE19, 0xF4D916FD);
	r3 = D(r3, s1_2_0, 0x041B0813, 0x1308EED6, 0x03E81501, 0x0D15E15E);
	r4 = D(r4, s1_2_0, 0xCE6CD6B7, 0xEAF4F254, 0x090DE802, 0xC70421E5);
	r5 = D(r5, s1_2_0, 0x0C00F595, 0x031A1B05, 0x153B013F, 0x25FE91F6);
	r6 = D(r6, s1_2_0, 0xF306DC7F, 0xE10C2C11, 0x06FE3C00, 0xF8ECFF26);
	r7 = D(r7, s1_2_0, 0x21FD60D9, 0xF5FF0DFE, 0xF613ED17, 0x0D322912);
	r0 = D(r0, s1_2_1, 0x1E10E722, 0x0DF5E6C0, 0xF3F7FA12, 0x020529E8);
	r1 = D(r1, s1_2_1, 0x1C81D8F0, 0x08A816F9, 0xF50034EF, 0xB1E8B40D);
	r2 = D(r2, s1_2_1, 0x06F829EF, 0x15EC0B15, 0x0A092415, 0xE8CB2936);
	r3 = D(r3, s1_2_1, 0xF308F714, 0xFFF5F30C, 0x1B040719, 0xFC01F5FE);
	r4 = D(r4, s1_2_1, 0xD9E18111, 0x08060116, 0x03E21CFE, 0x04F72113);
	r5 = D(r5, s1_2_1, 0xE7EBE6F4, 0xE9EDE2FB, 0xDBF506BB, 0xE30CB730);
	r6 = D(r6, s1_2_1, 0xE8F68F0D, 0xF90520CA, 0x030D5BEA, 0x02FFC9F1);
	r7 = D(r7, s1_2_1, 0xFCFE8118, 0x192E47B1, 0x0BF55CEB, 0xE20136F2);
	r0 = D(r0, s1_2_2, 0x06EE1907, 0x00F3D70C, 0xFA073406, 0xFFF8F913);
	r1 = D(r1, s1_2_2, 0xE79DFC0F, 0xEF132CE8, 0x05FEDFFA, 0x81F4C3E4);
	r2 = D(r2, s1_2_2, 0xFDF2EC08, 0xFA05F2F7, 0x03F82D0B, 0x12B00B07);
	r3 = D(r3, s1_2_2, 0xFA02EDF6, 0x0C05BAF9, 0xFEFB2308, 0x0C03F4F7);
	r4 = D(r4, s1_2_2, 0x26054EE2, 0xF5F58FFC, 0x12F90F04, 0x0604B8E2);
	r5 = D(r5, s1_2_2, 0x03198808, 0x0E001406, 0xFAF7131D, 0x0F068101);
	r6 = D(r6, s1_2_2, 0x09208104, 0xE6F70C10, 0xE9F71405, 0x19082D1C);
	r7 = D(r7, s1_2_2, 0x080C1D18, 0xDEFC06FD, 0x0106EFF9, 0xEDFA4EE9);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-4.555e-02, -1.185e-02, -7.424e-04, -2.900e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(2.131e-02, -3.504e-02, -6.247e-03, -9.713e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(8.903e-04, -1.958e-02, 9.948e-04, -3.658e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.246e-02, 1.259e-02, 3.166e-03, -6.130e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.831e-02, -4.424e-02, 1.848e-02, -3.072e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.816e-02, 3.811e-03, -4.381e-02, -2.484e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.992e-02, 1.597e-02, -3.232e-02, -1.077e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-6.417e-03, -1.143e-02, -1.760e-02, -2.960e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_DS_vk] -conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF802F100, 0xF8F4F6F8, 0xFEF80704, 0x03FAFDFF);
	r1 = D(r1, s0_0_0, 0xF1FB2AD3, 0xDDF20C03, 0xFDEF0501, 0xF20EF70D);
	r2 = D(r2, s0_0_0, 0x0902E70A, 0x080913FA, 0xF6EFEE01, 0x07FD0E01);
	r3 = D(r3, s0_0_0, 0x0AFE00F5, 0x0815F403, 0xFFFEEAF3, 0xFF05F707);
	r4 = D(r4, s0_0_0, 0xE50BFCFA, 0xF809DCE0, 0x1708FD07, 0x10080DF4);
	r5 = D(r5, s0_0_0, 0xF9FC0CFC, 0xFBF8F9FA, 0xF9FE0308, 0x0407F706);
	r6 = D(r6, s0_0_0, 0x020BF503, 0x0D03F306, 0x0500F800, 0x030CF709);
	r7 = D(r7, s0_0_0, 0xFFFFF404, 0x0DF40716, 0x0C060BF9, 0x1110E309);
	r0 = D(r0, s0_0_1, 0xF60DFAE9, 0x06FAF5FF, 0x06040702, 0x1110E206);
	r1 = D(r1, s0_0_1, 0x23E8F7CC, 0xFBD4FDE5, 0x0807FCFD, 0xE810F5E5);
	r2 = D(r2, s0_0_1, 0xFEFAFCFF, 0xFA071411, 0x140BFE10, 0x06EE100A);
	r3 = D(r3, s0_0_1, 0x13FE120B, 0x1F00F404, 0xFCFA08F2, 0xE8FDFB00);
	r4 = D(r4, s0_0_1, 0x0329F7E6, 0x01020B1B, 0x0F370C17, 0x1C130911);
	r5 = D(r5, s0_0_1, 0xFEF3030A, 0xEDFD0F05, 0x1009FA02, 0xECFA0AF7);
	r6 = D(r6, s0_0_1, 0xED090002, 0xF8FD0006, 0x00FF06F9, 0x01F4FDFD);
	r7 = D(r7, s0_0_1, 0x03F407FC, 0x050B0801, 0x03F7070B, 0x0C010C12);
	r0 = D(r0, s0_0_2, 0xF6FBF706, 0x03020504, 0xF90009FE, 0x030103F4);
	r1 = D(r1, s0_0_2, 0xD7F945FB, 0x0F08F70A, 0xF508F400, 0x02F6F60A);
	r2 = D(r2, s0_0_2, 0xFCFD0606, 0xF7EC07FB, 0x0207F2FB, 0x0A0901FE);
	r3 = D(r3, s0_0_2, 0xF9FE010B, 0x05060101, 0x01F9FF09, 0x050B0201);
	r4 = D(r4, s0_0_2, 0x02F302EA, 0x0F0621FC, 0xE00D0218, 0xFDF908EE);
	r5 = D(r5, s0_0_2, 0x0EFB03F8, 0x0AF1F903, 0x00FD01FF, 0x02FD0006);
	r6 = D(r6, s0_0_2, 0x03F8F906, 0x020CFC12, 0x03030002, 0x010EF702);
	r7 = D(r7, s0_0_2, 0xF5F60901, 0xE6F107F9, 0x0403FCFD, 0x00011203);
	r0 = D(r0, s0_1_0, 0xDE08EDF1, 0xF30308F2, 0xF914F60D, 0x01FBF1FE);
	r1 = D(r1, s0_1_0, 0x080CE1FE, 0xEC11F2F8, 0x03EFF906, 0x07190602);
	r2 = D(r2, s0_1_0, 0xFD01130B, 0xF109F5E9, 0xE5FDE807, 0x0200010F);
	r3 = D(r3, s0_1_0, 0xE4FBE5FF, 0xF4FFFEEF, 0x040008F8, 0xFF0CF506);
	r4 = D(r4, s0_1_0, 0xDDF907FB, 0xDC050EE1, 0xF2D909DA, 0xF2F630FF);
	r5 = D(r5, s0_1_0, 0x0011E8FF, 0x1DF7F61F, 0xEEF0F405, 0x12100111);
	r6 = D(r6, s0_1_0, 0x10050C0F, 0x27020209, 0x1E090D02, 0x170306EF);
	r7 = D(r7, s0_1_0, 0xF40CF7FD, 0x17FA0318, 0x0FF11FFC, 0xE7F71B00);
	r0 = D(r0, s0_1_1, 0x261CEAEC, 0xFA1710EC, 0x0B2210FA, 0x0819E4FC);
	r1 = D(r1, s0_1_1, 0x1A2EFF28, 0xF8FBF6E0, 0xFF15F003, 0x24C50516);
	r2 = D(r2, s0_1_1, 0x37F90CED, 0x321922E7, 0x32081307, 0x07EE1B0F);
	r3 = D(r3, s0_1_1, 0xF5FE1602, 0x2CFD0917, 0x37E90BF4, 0x020DF307);
	r4 = D(r4, s0_1_1, 0xD32401F7, 0xE1FBFC30, 0x0D16070C, 0x0502080E);
	r5 = D(r5, s0_1_1, 0xE907F100, 0xEBFDFFE0, 0x0736EDFD, 0x29F40C01);
	r6 = D(r6, s0_1_1, 0xCB09FE03, 0xF71D08E8, 0x1B1BFA04, 0xF5F71419);
	r7 = D(r7, s0_1_1, 0x031E1524, 0x0806FBF9, 0xDB02FB12, 0xE0F70B09);
	r0 = D(r0, s0_1_2, 0x01FEFDEE, 0xF5090302, 0xF703FDFD, 0x15F6FAF2);
	r1 = D(r1, s0_1_2, 0xB1F42C0F, 0xEAFCFCE1, 0x200D0003, 0x18E706EF);
	r2 = D(r2, s0_1_2, 0x0A0D0FEC, 0xFC0D1C0F, 0x090AFFF5, 0x0117060A);
	r3 = D(r3, s0_1_2, 0x04EB0DEE, 0xF91212FC, 0xFCF1F4FE, 0x0DE8F802);
	r4 = D(r4, s0_1_2, 0xF3ECF2EE, 0x2209FAFE, 0x02E8FF04, 0x23082303);
	r5 = D(r5, s0_1_2, 0xF1F6F710, 0x0B10E501, 0x0FFAFCFC, 0x0FF9FEF5);
	r6 = D(r6, s0_1_2, 0xFDEC000E, 0x020308FB, 0xFE000300, 0xEF0A0207);
	r7 = D(r7, s0_1_2, 0x12E605FE, 0xFF06F8FD, 0xFB08010B, 0x04FC0DFC);
	r0 = D(r0, s0_2_0, 0x040A05F7, 0x02F60606, 0xFA020EF7, 0x02FE0702);
	r1 = D(r1, s0_2_0, 0x28F909E9, 0xF602FAF2, 0xFD0AEF02, 0x0C0FEF0C);
	r2 = D(r2, s0_2_0, 0xF5EE0F0A, 0x14FFFBF9, 0x05FEFC0E, 0x04FA020C);
	r3 = D(r3, s0_2_0, 0xEEFF0CFE, 0xF9F6FBFD, 0xFC02FDFE, 0x0308F7FE);
	r4 = D(r4, s0_2_0, 0xFDFF08F2, 0xF1EC09F4, 0x29F6FCE4, 0x2016F6ED);
	r5 = D(r5, s0_2_0, 0x2707EE17, 0x0918000B, 0xFF011503, 0x0705FF0A);
	r6 = D(r6, s0_2_0, 0xFC07FEFD, 0x1B01F30D, 0xF9090501, 0x0805F9FB);
	r7 = D(r7, s0_2_0, 0x0102F505, 0xED09F6FC, 0x0D01FF06, 0x01FA020A);
	r0 = D(r0, s0_2_1, 0x020F04F3, 0xF80EFEE8, 0xF20209EB, 0xF3F90BEE);
	r1 = D(r1, s0_2_1, 0xF7BAFCCF, 0xFBF00F02, 0x06FBF401, 0x0F01060D);
	r2 = D(r2, s0_2_1, 0xEF05F800, 0xF51BFCF4, 0xF11BF80A, 0xE804FEFD);
	r3 = D(r3, s0_2_1, 0xE7090B12, 0x0315FE04, 0x1EE80A0A, 0xF6FA0604);
	r4 = D(r4, s0_2_1, 0xF9030F01, 0x1E1B0F0F, 0xAD320602, 0x2D03FF10);
	r5 = D(r5, s0_2_1, 0x17F114E9, 0x05F80D14, 0x2AE4F1FB, 0x08010F0B);
	r6 = D(r6, s0_2_1, 0x0D0D01FD, 0xF31306F5, 0xFFFFFDFB, 0x0B09F70B);
	r7 = D(r7, s0_2_1, 0xFF0507F4, 0xFDE9F80E, 0x2E02FE08, 0x0003F007);
	r0 = D(r0, s0_2_2, 0x01EE03FE, 0x02F901F2, 0xFBFD0C01, 0x06F5FEF3);
	r1 = D(r1, s0_2_2, 0x1EF7EB13, 0xF001F8F7, 0xF4060513, 0xEA10FB13);
	r2 = D(r2, s0_2_2, 0x0E00F41B, 0xFC110D16, 0x19F5F5FD, 0xFBFBFC08);
	r3 = D(r3, s0_2_2, 0xECFEFE06, 0x040A0205, 0xF7EB00F6, 0xFBFCFB00);
	r4 = D(r4, s0_2_2, 0x05F705F6, 0xF9F7FEF8, 0x030F210C, 0x000BFCEC);
	r5 = D(r5, s0_2_2, 0xFC060CFA, 0x0D09F7FF, 0x1FE0FD07, 0xFFFA0603);
	r6 = D(r6, s0_2_2, 0xF6FEFFFE, 0xF2FF040B, 0x060AFF02, 0x0F130001);
	r7 = D(r7, s0_2_2, 0xFA0405FE, 0x08FAF90D, 0xFF0B07FC, 0x00110009);
	r0 = D(r0, s1_0_0, 0x0EF7F900, 0x0BFD050A, 0x07081803, 0x07FDFB16);
	r1 = D(r1, s1_0_0, 0xEC1ED253, 0xE7FBE6F4, 0xE2F8121B, 0x18FCFDD8);
	r2 = D(r2, s1_0_0, 0x0EF406F4, 0xEA01D5E4, 0xFA0C0613, 0xE70A1918);
	r3 = D(r3, s1_0_0, 0x1624E0E7, 0xF511FE22, 0x06FEF206, 0x0EF6E9F6);
	r4 = D(r4, s1_0_0, 0x1DE8D5EE, 0x042C02A3, 0xC6F50F22, 0xFFFEED30);
	r5 = D(r5, s1_0_0, 0xFAFB130E, 0xF91504E1, 0x15F40EF3, 0x17FCEBEA);
	r6 = D(r6, s1_0_0, 0x0DFAFAE9, 0x0CD010E4, 0x03FAFC04, 0xF5DBE308);
	r7 = D(r7, s1_0_0, 0x0E00FE16, 0x0405FE01, 0xDFF90A27, 0x1201F2EE);
	r0 = D(r0, s1_0_1, 0x12E9F50D, 0xF8FEEA0F, 0x0EEDFDFA, 0x10F4F10B);
	r1 = D(r1, s1_0_1, 0xF226E7AE, 0xC5EED019, 0x1702FE0C, 0x1D2006F2);
	r2 = D(r2, s1_0_1, 0x120D110E, 0x09DD84DC, 0x02010C0F, 0xF802030C);
	r3 = D(r3, s1_0_1, 0xFC0FFEF4, 0xFD080522, 0x0EFD0610, 0x0702FEFD);
	r4 = D(r4, s1_0_1, 0x19A235FC, 0x1617D013, 0x0EEA362D, 0x0AF0A418);
	r5 = D(r5, s1_0_1, 0xE8EE1FFA, 0xE3FCE6C2, 0xFCF6FDFE, 0x0D19ED0A);
	r6 = D(r6, s1_0_1, 0x031DFFF1, 0x03192103, 0xFD07F4FE, 0xF111070F);
	r7 = D(r7, s1_0_1, 0x1206FC1A, 0x0DED070F, 0xEF040A1F, 0x0106FBE2);
	r0 = D(r0, s1_0_2, 0x07FD0309, 0x09EF1F20, 0x06FAF80A, 0x02080004);
	r1 = D(r1, s1_0_2, 0x0D03A3E9, 0xE9D5EC19, 0x0910F801, 0x030BEB01);
	r2 = D(r2, s1_0_2, 0x050801EC, 0x0900E6D8, 0xFE010200, 0xFFF91010);
	r3 = D(r3, s1_0_2, 0xFA06F8DB, 0xF60E0D19, 0x02FB000E, 0x04FCFF05);
	r4 = D(r4, s1_0_2, 0x14F8DFF3, 0xFEFCB6E2, 0x0503F82D, 0x0815FE2F);
	r5 = D(r5, s1_0_2, 0x030424EA, 0xFFF104D5, 0x00FE0F02, 0xFFFEEBF6);
	r6 = D(r6, s1_0_2, 0x04FD0BF3, 0xE902D5E5, 0x02060701, 0x0107060A);
	r7 = D(r7, s1_0_2, 0x060502FB, 0x0F0ED206, 0xFC051E15, 0xFD0904E3);
	r0 = D(r0, s1_1_0, 0x1B0F16FB, 0x0AF00B1E, 0x1700E4FE, 0x02010509);
	r1 = D(r1, s1_1_0, 0x5785213E, 0x1A09DCEA, 0xE0E2F3E4, 0xF632E408);
	r2 = D(r2, s1_1_0, 0xD8F00423, 0x00F9E2E5, 0x0B052707, 0xF700E112);
	r3 = D(r3, s1_1_0, 0x0E390ADC, 0xF81F252A, 0xFFF70620, 0x0D12FB0B);
	r4 = D(r4, s1_1_0, 0x0708E114, 0xF1032F97, 0x04DDEB0C, 0xFE08EC31);
	r5 = D(r5, s1_1_0, 0x20100BDD, 0x1FFAD4F0, 0xF40812FF, 0xFD0BF0E6);
	r6 = D(r6, s1_1_0, 0x00EFDCFA, 0x06DCCFF9, 0x01FDF404, 0x04112F10);
	r7 = D(r7, s1_1_0, 0x010A0301, 0xCC14F113, 0xE3DC0327, 0xE2EE00CE);
	r0 = D(r0, s1_1_1, 0x19E20C08, 0xF1D31629, 0x0CF1120F, 0xFEEFF21D);
	r1 = D(r1, s1_1_1, 0x111AFDF7, 0x140181EA, 0x272B3C29, 0x150CECEF);
	r2 = D(r2, s1_1_1, 0xF1EEF2DA, 0x08D7F31B, 0xEBE60FFC, 0xF416EE08);
	r3 = D(r3, s1_1_1, 0x13E9C6F4, 0x07F71610, 0xF5FE2319, 0x06D6BCFE);
	r4 = D(r4, s1_1_1, 0xFA28F2DE, 0x0AF5CE0A, 0xFADF0609, 0x1016F505);
	r5 = D(r5, s1_1_1, 0x0C29D9EC, 0xF72FFEE7, 0xF7F7EA03, 0x04E8E1ED);
	r6 = D(r6, s1_1_1, 0x140C04E7, 0x03040AF6, 0x07F41018, 0x0B08D6F1);
	r7 = D(r7, s1_1_1, 0x2019D900, 0xFB11F7FC, 0xF338121D, 0xFF18C1E8);
	r0 = D(r0, s1_1_2, 0x0907FF0A, 0xF808FF16, 0x0D03F5F6, 0x0708F7F2);
	r1 = D(r1, s1_1_2, 0x1E0B04BB, 0xFE0E000A, 0x0BFAFE0C, 0x0F0E0EFF);
	r2 = D(r2, s1_1_2, 0xF801FA12, 0x0E14C7ED, 0xFD0EED05, 0xFFF8FC0C);
	r3 = D(r3, s1_1_2, 0x0B0402E8, 0x0909F105, 0x04FEFA06, 0xF4F911F8);
	r4 = D(r4, s1_1_2, 0x05160BEA, 0xFF0C00EB, 0x0D2E1328, 0xFC230816);
	r5 = D(r5, s1_1_2, 0x0204FFD7, 0xFBF5E9D8, 0xF5F90812, 0x0200E1E5);
	r6 = D(r6, s1_1_2, 0xF9F80F06, 0xF60B08EB, 0x02FE0106, 0x03FC070B);
	r7 = D(r7, s1_1_2, 0x0309F9F4, 0xF2061AF9, 0xF7120811, 0x030406E1);
	r0 = D(r0, s1_2_0, 0x0F1A1103, 0xFF0303FE, 0xFF1503FA, 0xFBF8F017);
	r1 = D(r1, s1_2_0, 0x07E88720, 0xF402F312, 0xFAF7F417, 0x09FFE70C);
	r2 = D(r2, s1_2_0, 0xFBF2F609, 0xFF09D20D, 0x00ECFBF0, 0xFE03FB0A);
	r3 = D(r3, s1_2_0, 0xFD161E81, 0xFFEEFF11, 0x04020A0D, 0x080E09FA);
	r4 = D(r4, s1_2_0, 0x0307FBFB, 0xFDE9E1C9, 0x0707E607, 0x0716DE1F);
	r5 = D(r5, s1_2_0, 0xFFE9BEC7, 0x08EBEBD8, 0xFCFFF603, 0xFBF6D0FE);
	r6 = D(r6, s1_2_0, 0xFF0912F2, 0xF7030DEF, 0xFAF80E11, 0x02060506);
	r7 = D(r7, s1_2_0, 0x0604E7FC, 0xFB061602, 0xF4E1FD1D, 0xF8E9EFF0);
	r0 = D(r0, s1_2_1, 0x050B020F, 0x0601FAF8, 0x031A0403, 0xFD020913);
	r1 = D(r1, s1_2_1, 0xFFEBF981, 0x040BA823, 0x0409F314, 0x0B12FA1F);
	r2 = D(r2, s1_2_1, 0xEEBF0D16, 0x00F8F8FD, 0xF6EDF9F6, 0xF9FEEE08);
	r3 = D(r3, s1_2_1, 0xFD0A05E2, 0xFCF0F119, 0x0314F902, 0x071104FB);
	r4 = D(r4, s1_2_1, 0x060B01FC, 0xF814C20B, 0x1117F311, 0x0B16BA1B);
	r5 = D(r5, s1_2_1, 0x130BD5FD, 0x05FF9901, 0xEBD51706, 0x0414EAFE);
	r6 = D(r6, s1_2_1, 0xF703E6E9, 0x0C12F0F1, 0xFD07FC0A, 0x0B010EFD);
	r7 = D(r7, s1_2_1, 0x0915010B, 0xF302EB00, 0xFCF5081A, 0xFADAEFE8);
	r0 = D(r0, s1_2_2, 0x020D0704, 0xF901F414, 0xFE090007, 0xFC10FE05);
	r1 = D(r1, s1_2_2, 0x0814E3AF, 0xF2FBCD29, 0x09061305, 0x0505E3EB);
	r2 = D(r2, s1_2_2, 0x01F608FB, 0x101AEEEF, 0xFBFC07EF, 0xF8F20A15);
	r3 = D(r3, s1_2_2, 0xFBFDFBC8, 0x02FC0303, 0x06100203, 0xFEF5F107);
	r4 = D(r4, s1_2_2, 0x04000701, 0x0420E1D8, 0x02321713, 0x081DF711);
	r5 = D(r5, s1_2_2, 0x0412F0EA, 0x0AEAE7F3, 0xFDEA100B, 0x060EE7E1);
	r6 = D(r6, s1_2_2, 0xFCFAFBF2, 0x02080FF4, 0x0003000C, 0xFC03FF0C);
	r7 = D(r7, s1_2_2, 0xFE0CFDFD, 0x00EA13FE, 0x03020002, 0xF9FBE9EC);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x050314FD, 0xF706F002, 0xFA0EFBFF, 0xF3000605);
	r1 = D(r1, s0_0_0, 0xDC0A2732, 0x0811F3F7, 0x0E06FE01, 0x1703FC05);
	r2 = D(r2, s0_0_0, 0x14010B02, 0x06FFFDF2, 0xD4F10F03, 0x0DFFF3FA);
	r3 = D(r3, s0_0_0, 0xF5FDF007, 0xFDF11904, 0x00FC0408, 0x09FEFE01);
	r4 = D(r4, s0_0_0, 0x241200E6, 0xBAE31FF7, 0x1719D8F0, 0xF5FED400);
	r5 = D(r5, s0_0_0, 0xFF07EB00, 0xE503E8FB, 0x1705FAF6, 0x0E03F2F9);
	r6 = D(r6, s0_0_0, 0xF90AEF08, 0xFD030206, 0xFF03FFFF, 0x0AFB0F0C);
	r7 = D(r7, s0_0_0, 0xF90900FD, 0x1310F7F9, 0x0301F7FE, 0xEC020F00);
	r0 = D(r0, s0_0_1, 0xFB0905FF, 0x070B0EF9, 0x2400F2F5, 0xF8091402);
	r1 = D(r1, s0_0_1, 0xF6CB2C00, 0x2EFB090F, 0x14F9000F, 0xE7EA0314);
	r2 = D(r2, s0_0_1, 0xEEF509F6, 0x1EFBFEFC, 0x0307E2E4, 0x1407F5EF);
	r3 = D(r3, s0_0_1, 0x460CF4FC, 0xFDFE0A09, 0xFDFFFEFE, 0xF40414FB);
	r4 = D(r4, s0_0_1, 0x28E90A14, 0x001EC6F4, 0xDAF6EB0E, 0x1DFC0502);
	r5 = D(r5, s0_0_1, 0x23FA01FB, 0xFA14ED0D, 0x060B08F8, 0xEFF2FE00);
	r6 = D(r6, s0_0_1, 0xEE0504F7, 0xD800EA00, 0xF8FA0F06, 0xCAF6EF10);
	r7 = D(r7, s0_0_1, 0x0701EBFB, 0x0CF9F814, 0x150DF1FD, 0x17F80004);
	r0 = D(r0, s0_0_2, 0x020208FE, 0xFBF9FE01, 0x0609FDF5, 0x0AFFFFF2);
	r1 = D(r1, s0_0_2, 0xD8EFECFA, 0x21DFF807, 0xD9FDF5F7, 0xDCF60622);
	r2 = D(r2, s0_0_2, 0x051403F4, 0xD5F41003, 0xD907F802, 0x1A0307F7);
	r3 = D(r3, s0_0_2, 0xF4F00DF2, 0x19F604F0, 0x00F90400, 0xF7060003);
	r4 = D(r4, s0_0_2, 0xF9170703, 0xD4DFC4DD, 0xB3E4E2FA, 0xE5EE0DE7);
	r5 = D(r5, s0_0_2, 0x13F1F703, 0xFDFAFD10, 0x0DF808F4, 0xF80EEF15);
	r6 = D(r6, s0_0_2, 0xFBF6060B, 0xD71307F5, 0xFDFEFFF9, 0xF80CFA04);
	r7 = D(r7, s0_0_2, 0x030AFBED, 0xCE0C07DB, 0x0CEFFA07, 0x02E702F5);
	r0 = D(r0, s0_1_0, 0x01F41207, 0x040B0208, 0xF7FA19FA, 0x0508000A);
	r1 = D(r1, s0_1_0, 0xEB0F37DA, 0xF7E71F13, 0x160A0401, 0xF9E90B0C);
	r2 = D(r2, s0_1_0, 0x230DDF0A, 0x15EC0809, 0xDDF6F102, 0xFCFD0701);
	r3 = D(r3, s0_1_0, 0xD1E42904, 0x0FFFFA08, 0x18090100, 0xFBFD100E);
	r4 = D(r4, s0_1_0, 0x030903E3, 0xB9FB0214, 0xD9F7C214, 0xC00EF4E5);
	r5 = D(r5, s0_1_0, 0x05F8081E, 0xF9FFF5E8, 0xEF06E801, 0x0F0501F8);
	r6 = D(r6, s0_1_0, 0xD7FBF0EE, 0xFD0501F5, 0x0605FFFD, 0xEDF00B17);
	r7 = D(r7, s0_1_0, 0x09F60707, 0x05FF0BF8, 0x0811E1FE, 0x000BF80B);
	r0 = D(r0, s0_1_1, 0x0CE1EF15, 0xFB08DD15, 0xDCEEF611, 0xE80225F4);
	r1 = D(r1, s0_1_1, 0xA7C501F4, 0xDADBF903, 0xE2F31710, 0x3B10EEDA);
	r2 = D(r2, s0_1_1, 0x1EFDDCF9, 0xD9EC160F, 0xE218F200, 0xF9121FFC);
	r3 = D(r3, s0_1_1, 0xF2F83CF5, 0x0D010DFD, 0x31FBF100, 0x0D0EEFFC);
	r4 = D(r4, s0_1_1, 0xF50113FA, 0x1804D611, 0x0BC2810A, 0xF8CDAC16);
	r5 = D(r5, s0_1_1, 0xDC0CEC00, 0x240308E5, 0x1F09D3F9, 0x1DE9EDE2);
	r6 = D(r6, s0_1_1, 0x000F17ED, 0xDCD8E1CA, 0x02F812F1, 0x131FFDC9);
	r7 = D(r7, s0_1_1, 0xE1041100, 0x1DFC0303, 0x0307F2FE, 0xED0802FD);
	r0 = D(r0, s0_1_2, 0x090B12FE, 0xFAE2DE11, 0x0D0AF5F5, 0xF30E0503);
	r1 = D(r1, s0_1_2, 0x22BD160F, 0xA325190C, 0xF902DEE7, 0x162BFFDF);
	r2 = D(r2, s0_1_2, 0xFEFDFBF0, 0x260403DF, 0x1717EBF7, 0xF606000A);
	r3 = D(r3, s0_1_2, 0xD10B09FA, 0xF60A10F9, 0xCE06EA19, 0xF4E6EF0A);
	r4 = D(r4, s0_1_2, 0x0F0701FB, 0xF215ECF9, 0xD934F4AD, 0xCFA0EA16);
	r5 = D(r5, s0_1_2, 0x0611F916, 0xE9020400, 0x03DCEF17, 0x120C09F0);
	r6 = D(r6, s0_1_2, 0xF20AF80B, 0xEE1F26F1, 0x05020407, 0xE8FB0AFE);
	r7 = D(r7, s0_1_2, 0xFB100000, 0x1811E601, 0x00FDFB0C, 0x040E1303);
	r0 = D(r0, s0_2_0, 0xFB04FA07, 0xFEFDFCFE, 0x2507F3FC, 0xFC06F9FF);
	r1 = D(r1, s0_2_0, 0x0A15E4F7, 0x0FF70A0F, 0xEA050DFD, 0x04F8FA0E);
	r2 = D(r2, s0_2_0, 0xE40EEC0C, 0x0DF1FFFC, 0xEA08F307, 0x0DFD04FC);
	r3 = D(r3, s0_2_0, 0x360FF1FD, 0x010FFC13, 0xF201F402, 0xF5FB0105);
	r4 = D(r4, s0_2_0, 0x12FAF4FC, 0xFFF51901, 0x81DF23D2, 0xC5E7E2E4);
	r5 = D(r5, s0_2_0, 0x05E51CDB, 0xDE08F1E4, 0xF703F3FB, 0xD709F6F1);
	r6 = D(r6, s0_2_0, 0xF7FB0EF8, 0xD8FD07F3, 0x0F04FCF4, 0xF006FFFF);
	r7 = D(r7, s0_2_0, 0xE3FDFEF9, 0x0D0FE1F4, 0xFA05FCF6, 0xF3FB0003);
	r0 = D(r0, s0_2_1, 0x070FFAF4, 0x0105FF14, 0x0907F4FF, 0x110FFB06);
	r1 = D(r1, s0_2_1, 0x55091DF9, 0x3A0102E2, 0x04070412, 0xD0EC0EEE);
	r2 = D(r2, s0_2_1, 0x0C02D811, 0x09FF0103, 0x1AFEF201, 0x1907FE22);
	r3 = D(r3, s0_2_1, 0xF4E6F520, 0x06F9F4FE, 0x0E06FFEC, 0xF501FBFC);
	r4 = D(r4, s0_2_1, 0xE0FDFF00, 0xB9DCC6FE, 0x22F1FF04, 0xF8E409FA);
	r5 = D(r5, s0_2_1, 0x130B12D4, 0xE3E331DD, 0xD80CED02, 0xE0F82BD9);
	r6 = D(r6, s0_2_1, 0xE3F2F809, 0xD705F6F7, 0x0801F603, 0x0A090CEE);
	r7 = D(r7, s0_2_1, 0xFFFC03DF, 0xE5130008, 0xF1F509E8, 0x03E51D1F);
	r0 = D(r0, s0_2_2, 0x070FF4F1, 0xFFF7F2FF, 0xF9F9EDF6, 0xF206EAFE);
	r1 = D(r1, s0_2_2, 0xD1EEE532, 0x06F3E702, 0xD90E0C06, 0x14FA040E);
	r2 = D(r2, s0_2_2, 0x06FFD4FE, 0xD1EE06F5, 0xFBF1EA04, 0xF9E7F60D);
	r3 = D(r3, s0_2_2, 0xFFF4FB03, 0x00FB0CF7, 0xFF0DF606, 0xF60B070B);
	r4 = D(r4, s0_2_2, 0x0C02FEFF, 0xF70906F8, 0xF1EFD713, 0xEDF3EAFC);
	r5 = D(r5, s0_2_2, 0x0C1B03F0, 0xFA15F606, 0x080519FE, 0x0519E9FF);
	r6 = D(r6, s0_2_2, 0x000B1100, 0xF3F5EFF4, 0xEFFD00F8, 0xFD0805FF);
	r7 = D(r7, s0_2_2, 0x0E06F203, 0x090919FC, 0xFD06F402, 0xF9F3EAFE);
	r0 = D(r0, s1_0_0, 0xFD0806FB, 0x0BFC07F5, 0x09F7041A, 0x07F2FE00);
	r1 = D(r1, s1_0_0, 0x48D1E6ED, 0x0213F905, 0x0B031200, 0xE4ED0BED);
	r2 = D(r2, s1_0_0, 0xF409EA09, 0xF2F21501, 0xF4110AED, 0x00F0060D);
	r3 = D(r3, s1_0_0, 0xE3DDF01D, 0xEEFCFDEC, 0x020907F6, 0xF9FBF8FF);
	r4 = D(r4, s1_0_0, 0x22F7F11B, 0xF7F8E6E9, 0x09122EF6, 0x010A1806);
	r5 = D(r5, s1_0_0, 0x0405120C, 0xF81703F0, 0x050AFD0E, 0xF002F8FB);
	r6 = D(r6, s1_0_0, 0xF9F7F309, 0xF116F505, 0x01F800FB, 0xF2E714E8);
	r7 = D(r7, s1_0_0, 0x0002F214, 0x0DF5EA24, 0x04F70C00, 0xF00AED0A);
	r0 = D(r0, s1_0_1, 0x02ED00F6, 0xFAF90C02, 0x0CF90303, 0x05D6F515);
	r1 = D(r1, s1_0_1, 0xBEB2C003, 0x020DFF00, 0x0BF007F8, 0x04E70FEF);
	r2 = D(r2, s1_0_1, 0xF933F3FF, 0xEBEDFD08, 0x0513F2FD, 0x1111060E);
	r3 = D(r3, s1_0_1, 0x0E0CF9F8, 0xFFE1F80F, 0x0C100500, 0x000B0DFA);
	r4 = D(r4, s1_0_1, 0x0EDAF6FE, 0x0729081B, 0xF80F1601, 0xF9FFF80C);
	r5 = D(r5, s1_0_1, 0x07060401, 0x06051AFB, 0xF907FEFE, 0x020C08FB);
	r6 = D(r6, s1_0_1, 0xE10100F3, 0xEA2A02F9, 0xFB04FFFC, 0xFEF60AFE);
	r7 = D(r7, s1_0_1, 0x1A130B02, 0x021AF3F7, 0x0403050B, 0x0624F108);
	r0 = D(r0, s1_0_2, 0xF8020009, 0x050404FF, 0xF70C01FE, 0x0FF70803);
	r1 = D(r1, s1_0_2, 0xFB01E4ED, 0xFBE414FB, 0xF003F2FE, 0xE7F7F90E);
	r2 = D(r2, s1_0_2, 0x040AFA00, 0x05070AF9, 0xFEFFFFFD, 0xF9F9FDF5);
	r3 = D(r3, s1_0_2, 0xFD01F900, 0xFCFDF707, 0xFFF3FFFF, 0x06FFFCF9);
	r4 = D(r4, s1_0_2, 0x0F0D1004, 0x0AF5FD03, 0xFFEBE5F3, 0x0A08EBF6);
	r5 = D(r5, s1_0_2, 0x070807FC, 0xF9010A08, 0x08030409, 0xFBF80103);
	r6 = D(r6, s1_0_2, 0x09FF0003, 0xECF8F1F5, 0xFD04FC00, 0xF7FF0400);
	r7 = D(r7, s1_0_2, 0x0CFBF0F7, 0x030EEBF8, 0x0906FCFF, 0x0009E5FB);
	r0 = D(r0, s1_1_0, 0x08FAFD0C, 0xFA0B15FB, 0xED08FCFB, 0xFDF902FF);
	r1 = D(r1, s1_1_0, 0xD30E0714, 0xE4F71404, 0x00091004, 0x1914D514);
	r2 = D(r2, s1_1_0, 0x05DE1801, 0xEE0E13DF, 0xFE0502F6, 0xEC0600F4);
	r3 = D(r3, s1_1_0, 0xC414F0F4, 0x0B0015EE, 0x090515F9, 0xFAF9FB06);
	r4 = D(r4, s1_1_0, 0xF70F0307, 0x231609E8, 0xFE0412F1, 0xF61CF7F2);
	r5 = D(r5, s1_1_0, 0xEAF5EC07, 0x0323DA1A, 0xEE090406, 0x060AF00D);
	r6 = D(r6, s1_1_0, 0xE602F91C, 0x1902E112, 0x0204FA18, 0x18FB10FA);
	r7 = D(r7, s1_1_0, 0xF8FFFE07, 0x0109F9F7, 0x00F311FF, 0x06FA13FC);
	r0 = D(r0, s1_1_1, 0x0208FAF9, 0xFE0619FA, 0xEDFB17ED, 0x101507FA);
	r1 = D(r1, s1_1_1, 0xC630360F, 0xFA3D0FB7, 0xE7E5EBE5, 0xF4FCEC54);
	r2 = D(r2, s1_1_1, 0xF7BE0322, 0xFD2004FD, 0x18240903, 0x0401F4F7);
	r3 = D(r3, s1_1_1, 0x0D1007E0, 0x2710F100, 0x00C31EEB, 0x1F0F1F05);
	r4 = D(r4, s1_1_1, 0x03F1F9F2, 0xDBF9F7F3, 0xE8DBEDD7, 0xDEF10FF5);
	r5 = D(r5, s1_1_1, 0xE00B0AFC, 0xDD02EAFA, 0xF9CA2304, 0xEEDD0D0D);
	r6 = D(r6, s1_1_1, 0xFCFA04F9, 0xD5D5FE13, 0xEBF7FFFF, 0x02EAED1C);
	r7 = D(r7, s1_1_1, 0xE80C0CF2, 0xE0CB0102, 0xEFE2E609, 0x0AEE0514);
	r0 = D(r0, s1_1_2, 0xFB020209, 0xF40A1107, 0x0304FF06, 0xF3FD080B);
	r1 = D(r1, s1_1_2, 0xD8F2ED17, 0xFD1E020A, 0x0DFFE5FE, 0x1212DFFC);
	r2 = D(r2, s1_1_2, 0x0F0805FA, 0xFB05FC0F, 0xFB150507, 0xF20309F4);
	r3 = D(r3, s1_1_2, 0x110504FC, 0xF403FB02, 0xF9F60C0F, 0xF3FE0403);
	r4 = D(r4, s1_1_2, 0xED0E0A0B, 0xF1050004, 0x2508F118, 0xF1FFEAFF);
	r5 = D(r5, s1_1_2, 0xF7FCF3FE, 0x02060005, 0x0BF709F9, 0x0CFFFDFF);
	r6 = D(r6, s1_1_2, 0x0709FDFC, 0x280C05FC, 0x0B00FF04, 0x04030D0A);
	r7 = D(r7, s1_1_2, 0x04160BFE, 0x0C100302, 0xFB07F8F4, 0x140D01EC);
	r0 = D(r0, s1_2_0, 0xEF070EFE, 0x05000700, 0xF8040907, 0xF90307F3);
	r1 = D(r1, s1_2_0, 0x44EBFD05, 0xFF0DFE0B, 0x0707F7EE, 0xFA06F80B);
	r2 = D(r2, s1_2_0, 0xFEEF1101, 0xFFF903FE, 0xFC02FEF5, 0xFDFE05F9);
	r3 = D(r3, s1_2_0, 0xEE090225, 0x00F90EFF, 0xF61203FF, 0xFD010010);
	r4 = D(r4, s1_2_0, 0xF40F07FC, 0x010DFEEF, 0xF7F8011A, 0xEF12FEF4);
	r5 = D(r5, s1_2_0, 0xFF0DEB10, 0xF702F5FD, 0xF60508F3, 0xF005FEFF);
	r6 = D(r6, s1_2_0, 0x03F7FD03, 0x060AEA00, 0xFAF704FD, 0x0DF80001);
	r7 = D(r7, s1_2_0, 0xFC07FCFB, 0xF41103FE, 0x06FBFEF8, 0x05F507FD);
	r0 = D(r0, s1_2_1, 0xF8021AFF, 0xECF9130E, 0xFEF30B10, 0x08F50A02);
	r1 = D(r1, s1_2_1, 0xE5EDF90F, 0x0EFE0C0B, 0x0505F2F5, 0xF611FCE8);
	r2 = D(r2, s1_2_1, 0xF90AFAE2, 0xFBF5F80F, 0x00F50205, 0x12020006);
	r3 = D(r3, s1_2_1, 0x04E20D1C, 0xFBF51013, 0xFB14FAF2, 0xEC070C05);
	r4 = D(r4, s1_2_1, 0xF6F6010F, 0xFD02F5FC, 0xE9F50627, 0xF5030BF6);
	r5 = D(r5, s1_2_1, 0x19F3ED0C, 0x22F104E0, 0x020E03E2, 0x0F07F8D7);
	r6 = D(r6, s1_2_1, 0xF00A0BE6, 0xFFFDFDF7, 0xFEFA05F7, 0x01EF0802);
	r7 = D(r7, s1_2_1, 0xFB02FE10, 0x060D05F4, 0xFCF2F30D, 0xFC05FEF5);
	r0 = D(r0, s1_2_2, 0xF309FE0B, 0xFFF9080C, 0xF4FD0304, 0xF2030616);
	r1 = D(r1, s1_2_2, 0x0B0121F4, 0xEBF9FF04, 0x20F1FFEA, 0x1AFC00DF);
	r2 = D(r2, s1_2_2, 0xEE0DFAFF, 0xFBF409F4, 0xEB0F0100, 0xF9FC010B);
	r3 = D(r3, s1_2_2, 0xF3F3FE09, 0x04EA0514, 0xFB060009, 0x0904FDFE);
	r4 = D(r4, s1_2_2, 0xFC0003FC, 0x0D09F5FA, 0x0B07F0D9, 0x02FBFF25);
	r5 = D(r5, s1_2_2, 0x09F4FD02, 0xFD0009F6, 0xF00EEF14, 0xF4FF00F3);
	r6 = D(r6, s1_2_2, 0x0EFA02F8, 0xEE0703D7, 0xF7FB05FF, 0x07F802F9);
	r7 = D(r7, s1_2_2, 0x07FD00F9, 0xF80DFCEF, 0x0DF0FBF9, 0xFBF000FF);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF040B0C, 0xF8FB03FE, 0x03E90512, 0xF103020D);
	r1 = D(r1, s0_0_0, 0xDCBE1211, 0x20000BF3, 0x03F504F9, 0x04FE1D02);
	r2 = D(r2, s0_0_0, 0xFBFCFBFB, 0x0C00F106, 0xFE1500E7, 0x05FFFFF0);
	r3 = D(r3, s0_0_0, 0xEFED08E4, 0x050EFBFA, 0xF6060603, 0xFAFF0B04);
	r4 = D(r4, s0_0_0, 0xF7EC111E, 0x16F9F0F7, 0xEEDE04C9, 0xE51203FC);
	r5 = D(r5, s0_0_0, 0x0CFF02FF, 0xF9080CEE, 0x000AFF01, 0xFD0516FF);
	r6 = D(r6, s0_0_0, 0xFAFF0B07, 0x02E7F805, 0xF7FCFF01, 0x020003E4);
	r7 = D(r7, s0_0_0, 0xF9000807, 0xF8E7FDF8, 0x02FBFEFD, 0xFD05ED03);
	r0 = D(r0, s0_0_1, 0x11F80807, 0x01FD0505, 0x0001020F, 0xF7FF021E);
	r1 = D(r1, s0_0_1, 0x101F0EEA, 0x240E05C9, 0xF9FC09E6, 0xFB08FEFF);
	r2 = D(r2, s0_0_1, 0xF30D18ED, 0xFAFB1EFC, 0x0AFF05F2, 0x03F2F7F4);
	r3 = D(r3, s0_0_1, 0xF70001EF, 0x01F1F9F2, 0x0FFE0405, 0x0A0C0016);
	r4 = D(r4, s0_0_1, 0xF805171C, 0xD504F209, 0xF40018D0, 0x19F8F00D);
	r5 = D(r5, s0_0_1, 0xFD08F402, 0x0307F8F8, 0xEF040DF4, 0xF41505FA);
	r6 = D(r6, s0_0_1, 0xF50D081A, 0xEA2801E3, 0xFD05FD04, 0xF9F606D5);
	r7 = D(r7, s0_0_1, 0xFE03F904, 0xECF300FF, 0xF3FD00EE, 0x0201F319);
	r0 = D(r0, s0_0_2, 0xFBFD0E0A, 0x0707FAED, 0xFB000500, 0xF90B040B);
	r1 = D(r1, s0_0_2, 0xC71B2558, 0xF4110013, 0xFDF81602, 0x0DF80203);
	r2 = D(r2, s0_0_2, 0xFE070814, 0xF5FB09FD, 0xF505FD0B, 0xFB09F7F4);
	r3 = D(r3, s0_0_2, 0x08F906F3, 0x050103F5, 0xF9FF020E, 0x03FAFA12);
	r4 = D(r4, s0_0_2, 0xFAF71C1F, 0x02160B02, 0xC822F102, 0xAE0F0914);
	r5 = D(r5, s0_0_2, 0x0B07FEF8, 0x070202F5, 0x050D030C, 0x01FCFE04);
	r6 = D(r6, s0_0_2, 0x0305FC07, 0x0406030D, 0xFFFC0201, 0xFFF8FC02);
	r7 = D(r7, s0_0_2, 0xFC000805, 0xFE091410, 0x060BFAF3, 0xFF10F806);
	r0 = D(r0, s0_1_0, 0xF9030EFF, 0x08FD14FA, 0x01071500, 0xF0070106);
	r1 = D(r1, s0_1_0, 0xFB100181, 0x06FDF312, 0xFFF10EFB, 0xF9E8CCFB);
	r2 = D(r2, s0_1_0, 0x06E217FE, 0x0A03FF01, 0xF017FCF8, 0x0104F905);
	r3 = D(r3, s0_1_0, 0x0228C709, 0x0E080507, 0x0CF50CF6, 0xFD0FF903);
	r4 = D(r4, s0_1_0, 0xE6052003, 0x110EF6F8, 0xF40816D4, 0xDC032BF0);
	r5 = D(r5, s0_1_0, 0xFC0DF011, 0x06E0DAF4, 0xF2080F07, 0x0CFAEBF7);
	r6 = D(r6, s0_1_0, 0xFA010700, 0xFCE902FC, 0x08F2FBFB, 0x0800DC02);
	r7 = D(r7, s0_1_0, 0xF3030105, 0x0511E9FC, 0x12E61404, 0x02F71401);
	r0 = D(r0, s0_1_1, 0xF8F51713, 0x2EF908FB, 0xFDED1411, 0xFCF80CFA);
	r1 = D(r1, s0_1_1, 0x300107F8, 0x0504091A, 0x0B19E308, 0xECF8D70A);
	r2 = D(r2, s0_1_1, 0x061C02E0, 0x0AEA06FD, 0xEA0512F3, 0x0304EEF7);
	r3 = D(r3, s0_1_1, 0xF6EB09E1, 0x00F7EBED, 0x081518F7, 0x0101320C);
	r4 = D(r4, s0_1_1, 0xFDF0F2F6, 0xDBF807FD, 0x0DF1F2CA, 0x1AE2CD09);
	r5 = D(r5, s0_1_1, 0x0EF70C13, 0xF0FC0D10, 0x1C03260F, 0xEA11000F);
	r6 = D(r6, s0_1_1, 0xF9060F10, 0xE5FB1411, 0xFE02FB0E, 0xFE1A0D24);
	r7 = D(r7, s0_1_1, 0xF90C2111, 0xEF0C0E09, 0x0A0EF9E7, 0xFB0FFCFC);
	r0 = D(r0, s0_1_2, 0xF7F715FD, 0x2B07070A, 0x00F50F1D, 0xF9FEFD15);
	r1 = D(r1, s0_1_2, 0xE3D42409, 0x1FFADE04, 0xD5050605, 0xE9FFEB06);
	r2 = D(r2, s0_1_2, 0xFD0DFEF1, 0xFBF4FE28, 0xF9EF000B, 0x05F2F6F2);
	r3 = D(r3, s0_1_2, 0x02EA0A0B, 0x02F30CF4, 0x0EF90326, 0xF707F808);
	r4 = D(r4, s0_1_2, 0xF7F90904, 0xE2C9FE27, 0xDCFCE7D3, 0xF01DEDDB);
	r5 = D(r5, s0_1_2, 0xF7F4020F, 0x13FCF6F4, 0x1106FBF0, 0xF9050610);
	r6 = D(r6, s0_1_2, 0xFB04EDFA, 0xFA14EE09, 0xFC000604, 0x0A11F4F7);
	r7 = D(r7, s0_1_2, 0xF0FE0008, 0xEB14F7E8, 0x08FFEFEF, 0xF5FBFFFF);
	r0 = D(r0, s0_2_0, 0xF5000503, 0xFD02F601, 0x03FDFC01, 0xFA0BFF09);
	r1 = D(r1, s0_2_0, 0x2719FD11, 0xFE04F206, 0x06F4EFFE, 0x00FCF003);
	r2 = D(r2, s0_2_0, 0xF3FEFBFE, 0x08FBE4FF, 0x03FD0702, 0x0802FFF8);
	r3 = D(r3, s0_2_0, 0x100BE4FB, 0x0BFF02FC, 0x0201FB05, 0x040AF800);
	r4 = D(r4, s0_2_0, 0xFAFF10FB, 0x0809FA01, 0xFC00EFEA, 0xDE04F707);
	r5 = D(r5, s0_2_0, 0xEAFCFFF5, 0x000D02F8, 0x020B14FB, 0xEB0109FB);
	r6 = D(r6, s0_2_0, 0x02FC0A02, 0x01FDEEFB, 0x03FF0000, 0x03FFF5FE);
	r7 = D(r7, s0_2_0, 0xF6FCF405, 0x02050906, 0x0DF903FC, 0xFEF70D02);
	r0 = D(r0, s0_2_1, 0xE6000C10, 0x0507FE00, 0xF00B0507, 0x04F70901);
	r1 = D(r1, s0_2_1, 0x17F0D8EB, 0xDEFC0604, 0x030DFEFF, 0xEBE21808);
	r2 = D(r2, s0_2_1, 0x3223E3E9, 0x00FD1503, 0x141BE905, 0x0B18DFFF);
	r3 = D(r3, s0_2_1, 0xF7030706, 0x10040602, 0x0100FBFB, 0xEFEC0401);
	r4 = D(r4, s0_2_1, 0xE9FC0D0A, 0x0EF5F705, 0xED072BF2, 0x0BF1CFFD);
	r5 = D(r5, s0_2_1, 0xE1E00E0B, 0xDCE002F8, 0x0EEDEBF2, 0xF7ED05F5);
	r6 = D(r6, s0_2_1, 0xFDFB0FFE, 0xEEFD2A03, 0xFF0601FA, 0xFD030600);
	r7 = D(r7, s0_2_1, 0xFBFFFAFE, 0xF5FE0708, 0x10F8E9F3, 0x1413FCF4);
	r0 = D(r0, s0_2_2, 0xF9030602, 0x0C03F800, 0xF702090A, 0xFC0F090D);
	r1 = D(r1, s0_2_2, 0xF4EAF224, 0xE9FE0E14, 0xE8D206FE, 0xF2E600F9);
	r2 = D(r2, s0_2_2, 0x1312F4F2, 0xEDE32104, 0x050906F9, 0x0615F601);
	r3 = D(r3, s0_2_2, 0xF8090C03, 0x0AFA0500, 0xF3F30105, 0x03FDE504);
	r4 = D(r4, s0_2_2, 0xF9FC0A03, 0xEBDD0500, 0xE7F20804, 0xF90CF209);
	r5 = D(r5, s0_2_2, 0xEAEA0809, 0xFFF0F107, 0x100AF2EF, 0xF0EE14FF);
	r6 = D(r6, s0_2_2, 0x04F80102, 0x11F3FFFD, 0x0604FC04, 0xFFFDF7FF);
	r7 = D(r7, s0_2_2, 0xFAFA0004, 0x0EF3FBFA, 0x07FBFAFA, 0x020DFCFB);
	r0 = D(r0, s1_0_0, 0x05EB08F5, 0x0A0D070B, 0xF5F4F8F5, 0xFD04FBFE);
	r1 = D(r1, s1_0_0, 0xECE2DDFB, 0x273DED29, 0xF4FDFE05, 0xF70803FF);
	r2 = D(r2, s1_0_0, 0x19F3F803, 0xF9FE07FC, 0x1CFF0E09, 0xF9FBFDFE);
	r3 = D(r3, s1_0_0, 0x07061318, 0x100B0CF3, 0x0705FAFF, 0xFF00FAFD);
	r4 = D(r4, s1_0_0, 0xF310E1BE, 0x14121705, 0xD8020ACC, 0xE0EBF2E1);
	r5 = D(r5, s1_0_0, 0xEF04F2FE, 0x00FEFF02, 0xFDF7F506, 0x08F9FAFB);
	r6 = D(r6, s1_0_0, 0x05F5EE06, 0x0009F6FE, 0xFCFB0309, 0x0B080AF9);
	r7 = D(r7, s1_0_0, 0x04F302FD, 0xFFD4F7E6, 0xEA0B0501, 0x0EFFFD01);
	r0 = D(r0, s1_0_1, 0x0502FCF4, 0x17000AFD, 0xF604E317, 0x08030000);
	r1 = D(r1, s1_0_1, 0x3E0240E7, 0x1B2B26F2, 0x1405F7F8, 0x130F1BE7);
	r2 = D(r2, s1_0_1, 0x07EA1801, 0xFEF8FBFA, 0xEE0EF80A, 0xD902EF05);
	r3 = D(r3, s1_0_1, 0x0A000721, 0xF8FE08E4, 0x13080DE9, 0xF8FF0FF1);
	r4 = D(r4, s1_0_1, 0x1A0F0B1A, 0xFAF2F219, 0x15FFECD7, 0xE9FCDA03);
	r5 = D(r5, s1_0_1, 0xDE01FD18, 0xEE090A11, 0x0AFEFBFB, 0xFBF716F6);
	r6 = D(r6, s1_0_1, 0xFCF41302, 0xF0E31913, 0xFC0206F7, 0xEEEF12D7);
	r7 = D(r7, s1_0_1, 0xEA09E71E, 0xD4F2B702, 0xFFF7F5F2, 0x0F09EB1A);
	r0 = D(r0, s1_0_2, 0x07F604F6, 0x0D04FBFC, 0xF7FF04F9, 0xF9F8FAED);
	r1 = D(r1, s1_0_2, 0x11DF0928, 0x2F05051C, 0xF90AFCF9, 0x060411FF);
	r2 = D(r2, s1_0_2, 0x02020D11, 0xFAF90DEB, 0xFB0406F6, 0x0C05FB0C);
	r3 = D(r3, s1_0_2, 0xF0F90FF4, 0xFD00F3FF, 0x0E02FD09, 0x0501FD07);
	r4 = D(r4, s1_0_2, 0x01F4F404, 0x12F30713, 0xEAF118FD, 0x0EF1EDEC);
	r5 = D(r5, s1_0_2, 0x01FDF8FE, 0xFD02F903, 0xFE02FF00, 0x00070304);
	r6 = D(r6, s1_0_2, 0xFF030207, 0x0A0816F9, 0x00FFFEFE, 0x09FF0404);
	r7 = D(r7, s1_0_2, 0xFDFAF6FF, 0xE7FBE9FB, 0x0B06F10A, 0xF205FAFE);
	r0 = D(r0, s1_1_0, 0x17E603F7, 0x0509FFFC, 0x0DD602E9, 0xEFFFFE01);
	r1 = D(r1, s1_1_0, 0xF1B9E9DD, 0xFA240727, 0x05F60408, 0xFBF9F705);
	r2 = D(r2, s1_1_0, 0xF4F3F9F3, 0xECE81DFD, 0x09150F07, 0x09030C04);
	r3 = D(r3, s1_1_0, 0x20F814FD, 0x080B0708, 0xFA090208, 0x040B0308);
	r4 = D(r4, s1_1_0, 0xE90AD90D, 0x0A0802EE, 0xF5D9F7F8, 0xF9B0F1E9);
	r5 = D(r5, s1_1_0, 0x1EFE06FA, 0x0BFDFBFC, 0x06F2F2FC, 0xFCFE01E6);
	r6 = D(r6, s1_1_0, 0x0607F6EA, 0xF9FDF7E3, 0x0002F8FA, 0x02161913);
	r7 = D(r7, s1_1_0, 0x06F6FA00, 0x11E7E8F4, 0xEB07FEF2, 0xF601F7FC);
	r0 = D(r0, s1_1_1, 0x20F420FE, 0x1F0ADFDE, 0x17FD19FF, 0x0005010E);
	r1 = D(r1, s1_1_1, 0xC9FE0EED, 0x102F0EF4, 0x22FE12FC, 0xCFF2FFE9);
	r2 = D(r2, s1_1_1, 0xF9FBF90E, 0xFDF70707, 0xF4F7FC0D, 0xE90607EE);
	r3 = D(r3, s1_1_1, 0xE0F7E205, 0xEF01FEFB, 0x150F17F8, 0xEEEF00F5);
	r4 = D(r4, s1_1_1, 0x2A0C1100, 0x9FE9DEF6, 0xDEF7F81A, 0xE3F917C2);
	r5 = D(r5, s1_1_1, 0x07F913FF, 0xE9E60629, 0xEEFFF8E5, 0x05FDF71B);
	r6 = D(r6, s1_1_1, 0xFCF6F3FE, 0x0BEFFB13, 0x05F80515, 0xFBE5060B);
	r7 = D(r7, s1_1_1, 0x07D4E60A, 0xEE09E5FE, 0xF8F10AF7, 0xEFEDEA24);
	r0 = D(r0, s1_1_2, 0x07FDFDF6, 0x1110FBE1, 0x04FDF9FA, 0xFB0AF907);
	r1 = D(r1, s1_1_2, 0xDCB1F2BE, 0x181D2901, 0xEAF4FD0D, 0xDBF5EC24);
	r2 = D(r2, s1_1_2, 0x05F7F504, 0xF5F0EF12, 0xF00701F7, 0x0E070BFC);
	r3 = D(r3, s1_1_2, 0x00EE1110, 0x0BFF0AFA, 0x1505FE00, 0x05F80704);
	r4 = D(r4, s1_1_2, 0xF106FE00, 0x041924F9, 0xFDF0F8F6, 0x1107F1EB);
	r5 = D(r5, s1_1_2, 0x2207060D, 0x191007EE, 0xFB05030C, 0xF902FCF5);
	r6 = D(r6, s1_1_2, 0xFAF7FB0F, 0x08FFF9E6, 0x00FD0005, 0xF9F80E04);
	r7 = D(r7, s1_1_2, 0xFC05EC0B, 0x0D05EE03, 0x090A09F0, 0xF8FDF40A);
	r0 = D(r0, s1_2_0, 0x0EF8F9F5, 0xFF080807, 0x0A01F4F6, 0x0F090500);
	r1 = D(r1, s1_2_0, 0xFD101DE6, 0x12F700F4, 0x00F5FF0C, 0xF70101FF);
	r2 = D(r2, s1_2_0, 0xF2FC0D03, 0x05E5F7F1, 0x03EDF700, 0xF8EB06F5);
	r3 = D(r3, s1_2_0, 0x11F8FCE8, 0x0B0306FD, 0xFDF5020F, 0x0B05FEF7);
	r4 = D(r4, s1_2_0, 0x0C08F2ED, 0xF5E10405, 0x16171500, 0xE4FAF205);
	r5 = D(r5, s1_2_0, 0xFA0A0ED0, 0xE21E0D09, 0xF00AFB03, 0xE9100D17);
	r6 = D(r6, s1_2_0, 0xFD03F5FF, 0x0219FE0D, 0x030CFD05, 0x0DF5FEFE);
	r7 = D(r7, s1_2_0, 0x04EA0700, 0xFDEA0402, 0xEEF614FB, 0xF8F5120C);
	r0 = D(r0, s1_2_1, 0x0EF1FCFB, 0x0EF5010A, 0x0001ED09, 0x01050602);
	r1 = D(r1, s1_2_1, 0x31F1EAE2, 0x2320F716, 0xFCFF00EE, 0xFFD3F6CD);
	r2 = D(r2, s1_2_1, 0x0DFC32DB, 0x00FEF9FC, 0x0C0C11FA, 0xF610FA01);
	r3 = D(r3, s1_2_1, 0xF60FDBEE, 0xFB0001EB, 0x090209FD, 0xF1EE0512);
	r4 = D(r4, s1_2_1, 0x0FEDFD00, 0x282C0EFE, 0x07F0FFF9, 0xF1E50DF1);
	r5 = D(r5, s1_2_1, 0xCDF5F014, 0xE8031018, 0x00F825DB, 0xFB0704FD);
	r6 = D(r6, s1_2_1, 0x05040900, 0x1C00EAFB, 0x0707F802, 0x02EEFFF7);
	r7 = D(r7, s1_2_1, 0xFD02FD08, 0xFAE2EE0B, 0x110120EE, 0x1F010DF8);
	r0 = D(r0, s1_2_2, 0xFAF20602, 0xF2F60809, 0xF8F7F40E, 0xFCFEDF07);
	r1 = D(r1, s1_2_2, 0x10F1FAE4, 0x030DD823, 0x0506F1E0, 0x05F0F7F6);
	r2 = D(r2, s1_2_2, 0x1B090BEC, 0xF3E7F409, 0xEE06F206, 0x0402F804);
	r3 = D(r3, s1_2_2, 0xFA0DF7F3, 0xFBFCF7F3, 0xF4F1F518, 0x09FD0F07);
	r4 = D(r4, s1_2_2, 0x03F6F3FF, 0x1309EAF6, 0x02F0F4FE, 0x02F6F5E3);
	r5 = D(r5, s1_2_2, 0xE1FDDD26, 0xF9F80318, 0x0E0C18EC, 0xF4FCF70A);
	r6 = D(r6, s1_2_2, 0x0E0405F8, 0xF8F8FFED, 0x03FB00FC, 0x00F1FA06);
	r7 = D(r7, s1_2_2, 0xF3FDF502, 0x09FD28F4, 0xFCF5FEF4, 0xFA0EFC00);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFD0401F9, 0xFA06FA04, 0xFEFB070F, 0xFF02F909);
	r1 = D(r1, s0_0_0, 0x1720FEE1, 0x05FC041E, 0xFA050602, 0x0D060EF8);
	r2 = D(r2, s0_0_0, 0x040A03E9, 0xFDF1FD05, 0x00FAF1F4, 0x05F50E03);
	r3 = D(r3, s0_0_0, 0xF9EE0013, 0xF5050800, 0xFB07FDFC, 0xFE020105);
	r4 = D(r4, s0_0_0, 0x20140308, 0x02ED1BDF, 0xE32CFC14, 0xEB1FFFF4);
	r5 = D(r5, s0_0_0, 0xF4FC0603, 0x08FCF6FE, 0xFF0FF50F, 0x08FAF805);
	r6 = D(r6, s0_0_0, 0x08FBF5FF, 0x010DFA00, 0xFFFDF8FB, 0xF50105FB);
	r7 = D(r7, s0_0_0, 0xF90900FF, 0xFD03F80E, 0xFB050B07, 0xF706FCEC);
	r0 = D(r0, s0_0_1, 0x06F9FC0D, 0xF412FF19, 0x11FAF816, 0x03F30A12);
	r1 = D(r1, s0_0_1, 0x813C175F, 0xECF10E12, 0x03F50FF8, 0x0DE800C0);
	r2 = D(r2, s0_0_1, 0x0209EFDD, 0xFE0EFD07, 0x0407ECFB, 0x020C08FD);
	r3 = D(r3, s0_0_1, 0x01F611EF, 0xFFFC04F1, 0x0200F70B, 0x0808FF01);
	r4 = D(r4, s0_0_1, 0xFD040516, 0xBE48C0E8, 0x03010902, 0xF704F812);
	r5 = D(r5, s0_0_1, 0xF7FA060F, 0xE9070300, 0x0A0801FC, 0xF9F0F2F0);
	r6 = D(r6, s0_0_1, 0xEC030600, 0xF0FDF8EA, 0xFE01F700, 0xFDFD1BE5);
	r7 = D(r7, s0_0_1, 0x01F50801, 0x100004E9, 0xF8090AF5, 0xFA01E9E1);
	r0 = D(r0, s0_0_2, 0x08EE0700, 0xFDFF0202, 0x0FFBFCFB, 0x1001F70C);
	r1 = D(r1, s0_0_2, 0x8128110F, 0xFCF20906, 0xF9F4ECF5, 0xFDF72308);
	r2 = D(r2, s0_0_2, 0xE30AFBFA, 0xFAF709FB, 0x01060401, 0x0AF6FE03);
	r3 = D(r3, s0_0_2, 0x0BFFFBEB, 0x03FF02F8, 0xFEFB0605, 0x030A0111);
	r4 = D(r4, s0_0_2, 0x1709FEF6, 0xE312E10B, 0xCC07EAF1, 0xFFF3F8FA);
	r5 = D(r5, s0_0_2, 0x13F6F9FD, 0xFFF80308, 0x0101F50E, 0xF90103F9);
	r6 = D(r6, s0_0_2, 0xF606F600, 0xBE0DFAFE, 0x00F8F8FF, 0xF8FEFAFA);
	r7 = D(r7, s0_0_2, 0x0300090B, 0xE60AECE7, 0x07FCF5FE, 0xF305F903);
	r0 = D(r0, s0_1_0, 0x07EBF1F3, 0x020C0201, 0x15F9F1FE, 0x0E06FF13);
	r1 = D(r1, s0_1_0, 0xE51D060A, 0xFB15F0EB, 0x09FC04EF, 0xDEE8FEF9);
	r2 = D(r2, s0_1_0, 0xF6FDFC00, 0x0BFF0203, 0xCC07E5DA, 0xF8F9FEFE);
	r3 = D(r3, s0_1_0, 0xE3F9FB14, 0xF2F900F8, 0xFC090205, 0xF60405FE);
	r4 = D(r4, s0_1_0, 0x2708F429, 0x09F90BF1, 0xEF0518F9, 0x0819F10A);
	r5 = D(r5, s0_1_0, 0x04F202E0, 0xF2E004FB, 0xF80CF205, 0x08F1FD06);
	r6 = D(r6, s0_1_0, 0xF10F03FE, 0xFAF9FFED, 0x0A010108, 0xEFE80BF3);
	r7 = D(r7, s0_1_0, 0x020400ED, 0xEFFB0E04, 0x0C090E0B, 0xEF0D09FB);
	r0 = D(r0, s0_1_1, 0xFFFAFE08, 0xFA161012, 0xF1FEF005, 0x07080929);
	r1 = D(r1, s0_1_1, 0x0DEC1EDB, 0xDB06ED1E, 0xFAF305EF, 0xDDEDEED9);
	r2 = D(r2, s0_1_1, 0x12FB14F0, 0xF0FA09FB, 0xEFFCD1F9, 0x0F01D908);
	r3 = D(r3, s0_1_1, 0xEAF3E6DD, 0x05FFE414, 0x0AF80312, 0x19100707);
	r4 = D(r4, s0_1_1, 0x0F18ED0E, 0x810692C9, 0x08F8FD15, 0x140E05FB);
	r5 = D(r5, s0_1_1, 0xDF0B09CF, 0x9D05FBE0, 0x001509CF, 0xCFE10BEC);
	r6 = D(r6, s0_1_1, 0xF8FC11EF, 0xDF1B02DB, 0xF1011DF5, 0x04F907EE);
	r7 = D(r7, s0_1_1, 0xEA0B06D2, 0xE7030385, 0xF5111702, 0xEFFD06BF);
	r0 = D(r0, s0_1_2, 0x0F04070C, 0x130007FE, 0x0FFE00EF, 0x1408ED0D);
	r1 = D(r1, s0_1_2, 0xC6F5D4E3, 0xDC1D090A, 0xF2EFD7E4, 0xDBFADF09);
	r2 = D(r2, s0_1_2, 0x09FD01FC, 0xFBF3FAE2, 0xFF030F06, 0x03F50DF6);
	r3 = D(r3, s0_1_2, 0xF70BFFF2, 0x010404F8, 0x0CFEF51A, 0x0D0BE107);
	r4 = D(r4, s0_1_2, 0xFF05071B, 0xD817AA03, 0xF603DD1A, 0x11FDCFF7);
	r5 = D(r5, s0_1_2, 0xEB0B0913, 0xE6F2150A, 0x1AF9EFFC, 0xFB03FAFC);
	r6 = D(r6, s0_1_2, 0xFD08FAFB, 0xBC20FF1A, 0xFD00F9FD, 0x01F90BFD);
	r7 = D(r7, s0_1_2, 0xED14D714, 0x090F2905, 0xF5FF0F02, 0xFBFBF4FC);
	r0 = D(r0, s0_2_0, 0x0301F407, 0x0104FE06, 0x0AFFEF00, 0x06FDFA0C);
	r1 = D(r1, s0_2_0, 0x4308F0C1, 0xF0FE07F8, 0x02EF19EE, 0xEB090301);
	r2 = D(r2, s0_2_0, 0x0D04F702, 0x05EBFCF7, 0xF8FAFEFE, 0xEFFC08F8);
	r3 = D(r3, s0_2_0, 0xFE0F0906, 0xF80403F8, 0x0B080603, 0xFF03FEFE);
	r4 = D(r4, s0_2_0, 0x1303EE14, 0x10F40206, 0x07F6F617, 0x0DF4FDF2);
	r5 = D(r5, s0_2_0, 0xEEF2090A, 0x0D0AF210, 0x0D18FF06, 0x1205F81A);
	r6 = D(r6, s0_2_0, 0xF40DF403, 0xED03E700, 0x0404FC05, 0xFBE900FD);
	r7 = D(r7, s0_2_0, 0xFEFDF707, 0x030BFE03, 0x06F40A00, 0x0C0201F9);
	r0 = D(r0, s0_2_1, 0x0BF50B09, 0x0110F8F7, 0x06FDEFFB, 0x08FEE901);
	r1 = D(r1, s0_2_1, 0xE70CE4EF, 0xEDF6F3FD, 0xF202FBF8, 0xE0FE1102);
	r2 = D(r2, s0_2_1, 0x0FF0FE0A, 0xF0FFEDFB, 0x08FFEDF6, 0x10F503EF);
	r3 = D(r3, s0_2_1, 0xFB07DCF8, 0x07FC02F9, 0x0F0CF813, 0x0C04FB13);
	r4 = D(r4, s0_2_1, 0xFE00FE06, 0xD70EFE03, 0xF916FEA7, 0x0BF5DBFF);
	r5 = D(r5, s0_2_1, 0xE7EFFFE7, 0xDDF8FCFE, 0x07FA0207, 0xFCF70019);
	r6 = D(r6, s0_2_1, 0x0708080B, 0xF419F3E5, 0xFDFDFD03, 0x02F9FA0A);
	r7 = D(r7, s0_2_1, 0xF703FAF7, 0x03FF03F8, 0x0106FA08, 0xFD030CF9);
	r0 = D(r0, s0_2_2, 0x03F90102, 0x04F90AFF, 0x03FC0B00, 0x080A0305);
	r1 = D(r1, s0_2_2, 0x1133D6DA, 0xE40C0206, 0xF70CD803, 0x05FC05E8);
	r2 = D(r2, s0_2_2, 0x0EFCFEFB, 0x070AFDFC, 0x0AFC0002, 0x0AF8FFFF);
	r3 = D(r3, s0_2_2, 0x1D0322F6, 0xFCFE07F2, 0xF8FEFB01, 0xFFFCF509);
	r4 = D(r4, s0_2_2, 0xFDF4FC07, 0xEC05E4F7, 0x101FE0F8, 0xFEFEF3FC);
	r5 = D(r5, s0_2_2, 0x07FAEFF2, 0xF9F5FD02, 0x08FDFAFF, 0x0501FD03);
	r6 = D(r6, s0_2_2, 0xF90B03FB, 0x01F806FE, 0x04FEFFFE, 0x0208F9F9);
	r7 = D(r7, s0_2_2, 0xFF0EFF01, 0x0EF3FA00, 0xFC08FFFA, 0xFEFEFDED);
	r0 = D(r0, s1_0_0, 0x0100F100, 0x05FE0FFB, 0x1FF7FD00, 0x0CF8E4F9);
	r1 = D(r1, s1_0_0, 0xDEFBFC18, 0x0C1C13FD, 0x160000F7, 0xF30C08FC);
	r2 = D(r2, s1_0_0, 0xE70E0C02, 0x0EEBFA04, 0xD2E9FD01, 0xF6F806F9);
	r3 = D(r3, s1_0_0, 0xF9EAF330, 0xFD01ECFE, 0xFFFBF800, 0xF8080000);
	r4 = D(r4, s1_0_0, 0x1CF5C5FB, 0x1508E42E, 0x1BF00DEF, 0x1A810F0C);
	r5 = D(r5, s1_0_0, 0x0808FB04, 0xEDF314F4, 0x09F30CFF, 0x030403F0);
	r6 = D(r6, s1_0_0, 0xF62306FF, 0xE4080F0B, 0xF8120705, 0xE6F719FD);
	r7 = D(r7, s1_0_0, 0x07FAFDFD, 0x0DF40401, 0x061009FF, 0xFAFDE002);
	r0 = D(r0, s1_0_1, 0x1203EDFD, 0x07FDFBFE, 0xF406F815, 0xF309F407);
	r1 = D(r1, s1_0_1, 0x81C7CA04, 0x16F1F60A, 0xF1FC05FB, 0x0F07EFD7);
	r2 = D(r2, s1_0_1, 0xE0F3100B, 0x0FF30AE5, 0xEEF007F9, 0x10FB0C0F);
	r3 = D(r3, s1_0_1, 0xE716FA02, 0x02F0050C, 0x16F001F1, 0x0CFDFDFD);
	r4 = D(r4, s1_0_1, 0x02040F03, 0xF4FC17F2, 0xFBFAE7F6, 0x21E119EC);
	r5 = D(r5, s1_0_1, 0x03100609, 0x0B03F1E5, 0xE5F7FF03, 0x00FEF7ED);
	r6 = D(r6, s1_0_1, 0x0D15FCFC, 0xD80E0805, 0x0401FE02, 0x000DF7E7);
	r7 = D(r7, s1_0_1, 0xF7041104, 0xD5FA1B1A, 0x030B0B01, 0xF4060BF6);
	r0 = D(r0, s1_0_2, 0xFE06F403, 0xFE00FDFE, 0x0304F7F8, 0x06FCFBF2);
	r1 = D(r1, s1_0_2, 0xCD40E6DF, 0xF5E800FE, 0x0404FA03, 0x0A08F7E0);
	r2 = D(r2, s1_0_2, 0x01FA04FF, 0xFD040AE8, 0x05F40600, 0xF3F90115);
	r3 = D(r3, s1_0_2, 0x09050500, 0xFCF70006, 0x0303F9EA, 0x01F301F8);
	r4 = D(r4, s1_0_2, 0x0B0901E3, 0x00E311E7, 0x0612F314, 0xFCF40B09);
	r5 = D(r5, s1_0_2, 0x01FEFF00, 0xFAF7F4FE, 0xFA0CF800, 0x04FF00EB);
	r6 = D(r6, s1_0_2, 0x000F02FC, 0x06020201, 0xFEFBFF05, 0x01FD0310);
	r7 = D(r7, s1_0_2, 0x060A03F5, 0xF11A0101, 0xF907FF11, 0x05FA09FE);
	r0 = D(r0, s1_1_0, 0xFDFBEEF7, 0x1AEA1304, 0xEA1AE505, 0x0CF3D307);
	r1 = D(r1, s1_1_0, 0xE30EDE29, 0xF6F50BFE, 0xF915F002, 0xF123BFF2);
	r2 = D(r2, s1_1_0, 0xFE04FE03, 0x06D90100, 0xE1F21EFE, 0xF83BFC04);
	r3 = D(r3, s1_1_0, 0xEE060B13, 0xF4E0F3F7, 0x16E31701, 0xF7FDF50D);
	r4 = D(r4, s1_1_0, 0x001FCB0B, 0x16120C00, 0x2406031C, 0x0E8139FF);
	r5 = D(r5, s1_1_0, 0xD0F40803, 0x0739FDED, 0x03FB14F0, 0x0A19DEFA);
	r6 = D(r6, s1_1_0, 0xE42E070B, 0xDB21DF0A, 0x0E2ADBFD, 0x0CD8E4FD);
	r7 = D(r7, s1_1_0, 0xFE04F41D, 0xE316EEFA, 0x0BFE1AF5, 0x07080903);
	r0 = D(r0, s1_1_1, 0x041FFF20, 0x2F0B12E2, 0x07F40603, 0xFA22F5F7);
	r1 = D(r1, s1_1_1, 0xEDE42903, 0x130510E0, 0xEBD70EF5, 0xD827F206);
	r2 = D(r2, s1_1_1, 0xEAF7121C, 0x0CEE0309, 0x07FA0B1C, 0x0FC80CFE);
	r3 = D(r3, s1_1_1, 0xF2FF14FB, 0x23E508F7, 0x1B14FFFE, 0xFB3DE1EC);
	r4 = D(r4, s1_1_1, 0x240D04E9, 0xAAF431F7, 0xF8C029FC, 0x2BF10FEB);
	r5 = D(r5, s1_1_1, 0x1EF9F5CA, 0xF7D909FE, 0xFD0DF7F9, 0xF9ED0F0B);
	r6 = D(r6, s1_1_1, 0xEA16F00E, 0xE0CE361F, 0xF1F4132B, 0xE5FA00FA);
	r7 = D(r7, s1_1_1, 0xD30115F7, 0xF5CD0208, 0x34E601F8, 0xF7FFFDE0);
	r0 = D(r0, s1_1_2, 0xF80CF9FF, 0x0EF7FEEF, 0x0414F7F3, 0x0DF306EA);
	r1 = D(r1, s1_1_2, 0xD51F0BBE, 0x1EF30CE6, 0xDF040520, 0xCEFC0216);
	r2 = D(r2, s1_1_2, 0xF0070401, 0xF608F3ED, 0x0B03F9FD, 0x06EA0AFC);
	r3 = D(r3, s1_1_2, 0xF519F9E4, 0x05FCFFF4, 0xF80EFDEB, 0xF6F7F9FA);
	r4 = D(r4, s1_1_2, 0x150DF510, 0xFDD90DFD, 0x14FA1334, 0x07E60CFB);
	r5 = D(r5, s1_1_2, 0xFDFC0AF3, 0x0FFCFED4, 0x0802F9E1, 0xFC0E05E9);
	r6 = D(r6, s1_1_2, 0xF4FE000B, 0xFD14F107, 0x060300FD, 0xF607FD10);
	r7 = D(r7, s1_1_2, 0xF1EE1514, 0xD203F51A, 0x06ED0914, 0xF7040801);
	r0 = D(r0, s1_2_0, 0xF4F7ED01, 0x040204F6, 0xFE02F903, 0x06F8F5F6);
	r1 = D(r1, s1_2_0, 0x29F01AFD, 0x0006F506, 0x0607F0FC, 0xF902EB15);
	r2 = D(r2, s1_2_0, 0xFAE311F9, 0xFDEE0100, 0x15EC12F3, 0xF90304F9);
	r3 = D(r3, s1_2_0, 0x19F51C02, 0xF6FA0401, 0x0CED0501, 0xFD060104);
	r4 = D(r4, s1_2_0, 0xFC09E6F3, 0x08010DF8, 0xF2EBE7FF, 0x04C327FA);
	r5 = D(r5, s1_2_0, 0xF207D406, 0x0300FA00, 0x15F11DED, 0xFCFAFAFE);
	r6 = D(r6, s1_2_0, 0x07050AFA, 0xF6DD0902, 0x01030304, 0xFD010400);
	r7 = D(r7, s1_2_0, 0x000FF002, 0x07FF03FE, 0xF9F407F4, 0xF9F607F1);
	r0 = D(r0, s1_2_1, 0xF805E301, 0x06EF07F6, 0xFFF7F602, 0x0D0104F7);
	r1 = D(r1, s1_2_1, 0x17F3F747, 0x11FE0F01, 0xF4110608, 0x06FA090D);
	r2 = D(r2, s1_2_1, 0xFB14FDDB, 0x0A0411F6, 0x02F508F7, 0x0AF7FA0C);
	r3 = D(r3, s1_2_1, 0x0214F411, 0xF1FB03F5, 0x17F10B0D, 0x0201FFF9);
	r4 = D(r4, s1_2_1, 0x0103F8F2, 0x0A060DDE, 0x130C100E, 0xF7E409E4);
	r5 = D(r5, s1_2_1, 0x01F5FB1B, 0x1AE30F1D, 0x20FD0204, 0x1509FFFC);
	r6 = D(r6, s1_2_1, 0xED07F2F2, 0xECED0F09, 0x06F90201, 0xF8020CF8);
	r7 = D(r7, s1_2_1, 0x0E05FEF0, 0xF415F2FC, 0x05D80BFA, 0xFE010DFC);
	r0 = D(r0, s1_2_2, 0xFF09F5FF, 0xFB0DFBE7, 0xEF14F8FC, 0x05FCF8F3);
	r1 = D(r1, s1_2_2, 0x04FA2C19, 0xEF1001E9, 0xE5040511, 0xFCF914FF);
	r2 = D(r2, s1_2_2, 0x18F8FFFC, 0x00080603, 0x060302FD, 0xFDF90500);
	r3 = D(r3, s1_2_2, 0xF0FD0823, 0x02FEFA06, 0x0C0301FE, 0x02F8FAF7);
	r4 = D(r4, s1_2_2, 0x1204FAF9, 0xE9FA0D05, 0xECE71613, 0xFCE20AF9);
	r5 = D(r5, s1_2_2, 0xE303F3F1, 0x10FCFCEC, 0x0FF402F0, 0x0A03FCFC);
	r6 = D(r6, s1_2_2, 0x0107FEFE, 0xBE05FB01, 0xFC02FAF9, 0xF400FE01);
	r7 = D(r7, s1_2_2, 0x02F90503, 0xFE10FBF0, 0x03FE0302, 0x18F90006);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-8.103e-03, -4.077e-02, -2.286e-03, -1.239e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-8.326e-02, -4.060e-02, 2.664e-03, -5.512e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.077e-02, 4.398e-02, 1.956e-02, -7.970e-04);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.724e-02, 2.585e-02, -1.940e-02, -1.618e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.780e-02, 8.117e-03, 1.704e-02, 1.674e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(6.513e-04, 1.307e-02, -8.669e-03, 1.737e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.317e-02, 5.339e-02, 1.779e-02, -8.923e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-7.291e-03, 1.003e-02, 1.810e-03, -8.537e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_DS_vk] -conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x070600FF, 0x0305FF00, 0x0702FEFE, 0xFF000301);
	r1 = D(r1, s0_0_0, 0x06FC060F, 0xFCF9FD12, 0xFDFAF503, 0xFFFF0104);
	r2 = D(r2, s0_0_0, 0xFD0001FC, 0x06F9F701, 0xFD02FC01, 0xFDFF0DFD);
	r3 = D(r3, s0_0_0, 0x0503F303, 0xFE050003, 0x02F6F404, 0x0104F908);
	r4 = D(r4, s0_0_0, 0xF4021000, 0x05001602, 0x08F715FC, 0xEAEF1FF7);
	r5 = D(r5, s0_0_0, 0x00030900, 0x000A02FA, 0xEEFA08E9, 0xFB01FAFF);
	r6 = D(r6, s0_0_0, 0x0107F200, 0xFC02FD00, 0x0300F2FC, 0xFE09E9D5);
	r7 = D(r7, s0_0_0, 0x0203FCFD, 0xFD0307FF, 0xFB020B01, 0x0306F9EC);
	r0 = D(r0, s0_0_1, 0xFCF31909, 0x0208FBFF, 0x00FF1200, 0xFF09F0FE);
	r1 = D(r1, s0_0_1, 0xFE11F4FB, 0xEA1CE7C9, 0xFF09E1F6, 0x030AF902);
	r2 = D(r2, s0_0_1, 0x01FE0CF1, 0x0300F5FF, 0x0306E7E8, 0xFE0AFD08);
	r3 = D(r3, s0_0_1, 0x0003EEF5, 0x020304EA, 0x0B0EFCD7, 0xFFFD06FA);
	r4 = D(r4, s0_0_1, 0x030CE9F8, 0xE523F1D6, 0xE50EEFF8, 0x0A1D150B);
	r5 = D(r5, s0_0_1, 0xFF050805, 0x120304F5, 0x080810DD, 0x0807F0FA);
	r6 = D(r6, s0_0_1, 0x020302F2, 0xFE00FD00, 0x060DEC05, 0xF5BBFD81);
	r7 = D(r7, s0_0_1, 0xF9030500, 0xFBFF11FF, 0xFFFF14FF, 0xFE040006);
	r0 = D(r0, s0_0_2, 0x04F906FF, 0x020300FE, 0x01070205, 0x0105FAF8);
	r1 = D(r1, s0_0_2, 0x010200FB, 0x070805FD, 0xF205FA06, 0x030BFCFB);
	r2 = D(r2, s0_0_2, 0x01FC0709, 0xFD0CFE03, 0x030BFEF6, 0xFF0500F6);
	r3 = D(r3, s0_0_2, 0x07F70901, 0x02050404, 0x00090E13, 0x05FE010B);
	r4 = D(r4, s0_0_2, 0x04FFFC07, 0x070602F5, 0x18F4F8CB, 0xD9F8ECE6);
	r5 = D(r5, s0_0_2, 0x0007FE01, 0x0004FC02, 0x1E0413FD, 0x0206FBFF);
	r6 = D(r6, s0_0_2, 0x08F90501, 0x06FC0309, 0x0C0DFDC8, 0x27FDC9B0);
	r7 = D(r7, s0_0_2, 0xFD0BF4ED, 0x05FB0505, 0x0CF90707, 0xFA010504);
	r0 = D(r0, s0_1_0, 0xFEF309FF, 0x060908FF, 0xFD02FE08, 0xFC04FE02);
	r1 = D(r1, s0_1_0, 0xC410FADB, 0xF005F8F9, 0x0508E4FB, 0xF311FCFD);
	r2 = D(r2, s0_1_0, 0xFD0AFD06, 0x0601F703, 0xF704F501, 0xFDFD0603);
	r3 = D(r3, s0_1_0, 0xDAEAF903, 0xFF06050C, 0xEE09F6FF, 0xFB08FEFC);
	r4 = D(r4, s0_1_0, 0x0CFCFB00, 0x18FCF5FC, 0x19E11115, 0x2A0AF60C);
	r5 = D(r5, s0_1_0, 0xFE020D09, 0xF70A0200, 0xCD0B100D, 0x09010701);
	r6 = D(r6, s0_1_0, 0x00FC06FB, 0x03FD0907, 0x19CE38F4, 0x2101192D);
	r7 = D(r7, s0_1_0, 0x0004FB01, 0xFF050507, 0xFF08FBF8, 0xE317FBF2);
	r0 = D(r0, s0_1_1, 0xED0AD501, 0x001206EE, 0xE91206EE, 0xEB03F0E1);
	r1 = D(r1, s0_1_1, 0x01DCFE09, 0xF6D70608, 0x0AF01D16, 0xCCC0FEEB);
	r2 = D(r2, s0_1_1, 0xFC24F7DB, 0xEAFF0102, 0xEDF0F7F3, 0xE218F9DE);
	r3 = D(r3, s0_1_1, 0x03EDFC09, 0xECD7FAE4, 0xCAF3F1E1, 0xE9FDFEF7);
	r4 = D(r4, s0_1_1, 0xBEF70CF0, 0xA6FBFAED, 0x810D13F9, 0xE5F0DFEA);
	r5 = D(r5, s0_1_1, 0xF90501ED, 0xF2E101F2, 0xE70E09AC, 0xFBFBF8F4);
	r6 = D(r6, s0_1_1, 0xFDC4F8F5, 0xF006FEF3, 0xFA8697C4, 0x03B3F317);
	r7 = D(r7, s0_1_1, 0xF8FD090A, 0x050D01E9, 0xFAF0FEE2, 0x0503F4FC);
	r0 = D(r0, s0_1_2, 0xFE10FD12, 0xF814FFF9, 0x06F8F9FA, 0x02FF0707);
	r1 = D(r1, s0_1_2, 0x00060201, 0x06F9FF06, 0xF601FEF0, 0x0805FF01);
	r2 = D(r2, s0_1_2, 0x0321E3EE, 0xF6FDFC04, 0x06FF0101, 0xFCF70EFC);
	r3 = D(r3, s0_1_2, 0x02FCFF05, 0xFB0BFA0A, 0xFBFE0116, 0xFE04FA0A);
	r4 = D(r4, s0_1_2, 0x02E4F306, 0x07F2FD06, 0x24C905FC, 0xDE1E810F);
	r5 = D(r5, s0_1_2, 0x00FAFEFD, 0x09F4FD0B, 0x1DF8FB0D, 0xFEF4FC08);
	r6 = D(r6, s0_1_2, 0x0DD8EE0E, 0xFD08F505, 0x1C928623, 0x19D5DF50);
	r7 = D(r7, s0_1_2, 0xECE6FDFE, 0xFF0BFE05, 0x0007F3FE, 0xFA03FF02);
	r0 = D(r0, s0_2_0, 0x0A02F801, 0xF60802FC, 0x000601FC, 0x0005F6FC);
	r1 = D(r1, s0_2_0, 0x0D0CFFFE, 0x0403FDFC, 0xF9FD0007, 0x0502FCFD);
	r2 = D(r2, s0_2_0, 0x00FEF2FF, 0xFA0201FE, 0x0504FEFC, 0x05FFF801);
	r3 = D(r3, s0_2_0, 0x0A05FAFB, 0x0303FB03, 0xF510FFFD, 0xFF030504);
	r4 = D(r4, s0_2_0, 0x0406FAFF, 0x06FFEF01, 0x21C6E801, 0xEAFAF608);
	r5 = D(r5, s0_2_0, 0xFC010400, 0x06FAFDFF, 0xF9F3E504, 0x0406F9FD);
	r6 = D(r6, s0_2_0, 0x1009F5F9, 0x0705F9FC, 0xFD09E90A, 0xFCFCFDFC);
	r7 = D(r7, s0_2_0, 0x0002FC02, 0xFE01FEFB, 0x04F80002, 0xFE0EFBFA);
	r0 = D(r0, s0_2_1, 0x09FDEAF9, 0xF1E0F80E, 0xF5F50305, 0x050003FB);
	r1 = D(r1, s0_2_1, 0x050101FE, 0x040604FC, 0xFBFB0802, 0x0A0D0101);
	r2 = D(r2, s0_2_1, 0xF3EA0C0C, 0x0204F5FE, 0x06FBFD01, 0xF0020705);
	r3 = D(r3, s0_2_1, 0x03FD09FE, 0x03EEF604, 0x02F4F202, 0xF7FAFE05);
	r4 = D(r4, s0_2_1, 0x0602FEFE, 0xFE130800, 0x81271AF2, 0xFFF9FC01);
	r5 = D(r5, s0_2_1, 0xFB030303, 0x090CF902, 0x8181208D, 0x040BFC02);
	r6 = D(r6, s0_2_1, 0x03020A07, 0xF2060503, 0x00E2211F, 0x0C120707);
	r7 = D(r7, s0_2_1, 0x0303FAFD, 0xF7F2FEFF, 0x05FBF309, 0xFFF5FC0D);
	r0 = D(r0, s0_2_2, 0x07E904FC, 0x06F1FD0B, 0xFE0FFB07, 0x060203FC);
	r1 = D(r1, s0_2_2, 0x010003FC, 0xFEFE03FC, 0xEE14F905, 0x00FC03FF);
	r2 = D(r2, s0_2_2, 0x04F7F301, 0x0101FF08, 0x010204FF, 0xFA01FF05);
	r3 = D(r3, s0_2_2, 0xFE0202FE, 0x0504FE00, 0x0AF7010A, 0xFBF8FD07);
	r4 = D(r4, s0_2_2, 0xF9F70102, 0xFFFDFE0B, 0xF8E8EB42, 0x0E0801EB);
	r5 = D(r5, s0_2_2, 0xFE07FD06, 0x04FFFE07, 0xE7FEF418, 0x03F6FEFF);
	r6 = D(r6, s0_2_2, 0x0EFDFEFD, 0xF6E4FB08, 0xECDB0721, 0xF5011703);
	r7 = D(r7, s0_2_2, 0x0101FE07, 0x01F4FC07, 0x0000F70C, 0x01FEFFFE);
	r0 = D(r0, s1_0_0, 0xF9FF04F9, 0xFBFE020B, 0xFD01FEFC, 0x04FA0300);
	r1 = D(r1, s1_0_0, 0x0E0A07FD, 0xFD0AFEFD, 0x0BF802FA, 0x050000FE);
	r2 = D(r2, s1_0_0, 0xFE0B07FE, 0x0507FF05, 0xFB00EE03, 0x010FFDEC);
	r3 = D(r3, s1_0_0, 0x000903FF, 0xFF08020E, 0xF20E0427, 0xF9F80007);
	r4 = D(r4, s1_0_0, 0xFDF501FD, 0x140EEFCD, 0x360FDED7, 0x0C3307AA);
	r5 = D(r5, s1_0_0, 0xFF06F903, 0xFE03FEF1, 0x04E40723, 0xF9F6FF07);
	r6 = D(r6, s1_0_0, 0xFAFCFEF1, 0xFBF7FFFE, 0xD4030E49, 0xECFEE47F);
	r7 = D(r7, s1_0_0, 0x0301FE0E, 0x020500FA, 0x0A0504EA, 0xE60502F6);
	r0 = D(r0, s1_0_1, 0x04EFFBFD, 0xF7020406, 0x0704FCF8, 0xF60AFF02);
	r1 = D(r1, s1_0_1, 0x030102FE, 0x17F807FE, 0xFB040204, 0x041006FB);
	r2 = D(r2, s1_0_1, 0x0BFA0404, 0xF201FD0A, 0xF006FD03, 0x07030401);
	r3 = D(r3, s1_0_1, 0xFFEE08F8, 0x10F209E8, 0x16F4E3DC, 0x08FC05F6);
	r4 = D(r4, s1_0_1, 0xFCF8F4FF, 0xF30A0E09, 0x0A1C1663, 0x1C2818FB);
	r5 = D(r5, s1_0_1, 0x08FEFDFA, 0x0404F9E9, 0x18EEEAB2, 0xFA00FF02);
	r6 = D(r6, s1_0_1, 0x0D0B02E4, 0x0CF7FEFD, 0xDB18020D, 0xC1219D4C);
	r7 = D(r7, s1_0_1, 0x0A0503FA, 0xFFFE00F8, 0x030001E7, 0x13FC080E);
	r0 = D(r0, s1_0_2, 0xFF080604, 0xFAFDFC01, 0x0C08FBFC, 0x05FEFE00);
	r1 = D(r1, s1_0_2, 0x0002FF05, 0xFBFEFF0A, 0x03F7FF03, 0x03FD0203);
	r2 = D(r2, s1_0_2, 0x04FAFEF8, 0x06FFFD04, 0x04FDFC06, 0x02FAFDF8);
	r3 = D(r3, s1_0_2, 0x0106FD0C, 0x01010006, 0x0C090914, 0xFB010100);
	r4 = D(r4, s1_0_2, 0x0305060B, 0x01F4FDEF, 0x2705F6CC, 0xD8F6E8B8);
	r5 = D(r5, s1_0_2, 0xFF00FE00, 0xFEFA02E0, 0xBB02130A, 0xFBFDFE06);
	r6 = D(r6, s1_0_2, 0x030605EF, 0xFBFE0202, 0xCC1C162D, 0xF9FBF460);
	r7 = D(r7, s1_0_2, 0xF3F80404, 0x0402FEF9, 0x01FCFEE8, 0xFBFD0100);
	r0 = D(r0, s1_1_0, 0x14050203, 0x0F1006FB, 0x12020200, 0x0505EFFF);
	r1 = D(r1, s1_1_0, 0x0EFCF505, 0xFC0A00FE, 0xE1E806F9, 0x0C2703FD);
	r2 = D(r2, s1_1_0, 0x0ED4F80B, 0xFFFC05F7, 0x020AFBFE, 0x0A08F9F1);
	r3 = D(r3, s1_1_0, 0xD9E202F9, 0x000706FF, 0xEE090711, 0xF0F70104);
	r4 = D(r4, s1_1_0, 0xF4FBFCF0, 0x06EDEDD9, 0x0CEEFBE5, 0x00F6B01A);
	r5 = D(r5, s1_1_0, 0x0207FF01, 0xDDF7F5FE, 0xE70AE9FA, 0x0AEEFEF9);
	r6 = D(r6, s1_1_0, 0x0A0208C0, 0x03DFFFF3, 0xEEC2851D, 0xD3EDF4C1);
	r7 = D(r7, s1_1_0, 0x070A0605, 0x02FB00FF, 0xDFF6F8FB, 0x090407F3);
	r0 = D(r0, s1_1_1, 0xEFD8010C, 0x16F20402, 0xF612FD05, 0x1AE7FAF9);
	r1 = D(r1, s1_1_1, 0xFFFBF600, 0xDFF9F4EE, 0x042103FC, 0xFAD8F1EF);
	r2 = D(r2, s1_1_1, 0x271CF605, 0x0323F60A, 0xF4DEF303, 0xED1A0B01);
	r3 = D(r3, s1_1_1, 0xF806F5F6, 0x11E3F9E4, 0xE8D2D1C3, 0xFAE2F7F3);
	r4 = D(r4, s1_1_1, 0xF71508FB, 0xC906140F, 0x810AF800, 0xE22A8125);
	r5 = D(r5, s1_1_1, 0x000500FF, 0xEFF4FD06, 0x35D9F5EE, 0x13FEFEFE);
	r6 = D(r6, s1_1_1, 0x08FDEDF3, 0xE213FAFE, 0xE0D8AB14, 0xD4EEC5D6);
	r7 = D(r7, s1_1_1, 0xE3F8F307, 0xFA010404, 0xE6FBFA02, 0xF208FE08);
	r0 = D(r0, s1_1_2, 0xF2060A06, 0x02030402, 0xFDF4F700, 0x0707F903);
	r1 = D(r1, s1_1_2, 0x01FE0302, 0xFE010101, 0x0DF5FE00, 0xFF000205);
	r2 = D(r2, s1_1_2, 0x0F010C1C, 0xF503FC01, 0xFE03FC0A, 0x0900FEFD);
	r3 = D(r3, s1_1_2, 0xFFFE04FD, 0xFE020107, 0xFA040707, 0xFB050102);
	r4 = D(r4, s1_1_2, 0x02F6FCE7, 0x03FFF3CA, 0x26F306BD, 0x0CFDE6DA);
	r5 = D(r5, s1_1_2, 0x01FC00FE, 0x00FB0104, 0xEEF7EF2A, 0x06F8FFF6);
	r6 = D(r6, s1_1_2, 0x02F40700, 0x0405FEFB, 0x0CD4BC2A, 0xFEE6FDF2);
	r7 = D(r7, s1_1_2, 0x05FE0C04, 0x05070205, 0x0D040DEF, 0x010004FC);
	r0 = D(r0, s1_2_0, 0xFDEFFDE7, 0x07FCFBFC, 0xFD18FDF7, 0xFA02FD01);
	r1 = D(r1, s1_2_0, 0xFCFDF6FA, 0xFBFDFAFF, 0x03FD0808, 0xF6F6FA00);
	r2 = D(r2, s1_2_0, 0xFEFA01FF, 0x07090103, 0xF9FEFF00, 0xF904FEF4);
	r3 = D(r3, s1_2_0, 0x030EF6EF, 0xF903FE01, 0x0E050521, 0x04050100);
	r4 = D(r4, s1_2_0, 0x00F7FEF7, 0x0405F9BB, 0x0F1EC2C1, 0xD8001035);
	r5 = D(r5, s1_2_0, 0xFB05FE01, 0xF90406FC, 0x8181BA15, 0xFAF5FEFF);
	r6 = D(r6, s1_2_0, 0x080001E4, 0x02FEFBFC, 0xCED4D370, 0xF3EDF243);
	r7 = D(r7, s1_2_0, 0x02FE040A, 0x04FBFC00, 0x00FE06ED, 0xF3FD00FD);
	r0 = D(r0, s1_2_1, 0x070805FB, 0x0605F6F2, 0xFEF7F608, 0xF905F8F9);
	r1 = D(r1, s1_2_1, 0xFF03FF0B, 0x0404FFF8, 0x08F8040A, 0xFB07FBFF);
	r2 = D(r2, s1_2_1, 0xF2EAFE0C, 0xECFAF90D, 0x060602FC, 0xFEF506FC);
	r3 = D(r3, s1_2_1, 0xFF010000, 0xF4F6FEEC, 0xE201E7B0, 0xF4F7FFF2);
	r4 = D(r4, s1_2_1, 0xF5FBF301, 0xF5EA101B, 0x10F80424, 0xD00FFC16);
	r5 = D(r5, s1_2_1, 0x01FAFEFD, 0x01FA02FF, 0xFC2ACCE0, 0xF6FAFBFE);
	r6 = D(r6, s1_2_1, 0x0DF4F806, 0xF107FD02, 0xD221C830, 0x0610FE0A);
	r7 = D(r7, s1_2_1, 0x02FFFEFB, 0x04FDFD14, 0xF90406FC, 0x00F902E9);
	r0 = D(r0, s1_2_2, 0x05FE0305, 0xFCFEFD10, 0xFB07F107, 0x02000201);
	r1 = D(r1, s1_2_2, 0x0003FE05, 0x0101FDFD, 0xF5FE0806, 0xFF030106);
	r2 = D(r2, s1_2_2, 0xF809F90B, 0xFBFE01FE, 0xFE010200, 0x0500FCF4);
	r3 = D(r3, s1_2_2, 0x0002FCFF, 0x03030202, 0x06040712, 0xFE030704);
	r4 = D(r4, s1_2_2, 0xF20000FF, 0x0202EBD9, 0xEB0AE7E3, 0xDF26FD01);
	r5 = D(r5, s1_2_2, 0xFD02F9FE, 0xFF01FDF8, 0xCBCF2CE6, 0xFB0103FE);
	r6 = D(r6, s1_2_2, 0xEF02EE06, 0xFCF905F4, 0xE126DE53, 0xF0FEE931);
	r7 = D(r7, s1_2_2, 0xFDF90206, 0xFEFFFF08, 0xF7FAFCE8, 0x0200FEF8);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0000F4FF, 0x02FEFF06, 0xFF01FD00, 0xFDFE0AFF);
	r1 = D(r1, s0_0_0, 0xF304F900, 0xFA03F700, 0x020008FC, 0xFA04FBFE);
	r2 = D(r2, s0_0_0, 0x03000002, 0x04FD0300, 0xFF0307FC, 0x02000102);
	r3 = D(r3, s0_0_0, 0xDE18E8F4, 0xFCFDF600, 0x01F7F306, 0x0601FCFF);
	r4 = D(r4, s0_0_0, 0xF707FBFE, 0xF7F5FEFD, 0xCD021DF6, 0x05011808);
	r5 = D(r5, s0_0_0, 0x0000FFFF, 0xFAFCFFF9, 0xF703F51D, 0xFCFF01FD);
	r6 = D(r6, s0_0_0, 0x0BF60304, 0x0203F801, 0x3ADCE807, 0x0E0F0381);
	r7 = D(r7, s0_0_0, 0x0601FF01, 0x02010001, 0x04FE0103, 0x02FAE7FF);
	r0 = D(r0, s0_0_1, 0x08FE02FE, 0x0601FEFC, 0xFAFD0503, 0xFF04FDFC);
	r1 = D(r1, s0_0_1, 0xFD04FFFF, 0xDF05EFEA, 0xFF03F7FC, 0xF305FCFF);
	r2 = D(r2, s0_0_1, 0x0FFD00FE, 0xFEFBFE04, 0xF6FAFCFE, 0xFAFCFC09);
	r3 = D(r3, s0_0_1, 0x04F7FF09, 0xFB0E020A, 0xDF040913, 0xFE0A07FF);
	r4 = D(r4, s0_0_1, 0x0008FD03, 0xB217EC14, 0xC42AF94D, 0xEC0A1BFA);
	r5 = D(r5, s0_0_1, 0xFA040000, 0xF6FEFCF9, 0xE4ED102F, 0x0000FDFE);
	r6 = D(r6, s0_0_1, 0x02F8FFF8, 0x060401FB, 0x0CFEE99E, 0xEF090BB9);
	r7 = D(r7, s0_0_1, 0xE502FE04, 0x05FD02FB, 0x07FE04FA, 0x0A11FF01);
	r0 = D(r0, s0_0_2, 0x0800F7F9, 0x0003FEFF, 0x000804FE, 0xF8040001);
	r1 = D(r1, s0_0_2, 0x03010000, 0x0B03FC08, 0xFA03FDFB, 0x01030004);
	r2 = D(r2, s0_0_2, 0x06F9FDF3, 0xFF0A0103, 0xF9020300, 0x00F90202);
	r3 = D(r3, s0_0_2, 0x0B01FEFD, 0x050100FF, 0x0811FAFF, 0x0402FC03);
	r4 = D(r4, s0_0_2, 0x05FF03FB, 0x0500F60E, 0x02F01A1C, 0xA9B1213F);
	r5 = D(r5, s0_0_2, 0x00000101, 0xF0FE04F9, 0xF50B15EC, 0xFCFE03F9);
	r6 = D(r6, s0_0_2, 0x03FD0BFF, 0x04FF00FF, 0x08EB0FE1, 0xEEDD1DED);
	r7 = D(r7, s0_0_2, 0xFF08FB0E, 0x030200FB, 0x04000303, 0x030501FE);
	r0 = D(r0, s0_1_0, 0xF00205F9, 0xFE00FFFA, 0xFCFC03FE, 0x0503E8FC);
	r1 = D(r1, s0_1_0, 0x0A04F3E0, 0x01FFFEF2, 0x1FF8F809, 0x0703F2F8);
	r2 = D(r2, s0_1_0, 0xFF0004FC, 0x06FE0407, 0x02FBF6FD, 0xFA020803);
	r3 = D(r3, s0_1_0, 0x0CFEFEF1, 0x0106F801, 0xFF0BD707, 0xFFFFF702);
	r4 = D(r4, s0_1_0, 0xFBFEFC09, 0xF8F9070C, 0xCD0C1000, 0x110CD0FE);
	r5 = D(r5, s0_1_0, 0xFF040300, 0x0C0002FD, 0xEC241B00, 0xFD01FE02);
	r6 = D(r6, s0_1_0, 0xFBFAE8FA, 0xFDFF0003, 0x00D0A6AC, 0xF7DBBDE9);
	r7 = D(r7, s0_1_0, 0x0400FD06, 0x0A0009FA, 0x0EFCFDF9, 0xF20AF1FB);
	r0 = D(r0, s0_1_1, 0xF0050202, 0xE90A07FC, 0x0610F7F5, 0xF0F401F4);
	r1 = D(r1, s0_1_1, 0x09FEFBFC, 0x0C07FEF9, 0x0E00FCFB, 0x0C02FDE1);
	r2 = D(r2, s0_1_1, 0xE708F4FF, 0x01F9FFF5, 0x02FF03FF, 0xEB18F4F8);
	r3 = D(r3, s0_1_1, 0x0309F7FA, 0x040EFEFE, 0xEAFA0DEC, 0x060506F4);
	r4 = D(r4, s0_1_1, 0x0512F6E6, 0xF73EEAEC, 0xD5FE0F1C, 0x15E8F5AB);
	r5 = D(r5, s0_1_1, 0x110AFA00, 0x1910FC01, 0xCFEB003F, 0xF807FCF0);
	r6 = D(r6, s0_1_1, 0x0AF706DB, 0x0408EFEB, 0xBCAF30DD, 0x27D524FA);
	r7 = D(r7, s0_1_1, 0xFCFCFC05, 0x0D0507FB, 0x0C04F8F4, 0x0515FC06);
	r0 = D(r0, s0_1_2, 0x12FF02FD, 0x01F004FF, 0x03F6F905, 0x08050106);
	r1 = D(r1, s0_1_2, 0xFEF9FD01, 0xFDFCF902, 0xEB01F3FD, 0x03FDF902);
	r2 = D(r2, s0_1_2, 0xF401FBF5, 0x091C03FA, 0x0106FB06, 0xF708EF02);
	r3 = D(r3, s0_1_2, 0xFEFAFE05, 0x04FEFFFB, 0x0E1BFC0C, 0x050B01FF);
	r4 = D(r4, s0_1_2, 0x0604FE00, 0x05FBE909, 0x07181B11, 0xE6C120DE);
	r5 = D(r5, s0_1_2, 0xFEFBFDFF, 0xFEF607FF, 0xF51FFBEB, 0xFB0003FF);
	r6 = D(r6, s0_1_2, 0xF3FD07F2, 0x030603FB, 0xD9BC57F0, 0x00DC26FB);
	r7 = D(r7, s0_1_2, 0xFA15F7EF, 0x05FB0202, 0xF8010204, 0xFFFE01FF);
	r0 = D(r0, s0_2_0, 0x03FDFB00, 0x07FEFBEB, 0x0700FCF5, 0xF9FB04FD);
	r1 = D(r1, s0_2_0, 0xF702F707, 0xFB01FD01, 0x000000FF, 0xF7FD02FF);
	r2 = D(r2, s0_2_0, 0xFEFEF6EE, 0x0508FEFF, 0xFB02FEFD, 0xFDFEFF02);
	r3 = D(r3, s0_2_0, 0xFC00F702, 0x0000F9FE, 0x000BFBFA, 0x0101010A);
	r4 = D(r4, s0_2_0, 0xFEFDFF03, 0x01F7FB0A, 0xCDEB32F2, 0xF8F9010D);
	r5 = D(r5, s0_2_0, 0x0302FEFF, 0x04FC0302, 0x812040D2, 0xFB030002);
	r6 = D(r6, s0_2_0, 0xFA030602, 0xFC02FF05, 0xB0393600, 0xFCFAF6F6);
	r7 = D(r7, s0_2_0, 0x0201FF04, 0x03FD00FA, 0xFAFC0003, 0xFA04F9FC);
	r0 = D(r0, s0_2_1, 0xF90AF9F8, 0x13FB04E0, 0x00F504FF, 0xFA0CF406);
	r1 = D(r1, s0_2_1, 0xFEFEFA06, 0xFEFEF908, 0x10F3FE09, 0xFF00F20A);
	r2 = D(r2, s0_2_1, 0x11FA03F5, 0xFFF801F6, 0xFBFFFD01, 0x0408FEF7);
	r3 = D(r3, s0_2_1, 0xFE03FA05, 0x0BFFFCF6, 0x02EAFCE7, 0x0601FFF2);
	r4 = D(r4, s0_2_1, 0xF7040007, 0xFE07F5E4, 0xF031D7D7, 0xF115EF15);
	r5 = D(r5, s0_2_1, 0xFE000201, 0x03F9FD02, 0xB0812717, 0xF70DFCFF);
	r6 = D(r6, s0_2_1, 0xF40EFE09, 0xFE0BFFFE, 0x071A17FE, 0xF618F000);
	r7 = D(r7, s0_2_1, 0xFFFDF9FD, 0x11F101FA, 0xFEF70606, 0x07FFFDF9);
	r0 = D(r0, s0_2_2, 0x0301FF00, 0xFEFBFEFF, 0xFD00F805, 0xF9FFFB04);
	r1 = D(r1, s0_2_2, 0x0103FF00, 0xFE02FD01, 0xFFFCFEFD, 0xFF02FF02);
	r2 = D(r2, s0_2_2, 0x0CFDFCFF, 0xFE060102, 0xFC03FD01, 0x0101FC03);
	r3 = D(r3, s0_2_2, 0x03FFFD01, 0xFE03FD07, 0x050DFE02, 0x000700FB);
	r4 = D(r4, s0_2_2, 0x000207F1, 0x03FCFF00, 0x18E32AF9, 0x0515F80D);
	r5 = D(r5, s0_2_2, 0x0102FE03, 0xFDFD01FF, 0xC411FED6, 0x000203FF);
	r6 = D(r6, s0_2_2, 0xFDFA0507, 0xFF02FEF4, 0xDB19E40D, 0xF504DF04);
	r7 = D(r7, s0_2_2, 0x0C0503F8, 0x000401FA, 0x01F106FE, 0x0001FE03);
	r0 = D(r0, s1_0_0, 0xFAFF01FC, 0xFB010001, 0xFC02FEFF, 0xFE0200FE);
	r1 = D(r1, s1_0_0, 0xFEEFF9FE, 0xFEFDFA03, 0xF907FE00, 0xFDF8F7FF);
	r2 = D(r2, s1_0_0, 0x0606FDFD, 0x0303FFFF, 0xFE01FC01, 0x04F9FEFE);
	r3 = D(r3, s1_0_0, 0xBAF0F4FA, 0xF7FDFF05, 0xF6080007, 0xFA06FDFE);
	r4 = D(r4, s1_0_0, 0xED03FB00, 0xF8FB0201, 0xF70715EF, 0xEA0002EB);
	r5 = D(r5, s1_0_0, 0x01FCFF00, 0xFDFA00FC, 0x0CF3ECFC, 0xFE03FB01);
	r6 = D(r6, s1_0_0, 0xFEFEFA05, 0xFE05FB00, 0x28EAF60C, 0xDBD6EA30);
	r7 = D(r7, s1_0_0, 0xFCFDFBF5, 0x08F60300, 0x05F302FF, 0xDFFDF0F8);
	r0 = D(r0, s1_0_1, 0x07D91406, 0xF60CF905, 0x02F500FD, 0x000BF703);
	r1 = D(r1, s1_0_1, 0x02F7FDFB, 0xF3EC09FF, 0xF12DEAF9, 0x01EC00FA);
	r2 = D(r2, s1_0_1, 0x09FCF8FC, 0xF00EFA03, 0xF40DFEFD, 0xF7FBFDF7);
	r3 = D(r3, s1_0_1, 0x11F508EE, 0x0EF3F9FF, 0xFC04EF05, 0x14F403FC);
	r4 = D(r4, s1_0_1, 0x0207F5FA, 0xD7FA0BF9, 0xECF9F431, 0xFFE0EC03);
	r5 = D(r5, s1_0_1, 0x02F503F9, 0xFF00F900, 0x3CF91D1D, 0xFB08F802);
	r6 = D(r6, s1_0_1, 0x16FE0EF7, 0x0BFEFDFA, 0xF60800F8, 0xEC1E0DFE);
	r7 = D(r7, s1_0_1, 0xF10605FC, 0x06F606FD, 0x06F506FC, 0x12F8FF07);
	r0 = D(r0, s1_0_2, 0x0003F701, 0x0203FE04, 0x06F107EC, 0x03FF01FE);
	r1 = D(r1, s1_0_2, 0x03010000, 0x050104ED, 0x00FF08FF, 0x00FE01F7);
	r2 = D(r2, s1_0_2, 0x0000FD05, 0x09FCFCF8, 0x0A000EF5, 0x0903FD08);
	r3 = D(r3, s1_0_2, 0x02FD0001, 0x0002FBFF, 0xFDF301EE, 0xFA00FC02);
	r4 = D(r4, s1_0_2, 0x06F908F5, 0x0308F1F7, 0x2605D4FC, 0xC1E703FA);
	r5 = D(r5, s1_0_2, 0x03FAFFF8, 0x00FD0007, 0xF2F4F8F9, 0x040201FF);
	r6 = D(r6, s1_0_2, 0x06F60602, 0xFA0202FF, 0x2E061CC1, 0x1EFD3810);
	r7 = D(r7, s1_0_2, 0xF4FCE604, 0xFFFF00FE, 0xFFF700FE, 0xFA02FBFC);
	r0 = D(r0, s1_1_0, 0xE8010F03, 0xF3FFFF05, 0xFF010000, 0xFE00FBFE);
	r1 = D(r1, s1_1_0, 0xDF0C0FF7, 0x020308F0, 0x10FDF8FA, 0xFA0105FD);
	r2 = D(r2, s1_1_0, 0xF9FAFB08, 0x0002FBFD, 0x030504F8, 0xFD0C06FC);
	r3 = D(r3, s1_1_0, 0x131719E8, 0xF40FFA08, 0xF8F3EB0E, 0x00F8F801);
	r4 = D(r4, s1_1_0, 0xFD0A09FE, 0xFE200A05, 0xFE1708E2, 0xE4031206);
	r5 = D(r5, s1_1_0, 0xF5FFFE04, 0xF609FD0C, 0x0B1FF212, 0xF80DFD04);
	r6 = D(r6, s1_1_0, 0xFC0C0404, 0xF80BFFFF, 0x130E2D15, 0xEC2731F5);
	r7 = D(r7, s1_1_0, 0xFDF9FCFC, 0xF6F9F901, 0xFE03F808, 0xF507F1EA);
	r0 = D(r0, s1_1_1, 0x1708CA0C, 0xFAE511F1, 0xDBF40702, 0xEC001EFA);
	r1 = D(r1, s1_1_1, 0x04060500, 0x11150AF8, 0xCAFF38EF, 0xF90F0501);
	r2 = D(r2, s1_1_1, 0xD0E9010B, 0xF50A05FA, 0x140E2302, 0xF8F4FEF5);
	r3 = D(r3, s1_1_1, 0xFE0401F4, 0xFC08FB06, 0xF22928FC, 0x0A0C0AF5);
	r4 = D(r4, s1_1_1, 0xF911F6FC, 0xDD11DD1D, 0xF82FE133, 0xB11423F0);
	r5 = D(r5, s1_1_1, 0xFDF8F7FD, 0x05070C16, 0x24C92B1B, 0xEA06FF00);
	r6 = D(r6, s1_1_1, 0xDDFBF106, 0xE30BFBF9, 0x34170227, 0xFB09FDDB);
	r7 = D(r7, s1_1_1, 0xF41C0B07, 0xFBF80813, 0xE6FE0212, 0x12070F09);
	r0 = D(r0, s1_1_2, 0xFDF323E6, 0x0FF409E2, 0xF601F3FB, 0x0A0205E2);
	r1 = D(r1, s1_1_2, 0x00FF0001, 0xFFFF02FE, 0xF706E70D, 0x060007FF);
	r2 = D(r2, s1_1_2, 0xF6F308FC, 0x0F040F05, 0x05050402, 0x0A01EB0D);
	r3 = D(r3, s1_1_2, 0xFD00FEFE, 0x08090906, 0xF5FDFF05, 0x03FD0CF5);
	r4 = D(r4, s1_1_2, 0xFA00EDF5, 0x0900FD01, 0x1012EFD2, 0xD6F4F5F2);
	r5 = D(r5, s1_1_2, 0x0102F801, 0x0306FA0A, 0xE92A33EE, 0xFE00EC06);
	r6 = D(r6, s1_1_2, 0xEC04E908, 0x09FA01F5, 0x0AF1D5B8, 0x02F5B0BE);
	r7 = D(r7, s1_1_2, 0xF8FEE8FC, 0x0CF50CF9, 0x02FA080A, 0xFF03030A);
	r0 = D(r0, s1_2_0, 0x06FE04FE, 0xFDFFFA03, 0x060401F6, 0x030A08FC);
	r1 = D(r1, s1_2_0, 0x040B0203, 0x030401FF, 0xF5FFFA02, 0xFF0807FE);
	r2 = D(r2, s1_2_0, 0xFF0603FD, 0xFCFAF700, 0xFA0605FD, 0x000302FF);
	r3 = D(r3, s1_2_0, 0xFE0201FE, 0xFC0BFC05, 0xFFFFE809, 0xFEFDFA05);
	r4 = D(r4, s1_2_0, 0x02FEFFFD, 0x05070301, 0x18161912, 0xF8F90D02);
	r5 = D(r5, s1_2_0, 0x0200FFFE, 0xFFFB05F7, 0x66FB81FD, 0x02FC0103);
	r6 = D(r6, s1_2_0, 0x03FCFBFF, 0xFFFC03FD, 0xE601E322, 0xFFFA0C12);
	r7 = D(r7, s1_2_0, 0xFDFDFFFC, 0xFE0301FE, 0x050103FD, 0xFC0BFF06);
	r0 = D(r0, s1_2_1, 0x10040FFF, 0x0303FE08, 0xF60205E6, 0x0B0C0908);
	r1 = D(r1, s1_2_1, 0x01FE0103, 0xFA010304, 0xF0F3F308, 0x00060101);
	r2 = D(r2, s1_2_1, 0x0B10090F, 0x040305FE, 0xFFFE0502, 0xF904F901);
	r3 = D(r3, s1_2_1, 0xFB040003, 0x0505F703, 0x22121D0A, 0x0203FFF8);
	r4 = D(r4, s1_2_1, 0x010609FB, 0xFA0DFE03, 0xAE0EF733, 0x080B142B);
	r5 = D(r5, s1_2_1, 0xFBFDFDF6, 0xFDF503F5, 0xC2C12B46, 0x050A0407);
	r6 = D(r6, s1_2_1, 0xFE08F6FF, 0xFF0DFF0B, 0xD81D123C, 0xE7030321);
	r7 = D(r7, s1_2_1, 0x01020500, 0x07F8FF01, 0x08FB01FF, 0x02FE0204);
	r0 = D(r0, s1_2_2, 0xFEFF0403, 0xF9F9F808, 0x04FD0000, 0xFAFD0703);
	r1 = D(r1, s1_2_2, 0x0100FEFD, 0x02010001, 0x07F9F8FA, 0x03FFFFFB);
	r2 = D(r2, s1_2_2, 0x0D0BFF12, 0x03010103, 0xFAFB03FC, 0x0001F904);
	r3 = D(r3, s1_2_2, 0x00FF0002, 0xFF0104FA, 0xF9010301, 0x020109F7);
	r4 = D(r4, s1_2_2, 0xFF06FEFD, 0x09030106, 0x1BFFF901, 0xF70024F3);
	r5 = D(r5, s1_2_2, 0x06FCFDFE, 0xFEFDFDF7, 0xB90CEF1B, 0x0204FFFE);
	r6 = D(r6, s1_2_2, 0xFF09FF20, 0xF8FEF5F6, 0xF8111A2E, 0xFA00030B);
	r7 = D(r7, s1_2_2, 0x0203F4F9, 0xFF01F9FD, 0xFFFDF8FB, 0x000203FC);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0304FDFF, 0xFC0301FF, 0x000301FD, 0x05FD04FF);
	r1 = D(r1, s0_0_0, 0xFAF903FF, 0xF8050000, 0x0108FBFE, 0xFCF904FE);
	r2 = D(r2, s0_0_0, 0xFC0109FF, 0xFF02F5FF, 0xFD02F703, 0x00FD0902);
	r3 = D(r3, s0_0_0, 0xE2000F04, 0xEB050000, 0xF615E401, 0xF8FF01FD);
	r4 = D(r4, s0_0_0, 0xF405FD07, 0xF4000FFC, 0x03ED2DFD, 0xE80A0503);
	r5 = D(r5, s0_0_0, 0xFCFAF9FF, 0xF8FBFEFD, 0xE60C170B, 0xFCFBFB01);
	r6 = D(r6, s0_0_0, 0xFCEBFCFD, 0xF8010000, 0x04C935F7, 0xBB023221);
	r7 = D(r7, s0_0_0, 0xF90105FF, 0xFF000100, 0xFEF6FD01, 0xE0061008);
	r0 = D(r0, s0_0_1, 0xFF0EFA04, 0xFF0601FE, 0xFFF501FE, 0xFA00FDFF);
	r1 = D(r1, s0_0_1, 0xF4F10300, 0xE6E7F107, 0x07FE02FC, 0xF3F3FC02);
	r2 = D(r2, s0_0_1, 0xFFFC0703, 0x00FFFEFE, 0xF4F4FEFF, 0xF80604FB);
	r3 = D(r3, s0_0_1, 0xE8F1FA07, 0xFEF6FA00, 0xCEE82007, 0xFFFA0301);
	r4 = D(r4, s0_0_1, 0xEDEA03FD, 0xEB110211, 0x8122D609, 0xEBFE14DF);
	r5 = D(r5, s0_0_1, 0xFFFE0301, 0x00FA05FA, 0x0EEDEB05, 0x01F202FF);
	r6 = D(r6, s0_0_1, 0x04DAFE00, 0x00F5FF01, 0xEC8CEAE1, 0x0381A2D6);
	r7 = D(r7, s0_0_1, 0xFE070305, 0x0101FAFF, 0xFEFCFD00, 0xF7FDF1FA);
	r0 = D(r0, s0_0_2, 0xFE05FBFE, 0xFEFE0400, 0xFCF900FE, 0xFAFA0402);
	r1 = D(r1, s0_0_2, 0xFC03FF01, 0xF601FF05, 0x0605FF00, 0xFA07FD00);
	r2 = D(r2, s0_0_2, 0xFBFE02FC, 0xF60203FF, 0xF8F40204, 0xFBFD0000);
	r3 = D(r3, s0_0_2, 0xF901FDFF, 0xFC05FFFB, 0xF20CF601, 0xFE040200);
	r4 = D(r4, s0_0_2, 0x04FE0200, 0xE8F3FAF8, 0xADE3D205, 0xBDEF49F8);
	r5 = D(r5, s0_0_2, 0xFDFC0000, 0x02F90001, 0xFB1CCDFC, 0x04FB0002);
	r6 = D(r6, s0_0_2, 0xFFFCFEFD, 0x0104FEFF, 0xF98123FD, 0xDF81EFEE);
	r7 = D(r7, s0_0_2, 0xEEFBF703, 0xFF0101FD, 0xFD0307FD, 0xFC00F9FE);
	r0 = D(r0, s0_1_0, 0xFCFD09FF, 0xF8FC03FD, 0xFDF903FA, 0xF4FEF604);
	r1 = D(r1, s0_1_0, 0xEBFAF606, 0xF0FBF107, 0x0707F500, 0xF305F004);
	r2 = D(r2, s0_1_0, 0x00FB0404, 0x0106FCFF, 0xF5F7F4FC, 0xFD010CFF);
	r3 = D(r3, s0_1_0, 0xDDF5F0F3, 0xEF08F700, 0xFC07E908, 0xF906F6FE);
	r4 = D(r4, s0_1_0, 0xFBF811FB, 0xFB001DF1, 0xDDFE22F9, 0xEE251E1C);
	r5 = D(r5, s0_1_0, 0xFB0108FE, 0xF5FCFD07, 0x81FBF515, 0xF8FE02FF);
	r6 = D(r6, s0_1_0, 0xF007F508, 0xF8FF05FF, 0xC612F129, 0xE7F0D9F6);
	r7 = D(r7, s0_1_0, 0xFD00FAFB, 0xFAFEFF04, 0xF207FC08, 0xEC02FBFE);
	r0 = D(r0, s0_1_1, 0xFF07E30E, 0xFDF8FAFB, 0xFA010404, 0xFAF0F9FB);
	r1 = D(r1, s0_1_1, 0xF7F3EFFC, 0xF2F50EB9, 0xF9FF19F0, 0xEBEC06FC);
	r2 = D(r2, s0_1_1, 0xF3F9050A, 0xF601FAFC, 0xFFF40A01, 0xF9010E0A);
	r3 = D(r3, s0_1_1, 0xDFF7F5A8, 0xF4FA0CF2, 0xE3040AEF, 0xF7031203);
	r4 = D(r4, s0_1_1, 0xF109020E, 0xE607EBF7, 0xD406F3F4, 0xBF1EE116);
	r5 = D(r5, s0_1_1, 0xFAFFF303, 0xFAF1D6F4, 0xAAECF717, 0xFFF70500);
	r6 = D(r6, s0_1_1, 0x00D6FAF3, 0xF2FB0C07, 0xFA8109DB, 0x03DEE5B4);
	r7 = D(r7, s0_1_1, 0xFFFD1B03, 0xFFFEF6FF, 0x02F9F5F8, 0xF304F2E0);
	r0 = D(r0, s0_1_2, 0xFD0711FE, 0xFBFBFFFF, 0xEFF0F6FC, 0xF8F4FC06);
	r1 = D(r1, s0_1_2, 0xFFFE0003, 0xF1FFF6F9, 0x0601FA07, 0xF6FAFB01);
	r2 = D(r2, s0_1_2, 0xF9ECFD00, 0xFA01E706, 0xFAFAF4F9, 0xF903FA05);
	r3 = D(r3, s0_1_2, 0x0003FD04, 0xFE0105FF, 0xE6FBF5E9, 0x000104FE);
	r4 = D(r4, s0_1_2, 0xEDEEE9E7, 0xEA03FBE7, 0xAC15EDC5, 0xFED1EAE2);
	r5 = D(r5, s0_1_2, 0xFAFE0102, 0xF6FDF8F9, 0xD808DCD9, 0xFFFBFEF8);
	r6 = D(r6, s0_1_2, 0xEEF5F5FD, 0xFEFAFAFA, 0xB7122415, 0xEFEAFEE0);
	r7 = D(r7, s0_1_2, 0xE50507FE, 0xFEFCFCFE, 0xF7F4EFFB, 0xFEFE0A02);
	r0 = D(r0, s0_2_0, 0x0704F9FC, 0xF8FCFF03, 0xF7050A01, 0xFAF901FF);
	r1 = D(r1, s0_2_0, 0xF5F200FB, 0x00FB0204, 0x020305FB, 0xFBF7FB01);
	r2 = D(r2, s0_2_0, 0xFC0008FE, 0xFA0AFC00, 0xF9FC0000, 0xFEFF03FD);
	r3 = D(r3, s0_2_0, 0xFDF50904, 0xF60B10FF, 0xE315DBFF, 0x01FD0600);
	r4 = D(r4, s0_2_0, 0x0001F8F7, 0xF9050402, 0x020634F7, 0x0CE5FCF9);
	r5 = D(r5, s0_2_0, 0xFBFF02FE, 0x030103FC, 0x81E010EE, 0x02F805FF);
	r6 = D(r6, s0_2_0, 0x06F806F9, 0x01F907F9, 0xED8123F4, 0x0ADE23F7);
	r7 = D(r7, s0_2_0, 0xFE03FC00, 0xFBFAFE02, 0x02FCF7FD, 0xF8030609);
	r0 = D(r0, s0_2_1, 0xFE030A02, 0xF5FDF401, 0xF1F9F2F7, 0xF9F808F5);
	r1 = D(r1, s0_2_1, 0xFA0100EA, 0xFEFFFFFF, 0x0705EDEB, 0xF7FF04D7);
	r2 = D(r2, s0_2_1, 0xFAECF0F8, 0xFE0707F3, 0xFBFE00FF, 0xFC03F2F0);
	r3 = D(r3, s0_2_1, 0x00050505, 0xF8FA17D9, 0xEA0C1EF6, 0xF50608F1);
	r4 = D(r4, s0_2_1, 0xFEF706F5, 0xF30BEFDE, 0xA914FA81, 0xFFC4E101);
	r5 = D(r5, s0_2_1, 0xFAFCF9FF, 0xFEF800F9, 0x171F8E35, 0xFEFA0AF1);
	r6 = D(r6, s0_2_1, 0x03E402D3, 0xFBFEF9F0, 0x0D81C881, 0xFDDDDFDD);
	r7 = D(r7, s0_2_1, 0xFE0307FE, 0x00FFEE01, 0xFDFDF4EA, 0xF50408F2);
	r0 = D(r0, s0_2_2, 0xFF05FE00, 0xF7FBF200, 0x02F605F9, 0xFC00F1F2);
	r1 = D(r1, s0_2_2, 0x0000FCFF, 0x0100FFFF, 0x0C0003FB, 0xFB01FE05);
	r2 = D(r2, s0_2_2, 0xF3F8EDE2, 0xF900FBFA, 0xFD00F9FD, 0xF6FE00F8);
	r3 = D(r3, s0_2_2, 0xFEFEFCFD, 0xF7FEF6F3, 0xF2FFE1F3, 0xF8FEFCFC);
	r4 = D(r4, s0_2_2, 0xF10208E9, 0xE40408E9, 0xC402D981, 0x18A507F0);
	r5 = D(r5, s0_2_2, 0x05FE03FC, 0xFFF9FFF3, 0xD60DE3E4, 0xFAF9FD01);
	r6 = D(r6, s0_2_2, 0x05ECFFF8, 0xF4F900E8, 0xEB81BB88, 0x09092BEA);
	r7 = D(r7, s0_2_2, 0xFB00FCF8, 0xFBFDFCFA, 0xFB03FCF3, 0xFFFE0001);
	r0 = D(r0, s1_0_0, 0xFE03F9FD, 0x01FC0804, 0x0203F500, 0x00FDFE01);
	r1 = D(r1, s1_0_0, 0x08F90207, 0x070002FA, 0xF901FBFE, 0x06FE09FD);
	r2 = D(r2, s1_0_0, 0xFAFDFA00, 0xFF02FF01, 0x0100FAFD, 0x05FDF401);
	r3 = D(r3, s1_0_0, 0x15F509F3, 0x0D00F102, 0x01030404, 0x07FE04FB);
	r4 = D(r4, s1_0_0, 0x06F8FCF1, 0xEFF8EE09, 0xC5CBF6ED, 0xF2EAEC07);
	r5 = D(r5, s1_0_0, 0x05FFF803, 0x07051109, 0xEDED0B0D, 0x000008FF);
	r6 = D(r6, s1_0_0, 0xEE03090F, 0xFEFC0402, 0x14D5C704, 0x2807F12D);
	r7 = D(r7, s1_0_0, 0x0000F4FB, 0x00FDFE02, 0x01FCFCFF, 0x1A06F807);
	r0 = D(r0, s1_0_1, 0x0DF9080F, 0x0200FD02, 0x0DF5FC0C, 0xF803ECF4);
	r1 = D(r1, s1_0_1, 0xF5FBEB14, 0xDBF90A05, 0xF015EDF7, 0xFCEE0016);
	r2 = D(r2, s1_0_1, 0x07F5FDEF, 0xED020BF5, 0xFB06F807, 0xF501100D);
	r3 = D(r3, s1_0_1, 0xFA04E6FF, 0xF0ED09EA, 0xD5F4F402, 0x0EFE06F0);
	r4 = D(r4, s1_0_1, 0xE0EF2516, 0x03F7ECF4, 0x00DBC7F9, 0xF2B8FC31);
	r5 = D(r5, s1_0_1, 0x05F9FD00, 0xFB02FB27, 0x0081131E, 0xFF00F8FD);
	r6 = D(r6, s1_0_1, 0xFE05F300, 0xFEFE09EF, 0x31F281DF, 0x18BDC11D);
	r7 = D(r7, s1_0_1, 0x0C03FAFD, 0x02FE0707, 0x06FC0710, 0x02FC09F3);
	r0 = D(r0, s1_0_2, 0xFB05000E, 0x04FFF90D, 0x04FC0200, 0xFE04F501);
	r1 = D(r1, s1_0_2, 0x0101FF08, 0x0C06FFF9, 0xFE06FDEF, 0x0000020A);
	r2 = D(r2, s1_0_2, 0x04ECFFE5, 0x010709FA, 0x0911F605, 0xF7FCFAE3);
	r3 = D(r3, s1_0_2, 0x06070502, 0x01020410, 0x0EF6150E, 0x07FD040A);
	r4 = D(r4, s1_0_2, 0x1A000FEF, 0xF2FAF906, 0xD5D7FAF6, 0x05810CA5);
	r5 = D(r5, s1_0_2, 0x0200FFFA, 0x0804F50D, 0x2AF6FBCC, 0x0900F7F2);
	r6 = D(r6, s1_0_2, 0x06FA0FFD, 0x08F90806, 0x20D28112, 0x08EFAC4C);
	r7 = D(r7, s1_0_2, 0xEF00F7FA, 0x0500060C, 0x01030218, 0x00FC000C);
	r0 = D(r0, s1_1_0, 0xF6000903, 0x06FAFD06, 0xF8FC02FA, 0x0901F803);
	r1 = D(r1, s1_1_0, 0x1003E7FB, 0x02FBFEFC, 0x020DF0F5, 0xF9FDF9FE);
	r2 = D(r2, s1_1_0, 0xFB03FE12, 0xFCFD0100, 0x0B03F7FB, 0xF5000600);
	r3 = D(r3, s1_1_0, 0x0404EDF9, 0xFFFBEEFC, 0x11FDF9FD, 0x0AFEFCFE);
	r4 = D(r4, s1_1_0, 0xEAF60C05, 0xCE000F10, 0xDADF090D, 0xFCFCE104);
	r5 = D(r5, s1_1_0, 0xFEFCF4FE, 0x01FFF60C, 0x07EBEDEA, 0x0301F505);
	r6 = D(r6, s1_1_0, 0x0907E2F4, 0xFBF9F5FD, 0x2BEABAF5, 0x0FFDE5EE);
	r7 = D(r7, s1_1_0, 0x08FF01FF, 0xFF0101FD, 0x0907F703, 0x0AF4F3FF);
	r0 = D(r0, s1_1_1, 0x1831E1D9, 0x0101F8FE, 0xFAFBEC06, 0x0C12F2FA);
	r1 = D(r1, s1_1_1, 0x0E080CED, 0x0406FCF6, 0xDFE41F27, 0x1A0E0EEA);
	r2 = D(r2, s1_1_1, 0xE60B0A1C, 0xF40B0E10, 0x110FEAF9, 0x14FEE8E6);
	r3 = D(r3, s1_1_1, 0x00FC17F3, 0xD9FA0914, 0xDF17FE22, 0x09F4FE0D);
	r4 = D(r4, s1_1_1, 0x2FFED6E7, 0x26F7A6DD, 0xF7D6D6BE, 0x5108B0FE);
	r5 = D(r5, s1_1_1, 0xF1FAFD0C, 0x04F8D726, 0x8181174D, 0x0D0C04E7);
	r6 = D(r6, s1_1_1, 0x1E0EE9EE, 0x14FD09F6, 0xDDFFCB33, 0x0B13B004);
	r7 = D(r7, s1_1_1, 0xE801F605, 0x06FEF303, 0xF6FDFB06, 0xF7FDFC08);
	r0 = D(r0, s1_1_2, 0x08FD0EE8, 0xFA07030E, 0xF606EB0C, 0x0E0707EA);
	r1 = D(r1, s1_1_2, 0xFF010201, 0x02FD0704, 0xFA12E313, 0x0301FE03);
	r2 = D(r2, s1_1_2, 0x00F9FB24, 0x0206FBF6, 0x07FDF2FF, 0xF608E713);
	r3 = D(r3, s1_1_2, 0x05FE0507, 0x09060AF3, 0xF9EAFCE4, 0x0D020AF6);
	r4 = D(r4, s1_1_2, 0xF1FD1B07, 0xFAFF011C, 0xD2EA0803, 0xE50D1CFD);
	r5 = D(r5, s1_1_2, 0x0202F905, 0x04030411, 0x4E101008, 0x030203FE);
	r6 = D(r6, s1_1_2, 0x0704090C, 0x11F80106, 0x0107040A, 0x0FEBF3F9);
	r7 = D(r7, s1_1_2, 0x06FF0FEF, 0x06010109, 0xF3F8F80A, 0xFD060D01);
	r0 = D(r0, s1_2_0, 0xFF00FB01, 0x0B05F503, 0x00FDFCFD, 0xFE01F800);
	r1 = D(r1, s1_2_0, 0xF2FBFC03, 0xFAFE0202, 0xFC08F7FD, 0xFAFD0202);
	r2 = D(r2, s1_2_0, 0x0702FCFD, 0x0202FFFC, 0xFDFD00FC, 0xF8FE01FE);
	r3 = D(r3, s1_2_0, 0xF3FB0509, 0xFAF8FC05, 0x0AFFF7F9, 0xFEFC0401);
	r4 = D(r4, s1_2_0, 0x01FCFFFF, 0xF20001FC, 0xF2FE111A, 0x14EDFF1D);
	r5 = D(r5, s1_2_0, 0x03FBFDFE, 0x0B0104FD, 0xFAE8FCE1, 0x04FB0106);
	r6 = D(r6, s1_2_0, 0x00FF01FF, 0xFCFB0603, 0xDDF9131C, 0xF300FE07);
	r7 = D(r7, s1_2_0, 0xFF0103FD, 0x0907FBFC, 0x01FF02FC, 0xFEFBFA05);
	r0 = D(r0, s1_2_1, 0xDB020906, 0x1903F6FC, 0x0705FCF9, 0xEBF9F90A);
	r1 = D(r1, s1_2_1, 0x01FAF904, 0xFCFBFC04, 0x1B13F5F6, 0xFDFBF204);
	r2 = D(r2, s1_2_1, 0x0801EC06, 0xFF04FC02, 0x07FBFCFF, 0x0DFBEB08);
	r3 = D(r3, s1_2_1, 0x02FEF703, 0x00FBF602, 0xF309FC09, 0x0FFEF4FB);
	r4 = D(r4, s1_2_1, 0xEDFD0C08, 0x1CFED006, 0x1CEBDFEB, 0xEEEFF817);
	r5 = D(r5, s1_2_1, 0x050402FE, 0x0C0302FE, 0x81DFEC3B, 0xFDF9F408);
	r6 = D(r6, s1_2_1, 0xE6FD0A01, 0x05FDF303, 0xF0DBFE30, 0x05001C07);
	r7 = D(r7, s1_2_1, 0x0502FA01, 0x1209FCFB, 0x04FFFB01, 0x0203FAFE);
	r0 = D(r0, s1_2_2, 0x04FDED0A, 0x0701FA04, 0xFE0108FF, 0x05FDEE0A);
	r1 = D(r1, s1_2_2, 0x02020601, 0x00FF0005, 0xF90E08F8, 0xFD000CFF);
	r2 = D(r2, s1_2_2, 0xFDFCE50A, 0x00FEF9FD, 0x05FFF700, 0xFD010CFC);
	r3 = D(r3, s1_2_2, 0x03020201, 0x0AFFF604, 0x0608E905, 0x0401F9FF);
	r4 = D(r4, s1_2_2, 0x0D0502F6, 0xF50519F7, 0xDB11C634, 0x050BC71E);
	r5 = D(r5, s1_2_2, 0x01FF01FF, 0xFE0509F8, 0x040B1C90, 0x010104FD);
	r6 = D(r6, s1_2_2, 0xF001EF14, 0x04000DF6, 0xF0FBE131, 0xED07F606);
	r7 = D(r7, s1_2_2, 0x0CFCEC01, 0x05FFFAFF, 0x050A09F2, 0x01030005);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF06FEFC, 0x04F50202, 0x0200FE05, 0x0403FFFE);
	r1 = D(r1, s0_0_0, 0x0308F5FA, 0xFE02F700, 0x0508FD02, 0xFFFFFBFC);
	r2 = D(r2, s0_0_0, 0x03010202, 0x0100F904, 0x01F90100, 0xFFFFFA06);
	r3 = D(r3, s0_0_0, 0x011EF5EC, 0xFBFDFD03, 0x02F9F40C, 0x00F801FD);
	r4 = D(r4, s0_0_0, 0xF410F3FB, 0xFC03F509, 0x051B020C, 0x0501FF10);
	r5 = D(r5, s0_0_0, 0x01FD0201, 0x06F90001, 0xE500F404, 0x04FFFFFF);
	r6 = D(r6, s0_0_0, 0xFDEE0EFD, 0xFD05FFFB, 0xFCCEE608, 0xD0E8BF2A);
	r7 = D(r7, s0_0_0, 0x0401FA02, 0x01010200, 0x000001FC, 0xFF00FCFD);
	r0 = D(r0, s0_0_1, 0x080DF9F3, 0x06FAFB02, 0x09F4FB03, 0x00F90100);
	r1 = D(r1, s0_0_1, 0xFD02FE04, 0x071409F9, 0x0007FE05, 0xFA0907F4);
	r2 = D(r2, s0_0_1, 0x080B00FB, 0x07F9010D, 0x0CE7080C, 0xFD0DFE01);
	r3 = D(r3, s0_0_1, 0x05EDED0D, 0xF7060305, 0x0A0B0413, 0x04FC01F7);
	r4 = D(r4, s0_0_1, 0xF90206FB, 0xFC0E081A, 0xFDC60722, 0xE212EAF5);
	r5 = D(r5, s0_0_1, 0x030B01FC, 0x0AED050B, 0xFEDBF514, 0x07FF0402);
	r6 = D(r6, s0_0_1, 0xFFF9F803, 0x00FC01FD, 0xFCF09F10, 0xC01FBECE);
	r7 = D(r7, s0_0_1, 0x0309F4FE, 0x02FF04FE, 0x0405FFFA, 0xF3F616FD);
	r0 = D(r0, s0_0_2, 0x000804FE, 0x04FBFEFF, 0xFAFE04FE, 0x03FDFEF9);
	r1 = D(r1, s0_0_2, 0xFEFF03FA, 0xFBEF07FD, 0x0204FCFF, 0xFEFBFC00);
	r2 = D(r2, s0_0_2, 0xFFF80700, 0x07F8FE03, 0x06F104F5, 0x0508F806);
	r3 = D(r3, s0_0_2, 0xF7000400, 0xFCF80305, 0xDFDB2A08, 0xFDFB0305);
	r4 = D(r4, s0_0_2, 0x06EA04F7, 0xF600EE11, 0xF208E8FB, 0x81DBD39B);
	r5 = D(r5, s0_0_2, 0x0101FD00, 0x05F1FB05, 0x09CC13F6, 0x02FBFEFE);
	r6 = D(r6, s0_0_2, 0x04F70309, 0x01F90303, 0x111BC4FA, 0xCB0FF612);
	r7 = D(r7, s0_0_2, 0x000DFA12, 0x02F90405, 0x01FB0608, 0x04FA000C);
	r0 = D(r0, s0_1_0, 0x040E0907, 0x05F8F40C, 0x03F8FA06, 0xFEFFFFFE);
	r1 = D(r1, s0_1_0, 0xFE16F704, 0xFDFCFCFF, 0x03FFFBF0, 0xF70AF3FA);
	r2 = D(r2, s0_1_0, 0x000AF604, 0x0400F803, 0x02FD0401, 0xFDFA0803);
	r3 = D(r3, s0_1_0, 0x0404FB13, 0x0103F400, 0x05EDF205, 0xFDFFFBFC);
	r4 = D(r4, s0_1_0, 0x020CFDFF, 0x0307F016, 0xF210FB21, 0xF505E3EE);
	r5 = D(r5, s0_1_0, 0x010FF5FF, 0x0217E1FB, 0xCA0BECF8, 0x0007FB02);
	r6 = D(r6, s0_1_0, 0x0B0FEE09, 0xFE0EF8FF, 0x0EFD1538, 0xFDE30434);
	r7 = D(r7, s0_1_0, 0x0300FBFB, 0x04FF01F9, 0x0502FDFD, 0x01FEFA08);
	r0 = D(r0, s0_1_1, 0xDD34EAE3, 0x051E0DF3, 0xF333F7EB, 0x11FD0713);
	r1 = D(r1, s0_1_1, 0xF2F2F607, 0xF103EF09, 0x31EB0F20, 0xFE09EB15);
	r2 = D(r2, s0_1_1, 0xF915FBEA, 0x0DEC0315, 0xFC18FC03, 0xF12916F3);
	r3 = D(r3, s0_1_1, 0xED0305FB, 0xE51B0825, 0xF92E0A1B, 0x0800F807);
	r4 = D(r4, s0_1_1, 0xF11EF7E6, 0xE929040B, 0xF2F20B32, 0x0E1D0114);
	r5 = D(r5, s0_1_1, 0x001E0A0A, 0xCF37F6E6, 0xF2FB172A, 0x072801FA);
	r6 = D(r6, s0_1_1, 0x0239FD02, 0x060907FE, 0x051F5049, 0x2713EC41);
	r7 = D(r7, s0_1_1, 0xFD18EE0A, 0xFE0903EC, 0xF71BFBE2, 0xE60607FA);
	r0 = D(r0, s0_1_2, 0x00E70D17, 0xF9FF0401, 0xFE04ED10, 0xEBF604FD);
	r1 = D(r1, s0_1_2, 0x01FEFE08, 0x0105FC02, 0x0824EBED, 0xFAFC08FE);
	r2 = D(r2, s0_1_2, 0xFDEEF7FE, 0xF012100A, 0xF0070610, 0x020AFB02);
	r3 = D(r3, s0_1_2, 0x0202FA0B, 0x01EC0E07, 0xE7F21501, 0xFCF50B0B);
	r4 = D(r4, s0_1_2, 0xE800FC02, 0xF8FCF918, 0xBF19FB03, 0xF021E12C);
	r5 = D(r5, s0_1_2, 0x0206F8FB, 0x0507FB0F, 0xD7AA4A07, 0x0804FCFD);
	r6 = D(r6, s0_1_2, 0x01FCFB03, 0xFBF808F4, 0xE415131A, 0x09ECDA37);
	r7 = D(r7, s0_1_2, 0xF81E050D, 0xF6000CFA, 0xF91002FB, 0xFDFCFD07);
	r0 = D(r0, s0_2_0, 0xFC04FC02, 0x00FDF900, 0xFE04F8FD, 0x0100FF03);
	r1 = D(r1, s0_2_0, 0xF701FCF6, 0x0003FC01, 0x060703F4, 0xFF00FF00);
	r2 = D(r2, s0_2_0, 0xFEF700FD, 0xFBFAFEF9, 0x030202FC, 0x01FFFA0F);
	r3 = D(r3, s0_2_0, 0xF508FAF3, 0xFC0601FF, 0xFCF5FCFA, 0x01FDFCFF);
	r4 = D(r4, s0_2_0, 0x03FAFD05, 0x0702F209, 0xE40EFC11, 0x0B0EE7EF);
	r5 = D(r5, s0_2_0, 0x020404F9, 0x02EF0508, 0x8100FC14, 0x0101FD09);
	r6 = D(r6, s0_2_0, 0xF7FEFD07, 0x0004FD03, 0x012AF4E9, 0xF41306F9);
	r7 = D(r7, s0_2_0, 0x06FEFCFF, 0x01F806FE, 0xFFF60102, 0x0301FF05);
	r0 = D(r0, s0_2_1, 0x0E0EF8E2, 0xFDFCFC01, 0x00FCFB0E, 0xF512F7F1);
	r1 = D(r1, s0_2_1, 0x0103FFFB, 0xFD030003, 0xF407FB15, 0xF80101F5);
	r2 = D(r2, s0_2_1, 0xFC12F5FC, 0x0AF8FD18, 0xFD0202FA, 0x0615FE05);
	r3 = D(r3, s0_2_1, 0x00FFFB05, 0x05080014, 0xF8070613, 0x03F6000D);
	r4 = D(r4, s0_2_1, 0xFB10FDF9, 0xF9FE080E, 0xD5DF02F7, 0xEF34F6EA);
	r5 = D(r5, s0_2_1, 0x02FDFE05, 0x03EE010A, 0xD9E4F724, 0xFA12FBEA);
	r6 = D(r6, s0_2_1, 0xFCFFFCEC, 0xFA11F8EC, 0xBF00FE81, 0xF0F905E5);
	r7 = D(r7, s0_2_1, 0xFD00FF03, 0xFEFB0105, 0x01F8FE10, 0xF90508FF);
	r0 = D(r0, s0_2_2, 0xFF12F90D, 0x0500F5FE, 0xFEF6FFF6, 0x0202FE0E);
	r1 = D(r1, s0_2_2, 0xFF000002, 0xFE000101, 0x07F302F2, 0xFE01FCFF);
	r2 = D(r2, s0_2_2, 0xFC14F8FE, 0x05FEF914, 0x00F90003, 0x060700FD);
	r3 = D(r3, s0_2_2, 0x00FC0102, 0xF4FE0B05, 0x01F00511, 0xF8FC0905);
	r4 = D(r4, s0_2_2, 0xFEF201FD, 0x010004F8, 0xE7FA0911, 0xD21913C1);
	r5 = D(r5, s0_2_2, 0xFFF901FD, 0x00FAFC01, 0xCCCA40AB, 0xFF0A02FC);
	r6 = D(r6, s0_2_2, 0x05FBFCFF, 0xF9FDFD04, 0xDAED22A7, 0x05020CE3);
	r7 = D(r7, s0_2_2, 0x0201010A, 0x08FE00FB, 0x04F6F503, 0x07000202);
	r0 = D(r0, s1_0_0, 0xFC01FB02, 0xFCFF04FE, 0x0400FEFE, 0x04FF05FE);
	r1 = D(r1, s1_0_0, 0xF4040008, 0x0107FA03, 0xFFFFFF01, 0xFC050106);
	r2 = D(r2, s1_0_0, 0xFCFF04F9, 0xFD02FE02, 0x0205F703, 0xFCFC02FC);
	r3 = D(r3, s1_0_0, 0xEE0DEE1D, 0x000CFEFD, 0x00FBFD06, 0x0300FB03);
	r4 = D(r4, s1_0_0, 0x1305FEFC, 0xEFFD0FFE, 0xEFFA2901, 0xC6E90FFA);
	r5 = D(r5, s1_0_0, 0x020003FD, 0x00F9FFF9, 0xE10CFE0A, 0x0300FDFE);
	r6 = D(r6, s1_0_0, 0xF0FDEE0B, 0x0302FC01, 0xF3F7E1F9, 0xE0E3D902);
	r7 = D(r7, s1_0_0, 0x02FFFE06, 0xFFFB0403, 0xF8FC0207, 0x0504FDFB);
	r0 = D(r0, s1_0_1, 0xFAE90DFE, 0x01FCFEFD, 0xFC000900, 0x000AF707);
	r1 = D(r1, s1_0_1, 0xEE110A09, 0xDB070725, 0x000AF20D, 0xEF0BF808);
	r2 = D(r2, s1_0_1, 0x02FE0602, 0xFE02FB00, 0x030B0307, 0x0200FCFD);
	r3 = D(r3, s1_0_1, 0xEB05190B, 0x000BFFFA, 0xE20F0A0C, 0xFF010200);
	r4 = D(r4, s1_0_1, 0xE1FDE415, 0xFFF9F715, 0xFF04F122, 0xFEC00416);
	r5 = D(r5, s1_0_1, 0x02FCFDFB, 0x01080201, 0xEF0D25F4, 0x010DFE01);
	r6 = D(r6, s1_0_1, 0x040003FE, 0xF9FF0003, 0x17FDE516, 0x0081022E);
	r7 = D(r7, s1_0_1, 0x050403FA, 0xFBF50103, 0x02F70201, 0x03F2F3F6);
	r0 = D(r0, s1_0_2, 0x00F1F6FD, 0xFC0600FC, 0xFD060200, 0xF90B0006);
	r1 = D(r1, s1_0_2, 0xFF000001, 0xFA000D06, 0xFC090706, 0xF8050608);
	r2 = D(r2, s1_0_2, 0x05F9FBFE, 0xFDFDFE06, 0xFEFFFFFD, 0xFF0904FF);
	r3 = D(r3, s1_0_2, 0xFDFD0301, 0x00F8F401, 0x09E9FB04, 0x01F3FAFE);
	r4 = D(r4, s1_0_2, 0x07FAFD05, 0xFA09EE0D, 0xF821060E, 0xF8E1B826);
	r5 = D(r5, s1_0_2, 0xFC030002, 0x0503FDFF, 0x0AF60D0F, 0x040700FE);
	r6 = D(r6, s1_0_2, 0x06FC00FE, 0x02FAFB03, 0xF319D50E, 0x0C0EE825);
	r7 = D(r7, s1_0_2, 0xF109FA09, 0x01EEFDFD, 0xFFEDFAFF, 0xFAFB0205);
	r0 = D(r0, s1_1_0, 0x02F704ED, 0xE7F9060C, 0xFA030A04, 0x0306F803);
	r1 = D(r1, s1_1_0, 0xFB00111D, 0xF70A0D05, 0xF706EF23, 0xFF08FDFF);
	r2 = D(r2, s1_1_0, 0x0BF7F2FE, 0x02F9FE02, 0xFD040304, 0xF6040001);
	r3 = D(r3, s1_1_0, 0x04061E10, 0xEDFFFB03, 0x0DFEF402, 0x020D09FF);
	r4 = D(r4, s1_1_0, 0xFCFAEE06, 0x06F604FB, 0x18E7120D, 0xD71B07E0);
	r5 = D(r5, s1_1_0, 0xEAFBF702, 0x00EDDE0A, 0x1606E002, 0xFE0200FF);
	r6 = D(r6, s1_1_0, 0x0B04060C, 0x06050202, 0xF9EFFD38, 0x12F9FD47);
	r7 = D(r7, s1_1_0, 0x07020105, 0x03FBF903, 0x00FCE50A, 0x090E09FE);
	r0 = D(r0, s1_1_1, 0xD34FE128, 0x09F6EB08, 0xDAEDF81A, 0xF5F3071A);
	r1 = D(r1, s1_1_1, 0x01FB060E, 0x12000117, 0x2EA115DF, 0x00F31532);
	r2 = D(r2, s1_1_1, 0xF3FCE814, 0xFFF10907, 0xFBF21313, 0xF900EB01);
	r3 = D(r3, s1_1_1, 0x00010310, 0xE9FCFE15, 0xCDCDFE23, 0xF4E9F21F);
	r4 = D(r4, s1_1_1, 0x281AF302, 0xEDFAFB12, 0xC6DDC01E, 0xCD102124);
	r5 = D(r5, s1_1_1, 0xF0FD100A, 0xEDF0F818, 0xA913243A, 0x0A0106FF);
	r6 = D(r6, s1_1_1, 0x14ECFC15, 0x0606ED11, 0xE5BC0F42, 0x230E1F2C);
	r7 = D(r7, s1_1_1, 0xF6F3E019, 0xEEF4E815, 0xF3E3E825, 0xDDFF0B0C);
	r0 = D(r0, s1_1_2, 0xFADE0206, 0xF0FAEF07, 0xF4021011, 0xF5F80C02);
	r1 = D(r1, s1_1_2, 0x02FE03FE, 0x03FE0A02, 0x0217F200, 0xFE0006FC);
	r2 = D(r2, s1_1_2, 0xF20F030A, 0xE900FEFC, 0xFCF70BF8, 0x08FFF805);
	r3 = D(r3, s1_1_2, 0x04FBFE03, 0xFDFE0100, 0xE50403FF, 0xF8F8F9FC);
	r4 = D(r4, s1_1_2, 0xD705ED23, 0xFBF5DD09, 0x09F6F12B, 0xE7EB2820);
	r5 = D(r5, s1_1_2, 0x01050302, 0x06030104, 0x08FA14FE, 0x0208FF04);
	r6 = D(r6, s1_1_2, 0xFB09FD11, 0xED0AF607, 0xE4033F38, 0xD6FE4516);
	r7 = D(r7, s1_1_2, 0x12FEF6FA, 0x02FFF5FE, 0xFE040005, 0x01FD0003);
	r0 = D(r0, s1_2_0, 0x11F8F202, 0x0DFC03FF, 0x01020703, 0xF5FC0603);
	r1 = D(r1, s1_2_0, 0xE6010C02, 0x01FB0800, 0xE5060901, 0xF8FC0A03);
	r2 = D(r2, s1_2_0, 0xF7090804, 0xF40AFCF9, 0xFDFD0C04, 0x0BFBF102);
	r3 = D(r3, s1_2_0, 0x08F80E00, 0x00FDFF03, 0xEA1606FC, 0xF40304FE);
	r4 = D(r4, s1_2_0, 0x0DFAFC03, 0x1AEEFFFC, 0x08E00E02, 0xF6E8F002);
	r5 = D(r5, s1_2_0, 0x07030401, 0xFE010A04, 0x81382014, 0x14F7EFFA);
	r6 = D(r6, s1_2_0, 0x14FDE7FC, 0x0CF9EFFE, 0x34BC3ADC, 0x0A05D2E7);
	r7 = D(r7, s1_2_0, 0xFCFC08FD, 0x04030305, 0x00040A09, 0xFBFE0500);
	r0 = D(r0, s1_2_1, 0x09ED07FD, 0x25090C09, 0x0906040B, 0xFFF70F02);
	r1 = D(r1, s1_2_1, 0x000408FF, 0x00000901, 0xF10EEE11, 0xF6080802);
	r2 = D(r2, s1_2_1, 0xF3010519, 0xFCF6FC00, 0x03FC0B02, 0x01020CFC);
	r3 = D(r3, s1_2_1, 0xFF0201FF, 0x00FDE1FD, 0xF9EAEE0E, 0x0309FB01);
	r4 = D(r4, s1_2_1, 0xFEFC020C, 0x01101401, 0x952BD719, 0x29DBD3F4);
	r5 = D(r5, s1_2_1, 0x0003FF01, 0x07FE0D0C, 0xCEB3F53B, 0x0BFA0302);
	r6 = D(r6, s1_2_1, 0xF5F1F113, 0x0106000A, 0xF0C839FD, 0x1FE9FA16);
	r7 = D(r7, s1_2_1, 0x11FC0400, 0x12060304, 0x04020303, 0xFBFDFC01);
	r0 = D(r0, s1_2_2, 0xF802F7FC, 0x08FF0C00, 0x01000303, 0x05FE0AFC);
	r1 = D(r1, s1_2_2, 0x03FDFA01, 0xFFFEFE00, 0xFDF70504, 0x07FD0103);
	r2 = D(r2, s1_2_2, 0xEEFDFEF5, 0xF9000403, 0x06000603, 0xFDFEF4FB);
	r3 = D(r3, s1_2_2, 0xFCFFFC04, 0xF00504FD, 0xF8FF06FF, 0xFFFB0203);
	r4 = D(r4, s1_2_2, 0x1304F505, 0xF7FC0004, 0x0DE3C411, 0x1EED0706);
	r5 = D(r5, s1_2_2, 0xFE0003FF, 0x04FF0304, 0xDCEB4204, 0x0202F7FE);
	r6 = D(r6, s1_2_2, 0x00FD0400, 0x0D04F00F, 0x28E53620, 0x040508FC);
	r7 = D(r7, s1_2_2, 0xEE03FB00, 0x07FB0804, 0x0609FC08, 0xF8FFFFFE);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.452e-02, -8.006e-03, -1.635e-02, -1.305e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.410e-02, -2.074e-02, -7.354e-03, -1.358e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.550e-02, -1.194e-02, -2.076e-02, -3.689e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.133e-02, -2.607e-02, -3.691e-02, -1.972e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.234e-02, -2.276e-02, -9.474e-02, -4.594e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-9.135e-03, -1.189e-02, -1.043e-01, -3.982e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-7.922e-03, -1.238e-02, -7.300e-02, -3.066e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-8.236e-03, -1.740e-02, -1.336e-02, -2.937e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_4x32_DS_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			V4 sr0 = V4(conv4_gather(p, 0));
			V4 sg0 = V4(conv4_gather(p, 1));
			V4 sb0 = V4(conv4_gather(p, 2));
			V4 sa0 = V4(conv4_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			V4 sr1 = V4(conv4_gather(p, 0));
			V4 sg1 = V4(conv4_gather(p, 1));
			V4 sb1 = V4(conv4_gather(p, 2));
			V4 sa1 = V4(conv4_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(6.678e-03, 5.685e-04, 5.786e-04, 5.606e-04, -2.409e-02, -4.209e-03, -5.215e-03, 2.255e-03, 3.162e-02, 1.113e-02, 1.350e-02, 1.766e-03, -6.058e-03, -7.231e-03, -4.317e-03, 5.786e-04) * s0_0_0;
	r0 += M4(1.752e-02, 1.764e-02, -2.282e-04, 6.143e-04, -6.372e-02, -5.788e-02, -1.229e-02, -1.119e-02, -4.579e-02, -2.925e-02, 1.354e-02, 2.838e-02, 4.215e-02, 1.443e-02, -5.350e-04, -6.209e-03) * s0_0_1;
	r0 += M4(9.381e-04, 6.363e-03, 5.273e-04, 2.447e-04, -2.474e-03, -1.739e-02, -2.520e-04, -1.973e-03, -5.600e-03, 5.768e-03, -4.623e-03, 3.905e-03, -2.025e-03, 7.016e-03, -2.386e-03, -5.784e-03) * s0_0_2;
	r0 += M4(1.886e-02, 7.868e-04, 1.910e-02, 1.646e-03, -1.431e-02, 1.041e-04, 9.330e-03, -1.220e-04, -3.670e-02, 4.724e-03, -6.416e-02, 3.308e-02, 3.625e-02, -1.703e-02, 2.167e-02, -1.008e-02) * s0_1_0;
	r0 += M4(5.163e-02, 5.188e-02, 5.086e-02, 5.188e-02, -5.310e-02, -4.163e-02, 1.769e-01, 1.273e-01, 1.120e-01, 1.466e-01, 4.594e-02, -2.238e-01, -1.987e-01, -1.217e-02, 9.009e-02, 1.772e-01) * s0_1_1;
	r0 += M4(3.375e-04, 1.837e-02, 5.149e-04, 1.837e-02, -4.935e-04, -2.320e-02, 2.582e-03, 6.031e-02, -7.415e-03, -1.574e-02, -7.048e-03, 1.591e-02, 5.443e-03, -4.395e-02, 2.100e-03, -3.747e-02) * s0_1_2;
	r0 += M4(4.253e-04, 6.557e-04, 6.516e-03, 3.916e-04, -9.122e-04, -1.157e-03, -1.017e-02, -1.182e-03, 1.510e-03, -8.996e-04, 1.763e-02, 1.053e-02, 3.492e-03, 1.509e-03, 4.714e-03, -3.518e-03) * s0_2_0;
	r0 += M4(6.665e-04, 7.068e-04, 1.830e-02, 1.862e-02, -9.349e-04, -2.823e-04, -1.816e-02, -2.155e-02, -7.114e-03, -6.306e-03, -1.874e-02, 5.359e-02, 2.252e-02, 9.994e-03, -8.204e-03, -6.111e-02) * s0_2_1;
	r0 += M4(4.827e-04, 6.815e-04, 4.779e-04, 6.687e-03, -1.348e-03, -1.796e-03, -3.823e-03, -8.636e-03, -1.374e-03, -5.907e-03, -4.623e-03, -9.812e-03, -7.642e-04, 3.926e-03, 3.597e-03, 8.654e-03) * s0_2_2;
	r0 += M4(5.449e-04, -1.583e-05, 3.450e-05, -3.676e-04, 2.854e-04, 5.261e-04, 3.482e-04, 6.866e-04, -5.959e-03, -8.839e-04, -3.921e-04, -6.315e-04, 4.544e-03, 1.766e-03, 4.301e-04, -3.283e-04) * s1_0_0;
	r0 += M4(-6.661e-03, -6.137e-04, -2.300e-03, 1.510e-04, 7.013e-03, 2.698e-03, -8.044e-04, -1.054e-03, -1.666e-02, -1.654e-02, 1.986e-04, -6.614e-05, 1.228e-02, -8.025e-03, -2.374e-03, -2.110e-03) * s1_0_1;
	r0 += M4(7.249e-03, 1.691e-02, -1.342e-03, -3.671e-03, -6.787e-04, 4.093e-03, 2.419e-04, 1.419e-03, -1.217e-03, -5.916e-03, -6.682e-04, -8.778e-04, 1.859e-03, -4.538e-04, -8.629e-04, 1.873e-03) * s1_0_2;
	r0 += M4(-6.801e-03, -1.788e-03, 1.729e-05, 2.736e-04, -1.740e-02, -3.411e-03, 3.198e-03, -3.020e-03, -1.685e-02, -3.756e-04, -1.703e-02, -7.164e-04, 1.714e-02, 3.110e-03, -3.736e-03, 4.406e-03) * s1_1_0;
	r0 += M4(3.037e-03, 9.264e-03, 4.504e-02, -3.394e-03, 6.276e-02, -1.167e-02, -5.318e-03, -1.887e-02, -4.879e-02, -4.857e-02, -4.895e-02, -4.923e-02, -2.432e-01, 8.179e-02, 9.330e-02, -2.768e-02) * s1_1_1;
	r0 += M4(6.017e-02, -2.915e-01, -2.281e-02, 9.590e-02, -6.827e-04, -3.651e-02, 7.646e-03, -5.626e-03, -5.017e-04, -1.774e-02, -7.204e-04, -1.797e-02, -1.119e-03, 3.971e-02, -9.514e-03, 7.823e-04) * s1_1_2;
	r0 += M4(1.718e-03, -2.102e-03, 1.884e-03, -8.555e-04, 8.155e-03, -7.995e-04, 3.611e-04, -8.537e-04, -1.522e-05, -1.470e-04, -5.588e-03, -3.548e-04, 3.352e-04, -1.149e-03, 7.755e-04, 1.116e-03) * s1_2_0;
	r0 += M4(-1.775e-04, 7.074e-03, -4.088e-02, -9.801e-03, 1.084e-01, -2.835e-02, -2.819e-01, 1.044e-01, -4.232e-04, -4.147e-05, -1.654e-02, -1.663e-02, 1.017e-02, -7.261e-03, 7.669e-02, -1.888e-02) * s1_2_1;
	r0 += M4(-1.668e-02, 1.327e-02, 3.096e-02, 8.618e-02, -2.238e-03, 2.155e-02, 5.095e-04, 1.207e-02, -1.001e-04, -4.936e-04, -2.546e-04, -5.936e-03, 4.318e-03, -9.350e-03, -2.224e-03, 1.102e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(3.577e-02, 7.921e-03, -1.106e-02, -1.276e-03, 2.765e-02, 4.152e-03, 7.310e-03, 6.582e-04, 5.137e-04, 2.505e-04, 2.893e-04, -2.051e-04, -2.704e-02, -6.047e-04, -7.090e-03, -1.706e-03) * s0_0_0;
	r0 += M4(2.064e-02, 6.185e-02, 4.367e-03, -1.315e-02, -2.840e-02, 1.522e-02, -1.052e-02, -4.929e-03, 6.302e-03, 1.206e-03, 1.356e-03, 1.393e-04, 3.057e-02, -1.898e-02, 2.692e-03, 2.105e-02) * s0_0_1;
	r0 += M4(3.633e-03, 2.592e-04, 2.754e-03, 5.904e-03, 1.727e-03, -3.122e-03, 2.921e-04, -9.217e-04, 1.837e-03, 1.011e-02, -1.054e-03, 1.003e-03, -9.664e-04, 2.137e-02, 1.056e-03, 7.185e-03) * s0_0_2;
	r0 += M4(2.323e-02, -1.632e-02, -5.545e-02, 7.660e-03, 8.325e-02, 1.894e-02, 8.331e-02, 1.443e-02, 3.740e-02, 1.019e-02, 2.273e-03, 2.120e-03, -4.908e-02, 4.171e-03, -4.089e-02, 1.922e-03) * s0_1_0;
	r0 += M4(2.848e-02, 6.812e-02, -7.737e-02, -1.820e-01, -4.521e-02, -6.038e-02, -5.175e-02, 3.410e-03, 4.379e-02, 1.123e-01, 4.045e-02, 2.557e-02, 9.343e-02, -8.354e-02, 1.050e-01, -1.087e-01) * s0_1_1;
	r0 += M4(-7.336e-04, 1.727e-03, -6.186e-03, 1.139e-03, 1.208e-03, -3.541e-03, 1.913e-03, -3.952e-03, 5.778e-03, -3.625e-02, 5.134e-03, 3.341e-03, -1.524e-03, 2.226e-02, -3.421e-03, 2.411e-02) * s0_1_2;
	r0 += M4(-9.237e-04, 3.442e-04, 7.239e-03, 6.772e-03, -8.814e-03, 5.473e-03, 1.262e-02, 1.126e-02, -1.035e-02, 9.255e-04, 2.628e-02, -4.153e-03, -4.341e-03, 7.924e-04, -3.162e-02, 4.343e-03) * s0_2_0;
	r0 += M4(-9.757e-04, -2.010e-03, 1.099e-03, 3.694e-03, -3.564e-03, -9.830e-03, -1.630e-02, -4.708e-02, -3.259e-02, -5.112e-02, -1.233e-01, -1.715e-02, -2.854e-03, 1.212e-02, 1.016e-02, -7.126e-03) * s0_2_1;
	r0 += M4(-9.802e-05, -9.316e-05, 5.814e-04, 2.725e-04, -6.334e-04, -1.026e-03, 1.151e-04, -3.609e-03, 2.337e-04, 1.590e-04, 3.279e-04, -4.186e-02, 6.925e-04, 5.343e-03, -9.931e-05, 1.938e-02) * s0_2_2;
	r0 += M4(-9.545e-04, -4.545e-04, -7.490e-04, -1.837e-04, 1.376e-02, -2.212e-03, 4.905e-03, 2.505e-04, -7.767e-03, -5.177e-03, -1.209e-03, -2.395e-03, 3.960e-02, 3.629e-03, 8.226e-03, 4.754e-04) * s1_0_0;
	r0 += M4(3.657e-04, -2.362e-03, 7.396e-05, -1.403e-03, -1.918e-02, 1.936e-02, 1.060e-02, -5.833e-03, -2.140e-02, 1.680e-02, 1.148e-03, 7.079e-03, -6.860e-02, -1.372e-02, 7.965e-03, -7.961e-03) * s1_0_1;
	r0 += M4(9.596e-05, -1.336e-03, 6.548e-04, 1.060e-03, -9.186e-03, 1.866e-02, -5.153e-03, 1.619e-03, 9.879e-03, -1.859e-02, 3.844e-03, -7.382e-03, 7.481e-03, -4.670e-03, 2.927e-03, 4.496e-03) * s1_0_2;
	r0 += M4(1.545e-03, -3.239e-04, -2.462e-03, -2.040e-04, 7.814e-03, -3.707e-04, 9.490e-03, -4.716e-03, -2.157e-02, -8.030e-03, -2.277e-02, -3.574e-03, 4.016e-02, -3.284e-03, 6.274e-02, 3.212e-03) * s1_1_0;
	r0 += M4(-4.220e-04, -1.178e-02, -1.618e-02, 1.505e-04, -2.022e-01, 9.687e-02, -1.645e-01, 1.013e-01, -1.549e-01, 1.880e-01, -9.383e-02, 9.651e-02, -5.735e-02, 1.469e-01, -1.714e-01, 9.548e-02) * s1_1_1;
	r0 += M4(-2.935e-02, 8.071e-02, -2.239e-02, -4.531e-03, -7.819e-03, 5.106e-02, -8.766e-03, 7.195e-02, 8.995e-03, 9.828e-03, 9.116e-03, -1.707e-02, -4.247e-03, -9.307e-02, 2.331e-03, -5.724e-02) * s1_1_2;
	r0 += M4(3.318e-03, 7.817e-04, 2.437e-03, 2.068e-03, 3.547e-03, 2.662e-04, 1.068e-02, -2.482e-04, 1.278e-02, -9.271e-03, 5.218e-03, -1.297e-02, -3.002e-03, -9.569e-05, 7.542e-03, -2.011e-03) * s1_2_0;
	r0 += M4(-3.893e-02, 5.072e-03, 6.086e-02, 4.274e-03, 1.184e-02, -1.019e-03, -5.162e-02, 2.362e-02, -2.562e-02, 2.924e-02, -1.014e-01, 1.192e-01, 6.018e-03, -4.755e-03, 3.943e-02, 5.065e-02) * s1_2_1;
	r0 += M4(-2.774e-02, 4.138e-02, 9.341e-02, -2.114e-01, 1.412e-04, -1.806e-03, -1.985e-03, 8.340e-04, 3.050e-03, 4.624e-03, 7.266e-03, 1.874e-02, -2.965e-03, -1.137e-02, -1.158e-03, -5.391e-02) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(9.551e-03, 4.899e-03, 4.132e-03, -5.554e-03, 5.890e-04, 2.573e-03, -1.583e-03, 1.827e-03, 4.548e-03, 6.652e-03, 1.496e-03, 2.448e-03, 6.010e-05, 2.021e-03, -3.555e-03, -4.929e-03) * s0_0_0;
	r0 += M4(-1.959e-02, 1.935e-02, 1.796e-05, -4.446e-03, -2.074e-04, 4.165e-03, 2.235e-03, 4.617e-03, 1.832e-01, -1.969e-01, 1.391e-01, -1.492e-01, 7.480e-03, 7.501e-03, -1.086e-03, -3.070e-03) * s0_0_1;
	r0 += M4(-1.223e-04, -7.200e-04, -5.562e-05, -8.654e-04, -1.262e-03, 2.053e-04, -1.204e-03, -6.674e-04, -1.272e-02, 6.511e-03, -6.892e-03, 8.131e-03, 2.173e-03, 4.957e-03, -6.112e-04, -3.725e-04) * s0_0_2;
	r0 += M4(3.381e-02, 1.558e-02, -8.411e-02, 8.684e-03, 2.182e-02, 9.080e-04, 7.558e-03, -3.582e-04, 6.073e-03, -1.656e-04, 1.284e-02, 2.907e-03, -1.311e-01, -5.943e-02, 9.009e-02, 4.360e-02) * s0_1_0;
	r0 += M4(9.486e-02, -2.529e-01, 2.831e-02, 9.577e-02, 1.521e-01, -1.416e-01, 3.601e-02, -5.785e-02, 1.662e-01, -1.741e-01, 1.791e-01, -1.743e-01, -2.415e-02, -1.265e-01, -3.887e-03, 6.105e-02) * s0_1_1;
	r0 += M4(-4.197e-03, 1.971e-02, -1.608e-03, -1.340e-02, -5.260e-03, -2.359e-02, -2.300e-03, -1.221e-03, -4.252e-03, 5.386e-03, -8.584e-03, 4.456e-03, 1.253e-03, -7.978e-04, -1.946e-03, -1.034e-02) * s0_1_2;
	r0 += M4(-1.946e-02, -1.351e-04, 3.735e-02, -1.018e-02, -1.483e-03, 4.542e-03, 1.265e-02, 6.424e-03, -1.794e-05, 8.388e-04, -1.690e-03, 1.304e-03, 4.807e-03, 1.089e-02, -5.800e-03, -1.710e-03) * s0_2_0;
	r0 += M4(1.757e-02, 3.045e-02, -1.135e-01, 7.116e-02, 3.049e-02, -3.395e-02, 1.470e-01, -1.194e-01, 1.105e-01, -1.146e-01, 1.459e-01, -1.647e-01, -1.554e-03, 2.204e-03, 2.163e-02, 8.945e-03) * s0_2_1;
	r0 += M4(-3.074e-03, -1.080e-02, 1.010e-02, 1.422e-02, -6.060e-03, -3.479e-03, -7.474e-03, -2.341e-02, -2.596e-03, 7.598e-03, -4.977e-03, 6.528e-03, 1.607e-04, -4.892e-04, 1.847e-03, 2.225e-03) * s0_2_2;
	r0 += M4(-1.827e-05, 2.145e-03, 1.614e-03, 9.503e-04, 1.749e-04, -1.074e-03, -1.087e-03, 5.895e-04, -1.546e-02, -1.996e-02, -2.748e-02, -7.708e-03, 1.358e-02, 7.768e-03, 6.584e-03, 5.300e-04) * s1_0_0;
	r0 += M4(-8.778e-02, -2.095e-02, -1.299e-02, -1.801e-03, -1.522e-02, -8.719e-03, -7.322e-04, -1.281e-03, -5.683e-01, 4.966e-01, -3.559e-01, 4.293e-01, 7.051e-02, 5.642e-02, 8.006e-03, 1.309e-02) * s1_0_1;
	r0 += M4(1.361e-02, -6.635e-03, 3.374e-03, -4.174e-03, -1.971e-04, -7.614e-03, 8.410e-04, -7.330e-04, 9.697e-03, 3.435e-02, -2.436e-03, 5.614e-02, -2.731e-03, 2.179e-02, -2.434e-03, -2.915e-04) * s1_0_2;
	r0 += M4(-1.971e-02, 1.444e-05, -1.382e-02, 2.038e-03, -8.012e-03, 1.806e-03, 6.316e-03, 1.036e-03, -2.609e-04, -1.760e-03, 2.744e-02, -2.804e-02, -8.108e-02, -3.555e-03, -3.870e-02, -1.629e-02) * s1_1_0;
	r0 += M4(5.090e-02, -9.123e-02, -1.265e-01, -1.187e-01, 1.351e-01, 2.855e-02, -3.796e-02, 7.335e-03, -7.101e-03, 3.787e-02, -2.582e-01, 1.311e-01, -2.056e-02, -1.409e-01, 1.200e-01, 5.335e-02) * s1_1_1;
	r0 += M4(1.581e-02, 1.114e-01, 2.841e-02, 8.620e-02, -8.442e-04, 8.276e-02, -5.720e-03, -2.476e-02, -4.683e-03, 1.231e-02, 2.003e-02, -5.018e-04, 7.139e-03, 2.861e-02, 3.466e-03, 4.742e-02) * s1_1_2;
	r0 += M4(3.062e-03, 7.273e-04, -2.111e-03, 5.390e-03, -2.036e-03, 2.388e-03, -1.212e-02, -4.867e-03, 1.404e-04, -4.775e-03, -6.004e-03, -2.191e-03, 7.301e-03, 2.101e-03, -2.280e-02, 4.163e-03) * s1_2_0;
	r0 += M4(7.539e-03, 8.375e-03, 1.015e-01, 1.717e-02, -6.184e-03, -2.775e-04, -5.579e-02, -4.484e-02, -4.876e-03, 1.079e-02, -9.139e-03, 8.409e-03, -1.575e-03, 6.818e-03, -6.708e-02, -6.714e-02) * s1_2_1;
	r0 += M4(9.454e-04, 7.004e-03, 6.180e-03, 3.709e-02, -1.083e-02, -1.528e-02, 9.049e-03, -1.051e-02, 1.713e-03, 3.673e-03, -2.374e-03, 4.012e-04, -1.290e-03, 1.332e-03, -2.072e-03, -1.478e-02) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(2.460e-02, 1.004e-02, -2.359e-03, 1.121e-03, -9.455e-02, 8.840e-04, -7.179e-03, 8.146e-03, -1.540e-03, -2.464e-04, -7.096e-03, -5.329e-03, 5.078e-04, 8.699e-04, 9.877e-05, 1.156e-04) * s0_0_0;
	r0 += M4(4.120e-03, 2.381e-02, -6.244e-03, -6.392e-03, 8.661e-02, 9.442e-03, -4.159e-03, 2.155e-02, -8.662e-03, -6.749e-03, -9.662e-03, -9.260e-03, 2.204e-03, -1.313e-04, -2.906e-04, -3.080e-04) * s0_0_1;
	r0 += M4(-1.253e-03, 1.844e-03, -2.966e-04, -3.213e-03, -3.818e-03, 5.034e-03, -2.537e-03, -2.955e-03, -1.876e-03, -2.246e-03, -3.360e-03, -7.773e-03, 4.449e-04, 2.927e-03, -1.592e-03, -1.192e-03) * s0_0_2;
	r0 += M4(-2.921e-02, 4.566e-03, 9.640e-03, -1.578e-02, 1.033e-01, -8.376e-04, 5.780e-03, 3.162e-02, -1.834e-01, -1.167e-01, 1.710e-01, 1.149e-01, -4.433e-03, -1.144e-03, 7.241e-03, 5.014e-03) * s0_1_0;
	r0 += M4(-1.551e-01, -1.363e-01, 1.421e-01, 1.194e-01, -1.040e-01, 4.803e-02, 7.021e-02, -3.056e-01, -1.663e-01, -1.798e-01, 1.811e-01, 1.671e-01, -9.678e-04, -3.610e-03, 4.292e-03, 3.848e-03) * s0_1_1;
	r0 += M4(1.132e-02, -3.581e-02, 5.439e-03, 4.574e-02, 2.601e-03, 8.499e-03, -2.850e-03, 5.339e-02, -1.218e-01, -1.682e-01, 1.105e-01, 1.762e-01, -6.226e-04, 5.218e-04, 5.138e-03, 7.902e-03) * s0_1_2;
	r0 += M4(-2.905e-03, -3.960e-03, 1.369e-02, -1.788e-03, -3.078e-03, -1.858e-03, 2.000e-02, -4.585e-03, 4.831e-03, 5.008e-03, 3.320e-03, 7.361e-04, 1.053e-01, 6.660e-02, -1.081e-01, -6.056e-02) * s0_2_0;
	r0 += M4(1.071e-02, 3.281e-03, -5.153e-03, 1.810e-02, 3.466e-03, -1.177e-03, 8.942e-03, 6.242e-02, 5.725e-03, 2.080e-03, 7.055e-03, 8.510e-03, 1.597e-01, 1.346e-01, -1.354e-01, -1.302e-01) * s0_2_1;
	r0 += M4(1.285e-03, 9.674e-03, -2.860e-02, -2.955e-02, 2.805e-03, -1.960e-03, -7.528e-03, -1.693e-02, 4.426e-03, 7.116e-03, -1.718e-03, 1.225e-03, 7.288e-02, 1.370e-01, -8.169e-02, -1.368e-01) * s0_2_2;
	r0 += M4(9.730e-03, -2.566e-03, -9.064e-03, -1.724e-03, -1.110e-03, 3.148e-03, 3.836e-03, -1.902e-03, -2.228e-02, -7.336e-03, 8.414e-03, 2.906e-03, -1.361e-03, -1.354e-03, 1.220e-03, -1.620e-04) * s1_0_0;
	r0 += M4(3.374e-03, -1.932e-03, 3.643e-03, 1.802e-03, -1.145e-01, -1.017e-01, -1.817e-02, -1.639e-02, 4.089e-02, 1.680e-02, 1.519e-02, 1.874e-02, -1.199e-03, 2.593e-03, 4.127e-03, 1.357e-04) * s1_0_1;
	r0 += M4(-1.624e-04, -1.122e-03, -8.631e-05, 3.486e-04, -6.547e-03, -3.652e-02, 2.101e-03, -3.471e-04, 1.512e-03, 9.172e-03, -1.522e-03, 2.859e-03, 1.031e-02, -2.279e-03, 4.680e-03, -5.387e-03) * s1_0_2;
	r0 += M4(-5.189e-02, -4.560e-02, 3.353e-02, -3.151e-02, 3.455e-02, 9.119e-03, 3.504e-02, -8.044e-04, 2.111e-02, -9.517e-03, -4.211e-02, 7.840e-03, -1.740e-03, 1.816e-03, -4.948e-03, -5.092e-04) * s1_1_0;
	r0 += M4(-1.953e-03, 1.232e-01, 2.330e-04, 3.210e-02, 7.354e-02, 7.056e-02, -5.789e-02, 2.658e-02, 5.823e-02, 1.216e-01, -1.645e-01, -1.755e-01, 1.130e-01, -2.542e-02, 2.567e-02, -9.483e-04) * s1_1_1;
	r0 += M4(9.990e-05, -2.453e-03, 2.711e-05, -3.018e-03, 7.316e-03, 2.728e-02, 5.020e-03, -3.953e-02, -1.420e-02, -4.063e-02, 3.317e-03, -3.301e-02, 3.748e-02, -1.545e-01, 1.660e-02, -5.290e-02) * s1_1_2;
	r0 += M4(-2.348e-02, -9.188e-03, -8.864e-02, -2.656e-02, 1.134e-03, 2.474e-04, 1.569e-02, 2.160e-03, 3.210e-05, -3.966e-03, 1.161e-02, 6.105e-03, -2.607e-04, -6.210e-04, 1.404e-04, 1.455e-04) * s1_2_0;
	r0 += M4(1.089e-02, 8.301e-03, 4.100e-03, 8.520e-02, 1.669e-03, 2.297e-03, 3.381e-02, 3.137e-02, -1.146e-03, -2.126e-04, 6.608e-02, 4.285e-02, 3.907e-02, -5.950e-03, 1.197e-01, -2.764e-02) * s1_2_1;
	r0 += M4(-3.730e-04, 1.267e-04, -5.482e-04, -1.024e-03, 1.754e-03, 2.083e-03, 4.182e-03, 1.822e-02, 6.517e-03, 6.046e-03, -3.375e-03, 1.984e-02, 2.611e-03, -2.721e-02, 3.193e-02, -1.308e-01) * s1_2_2;
	r0 += V4(-4.784e-05, -5.032e-05, -4.655e-05, -4.867e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
