// CuNNy 4x24 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x24_DS_vk] -in
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-1.691e-02, -1.012e-02, -6.665e-02, -1.890e-01) * s0_0_0;
	r1 += V4(7.533e-03, -9.552e-03, 4.188e-02, 6.166e-02) * s0_0_0;
	r2 += V4(1.696e-02, -4.749e-02, -1.004e-02, 8.197e-03) * s0_0_0;
	r3 += V4(-5.017e-03, -4.410e-03, -4.396e-03, -5.873e-03) * s0_0_0;
	r4 += V4(1.339e-02, 1.460e-01, 6.825e-03, 1.750e-01) * s0_0_0;
	r5 += V4(7.202e-02, -4.903e-03, 1.466e-02, 4.263e-01) * s0_0_0;
	r0 += V4(3.780e-02, -1.123e-01, 5.136e-01, 6.490e-02) * s0_0_1;
	r1 += V4(2.120e-02, -7.736e-02, 2.742e-01, -6.909e-02) * s0_0_1;
	r2 += V4(1.721e-02, -1.185e-02, -3.065e-03, -3.089e-01) * s0_0_1;
	r3 += V4(4.102e-03, -7.107e-03, -3.748e-03, -3.574e-02) * s0_0_1;
	r4 += V4(-1.314e-01, -2.382e-01, -8.003e-02, -2.237e-01) * s0_0_1;
	r5 += V4(-7.147e-02, 1.043e-01, 1.942e-01, 3.160e-01) * s0_0_1;
	r0 += V4(-2.040e-02, 1.209e-01, -1.624e-02, 3.233e-02) * s0_0_2;
	r1 += V4(1.097e-01, 1.723e-02, 1.265e-01, 5.198e-03) * s0_0_2;
	r2 += V4(3.357e-02, 3.793e-01, 5.757e-01, 2.997e-01) * s0_0_2;
	r3 += V4(-5.626e-03, 1.773e-03, 1.371e-02, 3.299e-02) * s0_0_2;
	r4 += V4(1.068e-01, 1.201e-02, 7.397e-02, 4.260e-02) * s0_0_2;
	r5 += V4(-3.871e-02, -7.544e-02, -2.275e-02, 1.643e-02) * s0_0_2;
	r0 += V4(2.306e-02, 2.001e-02, 1.932e-02, 3.350e-01) * s0_1_0;
	r1 += V4(-4.527e-02, -4.512e-02, -1.060e-02, 6.211e-01) * s0_1_0;
	r2 += V4(1.425e-02, 2.845e-02, 8.040e-03, -1.665e-01) * s0_1_0;
	r3 += V4(-1.578e-02, -6.720e-03, -1.475e-01, -2.488e-02) * s0_1_0;
	r4 += V4(-1.137e-01, 5.766e-03, -2.462e-01, -1.149e-02) * s0_1_0;
	r5 += V4(-3.684e-03, 1.579e-02, -5.944e-02, -2.588e-01) * s0_1_0;
	r0 += V4(-3.272e-01, -5.514e-01, -4.092e-01, -1.460e-01) * s0_1_1;
	r1 += V4(2.085e-01, -1.260e-01, -4.635e-01, -6.114e-01) * s0_1_1;
	r2 += V4(-3.745e-01, -5.638e-01, -5.723e-01, -3.546e-01) * s0_1_1;
	r3 += V4(-6.596e-01, -1.416e-02, -5.750e-01, -6.321e-01) * s0_1_1;
	r4 += V4(-1.787e-01, -1.649e-01, -1.951e-01, -3.174e-01) * s0_1_1;
	r5 += V4(-3.024e-01, -4.058e-01, -2.258e-01, -4.698e-01) * s0_1_1;
	r0 += V4(3.718e-02, 5.254e-01, -4.269e-02, -6.542e-03) * s0_1_2;
	r1 += V4(-1.143e+00, -2.153e-01, -4.209e-01, -3.093e-03) * s0_1_2;
	r2 += V4(4.625e-02, 1.987e-01, 5.997e-03, 5.293e-01) * s0_1_2;
	r3 += V4(-1.020e-03, -7.815e-03, -4.861e-02, -3.040e-02) * s0_1_2;
	r4 += V4(2.900e-01, 2.608e-01, 4.534e-01, 3.374e-01) * s0_1_2;
	r5 += V4(-2.015e-01, 2.901e-02, 2.847e-02, -2.375e-02) * s0_1_2;
	r0 += V4(-2.969e-03, -8.037e-03, 4.871e-03, -9.699e-02) * s0_2_0;
	r1 += V4(1.928e-03, -6.682e-02, -1.534e-02, 4.125e-02) * s0_2_0;
	r2 += V4(-3.587e-03, 3.079e-02, 5.162e-04, -3.119e-04) * s0_2_0;
	r3 += V4(1.761e-02, -5.445e-02, 1.518e-01, 2.708e-01) * s0_2_0;
	r4 += V4(4.552e-02, -1.626e-01, -7.879e-03, -1.589e-01) * s0_2_0;
	r5 += V4(-1.066e-01, -2.123e-02, -6.343e-02, 2.501e-03) * s0_2_0;
	r0 += V4(2.519e-02, -6.633e-02, -3.883e-02, 5.437e-02) * s0_2_1;
	r1 += V4(-6.751e-04, -2.672e-02, 1.675e-01, -3.297e-02) * s0_2_1;
	r2 += V4(7.610e-03, -1.082e-02, 5.118e-03, 2.149e-02) * s0_2_1;
	r3 += V4(6.543e-01, 3.043e-01, 5.801e-01, 4.443e-01) * s0_2_1;
	r4 += V4(3.622e-01, 3.877e-01, -3.135e-02, 5.319e-01) * s0_2_1;
	r5 += V4(4.373e-01, 2.827e-01, 2.279e-01, -1.008e-02) * s0_2_1;
	r0 += V4(-2.617e-02, 8.130e-02, 2.777e-02, -4.034e-03) * s0_2_2;
	r1 += V4(1.519e-01, 7.056e-03, 2.881e-01, -8.331e-03) * s0_2_2;
	r2 += V4(9.725e-03, -8.233e-03, -6.184e-03, -2.032e-02) * s0_2_2;
	r3 += V4(9.634e-03, -4.259e-02, 3.000e-02, -8.780e-03) * s0_2_2;
	r4 += V4(-3.969e-01, -2.417e-01, 3.277e-02, -3.760e-01) * s0_2_2;
	r5 += V4(2.169e-01, 4.347e-02, -4.095e-02, 2.077e-03) * s0_2_2;
	r0 += V4(2.870e-01, 1.553e-02, 4.163e-02, 7.207e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.708e-02, -1.570e-02, 2.427e-03, 3.105e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(2.206e-01, -3.641e-02, -3.849e-04, -1.937e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
	r3 += V4(-6.718e-04, -7.903e-02, 1.702e-02, -2.931e-02);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r3));
	r4 += V4(1.262e-02, 1.561e-02, 5.371e-03, -3.894e-03);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r4));
	r5 += V4(4.720e-03, 5.044e-02, 4.983e-04, 1.167e-02);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r5));
}

//!DESC [CuNNy_4x24_DS_vk] -conv1
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00F8E210, 0xFCFB0813, 0xFA01F318, 0x0BEC0EF8);
	r1 = D(r1, s0_0_0, 0xF803FEDF, 0xFEF6B6FB, 0x11F5CB07, 0xFEFF15F4);
	r2 = D(r2, s0_0_0, 0xFC0C1105, 0xF5031302, 0xEBEA1001, 0x07F806F7);
	r3 = D(r3, s0_0_0, 0xFD0921FF, 0x0AEA0315, 0xFCFC011A, 0x000A00F4);
	r4 = D(r4, s0_0_0, 0x000918FB, 0x021BEEED, 0x0702EDFF, 0x181311F2);
	r5 = D(r5, s0_0_0, 0xE7F2F713, 0x1211E4FD, 0x0D0D02D1, 0x20FE25D9);
	r0 = D(r0, s0_0_1, 0x010A00F6, 0x08000DF0, 0x2008F3C2, 0xF7122BB8);
	r1 = D(r1, s0_0_1, 0x0E09E102, 0x13EA05F3, 0xBE1CF4F9, 0xF10105DA);
	r2 = D(r2, s0_0_1, 0x0104F300, 0xF904D9E2, 0x120BF1F5, 0x0A17F602);
	r3 = D(r3, s0_0_1, 0x02EDF91D, 0xE415FCE6, 0x0D0125EC, 0x0DF12AF9);
	r4 = D(r4, s0_0_1, 0xEEDB040D, 0x0824FD0E, 0x1402E4F6, 0x14F2F407);
	r5 = D(r5, s0_0_1, 0x0DEDE023, 0x05EFCE20, 0xF7F4EDDC, 0x04FAF32D);
	r0 = D(r0, s0_0_2, 0x11FD1406, 0xE8F3D70A, 0xFE11EB16, 0x02F601F3);
	r1 = D(r1, s0_0_2, 0x0DF60A00, 0x24FB0212, 0x3A0212F2, 0x0C0707F4);
	r2 = D(r2, s0_0_2, 0xFD000CFC, 0x1106D2FB, 0xEEF40203, 0xEE08F914);
	r3 = D(r3, s0_0_2, 0xFFFFFD03, 0xDFEDECFC, 0xEA080D0A, 0xE6E50CF6);
	r4 = D(r4, s0_0_2, 0xEF00D713, 0x0AF41701, 0x23FA0821, 0xD8EEE016);
	r5 = D(r5, s0_0_2, 0x120F0301, 0x0620C5FF, 0x0FFA01DB, 0x0608D215);
	r0 = D(r0, s0_1_0, 0xF0EC1A2E, 0x35EC2714, 0x16FE1CF4, 0x1412482F);
	r1 = D(r1, s0_1_0, 0x01E40C15, 0x09FE1517, 0xD0F381E2, 0x010606F1);
	r2 = D(r2, s0_1_0, 0xF30CF3ED, 0xEA0DEC03, 0x080ED3E4, 0x1D2C00E7);
	r3 = D(r3, s0_1_0, 0x00F44621, 0x0AF5F701, 0x20E0DCF9, 0x190B2721);
	r4 = D(r4, s0_1_0, 0xFB1BFE13, 0x05170005, 0x0605F7E6, 0x0904FAEA);
	r5 = D(r5, s0_1_0, 0x03FD0E1F, 0x0AFC4E1E, 0x1E24DEEA, 0xF32BBD17);
	r0 = D(r0, s0_1_1, 0x130A4718, 0xFF20760C, 0x1B2A2A7F, 0xCDFD08D0);
	r1 = D(r1, s0_1_1, 0xFD1D1EDA, 0x14274921, 0x2A31A323, 0x04FA09CD);
	r2 = D(r2, s0_1_1, 0x0FE08110, 0x2C07DFCB, 0x0514CFF9, 0xF8E8F212);
	r3 = D(r3, s0_1_1, 0xDAEFFFD6, 0xF019D8FA, 0xF8DFF9CC, 0x0E2129F6);
	r4 = D(r4, s0_1_1, 0x0DA86408, 0xDFB9E9D7, 0x03F834F9, 0xF4AEAF02);
	r5 = D(r5, s0_1_1, 0xE50D46E3, 0x0418C0B3, 0xEBD628EF, 0x05B10DD6);
	r0 = D(r0, s0_1_2, 0xE3E9F5CF, 0x27010CDC, 0xEFE1F2D1, 0x36F603E6);
	r1 = D(r1, s0_1_2, 0x1610F9EB, 0xF32024F2, 0xD0F405F2, 0x221520BA);
	r2 = D(r2, s0_1_2, 0x011E0010, 0x25DCE21F, 0xF2EBF612, 0x0A0BF509);
	r3 = D(r3, s0_1_2, 0x16F9F510, 0x0809E50A, 0x2C05F54E, 0xECFD21FC);
	r4 = D(r4, s0_1_2, 0xFA1B2AD7, 0x1F1E2110, 0xDAEA12E3, 0xE01CF92A);
	r5 = D(r5, s0_1_2, 0x312008EE, 0x0E0C01F7, 0x40F9E8F7, 0x16F3FAF8);
	r0 = D(r0, s0_2_0, 0xF8EAD8EF, 0x1819DD00, 0x15F8FAF4, 0x02160711);
	r1 = D(r1, s0_2_0, 0x03D708F8, 0x071BFC03, 0x1DF30C00, 0x23FAD70D);
	r2 = D(r2, s0_2_0, 0xF711EB0A, 0xE6EA2EFC, 0x0007040A, 0x062112FE);
	r3 = D(r3, s0_2_0, 0x0710F8EF, 0x14082808, 0xFC0206FB, 0x1A17EFE9);
	r4 = D(r4, s0_2_0, 0x0506F409, 0x07EE230B, 0xF6FF180F, 0xFB24E509);
	r5 = D(r5, s0_2_0, 0xF9E92BBD, 0x11E7F6F9, 0x16E3102D, 0xFA48ECE9);
	r0 = D(r0, s0_2_1, 0x3130EAFC, 0xBB321811, 0xEBE3F3DD, 0xD51EC103);
	r1 = D(r1, s0_2_1, 0xE3720F2D, 0xF00F2CF5, 0xC2291908, 0xDB1E29D3);
	r2 = D(r2, s0_2_1, 0xEEC006C9, 0xE311F918, 0x0B39D304, 0xF1D30A18);
	r3 = D(r3, s0_2_1, 0x0411DB09, 0x080FD5F2, 0xE223EAF7, 0x0F14DCFD);
	r4 = D(r4, s0_2_1, 0x0305E9FB, 0xE4270418, 0xFE04372C, 0x19D6F1FD);
	r5 = D(r5, s0_2_1, 0x030AE5D1, 0x04FFEE0D, 0xD1E61EC2, 0xF1D4D5F4);
	r0 = D(r0, s0_2_2, 0xE2080AF5, 0x01F610FC, 0xE9FFFEF1, 0x18FDFDE7);
	r1 = D(r1, s0_2_2, 0xE3EEFAFC, 0xD00123F8, 0x12021000, 0x00F2EAFD);
	r2 = D(r2, s0_2_2, 0x21F10511, 0x150A0CF7, 0x090BF70A, 0xDBF8551B);
	r3 = D(r3, s0_2_2, 0xF201FAF0, 0xF0C0050A, 0xD90EF803, 0xEF05D3F1);
	r4 = D(r4, s0_2_2, 0x1A3EEBEF, 0xF1FA0CE9, 0xF5E713DD, 0x0119E8F9);
	r5 = D(r5, s0_2_2, 0x0811D7F4, 0xFFE0E90B, 0xC8DFFFFD, 0xEE25FA10);
	r0 = D(r0, s1_0_0, 0xFD06F90F, 0xFE16F92C, 0xFD07F9F7, 0x04F6FBAF);
	r1 = D(r1, s1_0_0, 0x06F501F6, 0x07F00005, 0xE02000E3, 0xF626FF1F);
	r2 = D(r2, s1_0_0, 0xFFFB05FC, 0xFDF90717, 0x01200602, 0x0BFB061E);
	r3 = D(r3, s1_0_0, 0x00FD04F4, 0x10110534, 0xFA040630, 0xE0EA05DF);
	r4 = D(r4, s1_0_0, 0xFEEB0211, 0x07F20225, 0xFDFE0304, 0xF7E30303);
	r5 = D(r5, s1_0_0, 0x0DE7070F, 0xF4EF0604, 0xF6FE06FB, 0x08D90737);
	r0 = D(r0, s1_0_1, 0x2AFBF410, 0xF7EEF502, 0x0B05F618, 0x1408F317);
	r1 = D(r1, s1_0_1, 0x0DF70B03, 0xFD290BFA, 0xE2D40C27, 0xFB240BEB);
	r2 = D(r2, s1_0_1, 0xFFF40A05, 0xF0FC0907, 0x0716090D, 0x20BC0AEE);
	r3 = D(r3, s1_0_1, 0x0B0E1304, 0xB2F91309, 0xFB011408, 0xBDE013E1);
	r4 = D(r4, s1_0_1, 0xEB14FF04, 0x2210FF30, 0xF7E3001C, 0xFFF701FC);
	r5 = D(r5, s1_0_1, 0xEAEB0CF0, 0xEB030AFA, 0xDF0D0BFE, 0xC7270B1F);
	r0 = D(r0, s1_0_2, 0x1F120E08, 0xEEF80E03, 0xF9FE0FFD, 0x040E0DF9);
	r1 = D(r1, s1_0_2, 0xF2030104, 0x09F702EF, 0xDF1B02F7, 0xEE030206);
	r2 = D(r2, s1_0_2, 0x04000A01, 0xE7FD0AF7, 0x0E020917, 0x20E809FD);
	r3 = D(r3, s1_0_2, 0x19FAF400, 0x9C1BF410, 0x100AF4FD, 0xF8E9F3FD);
	r4 = D(r4, s1_0_2, 0xB3EF0001, 0x581100F7, 0x270200EB, 0x1D10010B);
	r5 = D(r5, s1_0_2, 0xF6FA0B15, 0xE2F60B08, 0xFC110B04, 0x0FF80B06);
	r0 = D(r0, s1_1_0, 0x13F10BFE, 0x01260D7F, 0xFE040DF9, 0xFB030CEE);
	r1 = D(r1, s1_1_0, 0x071F01D8, 0xF9D1013E, 0xF02F02D4, 0x09DB0434);
	r2 = D(r2, s1_1_0, 0xFCF9F5FB, 0xFB04F40D, 0x0822F4CA, 0x05B1F501);
	r3 = D(r3, s1_1_0, 0x27F2F100, 0x02FFF1D4, 0x04FAF213, 0x0DF8F1C1);
	r4 = D(r4, s1_1_0, 0xFEF2FFF6, 0xFE0AFFF8, 0x0102FFD6, 0xFB570048);
	r5 = D(r5, s1_1_0, 0xFE2D0811, 0x050807C5, 0x031A0853, 0xEF130791);
	r0 = D(r0, s1_1_1, 0x19F2F004, 0xA22EEF07, 0xF710EEDC, 0xDA1EF00B);
	r1 = D(r1, s1_1_1, 0x0120020B, 0x81D60106, 0x22D201EB, 0x20010300);
	r2 = D(r2, s1_1_1, 0x3102F7FB, 0x2400F8FF, 0x0521F8FA, 0xF181F830);
	r3 = D(r3, s1_1_1, 0x140314FA, 0x3BED16D4, 0xF511172B, 0x81D316DC);
	r4 = D(r4, s1_1_1, 0xF327F5E0, 0xE3EFF6F6, 0x10FEF638, 0x2A1EF7EA);
	r5 = D(r5, s1_1_1, 0x48DBFF10, 0x8109FD08, 0x2B20FDE2, 0x3DE3FEFB);
	r0 = D(r0, s1_1_2, 0xE902FC1A, 0x8F10FC06, 0x1F02FD03, 0xFF02FB07);
	r1 = D(r1, s1_1_2, 0x02F5F6FA, 0x8110F7F6, 0x2FEDF811, 0xEDE1F80D);
	r2 = D(r2, s1_1_2, 0x5C0B11F6, 0x300B1102, 0x1A0010EF, 0xED9A10E1);
	r3 = D(r3, s1_1_2, 0x31F5FF04, 0x7F0B00F9, 0x5500FF01, 0xF7FA0015);
	r4 = D(r4, s1_1_2, 0x810210F0, 0xF2F3100B, 0xADFB10ED, 0xB10911D4);
	r5 = D(r5, s1_1_2, 0xAD070AFC, 0xAC1809F0, 0x7F160916, 0xFB0B09F4);
	r0 = D(r0, s1_2_0, 0xFAEA0DEE, 0x0EF70E27, 0xFA080D0F, 0x0EDF0E3A);
	r1 = D(r1, s1_2_0, 0xFEFAFF07, 0x01EF01DD, 0x04070008, 0xFC0902FB);
	r2 = D(r2, s1_2_0, 0xF702F40E, 0x1D07F56D, 0xF2FEF4D6, 0x00E7F4E0);
	r3 = D(r3, s1_2_0, 0x00010CF2, 0x1BFC0DEE, 0xFBF40C01, 0x04000BCF);
	r4 = D(r4, s1_2_0, 0xFEF902FC, 0x0DF003DE, 0x010D04FA, 0x05EC0438);
	r5 = D(r5, s1_2_0, 0x0810FBE6, 0xEFF1FA10, 0xF3FDFB1E, 0x01F9FAC7);
	r0 = D(r0, s1_2_1, 0xEA0106E7, 0xFF010620, 0xE2250617, 0xF8110616);
	r1 = D(r1, s1_2_1, 0xD7CD0904, 0x1BF70807, 0x29FA0AF0, 0x0F1D0BFF);
	r2 = D(r2, s1_2_1, 0x1F03021A, 0xFD1F0216, 0xEABD02E3, 0x0FB703F8);
	r3 = D(r3, s1_2_1, 0xFB08180A, 0xD3EB1A16, 0xEF02190D, 0xE00218F4);
	r4 = D(r4, s1_2_1, 0x060403F2, 0xFCF404F5, 0x053A03E5, 0xF9E7030F);
	r5 = D(r5, s1_2_1, 0xEDF70905, 0xD3FA07FC, 0xEE2209F5, 0x21110711);
	r0 = D(r0, s1_2_2, 0xF40407E7, 0x1D110704, 0xE90807FB, 0x1F0E070F);
	r1 = D(r1, s1_2_2, 0x05FC09F9, 0x811C0919, 0xEE09080B, 0xFFE70A08);
	r2 = D(r2, s1_2_2, 0xFBF20E06, 0x05090D02, 0x16FB0DF8, 0x3F010F12);
	r3 = D(r3, s1_2_2, 0xF20003FE, 0x191A050C, 0x05F8040E, 0xEFFF04FA);
	r4 = D(r4, s1_2_2, 0x0302FE08, 0xE9FEFEF4, 0x81D4FE36, 0xE200FE10);
	r5 = D(r5, s1_2_2, 0x16F6F700, 0x0009F702, 0xEA0EF707, 0xF801F601);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1E11FAFA, 0xF904D108, 0x0E10EFE8, 0x10FD0400);
	r1 = D(r1, s0_0_0, 0xFE030308, 0x2FFE17F9, 0x2AB93506, 0xF410F20C);
	r2 = D(r2, s0_0_0, 0x0401FFEF, 0xFF0DFDF4, 0xF423DDEE, 0x0E1BDF05);
	r3 = D(r3, s0_0_0, 0x0621D7DE, 0x30DEF1F2, 0xF4FDF500, 0xFDE4F61D);
	r4 = D(r4, s0_0_0, 0x0A0DF0F1, 0x37ED2117, 0x21F60A1A, 0x02E50B09);
	r5 = D(r5, s0_0_0, 0x1BEB15DC, 0x0EEB21EA, 0x0CF20C26, 0x020D0A0C);
	r0 = D(r0, s0_0_1, 0x110AEEEE, 0xEAE635ED, 0x11F914F5, 0xEDC92323);
	r1 = D(r1, s0_0_1, 0x0E08010A, 0x1101FF13, 0x20D52919, 0x26F3DB1C);
	r2 = D(r2, s0_0_1, 0xFA0CF206, 0x16DB2C1D, 0x0A34DE0F, 0x0F01F3F3);
	r3 = D(r3, s0_0_1, 0x0D16EBFC, 0xD1F60805, 0xEEFE03C5, 0xF50F0807);
	r4 = D(r4, s0_0_1, 0xE0DF18EB, 0x300221FF, 0xFEEC1FED, 0x18112109);
	r5 = D(r5, s0_0_1, 0xE90DF5DB, 0x23EDFDF6, 0xFA0DE82C, 0xDF12E707);
	r0 = D(r0, s0_0_2, 0xFE0BEA0B, 0xF30E23DB, 0x08FD0B12, 0x03EB1321);
	r1 = D(r1, s0_0_2, 0x06F80216, 0x160BF9FE, 0x24F3E50F, 0xF6DE3739);
	r2 = D(r2, s0_0_2, 0xF601F7F8, 0x0BF90708, 0xEF0EFE0A, 0xE81318EC);
	r3 = D(r3, s0_0_2, 0x0903FB0A, 0xE4D84712, 0xFD07F00C, 0xE3F52BEC);
	r4 = D(r4, s0_0_2, 0x05FC150F, 0x12E5121C, 0x1613D6F7, 0x0B0DEBED);
	r5 = D(r5, s0_0_2, 0xEEFB0CF3, 0x3203EDF6, 0xF1E61E3E, 0x0B10FAFC);
	r0 = D(r0, s0_1_0, 0xC50C21F7, 0x11DA0CC4, 0xD212DCF5, 0x11DBE8F0);
	r1 = D(r1, s0_1_0, 0xF9F3F304, 0xEAEC0BF0, 0x7F812D24, 0xF22FF02D);
	r2 = D(r2, s0_1_0, 0x050AF715, 0xFDDE0532, 0x240D0209, 0xFAED0AFF);
	r3 = D(r3, s0_1_0, 0x0D25E805, 0xCCC62202, 0x0AE81BCC, 0xEEA525F7);
	r4 = D(r4, s0_1_0, 0xF710E9F4, 0x00FC1302, 0xF70D1B22, 0xF104F1ED);
	r5 = D(r5, s0_1_0, 0x7FFFF8E8, 0xE3F1F0FE, 0xFEFD1DFE, 0x0BE61F20);
	r0 = D(r0, s0_1_1, 0xDCFA14D3, 0xE0A8034F, 0xE315E1EA, 0xC781FD44);
	r1 = D(r1, s0_1_1, 0xFF0EEC11, 0xEABB4B13, 0x59399CCD, 0x0414EE76);
	r2 = D(r2, s0_1_1, 0x0AF05AE9, 0x02F405FE, 0x39FAFF30, 0xE2E733F7);
	r3 = D(r3, s0_1_1, 0x0E20E901, 0x04DA23F6, 0xEBF80C25, 0xD9BC2A15);
	r4 = D(r4, s0_1_1, 0xCCE9BB02, 0x1004EA10, 0xFB3AE2EC, 0x4F872FEC);
	r5 = D(r5, s0_1_1, 0x12E1E721, 0xF5C44F40, 0x0C1B0C78, 0xF00DFDD6);
	r0 = D(r0, s0_1_2, 0xE1F40A0D, 0x16D5231E, 0x0E17ECF7, 0x1B1BB219);
	r1 = D(r1, s0_1_2, 0xFDF91508, 0xD115F9E5, 0xF802E0FC, 0xC2D7311E);
	r2 = D(r2, s0_1_2, 0x1405ECF1, 0x0DF5FD08, 0x0F2EE8D7, 0x39F110FB);
	r3 = D(r3, s0_1_2, 0x0B16E7E3, 0xFB2FE5F4, 0x0BF50618, 0xD0030303);
	r4 = D(r4, s0_1_2, 0x81FF4016, 0x0CE8F8F0, 0xEECF1226, 0x14000EDC);
	r5 = D(r5, s0_1_2, 0xEB012A17, 0x05F9140E, 0x1E19EFE3, 0x071BFEF0);
	r0 = D(r0, s0_2_0, 0x1A221ED7, 0xFBCF3CF4, 0xF212FE0D, 0x0FC9F9D7);
	r1 = D(r1, s0_2_0, 0xF92DFF01, 0xE29B2413, 0xEB0EE201, 0x075602C9);
	r2 = D(r2, s0_2_0, 0x12F5280B, 0xF929CFDE, 0xF7F63814, 0xEB19E31C);
	r3 = D(r3, s0_2_0, 0x0E210A13, 0xFAE923F3, 0x02F1010F, 0x61E30302);
	r4 = D(r4, s0_2_0, 0x09C933F7, 0xDEB718F1, 0xDF0CF5E3, 0xF9D24725);
	r5 = D(r5, s0_2_0, 0xCE09D435, 0xF2E5FDFF, 0xDCE005F6, 0x1834D8FE);
	r0 = D(r0, s0_2_1, 0x20A6FE55, 0xEAEE10FA, 0x0ADB223B, 0x20E90C0D);
	r1 = D(r1, s0_2_1, 0xDD16D8F6, 0x8BBE01F6, 0x0E0318DE, 0xF009F712);
	r2 = D(r2, s0_2_1, 0x02EF3414, 0x14F85F25, 0x0CF226DF, 0x1AE2FBFB);
	r3 = D(r3, s0_2_1, 0x17F42710, 0x447FE3F6, 0x05FFF3F9, 0x33E90C0B);
	r4 = D(r4, s0_2_1, 0xE8280601, 0xEAF020F2, 0xF4D4C20C, 0x53A1EE03);
	r5 = D(r5, s0_2_1, 0xF8D80627, 0xEFF704F2, 0xE708E824, 0x1CF03415);
	r0 = D(r0, s0_2_2, 0x1BFAF10E, 0xF6FDD3FF, 0x1C04EFFF, 0xDFF80A1C);
	r1 = D(r1, s0_2_2, 0xE5DD3FEE, 0xEC32E8EC, 0xBCF53309, 0xCAF02B1E);
	r2 = D(r2, s0_2_2, 0x10FB0916, 0x14D712F4, 0x4806FCF9, 0x10E4C0C7);
	r3 = D(r3, s0_2_2, 0x2AFFF101, 0xCD1B2E1A, 0x0216FCEE, 0x3206F50E);
	r4 = D(r4, s0_2_2, 0xE3F02101, 0x00EAFF00, 0xC09546F9, 0x23EA1EEC);
	r5 = D(r5, s0_2_2, 0x07000731, 0x01010D01, 0xFF1BDCFB, 0x0B1AF408);
	r0 = D(r0, s1_0_0, 0xFFF729FD, 0x13E10126, 0xFCFC0026, 0xE63B07CC);
	r1 = D(r1, s1_0_0, 0x05270FE6, 0x07ECF803, 0x28200781, 0x0CFB1717);
	r2 = D(r2, s1_0_0, 0xF71402F6, 0xF7EF28F0, 0xF3030211, 0xDB042D07);
	r3 = D(r3, s1_0_0, 0xFB0D1013, 0xDB22DE03, 0x0BE1EA29, 0x1AF72101);
	r4 = D(r4, s1_0_0, 0xFE090EF6, 0xF9ED1C13, 0x04FF1924, 0xFADD0D19);
	r5 = D(r5, s1_0_0, 0xDFFAD6FC, 0x15EB07D8, 0x06F0E71E, 0x04ECE9B1);
	r0 = D(r0, s1_0_1, 0xEDF4DA4B, 0x4CD1348F, 0xE202E049, 0x0BCD01EB);
	r1 = D(r1, s1_0_1, 0xEEDA0C42, 0x46E30EE8, 0x2E81D27F, 0x0CDF300F);
	r2 = D(r2, s1_0_1, 0xEF1CE5F3, 0xEE2DDE10, 0x3FDB14DB, 0xE441B9AA);
	r3 = D(r3, s1_0_1, 0xF0FEF642, 0xD130D681, 0x08DD1F06, 0xF51619B1);
	r4 = D(r4, s1_0_1, 0x0C45DDDB, 0xF635110A, 0xF3E4FA7E, 0x0319F7B2);
	r5 = D(r5, s1_0_1, 0xF63435D1, 0xDB36FBEE, 0xFF1D72DB, 0x2C0DD259);
	r0 = D(r0, s1_0_2, 0xF5D4191E, 0x7E08FD9B, 0x22CEF118, 0xC30E3116);
	r1 = D(r1, s1_0_2, 0xF922F1E1, 0xF8E6051D, 0xCC0E1548, 0x08E8FEF0);
	r2 = D(r2, s1_0_2, 0xF230FBE6, 0xF9D1FE2D, 0x44F502DF, 0xBA2C0581);
	r3 = D(r3, s1_0_2, 0x06EAF006, 0x2D8112C5, 0x120F0005, 0x0D18D0DF);
	r4 = D(r4, s1_0_2, 0x411231ED, 0xB92FFDC9, 0x0E16EBB9, 0x0F33E9D3);
	r5 = D(r5, s1_0_2, 0x71F2EAC7, 0x1113F01A, 0x0906BEF3, 0x2DDA020B);
	r0 = D(r0, s1_1_0, 0xD245DCD7, 0x0710EFEB, 0x0EFA191B, 0x1BD7F8F6);
	r1 = D(r1, s1_1_0, 0x0B1B0ABF, 0xFF08F8FE, 0xEC02FDEF, 0xF72106FA);
	r2 = D(r2, s1_1_0, 0xF714FBE7, 0x0D1004EF, 0x1AEE05FB, 0x03DB0505);
	r3 = D(r3, s1_1_0, 0x04EC0B20, 0xF3E7281D, 0xEE23F409, 0xFA03144B);
	r4 = D(r4, s1_1_0, 0x02FCDFF7, 0x07E7FB16, 0xE9F3FF42, 0x00050A03);
	r5 = D(r5, s1_1_0, 0xF6B2F658, 0x24EE05FA, 0x0703FC29, 0x19E50FC0);
	r0 = D(r0, s1_1_1, 0xB12B2F3D, 0x4104EFB5, 0x012B25FA, 0x320AF3A6);
	r1 = D(r1, s1_1_1, 0x4A81F67F, 0x223402C0, 0xFD81EE7F, 0x02F5FD50);
	r2 = D(r2, s1_1_1, 0xD83B1542, 0xF6231A05, 0x4BB800BB, 0x03F5150C);
	r3 = D(r3, s1_1_1, 0xEA2C03E2, 0x490600D3, 0xEA2B11D8, 0xBE67F9E2);
	r4 = D(r4, s1_1_1, 0x36FFF1DD, 0x6BC6F3EB, 0xE6FAE96C, 0x49F828BF);
	r5 = D(r5, s1_1_1, 0xF43229C0, 0x27D50417, 0x29EC24D5, 0xB46C2F17);
	r0 = D(r0, s1_1_2, 0x1FDAEFE3, 0x2ADAFFC9, 0x06F50A06, 0xEF2104DE);
	r1 = D(r1, s1_1_2, 0x04FE1EDE, 0xC4210915, 0x0A10FFFF, 0x4CFDF7D3);
	r2 = D(r2, s1_1_2, 0xE60B0DFD, 0xC3C70523, 0x6FE1F3C4, 0x0E9712D1);
	r3 = D(r3, s1_1_2, 0xEEFFFF01, 0xE9131314, 0xD839F2D0, 0xDD12EE0C);
	r4 = D(r4, s1_1_2, 0xEB49FFC9, 0x29F313D9, 0xC10419C5, 0x270712D4);
	r5 = D(r5, s1_1_2, 0x011803F8, 0x0BF30C2B, 0xE8EBE508, 0xF0FC014D);
	r0 = D(r0, s1_2_0, 0x16101AC1, 0xFB0CF815, 0x05FBFF10, 0xFFDAFC3D);
	r1 = D(r1, s1_2_0, 0xF83EF0B4, 0xEBFDEB3C, 0xD608F23F, 0xE82AF0D5);
	r2 = D(r2, s1_2_0, 0x2AD8F6F5, 0xEE12F60D, 0x20FEECDE, 0x070A061A);
	r3 = D(r3, s1_2_0, 0x0EEF0714, 0xD71FF922, 0x08E80F15, 0xF414F11A);
	r4 = D(r4, s1_2_0, 0x0DDEFB0F, 0xF9FDF11E, 0xE7FEFF25, 0x23CBF241);
	r5 = D(r5, s1_2_0, 0xEF1FF8F0, 0x010904F4, 0x07EAFC24, 0x20E4DDF3);
	r0 = D(r0, s1_2_1, 0x06D6E42C, 0xFBECF536, 0xECF7EE1A, 0xCE0BEF2C);
	r1 = D(r1, s1_2_1, 0x0EBDEE5A, 0xF3180DF3, 0xCCFE1C25, 0xE70DFB15);
	r2 = D(r2, s1_2_1, 0xC95211CA, 0xD80CDF1D, 0x3103FDDC, 0x00DEFE2D);
	r3 = D(r3, s1_2_1, 0xFFFD05FF, 0x2BE6F2F4, 0x0FF3F80E, 0x120C0DFC);
	r4 = D(r4, s1_2_1, 0x12E50D0D, 0x20E2EE0B, 0xE913F2D5, 0xF10EF5E4);
	r5 = D(r5, s1_2_1, 0xF526F6F9, 0xE7F8F12D, 0x1A0C09EB, 0x09EF0E20);
	r0 = D(r0, s1_2_2, 0xE10B090D, 0xF0EE04F5, 0xF4F4FF0F, 0xB61EFC10);
	r1 = D(r1, s1_2_2, 0x0104F1FF, 0xEF1D070C, 0x223210AF, 0x1407EDE3);
	r2 = D(r2, s1_2_2, 0x05D5FA12, 0xDEFD15FC, 0x1A0E07F5, 0xFA06EFFB);
	r3 = D(r3, s1_2_2, 0xF8F8010F, 0xF3FD1B0D, 0xF9E4F127, 0xDCFE0C0A);
	r4 = D(r4, s1_2_2, 0x0AF6FF00, 0x12FF0EFE, 0xFA600B81, 0xD91DF0E7);
	r5 = D(r5, s1_2_2, 0xFC00F712, 0xFA020102, 0xFEF2FA03, 0x08F40001);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x15E9F202, 0x0C0604EC, 0x17FEEAED, 0x0BEEFE02);
	r1 = D(r1, s0_0_0, 0xFDFDF8FA, 0x14DEF4FB, 0x04FF062B, 0x1AF2EE1B);
	r2 = D(r2, s0_0_0, 0x00FDFEF4, 0xF507F017, 0xF6F80415, 0x3AF00D01);
	r3 = D(r3, s0_0_0, 0x0DFEF2F0, 0xE7FB0EBF, 0x0116FF00, 0x0507D216);
	r4 = D(r4, s0_0_0, 0xFE0406F0, 0x09D7E700, 0x2DD7DBE3, 0x1421E80E);
	r5 = D(r5, s0_0_0, 0xEEC60B0A, 0xFA03FCF9, 0x15EBED01, 0x1624FBFE);
	r0 = D(r0, s0_0_1, 0x3AFB0DF3, 0x0A220CF3, 0x110301F3, 0x3A57D6D6);
	r1 = D(r1, s0_0_1, 0x1D06FAEF, 0x0CE9E2D2, 0xCCD81A20, 0x10DADE02);
	r2 = D(r2, s0_0_1, 0xED051911, 0xF8F3FD09, 0x0B180EDD, 0xF92527F4);
	r3 = D(r3, s0_0_1, 0xFCE817FA, 0xDA451916, 0x03081816, 0xC80040CA);
	r4 = D(r4, s0_0_1, 0x221FF809, 0x00B4141D, 0xFA07E91B, 0x1F0808C6);
	r5 = D(r5, s0_0_1, 0xF928D1F4, 0x0FFFE006, 0x06FD1004, 0xFF272B11);
	r0 = D(r0, s0_0_2, 0x2006EFFB, 0x1D0AF0F3, 0xFBF301F7, 0xF708F317);
	r1 = D(r1, s0_0_2, 0x04E60CFF, 0x22EAE5E8, 0xE8F10D1C, 0xE50115F9);
	r2 = D(r2, s0_0_2, 0xF80BF508, 0xFE1AF106, 0xE0F31CF9, 0x3C07DAF9);
	r3 = D(r3, s0_0_2, 0xEFF304FD, 0xF4EF112F, 0xF8FD010C, 0xEE1EF401);
	r4 = D(r4, s0_0_2, 0x0C160B07, 0x24FFF0E6, 0x040906ED, 0x161AFC21);
	r5 = D(r5, s0_0_2, 0xF71810F0, 0x10EDF9F1, 0xFEEDF60D, 0x2703EFEA);
	r0 = D(r0, s0_1_0, 0xFA2CFB1D, 0x032614FF, 0x17261601, 0x07F9E7EF);
	r1 = D(r1, s0_1_0, 0xF7FB124E, 0xF121F1F1, 0xEBA310FD, 0x1FFCE800);
	r2 = D(r2, s0_1_0, 0xECE80D03, 0x03F7FB00, 0x14E92000, 0x4416D817);
	r3 = D(r3, s0_1_0, 0x090819F4, 0x091E05FA, 0xF3010DEF, 0x02190323);
	r4 = D(r4, s0_1_0, 0xF20111EE, 0x0A1005DA, 0xFE24FFE8, 0x26EB12D4);
	r5 = D(r5, s0_1_0, 0xEBD10727, 0xEE260D17, 0x2B24D803, 0x15BEC9F8);
	r0 = D(r0, s0_1_1, 0xDD1A250D, 0xFBE8F600, 0x0B32FD23, 0xCFFD0718);
	r1 = D(r1, s0_1_1, 0x2827DFD5, 0xDC281204, 0x0FD2FDE5, 0x4624E3D3);
	r2 = D(r2, s0_1_1, 0xF50AF4FC, 0xFBD81411, 0xFDCFCEE0, 0xE8224BF3);
	r3 = D(r3, s0_1_1, 0x131EFC15, 0x29D7D4F6, 0x04EEF4F8, 0xC4E3FC42);
	r4 = D(r4, s0_1_1, 0x0E3AFF13, 0xF9FD2C1C, 0x212511ED, 0xE99A0FE9);
	r5 = D(r5, s0_1_1, 0xDAC2FD02, 0xFB17F40D, 0x39FE14EA, 0xF607F30A);
	r0 = D(r0, s0_1_2, 0x042714F2, 0xFA06051B, 0x1FFDE8FB, 0xF7FA37F9);
	r1 = D(r1, s0_1_2, 0xE5150D09, 0xD5FD2820, 0x280D04E3, 0xC41446F9);
	r2 = D(r2, s0_1_2, 0x0BE7EAFD, 0x282AD8FE, 0xF0D7F811, 0x2BD0D7FC);
	r3 = D(r3, s0_1_2, 0x0E07E706, 0x381610FF, 0x1EEBF9EC, 0xEAF9091D);
	r4 = D(r4, s0_1_2, 0x02590B1D, 0x01D9E005, 0xDD271613, 0x19E9F209);
	r5 = D(r5, s0_1_2, 0xFAD1FC0D, 0xF706FC20, 0x14FB05E1, 0x100909FF);
	r0 = D(r0, s0_2_0, 0x1EF405CE, 0x1105EF00, 0x0C04FEF5, 0x00FED2F8);
	r1 = D(r1, s0_2_0, 0xE6171800, 0x1D0DF702, 0x050AEF05, 0x000017ED);
	r2 = D(r2, s0_2_0, 0x2AF8DEE7, 0x040004F8, 0x00030409, 0x0C06F301);
	r3 = D(r3, s0_2_0, 0x08EEF4F0, 0xDA0C090D, 0x0906FD01, 0x43D3D0CD);
	r4 = D(r4, s0_2_0, 0x0800EB0F, 0x061AF301, 0x0304F904, 0x1B1AE609);
	r5 = D(r5, s0_2_0, 0xF0181208, 0xEC0B1104, 0x0C0AF502, 0x14F9F7FD);
	r0 = D(r0, s0_2_1, 0x1EBCF7EC, 0x0CFD19F9, 0x06F40C02, 0xDBE4280C);
	r1 = D(r1, s0_2_1, 0x2EF6E1F3, 0x072F0018, 0x27E8CDFD, 0xFAFA1514);
	r2 = D(r2, s0_2_1, 0xF0E71711, 0xEBE923FF, 0x1409E7E9, 0x1EEAFF05);
	r3 = D(r3, s0_2_1, 0xEEF60F01, 0xF0DFEB1B, 0x0702EDFC, 0xF4ED0101);
	r4 = D(r4, s0_2_1, 0x0CFDF5FE, 0xF92222EE, 0x0901EF12, 0xF3FF0F01);
	r5 = D(r5, s0_2_1, 0xF3FC06F8, 0x1B06EDFB, 0x100B0CF9, 0x07F6F005);
	r0 = D(r0, s0_2_2, 0x40E5E5F1, 0x090D0913, 0x10F2E401, 0xEE1F110F);
	r1 = D(r1, s0_2_2, 0xF8040B00, 0xDEF3FC38, 0xE9222FFB, 0xF50EEF0E);
	r2 = D(r2, s0_2_2, 0xF8DF10F9, 0x1AEAE7FD, 0x09DEF809, 0x4003F10B);
	r3 = D(r3, s0_2_2, 0xFEE9F802, 0x1113EFF5, 0xDE061413, 0x1208E20C);
	r4 = D(r4, s0_2_2, 0x091805FC, 0xF4F8FB19, 0xBD174311, 0xE61F0434);
	r5 = D(r5, s0_2_2, 0x090911F0, 0x230AF0EC, 0x030108FA, 0x1BF912DF);
	r0 = D(r0, s1_0_0, 0x05F805E1, 0xFCF0EDE5, 0x0701F70E, 0x0BEA220F);
	r1 = D(r1, s1_0_0, 0xFEEE05E6, 0xFF180706, 0xDE24D3FA, 0xFA0DC7E8);
	r2 = D(r2, s1_0_0, 0x03FBF411, 0x05E4190D, 0xFC1AF404, 0x09F301BE);
	r3 = D(r3, s1_0_0, 0x0A0EF4FD, 0x0EF6DD0B, 0x03F10B00, 0x11E00024);
	r4 = D(r4, s1_0_0, 0x07E8F30F, 0x080EDF21, 0x082FC9EE, 0x07F2F626);
	r5 = D(r5, s1_0_0, 0x0A1D24F6, 0x03E01122, 0xFDFA0E02, 0x011B3625);
	r0 = D(r0, s1_0_1, 0xF70D0DDB, 0x151D1919, 0x03F606FB, 0x1AD31B22);
	r1 = D(r1, s1_0_1, 0xFE0FC800, 0x0CFC06ED, 0x0E01EF84, 0xDF0AFA23);
	r2 = D(r2, s1_0_1, 0xFCED25F1, 0xF0030B17, 0xF406EAF1, 0x0CD9081C);
	r3 = D(r3, s1_0_1, 0x00021000, 0x070CD9F7, 0x190D0A01, 0x340CFDF8);
	r4 = D(r4, s1_0_1, 0x03040A0A, 0xD60C1C10, 0x00DEF2EC, 0x16F1274A);
	r5 = D(r5, s1_0_1, 0x100EF237, 0x0E1CF915, 0x08FAEBED, 0xF6FA2DE2);
	r0 = D(r0, s1_0_2, 0xEEFB0F07, 0x02F013FF, 0xF8EDF006, 0x0F0F2F15);
	r1 = D(r1, s1_0_2, 0x001A0215, 0x01E01312, 0xFCF914FC, 0xEC0CED15);
	r2 = D(r2, s1_0_2, 0x07FEFBF7, 0x0FFBF6FF, 0xD9D003EC, 0x14E6E7FE);
	r3 = D(r3, s1_0_2, 0xFFEA0500, 0x0413F50B, 0xFAFB1CF9, 0x12D756E8);
	r4 = D(r4, s1_0_2, 0x141AFE14, 0xE1FD0F06, 0x1712FA0D, 0xFE0E21E8);
	r5 = D(r5, s1_0_2, 0x1CF9D1F4, 0x1915CF0D, 0xF8FD0DFC, 0xF11AEA0B);
	r0 = D(r0, s1_1_0, 0xFCE9FFFD, 0xFB0AF9EA, 0xFFF9FAE6, 0xF501D315);
	r1 = D(r1, s1_1_0, 0xF6080EE1, 0x0617E600, 0xFB182BDE, 0x040323FF);
	r2 = D(r2, s1_1_0, 0xFF1D0A27, 0x081B0202, 0xF6FF05EE, 0xF31527EF);
	r3 = D(r3, s1_1_0, 0xF801EEEC, 0xFA16F1CF, 0x05021AF8, 0x3A12EAE0);
	r4 = D(r4, s1_1_0, 0x040A05FE, 0x01F701F4, 0x070BF1F6, 0xF5E7FAFC);
	r5 = D(r5, s1_1_0, 0x03D428F0, 0x07E2FFF5, 0x0229E50B, 0xFBF80617);
	r0 = D(r0, s1_1_1, 0x041F2841, 0x36F108EA, 0x33182D13, 0x17EC182A);
	r1 = D(r1, s1_1_1, 0x05D4D4A2, 0x1B110EF4, 0x2700C5F0, 0x06F4EE0F);
	r2 = D(r2, s1_1_1, 0xF20B1A1A, 0xFC2EE51B, 0xE7DFF9C8, 0xFB3103B6);
	r3 = D(r3, s1_1_1, 0xF600111D, 0x31031BD1, 0x3C05F006, 0xFC351410);
	r4 = D(r4, s1_1_1, 0xD7EC05E6, 0xB8DD06F1, 0xEDE4332A, 0xE1E410F4);
	r5 = D(r5, s1_1_1, 0xF3E00104, 0x0FEBF3FD, 0xCE2001D9, 0xD2EFA4F9);
	r0 = D(r0, s1_1_2, 0x0B0BFDDF, 0x1609011D, 0x2A27F1FF, 0x6154090B);
	r1 = D(r1, s1_1_2, 0xEE0D361C, 0xF4252B05, 0x33FF141B, 0x0CFD1106);
	r2 = D(r2, s1_1_2, 0xEFE7D2FE, 0x1E15E10F, 0x15F3101A, 0xAF161023);
	r3 = D(r3, s1_1_2, 0x060DFF08, 0x0AD81F23, 0x11FF0A11, 0x28DAF80A);
	r4 = D(r4, s1_1_2, 0x81F70609, 0xBC120B11, 0xCB0308ED, 0xE108F3E4);
	r5 = D(r5, s1_1_2, 0xE5143200, 0x0A08DE07, 0xDA29EF12, 0x22F901E9);
	r0 = D(r0, s1_2_0, 0xDB030104, 0x08FFDE04, 0x0305FCEE, 0x0E10DE1D);
	r1 = D(r1, s1_2_0, 0xF0ED0E15, 0x17EEBDFF, 0x20EAF6E9, 0xFC2511DF);
	r2 = D(r2, s1_2_0, 0x0803FE0E, 0xFD0103E8, 0xFB0FEE07, 0xFCEBF005);
	r3 = D(r3, s1_2_0, 0x020BF3F1, 0x020BF3DD, 0xF8EDF404, 0x0EFEEDD9);
	r4 = D(r4, s1_2_0, 0x02F11C06, 0x0404E7FC, 0x03F6F7E9, 0xF1FDE30A);
	r5 = D(r5, s1_2_0, 0x1425F3F8, 0x1AF12602, 0x10FAF6EC, 0x06011310);
	r0 = D(r0, s1_2_1, 0xE20507F8, 0xE60EE116, 0xFFDD0206, 0x0405FDFC);
	r1 = D(r1, s1_2_1, 0x3816EAF0, 0x1DE9F22B, 0xED01F6F8, 0xF2F629DB);
	r2 = D(r2, s1_2_1, 0xACF5F718, 0x180A0B09, 0x1B120C07, 0xDC01D902);
	r3 = D(r3, s1_2_1, 0xEFEC0710, 0xF5ED091F, 0xFC03F50B, 0xEE03DE22);
	r4 = D(r4, s1_2_1, 0x0E0D14EA, 0x251816F2, 0x07021200, 0xCF170C2A);
	r5 = D(r5, s1_2_1, 0x1C0600E1, 0x340901FE, 0xF3EB140E, 0x9BEAFEEC);
	r0 = D(r0, s1_2_2, 0x22FBF402, 0x4BF8040F, 0x25ECFE08, 0x24EFEA09);
	r1 = D(r1, s1_2_2, 0x2A04FD11, 0xD4EFF7D0, 0xEDE01BF9, 0xFDFC1407);
	r2 = D(r2, s1_2_2, 0x121205FC, 0x39E0F9FB, 0xFE02FF0C, 0xD2E50E31);
	r3 = D(r3, s1_2_2, 0x08ED08F9, 0xAADD06E1, 0x12FEF60A, 0x12F0F623);
	r4 = D(r4, s1_2_2, 0xB809FB09, 0x1DF0FF02, 0x81F623D8, 0xA1111610);
	r5 = D(r5, s1_2_2, 0x03DE0004, 0x2F06F412, 0x27E0F10C, 0xD91EF508);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-7.746e-03, -2.290e-02, -3.657e-05, -2.653e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(2.970e-03, -1.997e-02, 3.100e-02, -2.503e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(8.543e-03, 1.518e-04, 8.125e-02, 2.767e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(2.007e-02, 4.674e-02, 2.084e-02, 1.027e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-7.345e-03, 1.716e-02, -3.510e-02, 8.817e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.116e-03, 5.992e-02, 4.772e-02, 4.269e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_DS_vk] -conv2
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x14F2F5DC, 0xED23EF23, 0xF3EB09FC, 0x010BEB05);
	r1 = D(r1, s0_0_0, 0x0103F6F2, 0x03F20CE9, 0x0E11F005, 0xF2F40B15);
	r2 = D(r2, s0_0_0, 0x060B000D, 0xF801F407, 0x0000FEF6, 0x09FD0B12);
	r3 = D(r3, s0_0_0, 0xFBF6001A, 0x0CE21CFA, 0xFEFFFC08, 0x0117F304);
	r4 = D(r4, s0_0_0, 0x1400FE06, 0x04010004, 0xFEF10FFC, 0x15F9F81B);
	r5 = D(r5, s0_0_0, 0x0404F7F7, 0xFE380125, 0x05FE050C, 0x01FA02F9);
	r0 = D(r0, s0_0_1, 0xD71ED621, 0xE519F8F3, 0x0D2312F9, 0x0FFB0402);
	r1 = D(r1, s0_0_1, 0x0A03EFF3, 0xF52EF92D, 0x15180006, 0xEDF01218);
	r2 = D(r2, s0_0_1, 0xF6FFFB1D, 0x05E40FEB, 0xEF19F20B, 0xF109EC17);
	r3 = D(r3, s0_0_1, 0x120EF700, 0x08F0FBFD, 0x000BFCFC, 0xFDF5081C);
	r4 = D(r4, s0_0_1, 0x05F1E32B, 0x0CFA02FF, 0xFBF42011, 0x0F090BD6);
	r5 = D(r5, s0_0_1, 0x02F40CF2, 0x13B41FF4, 0xFF02F9FC, 0x06F40A04);
	r0 = D(r0, s0_0_2, 0x4FCEDE1E, 0x18F2130E, 0x0A07FDF8, 0x18FCEB0D);
	r1 = D(r1, s0_0_2, 0x000308FF, 0xEB06100C, 0xF8FA0313, 0x150A0FDF);
	r2 = D(r2, s0_0_2, 0xFD06EE15, 0xF7FFF802, 0xFEFF0303, 0x00EAF805);
	r3 = D(r3, s0_0_2, 0x08EFED08, 0xF8FEFDDD, 0xFD02FCF9, 0xFD08F6F5);
	r4 = D(r4, s0_0_2, 0xFF02EC11, 0xFF0202EF, 0x06F70EFB, 0xF423EBF0);
	r5 = D(r5, s0_0_2, 0x070006F6, 0xF810F0E5, 0x03F803F8, 0xFEF60102);
	r0 = D(r0, s0_1_0, 0x07C1E015, 0x1208EDC6, 0xF5DE26E3, 0xF422DB0A);
	r1 = D(r1, s0_1_0, 0xFCE1C8F5, 0xFF072507, 0xDB2B0805, 0xF508DDFA);
	r2 = D(r2, s0_1_0, 0x00150B11, 0x06040400, 0x06FE0CFB, 0x07160303);
	r3 = D(r3, s0_1_0, 0xB81C0FF4, 0xE622E328, 0xEF1118FA, 0x1C2CFE24);
	r4 = D(r4, s0_1_0, 0xFA0BD612, 0x0AFE0BFC, 0x24F3FF21, 0xDE06080F);
	r5 = D(r5, s0_1_0, 0xF8DCE90D, 0xBA231327, 0x0B0A07EC, 0xF4FAF3F9);
	r0 = D(r0, s0_1_1, 0xB00DF7FE, 0xF2F3B70B, 0xF50F4101, 0xF8D0BB3D);
	r1 = D(r1, s0_1_1, 0xD90DF422, 0x1BD710E3, 0x1DF7E8D0, 0xCEF9DE2B);
	r2 = D(r2, s0_1_1, 0x04D20A06, 0xFF3310F3, 0xF317EDFC, 0xD424CA09);
	r3 = D(r3, s0_1_1, 0x2C12E400, 0xE82CE50C, 0x0BF30904, 0x21D00AFE);
	r4 = D(r4, s0_1_1, 0xDD2FCC06, 0xF81B04FF, 0xFD3DEC0C, 0x100B0A09);
	r5 = D(r5, s0_1_1, 0x0D091FE9, 0xBFF10014, 0xF3DCF518, 0x0E31FFFE);
	r0 = D(r0, s0_1_2, 0x44D40AD4, 0xE517120F, 0x17F3F209, 0x0AE0F108);
	r1 = D(r1, s0_1_2, 0x0300FFEB, 0xF3E4E31A, 0xE3FB0002, 0xEDEE3237);
	r2 = D(r2, s0_1_2, 0x02E2FD1F, 0x06E50502, 0x0AEE0209, 0x30E9010B);
	r3 = D(r3, s0_1_2, 0x12E41318, 0x1AF7FCF6, 0x030306FA, 0xFB17FFF2);
	r4 = D(r4, s0_1_2, 0x00EF09F6, 0xF70404F4, 0xE8FD0416, 0x0009F6F9);
	r5 = D(r5, s0_1_2, 0xFE08FCFF, 0x46F122E7, 0x01000CF4, 0x0A020203);
	r0 = D(r0, s0_2_0, 0x981613F3, 0xD2F519FD, 0x27F0E809, 0xF3191AF7);
	r1 = D(r1, s0_2_0, 0xF6F6F5FE, 0x0DF101F8, 0xFBFA08F3, 0xE6EAFFF5);
	r2 = D(r2, s0_2_0, 0x08F2060C, 0xFF02F701, 0xFC03FC03, 0xE401FB13);
	r3 = D(r3, s0_2_0, 0x0DE722FE, 0xE3F1FD01, 0x02020EF9, 0xECF80703);
	r4 = D(r4, s0_2_0, 0x06F90304, 0x0DE2FCF6, 0xEF170112, 0xFCF3FA09);
	r5 = D(r5, s0_2_0, 0xF10BFE06, 0x1BEF17EF, 0xFC08F6EC, 0xFCFB03FA);
	r0 = D(r0, s0_2_1, 0x1EC7CDFB, 0xED090EDF, 0xEBBBF20D, 0xC32B1A1C);
	r1 = D(r1, s0_2_1, 0xFA1E09FC, 0x13DC0003, 0x07042A1E, 0xF2C3DFFB);
	r2 = D(r2, s0_2_1, 0x00001A05, 0xF5F50001, 0xFEFBF7FD, 0xF006EFF8);
	r3 = D(r3, s0_2_1, 0xF60C190D, 0xF0BDEDF3, 0xFE0C06F5, 0x0309F7FA);
	r4 = D(r4, s0_2_1, 0xE7DFF510, 0x09DF0503, 0xF601F901, 0xF7F2030B);
	r5 = D(r5, s0_2_1, 0xFEED0506, 0xFC1A0B0C, 0x06091AFD, 0x010BFFF9);
	r0 = D(r0, s0_2_2, 0xF4180EEF, 0xE515F8DE, 0xF613FB07, 0xE90C03FE);
	r1 = D(r1, s0_2_2, 0x061905F3, 0x06F0FC05, 0xD4220BFD, 0xE5D50F29);
	r2 = D(r2, s0_2_2, 0xFEF3F600, 0x0208F706, 0x0307FEF5, 0xF2120EE3);
	r3 = D(r3, s0_2_2, 0xF91600EF, 0x000C01E4, 0xFE00FE04, 0x05F2FC00);
	r4 = D(r4, s0_2_2, 0xF302F7F7, 0x08F000F7, 0xFFE00E03, 0x06EF0107);
	r5 = D(r5, s0_2_2, 0xF1F90C0C, 0x17FF0325, 0x10080C03, 0xFEFCFE01);
	r0 = D(r0, s1_0_0, 0xA0FDFFFD, 0x0F29181B, 0xD8041EFC, 0xF3E82920);
	r1 = D(r1, s1_0_0, 0xF2FFF910, 0x220AF2E7, 0x0AF509FF, 0xFDE0C12E);
	r2 = D(r2, s1_0_0, 0x0D0304F9, 0x00010BFD, 0x02F710F4, 0xF2F82AEC);
	r3 = D(r3, s1_0_0, 0x1CF9E6EF, 0xEB0401F3, 0x04FF0704, 0xE0F7F216);
	r4 = D(r4, s1_0_0, 0x180FFBEE, 0x00F4E704, 0xFE0EF3F1, 0x1505FE0B);
	r5 = D(r5, s1_0_0, 0xF9001D19, 0xEBF5E80F, 0xF30AFB10, 0x0800FE0A);
	r0 = D(r0, s1_0_1, 0xDA5B17F8, 0xF532FF22, 0x05F90300, 0x250EFF58);
	r1 = D(r1, s1_0_1, 0xED161003, 0x1AE1E181, 0x1FD30917, 0xE2BBDA54);
	r2 = D(r2, s1_0_1, 0xFB120D12, 0x00F0FC03, 0x060B0ADD, 0x091C00FF);
	r3 = D(r3, s1_0_1, 0x0B1EF8F3, 0x09F4FD2B, 0xF5070606, 0xF508F403);
	r4 = D(r4, s1_0_1, 0xD4010C07, 0x0FE7FE0F, 0x05F603F1, 0x2C08F91A);
	r5 = D(r5, s1_0_1, 0xF9F00EE7, 0xF4D3FE24, 0xFD02051C, 0xF4F20826);
	r0 = D(r0, s1_0_2, 0xEA05DBDC, 0xF9D3E60A, 0xF1FCFE3F, 0xE5DB092E);
	r1 = D(r1, s1_0_2, 0xF9F201FA, 0xFB1601F3, 0xE3CE001F, 0x189D0DE0);
	r2 = D(r2, s1_0_2, 0x00140604, 0xFFFA16FD, 0x0308FFFE, 0xF11905FC);
	r3 = D(r3, s1_0_2, 0x04FFF605, 0xFAF2FCFE, 0x02FF0000, 0xF9F8F4F9);
	r4 = D(r4, s1_0_2, 0xFE121ED8, 0xFE0AFE00, 0x030CF201, 0x0D14FF10);
	r5 = D(r5, s1_0_2, 0x03FA01F6, 0xF8DC15F0, 0x0202F8FD, 0xF5FB0115);
	r0 = D(r0, s1_1_0, 0x050C06E6, 0x1FF191F3, 0xFE011503, 0xF40D2F0C);
	r1 = D(r1, s1_1_0, 0x03D8C7F8, 0x170CE908, 0x050EE604, 0x1BCAC602);
	r2 = D(r2, s1_1_0, 0x022217E5, 0x050B0904, 0x0208FBFF, 0xD53912FB);
	r3 = D(r3, s1_1_0, 0xFB1804FC, 0xF40C09FD, 0xFC1C1C04, 0xD824071D);
	r4 = D(r4, s1_1_0, 0x0A0C0101, 0x11EFFE09, 0x14F7FF03, 0x1C1305F5);
	r5 = D(r5, s1_1_0, 0x00FD0CF1, 0xF42A2607, 0x03EB11F5, 0x0100080D);
	r0 = D(r0, s1_1_1, 0xB6294506, 0xF9C70D02, 0x06F2FDD1, 0xA6D2AEF1);
	r1 = D(r1, s1_1_1, 0x05E5E9F8, 0x69A1F5C7, 0xFFD70A13, 0xE8B61526);
	r2 = D(r2, s1_1_1, 0x1C2614CD, 0x09EBFD16, 0x220711F6, 0xF7FB0BE7);
	r3 = D(r3, s1_1_1, 0xD35C011D, 0xFD29130B, 0xF01B0518, 0x050B0F1F);
	r4 = D(r4, s1_1_1, 0xEB2716F2, 0x05010FFF, 0x18140B01, 0xFE181701);
	r5 = D(r5, s1_1_1, 0x0A0AFDC3, 0xCEFEE831, 0xE9291C1A, 0xF41009F9);
	r0 = D(r0, s1_1_2, 0xCFF2F3D8, 0xD5C7E01A, 0x11E401F9, 0xF3C70AF4);
	r1 = D(r1, s1_1_2, 0xF9FD03F2, 0x15221C07, 0xF8813010, 0xFEB0D13E);
	r2 = D(r2, s1_1_2, 0xFA18110C, 0xFF02FC0B, 0xFDF00509, 0xD91733E0);
	r3 = D(r3, s1_1_2, 0x07EEFE0D, 0xEC1006FD, 0x00FEFA08, 0x07FFEF15);
	r4 = D(r4, s1_1_2, 0xFB1115BC, 0x08260AF4, 0xF421FE05, 0x0BE115FB);
	r5 = D(r5, s1_1_2, 0x0FF51801, 0x06E4D506, 0xEE040118, 0x0409FE0B);
	r0 = D(r0, s1_2_0, 0xD149301D, 0xFAC023EC, 0x01F90F0D, 0x060604F3);
	r1 = D(r1, s1_2_0, 0xFBF4F908, 0x0F0AFE03, 0x16EADB09, 0xF9A8E2F4);
	r2 = D(r2, s1_2_0, 0x130203FC, 0x04F9FA00, 0x05F4FEFC, 0x02071AF5);
	r3 = D(r3, s1_2_0, 0xF2D1E8F3, 0x09CAE601, 0x000AFCF8, 0xEDE8FB01);
	r4 = D(r4, s1_2_0, 0xE52D0AF6, 0x15EDFDFA, 0x00130EFD, 0x190E0002);
	r5 = D(r5, s1_2_0, 0xFC00FE01, 0x2104DEF7, 0xFE15F205, 0xFD0F03FE);
	r0 = D(r0, s1_2_1, 0x0B3C0EB9, 0xDF39EF0E, 0x09F2FEFE, 0xF3DD35EE);
	r1 = D(r1, s1_2_1, 0xF2FD0B16, 0x2FED0106, 0x049C1F14, 0x224CD5EC);
	r2 = D(r2, s1_2_1, 0x130A06E2, 0xFC07FFFF, 0x0211FDFE, 0x0110F8F9);
	r3 = D(r3, s1_2_1, 0x1C01E5D5, 0x0EE509F8, 0xFBFEFA08, 0xF6E80B14);
	r4 = D(r4, s1_2_1, 0xFE150CDB, 0x160305FE, 0x08070A27, 0x042109FE);
	r5 = D(r5, s1_2_1, 0x09DBF9EC, 0x0FCC1B0B, 0xF701FA01, 0xFD0602FE);
	r0 = D(r0, s1_2_2, 0x01DA0DDE, 0xF80FEAF5, 0x0912F201, 0xF11223F9);
	r1 = D(r1, s1_2_2, 0x03050505, 0x0DFDF603, 0x07F4F1FF, 0x019CD91E);
	r2 = D(r2, s1_2_2, 0xF2FFFCF9, 0x05F3010A, 0xFBF3FC04, 0xFBE7F9EF);
	r3 = D(r3, s1_2_2, 0xF103F4EB, 0xFDFFECE4, 0x02EF02FF, 0x02E9F704);
	r4 = D(r4, s1_2_2, 0x0423F7EA, 0x011DFCF0, 0x0B02F8F0, 0xFF1200FC);
	r5 = D(r5, s1_2_2, 0xF71F0700, 0xFCC9F51A, 0xFA13FEFC, 0xF9030600);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xED1905FF, 0xB0DBC4B8, 0x06011010, 0xD50D11FD);
	r1 = D(r1, s0_0_0, 0xEC0602E6, 0x0BEADC01, 0x1002E931, 0xF110F5E0);
	r2 = D(r2, s0_0_0, 0x17E8F6EF, 0x02FF1603, 0x03EE01F3, 0xD1130809);
	r3 = D(r3, s0_0_0, 0x0016E614, 0xE414F5FE, 0xFBF8020B, 0xE2F011DF);
	r4 = D(r4, s0_0_0, 0xFD04F3E8, 0x020003F7, 0x2D0204F7, 0x10F51014);
	r5 = D(r5, s0_0_0, 0x09060BFB, 0xD8F30928, 0x1302F7F8, 0xFB09090A);
	r0 = D(r0, s0_0_1, 0x4AC793AC, 0xC921E3E7, 0xF0D1FEE1, 0xFAECD6FB);
	r1 = D(r1, s0_0_1, 0x1107F101, 0x07E00303, 0xDCC90FE3, 0x2BF2DE10);
	r2 = D(r2, s0_0_1, 0x0514FFFE, 0x110E2500, 0x0BE703F5, 0xDF03E0BB);
	r3 = D(r3, s0_0_1, 0xE4FEE1F1, 0xEB02CEF9, 0xF901F8F5, 0x0107ECF6);
	r4 = D(r4, s0_0_1, 0xFBE5FFD9, 0xFC100D11, 0x0706E915, 0xE50701F1);
	r5 = D(r5, s0_0_1, 0x0FEE26F0, 0xFA33F0FF, 0x0B12F814, 0xF008FBF5);
	r0 = D(r0, s0_0_2, 0x190908E2, 0x15190AF9, 0xFCF6F7F9, 0x1D14ED0C);
	r1 = D(r1, s0_0_2, 0x06FE05FF, 0x04FECE03, 0x0714E604, 0x1608FC39);
	r2 = D(r2, s0_0_2, 0x04F4E6F6, 0x0DFA1301, 0xFD0A10FF, 0xF3061CDF);
	r3 = D(r3, s0_0_2, 0xFC10FEF0, 0xFFF4F50D, 0xFF020AFC, 0x090C13F4);
	r4 = D(r4, s0_0_2, 0x060814F3, 0x02FEEC02, 0x06EBED03, 0x0701EC06);
	r5 = D(r5, s0_0_2, 0xF00AFA0D, 0x0EE4F719, 0xFFFA0A08, 0xF9FEF9F6);
	r0 = D(r0, s0_1_0, 0x020C0000, 0xBF031C0A, 0x0B18EAF7, 0x37D71007);
	r1 = D(r1, s0_1_0, 0x09282803, 0x01D6E397, 0xFED7F8F9, 0xFF1E0A21);
	r2 = D(r2, s0_1_0, 0x15F6F9EA, 0x09F2ED04, 0xFFFCF802, 0xF00B0416);
	r3 = D(r3, s0_1_0, 0xD4E8CC14, 0x00F3FB2A, 0xFBE0F80C, 0x03DFFB28);
	r4 = D(r4, s0_1_0, 0x1FED22E5, 0xF60604F5, 0x2908EFF8, 0xFF04F6FD);
	r5 = D(r5, s0_1_0, 0x0EF71118, 0x23EBFA19, 0xF40D092C, 0xFF07131F);
	r0 = D(r0, s0_1_1, 0x03E834D7, 0x06C72B10, 0x0B0FDB19, 0xFB232AC3);
	r1 = D(r1, s0_1_1, 0xFB09FC1F, 0x141B0AD3, 0x22F7EDB8, 0x55CA0FFC);
	r2 = D(r2, s0_1_1, 0x101DF491, 0x0614F7F9, 0x0CEEFA26, 0x12DB1622);
	r3 = D(r3, s0_1_1, 0x0EFBB31B, 0xEBE0F501, 0xF4EB0006, 0xFDE410EF);
	r4 = D(r4, s0_1_1, 0x13FB04D5, 0xFEF1D912, 0x13FEFA2E, 0x020F10F6);
	r5 = D(r5, s0_1_1, 0x0420FCE8, 0xE8CD2208, 0x06E80502, 0xFCF2F116);
	r0 = D(r0, s0_1_2, 0xF6020808, 0xD1F6D700, 0x10FA030F, 0x05F9F4DB);
	r1 = D(r1, s0_1_2, 0x03F5F5FB, 0x01022605, 0xFBFBFFD6, 0xE90FCFF8);
	r2 = D(r2, s0_1_2, 0x04FC00F3, 0x06F7F403, 0xFEF9FF06, 0x08FEF9F5);
	r3 = D(r3, s0_1_2, 0xEFF0F9F9, 0xECFEDCEE, 0x0004FCF7, 0xFE18010C);
	r4 = D(r4, s0_1_2, 0x0F04F6E1, 0x02FEFDF9, 0xFFF3F903, 0xF70817F4);
	r5 = D(r5, s0_1_2, 0x01F9FCFB, 0x05FCE0FE, 0x0003F6FD, 0x06FFFBFA);
	r0 = D(r0, s0_2_0, 0x15EA02E8, 0x04F51401, 0xFE09F0F2, 0xDF1D09E6);
	r1 = D(r1, s0_2_0, 0x10FE120D, 0x0A0AFAEB, 0x04021CFB, 0x0402EFE9);
	r2 = D(r2, s0_2_0, 0x0EF3F2EF, 0xFC0406FF, 0x05020506, 0xE3FFF3EE);
	r3 = D(r3, s0_2_0, 0xBFEE11E9, 0xE4E50AE9, 0xF503FC00, 0x06040409);
	r4 = D(r4, s0_2_0, 0x0B0103E4, 0xFF080A00, 0x10010F01, 0xFEFAFCF3);
	r5 = D(r5, s0_2_0, 0xFE120DFE, 0xD70BF9F6, 0x05FF1110, 0xFFF8FB06);
	r0 = D(r0, s0_2_1, 0x22C531E1, 0xC9D20107, 0x0C151AFA, 0xD90AF9ED);
	r1 = D(r1, s0_2_1, 0x09FEF00C, 0x041B1EE4, 0x03A7CCE4, 0x26EC2E09);
	r2 = D(r2, s0_2_1, 0x151EF6E3, 0x13FE1203, 0x11F502FF, 0xE0120DF4);
	r3 = D(r3, s0_2_1, 0xE4FB17E1, 0xEFDF360F, 0xFF100300, 0x1BF2F70E);
	r4 = D(r4, s0_2_1, 0x19F415D0, 0x08E7EAF4, 0xFFF105EB, 0x0001F7F6);
	r5 = D(r5, s0_2_1, 0xFB0A1102, 0x2418ED16, 0xF8FAE311, 0xF705FD06);
	r0 = D(r0, s0_2_2, 0x062007F0, 0xF00204F2, 0x06F90215, 0x220713F1);
	r1 = D(r1, s0_2_2, 0xFF0701F7, 0x16F804F3, 0xFC1916D8, 0x13DFEBFF);
	r2 = D(r2, s0_2_2, 0x0F04FBE9, 0x03F906FF, 0x050BFA01, 0xF72E11F8);
	r3 = D(r3, s0_2_2, 0xFA0C1BF2, 0xF4FE1507, 0xFCFF0606, 0x00FB07FB);
	r4 = D(r4, s0_2_2, 0x0E091AFA, 0x0D080704, 0x04FC0CEC, 0x05FDFC02);
	r5 = D(r5, s0_2_2, 0xFCEEFC0B, 0x0601F2F5, 0x020B0008, 0xFDFF0106);
	r0 = D(r0, s1_0_0, 0x012826E3, 0x0BDF1B1E, 0x04FCD211, 0x0FFB19F0);
	r1 = D(r1, s1_0_0, 0x0B050305, 0x06F31409, 0xFFF91309, 0x111E0ADE);
	r2 = D(r2, s1_0_0, 0x12FE0CF4, 0xFB09FB0A, 0xF601060C, 0xEC0602FD);
	r3 = D(r3, s1_0_0, 0xF3041AF6, 0xFF0306FD, 0xEB01FA05, 0xF6D8FC09);
	r4 = D(r4, s1_0_0, 0x000D1EF8, 0xF7F6F503, 0x0C040B04, 0xF3FCF8F7);
	r5 = D(r5, s1_0_0, 0x03120D07, 0x0DEEEBED, 0x02E9F7FF, 0xFF0D0502);
	r0 = D(r0, s1_0_1, 0x04133611, 0x1CFEFCEB, 0x0EE1FAFE, 0x1C04040D);
	r1 = D(r1, s1_0_1, 0xF0F3011C, 0x00FD1BEF, 0xF705280F, 0x0A0717F3);
	r2 = D(r2, s1_0_1, 0xFD0103FA, 0x0C06FF01, 0x00030109, 0x0909FF09);
	r3 = D(r3, s1_0_1, 0xC5F4151A, 0x0218090E, 0xFCFDFAF8, 0xEC0F01F5);
	r4 = D(r4, s1_0_1, 0xEAF70009, 0xFF0502F3, 0x1010F8F4, 0xF401F5F1);
	r5 = D(r5, s1_0_1, 0x01ECF219, 0x07EA0403, 0x0402F7F6, 0xF80F0800);
	r0 = D(r0, s1_0_2, 0xCAFC07F1, 0x290CFECE, 0x0BF6FE0A, 0xF6F7FEDA);
	r1 = D(r1, s1_0_2, 0x00F90800, 0xEE02131C, 0x0F0412FE, 0xFE12F2ED);
	r2 = D(r2, s1_0_2, 0xFD041A03, 0xF9070013, 0xFF02FEF1, 0xFCF1FFDC);
	r3 = D(r3, s1_0_2, 0xE4FE24F2, 0xFFF706FB, 0xFCFC00F8, 0x10FFFDE6);
	r4 = D(r4, s1_0_2, 0xFBEF0506, 0xFAFC0B1E, 0x090E06FF, 0x07FD0602);
	r5 = D(r5, s1_0_2, 0xFEF5F3FE, 0xE20509FA, 0x0A04F3FB, 0xF400050E);
	r0 = D(r0, s1_1_0, 0xE80AE51E, 0x312B1519, 0x0B38C2EC, 0xEFDBEA0F);
	r1 = D(r1, s1_1_0, 0x073D1E20, 0xF9EBFFED, 0xFFD52FF7, 0x15F0FD0D);
	r2 = D(r2, s1_1_0, 0xF6FD1004, 0x05F00001, 0x05F1FCF9, 0x09BEC3EE);
	r3 = D(r3, s1_1_0, 0x21CF3518, 0x121FFB07, 0x01DBFAFC, 0xF891F5FF);
	r4 = D(r4, s1_1_0, 0xF90E1100, 0x050BFFEE, 0xFEF500EE, 0x060805EC);
	r5 = D(r5, s1_1_0, 0xF4270F01, 0xD3AC14FA, 0xFB03F802, 0xFA200208);
	r0 = D(r0, s1_1_1, 0xFF120735, 0x1309390F, 0xF8EBE0E0, 0xFF311301);
	r1 = D(r1, s1_1_1, 0xB6080BBB, 0x25212AFA, 0x0A0D38C2, 0x061214EB);
	r2 = D(r2, s1_1_1, 0x0A010F1B, 0xF6F406ED, 0x01EE060C, 0x0B06EB26);
	r3 = D(r3, s1_1_1, 0x4A1E383D, 0xF70D0722, 0x12FEFB4A, 0x2406043B);
	r4 = D(r4, s1_1_1, 0xEE1ABBDC, 0x1AF702E0, 0x030F05F0, 0xFDFA13EB);
	r5 = D(r5, s1_1_1, 0x03F0D8E2, 0x34EE0506, 0x031EF62C, 0x08F809E4);
	r0 = D(r0, s1_1_2, 0xFD00E0FD, 0xB8E512E9, 0xE7FA1624, 0xD50E0BF0);
	r1 = D(r1, s1_1_2, 0xF4F7FD28, 0x1BFF0ED0, 0xDA110DC1, 0x1FDDE5FC);
	r2 = D(r2, s1_1_2, 0xF60A100A, 0xECFAFF35, 0xEDFA0B12, 0xBE03F51E);
	r3 = D(r3, s1_1_2, 0xBDF143F4, 0xE00E0B12, 0x0603FEFA, 0xE9EFF8EC);
	r4 = D(r4, s1_1_2, 0xFF07FE08, 0xFC02FF0F, 0xF90D05FE, 0xF1FC0DC5);
	r5 = D(r5, s1_1_2, 0x260AFA04, 0x150FF725, 0x0706EFEF, 0x07FF071B);
	r0 = D(r0, s1_2_0, 0xDBD7B0F6, 0x00E1F5E0, 0xFD0B910C, 0xF2061E03);
	r1 = D(r1, s1_2_0, 0x0A0DFCF2, 0x03E42DFB, 0xF8F83205, 0x0EE6F902);
	r2 = D(r2, s1_2_0, 0x091013FC, 0x04F50100, 0x050F0BFA, 0x050F1206);
	r3 = D(r3, s1_2_0, 0x07020D0C, 0x08EB1F08, 0x04F5F809, 0x05DEEE0C);
	r4 = D(r4, s1_2_0, 0xF40C1008, 0xFB0D0709, 0x03DE2903, 0x00FE010B);
	r5 = D(r5, s1_2_0, 0xFE01FA07, 0xFF1AFC0C, 0xF300D80D, 0x0210FB08);
	r0 = D(r0, s1_2_1, 0x51260616, 0xE60CF41C, 0x0EE2D111, 0xF52005DF);
	r1 = D(r1, s1_2_1, 0x02F204E7, 0x1BF31CE4, 0x01F70D15, 0xFE08EB29);
	r2 = D(r2, s1_2_1, 0xF70B0E0D, 0x06F6100B, 0xFD0E0618, 0xF315E90B);
	r3 = D(r3, s1_2_1, 0xFF08F3FF, 0x0D060D08, 0x0C08FCFD, 0x0D080AF3);
	r4 = D(r4, s1_2_1, 0xFE250A10, 0xF619EC22, 0x020B1907, 0x03FFFD04);
	r5 = D(r5, s1_2_1, 0xEAF4F7F0, 0x3E370ED6, 0xF6E101E5, 0x0002FC0A);
	r0 = D(r0, s1_2_2, 0xD7F1080D, 0x08FA3BF8, 0x12F9F9FD, 0xF3130EE2);
	r1 = D(r1, s1_2_2, 0x0313F8E4, 0x0B0902E2, 0x210300F3, 0xF2160FFE);
	r2 = D(r2, s1_2_2, 0xFE110016, 0x0B0209FE, 0xF1F70213, 0xFEF8E803);
	r3 = D(r3, s1_2_2, 0x22FA16D4, 0xD9E918E8, 0xFDFD03FD, 0xF7F50006);
	r4 = D(r4, s1_2_2, 0x120EFCF0, 0xFDF6FC0F, 0x0E0200DB, 0xFE05FB1D);
	r5 = D(r5, s1_2_2, 0x0311ED06, 0xF0F415FD, 0x04F8E500, 0xFCFB020B);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x09FE3120, 0x1381DFED, 0x14E7DA00, 0x09D108FE);
	r1 = D(r1, s0_0_0, 0xE91401F9, 0x010703F8, 0xFB0102F4, 0xDDF81BF9);
	r2 = D(r2, s0_0_0, 0xFAF80B0A, 0x0502F300, 0x0DFDF500, 0x1BF3FC00);
	r3 = D(r3, s0_0_0, 0xD7E32306, 0xEDF50FF5, 0x0400FD09, 0xFFCBFC01);
	r4 = D(r4, s0_0_0, 0xF1FCFD03, 0xFD12FBFE, 0x0005FCF8, 0x0403FC09);
	r5 = D(r5, s0_0_0, 0x153700F3, 0xEBD516FB, 0xFEFB02FE, 0xF9010500);
	r0 = D(r0, s0_0_1, 0xF3FEF113, 0x1EE5D2FD, 0xFBCAFD05, 0xFEEF0108);
	r1 = D(r1, s0_0_1, 0x15F9FA03, 0x0226F6F8, 0x10E4EEEC, 0xF216F208);
	r2 = D(r2, s0_0_1, 0xF402FD12, 0xFC1901FF, 0x06FAF601, 0x08F3DF13);
	r3 = D(r3, s0_0_1, 0x0401EEF7, 0xEAE808F9, 0x03040000, 0x120005FA);
	r4 = D(r4, s0_0_1, 0xF30EEF1F, 0xF50D13FF, 0xEC101205, 0x07120205);
	r5 = D(r5, s0_0_1, 0x02FFF1FD, 0xEAF60BF1, 0xFCF6FE0E, 0xFF070500);
	r0 = D(r0, s0_0_2, 0xDE041CEC, 0xF4070A00, 0x07EB09FC, 0x0EF803F7);
	r1 = D(r1, s0_0_2, 0x0CF402F8, 0x130F02F9, 0x03F712F6, 0x01F0E9FF);
	r2 = D(r2, s0_0_2, 0x0B0502F5, 0x00F8FC06, 0x01FC0301, 0xFF050F04);
	r3 = D(r3, s0_0_2, 0xF71005FE, 0xFA02FFFE, 0x07FEFE01, 0xFE01FC00);
	r4 = D(r4, s0_0_2, 0x0905FCFD, 0x0304FDF8, 0xF50900FC, 0x090B0000);
	r5 = D(r5, s0_0_2, 0xF4F80706, 0x1A0020F6, 0xFC08F4F9, 0x04FDFBFC);
	r0 = D(r0, s0_1_0, 0x1FDFF614, 0xF8F25AD9, 0x16FECED8, 0xFEC8FD1A);
	r1 = D(r1, s0_1_0, 0xFC00E71A, 0x191DF6E5, 0x06F4FD0C, 0xF4C941E2);
	r2 = D(r2, s0_1_0, 0x071B05EB, 0x01070700, 0x081804FD, 0xFEF70A17);
	r3 = D(r3, s0_1_0, 0xCAD12CFE, 0x21BCEB17, 0xEBE80825, 0xECFE032B);
	r4 = D(r4, s0_1_0, 0x0302FC0F, 0xFF23F802, 0x102206F9, 0x07110418);
	r5 = D(r5, s0_1_0, 0x0595FED2, 0x07E7FFF5, 0xF6CD18ED, 0xEEF1050B);
	r0 = D(r0, s0_1_1, 0x0F00EE32, 0x041A2C12, 0xDF1CEE0C, 0x223614B5);
	r1 = D(r1, s0_1_1, 0xFDFD1513, 0xFF210DE7, 0x299DF1CF, 0xF6D00FF0);
	r2 = D(r2, s0_1_1, 0xF3F6E70E, 0x0912F5E2, 0x0D151008, 0x03071819);
	r3 = D(r3, s0_1_1, 0xFF0FD9F6, 0x1214DE10, 0xFFFDFAFD, 0xE6FD19FC);
	r4 = D(r4, s0_1_1, 0xDF21ED22, 0xF206F606, 0x23FED301, 0xFC1410F2);
	r5 = D(r5, s0_1_1, 0x2FF4DFDD, 0xD01AF10F, 0xF91BDB1C, 0xF8FEFB13);
	r0 = D(r0, s0_1_2, 0xDE40E202, 0x0BEA0D04, 0xE7EB22FC, 0xFF10C417);
	r1 = D(r1, s0_1_2, 0x040CF10B, 0xF60E04F3, 0x02B8E90A, 0x05E4F2CF);
	r2 = D(r2, s0_1_2, 0xF3011403, 0x0AFC0504, 0xF9FC0607, 0xEF062207);
	r3 = D(r3, s0_1_2, 0xF0052108, 0xF40BF7F9, 0x040404FC, 0x0A040FF7);
	r4 = D(r4, s0_1_2, 0xF7F72305, 0xFC00FAF8, 0x0301FC00, 0x0B0100FD);
	r5 = D(r5, s0_1_2, 0x02FA03FF, 0xDCF505D9, 0x0407F8F5, 0xFAFF03FD);
	r0 = D(r0, s0_2_0, 0xC70BEB02, 0x14B211E7, 0x1FD3FE0D, 0xEE07D9FA);
	r1 = D(r1, s0_2_0, 0xF910061B, 0x1B0901F0, 0x010114D8, 0x23A804FD);
	r2 = D(r2, s0_2_0, 0x0808F5F7, 0x05F80001, 0x05F80001, 0x0CF50B08);
	r3 = D(r3, s0_2_0, 0x2DD50418, 0xFFF0F20C, 0xFEFCFC08, 0xFB09DF23);
	r4 = D(r4, s0_2_0, 0xFC1E0CF9, 0x11FE04FB, 0xFCF7FCF5, 0x0CF606E1);
	r5 = D(r5, s0_2_0, 0x00F1F81A, 0x011EDAF4, 0xF703F90F, 0xFBFA00FB);
	r0 = D(r0, s0_2_1, 0x0D041A10, 0x2AE61825, 0x15EDEFFF, 0x06E2FB49);
	r1 = D(r1, s0_2_1, 0xF010DB1B, 0x190AE081, 0x0E981F81, 0x0610F725);
	r2 = D(r2, s0_2_1, 0x0503FADE, 0xF603E1F1, 0xFD092001, 0x03FEFC1A);
	r3 = D(r3, s0_2_1, 0x0BF41322, 0xFFFEFC2A, 0xFA05FC01, 0xF1010BF2);
	r4 = D(r4, s0_2_1, 0x1109EB08, 0x0CFA140C, 0x1DE1000C, 0x09F809DC);
	r5 = D(r5, s0_2_1, 0x02F619E3, 0xEF0ADA0D, 0xE00EF815, 0x02000DFF);
	r0 = D(r0, s0_2_2, 0xFEFCFCD1, 0x02081119, 0x0A010D01, 0x13EB0605);
	r1 = D(r1, s0_2_2, 0xFFFF15FD, 0xFE1406ED, 0x25D400C0, 0x0BE5F6E1);
	r2 = D(r2, s0_2_2, 0x020AF2FC, 0x02FAFF11, 0x0307FCFE, 0x060E02F1);
	r3 = D(r3, s0_2_2, 0x0403FA09, 0xFB1C24FE, 0x02020101, 0x09FBFDFE);
	r4 = D(r4, s0_2_2, 0xF818120D, 0xF90506F5, 0xF6090B14, 0x04FD04EA);
	r5 = D(r5, s0_2_2, 0xFDFB06F4, 0xE9FB0BF4, 0xF5FBF9FD, 0xF9010802);
	r0 = D(r0, s1_0_0, 0xAAE82D18, 0x1610F1EB, 0x0D11EEF6, 0x040E0208);
	r1 = D(r1, s1_0_0, 0x070107EC, 0x12F4FC06, 0x1708F2FF, 0x0FF505FD);
	r2 = D(r2, s1_0_0, 0x0F0CF70C, 0x01F702FF, 0xFBEFFD04, 0xEBEF2619);
	r3 = D(r3, s1_0_0, 0x0D29FD2F, 0x06021808, 0xFA0A0215, 0x041800E3);
	r4 = D(r4, s1_0_0, 0x110D1C0C, 0x0C08F509, 0x010000F9, 0xEEE30611);
	r5 = D(r5, s1_0_0, 0xFEF50AFB, 0x1A111322, 0x050FF5E7, 0x01040005);
	r0 = D(r0, s1_0_1, 0x2B0BFC3C, 0x320B0FCD, 0xFE2AF5E1, 0x1604F109);
	r1 = D(r1, s1_0_1, 0x08FCD70B, 0x12F9FD3B, 0x20FFEB04, 0x0CF311DF);
	r2 = D(r2, s1_0_1, 0x0D0DF108, 0xF7DC04EE, 0xFE01F504, 0xEBF9E327);
	r3 = D(r3, s1_0_1, 0x13FE0632, 0x07F209F9, 0x02010606, 0xFA061EEA);
	r4 = D(r4, s1_0_1, 0xF518FD1B, 0xF9FF0D0B, 0x05F10AF0, 0xEF1DE81B);
	r5 = D(r5, s1_0_1, 0xF3FDECF3, 0x24141215, 0xFFFCFFF5, 0x05FF0E03);
	r0 = D(r0, s1_0_2, 0xF813F9F9, 0x0DF9F223, 0x1D2311DE, 0x052327E7);
	r1 = D(r1, s1_0_2, 0xFC0B0004, 0x0311F6EF, 0x00040E04, 0x14EE02EE);
	r2 = D(r2, s1_0_2, 0xF9100DFA, 0xFBEDF3F3, 0x0305F5FF, 0xF01F01FC);
	r3 = D(r3, s1_0_2, 0x04F80007, 0xFF0909FE, 0x0007F508, 0x05F1F814);
	r4 = D(r4, s1_0_2, 0xEC030106, 0x01FB0FFD, 0x090411EF, 0xF30000F0);
	r5 = D(r5, s1_0_2, 0x0803FEFA, 0xE3040F1A, 0x01040EF0, 0x0201F902);
	r0 = D(r0, s1_1_0, 0xE924892B, 0xFE00E9E2, 0x03CC1102, 0x1850C128);
	r1 = D(r1, s1_1_0, 0xFD1D1FF9, 0xF9E60AF7, 0xF40E0113, 0x0519EE0B);
	r2 = D(r2, s1_1_0, 0x06FF01FF, 0xFBFFF4F6, 0xF3F4FFF7, 0xEF25E411);
	r3 = D(r3, s1_1_0, 0xD20DFDC3, 0xEA1B02F6, 0xFE0DE0F2, 0x1230C302);
	r4 = D(r4, s1_1_0, 0xFF1B0D07, 0x060C0B04, 0x08FE0B0F, 0x0C051B1D);
	r5 = D(r5, s1_1_0, 0xEE09F401, 0x212DE3F4, 0x0912F415, 0x0811EE08);
	r0 = D(r0, s1_1_1, 0x280500F4, 0x1600F1D2, 0xE72601B0, 0x200B46EF);
	r1 = D(r1, s1_1_1, 0xF217CD06, 0xC93F270B, 0x05E74009, 0xFD0C0451);
	r2 = D(r2, s1_1_1, 0xFD2717F2, 0x08FE0E00, 0x02FE18F9, 0x16F20DDC);
	r3 = D(r3, s1_1_1, 0x28F416DA, 0xD70812EA, 0x14F826F6, 0x24DF0702);
	r4 = D(r4, s1_1_1, 0xEDFA00E6, 0xEFEC02F0, 0x0402FAFA, 0x0A0610E4);
	r5 = D(r5, s1_1_1, 0xEF24FC0B, 0x04D21BD2, 0x030FCBED, 0x09FAF809);
	r0 = D(r0, s1_1_2, 0x2D01160B, 0xEA1AE037, 0x13FFF21C, 0xE80E9A62);
	r1 = D(r1, s1_1_2, 0xF5FBF610, 0x3224F5E4, 0x2ED1B5DA, 0x0AFEFF15);
	r2 = D(r2, s1_1_2, 0x050514EB, 0xF50D0418, 0x11020613, 0x01143C25);
	r3 = D(r3, s1_1_2, 0xFF0EF2F5, 0xE6F5F71A, 0x000208F9, 0x0409F516);
	r4 = D(r4, s1_1_2, 0xEA000DFA, 0x0EF2F6EA, 0xF202EAF4, 0xFD0FDD1F);
	r5 = D(r5, s1_1_2, 0xFCF11311, 0xF1F50FE1, 0x080501DC, 0x01020DF9);
	r0 = D(r0, s1_2_0, 0x3AF3D624, 0xF6CE1824, 0x08F90903, 0x2102ECE4);
	r1 = D(r1, s1_2_0, 0xEE1000F8, 0xFE21FE09, 0x1416030E, 0xEEE425F0);
	r2 = D(r2, s1_2_0, 0xFEEEFE03, 0x050B0102, 0x09F90607, 0xFAF10300);
	r3 = D(r3, s1_2_0, 0xE9D30EEA, 0xFF090BF7, 0x03F5F9FC, 0xEF05F106);
	r4 = D(r4, s1_2_0, 0x03060EE8, 0x06010711, 0x0D05F319, 0x060708F8);
	r5 = D(r5, s1_2_0, 0x0C130206, 0x00E7EDE3, 0x1A01F00B, 0xFAF6FC01);
	r0 = D(r0, s1_2_1, 0xEE272B1E, 0xC70C0159, 0xE401F811, 0x1EC00ECD);
	r1 = D(r1, s1_2_1, 0x060DE1EE, 0xF10FF9E6, 0x2FF0F614, 0x062D3117);
	r2 = D(r2, s1_2_1, 0xE6E01EEF, 0x020F0103, 0x0F010205, 0xD705F70D);
	r3 = D(r3, s1_2_1, 0xFE0FF32A, 0xFD160519, 0xFC04F308, 0x1D09FF05);
	r4 = D(r4, s1_2_1, 0xE9F03BFA, 0x0BFB0007, 0x0B150603, 0x07FD10F2);
	r5 = D(r5, s1_2_1, 0xFB03FC08, 0xFAF4E90C, 0xFD0DF1E7, 0xF6FDFD05);
	r0 = D(r0, s1_2_2, 0xE5E7F719, 0xF81428C7, 0xF60F0403, 0xFDE00732);
	r1 = D(r1, s1_2_2, 0xF4FCF615, 0x1F1E0CD7, 0xF2EA04F0, 0x1A0E0ADD);
	r2 = D(r2, s1_2_2, 0xE2F91100, 0x080CFD02, 0x0007000A, 0xF6FEF5F9);
	r3 = D(r3, s1_2_2, 0xE2FC15CA, 0x0D201ED9, 0xFD06FD01, 0xF4080207);
	r4 = D(r4, s1_2_2, 0x02ED0620, 0x030A0B00, 0xFE0C12D3, 0xFDF2130D);
	r5 = D(r5, s1_2_2, 0xFFFC040A, 0x40F8D810, 0x01020DFE, 0xF804FDF6);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-8.303e-02, -4.822e-02, -2.832e-02, -4.479e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.760e-02, -6.471e-03, 6.075e-02, -6.398e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.779e-02, -1.983e-03, -6.000e-03, -5.826e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.398e-02, -2.411e-03, 5.017e-02, 2.732e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-4.600e-02, 2.532e-02, -5.756e-02, -2.911e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.528e-02, -2.765e-02, 2.029e-02, 4.125e-05);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_DS_vk] -conv3
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0503FFFB, 0x0BF2EAF4, 0x0D0B0309, 0x05FB0301);
	r1 = D(r1, s0_0_0, 0xF9010107, 0xF204E5EC, 0x09FC05F5, 0x0BF1F0ED);
	r2 = D(r2, s0_0_0, 0x091E1F12, 0x07FDFF0E, 0x110B03FA, 0x0201FEF8);
	r3 = D(r3, s0_0_0, 0xF7F303FA, 0x15F5F806, 0xFA07F7FA, 0xFD0204F9);
	r4 = D(r4, s0_0_0, 0xF7FB010F, 0xF50608FE, 0xE1FF04F5, 0x18B5EDF6);
	r5 = D(r5, s0_0_0, 0x08FA1000, 0xFF010001, 0xF2FE0BE8, 0xE902F9FE);
	r0 = D(r0, s0_0_1, 0x01FAF6F4, 0x0301081A, 0x1AF4E600, 0x070502F7);
	r1 = D(r1, s0_0_1, 0xFD0600F8, 0xFC000614, 0xF2F41611, 0xFEFB06FC);
	r2 = D(r2, s0_0_1, 0x05FC19DD, 0x09FD190E, 0x0E080AD7, 0x0400F805);
	r3 = D(r3, s0_0_1, 0x0102EDF4, 0x02FEFF02, 0xFDF9F502, 0x00020004);
	r4 = D(r4, s0_0_1, 0x0B02D6EF, 0x00E10D02, 0xFAFFF405, 0x000513EF);
	r5 = D(r5, s0_0_1, 0x13FDF6E8, 0xFE06F510, 0xF20705EB, 0xE9F70BEF);
	r0 = D(r0, s0_0_2, 0x03FAFF01, 0x0DFCE7FA, 0x02FAF4E8, 0xFDFD0204);
	r1 = D(r1, s0_0_2, 0x01050407, 0xF91103B6, 0x0BF9F90D, 0xF8050AE7);
	r2 = D(r2, s0_0_2, 0xFCF90221, 0xFEFFFDF6, 0x05FDFDF2, 0x0203FCFC);
	r3 = D(r3, s0_0_2, 0xF5030BFB, 0x05F3E626, 0x0100FA2D, 0xF407FB03);
	r4 = D(r4, s0_0_2, 0x0900FA1B, 0x06010EEB, 0xFD02F022, 0x1FECE8CC);
	r5 = D(r5, s0_0_2, 0x09F601E7, 0xF909FB18, 0xFD04FEFC, 0xF401F907);
	r0 = D(r0, s0_1_0, 0x06F9EC14, 0x04E4F010, 0x03F918F1, 0x0B01FBFF);
	r1 = D(r1, s0_1_0, 0xF906FC0C, 0x0D020AF0, 0xFFF6DC02, 0x07DB1AF6);
	r2 = D(r2, s0_1_0, 0x000E0C13, 0xF9F0F41F, 0x00FEE6E0, 0x0EF4FF09);
	r3 = D(r3, s0_1_0, 0xF902070C, 0x0EF4F611, 0xF300F6F9, 0xFAFF0310);
	r4 = D(r4, s0_1_0, 0x0B101804, 0x0304F7FC, 0xEE08F400, 0x33B3AEF7);
	r5 = D(r5, s0_1_0, 0xF700150F, 0x04EB1A08, 0xF9070FE6, 0xECFCF9FC);
	r0 = D(r0, s0_1_1, 0x020BEE00, 0xDA15E7CF, 0xEAD81525, 0x0A03040F);
	r1 = D(r1, s0_1_1, 0x05F3F907, 0x1CDCB121, 0x20C803EC, 0x16EFF5CD);
	r2 = D(r2, s0_1_1, 0x040D0416, 0x08081B08, 0x0D26CCFB, 0x0E020B1B);
	r3 = D(r3, s0_1_1, 0x04E020E6, 0x08FE03F5, 0x09F2F721, 0x010008F3);
	r4 = D(r4, s0_1_1, 0x19C30115, 0xFBEE2E1D, 0xF5EA1608, 0x1320CDE2);
	r5 = D(r5, s0_1_1, 0x02DFF0EC, 0x07E61303, 0x0DEE0DEF, 0xDED90D1B);
	r0 = D(r0, s0_1_2, 0x02FDF801, 0x0B02002F, 0xE314FFD3, 0x020F1CF0);
	r1 = D(r1, s0_1_2, 0x05FE07E8, 0xF7FC18F5, 0x09ECDB16, 0xF9FEDF0D);
	r2 = D(r2, s0_1_2, 0xFD06FBF9, 0xFB0114F0, 0x15FFFB0A, 0x08FD0612);
	r3 = D(r3, s0_1_2, 0xFD011000, 0x02EDFC16, 0xFEE7E314, 0xFB07FCEA);
	r4 = D(r4, s0_1_2, 0x000808C8, 0x020317E3, 0xFFF10F15, 0x28F38EEA);
	r5 = D(r5, s0_1_2, 0xFD000414, 0xFBFB0312, 0xF90016F8, 0xE90D06FA);
	r0 = D(r0, s0_2_0, 0x01FFF709, 0x0EEC1412, 0x01F3F104, 0x00F901FE);
	r1 = D(r1, s0_2_0, 0xFF0800EC, 0xF305EFD3, 0x0600FF13, 0xFCFDF725);
	r2 = D(r2, s0_2_0, 0x061C16FB, 0xFDF60DF1, 0x080A04E5, 0x07F5EEEA);
	r3 = D(r3, s0_2_0, 0x00070813, 0x02EE14FD, 0xFCFE0507, 0xFAFB0509);
	r4 = D(r4, s0_2_0, 0xF806FCF5, 0xFEFEFD04, 0xECFB03F1, 0x3C81B4E5);
	r5 = D(r5, s0_2_0, 0xE811F1F6, 0x04020AD0, 0xF30401F4, 0xF2FA04FA);
	r0 = D(r0, s0_2_1, 0x0208F107, 0x12F70921, 0xF2CEF01C, 0x0503FC0D);
	r1 = D(r1, s0_2_1, 0x0DE0F50C, 0x04F602F1, 0xF5001E25, 0x09EB0AF2);
	r2 = D(r2, s0_2_1, 0xF3020F08, 0x0CFDF6F4, 0x0E14FBF0, 0x0309150D);
	r3 = D(r3, s0_2_1, 0xFDF0EDF4, 0x09040AF9, 0x12EDF213, 0xFD090209);
	r4 = D(r4, s0_2_1, 0x06FCD616, 0xF815F6ED, 0xF9F5F000, 0x1417EEB2);
	r5 = D(r5, s0_2_1, 0xEC241906, 0x01E72404, 0xF9FB1BEF, 0xFDDE19EF);
	r0 = D(r0, s0_2_2, 0x0306FAFD, 0x0CFBEDEE, 0xF405D7F8, 0x0201EAF9);
	r1 = D(r1, s0_2_2, 0xFDFDF3F5, 0xFC0E09F8, 0xFE02F9F0, 0x08F711E4);
	r2 = D(r2, s0_2_2, 0x02FAF7FF, 0x0AF007F6, 0x0BFAFA04, 0x04FBF5F7);
	r3 = D(r3, s0_2_2, 0xFFF60B07, 0x07FA02F2, 0xFD021403, 0xFD00F400);
	r4 = D(r4, s0_2_2, 0xF2F8FA06, 0xF90FFB0B, 0xF9F3FB15, 0x0AD3DDCB);
	r5 = D(r5, s0_2_2, 0xF91324FB, 0x03FB0103, 0x00FD10F5, 0xF7F020F9);
	r0 = D(r0, s1_0_0, 0xFE010007, 0xDC08FEFF, 0x08FCFE0C, 0x05FF00F9);
	r1 = D(r1, s1_0_0, 0xEBF40401, 0x33DBDF05, 0xB0DF0316, 0x150003FC);
	r2 = D(r2, s1_0_0, 0x06110FED, 0xD71800F9, 0xEA1BF8F5, 0x040BFB00);
	r3 = D(r3, s1_0_0, 0x05ED06F5, 0xDA120402, 0xF0EB0308, 0x06FA02F8);
	r4 = D(r4, s1_0_0, 0xDFE60AF0, 0x01F40AF6, 0xFFFD0CF9, 0xE50111D0);
	r5 = D(r5, s1_0_0, 0x00E1FBFC, 0x04FBFD06, 0x13FB05F8, 0x04061404);
	r0 = D(r0, s1_0_1, 0x12010013, 0x190E0BF8, 0xF1080318, 0xFC0801FC);
	r1 = D(r1, s1_0_1, 0xF6F4FDFE, 0x1007080B, 0xFAECFFE6, 0xF201F8E4);
	r2 = D(r2, s1_0_1, 0x1A0A0FFC, 0xFBFE0EF4, 0x071000F1, 0x0A0303FF);
	r3 = D(r3, s1_0_1, 0x14FEF308, 0xED171307, 0xFAE30118, 0x03E7FEF2);
	r4 = D(r4, s1_0_1, 0xE8E0FA00, 0xFDF5F6F8, 0x0EF60D08, 0x5228F4E7);
	r5 = D(r5, s1_0_1, 0x08F7B3F3, 0x0CFEFE01, 0x20FE0E04, 0x0DFB1FEF);
	r0 = D(r0, s1_0_2, 0x00FAFFFA, 0xF2FCFC02, 0xFF160319, 0x010701FA);
	r1 = D(r1, s1_0_2, 0xFAFBFDFA, 0xF2F5FD0C, 0xE4E5FDFF, 0x18010301);
	r2 = D(r2, s1_0_2, 0xFE0609F0, 0x011B02F1, 0x08FA0203, 0x0604F901);
	r3 = D(r3, s1_0_2, 0x080307F8, 0xDC0900DB, 0xF1F4F702, 0xFE01FB14);
	r4 = D(r4, s1_0_2, 0xF00905FF, 0xF9F20503, 0xF1070901, 0xFB16F2BF);
	r5 = D(r5, s1_0_2, 0xFFEBFBEC, 0xF8050004, 0xFAFCFD0F, 0xF8F60B06);
	r0 = D(r0, s1_1_0, 0xF408F800, 0x030A0D16, 0x0100F9FB, 0xF60A00F7);
	r1 = D(r1, s1_1_0, 0xFEE8FDFB, 0xD4FBE708, 0xE3EB0FF9, 0xD902FEDD);
	r2 = D(r2, s1_1_0, 0x0E1419F1, 0xFF0205F5, 0x0523F2E7, 0xFC0EFDF5);
	r3 = D(r3, s1_1_0, 0xF9FE0BFB, 0x070E030C, 0xFF050503, 0xF7FBFAF9);
	r4 = D(r4, s1_1_0, 0xEBF6F007, 0x03F60800, 0x0E0E0AEF, 0xDC0C1EC2);
	r5 = D(r5, s1_1_0, 0x0F09F70A, 0x0005F1F4, 0xF9F7F7FF, 0x0AFB25F8);
	r0 = D(r0, s1_1_1, 0x0A05FA35, 0xF80A00EF, 0x810019FD, 0xF4060C0E);
	r1 = D(r1, s1_1_1, 0xF1EFDE16, 0xE1D0C003, 0xFECCD101, 0xF2FCE626);
	r2 = D(r2, s1_1_1, 0x032611C7, 0x0DEDFA08, 0xE91911EA, 0xEE0D15F6);
	r3 = D(r3, s1_1_1, 0x03E8EB17, 0x05073106, 0x17E3EC0C, 0x0FF7CB17);
	r4 = D(r4, s1_1_1, 0xC7D3C6F0, 0xE30F8119, 0xFFEA1DF0, 0x0BE1B3E8);
	r5 = D(r5, s1_1_1, 0xE2F90609, 0xFB04F201, 0x06E9E0FD, 0xF0F334BD);
	r0 = D(r0, s1_1_2, 0x03FAFEFE, 0x150411FC, 0x070E0CD0, 0x2014070E);
	r1 = D(r1, s1_1_2, 0x04F7FE06, 0x2614143C, 0xD0E103EE, 0xF615FEE6);
	r2 = D(r2, s1_1_2, 0xFD140715, 0x06130B01, 0xF9F7FBFB, 0xFF05FE12);
	r3 = D(r3, s1_1_2, 0xF7F5FDFF, 0x010FFFD9, 0xF3F2F012, 0xFAF8FA19);
	r4 = D(r4, s1_1_2, 0x12010C1E, 0x0802F3F1, 0xFAF20D20, 0x99160C81);
	r5 = D(r5, s1_1_2, 0xFE0B0011, 0xF6FF0012, 0xFAFCFF01, 0x0A0C1E01);
	r0 = D(r0, s1_2_0, 0xFB01FDF3, 0x0A05FA0D, 0x05FC000F, 0x000AFFF4);
	r1 = D(r1, s1_2_0, 0xFDF4FB04, 0xF6FE1215, 0xE5F40201, 0xF6060C02);
	r2 = D(r2, s1_2_0, 0x050DF601, 0xF90405F7, 0xFD01FBF4, 0x000EFB01);
	r3 = D(r3, s1_2_0, 0x0B0608FD, 0x01050103, 0xF2F10B14, 0xFC0109F5);
	r4 = D(r4, s1_2_0, 0xF2F8040B, 0x0A00FFFE, 0x08FE0AF8, 0xDF0317B7);
	r5 = D(r5, s1_2_0, 0x070BFF01, 0xF6FEDC12, 0x0201FDFF, 0xF4FD1103);
	r0 = D(r0, s1_2_1, 0x0DFC01E9, 0xF106131F, 0xF6FA24FE, 0x05070CEF);
	r1 = D(r1, s1_2_1, 0xFBDFF907, 0x2FCFF31A, 0xE7EAEC04, 0x1EF8F5F3);
	r2 = D(r2, s1_2_1, 0xEE16F9E4, 0xEF04FFF2, 0xFEFDF8EC, 0x020B00F3);
	r3 = D(r3, s1_2_1, 0x09F71103, 0xF2050900, 0xFAE50429, 0x03F4FEFB);
	r4 = D(r4, s1_2_1, 0x04EC1805, 0x0F000BFC, 0xF9FA0F0A, 0xEC0C08BB);
	r5 = D(r5, s1_2_1, 0x040AFC07, 0x08F2C40D, 0x0EF8F70E, 0x07F32205);
	r0 = D(r0, s1_2_2, 0xFB060205, 0xF505FBF5, 0xFA22082F, 0xFD01FE05);
	r1 = D(r1, s1_2_2, 0xFCF4010E, 0xFE0C052C, 0xE402FCFF, 0x000BFED2);
	r2 = D(r2, s1_2_2, 0x04FDF909, 0xFA0A0812, 0xFEEFFD0C, 0xF2FAFFED);
	r3 = D(r3, s1_2_2, 0x07F90A04, 0xF209FFF0, 0xF5EC0410, 0xF5F80922);
	r4 = D(r4, s1_2_2, 0xE6170116, 0x0A080508, 0x03FE110F, 0xB21DFDE0);
	r5 = D(r5, s1_2_2, 0xF90A01F3, 0xF9E5FCF9, 0x0AFA03FD, 0x01F8180C);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00FE0702, 0xEF200AF9, 0x02FCEF09, 0x0AF80002);
	r1 = D(r1, s0_0_0, 0x03FB07F9, 0xD331CFEA, 0xE222110D, 0xE215D2F7);
	r2 = D(r2, s0_0_0, 0x0CFE0401, 0x08F412FF, 0x0BF00FF7, 0xF9070008);
	r3 = D(r3, s0_0_0, 0xFD02EEFC, 0x09070BF8, 0x06FAFE02, 0x0305FBFC);
	r4 = D(r4, s0_0_0, 0x19E4EDF2, 0x09E5FDFC, 0x080500F3, 0x0DF31414);
	r5 = D(r5, s0_0_0, 0x07D9DEFC, 0xF809F300, 0x04F20909, 0xF8120302);
	r0 = D(r0, s0_0_1, 0x05FBF1F9, 0xF801FF0B, 0xF40FF2F9, 0x040407FB);
	r1 = D(r1, s0_0_1, 0x06FF0203, 0xF8CB0D40, 0x25D8FB1E, 0xFBF60A17);
	r2 = D(r2, s0_0_1, 0x09FAF5EB, 0x05FD08F9, 0x04FFFFEA, 0xED0B07FF);
	r3 = D(r3, s0_0_1, 0xEB18F6FF, 0xFE1EF8D8, 0xFB0BFB0F, 0xF80FFAFA);
	r4 = D(r4, s0_0_1, 0xEE0EF60F, 0x22C7DAFC, 0xEA19F402, 0x24E826F4);
	r5 = D(r5, s0_0_1, 0x0529F005, 0xF8100102, 0x13F6050C, 0x0700FCFA);
	r0 = D(r0, s0_0_2, 0x0006FD00, 0xE917EEF6, 0xF50C02F9, 0x08F40201);
	r1 = D(r1, s0_0_2, 0x02F90301, 0x1CF402FD, 0x0E150007, 0x050001FB);
	r2 = D(r2, s0_0_2, 0xF9FE0A06, 0xF9F70C03, 0x03FD06FD, 0x02F605FB);
	r3 = D(r3, s0_0_2, 0xFFF90305, 0xF125F8F0, 0xEF18FFFE, 0x02F70608);
	r4 = D(r4, s0_0_2, 0xFA0CFCF8, 0x0BF3EAFF, 0xF9FC0709, 0xF512D5E9);
	r5 = D(r5, s0_0_2, 0x0D10EDFF, 0xFC0501FF, 0x0406FD03, 0xFCF902FF);
	r0 = D(r0, s0_1_0, 0x0703FDFC, 0x080B1504, 0xF51403EB, 0xF60E010A);
	r1 = D(r1, s0_1_0, 0xF4FDF708, 0xD01E050A, 0x0FF3E0E1, 0x22E8FAEA);
	r2 = D(r2, s0_1_0, 0xF2FDF924, 0x04D9E500, 0xDC09E829, 0xF9FE0D14);
	r3 = D(r3, s0_1_0, 0x13F102F4, 0xFE010814, 0xFAFE01F4, 0x08F4F80B);
	r4 = D(r4, s0_1_0, 0xFCF820F6, 0x0B0004FF, 0xF824080C, 0x0123E0D6);
	r5 = D(r5, s0_1_0, 0x0C04F402, 0x15D31106, 0xF0FB03FE, 0xF70D0BFC);
	r0 = D(r0, s0_1_1, 0x0001FB0D, 0xD0DB002E, 0x2BC8F910, 0xF82A2901);
	r1 = D(r1, s0_1_1, 0xF0380C02, 0x23FDFB08, 0x18ECFA0A, 0xFE2BFBEC);
	r2 = D(r2, s0_1_1, 0xC8E4F8EC, 0xED0FFFE5, 0xCB13240F, 0x0BE71909);
	r3 = D(r3, s0_1_1, 0xF320DEEC, 0xF508EC12, 0x0DEDEA01, 0xFC1B400C);
	r4 = D(r4, s0_1_1, 0x1A0FFFD2, 0x1D102D11, 0x09E3F7EB, 0xFFD515F3);
	r5 = D(r5, s0_1_1, 0xE106D8E1, 0x18ECED11, 0x0BFFFF04, 0x12A8B1FD);
	r0 = D(r0, s0_1_2, 0xFE020705, 0xED0F08FB, 0xEE0D0207, 0xFAFC0607);
	r1 = D(r1, s0_1_2, 0x0B08040E, 0xD1180302, 0x020FFAF1, 0xF7F21600);
	r2 = D(r2, s0_1_2, 0xE90B0202, 0xFD000F04, 0x0000FF06, 0xF81200FF);
	r3 = D(r3, s0_1_2, 0x090504FC, 0x17F510F5, 0x1D15EBF4, 0xECFCEB10);
	r4 = D(r4, s0_1_2, 0xF200F511, 0xFB0208F3, 0x0E12F1FD, 0xDC151C07);
	r5 = D(r5, s0_1_2, 0xE0FFE9E5, 0x0D060300, 0xEC05F8FC, 0xE8DFF8FB);
	r0 = D(r0, s0_2_0, 0xFD02FAF9, 0xF50227FE, 0xF2FD2C0A, 0x09FD00FF);
	r1 = D(r1, s0_2_0, 0x08FDFBEF, 0xF60A15FB, 0x02F715E8, 0xF601E50C);
	r2 = D(r2, s0_2_0, 0xEAF8240B, 0xEB0BF1FA, 0xFDFBF5E7, 0xF3FC1801);
	r3 = D(r3, s0_2_0, 0xFE05F20E, 0x03FC0AFA, 0x030C07FB, 0xFDFDF3FC);
	r4 = D(r4, s0_2_0, 0x07010906, 0x0202F60D, 0x05F90B0C, 0x0712D210);
	r5 = D(r5, s0_2_0, 0xFE051205, 0x03F719E7, 0xFFFD02F6, 0x060614F2);
	r0 = D(r0, s0_2_1, 0xF507EE02, 0x0510FA08, 0xDA0BD80F, 0xFB0DF7FD);
	r1 = D(r1, s0_2_1, 0x0403F4EF, 0x07EB27E6, 0x0EE92B12, 0xC2150AEB);
	r2 = D(r2, s0_2_1, 0xFBE818F6, 0xF312F503, 0x1EF30604, 0x2DCA4A0D);
	r3 = D(r3, s0_2_1, 0xDD0D09F8, 0x13F60614, 0xE6070100, 0x05F404FE);
	r4 = D(r4, s0_2_1, 0xEC0EE1FC, 0xF40AE1FB, 0x060505FF, 0x10FE40E0);
	r5 = D(r5, s0_2_1, 0x17F9140E, 0x29E93904, 0x15E80DFD, 0x17E616FC);
	r0 = D(r0, s0_2_2, 0xF905FC01, 0x03FD10FC, 0xEFFB180C, 0xF606F1FD);
	r1 = D(r1, s0_2_2, 0xF414E9FF, 0xD928ED08, 0xEF02F5FF, 0x1706FFF0);
	r2 = D(r2, s0_2_2, 0xE301FB05, 0xF8130203, 0xF80606FE, 0xFAFB01F8);
	r3 = D(r3, s0_2_2, 0x0C02F8F7, 0xF80608FF, 0xF906F7F9, 0xF716F8EA);
	r4 = D(r4, s0_2_2, 0x04050501, 0xFFFAEE00, 0xFFFD06F6, 0xF6091DFD);
	r5 = D(r5, s0_2_2, 0x08ED0301, 0x03FBF9F8, 0xFC010700, 0x0BF00303);
	r0 = D(r0, s1_0_0, 0xFB0903FC, 0x0003F102, 0xFFFA060A, 0x01F3FFFF);
	r1 = D(r1, s1_0_0, 0x00FEFA04, 0x22DCEB19, 0xFD0E14F7, 0x12E5E008);
	r2 = D(r2, s1_0_0, 0xFD0E0905, 0xFEFD0902, 0xF90FFEFF, 0xFAFDF2F8);
	r3 = D(r3, s1_0_0, 0xFB02FA02, 0xF9FDF702, 0xF80B05FB, 0xF7000407);
	r4 = D(r4, s1_0_0, 0xF901F60F, 0x00FC130B, 0xFB03F2FC, 0xEA0E0D0B);
	r5 = D(r5, s1_0_0, 0x010FFB0C, 0xFC02F900, 0x09FDF205, 0x02FDF307);
	r0 = D(r0, s1_0_1, 0x0306F900, 0x0AEDFB06, 0xF40CF206, 0x06F9FB01);
	r1 = D(r1, s1_0_1, 0xFAFFFC06, 0xFC2808D6, 0x18F20FFD, 0x0B08F2E0);
	r2 = D(r2, s1_0_1, 0x0AEAFDFF, 0xEFF80EFA, 0x01FB0112, 0xFFF601FF);
	r3 = D(r3, s1_0_1, 0x05FAF205, 0x07DDF5FD, 0xF9F90604, 0x0BEBFAF6);
	r4 = D(r4, s1_0_1, 0x00FBDFF6, 0xFF15DE0E, 0xEFF2FA0E, 0x090A1D1D);
	r5 = D(r5, s1_0_1, 0xF5011203, 0x02EEFD06, 0x0D030EF7, 0xF80FFBFB);
	r0 = D(r0, s1_0_2, 0x09F0F803, 0x08E9E609, 0x08FC1310, 0xFF010103);
	r1 = D(r1, s1_0_2, 0xFE09F5FF, 0xF708050E, 0xFEF2FDFF, 0x03080703);
	r2 = D(r2, s1_0_2, 0x02F7FF01, 0xF509FDFC, 0xF1FF0300, 0xF905FF04);
	r3 = D(r3, s1_0_2, 0xF806EE03, 0xF3F3FDF5, 0x00F6ECF0, 0xFCFA04FE);
	r4 = D(r4, s1_0_2, 0x0902F7FD, 0xF7140103, 0x07FCEDFE, 0xE2E2FB1E);
	r5 = D(r5, s1_0_2, 0xFDEF0D0D, 0xFDFEFDFC, 0x02FF0AFD, 0x03E9FE00);
	r0 = D(r0, s1_1_0, 0xFDF9EB00, 0x0DE4D501, 0x19F41111, 0x05FD04FD);
	r1 = D(r1, s1_1_0, 0xF90D0AFF, 0x2AC2120D, 0xF317FA01, 0x0EF6E90B);
	r2 = D(r2, s1_1_0, 0xFFF500F5, 0xF01902F7, 0xF10E01EF, 0x0EFEFAF9);
	r3 = D(r3, s1_1_0, 0xF616F904, 0xFE0BFBFA, 0xF70DF402, 0xF707FCF9);
	r4 = D(r4, s1_1_0, 0x12F20915, 0x09FDF3FD, 0xF3F7FBF9, 0xE909F206);
	r5 = D(r5, s1_1_0, 0x05FBFE14, 0x09001B08, 0xFD0910FF, 0xFEF91310);
	r0 = D(r0, s1_1_1, 0x12EFEBFF, 0x0C0B03D8, 0xF416140E, 0xF00C04FC);
	r1 = D(r1, s1_1_1, 0xEC0218FB, 0xF218EBF4, 0x34C5EA16, 0x11CB0BFA);
	r2 = D(r2, s1_1_1, 0x28A70CFA, 0x13D70008, 0xC3F907D5, 0x002D460A);
	r3 = D(r3, s1_1_1, 0x19D6E625, 0x06240FFB, 0x1C05E21A, 0xF8E50BF6);
	r4 = D(r4, s1_1_1, 0xFC1BF610, 0x03E6EF02, 0xEDF7FB13, 0xF0F0F102);
	r5 = D(r5, s1_1_1, 0x09190B1D, 0x181B020C, 0x061BFA04, 0x1519EF09);
	r0 = D(r0, s1_1_2, 0xFAFBFF05, 0xF71DD9F7, 0xC5132710, 0xFE46E9FB);
	r1 = D(r1, s1_1_2, 0x0E050502, 0xF810B912, 0x10AE1D0F, 0x0700FCFA);
	r2 = D(r2, s1_1_2, 0xE4FF1001, 0xED12EB08, 0xF80B0DF3, 0xEB2BF5FC);
	r3 = D(r3, s1_1_2, 0x0EE9F515, 0xF1C818F0, 0x20A61704, 0x112FF607);
	r4 = D(r4, s1_1_2, 0x0424F111, 0xFAF9EC02, 0x04FB021B, 0xE25AEBF4);
	r5 = D(r5, s1_1_2, 0xF0250D00, 0xDA182108, 0x0A0AEDF5, 0xEB1A13F4);
	r0 = D(r0, s1_2_0, 0x0000FAF4, 0xFDFF0C00, 0x0FF4FFF8, 0x05FB01FD);
	r1 = D(r1, s1_2_0, 0x01040807, 0x03F22507, 0x04FD0209, 0xE12305FD);
	r2 = D(r2, s1_2_0, 0xFA000EFF, 0x010E0FF9, 0xFC101FED, 0x05F0FEFA);
	r3 = D(r3, s1_2_0, 0xF40900F9, 0x05FF05F8, 0xF606F9FB, 0x02000CFD);
	r4 = D(r4, s1_2_0, 0x11F1E615, 0xFE00F1FB, 0xEE0F00FB, 0x0AD4F5FC);
	r5 = D(r5, s1_2_0, 0x02FBF60F, 0x03FD0510, 0x02FF0004, 0x16E40317);
	r0 = D(r0, s1_2_1, 0xFE0202EF, 0xFE0100FD, 0xE3FF0DFB, 0xFF040BFA);
	r1 = D(r1, s1_2_1, 0x0A10F1FB, 0xFC01D11C, 0xFAFEF313, 0x22F7E312);
	r2 = D(r2, s1_2_1, 0xE9E1FBF8, 0xFB120CF9, 0x080FF203, 0xE8EC0AF7);
	r3 = D(r3, s1_2_1, 0x03F9FC0A, 0xFF031002, 0x10FEF412, 0x07FB0302);
	r4 = D(r4, s1_2_1, 0xFFFA01F7, 0xFF05FFE4, 0xF4E60602, 0xFD06F527);
	r5 = D(r5, s1_2_1, 0xF1FAF801, 0xD7FE0B05, 0xF508F7FE, 0x000B0611);
	r0 = D(r0, s1_2_2, 0xFB0FFDF7, 0x0E05030A, 0xE51118FC, 0xFE0BFF02);
	r1 = D(r1, s1_2_2, 0x0310FB01, 0x10F3FB15, 0xF212F603, 0x2ACB0AF9);
	r2 = D(r2, s1_2_2, 0xEB22F8FC, 0xFC0EF7FB, 0xFA0E0708, 0x04E50FF8);
	r3 = D(r3, s1_2_2, 0x04EDFC08, 0xFB0A14FC, 0x0CF20001, 0x0506F30A);
	r4 = D(r4, s1_2_2, 0x05F0060E, 0xFF0C03ED, 0x06F40709, 0xFDCBFD2C);
	r5 = D(r5, s1_2_2, 0x0CE4FDF8, 0xFFE70B0E, 0xFF07F403, 0xFB04100A);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFD0902FC, 0x08010107, 0x090101ED, 0xFCFA0CF9);
	r1 = D(r1, s0_0_0, 0xFFFD060A, 0x20130FFA, 0x0AFDE5FB, 0x04FB0BD7);
	r2 = D(r2, s0_0_0, 0xF4F813FF, 0xFCEAF617, 0xF007F809, 0x00FB0706);
	r3 = D(r3, s0_0_0, 0xFB0205FE, 0xF7FD0B07, 0x010DF005, 0xFEFB0608);
	r4 = D(r4, s0_0_0, 0xFA080F12, 0xFDF7EE02, 0xF7FDFF03, 0xF817F1F5);
	r5 = D(r5, s0_0_0, 0x060208E7, 0x08FB0202, 0xFEFFF1FA, 0x0C0BFEF3);
	r0 = D(r0, s0_0_1, 0x0106E601, 0xF1E50E0B, 0x091F0206, 0x0307000A);
	r1 = D(r1, s0_0_1, 0x0103F9FC, 0xFDE6DCEA, 0x00D001E9, 0xFBF40307);
	r2 = D(r2, s0_0_1, 0x01F5F3FE, 0x060218FA, 0xFF0AE518, 0x0206E40A);
	r3 = D(r3, s0_0_1, 0x03040EE4, 0xFF021003, 0x061D00C6, 0x050504FC);
	r4 = D(r4, s0_0_1, 0x142005E9, 0xFB1EFFDE, 0x0E1EFFE4, 0x07D11108);
	r5 = D(r5, s0_0_1, 0x040A02DD, 0x0000FFF6, 0x04DCF2FA, 0xF6080F0C);
	r0 = D(r0, s0_0_2, 0x00FCFC08, 0x0CF8F1FD, 0x021BFC13, 0xF5F4FDFA);
	r1 = D(r1, s0_0_2, 0xFFFD00FF, 0xFE0808DE, 0x0D0814FF, 0x07030AF0);
	r2 = D(r2, s0_0_2, 0x000EF800, 0xFA04F8F9, 0x01EFFFF3, 0xFEF40907);
	r3 = D(r3, s0_0_2, 0xFAFA0BF0, 0xF40B031B, 0xFEFA0D07, 0xFBE30BEB);
	r4 = D(r4, s0_0_2, 0xEE000D15, 0xF7F015FE, 0xF8FF08F4, 0x01E9E3FF);
	r5 = D(r5, s0_0_2, 0xEFF213FE, 0x020001FD, 0x0201FFE5, 0x00030811);
	r0 = D(r0, s0_1_0, 0xF8FF080A, 0xFAF70E1D, 0x08E900EE, 0xFDFFF6F1);
	r1 = D(r1, s0_1_0, 0xFE0604F4, 0x180104E3, 0x141BF0F1, 0x04FFEA13);
	r2 = D(r2, s0_1_0, 0xFB060704, 0xF6100800, 0xF4F6FF08, 0xFFF2F1FA);
	r3 = D(r3, s0_1_0, 0xFA0AFFFF, 0xF606F3F9, 0x010DF410, 0xF7FE0500);
	r4 = D(r4, s0_1_0, 0xF61303ED, 0xFB00FA04, 0xEFE0FC1B, 0xE1241116);
	r5 = D(r5, s0_1_0, 0x1CFB0001, 0x06FBE9E6, 0x02FC00EC, 0xFE02F0F6);
	r0 = D(r0, s0_1_1, 0x0EFA0C12, 0xEAF210EC, 0x05E612F6, 0xF3081909);
	r1 = D(r1, s0_1_1, 0xF50B0709, 0xDD1007F8, 0x0C10D400, 0xEA000F03);
	r2 = D(r2, s0_1_1, 0xFEFDC7F2, 0xFE20F713, 0xFE1405F6, 0xFEF5D801);
	r3 = D(r3, s0_1_1, 0x16FEEA02, 0x02F9070C, 0x1BFF0102, 0x0210F1FC);
	r4 = D(r4, s0_1_1, 0xF4020708, 0x16EE1809, 0x1B06D9F4, 0x072A46F6);
	r5 = D(r5, s0_1_1, 0x1FF6E61D, 0xF9E3E9E7, 0xFA0EDAEF, 0xF7E624D4);
	r0 = D(r0, s0_1_2, 0x00FC0EFF, 0x0D01F508, 0x210708F0, 0xFEFC15FA);
	r1 = D(r1, s0_1_2, 0xF6030903, 0x02F9F8F0, 0xEEED0EF5, 0x0213F915);
	r2 = D(r2, s0_1_2, 0xF4FB07F4, 0x02F7F6F6, 0xF9050C05, 0x0708FE06);
	r3 = D(r3, s0_1_2, 0xEF030FEC, 0xE8FF03F3, 0xF8FEF4F4, 0xF4F40606);
	r4 = D(r4, s0_1_2, 0xEF02FC05, 0x06ED16FF, 0x0DF60BEB, 0x1AFFF2F4);
	r5 = D(r5, s0_1_2, 0x17FEDA11, 0xFEFEFCF1, 0x03F605F0, 0x07FE03FC);
	r0 = D(r0, s0_2_0, 0xF40109F8, 0xEDFA06E0, 0x0E14F60F, 0xF7FB0808);
	r1 = D(r1, s0_2_0, 0x0204FF10, 0x1A06E9F4, 0xFFFFF602, 0x091201C9);
	r2 = D(r2, s0_2_0, 0xEBFA12FB, 0x02FDEDF2, 0xEB0507F2, 0xF2F60107);
	r3 = D(r3, s0_2_0, 0xFC00FDDB, 0xF6F405FC, 0xF4FAFEE2, 0x04FFFFF4);
	r4 = D(r4, s0_2_0, 0x050A061D, 0x00060AFC, 0xE6FB0611, 0xFB24C70A);
	r5 = D(r5, s0_2_0, 0xEFF80B0C, 0x05EA0300, 0x00FA04FB, 0xFDFAF90D);
	r0 = D(r0, s0_2_1, 0x0203F3FC, 0xFD0DFB07, 0xDD0404CA, 0xFCFB02F2);
	r1 = D(r1, s0_2_1, 0x05FF16F8, 0xC8FC29E5, 0xF8092703, 0xFCFEF0F7);
	r2 = D(r2, s0_2_1, 0xF8081CF4, 0x130BF509, 0x150BF607, 0x28FC2FEB);
	r3 = D(r3, s0_2_1, 0xFBFFE111, 0x07F80202, 0x1505ED09, 0x0A0AFA0F);
	r4 = D(r4, s0_2_1, 0xE201F0E7, 0xF108F402, 0x1900EF07, 0xF3F1092F);
	r5 = D(r5, s0_2_1, 0xF1FD1800, 0x28F128E5, 0xFD0519F1, 0x1DF912F7);
	r0 = D(r0, s0_2_2, 0x0103F907, 0xF505F501, 0x1103F208, 0xFEFEF308);
	r1 = D(r1, s0_2_2, 0x0502ED0F, 0x16F9E002, 0xFC0E0204, 0x02F4EBEC);
	r2 = D(r2, s0_2_2, 0xF509F708, 0x0EFCF407, 0x0B0303FE, 0x01FA0203);
	r3 = D(r3, s0_2_2, 0xFDFB0AF8, 0x02F9F8FE, 0xEEFB0BF5, 0xF5F6FB08);
	r4 = D(r4, s0_2_2, 0x0401ED10, 0x0206F403, 0xEFF716F7, 0xE7F215FB);
	r5 = D(r5, s0_2_2, 0xF2030605, 0x07F805FB, 0x07FE03EA, 0x0CF614EB);
	r0 = D(r0, s1_0_0, 0x010AF704, 0x060BEC0B, 0x08EE07FA, 0xFDF8FE00);
	r1 = D(r1, s1_0_0, 0xF7010107, 0x01E408F4, 0xFE25F607, 0x1F180D01);
	r2 = D(r2, s1_0_0, 0x0CF7110D, 0xF3F90109, 0x0EF1F004, 0x03F70608);
	r3 = D(r3, s1_0_0, 0x08090902, 0x0109E7FE, 0xFF14F501, 0x01FEF808);
	r4 = D(r4, s1_0_0, 0xEEFCF604, 0xFBEC080A, 0x09030AFE, 0x0AEFC10B);
	r5 = D(r5, s1_0_0, 0x05FFFD05, 0x05F205F5, 0xFEFBFFF5, 0x020BF8F8);
	r0 = D(r0, s1_0_1, 0x280CFE05, 0x17E200E0, 0x07020CF1, 0xFD0702FB);
	r1 = D(r1, s1_0_1, 0xF9FDFCFC, 0x0EFFF9EE, 0xFACED9DA, 0xF10B0117);
	r2 = D(r2, s1_0_1, 0x12FAE205, 0xE7F5F9FC, 0x0C0BFC15, 0xFDEF06F5);
	r3 = D(r3, s1_0_1, 0x180509F2, 0x1A24F5F7, 0x10F110FA, 0x0CF20AFC);
	r4 = D(r4, s1_0_1, 0x15F31608, 0xE2FB06B3, 0x08F513EA, 0xF0E0DC03);
	r5 = D(r5, s1_0_1, 0x1BE311E4, 0x03FB13FD, 0xFCF0FFF8, 0xFE0009F8);
	r0 = D(r0, s1_0_2, 0x07FEFE06, 0x121004FE, 0xF5E20EEE, 0xFEF7FE0B);
	r1 = D(r1, s1_0_2, 0x02FFFFFF, 0xEC2A1111, 0xFD050F0C, 0xFF0703FE);
	r2 = D(r2, s1_0_2, 0xFCF1F901, 0x0A04F5E2, 0xFFF3F0F2, 0xF9FE0C01);
	r3 = D(r3, s1_0_2, 0xF40AF602, 0x19FA01FD, 0x04000903, 0xEBFE0BEB);
	r4 = D(r4, s1_0_2, 0xFFEE11F2, 0x03FA0DF0, 0xFFFC0501, 0xFF1AF9DC);
	r5 = D(r5, s1_0_2, 0xFDF20E10, 0xFBFE080C, 0x05110806, 0xF70300FF);
	r0 = D(r0, s1_1_0, 0xEE000504, 0xE120F613, 0x060DEDF6, 0x1FF4FD03);
	r1 = D(r1, s1_1_0, 0x09FFFC0C, 0x0516F408, 0xE10B1410, 0xDD160EF4);
	r2 = D(r2, s1_1_0, 0x05F31425, 0xF4F81221, 0x10E8D91F, 0x0207FDF8);
	r3 = D(r3, s1_1_0, 0xFAFA07FF, 0xFF02F9F9, 0xEE0501F8, 0xFE020908);
	r4 = D(r4, s1_1_0, 0x0DFEDDFB, 0x1705EEF9, 0x0D0105FE, 0x2206B4FD);
	r5 = D(r5, s1_1_0, 0xF2FDE8FB, 0xF505FFFB, 0x1DF80100, 0x0CF1FEFD);
	r0 = D(r0, s1_1_1, 0x2CFCE11B, 0xF417C5F2, 0xDDFCED19, 0x0CF90117);
	r1 = D(r1, s1_1_1, 0x2802FCE7, 0xF82A1CC7, 0x490EFDC0, 0x211522EA);
	r2 = D(r2, s1_1_1, 0x4300FC2C, 0x55160FF1, 0xFBFCEA4E, 0x0F08DEFE);
	r3 = D(r3, s1_1_1, 0x210808CC, 0xD80BD9F1, 0xDB1B1DD1, 0x240AFEF6);
	r4 = D(r4, s1_1_1, 0x1DF007B9, 0x36EBE80C, 0xD0EAFFE9, 0x03B7D0E0);
	r5 = D(r5, s1_1_1, 0xE4F40DEC, 0x021B00F4, 0x15042AE0, 0xCCF10FDD);
	r0 = D(r0, s1_1_2, 0xED09FA05, 0xFD020206, 0xDBFBDED3, 0xEAF8E6F6);
	r1 = D(r1, s1_1_2, 0xF90DFCF8, 0xD803F9B5, 0x1C001A1A, 0xF311ED0B);
	r2 = D(r2, s1_1_2, 0x00F7FEF6, 0xF8F6F308, 0x0FEDFFFA, 0x04FAF7F9);
	r3 = D(r3, s1_1_2, 0xFF0B0910, 0x1D0AF209, 0x27062421, 0xE8F2F0CE);
	r4 = D(r4, s1_1_2, 0xF3F9EACE, 0xF8F9070C, 0x1B0215F5, 0x03EDB681);
	r5 = D(r5, s1_1_2, 0x1AE60FF5, 0xF00F0B14, 0xFB0C0FF1, 0xEB1307C0);
	r0 = D(r0, s1_2_0, 0x07F80504, 0xEDFFF4F7, 0xFC03EF02, 0xFCFDFE06);
	r1 = D(r1, s1_2_0, 0xF102FD04, 0xDB041103, 0x02FA01FC, 0x00FD0E07);
	r2 = D(r2, s1_2_0, 0x09FD02F6, 0x10FDF6FA, 0xFB06FFFF, 0x0AF3F7F8);
	r3 = D(r3, s1_2_0, 0x0EFA0609, 0x07FCEBF3, 0xF7F80204, 0x02000404);
	r4 = D(r4, s1_2_0, 0x0802F2FB, 0xFF000206, 0x01080BFB, 0xFD02F1E8);
	r5 = D(r5, s1_2_0, 0x0FFEFAFA, 0x0FF5F0F4, 0xF8FE0902, 0x0700F3F6);
	r0 = D(r0, s1_2_1, 0x01FEF703, 0xFF0104F4, 0xFB1B22FE, 0xFAFD07FE);
	r1 = D(r1, s1_2_1, 0xFE0D07EB, 0xF60EF8EF, 0x120AD216, 0xE30200F3);
	r2 = D(r2, s1_2_1, 0xFCFDEF0B, 0xFF010AF0, 0xFA03F2F8, 0x28F0E102);
	r3 = D(r3, s1_2_1, 0xF10407F6, 0x0907F601, 0x0C0FFCE9, 0xFC02F702);
	r4 = D(r4, s1_2_1, 0x00FF16F9, 0xF70318FB, 0x030EF6D4, 0x0706CA08);
	r5 = D(r5, s1_2_1, 0x07FBF508, 0x02F1FF13, 0xFFFAFA0B, 0x1E05F502);
	r0 = D(r0, s1_2_2, 0x0202F9FE, 0x0B03EDED, 0x03F0E7EF, 0xF1F60205);
	r1 = D(r1, s1_2_2, 0xF2F80708, 0xE4FDFBDE, 0xFB0EFF00, 0x1DFE06FC);
	r2 = D(r2, s1_2_2, 0x0400ECFB, 0xFFF8F9F4, 0x0505F7F7, 0xFF0105F2);
	r3 = D(r3, s1_2_2, 0x0A001107, 0x1100F8F8, 0xFF020307, 0xF50103F4);
	r4 = D(r4, s1_2_2, 0xFAF9FD15, 0xFEFB02FB, 0xFEFC12FC, 0x1904A8CD);
	r5 = D(r5, s1_2_2, 0xFF05F803, 0x02FA14F3, 0xED0104FE, 0xFA0306FC);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.412e-03, 7.248e-03, 9.250e-03, -4.702e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.137e-02, -2.652e-02, 2.853e-02, -1.905e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.752e-02, -4.936e-03, -6.607e-03, -1.934e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-6.287e-04, -2.968e-03, 2.328e-02, -2.709e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.333e-02, -2.850e-02, 7.369e-03, -2.828e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-2.125e-02, -1.815e-02, -1.207e-03, -2.436e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_DS_vk] -conv4
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF7FEF7FF, 0x0001FFFF, 0xF7030003, 0x0AFD0504);
	r1 = D(r1, s0_0_0, 0x09FBFF02, 0x12F505FC, 0x09FB0702, 0x08FCF402);
	r2 = D(r2, s0_0_0, 0xF9FDFA01, 0xF801FF03, 0xF60D13FF, 0x06DF0805);
	r3 = D(r3, s0_0_0, 0x05FC0101, 0x0502FFFD, 0x10FBF104, 0x0BFCFF03);
	r4 = D(r4, s0_0_0, 0x05E6FD02, 0xFBFFEE08, 0x0A81E608, 0x0BF10405);
	r5 = D(r5, s0_0_0, 0xBAF603FE, 0xE50101FF, 0xF503FC00, 0xDB0EEE0A);
	r0 = D(r0, s0_0_1, 0xECFDFFF7, 0xFBFAFC03, 0x00F5FF02, 0x0CFAF9FC);
	r1 = D(r1, s0_0_1, 0xFEFAF505, 0x1402F90B, 0xF3FCF20E, 0x06FCE101);
	r2 = D(r2, s0_0_1, 0xFC00F805, 0xF9FCF2F9, 0xF8060803, 0x08E7DB27);
	r3 = D(r3, s0_0_1, 0x10F4FE03, 0xF903F900, 0xF8F7E6F3, 0x05F2F8FB);
	r4 = D(r4, s0_0_1, 0x0ADFF10D, 0x0105F5F5, 0xE22905D5, 0xE8C6DF19);
	r5 = D(r5, s0_0_1, 0x378B141C, 0x04D60505, 0xF1FEFEFF, 0xE2F7D703);
	r0 = D(r0, s0_0_2, 0x04FBFE03, 0xF902FD03, 0x01040100, 0x02FF04FD);
	r1 = D(r1, s0_0_2, 0xFFFDF701, 0x010500FC, 0x09F9F0FB, 0xFFFEF602);
	r2 = D(r2, s0_0_2, 0xFF0402FD, 0xFEF8F90D, 0x020A02F6, 0x0A0803F8);
	r3 = D(r3, s0_0_2, 0xFE0303FD, 0xFDFEFE02, 0x090BFEFC, 0xF100030C);
	r4 = D(r4, s0_0_2, 0xF4E7F20D, 0x04FFFEFB, 0x8181F4C7, 0x0B05EC03);
	r5 = D(r5, s0_0_2, 0x1A1FEAE6, 0x0308FF00, 0xF900FE01, 0x070DEBF1);
	r0 = D(r0, s0_1_0, 0xDC01EEFB, 0xF9FA0303, 0xF9FC02FB, 0x10F40903);
	r1 = D(r1, s0_1_0, 0x0F04FC01, 0x2AF20C0A, 0x09FAF906, 0xFB0104FD);
	r2 = D(r2, s0_1_0, 0x03E603FF, 0xF4F8F5FF, 0x1ADFEC09, 0x00DEFD1A);
	r3 = D(r3, s0_1_0, 0x02F90400, 0xFEFFF80A, 0xFAF600FE, 0x05FD08FD);
	r4 = D(r4, s0_1_0, 0x0303FAF9, 0x1DDBF1EC, 0xEAF9F302, 0x04EFF7FD);
	r5 = D(r5, s0_1_0, 0xC7A7030D, 0xF0F60207, 0xF7F9FAFE, 0x29EEFDE8);
	r0 = D(r0, s0_1_1, 0x4EF6172C, 0x19D300F6, 0xEFF8F925, 0x2BFDFFF5);
	r1 = D(r1, s0_1_1, 0x1AFBF204, 0xB806E7D7, 0xF7F4F5DB, 0x03FDF2F7);
	r2 = D(r2, s0_1_1, 0x0BEBFB20, 0xF3EAF108, 0xFCF5B0F7, 0xED8422C0);
	r3 = D(r3, s0_1_1, 0x2FE6FDE7, 0x01F3FBFD, 0x04EBE6F7, 0x23E8F8E0);
	r4 = D(r4, s0_1_1, 0x0B09F1EB, 0xF5DEED18, 0x1CFEF682, 0x1C02ECE8);
	r5 = D(r5, s0_1_1, 0x869B00D1, 0xF5CEFB07, 0xF3F9FBE9, 0xF1EEF8B3);
	r0 = D(r0, s0_1_2, 0x0B04FBF0, 0x0405F900, 0xFE02FE07, 0x06FD05F3);
	r1 = D(r1, s0_1_2, 0x0201F505, 0x03F70222, 0xFFFBF118, 0x0B00F009);
	r2 = D(r2, s0_1_2, 0x040203F6, 0xFFFEEF14, 0xE9E0D40F, 0xFB03F6D8);
	r3 = D(r3, s0_1_2, 0x0105FFFF, 0x0304F902, 0x0701F406, 0xF805080E);
	r4 = D(r4, s0_1_2, 0x0109FCFC, 0x0C0EF8F6, 0xE6151BC2, 0x04FE0000);
	r5 = D(r5, s0_1_2, 0xFCFC1320, 0x0406000B, 0xF9F7F914, 0xF4F2F12E);
	r0 = D(r0, s0_2_0, 0xFCFD0106, 0xFB040202, 0xFA00FEFC, 0x0BFE0001);
	r1 = D(r1, s0_2_0, 0x00FFFBFA, 0x05FC0403, 0x03FEF6F4, 0xFDFD01FF);
	r2 = D(r2, s0_2_0, 0xFBFD01FE, 0x0BF7F6FD, 0xDA17E9E7, 0xFBE9F1BB);
	r3 = D(r3, s0_2_0, 0xFC0202FE, 0x0502FEF2, 0xFBFAFEFB, 0xF7030502);
	r4 = D(r4, s0_2_0, 0xFDFF0102, 0xEFFA0400, 0x0EFFFCF0, 0x0402F7FA);
	r5 = D(r5, s0_2_0, 0xE80510F6, 0x03030400, 0x0200FFFB, 0x040FF601);
	r0 = D(r0, s0_2_1, 0x00F9FDFC, 0xFCFBFE0E, 0xF9FEFD14, 0x0802FCF9);
	r1 = D(r1, s0_2_1, 0x0501FAEC, 0x09FB021C, 0x02F6F9F0, 0x0AFEFEE7);
	r2 = D(r2, s0_2_1, 0x0607F80F, 0x13FAE9FB, 0xF4F5CBC4, 0xF81E29E8);
	r3 = D(r3, s0_2_1, 0x0905FD00, 0x00F8FEEF, 0x05FFFDF6, 0x010AF805);
	r4 = D(r4, s0_2_1, 0x00FEFDFB, 0x00FDDCDF, 0x18EFF9E7, 0xF7FE03FF);
	r5 = D(r5, s0_2_1, 0x17E3E800, 0x0400010A, 0xFBFAF719, 0xF608F9E7);
	r0 = D(r0, s0_2_2, 0x01000408, 0x0B06FDF7, 0x0100FD07, 0xFF020101);
	r1 = D(r1, s0_2_2, 0x0506FFF9, 0x08FAFF11, 0x0B0001F9, 0x06FFFE08);
	r2 = D(r2, s0_2_2, 0x0503FEFE, 0x0DFC01EF, 0x0219E1F1, 0xFAF21DE7);
	r3 = D(r3, s0_2_2, 0x0507FFF6, 0xFE03FF08, 0x0D01EF02, 0x0308FCFB);
	r4 = D(r4, s0_2_2, 0x0400FDFF, 0x0BFBF614, 0xE2FAF718, 0x0000FF02);
	r5 = D(r5, s0_2_2, 0x01250AEE, 0x0304FAF9, 0x03FFF805, 0xFC0DF6EC);
	r0 = D(r0, s1_0_0, 0xF6010913, 0xFEFD03FE, 0x04FD070A, 0xFDFEF2FE);
	r1 = D(r1, s1_0_0, 0x0CFD02F8, 0x01F7F9E4, 0x10F903F3, 0x0C01FA02);
	r2 = D(r2, s1_0_0, 0x09F9FE05, 0x030A0201, 0xFC040A08, 0xFEF4E121);
	r3 = D(r3, s1_0_0, 0xFA04F7FE, 0x0701FFFE, 0x1309F1F5, 0xF605F501);
	r4 = D(r4, s1_0_0, 0xFA000109, 0x10000B05, 0xE83B81E2, 0x0CF602F4);
	r5 = D(r5, s1_0_0, 0xF0F51D03, 0x03F91007, 0xFB00FC0A, 0xEFF40F0B);
	r0 = D(r0, s1_0_1, 0x0EF2F222, 0x06FC0FFF, 0xFC010400, 0xF901FD19);
	r1 = D(r1, s1_0_1, 0xEA0C09FF, 0xE30A12DB, 0xF31C0A2B, 0x05050404);
	r2 = D(r2, s1_0_1, 0xFAFFFEFF, 0x12F8FE0B, 0x0B05F306, 0xBD013F03);
	r3 = D(r3, s1_0_1, 0xF5FE170B, 0xF101040D, 0x0DF7F5F5, 0xE8F61F15);
	r4 = D(r4, s1_0_1, 0x060AFB12, 0x0DF4E3E6, 0x7FB9F481, 0x0330F317);
	r5 = D(r5, s1_0_1, 0x2D1FE119, 0x27FF1203, 0x05FBFC17, 0x0ADFF906);
	r0 = D(r0, s1_0_2, 0xEF030601, 0x070101FF, 0x03FDFFFC, 0x0308FEFE);
	r1 = D(r1, s1_0_2, 0x01050209, 0x0DF7FCF8, 0x0301ECE3, 0xF7F8F5FC);
	r2 = D(r2, s1_0_2, 0x0401FC01, 0xFE0C0BFD, 0x02F00EFB, 0x181AED01);
	r3 = D(r3, s1_0_2, 0xFE05FCF3, 0xFCFE0009, 0x1D0104F9, 0x0205FEE7);
	r4 = D(r4, s1_0_2, 0xF2070A07, 0xFC000BFF, 0x81CA961F, 0x0700F7F2);
	r5 = D(r5, s1_0_2, 0xE3EF15F5, 0xFBF301FD, 0xFC0500FF, 0x06E601F7);
	r0 = D(r0, s1_1_0, 0x0EE7F612, 0x01FB0901, 0xFDFA0004, 0x0414F803);
	r1 = D(r1, s1_1_0, 0xF308F809, 0xE8190DEA, 0xFF0AFA05, 0x07FD0403);
	r2 = D(r2, s1_1_0, 0xF1FCEE00, 0x0CF80D07, 0x1501E714, 0xD60900E4);
	r3 = D(r3, s1_1_0, 0xF7FF09EE, 0xF4F60305, 0x05F91004, 0xF90207F0);
	r4 = D(r4, s1_1_0, 0x01050002, 0xFF05E008, 0xD001981C, 0xF810E10D);
	r5 = D(r5, s1_1_0, 0x22DFED54, 0x14EDFF03, 0xFCFE0403, 0x0915F5FC);
	r0 = D(r0, s1_1_1, 0xE60901AB, 0xF608E10D, 0x2008FF0F, 0xF8031B01);
	r1 = D(r1, s1_1_1, 0xEEFCE703, 0x10E8F45D, 0xF225EAE4, 0xFAF5EDFD);
	r2 = D(r2, s1_1_1, 0x0BF91513, 0x0323F501, 0xEA131A0D, 0x05A9FDFE);
	r3 = D(r3, s1_1_1, 0x01FE040A, 0xF2F0E3EA, 0x11EAF608, 0x0EF20AF9);
	r4 = D(r4, s1_1_1, 0xFB0D0EF7, 0x36FA0903, 0x42D00DBC, 0x0519FEE7);
	r5 = D(r5, s1_1_1, 0xFEDAEDD8, 0xD61CE105, 0xF714EF18, 0xF619F129);
	r0 = D(r0, s1_1_2, 0xF70909FB, 0xF2FFECF8, 0xF5FEFD00, 0x030DF9FF);
	r1 = D(r1, s1_1_2, 0x080300FE, 0xFDF1F702, 0xF6FCFD0B, 0x16F0FFFA);
	r2 = D(r2, s1_1_2, 0x0B0CF4FD, 0x05FF08F8, 0x011A11FC, 0x2A0FEC10);
	r3 = D(r3, s1_1_2, 0x030CF5F2, 0x0401FEF6, 0x0C03EFFE, 0x09FEE400);
	r4 = D(r4, s1_1_2, 0xE705F602, 0x25FCF3FA, 0xD815EE2B, 0x01FDF701);
	r5 = D(r5, s1_1_2, 0xE1E409F3, 0xF7FEF8F8, 0xFF030203, 0xF40B0101);
	r0 = D(r0, s1_2_0, 0xFEFB0201, 0x05FAFFFB, 0x04050104, 0xFB00F502);
	r1 = D(r1, s1_2_0, 0xFF07FFFE, 0xF60203FE, 0x050BFDFE, 0x0101FFFE);
	r2 = D(r2, s1_2_0, 0x01050800, 0x0114F5FD, 0xD6E1F31D, 0xFBF9F7E4);
	r3 = D(r3, s1_2_0, 0xFF050401, 0x030A00FF, 0x06FFFBFC, 0x01030306);
	r4 = D(r4, s1_2_0, 0x0003FF03, 0x14F709F8, 0x2915F4F8, 0x0402FFFB);
	r5 = D(r5, s1_2_0, 0x08C50D18, 0x01FC0003, 0x0409FF03, 0xFCF1FEFD);
	r0 = D(r0, s1_2_1, 0x02080502, 0xF605F603, 0xF4030703, 0xF9080002);
	r1 = D(r1, s1_2_1, 0x051505F8, 0xF1F20002, 0x0002FBF6, 0x0C0507F8);
	r2 = D(r2, s1_2_1, 0x06ED0CFA, 0x14F60BE3, 0xE0BDDF09, 0x0BF10135);
	r3 = D(r3, s1_2_1, 0xFE020305, 0xFF04FC0C, 0x0108FA00, 0x00FA0605);
	r4 = D(r4, s1_2_1, 0xFFFF01FE, 0xEFF4E104, 0xF9140823, 0xFCFDFF02);
	r5 = D(r5, s1_2_1, 0xE715E9F1, 0xF7020001, 0xFD02FC0E, 0xFFE7F301);
	r0 = D(r0, s1_2_2, 0xEFF7FE06, 0x0BF908FA, 0x06FF04FE, 0xFA01F401);
	r1 = D(r1, s1_2_2, 0xED05FB01, 0x040A06F7, 0x06FCFD01, 0x0406F903);
	r2 = D(r2, s1_2_2, 0xF303F8FF, 0xFC11F506, 0xF6F61812, 0xD411D019);
	r3 = D(r3, s1_2_2, 0x030103FF, 0xFCFF0502, 0x10F108F7, 0x0400FFFE);
	r4 = D(r4, s1_2_2, 0xFF0003FE, 0x1FEE08FA, 0xF7170E02, 0xFBFEFF03);
	r5 = D(r5, s1_2_2, 0xF5ED211A, 0x10FF0DFF, 0x07FFFDFB, 0xFEF81602);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0405FEF8, 0x0001FF02, 0x04FCFD04, 0x01FA0101);
	r1 = D(r1, s0_0_0, 0xFCFF0801, 0x04FE0704, 0x01FD0EFD, 0xFCFB0202);
	r2 = D(r2, s0_0_0, 0x07FEF905, 0xFA05FAFF, 0x0AFFF70D, 0xECEBF827);
	r3 = D(r3, s0_0_0, 0xFC02FF00, 0xFF0101FF, 0xF4FDFF0C, 0xFDFFFCFF);
	r4 = D(r4, s0_0_0, 0xF8FB0104, 0x05FFF50C, 0x1731EFFC, 0x0AFE0B04);
	r5 = D(r5, s0_0_0, 0xFF060ADD, 0x0105FBFA, 0x0300FC00, 0x0F0CF508);
	r0 = D(r0, s0_0_1, 0x2DFFED05, 0x0BFBF803, 0xFEFFFD00, 0x00FAFA03);
	r1 = D(r1, s0_0_1, 0xF2090DF8, 0xD4031DF1, 0xF70BFC01, 0xF20607F9);
	r2 = D(r2, s0_0_1, 0x09FCFF00, 0x0F0100FE, 0x0FF5F907, 0xF0DB3AE8);
	r3 = D(r3, s0_0_1, 0x0FF2F704, 0xFE0904FD, 0x17FB00F7, 0x10ECFA02);
	r4 = D(r4, s0_0_1, 0xEAFB1400, 0x16FA08F8, 0x3A810004, 0xFCE31301);
	r5 = D(r5, s0_0_1, 0xF5A10163, 0x07EFFB0F, 0x12F9F707, 0x23F1FC11);
	r0 = D(r0, s0_0_2, 0xFEFC0301, 0x08FC03FE, 0xFC00FF00, 0x06FAF8F9);
	r1 = D(r1, s0_0_2, 0xFC05FEF9, 0x0201FFFD, 0x10EDFCEC, 0x02070500);
	r2 = D(r2, s0_0_2, 0x0300FEFF, 0xFF0006FB, 0x12FFFD0E, 0x25F6D424);
	r3 = D(r3, s0_0_2, 0x09F6FAF8, 0x0106FD01, 0x0403FAFE, 0x01F5FEF7);
	r4 = D(r4, s0_0_2, 0xFA010DF8, 0x0A03F704, 0x81FE81FA, 0x07FDF7FB);
	r5 = D(r5, s0_0_2, 0xF50416DA, 0x04FF06FB, 0x0BFD03FB, 0x0405FC04);
	r0 = D(r0, s0_1_0, 0x05F9F806, 0xFE000102, 0xFAF9F707, 0x090806FE);
	r1 = D(r1, s0_1_0, 0xF9F9FDFF, 0x03070FF8, 0xFF00FBFA, 0xFCF9FB06);
	r2 = D(r2, s0_1_0, 0x02F9FD04, 0x01F80300, 0xF9F810DF, 0x09E1FC18);
	r3 = D(r3, s0_1_0, 0x03FF0400, 0x02F9FB02, 0xF4FBF006, 0x09020303);
	r4 = D(r4, s0_1_0, 0xFFFCFC08, 0xEEF2F318, 0xECE8011A, 0x03FFF7FF);
	r5 = D(r5, s0_1_0, 0x05E7E116, 0xFC06FB02, 0x03010104, 0xFDEEFE05);
	r0 = D(r0, s0_1_1, 0xD9EC2F05, 0x04EEF909, 0x01F4FE0A, 0x0FEEF0FD);
	r1 = D(r1, s0_1_1, 0xF0F10E0D, 0x35F8D5EE, 0xFDFC0BF1, 0xF7F8F707);
	r2 = D(r2, s0_1_1, 0x13E7060E, 0x0DEC1A06, 0xFA0916D7, 0x0C952F2C);
	r3 = D(r3, s0_1_1, 0x11F7F0FE, 0x0DF4FB03, 0xF5EF0B0F, 0x0CDBFC03);
	r4 = D(r4, s0_1_1, 0xF6FCFB0B, 0x1BEE09F9, 0x23811322, 0xF701FDEC);
	r5 = D(r5, s0_1_1, 0xF4A61C47, 0xFBF3FCFF, 0x21FA15F9, 0x19DA07EC);
	r0 = D(r0, s0_1_2, 0x0FEDFEEC, 0x14FC0401, 0x06010108, 0xFBF8F9F1);
	r1 = D(r1, s0_1_2, 0xF9FC0502, 0xFB00071A, 0x12F1F8FD, 0xF5F80501);
	r2 = D(r2, s0_1_2, 0x0001FD03, 0x04F70705, 0xF20609E8, 0xFAB7B604);
	r3 = D(r3, s0_1_2, 0x0EF705F2, 0xFFF50100, 0x0DF6F6F7, 0x03FAFFF1);
	r4 = D(r4, s0_1_2, 0x000402FE, 0x01F7F2EC, 0xBCF21B24, 0x0707F7F8);
	r5 = D(r5, s0_1_2, 0x25F317FA, 0x13FCFF01, 0x08030506, 0x18F9FAEA);
	r0 = D(r0, s0_2_0, 0x050103FD, 0xFE030100, 0xFD0400FF, 0x04FCFDFE);
	r1 = D(r1, s0_2_0, 0xFDFCFC01, 0xFCFDFCFF, 0x05F507FB, 0xFF030101);
	r2 = D(r2, s0_2_0, 0xF8FF00FD, 0x0CF90BFB, 0xF2E1F22A, 0xDFFA0AF7);
	r3 = D(r3, s0_2_0, 0xFE000101, 0xFFFF02FF, 0x0208FFFF, 0xFDFFFFFF);
	r4 = D(r4, s0_2_0, 0x020000FF, 0xFB0204FA, 0xFA13E608, 0xFD03FB03);
	r5 = D(r5, s0_2_0, 0x0514DFFB, 0x0305FDFF, 0x010001FE, 0xF7FCFAFF);
	r0 = D(r0, s0_2_1, 0xFBF7F7F9, 0xF9FEF9FD, 0x00FEF9FC, 0x0001F7FA);
	r1 = D(r1, s0_2_1, 0xF8FE01FB, 0x09F81003, 0x010205FD, 0x04FC02FA);
	r2 = D(r2, s0_2_1, 0x04FFF901, 0xFAFA03F6, 0xE3E51718, 0x1CCC1D38);
	r3 = D(r3, s0_2_1, 0x00FEF601, 0x07FB09FF, 0xFCFBFAF8, 0x00FEFDFD);
	r4 = D(r4, s0_2_1, 0x0103FCFD, 0xEEFBFA04, 0x22D5E7D4, 0x03050201);
	r5 = D(r5, s0_2_1, 0xEDB208F6, 0xFEFCF9FB, 0x0BF9FF08, 0xFB0B0604);
	r0 = D(r0, s0_2_2, 0x08FAF9FD, 0x03FD00FB, 0xFEFD0003, 0x02FE02F8);
	r1 = D(r1, s0_2_2, 0x0402F5F0, 0xFAFD0503, 0x0203FBFB, 0xFEFAF9F7);
	r2 = D(r2, s0_2_2, 0xFFFF00FA, 0xF902FBF3, 0xF40026F1, 0xECC9F6D2);
	r3 = D(r3, s0_2_2, 0x01FDFEF7, 0x0700FEFA, 0xFF01FFFE, 0x02FCFEF7);
	r4 = D(r4, s0_2_2, 0x0402FEFF, 0x12F505F0, 0xF318F9F6, 0x00FDFE03);
	r5 = D(r5, s0_2_2, 0x2AE41EE7, 0x04FC0201, 0x02020105, 0xF7FE0C04);
	r0 = D(r0, s1_0_0, 0x07F6030B, 0x030200FA, 0x0104FD05, 0xFE05FDFF);
	r1 = D(r1, s1_0_0, 0xEF0500FB, 0xF60204FD, 0xEF02FE06, 0xE9020609);
	r2 = D(r2, s1_0_0, 0x07050101, 0x0F000001, 0x0106F909, 0xE81C01EC);
	r3 = D(r3, s1_0_0, 0x0406FF03, 0xFD01FF02, 0xFF1005F7, 0x0B080108);
	r4 = D(r4, s1_0_0, 0xE4FEFE09, 0xFA0605EC, 0x0E28B4AD, 0xE10400FF);
	r5 = D(r5, s1_0_0, 0x5607D4CA, 0x0400F8EB, 0x10FE0102, 0x24F7FF01);
	r0 = D(r0, s1_0_1, 0xFB120410, 0x090E04FB, 0x0107FEFB, 0xFB05F9F4);
	r1 = D(r1, s1_0_1, 0x07F1FCF3, 0xF9F2FFF4, 0x10ECFDEE, 0x00E502EA);
	r2 = D(r2, s1_0_1, 0x0411FCFD, 0xF8FF0411, 0x01FF0703, 0x0A27D0D7);
	r3 = D(r3, s1_0_1, 0x070DFD03, 0x04F40200, 0xED0F00F2, 0xF710F9FD);
	r4 = D(r4, s1_0_1, 0xFFEDFCF0, 0x02110608, 0x81FB8D81, 0x0AE4F6CD);
	r5 = D(r5, s1_0_1, 0x2245F712, 0x0F250805, 0xF6050109, 0xF203020D);
	r0 = D(r0, s1_0_2, 0xFCF80AF7, 0x04020000, 0xFF02FD00, 0x00FB0503);
	r1 = D(r1, s1_0_2, 0x04FDFDFC, 0xFE07F908, 0xF9FC0B02, 0xFF03FB06);
	r2 = D(r2, s1_0_2, 0x01010203, 0x04FB05FE, 0xF50BFF0D, 0x0CFA0801);
	r3 = D(r3, s1_0_2, 0x07FE01FD, 0x00FDFF00, 0xFA060701, 0x16F706FC);
	r4 = D(r4, s1_0_2, 0x04FBFAE5, 0x02FF0000, 0x81419CEE, 0xFD01070F);
	r5 = D(r5, s1_0_2, 0xEAFEF618, 0xFA0BF7FF, 0x00FC0402, 0xF3030A08);
	r0 = D(r0, s1_1_0, 0x28D821E9, 0xE001FCF9, 0x1E130700, 0xE320F10D);
	r1 = D(r1, s1_1_0, 0xF9FDF711, 0xC82AE21F, 0x0EE9F516, 0x10F909F6);
	r2 = D(r2, s1_1_0, 0x0A2AFF10, 0x10F509F4, 0xC90609FD, 0x2929F80A);
	r3 = D(r3, s1_1_0, 0x0509F5FE, 0x0EF5FF07, 0xF90605F5, 0x050EF3FE);
	r4 = D(r4, s1_1_0, 0x0802FBFB, 0x0310FD18, 0x2430C528, 0x0CFAF113);
	r5 = D(r5, s1_1_0, 0x051F0CE9, 0xF0FBFDEE, 0x07F80201, 0xFC160907);
	r0 = D(r0, s1_1_1, 0xBD35C816, 0x36350020, 0x0DF80C13, 0xD316FBFF);
	r1 = D(r1, s1_1_1, 0xF6000815, 0x41C742E8, 0xDB010FF3, 0x0D091130);
	r2 = D(r2, s1_1_1, 0xF309F2DA, 0x21ECF9F9, 0x0CF003E0, 0x31709FCF);
	r3 = D(r3, s1_1_1, 0x2C0FFA0E, 0xF00EFD12, 0x0D010421, 0xFD2000F8);
	r4 = D(r4, s1_1_1, 0xF2050F00, 0xE104F6DB, 0xD70FE90B, 0xFA010CFD);
	r5 = D(r5, s1_1_1, 0x341CAA08, 0x380CFF37, 0xF6EF00FC, 0x04ECF305);
	r0 = D(r0, s1_1_2, 0x06F90809, 0xF70DF3F6, 0x0002FEFE, 0x03F7040A);
	r1 = D(r1, s1_1_2, 0xFD000907, 0xF70DFBF8, 0xFB00FAFD, 0xFBF7090C);
	r2 = D(r2, s1_1_2, 0x00FF0107, 0xFB0200E5, 0x21E2F905, 0x19FDFC19);
	r3 = D(r3, s1_1_2, 0x0008FD03, 0xFFFC0307, 0xFC0500F8, 0x0BFFF8F8);
	r4 = D(r4, s1_1_2, 0xFF03FC00, 0xFD070F0D, 0xDCE8FEEB, 0xFD04FFFF);
	r5 = D(r5, s1_1_2, 0x0C27F9D9, 0x000EF8FC, 0x03FEFAF6, 0x0EEDF409);
	r0 = D(r0, s1_2_0, 0xFAF80C04, 0xFE00FFFA, 0x0B0005FE, 0x0700F602);
	r1 = D(r1, s1_2_0, 0x0AF904FE, 0x0403F902, 0xFDF704F7, 0x020807FE);
	r2 = D(r2, s1_2_0, 0x0F0CFCFD, 0xFC00F3FB, 0x20FDD80B, 0x4607D815);
	r3 = D(r3, s1_2_0, 0x0005F703, 0xFF01FF04, 0x0B010DFF, 0x0105F700);
	r4 = D(r4, s1_2_0, 0x0101FFFE, 0x0BF912EF, 0x0D08EDF7, 0x03F90202);
	r5 = D(r5, s1_2_0, 0x45DDD80D, 0xF9FEFEFA, 0x01FDFFFE, 0xF808F203);
	r0 = D(r0, s1_2_1, 0xF9FE1BFC, 0x1309FC09, 0x0CFD090B, 0xF9FF02FE);
	r1 = D(r1, s1_2_1, 0xF30913F0, 0xFDFDE811, 0x05FBFEFC, 0xF10211F1);
	r2 = D(r2, s1_2_1, 0xFF10FE05, 0xEE05FEFE, 0xEE1E0922, 0xE629E0D6);
	r3 = D(r3, s1_2_1, 0x09FE010C, 0x09F5FCFD, 0xFEF80CF5, 0x0602FE0B);
	r4 = D(r4, s1_2_1, 0x08000206, 0x17FA0D14, 0xCF0AF5E3, 0x00FF01FC);
	r5 = D(r5, s1_2_1, 0x4828D314, 0x0B02FE01, 0x0BF7F706, 0x1C02FE03);
	r0 = D(r0, s1_2_2, 0xFA03FF01, 0xFE0500FD, 0x03030400, 0x020200FE);
	r1 = D(r1, s1_2_2, 0x0301FF03, 0xFB000507, 0xFBFF020A, 0x00FF0C01);
	r2 = D(r2, s1_2_2, 0x02040400, 0xFDFA0309, 0xF0011104, 0x1500DF0F);
	r3 = D(r3, s1_2_2, 0x01FCFE03, 0x0500FCF6, 0x03040701, 0xF9FC0102);
	r4 = D(r4, s1_2_2, 0xFD03FF01, 0xF20900F3, 0x1D11F81F, 0x01FC0001);
	r5 = D(r5, s1_2_2, 0xDB0CFDF7, 0x0101FFFD, 0xFCFEF9FE, 0x0A000C06);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x050504F6, 0xFC040101, 0xFD00FFFF, 0xFA00FF03);
	r1 = D(r1, s0_0_0, 0x0009FB02, 0x0302F60D, 0xFE0CFD0D, 0xF9F3F7F5);
	r2 = D(r2, s0_0_0, 0xFDFDFF01, 0xF80104FE, 0x03030E0A, 0x3EFC1003);
	r3 = D(r3, s0_0_0, 0xFD010101, 0xFD08FD01, 0xF8EAFCE4, 0x0100FFFE);
	r4 = D(r4, s0_0_0, 0xFAF301F0, 0x06FA00FE, 0x97C9161E, 0x03F6F018);
	r5 = D(r5, s0_0_0, 0x81F51E18, 0xFA020708, 0xFF0103FF, 0x07000906);
	r0 = D(r0, s0_0_1, 0x05FB05FC, 0x00F90103, 0xF9FBFFFD, 0xFAFCFC02);
	r1 = D(r1, s0_0_1, 0xFA01FC00, 0x0401F10A, 0x001CF4F4, 0xF903F9F1);
	r2 = D(r2, s0_0_1, 0xFAED0304, 0x0406FF06, 0xFF090900, 0xA7EAE70C);
	r3 = D(r3, s0_0_1, 0xFAF203F8, 0xFD0B00FF, 0xFDF6050D, 0xFB0503FF);
	r4 = D(r4, s0_0_1, 0xFEEBF4D3, 0x0601050B, 0x816340D6, 0x01F2FF29);
	r5 = D(r5, s0_0_1, 0xFEB4FCD0, 0xFAE000F1, 0x03FD0303, 0x16FC0A19);
	r0 = D(r0, s0_0_2, 0x000006FC, 0xF7FB0404, 0xFDFFFEFE, 0xF90204FF);
	r1 = D(r1, s0_0_2, 0x0002F707, 0x0BF9F6FE, 0xFD010712, 0xF6FCFCF9);
	r2 = D(r2, s0_0_2, 0xFBFF01FB, 0xF609FC06, 0x090005FD, 0x9F0110E9);
	r3 = D(r3, s0_0_2, 0xF8FE06FB, 0x0203FC00, 0xEE0304FA, 0xFA040AF1);
	r4 = D(r4, s0_0_2, 0x0301FB07, 0xEA0305FD, 0x81FD8181, 0xFC040704);
	r5 = D(r5, s0_0_2, 0xE6021002, 0x01F8FF00, 0xFD0201FE, 0x040506FB);
	r0 = D(r0, s0_1_0, 0x0119FD07, 0xFC02FE07, 0xF907FA04, 0xF5F704ED);
	r1 = D(r1, s0_1_0, 0x08FCF8F7, 0x08DBF6FB, 0x0609F8FE, 0xFE11F805);
	r2 = D(r2, s0_1_0, 0xFFFBF4FA, 0x0D0E0E13, 0xFBFFF5F0, 0x4EEB02EF);
	r3 = D(r3, s0_1_0, 0xFE0601FF, 0x0501FEF7, 0xFF121B07, 0xFA0202FD);
	r4 = D(r4, s0_1_0, 0x05050607, 0x04E105DD, 0x31FAEC15, 0xFB042118);
	r5 = D(r5, s0_1_0, 0x81021A14, 0xF80EFC13, 0xFA0B0503, 0xE50EF6E4);
	r0 = D(r0, s0_1_1, 0x0AD6B50A, 0x00A8E8D7, 0xFBEF0C03, 0xF9F60314);
	r1 = D(r1, s0_1_1, 0x02D21217, 0x001539EF, 0xF8DEF737, 0xFADC0B08);
	r2 = D(r2, s0_1_1, 0xF8F8F10F, 0xFDCCE903, 0xD8EE18D9, 0x9E8132FD);
	r3 = D(r3, s0_1_1, 0xFCF8031A, 0x08E63212, 0xF394E200, 0xF90FE22B);
	r4 = D(r4, s0_1_1, 0x071419FA, 0xEDC7F307, 0x32A3744F, 0xFB06E5E8);
	r5 = D(r5, s0_1_1, 0x178127D6, 0x03D70E15, 0xFEFDD7F7, 0xE9DC90F3);
	r0 = D(r0, s0_1_2, 0x09020204, 0xF3FCFFFE, 0xFBFEFDFB, 0xF804FEFE);
	r1 = D(r1, s0_1_2, 0xFDFDFD08, 0x01F6F0F6, 0xFE061812, 0xF300F607);
	r2 = D(r2, s0_1_2, 0xFCFBFEF5, 0x02031C11, 0xF00AF9FB, 0xAA02ED09);
	r3 = D(r3, s0_1_2, 0xF7FEFBF0, 0x0400FCFF, 0xF6F900F5, 0xF2051105);
	r4 = D(r4, s0_1_2, 0xFFFF07F8, 0xFDFF06F9, 0x0C0A190C, 0x00FC0610);
	r5 = D(r5, s0_1_2, 0x13F8282D, 0xFCFE09F5, 0xFFFFFF02, 0xF905E303);
	r0 = D(r0, s0_2_0, 0x04F9F0FB, 0xFF040103, 0xF40B0103, 0xF9FFF103);
	r1 = D(r1, s0_2_0, 0xFB02FC0B, 0x0500F800, 0xFC05FE13, 0xF20801FC);
	r2 = D(r2, s0_2_0, 0xFF070BF9, 0x03F6FB08, 0x1CF9F50F, 0x550E25DA);
	r3 = D(r3, s0_2_0, 0xFBFD04F9, 0xFC0409F6, 0xE6FF1205, 0xFFFD04FD);
	r4 = D(r4, s0_2_0, 0xFF02FF00, 0xEC10FC11, 0xF207F504, 0x0100F5FE);
	r5 = D(r5, s0_2_0, 0x8111DF0D, 0xF20602FE, 0x00060900, 0x1304110B);
	r0 = D(r0, s0_2_1, 0x020034E8, 0x01FF0A0A, 0xFA02EC02, 0xFC0600F8);
	r1 = D(r1, s0_2_1, 0x010C2DF2, 0x0602A408, 0xFFFE1A14, 0xF9020DEF);
	r2 = D(r2, s0_2_1, 0xFCECFD05, 0xF5021D0B, 0x1999D62C, 0xD6FDE716);
	r3 = D(r3, s0_2_1, 0xF9FFE205, 0xFCFE2603, 0x0007CCF8, 0xF607F7FF);
	r4 = D(r4, s0_2_1, 0x00FD0809, 0xF9E81502, 0x12EF8FED, 0xFE04040A);
	r5 = D(r5, s0_2_1, 0x34EABAEF, 0xFE02D009, 0xFAFCF706, 0x02F40B0D);
	r0 = D(r0, s0_2_2, 0x0100F504, 0xFBF9FEFF, 0xFB02F8FF, 0xFE02FB04);
	r1 = D(r1, s0_2_2, 0x0100FFFA, 0x0604FEF9, 0xFA030000, 0xFE00F800);
	r2 = D(r2, s0_2_2, 0xFAFFFDFD, 0xFF07FB00, 0xFDFFF108, 0xFB08E5E9);
	r3 = D(r3, s0_2_2, 0xF5FE04FF, 0xFF06FF05, 0xF6FCFD03, 0xFCFA08FB);
	r4 = D(r4, s0_2_2, 0x01FD00FD, 0xF2F0ED01, 0x07F2F303, 0xFF0206FF);
	r5 = D(r5, s0_2_2, 0xE60BFE03, 0xF7FCFE00, 0xFD04FA00, 0x06031102);
	r0 = D(r0, s1_0_0, 0x0300FFFB, 0x02010300, 0x06FFFB01, 0x0406F904);
	r1 = D(r1, s1_0_0, 0xFE000400, 0xFC03FC03, 0x02040601, 0x05FCFF02);
	r2 = D(r2, s1_0_0, 0x05010301, 0xFB04F802, 0xFAF3F9FC, 0x15F9F713);
	r3 = D(r3, s1_0_0, 0x00FB0201, 0xFEFCFCFF, 0xF300ED0C, 0xFEF80203);
	r4 = D(r4, s1_0_0, 0x02F402FF, 0x0C07FCFF, 0x818129F6, 0x08F6E10C);
	r5 = D(r5, s1_0_0, 0x02E4F525, 0xFFFC0405, 0xFF0102FD, 0x03EF0EF9);
	r0 = D(r0, s1_0_1, 0x0DF0D504, 0x060005FF, 0x01FAF704, 0x0602FB02);
	r1 = D(r1, s1_0_1, 0x040B1407, 0xE71C30FC, 0xFC0FF006, 0xF3110103);
	r2 = D(r2, s1_0_1, 0x0FF8FB02, 0x02FAF000, 0xEB01ECFA, 0x1ADC0716);
	r3 = D(r3, s1_0_1, 0x0209FF00, 0xFE030CFE, 0x160405F6, 0x020B0CFE);
	r4 = D(r4, s1_0_1, 0xCB0F1D26, 0x03FFE0F7, 0x81AE814A, 0xD2FAFAF6);
	r5 = D(r5, s1_0_1, 0xF9E4F302, 0x03FBF101, 0x04F4F302, 0x17DD1DFC);
	r0 = D(r0, s1_0_2, 0x0604FCFC, 0x07FAF702, 0x00FF05FF, 0x03FDF400);
	r1 = D(r1, s1_0_2, 0x03000D01, 0xFAF61202, 0x08E8E3F3, 0xFE041D00);
	r2 = D(r2, s1_0_2, 0x0000FCFD, 0x07FCECFD, 0xFFF6F5F5, 0x050CFC09);
	r3 = D(r3, s1_0_2, 0x05F1EB05, 0x020400FF, 0x01FEF3FB, 0xFCEFF602);
	r4 = D(r4, s1_0_2, 0x09FF0CFB, 0x0801F0FF, 0x8181A627, 0x08F305F9);
	r5 = D(r5, s1_0_2, 0x07F00205, 0x0AFCF306, 0x05FBFCFC, 0x04F825EB);
	r0 = D(r0, s1_1_0, 0xFE13FAEE, 0x05FF0505, 0xF80D06FE, 0xE8EEFEF8);
	r1 = D(r1, s1_1_0, 0xFFF4FE09, 0xF7F00417, 0x11F1EE01, 0xF903030F);
	r2 = D(r2, s1_1_0, 0xEDFD02FB, 0x06FFF406, 0x11081012, 0xEDC7F1F8);
	r3 = D(r3, s1_1_0, 0x00F90301, 0xFDF90601, 0xF9F80B07, 0x03F702FF);
	r4 = D(r4, s1_1_0, 0xFFFC0202, 0xE9E30EFF, 0xC3C73C31, 0xF9E6FFEA);
	r5 = D(r5, s1_1_0, 0x05FBD63B, 0x030AFD0C, 0x06FB0101, 0xDEF10C0C);
	r0 = D(r0, s1_1_1, 0xF50F4011, 0xD10EF701, 0xF2F60DF3, 0xEE1BF2ED);
	r1 = D(r1, s1_1_1, 0xE1FB12E2, 0xD9EACA00, 0xCEFA10E8, 0xDC101DDD);
	r2 = D(r2, s1_1_1, 0xD72DF708, 0xDAEAFD08, 0xFD17150A, 0x811DF107);
	r3 = D(r3, s1_1_1, 0xE1F6F3F7, 0x08F02DF4, 0xBC190714, 0xD107F70F);
	r4 = D(r4, s1_1_1, 0xF10B0722, 0xDD32F91F, 0xB6EB21D1, 0x09070916);
	r5 = D(r5, s1_1_1, 0x81C970E3, 0xBAE017F3, 0xFC100B10, 0xC109F316);
	r0 = D(r0, s1_1_2, 0x08E607F2, 0x050D0407, 0xFC0DFC04, 0xFEEF1206);
	r1 = D(r1, s1_1_2, 0x04F80501, 0xF81EF306, 0x03FFE80F, 0xECF916FD);
	r2 = D(r2, s1_1_2, 0x07010E03, 0xF60BE9E8, 0x0FFD310F, 0xFAC33C2C);
	r3 = D(r3, s1_1_2, 0xFD05FB12, 0x02F617FB, 0x06030703, 0x09E70109);
	r4 = D(r4, s1_1_2, 0x01FF060B, 0x0CEC03F4, 0x1932232D, 0xFD01F5F7);
	r5 = D(r5, s1_1_2, 0xF6EEDA16, 0x0609F20D, 0x060C0BFF, 0xE204091C);
	r0 = D(r0, s1_2_0, 0x07FBF8FD, 0x000405FC, 0x050301FB, 0x0301FDFB);
	r1 = D(r1, s1_2_0, 0xFF00FE11, 0xF90402FE, 0xFCFFF206, 0x01FF00FB);
	r2 = D(r2, s1_2_0, 0x00FA0BFB, 0x07ECEEF4, 0xAFC737F6, 0x04F320F4);
	r3 = D(r3, s1_2_0, 0x05FD0007, 0xFF00030E, 0x0401FBF9, 0x01FF0406);
	r4 = D(r4, s1_2_0, 0x0102FA01, 0x070AF7FD, 0x060C0B37, 0x0208FEFC);
	r5 = D(r5, s1_2_0, 0x18F207E5, 0xFCFF01FB, 0x0203FE00, 0x00F90C08);
	r0 = D(r0, s1_2_1, 0x030EF610, 0xF7F30A01, 0xF8050302, 0xFE05FDF6);
	r1 = D(r1, s1_2_1, 0xF7140231, 0xFCF609EF, 0x0BFDFFDF, 0x0002F801);
	r2 = D(r2, s1_2_1, 0xF6F603F8, 0xF5F409EC, 0x81DD7FB7, 0x810DE2F3);
	r3 = D(r3, s1_2_1, 0xFEFD04F0, 0x01F9F624, 0x03FFFB06, 0xFEF806E7);
	r4 = D(r4, s1_2_1, 0xFC0001FA, 0xE7F21C02, 0xE6FCE8FC, 0xFD0100FD);
	r5 = D(r5, s1_2_1, 0xDBD44E01, 0x05000101, 0xF9F7F41F, 0xF9F414FA);
	r0 = D(r0, s1_2_2, 0x0204F007, 0x020102FD, 0x000201FC, 0x03FE00FD);
	r1 = D(r1, s1_2_2, 0x0001FE14, 0xFDFF0BFD, 0x02FFFFFF, 0xFCFD000C);
	r2 = D(r2, s1_2_2, 0x04FF0402, 0x0AFB050D, 0xDBE64A04, 0x12EE323F);
	r3 = D(r3, s1_2_2, 0x000300FA, 0xF603FD0D, 0xFAFE0AF9, 0x01000003);
	r4 = D(r4, s1_2_2, 0x0203F7FF, 0x0008EDFE, 0x1E050A36, 0xFFFDFFFE);
	r5 = D(r5, s1_2_2, 0xE6FCD519, 0x04F900FD, 0x00FEFF03, 0xFAF015F7);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.502e-02, -1.308e-02, -6.307e-03, -9.655e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-6.354e-03, -2.089e-02, -2.084e-03, -2.864e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.456e-02, -9.351e-03, -3.964e-02, -5.514e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.168e-02, 1.663e-03, -1.776e-02, -4.533e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.810e-02, -2.382e-02, 5.795e-03, -5.288e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.579e-02, -1.029e-02, -1.161e-02, -9.567e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_DS_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0)))
#define l3(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0)))
#define l4(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0)))
#define l5(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0)))
shared V4 G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
			G[3][ay][ax] = l3(x - 1, y - 1);
			G[4][ay][ax] = l4(x - 1, y - 1);
			G[5][ay][ax] = l5(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(8.633e-03, 7.907e-04, 7.044e-04, 1.082e-03, 1.401e-02, -5.747e-04, -6.147e-03, 3.051e-03, -3.023e-02, 1.387e-03, -8.759e-03, 1.461e-03, 1.225e-03, -1.417e-03, -2.176e-03, -1.727e-03) * s0_0_0;
	r0 += M4(2.593e-02, 2.498e-02, 3.622e-03, 2.152e-03, 3.381e-02, -1.012e-01, 7.521e-03, 2.455e-02, 5.239e-02, -3.009e-02, -1.462e-02, 1.292e-04, 3.357e-02, 2.510e-02, 1.028e-02, -3.368e-03) * s0_0_1;
	r0 += M4(1.539e-03, 1.110e-02, 1.677e-03, 2.703e-03, 3.365e-03, 7.711e-03, 2.769e-03, 1.215e-02, -5.473e-04, 3.211e-02, 1.413e-03, -3.138e-03, -1.029e-02, -3.844e-02, -7.094e-03, 2.852e-03) * s0_0_2;
	r0 += M4(2.216e-02, 6.395e-04, 2.364e-02, 1.672e-03, 2.269e-02, -2.329e-03, 1.116e-01, 3.869e-03, -2.339e-02, 3.504e-03, -4.702e-02, 5.424e-03, 3.481e-02, -8.036e-04, 2.404e-02, 1.466e-03) * s0_1_0;
	r0 += M4(6.616e-02, 6.567e-02, 6.811e-02, 6.737e-02, 5.224e-02, -1.871e-02, 6.830e-02, -3.094e-01, -6.913e-02, -1.012e-01, 8.348e-02, -1.378e-01, -6.653e-02, 1.008e-01, 2.796e-03, 9.106e-02) * s0_1_1;
	r0 += M4(2.972e-03, 2.472e-02, 3.287e-03, 2.606e-02, -4.160e-04, -9.352e-03, 3.508e-03, -1.521e-02, 3.308e-02, 1.018e-01, 9.773e-03, 1.255e-01, -4.432e-03, -9.970e-02, -8.478e-03, -1.265e-01) * s0_1_2;
	r0 += M4(9.029e-04, 1.300e-03, 7.064e-03, 5.459e-04, 3.048e-03, -1.563e-03, -7.663e-03, 7.987e-04, 1.172e-03, 7.121e-04, -1.500e-03, 2.894e-03, -4.172e-04, -2.367e-03, 1.146e-02, -2.794e-03) * s0_2_0;
	r0 += M4(1.754e-03, 1.995e-03, 2.254e-02, 2.301e-02, -5.937e-03, -2.256e-03, 1.108e-02, 3.162e-02, 6.598e-03, 3.869e-03, -4.993e-02, -1.222e-02, 2.193e-03, 4.876e-03, -2.858e-02, 2.582e-02) * s0_2_1;
	r0 += M4(1.192e-03, 1.715e-03, 2.033e-03, 8.819e-03, 1.775e-03, -3.560e-03, 4.065e-04, 8.945e-03, 3.658e-03, -2.846e-03, 1.877e-02, -4.336e-03, 7.747e-04, 3.604e-03, -4.234e-03, -1.486e-02) * s0_2_2;
	r0 += M4(3.552e-02, 3.451e-03, -2.541e-03, 4.326e-04, -5.757e-03, -2.853e-04, 2.230e-04, 1.998e-04, -1.037e-02, -2.281e-03, 2.456e-03, 1.325e-03, 1.846e-02, 6.068e-03, -4.928e-03, 2.397e-04) * s1_0_0;
	r0 += M4(7.860e-02, 9.253e-02, 1.503e-02, 2.740e-03, -2.044e-02, -2.069e-02, -3.348e-04, 2.408e-04, -1.241e-02, -2.806e-02, -4.241e-03, 3.304e-03, 1.898e-02, 3.779e-02, -1.648e-05, -3.441e-03) * s1_0_1;
	r0 += M4(5.694e-03, 2.015e-02, -6.432e-04, 8.393e-03, -1.960e-03, -8.067e-03, -1.416e-03, -1.214e-03, 4.640e-03, 1.769e-02, -9.834e-03, 5.924e-03, -1.533e-03, 5.304e-03, -5.232e-04, -1.374e-03) * s1_0_2;
	r0 += M4(-9.002e-03, 1.424e-02, 3.918e-02, -4.678e-04, -1.907e-02, 1.171e-03, -1.898e-02, -2.692e-04, 3.231e-02, -2.092e-02, -3.918e-02, -4.405e-03, -6.323e-02, 8.358e-03, 1.529e-03, -1.333e-02) * s1_1_0;
	r0 += M4(-1.694e-01, -1.357e-01, 2.984e-02, 7.593e-02, -6.065e-02, -5.994e-02, -6.090e-02, -6.029e-02, -1.372e-01, 2.065e-01, 1.362e-01, -4.037e-02, 6.812e-02, -1.333e-01, 9.276e-02, 9.497e-02) * s1_1_1;
	r0 += M4(9.606e-03, -1.931e-02, -1.183e-02, -2.034e-02, -1.483e-03, -2.326e-02, -2.482e-03, -2.368e-02, 6.602e-03, -1.984e-02, -1.139e-02, -1.764e-02, 2.076e-03, 5.798e-02, 5.348e-03, 2.682e-02) * s1_1_2;
	r0 += M4(-8.044e-04, 1.151e-03, -2.361e-03, 4.252e-03, 2.609e-04, 2.666e-04, -5.911e-03, 5.226e-04, -4.388e-03, -8.186e-03, 4.917e-02, 4.481e-03, 1.014e-02, -1.128e-03, -5.615e-03, 5.055e-03) * s1_2_0;
	r0 += M4(3.810e-03, -4.887e-04, -1.209e-02, -2.059e-02, -7.034e-04, -1.861e-03, -2.106e-02, -1.994e-02, 2.339e-03, 1.927e-03, -2.078e-02, -7.592e-02, -1.129e-02, 1.315e-02, -9.985e-02, -6.567e-02) * s1_2_1;
	r0 += M4(-4.438e-04, 2.617e-03, 3.204e-03, 9.973e-04, -1.767e-03, -6.943e-04, -1.725e-03, -8.137e-03, -3.575e-04, 4.642e-03, 5.018e-03, -5.446e-03, -9.450e-05, -7.443e-03, 3.410e-03, -2.390e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(2.167e-02, -9.328e-05, 1.114e-02, -3.328e-04, 3.567e-02, 2.597e-05, 5.623e-03, 1.103e-03, -4.117e-02, -6.174e-03, 3.228e-02, 1.366e-02, -1.485e-03, -4.651e-03, 8.174e-04, -2.439e-03) * s0_0_0;
	r0 += M4(-1.140e-01, 2.008e-02, 2.079e-02, 4.722e-05, -1.655e-01, 5.430e-02, 3.479e-02, 3.883e-02, -1.929e-01, -1.332e-01, 1.597e-01, 1.093e-01, -1.567e-01, 1.626e-01, -8.558e-02, 7.020e-02) * s0_0_1;
	r0 += M4(8.841e-03, 1.740e-02, 5.279e-03, 1.499e-03, 2.770e-02, -1.359e-02, 8.201e-04, -2.184e-02, -1.829e-02, -1.098e-01, 9.386e-03, 7.744e-02, 2.649e-03, 3.471e-03, 2.534e-03, -1.320e-03) * s0_0_2;
	r0 += M4(2.135e-02, -2.713e-03, 2.814e-02, -3.503e-03, -5.601e-02, -1.511e-02, -6.169e-03, 5.949e-03, 3.619e-03, 4.129e-03, -5.233e-03, -8.095e-03, -7.165e-03, -4.619e-03, -7.021e-03, -7.907e-03) * s0_1_0;
	r0 += M4(-4.459e-02, 6.014e-02, -2.783e-01, 8.707e-02, 1.421e-01, -2.604e-02, 5.512e-03, -2.382e-01, 5.928e-03, 5.401e-04, 3.692e-02, 2.591e-02, -1.490e-01, 1.421e-01, -1.666e-01, 2.009e-01) * s0_1_1;
	r0 += M4(-3.762e-03, 1.126e-02, 5.082e-03, 5.353e-02, -1.402e-02, 1.308e-02, -4.217e-03, 1.028e-01, 5.828e-03, 1.167e-02, -3.142e-03, 8.924e-03, -1.482e-03, 1.101e-02, -1.574e-03, 1.009e-02) * s0_1_2;
	r0 += M4(-1.686e-03, -2.931e-05, 5.296e-03, -1.436e-03, 1.454e-04, 1.507e-03, -5.843e-03, 8.943e-03, -6.300e-04, 2.793e-04, 7.499e-04, 1.164e-03, 3.060e-03, -1.859e-03, 1.172e-03, -1.820e-03) * s0_2_0;
	r0 += M4(3.383e-03, 2.485e-04, 5.525e-02, 1.490e-02, -1.246e-02, -1.242e-02, 2.066e-02, 6.741e-02, 7.449e-04, -1.515e-04, 5.356e-03, 3.550e-03, -3.142e-02, 3.857e-02, -8.147e-02, 6.374e-02) * s0_2_1;
	r0 += M4(1.917e-03, 4.167e-03, 1.400e-03, 1.303e-02, 1.447e-03, -6.149e-03, -1.083e-02, -6.400e-03, -3.349e-04, -4.874e-04, 2.391e-03, 3.469e-03, 5.135e-04, -3.366e-03, 4.306e-04, -7.475e-04) * s0_2_2;
	r0 += M4(-1.873e-03, -1.727e-03, 6.956e-04, -5.496e-04, -1.986e-02, 1.023e-03, -3.552e-03, -4.678e-05, -2.850e-02, -7.408e-03, 3.520e-03, 9.849e-03, 1.011e-02, 3.162e-03, -3.757e-03, 1.092e-03) * s1_0_0;
	r0 += M4(-1.096e-02, -2.779e-03, -1.128e-03, -1.053e-02, -6.958e-02, -8.180e-02, -3.235e-02, -2.414e-02, 1.364e-02, 4.451e-02, -1.420e-02, 1.062e-03, 2.852e-03, -2.925e-03, 7.794e-03, 7.204e-04) * s1_0_1;
	r0 += M4(8.780e-04, -3.751e-03, -1.272e-04, -5.784e-03, -1.096e-02, -2.260e-02, -7.522e-04, -1.318e-02, 1.477e-03, -1.765e-02, -3.747e-03, -1.832e-03, 4.562e-04, -1.831e-03, 4.339e-04, 1.738e-03) * s1_0_2;
	r0 += M4(1.999e-01, -1.446e-02, 8.130e-02, -8.095e-03, -1.347e-02, 4.024e-03, 3.822e-02, -5.506e-03, 5.689e-02, -9.780e-03, -3.598e-03, 8.816e-03, -1.447e-01, 1.611e-02, -4.316e-02, 1.264e-02) * s1_1_0;
	r0 += M4(-1.792e-01, -2.576e-03, -1.189e-01, 4.773e-02, -9.287e-02, -7.544e-02, 1.838e-01, 1.704e-01, -2.733e-01, 1.467e-01, 1.126e-01, -1.992e-01, -6.016e-02, 1.766e-01, -3.009e-02, 6.059e-02) * s1_1_1;
	r0 += M4(1.229e-02, 6.711e-03, 6.726e-03, 1.023e-02, 4.145e-03, -2.878e-02, -1.111e-02, 5.358e-02, 1.027e-02, 1.105e-02, -9.319e-03, 1.401e-02, 5.365e-04, 5.351e-04, 1.032e-03, -3.024e-03) * s1_1_2;
	r0 += M4(-7.303e-04, 5.905e-03, 8.327e-02, 1.539e-03, -3.216e-04, -4.257e-05, -1.564e-02, -4.546e-03, -5.079e-03, -2.771e-03, -5.871e-03, -1.514e-03, 3.068e-03, -1.517e-03, -5.198e-02, 1.048e-03) * s1_2_0;
	r0 += M4(1.212e-02, -5.758e-03, -5.270e-02, -3.014e-03, 1.742e-03, 5.375e-04, -2.849e-02, -3.070e-02, 1.295e-02, -5.667e-03, 7.642e-02, 4.893e-02, 5.395e-03, -2.246e-03, -2.741e-02, 7.202e-02) * s1_2_1;
	r0 += M4(3.224e-03, -5.629e-04, 9.897e-03, -1.253e-02, -8.637e-04, 9.256e-05, -3.247e-03, -1.630e-02, 8.354e-03, 1.187e-02, -1.017e-02, -4.447e-02, -1.619e-05, -2.359e-03, -8.146e-04, -2.773e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(-3.402e-03, -2.035e-03, 2.701e-04, -5.547e-04, 1.528e-02, 1.226e-02, -1.502e-02, -6.826e-03, 4.087e-04, -1.702e-03, 1.038e-03, -1.084e-03, 2.688e-06, 5.664e-05, 1.422e-05, -5.029e-05) * s0_0_0;
	r0 += M4(1.043e-04, -1.388e-03, 1.200e-03, 1.313e-03, 5.848e-02, -1.671e-01, 2.289e-02, 3.381e-02, 1.009e-02, 8.128e-03, -1.494e-03, 1.617e-03, 5.287e-04, -1.167e-03, -8.663e-04, -5.972e-04) * s0_0_1;
	r0 += M4(1.021e-03, 2.320e-04, -1.180e-03, -8.122e-04, 1.533e-04, 3.582e-02, 7.397e-04, -1.402e-03, 2.988e-03, 6.589e-03, -1.309e-03, -1.243e-03, 1.946e-03, 5.907e-03, -7.961e-04, -1.632e-03) * s0_0_2;
	r0 += M4(5.676e-02, -7.867e-04, -6.936e-03, -3.597e-03, -8.185e-03, 1.227e-04, 3.332e-02, -3.404e-03, -2.830e-03, -2.226e-02, 1.000e-02, 1.607e-03, -5.225e-03, -3.518e-04, 3.283e-04, -1.106e-03) * s0_1_0;
	r0 += M4(1.028e-01, 1.616e-01, 4.932e-03, -4.770e-04, 1.072e-01, 3.241e-02, -2.747e-01, 1.087e-01, -2.022e-01, -1.961e-02, 7.496e-02, 4.252e-02, 1.080e-01, 1.619e-02, 1.398e-02, -3.234e-03) * s0_1_1;
	r0 += M4(-8.785e-03, -7.517e-05, 4.077e-03, 4.558e-03, 7.825e-03, -9.252e-02, 2.165e-02, 1.786e-02, 6.056e-03, -1.372e-01, 1.065e-02, 4.357e-02, 9.723e-03, -1.169e-01, 3.751e-03, 4.162e-02) * s0_1_2;
	r0 += M4(3.017e-02, -1.207e-02, -8.797e-02, 9.198e-03, -2.380e-03, -3.800e-05, 2.170e-03, -2.793e-03, 6.802e-01, -6.747e-01, 6.636e-01, -7.011e-01, 1.212e-02, 2.498e-03, 3.021e-02, -3.452e-03) * s0_2_0;
	r0 += M4(1.032e-01, 1.086e-01, -2.153e-01, -2.688e-01, -3.564e-03, -4.599e-03, 3.136e-02, -3.817e-03, -4.827e-01, 6.723e-01, -7.175e-01, 6.192e-01, 8.422e-02, -8.321e-02, -2.783e-01, 1.294e-01) * s0_2_1;
	r0 += M4(-8.407e-03, -2.053e-03, 9.648e-03, -3.329e-02, -6.849e-03, 5.306e-03, 1.215e-03, 2.230e-02, 1.597e-02, 1.354e-01, 1.518e-02, -3.936e-02, -7.986e-03, 3.822e-02, 2.791e-02, -2.932e-02) * s0_2_2;
	r0 += M4(8.158e-05, 5.435e-03, -1.343e-03, 3.931e-03, -2.760e-03, -2.628e-04, -3.881e-03, -1.879e-03, -4.142e-02, 1.933e-03, -4.289e-03, -1.233e-03, -3.929e-03, -9.410e-03, 1.433e-02, 8.213e-03) * s1_0_0;
	r0 += M4(1.080e-01, -1.294e-01, 4.759e-02, -5.782e-02, -1.199e-02, 3.845e-02, -4.579e-03, -7.526e-03, -5.797e-02, -1.163e-01, -3.817e-02, -2.875e-02, 7.687e-03, 2.474e-02, 1.335e-02, 1.594e-02) * s1_0_1;
	r0 += M4(-1.689e-03, -3.395e-03, -6.637e-04, -3.732e-04, -2.159e-03, 9.760e-04, -1.345e-03, -2.171e-03, -3.690e-03, 2.365e-03, -1.079e-03, -1.203e-02, -5.655e-03, -1.266e-02, 4.538e-03, 9.017e-03) * s1_0_2;
	r0 += M4(1.636e-03, 1.345e-03, -2.549e-03, 8.232e-04, 9.966e-03, 1.084e-02, -9.358e-03, 3.332e-04, 1.825e-02, -4.188e-03, -4.611e-02, -4.202e-03, 1.095e-01, 1.029e-02, -1.028e-01, -1.918e-02) * s1_1_0;
	r0 += M4(1.655e-01, -1.271e-01, 1.680e-01, -1.504e-01, 2.068e-01, -2.405e-01, 9.357e-02, -2.974e-02, 1.189e-01, 1.091e-01, 3.969e-02, -2.781e-02, 1.899e-01, 2.484e-01, -1.977e-01, -2.124e-01) * s1_1_1;
	r0 += M4(-7.117e-03, -8.346e-04, -4.203e-03, -7.022e-03, -2.671e-02, -8.652e-04, -1.565e-02, -8.524e-03, -9.455e-03, 2.148e-02, 3.321e-03, 2.563e-02, 8.684e-03, 5.210e-02, -5.011e-03, -6.538e-02) * s1_1_2;
	r0 += M4(2.652e-04, 1.235e-04, 2.713e-03, 1.224e-03, -6.349e-03, -1.934e-03, -1.115e-02, -3.731e-03, -1.087e-03, -2.450e-03, 2.480e-02, 4.100e-03, -3.646e-03, -1.410e-03, 4.070e-03, 9.732e-03) * s1_2_0;
	r0 += M4(5.159e-02, -6.073e-02, 1.087e-01, -1.058e-01, -9.895e-03, 1.979e-02, 8.146e-02, -5.118e-02, -1.474e-03, 1.468e-03, 3.185e-02, 4.773e-02, -5.931e-03, -7.845e-03, -2.875e-02, -2.723e-02) * s1_2_1;
	r0 += M4(-4.051e-03, 3.079e-03, -7.121e-03, -3.400e-04, -6.265e-03, 9.912e-03, -1.849e-02, 2.035e-02, 7.835e-05, -1.718e-03, -2.534e-03, 7.248e-03, -2.042e-03, -1.370e-03, 6.512e-03, -4.780e-03) * s1_2_2;
	r0 += V4(-5.028e-05, -5.028e-05, -5.744e-05, -5.849e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
