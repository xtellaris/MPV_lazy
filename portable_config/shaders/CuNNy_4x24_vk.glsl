// CuNNy 4x24
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_4x24_vk] -in
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-4.212e-02, 6.593e-01, 1.597e-01, 2.094e-02) * s0_0_0;
	r1 += V4(-3.982e-03, -2.971e-02, -8.701e-02, 9.095e-03) * s0_0_0;
	r2 += V4(1.384e-03, -7.016e-03, 1.369e-02, 1.168e-02) * s0_0_0;
	r3 += V4(-2.905e-02, -7.149e-02, 2.915e-03, 2.618e-01) * s0_0_0;
	r4 += V4(-3.811e-02, -4.033e-03, -1.929e-01, -1.492e-02) * s0_0_0;
	r5 += V4(1.063e-02, 4.031e-01, 1.777e-01, -6.082e-02) * s0_0_0;
	r0 += V4(-3.297e-02, -6.608e-01, -1.785e-01, -3.880e-01) * s0_0_1;
	r1 += V4(-1.310e-02, 3.302e-02, -2.998e-01, -4.860e-02) * s0_0_1;
	r2 += V4(-2.651e-03, 1.966e-01, -4.608e-03, -1.583e-02) * s0_0_1;
	r3 += V4(6.586e-01, 2.345e-01, 2.646e-02, 4.913e-01) * s0_0_1;
	r4 += V4(-3.624e-02, -2.088e-01, -1.563e-01, 1.993e-02) * s0_0_1;
	r5 += V4(5.243e-02, -5.020e-01, 1.523e-01, -7.544e-02) * s0_0_1;
	r0 += V4(-1.119e-03, -1.596e-04, 5.071e-02, 3.786e-01) * s0_0_2;
	r1 += V4(2.277e-02, -1.156e-03, 3.730e-01, 6.373e-03) * s0_0_2;
	r2 += V4(-5.024e-03, -1.979e-01, -1.161e-02, 8.932e-03) * s0_0_2;
	r3 += V4(-2.793e-02, -1.626e-02, 4.579e-02, 8.925e-03) * s0_0_2;
	r4 += V4(1.482e-01, 8.768e-02, 1.237e-02, 4.043e-03) * s0_0_2;
	r5 += V4(9.174e-04, -6.317e-02, -8.497e-04, -8.910e-02) * s0_0_2;
	r0 += V4(3.606e-01, 5.171e-03, -8.040e-02, 3.018e-01) * s0_1_0;
	r1 += V4(3.213e-01, 3.799e-01, 8.183e-02, -7.920e-02) * s0_1_0;
	r2 += V4(9.088e-03, 2.158e-02, -4.616e-01, -3.791e-01) * s0_1_0;
	r3 += V4(3.854e-02, -1.810e-01, 1.164e-02, -2.476e-01) * s0_1_0;
	r4 += V4(3.199e-02, -1.547e-02, -2.031e-02, -1.596e-02) * s0_1_0;
	r5 += V4(2.707e-02, -4.053e-01, -6.626e-01, -1.837e-01) * s0_1_0;
	r0 += V4(-7.446e-02, -3.418e-03, 9.799e-02, -5.652e-02) * s0_1_1;
	r1 += V4(-4.193e-01, -2.301e-01, 3.546e-01, 4.327e-01) * s0_1_1;
	r2 += V4(-7.363e-01, -2.914e-01, -1.681e-01, 1.792e-01) * s0_1_1;
	r3 += V4(-6.320e-01, -6.994e-02, -7.161e-02, -4.860e-01) * s0_1_1;
	r4 += V4(-2.609e-01, -3.816e-02, -8.882e-02, -3.217e-01) * s0_1_1;
	r5 += V4(-3.682e-01, 4.780e-01, 2.669e-01, 4.578e-01) * s0_1_1;
	r0 += V4(1.369e-02, -1.390e-03, -1.433e-02, -2.550e-01) * s0_1_2;
	r1 += V4(1.333e-01, -3.145e-02, -3.578e-01, -6.662e-02) * s0_1_2;
	r2 += V4(2.763e-02, 2.785e-01, 4.374e-02, -3.216e-03) * s0_1_2;
	r3 += V4(3.207e-03, 2.486e-01, 2.065e-01, -1.161e-02) * s0_1_2;
	r4 += V4(-3.408e-01, -1.064e-01, -1.301e-02, -2.738e-01) * s0_1_2;
	r5 += V4(3.650e-02, 7.363e-02, 4.013e-02, -9.405e-02) * s0_1_2;
	r0 += V4(-7.811e-02, -5.334e-04, -6.374e-02, -2.920e-01) * s0_2_0;
	r1 += V4(2.388e-02, 3.447e-01, 7.664e-03, 2.956e-02) * s0_2_0;
	r2 += V4(-1.233e-02, -1.211e-01, 7.537e-03, -2.823e-01) * s0_2_0;
	r3 += V4(-8.750e-03, 5.040e-02, -8.021e-03, -1.591e-02) * s0_2_0;
	r4 += V4(5.669e-02, 3.348e-02, 2.158e-01, 3.905e-02) * s0_2_0;
	r5 += V4(6.728e-03, 3.097e-03, 1.253e-02, -3.802e-02) * s0_2_0;
	r0 += V4(-1.233e-02, 7.423e-04, 1.294e-01, 3.136e-01) * s0_2_1;
	r1 += V4(-4.406e-02, -4.767e-01, -1.963e-01, -8.936e-02) * s0_2_1;
	r2 += V4(7.478e-01, 3.120e-01, 5.957e-01, 4.997e-01) * s0_2_1;
	r3 += V4(-2.187e-02, -1.675e-01, 1.907e-02, -5.691e-06) * s0_2_1;
	r4 += V4(3.665e-01, 2.137e-01, 2.467e-01, 2.906e-01) * s0_2_1;
	r5 += V4(2.229e-02, 2.151e-03, -2.459e-02, 1.265e-02) * s0_2_1;
	r0 += V4(7.690e-03, -4.245e-04, -3.853e-02, -2.402e-02) * s0_2_2;
	r1 += V4(6.416e-03, 1.152e-02, 1.219e-01, 1.181e-02) * s0_2_2;
	r2 += V4(-2.761e-02, -1.763e-01, -1.541e-02, -2.009e-02) * s0_2_2;
	r3 += V4(1.776e-02, -1.032e-02, -4.828e-02, -1.727e-03) * s0_2_2;
	r4 += V4(6.356e-02, 7.078e-02, -5.429e-04, 2.651e-01) * s0_2_2;
	r5 += V4(4.976e-03, 1.053e-02, 2.176e-02, -2.588e-02) * s0_2_2;
	r0 += V4(-8.310e-03, 8.309e-06, -3.967e-06, -1.387e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(8.822e-03, 1.175e-02, 8.006e-03, 1.102e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(9.522e-03, 3.056e-03, -2.106e-04, 5.460e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
	r3 += V4(2.172e-02, 9.346e-03, -1.052e-01, 5.166e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r3));
	r4 += V4(-4.349e-03, 1.279e-02, 3.528e-03, 1.971e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r4));
	r5 += V4(1.994e-01, -3.079e-03, -1.294e-02, 2.774e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r5));
}

//!DESC [CuNNy_4x24_vk] -conv1
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0404FFF5, 0xD7131603, 0x120CE4FF, 0xE2311601);
	r1 = D(r1, s0_0_0, 0x0016FF1A, 0x0FE904F6, 0x0EE501F7, 0x23D8F8F2);
	r2 = D(r2, s0_0_0, 0x03EEFFFE, 0x1F100003, 0xDF34F60A, 0x04F0FD1F);
	r3 = D(r3, s0_0_0, 0xF7E80400, 0x00EA03F1, 0xEE01FEFD, 0xECCF0603);
	r4 = D(r4, s0_0_0, 0x06F6FF07, 0x1DDD0DE2, 0xE4E709E8, 0x05FE0C0B);
	r5 = D(r5, s0_0_0, 0x12F903E3, 0x040F050F, 0xFA09FF01, 0xFEF80D0A);
	r0 = D(r0, s0_0_1, 0xFEF801FA, 0xCE181F3D, 0x36F600EA, 0xE51B0B25);
	r1 = D(r1, s0_0_1, 0xFC0C043F, 0x000B03E0, 0xF72AF802, 0x14E9034B);
	r2 = D(r2, s0_0_1, 0xF008FFE7, 0x08F8F60C, 0x09F5FF19, 0x1104ED0F);
	r3 = D(r3, s0_0_1, 0x1629FA06, 0x0D19F3F4, 0xFB21F703, 0x2119E707);
	r4 = D(r4, s0_0_1, 0x1202F815, 0x1725FFE9, 0xD2FE150A, 0x0E341D27);
	r5 = D(r5, s0_0_1, 0x1A02FE24, 0x061A0EF9, 0xFEF605FE, 0xF31408F1);
	r0 = D(r0, s0_0_2, 0x01ED03FD, 0x25F01E1F, 0xFFE7FDC3, 0x01EE120F);
	r1 = D(r1, s0_0_2, 0x041F0A51, 0x09011102, 0x16F4011E, 0x0310FBF0);
	r2 = D(r2, s0_0_2, 0xD40F00F6, 0xDAF7E609, 0xDF30E77F, 0x08F6FCF2);
	r3 = D(r3, s0_0_2, 0xFEED00FD, 0x03080401, 0xF5EEF3DE, 0xF526EF1A);
	r4 = D(r4, s0_0_2, 0xFDFCF9DD, 0x060307F0, 0x0D030930, 0x030211ED);
	r5 = D(r5, s0_0_2, 0xFAF7F8D3, 0x0D040AEE, 0xFAF1040E, 0xFC00FF06);
	r0 = D(r0, s0_1_0, 0xFAF1FEF3, 0xF514F90B, 0xFB25021B, 0x19D0D7C9);
	r1 = D(r1, s0_1_0, 0xFA06F01B, 0x230BF6F1, 0xEB010BFD, 0x22F103ED);
	r2 = D(r2, s0_1_0, 0x09F10705, 0xECF72408, 0xFBCCF5F3, 0x01E3FCFC);
	r3 = D(r3, s0_1_0, 0x0FFE04EF, 0xF504FD10, 0x05F9FBF0, 0x12DCFCF8);
	r4 = D(r4, s0_1_0, 0x21040810, 0x11130DFA, 0xF81BF8F3, 0x5408EF04);
	r5 = D(r5, s0_1_0, 0x07ED08DC, 0x07FEFCE2, 0xF00308FB, 0x1F110310);
	r0 = D(r0, s0_1_1, 0x051D02FE, 0xDEFD8113, 0x02042E37, 0x1BF4F522);
	r1 = D(r1, s0_1_1, 0x36C2B9F5, 0x4F240AE5, 0xCF0A1EFA, 0x1BFE1829);
	r2 = D(r2, s0_1_1, 0x081114F8, 0xE70933F1, 0x311AE5DA, 0xFB1DFFF9);
	r3 = D(r3, s0_1_1, 0xFB0F25FB, 0x13F1E0DE, 0xCC0228FB, 0x1D21C2EB);
	r4 = D(r4, s0_1_1, 0x1504302A, 0xF1F6190C, 0x07FF81E1, 0x0405F8E4);
	r5 = D(r5, s0_1_1, 0x26021D28, 0x150B1F03, 0x1905FEEB, 0xFBF601E8);
	r0 = D(r0, s0_1_2, 0x08FF10E4, 0x09F6C5F8, 0xFAC457FA, 0xFD02F5E7);
	r1 = D(r1, s0_1_2, 0x0FFAB2E1, 0x16E80824, 0xF1E700FC, 0x0CFEF3F3);
	r2 = D(r2, s0_1_2, 0x1E0CFA19, 0xEF02D4E8, 0x0818E3CF, 0xFB1702ED);
	r3 = D(r3, s0_1_2, 0xEC011934, 0xFFE7CE38, 0xE528152A, 0x08FDBF2F);
	r4 = D(r4, s0_1_2, 0x0B091EE5, 0xE7DC5DF1, 0x0DEF810B, 0xE1FE1FF9);
	r5 = D(r5, s0_1_2, 0xFBF1390A, 0x12F11112, 0xFC1FE112, 0xFD08D70B);
	r0 = D(r0, s0_2_0, 0x04FFFC00, 0x42ED0CEA, 0xF908F2F3, 0x0FE514ED);
	r1 = D(r1, s0_2_0, 0xEE0E070A, 0x1DFE0F09, 0xF208F006, 0x0023FEFE);
	r2 = D(r2, s0_2_0, 0xF61105F8, 0x1707E10A, 0x0BD9E0F2, 0xF819E007);
	r3 = D(r3, s0_2_0, 0xFDF5FBF2, 0x021E0100, 0xF90B0A14, 0xE8133DF9);
	r4 = D(r4, s0_2_0, 0x00E70AF2, 0x0503FC11, 0x01F4F0F7, 0xFCD03B29);
	r5 = D(r5, s0_2_0, 0xF8E028F8, 0xF024EC04, 0x03EF0106, 0xD724EC02);
	r0 = D(r0, s0_2_1, 0x021B0124, 0xFAF8A9E4, 0xF91EB60F, 0x01F71B0D);
	r1 = D(r1, s0_2_1, 0x210F17E8, 0xF51837F7, 0x0426C118, 0x0CF6B1F4);
	r2 = D(r2, s0_2_1, 0x13EB08F2, 0xE9F75D02, 0xFEE83FDF, 0xE404A61D);
	r3 = D(r3, s0_2_1, 0x00FF0215, 0xFAE481F1, 0xF9E606E2, 0xF0E77FD7);
	r4 = D(r4, s0_2_1, 0x0DFF67EF, 0x25268103, 0xFF1281E8, 0xFCF722E2);
	r5 = D(r5, s0_2_1, 0x0D03C310, 0xF1F219FD, 0x050AF516, 0x30F6C6F3);
	r0 = D(r0, s0_2_2, 0xFFF51720, 0x22F7E7D0, 0x04F5EFF0, 0xF11AC4EA);
	r1 = D(r1, s0_2_2, 0xFDDE32C3, 0x02E4052E, 0x02FFCA10, 0xEF14E928);
	r2 = D(r2, s0_2_2, 0xFEEC2013, 0xF80B06D6, 0xF2F33638, 0x03E2DEFE);
	r3 = D(r3, s0_2_2, 0x070408FB, 0x091A8810, 0xE508CF27, 0x0D04F2D9);
	r4 = D(r4, s0_2_2, 0x0BEF1407, 0xFA1094EF, 0x1FFA8107, 0xE60ED7F1);
	r5 = D(r5, s0_2_2, 0xEC41A329, 0x04E70202, 0x05EA5CE5, 0xF9D89A10);
	r0 = D(r0, s1_0_0, 0xF7FE0506, 0x170F13E0, 0xFC0EE909, 0x2E13111E);
	r1 = D(r1, s1_0_0, 0x18020212, 0x020AFC05, 0xF90A0DFC, 0x2C14E90A);
	r2 = D(r2, s1_0_0, 0xEDF806EF, 0xFC1AF3D8, 0xF50C26F4, 0x10F8E10D);
	r3 = D(r3, s1_0_0, 0xE400F3F8, 0xFEFB0617, 0xFF15020C, 0xE923E006);
	r4 = D(r4, s1_0_0, 0xF710F4EE, 0xFAFB18F7, 0xE4181303, 0xFA33EFF9);
	r5 = D(r5, s1_0_0, 0xF813E2F8, 0x18130CFE, 0xE6F20001, 0xF300F9E8);
	r0 = D(r0, s1_0_1, 0x04FF1001, 0x03058C0B, 0xD8C2BF07, 0xEF02C909);
	r1 = D(r1, s1_0_1, 0x15120918, 0x0CFC2BDC, 0xF703E5F6, 0xEB261D1F);
	r2 = D(r2, s1_0_1, 0x04F1FAFB, 0x21E7EE24, 0x5410F11A, 0x09FAE22D);
	r3 = D(r3, s1_0_1, 0xF7FBEB08, 0x0001A30A, 0x0604E0F4, 0xEAF5810B);
	r4 = D(r4, s1_0_1, 0x1309EBEE, 0x07090A0D, 0x020CFA0A, 0xECFFE6EF);
	r5 = D(r5, s1_0_1, 0xE2FCD9FD, 0xF3EDFDD9, 0x16131205, 0x02040522);
	r0 = D(r0, s1_0_2, 0xE200E800, 0xDF0006F0, 0x0C0BDB19, 0x0B110E0B);
	r1 = D(r1, s1_0_2, 0xDA050F2B, 0x0D0106F3, 0xF0FDFE21, 0xF8EE0DF3);
	r2 = D(r2, s1_0_2, 0x050E560F, 0x041E3121, 0x0D1ADB28, 0x13091708);
	r3 = D(r3, s1_0_2, 0x0E01E90D, 0x03043B07, 0x0EFE1D1C, 0x0FFF430E);
	r4 = D(r4, s1_0_2, 0x1104FEF0, 0x1200D6E3, 0x120D81E1, 0xF9F6C40C);
	r5 = D(r5, s1_0_2, 0x22040BDD, 0x0EF30908, 0x0002BC01, 0xECF90100);
	r0 = D(r0, s1_1_0, 0xFA0F0103, 0xFE0BD5F1, 0x00BE05F0, 0xD8A40AED);
	r1 = D(r1, s1_1_0, 0xDE18F6EC, 0xDA0AEE1C, 0x2E031B07, 0x0A29181B);
	r2 = D(r2, s1_1_0, 0x01FF0CE3, 0xD5EC1931, 0xE22816F3, 0xFA242433);
	r3 = D(r3, s1_1_0, 0xD1021224, 0xF721F0F5, 0xF5F8F8E0, 0xECD7E504);
	r4 = D(r4, s1_1_0, 0x302B0E0D, 0xDE0AF3D2, 0xE80718E2, 0xEA27CFC1);
	r5 = D(r5, s1_1_0, 0xF933EF1F, 0xF3E91B2F, 0xF4FE04EC, 0x283B1DFB);
	r0 = D(r0, s1_1_1, 0xC6E6EFFA, 0xFECAEBD7, 0x0BF53114, 0x160CE6DD);
	r1 = D(r1, s1_1_1, 0xDD2100F9, 0x03C9F91E, 0x03171D22, 0x06FEE006);
	r2 = D(r2, s1_1_1, 0x10FA0000, 0x07E206DD, 0xE7FBFC07, 0x080ABDB0);
	r3 = D(r3, s1_1_1, 0x7F10F7F0, 0x2A14B2E0, 0x0CF30D22, 0x16FABBB0);
	r4 = D(r4, s1_1_1, 0xB80A081A, 0xE102181B, 0x000722DF, 0x33ECCAE0);
	r5 = D(r5, s1_1_1, 0x3AF129F2, 0x4EF603FB, 0xE0D5F716, 0x253D2E02);
	r0 = D(r0, s1_1_2, 0x0EFAF8FA, 0x00E8F50C, 0xF20C0E0A, 0xEFFD3919);
	r1 = D(r1, s1_1_2, 0x07F7E8E7, 0xC1F9CE0E, 0xDE18440A, 0xE4F40B14);
	r2 = D(r2, s1_1_2, 0x08D9275D, 0x0716FA1C, 0xFCFED3FF, 0xE40D01F6);
	r3 = D(r3, s1_1_2, 0x010FFDF2, 0xEF0E32E2, 0x0BFEF609, 0x25FCE1ED);
	r4 = D(r4, s1_1_2, 0xFA00E7F6, 0xF5082AFC, 0x1409CFE2, 0x16F24A18);
	r5 = D(r5, s1_1_2, 0xCAFD4313, 0xDBFFFC01, 0x2E0CCAE3, 0xEEF7E31F);
	r0 = D(r0, s1_2_0, 0xF30304FD, 0x141E1C11, 0x06160DC6, 0x1303060C);
	r1 = D(r1, s1_2_0, 0x1AE8FE20, 0xFFFA13F3, 0x15DCF8FF, 0x2224F803);
	r2 = D(r2, s1_2_0, 0x050401F6, 0x00FDFCD0, 0xF6050BD7, 0xEF41ECFB);
	r3 = D(r3, s1_2_0, 0xFEF6FD04, 0x220706FD, 0xFDDFFE16, 0xEB23EB1F);
	r4 = D(r4, s1_2_0, 0xFAFC03F1, 0xFAE90FEB, 0x0DF9FE07, 0xF20E0730);
	r5 = D(r5, s1_2_0, 0xFCDE031D, 0xDBFBFFFE, 0xEFF30AE9, 0xF5CE07E2);
	r0 = D(r0, s1_2_1, 0x3901FC03, 0x01F90E0F, 0xFE0ADD15, 0xE7CF0F08);
	r1 = D(r1, s1_2_1, 0xF7F10FE5, 0x370AF61D, 0x23F10BED, 0x03FDFFDC);
	r2 = D(r2, s1_2_1, 0xFEFDFCEC, 0xFD0DF9F9, 0x0CFE090E, 0x1E1DEDD0);
	r3 = D(r3, s1_2_1, 0x03020BEC, 0xFDD8FF11, 0xF30109F3, 0x16220E00);
	r4 = D(r4, s1_2_1, 0x150FF5F5, 0x16FE110B, 0x07EAF301, 0xF2DB222D);
	r5 = D(r5, s1_2_1, 0xF630E217, 0xDF02F6E0, 0x0F0F10EE, 0xF10B1402);
	r0 = D(r0, s1_2_2, 0x17FAFD03, 0xFB031C15, 0x1D0D0210, 0x0716F3EB);
	r1 = D(r1, s1_2_2, 0xF00107EB, 0x1C0CFC0C, 0xEDFCFDE7, 0x01FF0301);
	r2 = D(r2, s1_2_2, 0x0B00F6DD, 0x0BF907F3, 0xDDFB03FA, 0xDB000810);
	r3 = D(r3, s1_2_2, 0xFB050704, 0x08081027, 0xF0EF10F7, 0x01081315);
	r4 = D(r4, s1_2_2, 0xEC00020C, 0x0AE5FDEE, 0xE919FC2F, 0x1207EA06);
	r5 = D(r5, s1_2_2, 0x0C10E3E7, 0x09F5160B, 0xF8EA0CEE, 0xF7DFE912);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE02FA00, 0x01F7D4F5, 0xF1DF32BE, 0xF417EE81);
	r1 = D(r1, s0_0_0, 0xE70AF025, 0x0EFF150B, 0x05080013, 0x06E3162A);
	r2 = D(r2, s0_0_0, 0xF6FF0C04, 0x072A0E45, 0xDA0CE8CD, 0xD14BD7EE);
	r3 = D(r3, s0_0_0, 0x0A0BF50F, 0x0FFB01F9, 0xF216DC1B, 0xF4FDD70B);
	r4 = D(r4, s0_0_0, 0x02060E00, 0xF3EE14DC, 0xEF3004E6, 0xF92AFFF0);
	r5 = D(r5, s0_0_0, 0xF3041D10, 0x00F5DC0A, 0xF8000811, 0xF40DFBE4);
	r0 = D(r0, s0_0_1, 0xE50CEC06, 0xC781D9E4, 0xB2FDD66A, 0xFAC90A74);
	r1 = D(r1, s0_0_1, 0x090500F8, 0x18D6FDEA, 0xE024FA12, 0xE8A4F613);
	r2 = D(r2, s0_0_1, 0x15D210F5, 0x2C0EE91A, 0xF4200850, 0xED12DFF5);
	r3 = D(r3, s0_0_1, 0x0C21061E, 0x04B9FE13, 0xF70B04F3, 0x3DF52100);
	r4 = D(r4, s0_0_1, 0x020FF3F9, 0xD705C8E3, 0x05D516C3, 0x0ECEFE10);
	r5 = D(r5, s0_0_1, 0xF8F01105, 0x0000240D, 0xFDE6ED13, 0xE809E529);
	r0 = D(r0, s0_0_2, 0x0604FEF1, 0xD0814015, 0xC41FED08, 0x0C200611);
	r1 = D(r1, s0_0_2, 0x20EA2815, 0x35F90BF3, 0xF61C07EF, 0xEE0F0BF1);
	r2 = D(r2, s0_0_2, 0xD1F5F80C, 0xCD33DEF1, 0x0728E708, 0xEB0DFB0B);
	r3 = D(r3, s0_0_2, 0x03FC02EF, 0xCDD80C0F, 0xF429F906, 0xD7DCF727);
	r4 = D(r4, s0_0_2, 0xF30BFE0D, 0xD00511DC, 0x0E0E1522, 0x080A06CF);
	r5 = D(r5, s0_0_2, 0x9F02F7F8, 0x070EFE0C, 0x331A0DBB, 0x02F5F0CE);
	r0 = D(r0, s0_1_0, 0x0BF3FA01, 0x220A15EE, 0x0BFA01BB, 0xF51A0CDE);
	r1 = D(r1, s0_1_0, 0x01140D02, 0x0015D1F8, 0xF8F4FED9, 0xECFCF81D);
	r2 = D(r2, s0_1_0, 0xFF000817, 0x14E502E9, 0xF51B0DF8, 0xD21605E6);
	r3 = D(r3, s0_1_0, 0xEA0E15F5, 0x0905F300, 0x010E220A, 0xFEF933E2);
	r4 = D(r4, s0_1_0, 0xEB080225, 0x17F6DCDC, 0xE40FE2FC, 0x28F8170A);
	r5 = D(r5, s0_1_0, 0xE409E550, 0x18FEE7F2, 0x0501FDE6, 0x13F60015);
	r0 = D(r0, s0_1_1, 0x07160D6F, 0xCEF5E627, 0xB3A2E042, 0x3905F9F0);
	r1 = D(r1, s0_1_1, 0x25F9FE0D, 0x04E4FF3D, 0x2036FA57, 0x37D512F7);
	r2 = D(r2, s0_1_1, 0xE903F3FE, 0x1D151E22, 0xB13C151C, 0x13E92238);
	r3 = D(r3, s0_1_1, 0xE1EA2F02, 0x1EEBFC81, 0x0F05292D, 0x1BD724BE);
	r4 = D(r4, s0_1_1, 0xFAFB29D5, 0xEFD429CB, 0xE6E535F0, 0x132F19E5);
	r5 = D(r5, s0_1_1, 0xC715F4A6, 0x07EEFAB6, 0x01F31321, 0x060ECBE7);
	r0 = D(r0, s0_1_2, 0xF5E80BE3, 0x16080EF8, 0xB3F90722, 0xEDFBF6FA);
	r1 = D(r1, s0_1_2, 0x344310EC, 0x26C7FDE3, 0xEBF003EE, 0x07F0F302);
	r2 = D(r2, s0_1_2, 0xBB161515, 0x061007EF, 0x070F0B06, 0x94191519);
	r3 = D(r3, s0_1_2, 0x0EE3EA15, 0x81810D13, 0x3E36F7ED, 0x29F6FC22);
	r4 = D(r4, s0_1_2, 0xF911FD11, 0xE1C2F930, 0x051D11FC, 0xE1E51605);
	r5 = D(r5, s0_1_2, 0x81C20AFC, 0x191718FF, 0x6020F8D1, 0x140E1B08);
	r0 = D(r0, s0_2_0, 0xF80707F4, 0xE7051411, 0x08E627F3, 0xFF0DE811);
	r1 = D(r1, s0_2_0, 0x0B01F2F3, 0x00F9F0DD, 0xF9100C09, 0x13F1FEEF);
	r2 = D(r2, s0_2_0, 0x0AFCF300, 0xF717E7ED, 0xF00E0512, 0xF612FFFD);
	r3 = D(r3, s0_2_0, 0xFC0CFEEF, 0xFCFE0507, 0xF00BF308, 0x07FDF2E9);
	r4 = D(r4, s0_2_0, 0x04FD0601, 0xEE071309, 0xFB15E70C, 0xF508E10A);
	r5 = D(r5, s0_2_0, 0x06F005F0, 0x16F2EAF6, 0xFDFA130A, 0x0EF70E08);
	r0 = D(r0, s0_2_1, 0xFA0209EC, 0x0DEAF30C, 0x2ED404E9, 0x03F40D19);
	r1 = D(r1, s0_2_1, 0xD10B0E19, 0x12F6F6D3, 0x030F1CFF, 0xFDFE11EE);
	r2 = D(r2, s0_2_1, 0x12EDF8FE, 0xFC0D0CE6, 0x0BF806FC, 0x0EF90CF0);
	r3 = D(r3, s0_2_1, 0xE0091808, 0x02F60D12, 0xF70AFCF7, 0xFCFFE4FB);
	r4 = D(r4, s0_2_1, 0x0EFEFEF9, 0xF9FC0E19, 0xFCFE0719, 0xD924F013);
	r5 = D(r5, s0_2_1, 0x09F108F5, 0x1AEA0500, 0xFDFDF108, 0xF2FB1609);
	r0 = D(r0, s0_2_2, 0x0A060FFD, 0xF3F61109, 0x14CF091B, 0x1001F2FD);
	r1 = D(r1, s0_2_2, 0x07FFF9FC, 0x20DA0AFA, 0xF4110B09, 0xFB0BFAF3);
	r2 = D(r2, s0_2_2, 0x1AE8FE07, 0xFBF501E6, 0xF9FD10FA, 0xDA132301);
	r3 = D(r3, s0_2_2, 0xF406F60E, 0x03E8080A, 0xF014EEFC, 0xEBF20918);
	r4 = D(r4, s0_2_2, 0xFFF40303, 0xF40100F5, 0xEF15FC0F, 0x1DFDEAFD);
	r5 = D(r5, s0_2_2, 0x17D7E303, 0xF6090C02, 0x01F0F111, 0xFB1512EE);
	r0 = D(r0, s1_0_0, 0x03F9FF01, 0xF7F9E101, 0xE8ECF4F2, 0x1404EFE5);
	r1 = D(r1, s1_0_0, 0xF111F61E, 0xF0DBF514, 0x02ED0304, 0xE718ED14);
	r2 = D(r2, s1_0_0, 0x06E8FE02, 0x14F1E6E1, 0x0A1F07F2, 0x0B07EF05);
	r3 = D(r3, s1_0_0, 0x09D20302, 0x00E4F004, 0x07E202FC, 0xF505040D);
	r4 = D(r4, s1_0_0, 0x0301FC03, 0x0402F0FE, 0x060DEF06, 0x040926F0);
	r5 = D(r5, s1_0_0, 0xEF1B030B, 0xFD180D06, 0x000E03F8, 0x03FEE603);
	r0 = D(r0, s1_0_1, 0xFC030604, 0xF6050F00, 0xEF21020C, 0xF209E507);
	r1 = D(r1, s1_0_1, 0xE3E8E814, 0xFA0206E2, 0x0B0D01FA, 0xFAFF0602);
	r2 = D(r2, s1_0_1, 0xEEFD080B, 0x1621E6EE, 0xF1DEF927, 0xF0030F13);
	r3 = D(r3, s1_0_1, 0xFB220111, 0xF0021604, 0xEEFBFD03, 0xEADD08FF);
	r4 = D(r4, s1_0_1, 0xFD23F908, 0x12EE30FF, 0x11F4F603, 0x1406EAF2);
	r5 = D(r5, s1_0_1, 0x10E507F5, 0xEC01F90D, 0x01DEFE09, 0x020F0A04);
	r0 = D(r0, s1_0_2, 0xF7FAFE0B, 0xF40AF610, 0xEBFD1410, 0xF8FBF81D);
	r1 = D(r1, s1_0_2, 0xF517BA11, 0x030C00FC, 0x06FCEC0F, 0x03F7FAEC);
	r2 = D(r2, s1_0_2, 0xF4F81805, 0x07EB17DD, 0xEE03EA0C, 0x03FCFF06);
	r3 = D(r3, s1_0_2, 0xFAFB0804, 0xF80BEA00, 0x09FC00F6, 0x011CDBF3);
	r4 = D(r4, s1_0_2, 0x02FE0600, 0x0028FCFB, 0x04110A01, 0x040612FA);
	r5 = D(r5, s1_0_2, 0x110B14E4, 0x1801FEFE, 0x0217FCF9, 0xFD0F15FF);
	r0 = D(r0, s1_1_0, 0x02F5FA0C, 0xFA0C350C, 0xC53ED810, 0x21071444);
	r1 = D(r1, s1_1_0, 0x03BB0BE4, 0x000B071B, 0xF31706FD, 0x0248FCE4);
	r2 = D(r2, s1_1_0, 0xF90D0C17, 0x032D30FA, 0xF9F4FB31, 0xEF1B2909);
	r3 = D(r3, s1_1_0, 0xF12336DA, 0xFF531420, 0xFA1EF908, 0x230C30FE);
	r4 = D(r4, s1_1_0, 0x06E6F302, 0x04EA01F7, 0x2FC9FE0E, 0x2B30E920);
	r5 = D(r5, s1_1_0, 0x1CFCD9E6, 0xF4ED0101, 0x04E8F6FB, 0x02E7EB07);
	r0 = D(r0, s1_1_1, 0xED020AFD, 0xB6E7FAB6, 0xB4FDE49D, 0x16DE0381);
	r1 = D(r1, s1_1_1, 0x143D0909, 0xF8FA0D10, 0xD3FFF9F7, 0x1905FD3F);
	r2 = D(r2, s1_1_1, 0x0930EA17, 0x3B02FA1F, 0x0426CDF9, 0xFBEE03F5);
	r3 = D(r3, s1_1_1, 0x27F9EA04, 0x97E00FE4, 0x2611F417, 0x5BFF0CFE);
	r4 = D(r4, s1_1_1, 0x28FE0021, 0x1228F2DE, 0x81F32DFD, 0xE9ECF2E2);
	r5 = D(r5, s1_1_1, 0x2EFC07F4, 0xE00010F8, 0xFB1F2CEF, 0xFBECDFFA);
	r0 = D(r0, s1_1_2, 0x0A010B0E, 0x0009F32B, 0xECF5EC21, 0xE1FEFFF7);
	r1 = D(r1, s1_1_2, 0xF822FFCD, 0xE901FF09, 0x30FF05E5, 0x10F1FFE2);
	r2 = D(r2, s1_1_2, 0xE0E5C8FB, 0xFB090105, 0xFEE9F7FA, 0x0012F502);
	r3 = D(r3, s1_1_2, 0x070100F3, 0xC8FE0FFD, 0xFBF80AF4, 0xE5FDECDB);
	r4 = D(r4, s1_1_2, 0x01FA01FF, 0xE5071E0B, 0x0801E82B, 0x01EEFF09);
	r5 = D(r5, s1_1_2, 0x0A05FCD2, 0xF600FB03, 0x06EC2100, 0xF7F2E905);
	r0 = D(r0, s1_2_0, 0x111EFB1B, 0x16FAE310, 0x0AFC1630, 0x1A19FE11);
	r1 = D(r1, s1_2_0, 0xD2D6230C, 0xDE1EE031, 0x08FD131D, 0x01EE0CEA);
	r2 = D(r2, s1_2_0, 0xFF00FCF3, 0x0AD5FA27, 0xFA18F9F2, 0x3CF6F911);
	r3 = D(r3, s1_2_0, 0x02F5FAFB, 0xEDEE08FD, 0x0EF40C14, 0xD4EC112D);
	r4 = D(r4, s1_2_0, 0xDDF9FCE3, 0xEAF107F2, 0xF9220ADB, 0x0BEED903);
	r5 = D(r5, s1_2_0, 0x1319F3F0, 0xE52710E6, 0x0E130210, 0xF4FB29D0);
	r0 = D(r0, s1_2_1, 0x81F7E181, 0x11F0EFF4, 0xD7E400D9, 0xF3F30B05);
	r1 = D(r1, s1_2_1, 0xE125F227, 0xC009EE81, 0xE00BFEF2, 0x33EBEBE7);
	r2 = D(r2, s1_2_1, 0x09F40002, 0xEC05032A, 0x1AF6F4EC, 0x160303D1);
	r3 = D(r3, s1_2_1, 0x1B15F722, 0x120F0423, 0x0AF7F534, 0x1C0CE21E);
	r4 = D(r4, s1_2_1, 0x11130215, 0x2AF33BE8, 0x0B00FDE3, 0xF4E5EE2E);
	r5 = D(r5, s1_2_1, 0x2BF10044, 0x49E40343, 0x0403D9EA, 0x23251745);
	r0 = D(r0, s1_2_2, 0xC006F316, 0xF2080F03, 0xFEF315F4, 0x01030A04);
	r1 = D(r1, s1_2_2, 0xE1080F01, 0xA000ED42, 0x14E5FAF7, 0xF9EBFF07);
	r2 = D(r2, s1_2_2, 0xF10B0F0D, 0x25EC05E8, 0x17ED02F7, 0xF8F6FAEF);
	r3 = D(r3, s1_2_2, 0x15EF06F7, 0x1FEFE1C8, 0x1206F7EB, 0xFA070BDB);
	r4 = D(r4, s1_2_2, 0x07F500FC, 0xF90AF9D5, 0x21170013, 0xEC0B13F6);
	r5 = D(r5, s1_2_2, 0xDAF2140C, 0x26F402F1, 0xE3EB1B19, 0x5C0BDACB);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF601F402, 0x1F21FC0B, 0x251617FF, 0xE0F7043D);
	r1 = D(r1, s0_0_0, 0xEDF20FFC, 0xD7FF06F4, 0x03FAFDE5, 0x21FFEF20);
	r2 = D(r2, s0_0_0, 0x05020AFA, 0xE511F7CB, 0xFB0F1E2E, 0x17F3FFEE);
	r3 = D(r3, s0_0_0, 0xFE040FF8, 0x31FD1CF1, 0xDAFCF205, 0xEF0BFC08);
	r4 = D(r4, s0_0_0, 0x16FEF5FA, 0x2B081207, 0x200DE3E2, 0xF603F62C);
	r5 = D(r5, s0_0_0, 0x0400EE16, 0x0F0E0DCD, 0xED04F5FF, 0x1DF4F0F0);
	r0 = D(r0, s0_0_1, 0x0307FF01, 0xC8BB255E, 0x19FF0AC7, 0x2A1D16E0);
	r1 = D(r1, s0_0_1, 0x00E3D91A, 0xEFE929FD, 0x0518FDEF, 0x00FCC0CF);
	r2 = D(r2, s0_0_1, 0xE8F51B1F, 0x02D90300, 0xF9CBFB02, 0x100AEAEF);
	r3 = D(r3, s0_0_1, 0x11FEFA03, 0x14F8E605, 0xE802EC15, 0xF7D6E7FF);
	r4 = D(r4, s0_0_1, 0xFFF7F5F6, 0x48E32100, 0x0B0254F1, 0x26F508FF);
	r5 = D(r5, s0_0_1, 0x0101E81F, 0x0C020AE3, 0x2B06EE02, 0x0303011A);
	r0 = D(r0, s0_0_2, 0xF2FF0C06, 0x060A0311, 0xF7E4DC10, 0x1FFDF6F2);
	r1 = D(r1, s0_0_2, 0x23021BE8, 0xEC04FD01, 0x1BF7EDFD, 0x1114140A);
	r2 = D(r2, s0_0_2, 0xFEFB11FD, 0xFAF7E803, 0x07EB03DF, 0x08F802F5);
	r3 = D(r3, s0_0_2, 0x0AEE0304, 0x1312FF0C, 0xF1F81FE2, 0x1520ED0B);
	r4 = D(r4, s0_0_2, 0xFBF70400, 0xF70F11F5, 0x16ECF919, 0xE5220E0B);
	r5 = D(r5, s0_0_2, 0xFA050016, 0xFAF90CEB, 0xF5020E07, 0x0216FE2A);
	r0 = D(r0, s0_1_0, 0x2FEE02EE, 0xCC0DFB1A, 0x060CC432, 0x0DF40D24);
	r1 = D(r1, s0_1_0, 0xFA2C28D6, 0x0C01E5F7, 0x07F90907, 0xFE0E0CF1);
	r2 = D(r2, s0_1_0, 0xF1FF0CFF, 0xDCF3FC12, 0xCBF4E719, 0xDEFDE72F);
	r3 = D(r3, s0_1_0, 0x1DF8E1F2, 0xDA100929, 0x03FF0DD9, 0x86022754);
	r4 = D(r4, s0_1_0, 0xE80EEC08, 0x0D12DD21, 0x170F09F1, 0x2AF319CA);
	r5 = D(r5, s0_1_0, 0x04E2FFFD, 0x99200908, 0xF9060E01, 0xE416F9FA);
	r0 = D(r0, s0_1_1, 0x531924EF, 0x16C7F106, 0x07E23F01, 0xF5F51107);
	r1 = D(r1, s0_1_1, 0xFB09F305, 0x3208FC0A, 0x1E330A0E, 0x18D7ECFC);
	r2 = D(r2, s0_1_1, 0xF3FBF824, 0xEDF70EED, 0xEEED16CB, 0xEC2121E5);
	r3 = D(r3, s0_1_1, 0x19090ECD, 0xCBDCF312, 0xF0F9EE0A, 0xCE8AE62E);
	r4 = D(r4, s0_1_1, 0xF9FEF7F5, 0x2A14E445, 0x122CF213, 0x02EDFD08);
	r5 = D(r5, s0_1_1, 0x2418F5EB, 0xBF07DEF2, 0xEF020D12, 0xFCD92109);
	r0 = D(r0, s0_1_2, 0xFFF5F0F2, 0xF9DD0819, 0x08D10C19, 0x0A1CEB0A);
	r1 = D(r1, s0_1_2, 0xF7DB1209, 0xFE20E6F7, 0xFFF402FB, 0xFEDB34F7);
	r2 = D(r2, s0_1_2, 0xEFE806E6, 0x03F8130A, 0x00DC0FF9, 0xF90FFAF3);
	r3 = D(r3, s0_1_2, 0xF9ECED18, 0xF0F63304, 0x0400F204, 0x022333F4);
	r4 = D(r4, s0_1_2, 0x03F303FC, 0x012CF804, 0xF3E3FB1C, 0xD431FC16);
	r5 = D(r5, s0_1_2, 0xFC242721, 0x041FEAF0, 0x14DA0306, 0x3CE5020C);
	r0 = D(r0, s0_2_0, 0xE9F80D2E, 0x0110E5E5, 0x1C181123, 0xF4F7E1FC);
	r1 = D(r1, s0_2_0, 0xFDFC0019, 0xF2F50D4A, 0xF50FF7EC, 0x01F63819);
	r2 = D(r2, s0_2_0, 0x0A040CFD, 0xFD01E1E6, 0x05FCDBE8, 0x14000007);
	r3 = D(r3, s0_2_0, 0xFC01FA01, 0x0104F108, 0x14E8F7F4, 0x3D2BEBF5);
	r4 = D(r4, s0_2_0, 0xF60FFDFB, 0xEBF712FE, 0xD8FEE011, 0xCB06F9FE);
	r5 = D(r5, s0_2_0, 0x03081138, 0x2F0B1AD9, 0xF400F404, 0xE8FBFD08);
	r0 = D(r0, s0_2_1, 0xD910FC1B, 0x090BF2EE, 0x00022507, 0x170406D8);
	r1 = D(r1, s0_2_1, 0xF708C3D0, 0x11001719, 0xEE030DEF, 0x0008F7FB);
	r2 = D(r2, s0_2_1, 0x0F05D00C, 0x4C19DFFF, 0x020013FD, 0xFD07F703);
	r3 = D(r3, s0_2_1, 0xE51109FE, 0x00FDE500, 0x13F804ED, 0xFAD5EF1D);
	r4 = D(r4, s0_2_1, 0x02FA0A07, 0xFBFB1AED, 0xF71201E9, 0xF1FF020C);
	r5 = D(r5, s0_2_1, 0x3AE3F6E5, 0x0EF3F8FD, 0xEC100B0F, 0xF30BFD1F);
	r0 = D(r0, s0_2_2, 0x05170500, 0x1813F5FD, 0xE915ECFF, 0x0EF9FCF7);
	r1 = D(r1, s0_2_2, 0x150B1001, 0xF626F3FD, 0x0EF805F2, 0x010AEA07);
	r2 = D(r2, s0_2_2, 0x0016FC00, 0x02FE0A07, 0xF4F91713, 0x04030FFB);
	r3 = D(r3, s0_2_2, 0x01060700, 0x0DF4F60D, 0x0AEFF2FA, 0xE7D8100E);
	r4 = D(r4, s0_2_2, 0xF7F41605, 0xF91724F5, 0xFAE10108, 0x041110DA);
	r5 = D(r5, s0_2_2, 0xEF43F3FB, 0x02E10503, 0x0EFD07EF, 0xEFFC0F17);
	r0 = D(r0, s1_0_0, 0x0400000D, 0x1AFE0006, 0xF424181F, 0x07F4CA30);
	r1 = D(r1, s1_0_0, 0x140AF5F8, 0x00FF100F, 0xEEF80B01, 0xDC10147F);
	r2 = D(r2, s1_0_0, 0x08FC02FB, 0x13EEFC1F, 0x33FDEC49, 0x05FF0604);
	r3 = D(r3, s1_0_0, 0xF5FAFCF6, 0xDD0103FD, 0x0900F312, 0x060D1C1A);
	r4 = D(r4, s1_0_0, 0x09FF0505, 0x0A0201DC, 0xDE0214FE, 0xED020C10);
	r5 = D(r5, s1_0_0, 0x1C090B06, 0x00040C1D, 0x050200F4, 0x15FCF7D7);
	r0 = D(r0, s1_0_1, 0xFA0002FA, 0x1322E511, 0x297305EB, 0x1410EBF4);
	r1 = D(r1, s1_0_1, 0x0B12EC26, 0x13FEF8D7, 0xE9E6FB01, 0x1032264E);
	r2 = D(r2, s1_0_1, 0xFDF60AF5, 0xFEFF1406, 0xFA101A23, 0xE808210B);
	r3 = D(r3, s1_0_1, 0xFFE70DF6, 0x12050EFC, 0x070707FB, 0xF9FD09F7);
	r4 = D(r4, s1_0_1, 0x00000CE6, 0xF2F8FB03, 0xDDDAE0FC, 0x091BF405);
	r5 = D(r5, s1_0_1, 0x001008F4, 0xF806F5F1, 0xEEFF00F8, 0x0910F506);
	r0 = D(r0, s1_0_2, 0xF6F408F9, 0xFB1EEEFF, 0xF9CF16F5, 0xF6FD02ED);
	r1 = D(r1, s1_0_2, 0x1942F8DF, 0xFFF9F014, 0xFCFB13F0, 0xF6E9E212);
	r2 = D(r2, s1_0_2, 0xFF16F201, 0xFFF2230C, 0xE2FC02E4, 0xECF718EF);
	r3 = D(r3, s1_0_2, 0x0DEC1103, 0xF22FFFFB, 0x072607E1, 0xFC56F8FE);
	r4 = D(r4, s1_0_2, 0x0EF60BED, 0x16F0120C, 0x14FF0FE4, 0xF7FFF40B);
	r5 = D(r5, s1_0_2, 0xF1EF1415, 0xF903F3F9, 0xF6010411, 0xF6E70F10);
	r0 = D(r0, s1_1_0, 0xFB0200F0, 0xC0081CF0, 0x1630B9F1, 0x02D7F7E8);
	r1 = D(r1, s1_1_0, 0x22F51800, 0xE4F719EA, 0x06020216, 0x051EF48B);
	r2 = D(r2, s1_1_0, 0x17FF12EB, 0xCAF1F1F7, 0x44EE0EF8, 0x16081822);
	r3 = D(r3, s1_1_0, 0xF0FC1B01, 0xE6FE12F9, 0xF40809FA, 0xE1F615ED);
	r4 = D(r4, s1_1_0, 0x03030F15, 0x2EF1D905, 0xFE070AF8, 0xF1F719E6);
	r5 = D(r5, s1_1_0, 0xED10FD01, 0xF103FA05, 0x0002F111, 0x17F3FA02);
	r0 = D(r0, s1_1_1, 0xE7F4EE00, 0xD745EC14, 0xD87FF41F, 0xFE14810F);
	r1 = D(r1, s1_1_1, 0xE4FE4981, 0xF8F1001C, 0xF205D94B, 0xF75DC911);
	r2 = D(r2, s1_1_1, 0x0B09E70E, 0xB8D205FD, 0xF1C106D5, 0xE919FCEF);
	r3 = D(r3, s1_1_1, 0x26F61474, 0x25EC0762, 0xF900F83F, 0x158148FD);
	r4 = D(r4, s1_1_1, 0xE9041E06, 0x0608E4D0, 0x37F6DF0A, 0x07CDEA38);
	r5 = D(r5, s1_1_1, 0x0527D911, 0xEE0EFD18, 0xF800F515, 0xE81C1611);
	r0 = D(r0, s1_1_2, 0xF70A0509, 0xE0480606, 0xED712BEE, 0x090AF6F1);
	r1 = D(r1, s1_1_2, 0x32D90378, 0xF8110FF9, 0xF52F0901, 0x1025F0F6);
	r2 = D(r2, s1_1_2, 0xD74C0425, 0xF4CA27F4, 0x11D3300B, 0x07190B0F);
	r3 = D(r3, s1_1_2, 0xFB060FFF, 0xFBFFF7F9, 0x2C231AF3, 0xF10FF20A);
	r4 = D(r4, s1_1_2, 0x0A001F13, 0xE72ECFFF, 0xDDCDE7F9, 0x023CFCE1);
	r5 = D(r5, s1_1_2, 0xE924D1F4, 0x1022EFEB, 0x230540D5, 0xF1FF0009);
	r0 = D(r0, s1_2_0, 0x020204FD, 0xE8032406, 0x1ED0EFDF, 0x0410DCFB);
	r1 = D(r1, s1_2_0, 0xCCFC07F3, 0x050D1004, 0x06F411CB, 0xF6FF08F6);
	r2 = D(r2, s1_2_0, 0x00F4FB0F, 0x0EF1DBE3, 0x2FE813C8, 0x1C1BDFEC);
	r3 = D(r3, s1_2_0, 0xE4FB13F4, 0xE40BFF0C, 0xEAFB06DB, 0xCB1ABD0A);
	r4 = D(r4, s1_2_0, 0x030303E0, 0x30FFFC15, 0x00070A07, 0x9C18F300);
	r5 = D(r5, s1_2_0, 0xFA1E03ED, 0xF2F202F2, 0x0B050408, 0xFCF0CD10);
	r0 = D(r0, s1_2_1, 0x1F0FF106, 0xD41D12DF, 0x51558112, 0x0BD009EF);
	r1 = D(r1, s1_2_1, 0xE625E2BD, 0xF601D71B, 0xF8FC0F2B, 0xF721D3F4);
	r2 = D(r2, s1_2_1, 0x1905FD27, 0xBFDDD6FC, 0x02ED373A, 0xBF000C15);
	r3 = D(r3, s1_2_1, 0x0A1F1DF5, 0xFF13FCE6, 0xECEA0510, 0xF2ED05FA);
	r4 = D(r4, s1_2_1, 0xF90D2203, 0x0341C604, 0x052CD3F0, 0xEB1DEDE7);
	r5 = D(r5, s1_2_1, 0x2A0ADA0D, 0xF8E93D04, 0x171ACD04, 0xDA0B000B);
	r0 = D(r0, s1_2_2, 0x080E23FF, 0xD4DD13FA, 0xE60F000D, 0x02E9040F);
	r1 = D(r1, s1_2_2, 0xEBCD0B72, 0x102F18FD, 0x350F1E03, 0x010C07FE);
	r2 = D(r2, s1_2_2, 0x32F8EFD0, 0x0CEFE1F4, 0x2B081711, 0x212B0CFD);
	r3 = D(r3, s1_2_2, 0x060216FD, 0xF4FE3C0A, 0xFE0BFA13, 0x14F5F6F5);
	r4 = D(r4, s1_2_2, 0xFF0A07FB, 0x08F3DFFE, 0xF8FE1D11, 0xEBED1508);
	r5 = D(r5, s1_2_2, 0x1606B8F0, 0xFF0205FC, 0xF9F9FCEE, 0xEB04ABEF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.956e-02, 4.090e-02, 1.462e-02, 2.130e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.629e-02, -3.062e-03, -1.238e-01, -1.528e-01);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.362e-02, 1.862e-02, -8.716e-02, -4.874e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.251e-01, -8.732e-02, -1.108e-02, 2.599e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(4.944e-02, 1.319e-01, 7.617e-02, -7.395e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.328e-02, 1.603e-02, 3.314e-02, -1.046e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_vk] -conv2
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE5F505E3, 0xFFFDFF03, 0x030303F2, 0x0303DC12);
	r1 = D(r1, s0_0_0, 0x05170704, 0xEFEBF4FC, 0xECE20C08, 0xFDF5F8FE);
	r2 = D(r2, s0_0_0, 0xEAF0FEF7, 0xF9E5F1E7, 0xF8D63B01, 0xF6F41806);
	r3 = D(r3, s0_0_0, 0xF908F6FA, 0x09FAF502, 0xF9FE00F1, 0xEEF118F0);
	r4 = D(r4, s0_0_0, 0x06F60402, 0xFC020F12, 0xF20D14EF, 0x00F7FB0C);
	r5 = D(r5, s0_0_0, 0xF4F412EF, 0x051505D8, 0x011719E9, 0xFE000A0B);
	r0 = D(r0, s0_0_1, 0xF8070B34, 0xEFFCFF0A, 0x020004ED, 0x06E4F9F3);
	r1 = D(r1, s0_0_1, 0x14FA1D14, 0x01F81DC9, 0xF4F5FF81, 0xFC04FCCB);
	r2 = D(r2, s0_0_1, 0xEEFB131A, 0xF6E4E71F, 0x0CF6EF2F, 0xE3F800F4);
	r3 = D(r3, s0_0_1, 0x15020E42, 0x0AFE0201, 0xF90B0EF6, 0xFE0B2B0D);
	r4 = D(r4, s0_0_1, 0xFF03FFF0, 0xF70BFFC7, 0x0E1B29DE, 0xE6FEF4FE);
	r5 = D(r5, s0_0_1, 0xEE10F4EB, 0xE719F713, 0xE4FE08EC, 0xFD03110F);
	r0 = D(r0, s0_0_2, 0x0AEDF814, 0xFE00F9F8, 0x17F3FC03, 0xF90AFFFF);
	r1 = D(r1, s0_0_2, 0xFDF507EB, 0x1310FD14, 0x181513FC, 0xFE06F5FF);
	r2 = D(r2, s0_0_2, 0x16E9DD08, 0xEE17C4C4, 0xF9F4E4DC, 0xF91F1D1C);
	r3 = D(r3, s0_0_2, 0xF10502E7, 0xF50EF6F2, 0xE600F7E1, 0xE0EC0FFC);
	r4 = D(r4, s0_0_2, 0x0607030E, 0xFC1216FC, 0x011504FA, 0x0707FA06);
	r5 = D(r5, s0_0_2, 0x07101339, 0x0330340D, 0x0A0D140E, 0x0BF3072B);
	r0 = D(r0, s0_1_0, 0xF4CE28DA, 0xFEFFF8FE, 0xFDFC2FCF, 0x0DF0101E);
	r1 = D(r1, s0_1_0, 0x12090E1D, 0x17F9E417, 0xF0010226, 0x010516F6);
	r2 = D(r2, s0_1_0, 0x1422D2F5, 0xE91681DD, 0x032BC30C, 0xE5EDDE1B);
	r3 = D(r3, s0_1_0, 0x020E07F3, 0xF9F6F90A, 0x01EA16F6, 0xFC00170F);
	r4 = D(r4, s0_1_0, 0xE4FC0408, 0xFAF91A15, 0x0C32F7DE, 0xF6FAFAFC);
	r5 = D(r5, s0_1_0, 0x0DE018FC, 0x3D040805, 0x0E1615EA, 0xFB000B09);
	r0 = D(r0, s0_1_1, 0xA203F015, 0x0FF5F712, 0xD03017D6, 0xDA170A9F);
	r1 = D(r1, s0_1_1, 0x181CE8FE, 0xED1C2381, 0xEBE537BD, 0xF1F1FFEE);
	r2 = D(r2, s0_1_1, 0xF9F6DFA3, 0x280E0820, 0x4F9EB533, 0x160EFB1D);
	r3 = D(r3, s0_1_1, 0xF5E7F539, 0x15E80F13, 0xEA193499, 0x1729C801);
	r4 = D(r4, s0_1_1, 0x1500FCEC, 0x04080FFC, 0x17211CD7, 0x0E08F903);
	r5 = D(r5, s0_1_1, 0xF8F601F0, 0xF4E5AC1A, 0x1DF7E3E2, 0xFEF2FF2E);
	r0 = D(r0, s0_1_2, 0x1EDE121A, 0x02FAF302, 0xF22B0D0E, 0x0F06FD0E);
	r1 = D(r1, s0_1_2, 0x08200CF4, 0xD9EB151E, 0xE7281F1F, 0x03FBF400);
	r2 = D(r2, s0_1_2, 0x0601CBF0, 0x2828C3C4, 0x1FD6DA01, 0x07EC0513);
	r3 = D(r3, s0_1_2, 0x0411F0EB, 0xFE0510FC, 0x1A0024C1, 0x25FD01E7);
	r4 = D(r4, s0_1_2, 0x07DE02F9, 0xF7170AFB, 0xE31F04F1, 0x08F1040D);
	r5 = D(r5, s0_1_2, 0xE6FC0F38, 0xD4160E00, 0x11D42AFF, 0xEDEC0300);
	r0 = D(r0, s0_2_0, 0xE1EF1214, 0x03FA0401, 0xEAF72806, 0xE6C512F7);
	r1 = D(r1, s0_2_0, 0xF5F502FD, 0x28C6FD14, 0x2305E012, 0x07E806FE);
	r2 = D(r2, s0_2_0, 0xF30D10E9, 0x01E8BAEB, 0xF7E9C407, 0xE73100F7);
	r3 = D(r3, s0_2_0, 0xFDF802FA, 0x0212FEF5, 0x13000502, 0xFEFEE629);
	r4 = D(r4, s0_2_0, 0xF538F6EB, 0x0F14F217, 0xFB1E09F4, 0x04FE0EF9);
	r5 = D(r5, s0_2_0, 0x0BE4FF23, 0xF7E00706, 0xF2F111F4, 0x04F7F717);
	r0 = D(r0, s0_2_1, 0x1EF1D428, 0xFE0B05FF, 0xE118230C, 0xECFD22F1);
	r1 = D(r1, s0_2_1, 0xEFEDEF0E, 0xC4B31EE3, 0xFBFC1EFB, 0x06ED15F2);
	r2 = D(r2, s0_2_1, 0x0BFF1901, 0x1DC01827, 0x0BD808E3, 0x1BF62313);
	r3 = D(r3, s0_2_1, 0x0C030305, 0x06DC1301, 0xF125F92C, 0x06E8F7FC);
	r4 = D(r4, s0_2_1, 0x02232A00, 0x17EF081B, 0x00251012, 0xEC05FF03);
	r5 = D(r5, s0_2_1, 0xF6F5EFF6, 0x1A29CD04, 0x3F18D298, 0x0803FD08);
	r0 = D(r0, s0_2_2, 0x28D6EB04, 0xF9FDF500, 0xFE133D06, 0xF9110EEE);
	r1 = D(r1, s0_2_2, 0xDD0E2005, 0xD1383D26, 0xE1B22618, 0xF7FE01F3);
	r2 = D(r2, s0_2_2, 0xF4E110E6, 0x0DCECCFD, 0xAFE722E6, 0x12F8CB01);
	r3 = D(r3, s0_2_2, 0x0001EAF6, 0x14D9F701, 0x3901EBE5, 0xBF2DF7F8);
	r4 = D(r4, s0_2_2, 0x11FB00FD, 0x0F020109, 0x061E1506, 0xF2F6FE0A);
	r5 = D(r5, s0_2_2, 0xDDDF1F13, 0xDD04E000, 0xFE26EAE8, 0x110E05F4);
	r0 = D(r0, s1_0_0, 0xFA14D200, 0xFB010301, 0xFE04E9DD, 0x04F6F500);
	r1 = D(r1, s1_0_0, 0x03050101, 0x18FB0506, 0xF1021A07, 0xFEF403F6);
	r2 = D(r2, s1_0_0, 0x01F01F03, 0xFCE712D2, 0x0DE21D14, 0x190413EC);
	r3 = D(r3, s1_0_0, 0xF6FC1414, 0xFA0703FF, 0xFF161E0B, 0x07F8110E);
	r4 = D(r4, s1_0_0, 0x0D04FEF9, 0xF6FC0A0D, 0xF30D2208, 0xFEFBFEF9);
	r5 = D(r5, s1_0_0, 0xFC04F5E9, 0x080D1601, 0xEFFF2B14, 0x00F8F9F8);
	r0 = D(r0, s1_0_1, 0x00EAF703, 0xFFF5FE08, 0x001507E8, 0xF5D6E9F9);
	r1 = D(r1, s1_0_1, 0x03F90C07, 0xFD12FEF6, 0x050C0BEF, 0x100204ED);
	r2 = D(r2, s1_0_1, 0x0419F6FE, 0x05101806, 0x090A2208, 0x06210C10);
	r3 = D(r3, s1_0_1, 0xFA0AF702, 0x05F30A0E, 0xF4020A1E, 0x12072E14);
	r4 = D(r4, s1_0_1, 0x09111726, 0xF62A27EA, 0xFA3827E2, 0x04FD0207);
	r5 = D(r5, s1_0_1, 0xFD081D09, 0x18002819, 0x13140511, 0x04061C11);
	r0 = D(r0, s1_0_2, 0x02000411, 0xF807FFFD, 0x1C02FD0C, 0x1A20021F);
	r1 = D(r1, s1_0_2, 0x19FBF5F3, 0x0723F10F, 0x0E18E60D, 0x0F0BF90A);
	r2 = D(r2, s1_0_2, 0xF7FC0709, 0xE319071E, 0xEE0D0EFF, 0x00FD2316);
	r3 = D(r3, s1_0_2, 0xFD100701, 0xFC01F9F5, 0xF00709F8, 0xFEDF0819);
	r4 = D(r4, s1_0_2, 0xF3F9F7F6, 0xFB10F9F1, 0xFE0FFFF6, 0xFE08F900);
	r5 = D(r5, s1_0_2, 0xE6E5F30F, 0xCFE7FBF0, 0xF8F8140A, 0x07F1F615);
	r0 = D(r0, s1_1_0, 0xFE1D0EFB, 0x04FFFE06, 0xF11323F9, 0x02FAF8FD);
	r1 = D(r1, s1_1_0, 0x05F703F9, 0x0CF2FB15, 0x03EBE607, 0xFC0515FA);
	r2 = D(r2, s1_1_0, 0xFD01FDFA, 0x060BFE04, 0xF8DEF201, 0xF2DFF8F0);
	r3 = D(r3, s1_1_0, 0xFE04FB0A, 0xFFF9EBFE, 0x120C0201, 0x0DFE0FE4);
	r4 = D(r4, s1_1_0, 0xE6E7FF07, 0x05FEFF10, 0x10071008, 0xFFF50B06);
	r5 = D(r5, s1_1_0, 0x101307FD, 0x0E0216F7, 0xF9FE0126, 0xF1FE0200);
	r0 = D(r0, s1_1_1, 0xE41EC024, 0x13020005, 0x08421D01, 0x04170010);
	r1 = D(r1, s1_1_1, 0x131109DE, 0xCE0F0B03, 0x151F25DC, 0x033C1CF9);
	r2 = D(r2, s1_1_1, 0x0A39C7EA, 0xFB1C12FD, 0x2AD81409, 0x0DF5F3F8);
	r3 = D(r3, s1_1_1, 0x11F2E013, 0x09D9B80A, 0x0725D128, 0x141E2CFE);
	r4 = D(r4, s1_1_1, 0x13F0FDFD, 0xFBE208F8, 0xE51FFC07, 0x15EF090A);
	r5 = D(r5, s1_1_1, 0x1022360D, 0xF5000E0D, 0xFC1406D2, 0x17FBD715);
	r0 = D(r0, s1_1_2, 0xFFF10BFF, 0x02F905FF, 0x0405F60D, 0x0D15002A);
	r1 = D(r1, s1_1_2, 0x0AF901FB, 0xE4F71515, 0x0EFB0DEB, 0x1D070C02);
	r2 = D(r2, s1_1_2, 0xD91409E5, 0x391B25EA, 0xC6D8090F, 0xF51DD8FA);
	r3 = D(r3, s1_1_2, 0x14040604, 0x13EEF003, 0x26EE2301, 0xE2F0FC1F);
	r4 = D(r4, s1_1_2, 0xEF1AF8FB, 0xFAFD0EFF, 0xF500F202, 0x01F6FFFD);
	r5 = D(r5, s1_1_2, 0x07F6060F, 0xF918FC12, 0xD4F9F90D, 0xF5010717);
	r0 = D(r0, s1_2_0, 0xFCE2F50F, 0x11050303, 0xF7FF0EF9, 0x211111F6);
	r1 = D(r1, s1_2_0, 0xF50712FC, 0x12ECE803, 0x19FFF319, 0x0706FDF1);
	r2 = D(r2, s1_2_0, 0xF00A0712, 0x310B0AF5, 0x07FEED0B, 0x050A0102);
	r3 = D(r3, s1_2_0, 0x14080303, 0xFD07F8FF, 0x08FD1012, 0xF2DDEBE2);
	r4 = D(r4, s1_2_0, 0x0C1AF80C, 0x07F1FA04, 0x1113FF07, 0x120A0904);
	r5 = D(r5, s1_2_0, 0xF1E406F5, 0xEAF41AF9, 0x02060501, 0xEDEFF0F6);
	r0 = D(r0, s1_2_1, 0x20D4F2DE, 0xF90BFC03, 0x14FAF720, 0xF61BEFFB);
	r1 = D(r1, s1_2_1, 0xF9FFE417, 0xFC1F0938, 0xE8011729, 0x1113030F);
	r2 = D(r2, s1_2_1, 0x0A0026EF, 0xD5E3F5FE, 0x0031F2F0, 0xEEFEFBDF);
	r3 = D(r3, s1_2_1, 0x0204FD00, 0xFAEE37EF, 0x18E2E3F6, 0xED22DE04);
	r4 = D(r4, s1_2_1, 0xFFF810F2, 0x01E6EB05, 0xFE02FA17, 0x050BFE05);
	r5 = D(r5, s1_2_1, 0x1107F210, 0x0CFCE0CF, 0x403BF5C4, 0x15FAF3F4);
	r0 = D(r0, s1_2_2, 0x08FEFCF1, 0xFC02FB02, 0xEFFD0601, 0x1A190A0E);
	r1 = D(r1, s1_2_2, 0x0207F209, 0x11E1DA3B, 0x06F2F511, 0x0815FE0C);
	r2 = D(r2, s1_2_2, 0x01100F09, 0xCCF11A04, 0x0D1702FE, 0xDDF9FBF9);
	r3 = D(r3, s1_2_2, 0xF906FB01, 0xF6F8FDFF, 0xF01A20FA, 0xC906E7FB);
	r4 = D(r4, s1_2_2, 0x0805FF06, 0x0EF00309, 0x06FAF404, 0x01F9FA01);
	r5 = D(r5, s1_2_2, 0xFBFEFBF7, 0xC31FEDF8, 0xFE1215EA, 0xF7040C08);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x101604E4, 0xFA020709, 0xFA080EFC, 0x0EF801EC);
	r1 = D(r1, s0_0_0, 0xFAF7F5F3, 0xFBE50CF3, 0xEF18FA0D, 0x05070306);
	r2 = D(r2, s0_0_0, 0x0DEB0102, 0x01F02505, 0x02E71C26, 0x0BF90C16);
	r3 = D(r3, s0_0_0, 0xF7F805FB, 0xF900FD16, 0xFF1B0303, 0x0A0DFBF1);
	r4 = D(r4, s0_0_0, 0x02FA090E, 0xFE04FC05, 0xF0FF0108, 0xFB0106FF);
	r5 = D(r5, s0_0_0, 0x10040CF5, 0x19E60B1C, 0x13F1FC07, 0x020803F5);
	r0 = D(r0, s0_0_1, 0xA2F3F2FC, 0xFFF60902, 0xEE12010A, 0x08011AEC);
	r1 = D(r1, s0_0_1, 0xECF8FE04, 0x1DFD29D8, 0x09030F27, 0x04110D0E);
	r2 = D(r2, s0_0_1, 0x15FC0402, 0x2B0904FC, 0x3000EB0E, 0x1FFBF3E8);
	r3 = D(r3, s0_0_1, 0xFC0AFC07, 0xF8ECFC03, 0xF3FB0607, 0xF1E21104);
	r4 = D(r4, s0_0_1, 0x14DA0507, 0x09091203, 0x1305EBF8, 0x11F310F5);
	r5 = D(r5, s0_0_1, 0xFAF412E3, 0x0DBF16E5, 0x2DF604F0, 0xF0040E0C);
	r0 = D(r0, s0_0_2, 0xFB0705F9, 0x01010600, 0xF9F4FCFF, 0xF4D5F800);
	r1 = D(r1, s0_0_2, 0x06F711F8, 0xFDF505FE, 0xF6F3F80C, 0x06F6F006);
	r2 = D(r2, s0_0_2, 0xFA0802F9, 0xBE2514F0, 0xE6FB28FB, 0xD90D0DE8);
	r3 = D(r3, s0_0_2, 0x13FB0802, 0x170F0002, 0x1B21FD06, 0x17EE2BEF);
	r4 = D(r4, s0_0_2, 0xE8020406, 0xF609F706, 0x05130204, 0xF0FF0AFD);
	r5 = D(r5, s0_0_2, 0xEB090AF9, 0x942E0E0A, 0xDD190307, 0xFE030FFA);
	r0 = D(r0, s0_1_0, 0x171FF409, 0xF6020829, 0x2F1D0F17, 0xE9100B3C);
	r1 = D(r1, s0_1_0, 0x0502FCEE, 0xF1F3EC97, 0xEFD525F4, 0x04130032);
	r2 = D(r2, s0_1_0, 0xFE23F8E5, 0x0A0D15B7, 0xECF1E4DC, 0xF1E6EFC8);
	r3 = D(r3, s0_1_0, 0xF5FC0301, 0xF6FAF911, 0xFF0E06FE, 0x09EAF8E9);
	r4 = D(r4, s0_1_0, 0xEDE5EFFC, 0x06F503F4, 0xF900FFE3, 0xF8F70AFE);
	r5 = D(r5, s0_1_0, 0x15090BF9, 0x1616FDE8, 0x13FBDBAF, 0x04FCEDED);
	r0 = D(r0, s0_1_1, 0xE3E6160A, 0x04F70208, 0xD308FBEA, 0x4ADB10FD);
	r1 = D(r1, s0_1_1, 0xEE17FCD5, 0xF1F304F4, 0x0DED1FBD, 0xFD13FDE5);
	r2 = D(r2, s0_1_1, 0xFFE4E801, 0x0C2FB5F6, 0x0C011CD3, 0x03100CE7);
	r3 = D(r3, s0_1_1, 0x05EEE21B, 0x1CF8F818, 0x0DFBEC21, 0xFA0C0D24);
	r4 = D(r4, s0_1_1, 0x181B0908, 0x0D160CFB, 0xF214EA10, 0x03FD0EF2);
	r5 = D(r5, s0_1_1, 0xE2151D03, 0xCA03220F, 0xF010D125, 0xE62C0014);
	r0 = D(r0, s0_1_2, 0xF3F3E0FE, 0x07F90B01, 0x0BEC03FC, 0xF5E70BFB);
	r1 = D(r1, s0_1_2, 0x0CE2F803, 0xFBBF02E4, 0xFCD5CBFC, 0xF8FF0402);
	r2 = D(r2, s0_1_2, 0xE9FFF605, 0xDD0EEBFE, 0x18141504, 0xF0FBDD01);
	r3 = D(r3, s0_1_2, 0x01EE0806, 0xE40D04FA, 0xFAE7FB06, 0x111A0EFC);
	r4 = D(r4, s0_1_2, 0xF507EA05, 0x0010F806, 0x00F1F509, 0xFCF910F9);
	r5 = D(r5, s0_1_2, 0xF91A0CFB, 0x0620C1F5, 0x00F9F2F4, 0x01F7F610);
	r0 = D(r0, s0_2_0, 0x09F8EF0B, 0x020CFF10, 0xFE0B00FC, 0xFADC1032);
	r1 = D(r1, s0_2_0, 0x09FCF604, 0x08EEFA05, 0x01060BF0, 0xF80910F8);
	r2 = D(r2, s0_2_0, 0xFBBFE1DF, 0xF9130A0C, 0x0C280ADF, 0x0FE0FFE1);
	r3 = D(r3, s0_2_0, 0xF90C0302, 0x09EFFACE, 0x13F9EFEA, 0x060FF6DD);
	r4 = D(r4, s0_2_0, 0x00010FDF, 0x08F0F600, 0x00F8FCF3, 0x010EFFF8);
	r5 = D(r5, s0_2_0, 0x04EEF71B, 0x07CEFE11, 0x0408EA9A, 0xFDF40405);
	r0 = D(r0, s0_2_1, 0xFFEF08FD, 0xFE06FE15, 0x0A1C14DA, 0xDFFD01EA);
	r1 = D(r1, s0_2_1, 0xFB2214D0, 0xE96406FB, 0xF524D7DF, 0xFC410FF2);
	r2 = D(r2, s0_2_1, 0xEC0A07FC, 0xFAC1FF17, 0xE9F9030E, 0xF0E806FD);
	r3 = D(r3, s0_2_1, 0x07F6FC15, 0xF7F2FDF6, 0xFDE30CEA, 0xFEF3ECF7);
	r4 = D(r4, s0_2_1, 0x07EB06FD, 0x0E00E9EB, 0xF9FC0303, 0xFA0B000B);
	r5 = D(r5, s0_2_1, 0x012422F1, 0x08FC0A1C, 0xF6CD0700, 0xF9F81CF8);
	r0 = D(r0, s0_2_2, 0x0AE80E0A, 0x0104FC00, 0x00220208, 0x03020601);
	r1 = D(r1, s0_2_2, 0xEB0805FA, 0xF41D0C12, 0xF5FF0BFB, 0x0208FDF7);
	r2 = D(r2, s0_2_2, 0x0AF308FF, 0xF7CEF0FC, 0xFB1AE513, 0x07F2F4FC);
	r3 = D(r3, s0_2_2, 0x060000FF, 0x01E5F2F6, 0xE9F300FB, 0xF911E21B);
	r4 = D(r4, s0_2_2, 0xFDE109F8, 0x10FCF909, 0xFDF10204, 0x0105FDFF);
	r5 = D(r5, s0_2_2, 0xF523F10A, 0xFB0DD500, 0x0505F508, 0xFEEDF701);
	r0 = D(r0, s1_0_0, 0x02161707, 0xFCF400FC, 0x0813F2F4, 0xFCECF5FE);
	r1 = D(r1, s1_0_0, 0x08FDFCFC, 0xF0EDF5FA, 0x11E1E512, 0x00F4E702);
	r2 = D(r2, s1_0_0, 0x0103BF03, 0xE312A2E6, 0xB0080308, 0xF8F3F900);
	r3 = D(r3, s1_0_0, 0x010003FA, 0x0CE2FCFE, 0x08ECF7F0, 0xE12725E0);
	r4 = D(r4, s1_0_0, 0x03FC08F3, 0x0705E8FB, 0x0C01B9FA, 0xFDFC02F5);
	r5 = D(r5, s1_0_0, 0x0009ECEB, 0x070221F0, 0x020911E9, 0x040902F5);
	r0 = D(r0, s1_0_1, 0xCBF73C08, 0xFEF9F604, 0xEF1510FE, 0xD40C03FC);
	r1 = D(r1, s1_0_1, 0x0C04EC10, 0xF81AEDED, 0x36EBD507, 0xFA03F5F3);
	r2 = D(r2, s1_0_1, 0x220487DF, 0x0501B40C, 0x23F3E4F3, 0xF9F68113);
	r3 = D(r3, s1_0_1, 0xF6F610EC, 0xFBFA0214, 0x11D9F8F8, 0x08D308F8);
	r4 = D(r4, s1_0_1, 0x19DFF619, 0x0B0AEDF2, 0x2002E0EF, 0x06FAF0FA);
	r5 = D(r5, s1_0_1, 0xE9FBC8F1, 0x4A08BE1A, 0x0708FCED, 0x1FF7FB06);
	r0 = D(r0, s1_0_2, 0xC8FC0821, 0xFFFDFC03, 0xE6F30E1A, 0x13DFE50A);
	r1 = D(r1, s1_0_2, 0x101EF911, 0xEADDF501, 0xF3180BFB, 0xF80E1401);
	r2 = D(r2, s1_0_2, 0xF4F0140B, 0x2D08D5DF, 0x03E108F2, 0x2F20F3FC);
	r3 = D(r3, s1_0_2, 0x0E0309EC, 0xFF0810F5, 0x17FEE3E6, 0x06CFF417);
	r4 = D(r4, s1_0_2, 0x121217ED, 0xFF21FDEB, 0x1A001FE9, 0xFF00FCFD);
	r5 = D(r5, s1_0_2, 0xCC07FD0F, 0x272F0DD2, 0x0FFB0FFB, 0x05071213);
	r0 = D(r0, s1_1_0, 0xDFE41715, 0x0005F9FA, 0xE9F12F04, 0x0AF5CC02);
	r1 = D(r1, s1_1_0, 0x0BFCFB02, 0x0CFBF419, 0x13EDE7EA, 0x0EF8EE06);
	r2 = D(r2, s1_1_0, 0xF902FD18, 0x0FD8F2FE, 0xFF10F406, 0xF21302FC);
	r3 = D(r3, s1_1_0, 0x020FFDFC, 0x131304F5, 0x0304FFF4, 0xFE0DF108);
	r4 = D(r4, s1_1_0, 0x0A2DEEF6, 0xFE170707, 0x12F107F8, 0x071CEDFB);
	r5 = D(r5, s1_1_0, 0xE7F41809, 0xFEF02D27, 0xFF3D2E23, 0x061400FC);
	r0 = D(r0, s1_1_1, 0x22F9CAA2, 0x05030302, 0xF42B87E8, 0xD8FD8923);
	r1 = D(r1, s1_1_1, 0x1E0EAC18, 0xF8063105, 0xD6D581FA, 0xF929810D);
	r2 = D(r2, s1_1_1, 0xF8FB2C07, 0xD8A84EF8, 0xD6E1E516, 0x13FDF21F);
	r3 = D(r3, s1_1_1, 0x05F2BD1B, 0xF12D180B, 0xF3231811, 0x19FF27E6);
	r4 = D(r4, s1_1_1, 0xF7FA0112, 0xED06313B, 0xFDF52603, 0x0CFDF33A);
	r5 = D(r5, s1_1_1, 0xDBE13606, 0x3EE0BEEF, 0xF0E7243A, 0xF60519E4);
	r0 = D(r0, s1_1_2, 0x01E8D1FF, 0x06090904, 0xFEFCE7D9, 0xEFE6FAF2);
	r1 = D(r1, s1_1_2, 0x0718160B, 0xD3F18C18, 0x1E1AC106, 0xF901090A);
	r2 = D(r2, s1_1_2, 0xFB152A0F, 0x1A0200F9, 0xD43B4412, 0x0BE1E005);
	r3 = D(r3, s1_1_2, 0x0D0D1B16, 0x0205F11A, 0xFA090915, 0xDE061F25);
	r4 = D(r4, s1_1_2, 0xDBF90BFE, 0xE6FCF7E6, 0x06F701F3, 0x01FFFE08);
	r5 = D(r5, s1_1_2, 0xEDEFD8F3, 0x4FDCD60F, 0xABE12E13, 0xF10B1026);
	r0 = D(r0, s1_2_0, 0xE0090E0B, 0x05F8FCFF, 0xECFC0720, 0x0BF1E604);
	r1 = D(r1, s1_2_0, 0x0208FCF8, 0x08E9EC1A, 0x16EE0314, 0xFAE9001C);
	r2 = D(r2, s1_2_0, 0x06160C05, 0xFC07241C, 0x010A0601, 0x071A16F0);
	r3 = D(r3, s1_2_0, 0x06F501F8, 0x060701F8, 0xF9F9000D, 0xF7EEFCF8);
	r4 = D(r4, s1_2_0, 0x15020CEA, 0xF9F5F904, 0x09F60A06, 0x050500F7);
	r5 = D(r5, s1_2_0, 0xF6FAF712, 0xFB01EE01, 0xFA0B0EF2, 0xFF01FCF8);
	r0 = D(r0, s1_2_1, 0xFA0ADE07, 0x11FEF504, 0x12E8E6D1, 0x08F42AFC);
	r1 = D(r1, s1_2_1, 0x00F0F413, 0x0DCA2410, 0x30ECC825, 0x01EF0CFD);
	r2 = D(r2, s1_2_1, 0x1510F908, 0xFF3FE4F7, 0xD81026DD, 0xFF0F06FB);
	r3 = D(r3, s1_2_1, 0x0B10FD08, 0xF8230021, 0x201E0C0E, 0xDBF417FE);
	r4 = D(r4, s1_2_1, 0xEC190007, 0xECE6020C, 0x0BFC1AEF, 0x14F8F802);
	r5 = D(r5, s1_2_1, 0xF1F70FF7, 0x09121DED, 0x04E7332D, 0xEAFC1211);
	r0 = D(r0, s1_2_2, 0xF0FFF5FA, 0xFCFDFF08, 0x0C0EF6E9, 0x08FACFFE);
	r1 = D(r1, s1_2_2, 0x1103FAF7, 0x0B06DAD6, 0xEFF7E8F0, 0x13FE09F7);
	r2 = D(r2, s1_2_2, 0x17E3E1F5, 0xD7F30C2B, 0xD820EEEF, 0xF1F922FA);
	r3 = D(r3, s1_2_2, 0x08010B08, 0xF7F4F510, 0x02E11E05, 0xDB250BF2);
	r4 = D(r4, s1_2_2, 0xE2FF0BFC, 0xF3FD1005, 0x17EB000A, 0xFAFDFD0A);
	r5 = D(r5, s1_2_2, 0xDFFAFAEA, 0x06DAFDEB, 0xFC0C4F05, 0xFE0E05F4);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEA24EF09, 0xFEFA04FF, 0x02131301, 0x0B0EFF09);
	r1 = D(r1, s0_0_0, 0x0BFDF104, 0x3400FF07, 0xF6F61EF4, 0xFA030E03);
	r2 = D(r2, s0_0_0, 0x15F3E4F7, 0x0F012DEA, 0xF7DEFFE6, 0xFCE6EEF1);
	r3 = D(r3, s0_0_0, 0x0AFBFDF5, 0x00FDF90C, 0x0FF604FA, 0x04E4F1E8);
	r4 = D(r4, s0_0_0, 0xF4F100F7, 0x04EEFFFB, 0x21DE16F8, 0xFFFF02FF);
	r5 = D(r5, s0_0_0, 0x0FFCFCFB, 0x02DDE7EC, 0x17F0E3F6, 0x08FB04F9);
	r0 = D(r0, s0_0_1, 0xF1060200, 0x02FA010A, 0xFD0FECF7, 0xE5F103FC);
	r1 = D(r1, s0_0_1, 0xFDFEFB1A, 0x06EBE908, 0xE306100F, 0xF50A1FEE);
	r2 = D(r2, s0_0_1, 0x0403130E, 0x2D39EFE5, 0x08F31801, 0x21030816);
	r3 = D(r3, s0_0_1, 0x0005FF18, 0xF4FCF5F2, 0xEDF2ED11, 0xFBED1E08);
	r4 = D(r4, s0_0_1, 0x0A00F601, 0xFC0409F3, 0x0B0606FF, 0x0EFBFD02);
	r5 = D(r5, s0_0_1, 0x0D0AFD05, 0x250625F1, 0x0F10F20C, 0x0E0105FB);
	r0 = D(r0, s0_0_2, 0x05DF020B, 0xFFFD0107, 0xFD00FDFE, 0xF408F704);
	r1 = D(r1, s0_0_2, 0xF60022E1, 0x24FDD722, 0xFF19F1F6, 0x020FFEEC);
	r2 = D(r2, s0_0_2, 0x0FFAEE02, 0xF71219E7, 0x1C0AE221, 0x0420F3F0);
	r3 = D(r3, s0_0_2, 0x08F80DF0, 0xFFFE17F9, 0x0AFD18FB, 0xF9E20416);
	r4 = D(r4, s0_0_2, 0x100DF70E, 0xFF0D00EC, 0x190DF6E3, 0xFD07FC0A);
	r5 = D(r5, s0_0_2, 0x0617E414, 0x2222F512, 0x0305ECFB, 0x060EFB11);
	r0 = D(r0, s0_1_0, 0xEBC2FBE8, 0x08FF06F3, 0xE9EB1BF0, 0x06010D00);
	r1 = D(r1, s0_1_0, 0x0103F30A, 0x16ED040C, 0x21FAF209, 0xEF241900);
	r2 = D(r2, s0_1_0, 0x12FB1F0B, 0x0915C3FA, 0x2623F307, 0x0D1804FE);
	r3 = D(r3, s0_1_0, 0x06010D01, 0x0A0DFFFD, 0x05F5F9EE, 0x1118F603);
	r4 = D(r4, s0_1_0, 0x081C021F, 0xF804EDF5, 0x040C1304, 0x100507F8);
	r5 = D(r5, s0_1_0, 0xF1F2F5FD, 0xC9FCF21A, 0xF10D2904, 0xED02E203);
	r0 = D(r0, s0_1_1, 0x32ECF00B, 0xFBFC0A45, 0xFE0AEF0D, 0x06FA0F09);
	r1 = D(r1, s0_1_1, 0x060D0020, 0x05112602, 0x220F2E1D, 0xFC1AF8F4);
	r2 = D(r2, s0_1_1, 0x30FBF2E9, 0x0F97BDF5, 0xD00A0BF7, 0x0100FD01);
	r3 = D(r3, s0_1_1, 0xF908FA16, 0x0515D81A, 0x3138F4FD, 0xEF130E16);
	r4 = D(r4, s0_1_1, 0xFEF8F3C6, 0x01FF05ED, 0x050EFE04, 0xFCF801F9);
	r5 = D(r5, s0_1_1, 0x08E6FC03, 0x0DD5EBD1, 0xF3EC1A0C, 0xF50FEFFE);
	r0 = D(r0, s0_1_2, 0xE800F612, 0x06FF01F4, 0xE909F716, 0x2BF9F50D);
	r1 = D(r1, s0_1_2, 0x041704DB, 0xEE041DE7, 0xF21A01E3, 0xFC07050E);
	r2 = D(r2, s0_1_2, 0xEE11F8FB, 0x1FFFF61D, 0x0AF2FE0D, 0xDFE4DC34);
	r3 = D(r3, s0_1_2, 0x140DFEFB, 0x041C07F0, 0x11190BD4, 0x2901D4BA);
	r4 = D(r4, s0_1_2, 0xF3E5F022, 0xFEFE1A01, 0x180B070A, 0xFF00FB06);
	r5 = D(r5, s0_1_2, 0xD3EB070A, 0xFAD40227, 0x05EDCDFB, 0xEBF3F3F8);
	r0 = D(r0, s0_2_0, 0x1BE6F80A, 0x04F9F300, 0xE7EBF8DF, 0xEB33FCFA);
	r1 = D(r1, s0_2_0, 0xF7F7FFF4, 0x02FFF332, 0xF71EEC03, 0xF51DF3FA);
	r2 = D(r2, s0_2_0, 0xFA17FE0A, 0x022BFB03, 0x22FD0600, 0x060F180B);
	r3 = D(r3, s0_2_0, 0xF900F4F2, 0x02220906, 0xEA01F401, 0x19E30413);
	r4 = D(r4, s0_2_0, 0x032A0BFA, 0x10F5EC0B, 0xF920EFFD, 0x00FFF3FD);
	r5 = D(r5, s0_2_0, 0x01F00301, 0xDFEE15FE, 0xEDCB02F3, 0x0EF00F01);
	r0 = D(r0, s0_2_1, 0xEEE10E12, 0xF807F7FF, 0x021101E3, 0xF41DFECD);
	r1 = D(r1, s0_2_1, 0x051C01FF, 0xF5121581, 0xF0FEE2D9, 0xF11DF0DB);
	r2 = D(r2, s0_2_1, 0xD3F90611, 0xC7DB0526, 0xDD240A06, 0xEDFB1C27);
	r3 = D(r3, s0_2_1, 0x06FDFF1D, 0xF3ED0215, 0xEFF3F812, 0xEF1AF326);
	r4 = D(r4, s0_2_1, 0xFD150CE7, 0xFAF0E7F2, 0x01FFF100, 0xF90DF30A);
	r5 = D(r5, s0_2_1, 0x09F7F5CC, 0xF9F6F5FE, 0x0CCC4FEE, 0xFE0C0F05);
	r0 = D(r0, s0_2_2, 0xF5F10A14, 0xFD04FCF9, 0x03080B03, 0x1023F0FD);
	r1 = D(r1, s0_2_2, 0xE5160AF3, 0xFDFAEAFE, 0xEB0202FA, 0xF30CFBE5);
	r2 = D(r2, s0_2_2, 0x14EE0813, 0xF7FE1C07, 0x092FE7DA, 0x1B0410FF);
	r3 = D(r3, s0_2_2, 0xFB09FDF9, 0xECEA0F16, 0xE709131F, 0xF52EE3C6);
	r4 = D(r4, s0_2_2, 0x0AE00C07, 0xFD00FA05, 0x0407020C, 0xFA03FDF7);
	r5 = D(r5, s0_2_2, 0xF50004F6, 0x0DF0F207, 0x1BE60222, 0xF80003EF);
	r0 = D(r0, s1_0_0, 0xFC010522, 0x03FAFFFE, 0xEFF2F206, 0xF1EFF905);
	r1 = D(r1, s1_0_0, 0x00030403, 0x041624F3, 0x0CC10503, 0xF8FBFB00);
	r2 = D(r2, s1_0_0, 0xF618D9D9, 0xF8FF16C6, 0x1FEF0EE7, 0x1DDFE9F5);
	r3 = D(r3, s1_0_0, 0xFD10F9FD, 0xFB07FF0A, 0xF6F7FFF6, 0x0BEB0AFE);
	r4 = D(r4, s1_0_0, 0x040103F6, 0xF8F602F7, 0xF01EF1D6, 0x0C07FFFF);
	r5 = D(r5, s1_0_0, 0xF60B02FE, 0x12FDF1FD, 0x270100F6, 0x09EE0E04);
	r0 = D(r0, s1_0_1, 0x080241F1, 0x040303F7, 0x11E31215, 0xFFE524FE);
	r1 = D(r1, s1_0_1, 0x0EEF070C, 0x133FE5E2, 0xE71C00E9, 0x0003F809);
	r2 = D(r2, s1_0_1, 0x3609B407, 0x08B0A439, 0x1219C600, 0xF2FBCFDB);
	r3 = D(r3, s1_0_1, 0x13FF1A01, 0x070A0B1A, 0xF0171202, 0x0E2AE3EE);
	r4 = D(r4, s1_0_1, 0xF71CFCF9, 0x0408F5F6, 0x0104C909, 0x0306FCF1);
	r5 = D(r5, s1_0_1, 0xEC23E107, 0xE42FC8FE, 0x12060C05, 0x0E05F206);
	r0 = D(r0, s1_0_2, 0x09FC0CEB, 0x00050100, 0xF3010DF9, 0xFA101EFF);
	r1 = D(r1, s1_0_2, 0xE9F5FAFA, 0xEF09E312, 0xFAEDF00C, 0x0904F0FD);
	r2 = D(r2, s1_0_2, 0x2205F70E, 0xFBEDD531, 0xFB0FE904, 0x0DE7CD09);
	r3 = D(r3, s1_0_2, 0x0508F8F3, 0xF9000AF4, 0xF901EE02, 0xF61B0C02);
	r4 = D(r4, s1_0_2, 0x06F8FB16, 0x08EFEF13, 0xFFFFF605, 0x03000309);
	r5 = D(r5, s1_0_2, 0xEFFB062B, 0x1FE8DB49, 0x12FB0515, 0x05030C20);
	r0 = D(r0, s1_1_0, 0x17121712, 0xFE0005F8, 0xFC811333, 0xEEF80AEE);
	r1 = D(r1, s1_1_0, 0x0AE8FD14, 0x1FE5F0D7, 0x179DF5E5, 0xEAE1FA0B);
	r2 = D(r2, s1_1_0, 0xFDE000FF, 0x18390D0E, 0x0421E9EF, 0xFE060B0C);
	r3 = D(r3, s1_1_0, 0xF81FFFF7, 0x150C0BFF, 0x18FAF9EE, 0x0710100B);
	r4 = D(r4, s1_1_0, 0xFD1B07F5, 0x170806FF, 0xF5F0FFF6, 0x002704F4);
	r5 = D(r5, s1_1_0, 0x13E8181C, 0x1DF50137, 0x0CDED704, 0x03EE0327);
	r0 = D(r0, s1_1_1, 0x20F0EE1D, 0xF804FE05, 0xF5010839, 0xF5FDF4F9);
	r1 = D(r1, s1_1_1, 0xF507EFFB, 0x0EC7F60F, 0x0B130014, 0xD610060F);
	r2 = D(r2, s1_1_1, 0x02040BF1, 0x1424F905, 0xD912E8FA, 0x0CE603F7);
	r3 = D(r3, s1_1_1, 0xEC16FEF2, 0x21F32C16, 0x01CF1718, 0x2C23C2D2);
	r4 = D(r4, s1_1_1, 0x0BF9FD12, 0x0AE32B07, 0xEDFF1626, 0x04F11710);
	r5 = D(r5, s1_1_1, 0x1601CFF9, 0x2508A0F4, 0x2EE2AFD8, 0x0C07F3EB);
	r0 = D(r0, s1_1_2, 0x270611E0, 0xF7FAF607, 0x00000309, 0x0D0FF11D);
	r1 = D(r1, s1_1_2, 0xF3F8EB0C, 0xED19FB1F, 0xE507F51C, 0xFA0009FD);
	r2 = D(r2, s1_1_2, 0xF7F2E509, 0x1AFC36D9, 0xF3E2F408, 0x1BF31CE4);
	r3 = D(r3, s1_1_2, 0xE3F40107, 0xF8FC0FEF, 0xF9F907EB, 0xF0F9F020);
	r4 = D(r4, s1_1_2, 0x160DFDF8, 0x07FE18FF, 0xFD090DFF, 0x03FFFE11);
	r5 = D(r5, s1_1_2, 0x1F0AF9FD, 0x410F19D2, 0x180FF3E6, 0x080606F1);
	r0 = D(r0, s1_2_0, 0x010CFFE4, 0x01FE0907, 0x01EF01F1, 0x05CF0EF2);
	r1 = D(r1, s1_2_0, 0x02030709, 0x090B09F9, 0x03EAF720, 0xF60CFFFF);
	r2 = D(r2, s1_2_0, 0x1001FC02, 0x08FCED0A, 0xF9F514FD, 0x03E30906);
	r3 = D(r3, s1_2_0, 0x02FE0403, 0x1CF4F202, 0xFCFCFF09, 0x090E110F);
	r4 = D(r4, s1_2_0, 0x09EEFCFE, 0x041B0103, 0x1015040A, 0x02FA0A03);
	r5 = D(r5, s1_2_0, 0x060902F6, 0xF8FB030E, 0x22E7FEED, 0xFA09FEFC);
	r0 = D(r0, s1_2_1, 0xFC15ECF6, 0x0E09FB05, 0x06F11806, 0x0AF11813);
	r1 = D(r1, s1_2_1, 0xFA0C0F01, 0x0308EBF7, 0x2C13F3EB, 0xFA02FE08);
	r2 = D(r2, s1_2_1, 0xF6F4D606, 0xF5F1D8F8, 0xF5071E0B, 0x03E3F8F4);
	r3 = D(r3, s1_2_1, 0x080FFA05, 0xF8F5C3F7, 0x2B28D6FF, 0x0002320D);
	r4 = D(r4, s1_2_1, 0xF4D8F0FB, 0x0E0308F5, 0x1005EFFF, 0x090BF403);
	r5 = D(r5, s1_2_1, 0xEB00200E, 0xF3FB2004, 0x01B5EE01, 0xEFFD0DFE);
	r0 = D(r0, s1_2_2, 0x240601E0, 0x0305FFF6, 0xF7FA0C04, 0xF80EF8FC);
	r1 = D(r1, s1_2_2, 0xFAFFF70F, 0x00FF180D, 0xF9FE1DF2, 0xF8FEFD05);
	r2 = D(r2, s1_2_2, 0x14110CEE, 0x1EF905EA, 0xF2E1F517, 0xF3FB1502);
	r3 = D(r3, s1_2_2, 0xFD06FAF5, 0x13040000, 0x150A01E8, 0x16FDEA05);
	r4 = D(r4, s1_2_2, 0xF9F50BF8, 0x0EFA07F6, 0x0E11FFF8, 0xFE07FFF4);
	r5 = D(r5, s1_2_2, 0x130412FE, 0x2E1018F6, 0xF6FF0E04, 0x01F6FF0D);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.285e-02, 1.487e-02, -1.810e-02, 3.235e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-9.683e-03, 5.055e-02, 1.061e-02, -3.676e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.077e-02, 2.028e-02, -2.203e-02, -1.486e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.560e-02, -1.972e-02, -1.705e-02, 5.989e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.240e-02, -1.353e-02, -1.007e-02, 2.443e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(5.603e-02, -1.041e-02, -8.961e-02, 1.175e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_vk] -conv3
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE9041505, 0x22F4FAFB, 0x12F8FF06, 0x08FF0AFA);
	r1 = D(r1, s0_0_0, 0x02F1F40B, 0x02FDFAFD, 0xFCF40405, 0xFDF5F901);
	r2 = D(r2, s0_0_0, 0x02170904, 0xF3FFFF0A, 0x06EEF3FF, 0xE81FEEDC);
	r3 = D(r3, s0_0_0, 0x00010C02, 0x01F80C15, 0xFB06FC08, 0xFEFD0201);
	r4 = D(r4, s0_0_0, 0xFCF9010C, 0x03F00D00, 0x0D08F6FA, 0xF1040007);
	r5 = D(r5, s0_0_0, 0xF50A06F7, 0x12E4071D, 0xDEFF0FF0, 0x16FC0607);
	r0 = D(r0, s0_0_1, 0x05F00E17, 0x06E5021D, 0x15FE1FFC, 0xF8F21812);
	r1 = D(r1, s0_0_1, 0x0C00EFF8, 0xF2FDFD04, 0x06061508, 0x000AF6FB);
	r2 = D(r2, s0_0_1, 0xDEFD1A1B, 0x020DD9E5, 0x14FFCD09, 0x1500DAD5);
	r3 = D(r3, s0_0_1, 0xF404EBF2, 0xFAF90419, 0xF9F0F70D, 0x0301110C);
	r4 = D(r4, s0_0_1, 0x0DF4EDFF, 0x20D4EF21, 0xF8FA0101, 0x152AF5E2);
	r5 = D(r5, s0_0_1, 0xF5DF1F23, 0xE5FFF1F1, 0x0DF2F3E4, 0x0AF4FBF7);
	r0 = D(r0, s0_0_2, 0xF20DECFB, 0x04F2ED0B, 0xFC05FBFD, 0xFD03F30C);
	r1 = D(r1, s0_0_2, 0x04FD10F8, 0x0301170B, 0x03F8FC03, 0x02FBFEFF);
	r2 = D(r2, s0_0_2, 0x0009EEE5, 0xF90000FF, 0xE4C381E3, 0x05EC13ED);
	r3 = D(r3, s0_0_2, 0xFC090101, 0xFBFB0F0D, 0xF60E0009, 0xF9FEDF00);
	r4 = D(r4, s0_0_2, 0xFFF116FF, 0x00F90E15, 0x04FDFF05, 0xFCFE06F9);
	r5 = D(r5, s0_0_2, 0x0BE4F506, 0x09FBFE05, 0x0705FDEF, 0xFEF81BFC);
	r0 = D(r0, s0_1_0, 0xDF03F2FE, 0xFF1BFE15, 0x0D04F10F, 0x12F0EAFC);
	r1 = D(r1, s0_1_0, 0x181700E7, 0xFCFF00FB, 0x03FDFFFF, 0x07FF0DF3);
	r2 = D(r2, s0_1_0, 0xDE120D1F, 0xFAFFFF15, 0x00DE1A05, 0xFB0128E6);
	r3 = D(r3, s0_1_0, 0xEC0600EE, 0x14DBF00F, 0x02FD0AFF, 0x0AEEF6ED);
	r4 = D(r4, s0_1_0, 0x010FE9EE, 0xDA290318, 0x14F501F6, 0xEF08040A);
	r5 = D(r5, s0_1_0, 0xDB0B0713, 0x03E801F6, 0xF2050C09, 0xFEEAF30E);
	r0 = D(r0, s0_1_1, 0x092BDFE3, 0xD7B3180D, 0x2AFECD9D, 0x05F2AB04);
	r1 = D(r1, s0_1_1, 0x0D04E9D7, 0xFF16FE12, 0x0208D5F9, 0x07123AF5);
	r2 = D(r2, s0_1_1, 0xE4F8A517, 0x03F8251D, 0x01232F31, 0xF1D5171A);
	r3 = D(r3, s0_1_1, 0xEB166210, 0x0404C736, 0x0BFA0003, 0x061D3D11);
	r4 = D(r4, s0_1_1, 0x060911D8, 0x03CDF8FC, 0xF50F120A, 0x071330DE);
	r5 = D(r5, s0_1_1, 0x04C59EBF, 0xE5FB1F13, 0x0304DDD9, 0xDFE08140);
	r0 = D(r0, s0_1_2, 0xF90F2C01, 0x05E60A1E, 0x03F4020E, 0x04071AE1);
	r1 = D(r1, s0_1_2, 0x05180705, 0x06050C12, 0x080717FF, 0x0102F107);
	r2 = D(r2, s0_1_2, 0x092415FB, 0xF709FAFD, 0xE22126EA, 0xF4F71505);
	r3 = D(r3, s0_1_2, 0xFE09D7F3, 0x03130604, 0x06F4E912, 0xF903EF01);
	r4 = D(r4, s0_1_2, 0xFEEEDDF4, 0xFDFD011A, 0xFAEFE817, 0xF7F0F71E);
	r5 = D(r5, s0_1_2, 0x202C0CE6, 0x01152800, 0xEDF804E2, 0xFA0A190C);
	r0 = D(r0, s0_2_0, 0x120505F6, 0x0317E61D, 0x000007FF, 0x050408F6);
	r1 = D(r1, s0_2_0, 0x03FAFE00, 0x03FE0E06, 0xFEFD0600, 0xFCFB0202);
	r2 = D(r2, s0_2_0, 0x1AF6030E, 0xFAFE00F7, 0x14030DFD, 0xFDF3F3FA);
	r3 = D(r3, s0_2_0, 0xFB1115F0, 0xF0EFFC0D, 0xFD00FF00, 0xFB0700FC);
	r4 = D(r4, s0_2_0, 0xF30013F7, 0x152E0203, 0x070AF5F5, 0xF8070600);
	r5 = D(r5, s0_2_0, 0x03110811, 0xF210F808, 0x0505F5F5, 0xFEF9FD06);
	r0 = D(r0, s0_2_1, 0x19FE31C3, 0xF0E0E5F7, 0xF2E91B0E, 0x01FF08F9);
	r1 = D(r1, s0_2_1, 0x00F50002, 0x06053206, 0xFF0003FE, 0xFBFEF30A);
	r2 = D(r2, s0_2_1, 0x172918F8, 0x080800F8, 0x00E90B0D, 0x0E16E7DA);
	r3 = D(r3, s0_2_1, 0x1800EFE7, 0x04081F09, 0x00FBF00A, 0xF6FF0C07);
	r4 = D(r4, s0_2_1, 0x0601F9F3, 0x0FD6F1FA, 0xFEF60015, 0xFFFDF8FB);
	r5 = D(r5, s0_2_1, 0xFB050713, 0x011516F7, 0x01FE32CF, 0x0A170FF9);
	r0 = D(r0, s0_2_2, 0x081D06E7, 0x1104F6FD, 0x000D1D05, 0xFA001BED);
	r1 = D(r1, s0_2_2, 0x07041701, 0x03FB0B08, 0x04000D01, 0x00FBF308);
	r2 = D(r2, s0_2_2, 0x17E3F321, 0xFE0101FC, 0xE2ED1303, 0x091910C1);
	r3 = D(r3, s0_2_2, 0x08F1FA10, 0xFF060000, 0x0107E8FE, 0x01FCFFF4);
	r4 = D(r4, s0_2_2, 0xFDF2FC01, 0x05F81B1E, 0x0700F408, 0xFFF8EB0B);
	r5 = D(r5, s0_2_2, 0xD60204EB, 0xF1EBF407, 0xF1ED130E, 0x010B11EF);
	r0 = D(r0, s1_0_0, 0x1917F3F9, 0xF21007F9, 0x12E90AF7, 0xE9F40403);
	r1 = D(r1, s1_0_0, 0x0CFD00F4, 0xFDFEFFFD, 0x00FBFD06, 0xFFFEF906);
	r2 = D(r2, s1_0_0, 0x1AEE05E3, 0x01EEF9FD, 0xF3D9F9FF, 0xFECBEDEE);
	r3 = D(r3, s1_0_0, 0x0EE301F6, 0x10F2FF00, 0x0B07FEF4, 0xECDEF412);
	r4 = D(r4, s1_0_0, 0x151EF303, 0xE4EB0108, 0x0A13F9F5, 0x0913F00D);
	r5 = D(r5, s1_0_0, 0x1F040FD2, 0x1EF8FDF0, 0xFAD9F80A, 0x01EF01ED);
	r0 = D(r0, s1_0_1, 0x27F608FB, 0x3316DBF5, 0xEDEC1903, 0x0AF30A08);
	r1 = D(r1, s1_0_1, 0x10000807, 0xFDF60C0A, 0x1007FFFD, 0x0003010D);
	r2 = D(r2, s1_0_1, 0x42E707F3, 0xEEF4FBFC, 0x26BE1C3C, 0xF1D8FC18);
	r3 = D(r3, s1_0_1, 0xE1C90604, 0x06F4FF01, 0x15F00009, 0x0CFBE804);
	r4 = D(r4, s1_0_1, 0xFB1FF908, 0x0DE4E517, 0x11060B15, 0xE732FCFE);
	r5 = D(r5, s1_0_1, 0x2B81EAEC, 0x0DD4FD1C, 0x02F004FE, 0xEA040A05);
	r0 = D(r0, s1_0_2, 0xF20AF202, 0x141209FF, 0x16ED1104, 0x05F6F707);
	r1 = D(r1, s1_0_2, 0x03EE0103, 0x0601F9FD, 0x00FC02FE, 0xFDFE0101);
	r2 = D(r2, s1_0_2, 0x05C3E810, 0xFFFD0103, 0xDCF4C2EB, 0x0312FC11);
	r3 = D(r3, s1_0_2, 0xE924F2F5, 0xFCF9FBFB, 0x07F6FC02, 0xFD0204FF);
	r4 = D(r4, s1_0_2, 0xF80813FB, 0x23C72DF1, 0x0AF4F8F9, 0x020C1D00);
	r5 = D(r5, s1_0_2, 0x1FEB8110, 0xF806F2F5, 0x070AFD04, 0x0A010907);
	r0 = D(r0, s1_1_0, 0x0CD8CCF6, 0x351BFF2C, 0x05F3120D, 0xE1F2010F);
	r1 = D(r1, s1_1_0, 0xF70D06E8, 0xEEF6FE11, 0xFBFAFEFC, 0xEEF900F9);
	r2 = D(r2, s1_1_0, 0x2C0106F6, 0x0603F41B, 0x0CE9F40F, 0x02F2F83B);
	r3 = D(r3, s1_1_0, 0xF6DAF0F2, 0xC1D8F306, 0x08060109, 0xC4EBFD12);
	r4 = D(r4, s1_1_0, 0xF4F5F206, 0x170A0507, 0x01150AEC, 0x030305F8);
	r5 = D(r5, s1_1_0, 0x1B15D922, 0xF8D200F9, 0x04FB001B, 0xDBF40D15);
	r0 = D(r0, s1_1_1, 0x8194010B, 0xD99DD20D, 0x92000A10, 0xD0E30106);
	r1 = D(r1, s1_1_1, 0xFBFA232A, 0x0B0CF9F8, 0xE7F2090F, 0x09FC0917);
	r2 = D(r2, s1_1_1, 0xC6E4FAED, 0xE1E8EDEF, 0xF5C1E863, 0xCEDAF305);
	r3 = D(r3, s1_1_1, 0x1CC630AF, 0xE9D60FEA, 0xD6FF0506, 0xD7D5F1E6);
	r4 = D(r4, s1_1_1, 0x20FBD7FB, 0xD1F6E31D, 0x1B210811, 0x28101B03);
	r5 = D(r5, s1_1_1, 0x8F810510, 0xC4CFECC1, 0xDDFEEE08, 0x05E532DE);
	r0 = D(r0, s1_1_2, 0xEDFEA329, 0x03D4F7ED, 0x16E71E1A, 0x09EB0406);
	r1 = D(r1, s1_1_2, 0xF7FDFFF7, 0x09F204F8, 0xFBF8FBFB, 0x05F7FEF5);
	r2 = D(r2, s1_1_2, 0xE6F7BEB8, 0xF5F8F6E5, 0xB681D011, 0xFDDCEF01);
	r3 = D(r3, s1_1_2, 0x0330FD22, 0x050B0108, 0xF7EF0DF9, 0x0706F704);
	r4 = D(r4, s1_1_2, 0x020807FF, 0xF9F71BEE, 0xFAF3F4EB, 0x04181008);
	r5 = D(r5, s1_1_2, 0xF0278125, 0x00FFFE15, 0x01F61C01, 0x0C0FF9F8);
	r0 = D(r0, s1_2_0, 0x07028105, 0x1C2E04EE, 0x00F40303, 0x0202FEF2);
	r1 = D(r1, s1_2_0, 0xFAFD0707, 0xFD020503, 0xFD0100FC, 0xFDFF0300);
	r2 = D(r2, s1_2_0, 0xFEEEEA36, 0xF6FEFF06, 0x0F1FFBEA, 0xFC00F803);
	r3 = D(r3, s1_2_0, 0xEF0E00EC, 0xF9F00011, 0xFA02FEF6, 0xE903FBFB);
	r4 = D(r4, s1_2_0, 0xF80105FD, 0x15141AF5, 0x020804F9, 0xF70700FB);
	r5 = D(r5, s1_2_0, 0x170DFD02, 0xF602FB06, 0xFEFF07FA, 0xFEF9F70A);
	r0 = D(r0, s1_2_1, 0xF0E7B0E7, 0xF3CA03F4, 0x00F30CFF, 0xFFF80913);
	r1 = D(r1, s1_2_1, 0x1403FEFB, 0xFDF40706, 0x00FC0003, 0x07FE0402);
	r2 = D(r2, s1_2_1, 0x3DE6EB0C, 0x0C02F901, 0x13FF07F4, 0x040BF6E8);
	r3 = D(r3, s1_2_1, 0x242012EB, 0xECE6FB00, 0x0502FEFB, 0xF1ECFCFD);
	r4 = D(r4, s1_2_1, 0xFB0D04FD, 0xD02812E8, 0x0811FD09, 0xFD18FDF9);
	r5 = D(r5, s1_2_1, 0x0882EB00, 0x08F9010A, 0xEA0AE7FF, 0x0BE8FD09);
	r0 = D(r0, s1_2_2, 0xFD06ECF4, 0xFFDAFAFB, 0x0BF90AE2, 0x01F104FA);
	r1 = D(r1, s1_2_2, 0xFBF0F802, 0xF9F60200, 0xFFFAFCFE, 0x04FAFFFC);
	r2 = D(r2, s1_2_2, 0x28D30914, 0xFFFCFDFD, 0x0FD40EF6, 0xF9FBE8EF);
	r3 = D(r3, s1_2_2, 0xFA1B0611, 0x01030102, 0x05FEFC03, 0x05FFFAF7);
	r4 = D(r4, s1_2_2, 0xFB08FD0C, 0x0810220E, 0xFFF8F8EF, 0x0612F702);
	r5 = D(r5, s1_2_2, 0xF4FF81C9, 0xFFFE0F05, 0xF8E708E8, 0x00F4F900);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFEB0616, 0xE1FF04FC, 0xFAFF03FD, 0x02FDF302);
	r1 = D(r1, s0_0_0, 0xFEFB0BFB, 0x01FAFEFE, 0x0203FD01, 0x0502FB00);
	r2 = D(r2, s0_0_0, 0x0405F000, 0x05FEF4FF, 0x181EEEF1, 0x08F5070D);
	r3 = D(r3, s0_0_0, 0x0CFA0806, 0x03FCFB14, 0xF9FC020B, 0xFCFDFEFC);
	r4 = D(r4, s0_0_0, 0xFAE3091B, 0xE5FF090C, 0x00FBFBF8, 0xF7FA14FA);
	r5 = D(r5, s0_0_0, 0xF8DBF705, 0x06F1FAF7, 0x01EB0B04, 0x05FBD902);
	r0 = D(r0, s0_0_1, 0xFAFA1707, 0x0BFE1626, 0xF300F9F9, 0x00EC0011);
	r1 = D(r1, s0_0_1, 0x03020701, 0xFDFE00F3, 0x07F4020A, 0x02FBFE01);
	r2 = D(r2, s0_0_1, 0x04F9ECF8, 0x0316FCF6, 0xDAD7E534, 0xFA1FFAFE);
	r3 = D(r3, s0_0_1, 0xF3190AEE, 0xEF02FBFE, 0xFFF7030A, 0xFEFB0800);
	r4 = D(r4, s0_0_1, 0x01E9FD05, 0x02FC19F8, 0xFCFA0106, 0xFD2CECCB);
	r5 = D(r5, s0_0_1, 0xEEC8F90D, 0xF00FF0E6, 0xFDE7F90B, 0xFE0CE1FE);
	r0 = D(r0, s0_0_2, 0xFFF60205, 0xEE020918, 0xFA05FEFD, 0xFCEDF508);
	r1 = D(r1, s0_0_2, 0x0A0107F8, 0x01FA07FF, 0x01F9FC06, 0x0400FFFC);
	r2 = D(r2, s0_0_2, 0x1620EF10, 0x0615FEFA, 0x48EB0E4E, 0x11FBF504);
	r3 = D(r3, s0_0_2, 0x08080705, 0x0401F702, 0xFF0508FE, 0xFCF9F309);
	r4 = D(r4, s0_0_2, 0xFCEF0512, 0xEEDAFE06, 0x02F9090F, 0x050BFB04);
	r5 = D(r5, s0_0_2, 0xFBC82630, 0x07FB050D, 0xFDEEF0FD, 0x0606E805);
	r0 = D(r0, s0_1_0, 0x18E805F5, 0xE3F221F8, 0x03FFE406, 0xFDFAF10E);
	r1 = D(r1, s0_1_0, 0x1A11F6FB, 0xF80A03F7, 0x0AFFFF03, 0x0A0501F9);
	r2 = D(r2, s0_1_0, 0x12001001, 0x08F706FF, 0x0120EBF7, 0x0FBA14ED);
	r3 = D(r3, s0_1_0, 0x0F101FEA, 0xFD14FCFD, 0x02FF08F5, 0x010FF9FE);
	r4 = D(r4, s0_1_0, 0x12F1FBEB, 0xDAE92216, 0x1311ED0C, 0xFFEA1302);
	r5 = D(r5, s0_1_0, 0xD3D5F1FF, 0x05FFFCF8, 0x0AC613E8, 0xF5F9D715);
	r0 = D(r0, s0_1_1, 0xF3110A0F, 0xFAF129D4, 0xE916DE1E, 0x09E5F00A);
	r1 = D(r1, s0_1_1, 0x11FA020C, 0xFC020F12, 0x100404FC, 0x0C0A09EF);
	r2 = D(r2, s0_1_1, 0x24211110, 0x1CF9062B, 0x16062310, 0x40B4022F);
	r3 = D(r3, s0_1_1, 0x1CEA133A, 0xE309F21D, 0x0A0D16FB, 0xFAE613ED);
	r4 = D(r4, s0_1_1, 0xFF0F00F8, 0xCE0E071D, 0xF6FEF2EB, 0xE80AF12E);
	r5 = D(r5, s0_1_1, 0x0118EA1B, 0x07E51832, 0x09F4FAED, 0xEBCDE629);
	r0 = D(r0, s0_1_2, 0x341210F9, 0x13D50C15, 0xF9D8E900, 0x0C08FE04);
	r1 = D(r1, s0_1_2, 0x02F11301, 0xF7FA0EFD, 0x08FF0204, 0x02FA04FE);
	r2 = D(r2, s0_1_2, 0x13ED21EA, 0x02FBF825, 0xF1E3F20F, 0x06BE010B);
	r3 = D(r3, s0_1_2, 0xFF0F10FD, 0xF912FEF2, 0xF9F405FF, 0x0006FCFE);
	r4 = D(r4, s0_1_2, 0x0600FF04, 0x07D0FC22, 0xFCE809FE, 0xFFF7F8F1);
	r5 = D(r5, s0_1_2, 0xC9DC35F0, 0xE1030CF9, 0xFED6ECFA, 0xE511EAFF);
	r0 = D(r0, s0_2_0, 0xFCFE0EFA, 0x03F01CF5, 0xF507E30F, 0x0507F6FD);
	r1 = D(r1, s0_2_0, 0x0DEEECF8, 0x04FD05F5, 0x02FC0103, 0xF9000202);
	r2 = D(r2, s0_2_0, 0x381AFC00, 0x0F01F705, 0xFB0CF706, 0x0AE3EB0A);
	r3 = D(r3, s0_2_0, 0xF215071A, 0xE813ED23, 0x02FEFA0D, 0xE017080B);
	r4 = D(r4, s0_2_0, 0xF9E909E9, 0x0109E208, 0xF5FA0003, 0xEE050D11);
	r5 = D(r5, s0_2_0, 0x10C002F4, 0xFF000A18, 0x0CE2FFE8, 0x1AFEE70E);
	r0 = D(r0, s0_2_1, 0x0B1635DF, 0xDE091419, 0xEB08E1F9, 0xFDECF1E4);
	r1 = D(r1, s0_2_1, 0x09040BF0, 0x09FD00F4, 0x08FE02F5, 0xFE0004FE);
	r2 = D(r2, s0_2_1, 0x2F40E8F5, 0x0809FC08, 0xE217FE2B, 0x2015E413);
	r3 = D(r3, s0_2_1, 0xF119E906, 0xF600F4EB, 0xF701FCFB, 0x00F70DD8);
	r4 = D(r4, s0_2_1, 0xFBE50007, 0xD23A0609, 0xF8F503F1, 0xF9F70015);
	r5 = D(r5, s0_2_1, 0xE0221305, 0x14190FF5, 0xFB22DDFC, 0x231CF70B);
	r0 = D(r0, s0_2_2, 0x06FC1817, 0x03EB15DB, 0x05F0EAEB, 0xFDF1F3FE);
	r1 = D(r1, s0_2_2, 0x08010716, 0xFEF001FC, 0x03020109, 0x02FC0309);
	r2 = D(r2, s0_2_2, 0x271DFA40, 0x0601FA07, 0x000EF719, 0x1D1E15FD);
	r3 = D(r3, s0_2_2, 0xEB0605E6, 0xFF100821, 0xFB0203F6, 0x02FFFF09);
	r4 = D(r4, s0_2_2, 0xF4E8FCED, 0xFD161D97, 0xFBEF09FF, 0x0B01F800);
	r5 = D(r5, s0_2_2, 0x1DE81C44, 0xEDFA0219, 0x07D4F5FD, 0x080F0020);
	r0 = D(r0, s1_0_0, 0x27150407, 0x3006E20A, 0xFFF1FEFE, 0xFEF9FAFD);
	r1 = D(r1, s1_0_0, 0x01EE1602, 0xF50300FE, 0xFFF50606, 0xFDF40A01);
	r2 = D(r2, s1_0_0, 0x0CF6ECFE, 0xFD0CFFF6, 0xEEE5FEDC, 0x090C13E5);
	r3 = D(r3, s1_0_0, 0x151DF8F7, 0x060CEC06, 0xFFFDF8FE, 0x0519F3FF);
	r4 = D(r4, s1_0_0, 0x0BFE060F, 0x3128E2FC, 0xEDFFF9F2, 0x130E070A);
	r5 = D(r5, s1_0_0, 0x140CF102, 0xF822E6FA, 0x0F010704, 0x0200F1F7);
	r0 = D(r0, s1_0_1, 0x28F20E0C, 0x24FF11F1, 0x07FADC00, 0x080C00FC);
	r1 = D(r1, s1_0_1, 0x13FF0BF3, 0x0010EDF4, 0x0AF00B05, 0x0DFA0DF8);
	r2 = D(r2, s1_0_1, 0x0910EDF3, 0xFB1807F5, 0x22CE410B, 0xFCEF08E3);
	r3 = D(r3, s1_0_1, 0x0B0B0D01, 0x0401F707, 0x040A0B10, 0x0A03F610);
	r4 = D(r4, s1_0_1, 0xFCFB15FE, 0x10130B17, 0x0E0604E9, 0xEB01E00A);
	r5 = D(r5, s1_0_1, 0xFF3FE9E9, 0x030608E3, 0xF0FFF90A, 0x0001E9E8);
	r0 = D(r0, s1_0_2, 0x020AE802, 0x0A0D17FE, 0x07FEE803, 0x000B00FB);
	r1 = D(r1, s1_0_2, 0x060107F6, 0x04FA0405, 0x00FB04FD, 0x02FD09FF);
	r2 = D(r2, s1_0_2, 0x182709B6, 0xEF070BFE, 0xF115DC28, 0xF30DFD14);
	r3 = D(r3, s1_0_2, 0x07FEEFFE, 0x0802FCF5, 0x07FD050D, 0xFB06F707);
	r4 = D(r4, s1_0_2, 0xFC0203FF, 0x0EFBE2E6, 0x08FB0D0E, 0x0001F9F2);
	r5 = D(r5, s1_0_2, 0x29FCE4F7, 0x1201F602, 0xF506010E, 0xF609FEFD);
	r0 = D(r0, s1_1_0, 0x301702E5, 0x1C0EDFE9, 0xFE020401, 0xFCFFED07);
	r1 = D(r1, s1_1_0, 0xF7FB0AF2, 0xF7FB0701, 0xFFFC0109, 0xFF01070A);
	r2 = D(r2, s1_1_0, 0x1D04D9D7, 0x0BF410F4, 0xF9F4D9EC, 0x11D810EF);
	r3 = D(r3, s1_1_0, 0x1106050D, 0x0C02FA01, 0x03010402, 0x010CE701);
	r4 = D(r4, s1_1_0, 0x02FB0C14, 0x2810E8EE, 0xFBF8F9FB, 0x0B28F405);
	r5 = D(r5, s1_1_0, 0xEF14E801, 0x15EF05FA, 0xFE09DF01, 0x1402F7F6);
	r0 = D(r0, s1_1_1, 0x2E2F0CE4, 0x09E52104, 0xFA1FD9A8, 0x1309F407);
	r1 = D(r1, s1_1_1, 0xF9FF08EC, 0x06001E17, 0x05F81035, 0x04F8110C);
	r2 = D(r2, s1_1_1, 0x140A1B0F, 0x00E23213, 0x19F2270C, 0x11062E28);
	r3 = D(r3, s1_1_1, 0x2100F601, 0x1A0AF905, 0x02000827, 0x0C0C0C14);
	r4 = D(r4, s1_1_1, 0xE9030423, 0x2D12B90E, 0x0902FAE4, 0xE8F5FCEE);
	r5 = D(r5, s1_1_1, 0x031125F7, 0x170219F5, 0x0327F509, 0x23051106);
	r0 = D(r0, s1_1_2, 0x1910F8F4, 0x21E41CE7, 0x0AF903F6, 0x080DF9FD);
	r1 = D(r1, s1_1_2, 0x09010E09, 0x0AF705FD, 0x06FD0600, 0x0502020B);
	r2 = D(r2, s1_1_2, 0xFD1C1926, 0x0E0C10FC, 0xF1EDFA34, 0x130C13F0);
	r3 = D(r3, s1_1_2, 0xEAE2F6F8, 0x0009FB10, 0x06FA040B, 0x0110F5F6);
	r4 = D(r4, s1_1_2, 0xFAFA0EEA, 0x24DEFFF8, 0x12000319, 0xF4FF0711);
	r5 = D(r5, s1_1_2, 0xF1261002, 0x01F1FC08, 0xFCF3FA0F, 0x0C0A00FB);
	r0 = D(r0, s1_2_0, 0x18110B0F, 0x1716F106, 0x140303F4, 0x00040003);
	r1 = D(r1, s1_2_0, 0xFCEF090E, 0xFF00FEFF, 0xFE00FF00, 0xFCFCFC09);
	r2 = D(r2, s1_2_0, 0xFE13ECE0, 0x02FCFE07, 0xFD04EDDC, 0xFA07FB12);
	r3 = D(r3, s1_2_0, 0xF2020105, 0xFC04FF05, 0x0000000A, 0xF60DF904);
	r4 = D(r4, s1_2_0, 0x030104FA, 0x123ADEF5, 0xFEF00405, 0xFF08FDF6);
	r5 = D(r5, s1_2_0, 0x0A1FE0E2, 0x16FC0C18, 0x04FAEEF9, 0x0A09F602);
	r0 = D(r0, s1_2_1, 0x113219E6, 0x07010837, 0x0D0E00FC, 0x0105F8E0);
	r1 = D(r1, s1_2_1, 0x13000AE4, 0x01050600, 0x03FB0203, 0x03FB0510);
	r2 = D(r2, s1_2_1, 0xFC09D9D0, 0xFCFD0A05, 0xFF27EBEB, 0x14FDFFE4);
	r3 = D(r3, s1_2_1, 0xE2F4E5E1, 0x080008F1, 0xFC030210, 0x06FAFA06);
	r4 = D(r4, s1_2_1, 0xFBF60310, 0x0500E9FD, 0x0E0000F6, 0x01F70310);
	r5 = D(r5, s1_2_1, 0x13B121FF, 0x0DEF02E5, 0xF20BFFF5, 0x0B0E02F2);
	r0 = D(r0, s1_2_2, 0xFB07E520, 0x08001212, 0x19110304, 0x0005FD02);
	r1 = D(r1, s1_2_2, 0xFFF70209, 0x09FB08FE, 0xFFFB02FF, 0x03FC0107);
	r2 = D(r2, s1_2_2, 0xFAFACDEC, 0x000404FF, 0x02F6FAF9, 0xFE1AEFF4);
	r3 = D(r3, s1_2_2, 0xFAFEFF03, 0xF9F90102, 0xFFFFFF08, 0x03090100);
	r4 = D(r4, s1_2_2, 0x05F613FF, 0x02F30206, 0x0E04FA0D, 0xFD0A01EF);
	r5 = D(r5, s1_2_2, 0xFD1FFB0E, 0xFAF6010B, 0x0A05FF0F, 0xF408FCFA);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0BFDF500, 0x11F81AF4, 0xEE090210, 0xE8100C08);
	r1 = D(r1, s0_0_0, 0x150BEEF6, 0x0107F7FE, 0xFEFF02FD, 0x0905FBFD);
	r2 = D(r2, s0_0_0, 0x0E0CFFFE, 0x0AFB0EFB, 0xFC1522EE, 0xF5FF07F4);
	r3 = D(r3, s0_0_0, 0x0E03EE10, 0xF5F4F907, 0xFDFE0502, 0xFA05F00F);
	r4 = D(r4, s0_0_0, 0xEAEA0B0D, 0xF3E41719, 0x0A1403FD, 0x0BEFFF0D);
	r5 = D(r5, s0_0_0, 0xE3DD24F2, 0x0714EEFD, 0xF1F00B0B, 0xFC0E12F4);
	r0 = D(r0, s0_0_1, 0xF0D9FA05, 0xC8E7E4FA, 0xD81E030D, 0xE5F4FA0E);
	r1 = D(r1, s0_0_1, 0x1607E2FF, 0x1E0605FA, 0xD6FFF108, 0x0303FA03);
	r2 = D(r2, s0_0_1, 0x1123EE21, 0x430412F1, 0xB3D807E7, 0x0514FF00);
	r3 = D(r3, s0_0_1, 0x35FC24ED, 0xF409F3F4, 0x0A0DD910, 0xECFEE71D);
	r4 = D(r4, s0_0_1, 0x02FA0809, 0xBC1CEFFF, 0x0C03DC11, 0xFF140E14);
	r5 = D(r5, s0_0_1, 0x2721C91D, 0x3B2305E3, 0xEDFE0FF9, 0xF60D18DE);
	r0 = D(r0, s0_0_2, 0xE00B08FF, 0xF9E204F7, 0xE6F900F2, 0x0306010C);
	r1 = D(r1, s0_0_2, 0xFA0208FD, 0xF7FFFB06, 0xF80400FF, 0x0DFE06FB);
	r2 = D(r2, s0_0_2, 0xF4F71BE6, 0x06FA0EFA, 0x99909E1E, 0xEEFAF201);
	r3 = D(r3, s0_0_2, 0x00E4FF09, 0xF210FDFA, 0x06FF010E, 0x0600FEFD);
	r4 = D(r4, s0_0_2, 0x15EB0801, 0x0FF400E1, 0xFBF30614, 0x04F60BF6);
	r5 = D(r5, s0_0_2, 0xE8C98131, 0xC7F5F711, 0xF10C00F6, 0xC90612F4);
	r0 = D(r0, s0_1_0, 0x1405ECFA, 0xFAD109F6, 0xF6FF0811, 0x01031000);
	r1 = D(r1, s0_1_0, 0xF40516E9, 0x07060203, 0x030005F3, 0xF9FC04F6);
	r2 = D(r2, s0_1_0, 0x2EFA10F0, 0xF9F905F0, 0x2F11F0FC, 0x130EFBEB);
	r3 = D(r3, s0_1_0, 0x010BE3FD, 0x1616EAFD, 0xFDFF0002, 0x07FBFA19);
	r4 = D(r4, s0_1_0, 0xF70707F3, 0x1CEFE212, 0x030501F6, 0xE2F00121);
	r5 = D(r5, s0_1_0, 0xFBF24712, 0x161306F3, 0x02FDF917, 0x130F0AFC);
	r0 = D(r0, s0_1_1, 0x35E51411, 0x1B1AD8D3, 0x39193120, 0x08071913);
	r1 = D(r1, s0_1_1, 0xEDF704E4, 0x0DE2EE0C, 0x1A01FCFB, 0xDDF8F904);
	r2 = D(r2, s0_1_1, 0x3CCDEFF8, 0xDDE9D8FD, 0x04E5FDD3, 0xE1CAC70D);
	r3 = D(r3, s0_1_1, 0xB8E0E723, 0x11E913EC, 0xE8F006FF, 0xF8EC0AFD);
	r4 = D(r4, s0_1_1, 0xC9FF1801, 0x3618C925, 0xC7EA18FC, 0xE5EA1112);
	r5 = D(r5, s0_1_1, 0x35F3FF1F, 0xFCD2AC1E, 0x5406F3F3, 0x53E9ECFA);
	r0 = D(r0, s0_1_2, 0xF2FC0BE1, 0xFDEC04FE, 0xF9010C04, 0x010101F5);
	r1 = D(r1, s0_1_2, 0xE700FC09, 0xF014FF08, 0xE903F7FB, 0x0EFF0401);
	r2 = D(r2, s0_1_2, 0xDDD1CC2F, 0xF8FAF905, 0xF6EB3202, 0x0F1A18DA);
	r3 = D(r3, s0_1_2, 0xF0E805E4, 0xF304FBF7, 0x16F90610, 0x08F901F9);
	r4 = D(r4, s0_1_2, 0xF302FDFA, 0xF1EFDAFA, 0x23020613, 0xF8F817F7);
	r5 = D(r5, s0_1_2, 0xB0D4AF14, 0x05F00101, 0xFBF1F002, 0xF41AFBFD);
	r0 = D(r0, s0_2_0, 0xDAEE010F, 0xDCE31F07, 0xF4FE0BFC, 0xF1010AFD);
	r1 = D(r1, s0_2_0, 0x140F02D7, 0xFBFCFA0A, 0xFDFC04FF, 0xFD010205);
	r2 = D(r2, s0_2_0, 0x10E6DDFB, 0x04FE0101, 0x0FF6F5FD, 0x0810EC06);
	r3 = D(r3, s0_2_0, 0x04EE0609, 0xFEFAF309, 0x03000102, 0xEAEF0912);
	r4 = D(r4, s0_2_0, 0x0E14F60E, 0xE9C514F9, 0x06FC00F5, 0x02F80109);
	r5 = D(r5, s0_2_0, 0x0E050DD7, 0xDFF701F5, 0x0719FC03, 0xF900FD00);
	r0 = D(r0, s0_2_1, 0xB2BA0118, 0xF7092A07, 0xF7F8FE0B, 0x0C04F50A);
	r1 = D(r1, s0_2_1, 0xFF13E8EE, 0xECFA13FE, 0x0307F702, 0x0205FE06);
	r2 = D(r2, s0_2_1, 0x14DC2F9E, 0xFCFD09F5, 0x08F2FE2C, 0x0BFA04E4);
	r3 = D(r3, s0_2_1, 0x19E10AF1, 0xEB0F08F0, 0x0104F502, 0x061EF817);
	r4 = D(r4, s0_2_1, 0x04FEEE0A, 0xD0D62F06, 0x0410EE08, 0xFDFD0008);
	r5 = D(r5, s0_2_1, 0x31FB10C6, 0x05EC18DC, 0xDDC51DF0, 0xF3F41EEB);
	r0 = D(r0, s0_2_2, 0xEEC3042F, 0xF70BF9FD, 0xF4EA0111, 0xFAF8FF03);
	r1 = D(r1, s0_2_2, 0xFEF80300, 0x0200F70B, 0xFE020000, 0x03050203);
	r2 = D(r2, s0_2_2, 0x12CC27E6, 0xFDFFFEF6, 0x2030F008, 0xF4CA11FB);
	r3 = D(r3, s0_2_2, 0x03080FF5, 0xF7E206F7, 0x0511FBFF, 0xFEF10C00);
	r4 = D(r4, s0_2_2, 0x0318FBFE, 0x1DE61313, 0x03FCFF07, 0x0911F807);
	r5 = D(r5, s0_2_2, 0xBD9B0602, 0xFCEE0707, 0x00110D12, 0xEDDE06FF);
	r0 = D(r0, s1_0_0, 0x0807F4F1, 0x3217EDFA, 0xF524F303, 0x080AFB02);
	r1 = D(r1, s1_0_0, 0x0FF7FC0A, 0x040AFA04, 0x05FEFB03, 0x01FBF80A);
	r2 = D(r2, s1_0_0, 0x0E10EC07, 0xFB07FEF8, 0x1A0AF3FC, 0x1AECFF01);
	r3 = D(r3, s1_0_0, 0xEB09F410, 0xF505F001, 0x04FEFCFA, 0xF70D0404);
	r4 = D(r4, s1_0_0, 0xECF90F03, 0x15FBF003, 0x10FF00FA, 0xEDF919F5);
	r5 = D(r5, s1_0_0, 0x3CFF25FB, 0x0120FDFD, 0xEDF80BF3, 0x0B1BFDF2);
	r0 = D(r0, s1_0_1, 0xFEF7F4FE, 0x09BCDC0D, 0x1224E600, 0xF9060001);
	r1 = D(r1, s1_0_1, 0xFD02FC01, 0xFD0006F0, 0xFB03FB0D, 0xFEFE0407);
	r2 = D(r2, s1_0_1, 0x0B000DF3, 0x04D91CE9, 0xF2F238D2, 0x08D907F0);
	r3 = D(r3, s1_0_1, 0x27DA13E4, 0x051AFB03, 0xE9D1EA15, 0xF0EB020F);
	r4 = D(r4, s1_0_1, 0x0FF517F1, 0x13F0D03C, 0xEDD715FF, 0xFC36E517);
	r5 = D(r5, s1_0_1, 0x0D0A0EFE, 0x18EF11ED, 0x1604F7F7, 0x041DFFED);
	r0 = D(r0, s1_0_2, 0x0FFEF7FE, 0x051607F4, 0xEF1AF10E, 0x000608FC);
	r1 = D(r1, s1_0_2, 0xFEFA0DF6, 0xFC00F803, 0xFE010401, 0x070105FB);
	r2 = D(r2, s1_0_2, 0x1AE330C0, 0x05FC04F7, 0xAF42FA81, 0xF70CF111);
	r3 = D(r3, s1_0_2, 0x08F8F60B, 0x0504FA01, 0xFFFFFF01, 0x07010FF8);
	r4 = D(r4, s1_0_2, 0x08F810F5, 0x05241BDA, 0xFFFC0600, 0xFC0507FF);
	r5 = D(r5, s1_0_2, 0xF4CB100E, 0xFB08E521, 0xFD09F90E, 0xFB11FF10);
	r0 = D(r0, s1_1_0, 0xE2D0090B, 0xEC1E29CB, 0x0B0B04F8, 0xFD090610);
	r1 = D(r1, s1_1_0, 0x1404F800, 0x01F8FFFE, 0x0FFE0204, 0x13000100);
	r2 = D(r2, s1_1_0, 0xF100E5DC, 0xEC0902F4, 0x0CF1FD18, 0xE2121302);
	r3 = D(r3, s1_1_0, 0xE5F6D70D, 0x1113F408, 0x050005F7, 0xE206F315);
	r4 = D(r4, s1_1_0, 0xF7050B13, 0x060432C0, 0x12F9F508, 0xFEFF04F9);
	r5 = D(r5, s1_1_0, 0x02172BF5, 0xDE0AE114, 0x0915070C, 0x0116FD05);
	r0 = D(r0, s1_1_1, 0x21B80FEF, 0x30CDF02A, 0xFE2FE1F5, 0xEF200EFE);
	r1 = D(r1, s1_1_1, 0x06F2FD00, 0xF0F5FF06, 0x0A00FC15, 0x03FCF608);
	r2 = D(r2, s1_1_1, 0xF9A3A31D, 0xF8EBFE08, 0xF90F1EF9, 0xF8E9F5E8);
	r3 = D(r3, s1_1_1, 0x07B9E4EB, 0xF71911EA, 0xFA220BF7, 0x280B11FF);
	r4 = D(r4, s1_1_1, 0xF307121D, 0x0E01DD3B, 0xE80C15F4, 0xEFF4F811);
	r5 = D(r5, s1_1_1, 0xF6B9E114, 0x1CF5F5F9, 0xE4CB14F5, 0xEF04F409);
	r0 = D(r0, s1_1_2, 0x05E0F510, 0x09F428F3, 0x011608F6, 0x0114FA0C);
	r1 = D(r1, s1_1_2, 0x03F3F912, 0xFCFFF801, 0x03030000, 0x00FE05FD);
	r2 = D(r2, s1_1_2, 0x1800A133, 0xFB070D05, 0x17ED12EB, 0xE9F015E1);
	r3 = D(r3, s1_1_2, 0xECFADF05, 0xF812EF10, 0x03FEF900, 0x05FF06F9);
	r4 = D(r4, s1_1_2, 0xFFF514FB, 0x06200FC1, 0x080311FF, 0xF9FE01EF);
	r5 = D(r5, s1_1_2, 0x1FF0F307, 0xFD19E310, 0xF808F008, 0xF017E518);
	r0 = D(r0, s1_2_0, 0xB8FD08EF, 0xE51910E1, 0xF8010CFF, 0x0EFB09F5);
	r1 = D(r1, s1_2_0, 0x18ED0102, 0x06FB01F7, 0xFBFF07FC, 0xF6FD0303);
	r2 = D(r2, s1_2_0, 0xCD0A0DF0, 0xFE00000D, 0x140013D6, 0xECFFF10F);
	r3 = D(r3, s1_2_0, 0x0403F201, 0xFDFDF107, 0x0802F708, 0xF0FC08FE);
	r4 = D(r4, s1_2_0, 0xFA080701, 0xCA0414C8, 0x12FAFBFE, 0xF7FDFE08);
	r5 = D(r5, s1_2_0, 0x151118E4, 0xF10E01F4, 0xEE00EB02, 0xF0FF0807);
	r0 = D(r0, s1_2_1, 0xD0F922F1, 0xF2FCE702, 0xF107E30D, 0x00FD08F7);
	r1 = D(r1, s1_2_1, 0xF60C02F4, 0xFC0009F7, 0xFDFD0402, 0xF6FC0502);
	r2 = D(r2, s1_2_1, 0xDD1444D1, 0x050007FE, 0xFFFAFFF2, 0xD8070F0E);
	r3 = D(r3, s1_2_1, 0x22F7F9ED, 0xFC040F02, 0xFEF6F808, 0xF2030B06);
	r4 = D(r4, s1_2_1, 0x13FEFE0C, 0xE0F2DAE8, 0xFDF4FE05, 0xFBFD0209);
	r5 = D(r5, s1_2_1, 0xD1F42BF8, 0xF1100B00, 0xEB07F7F5, 0xEB0A26F3);
	r0 = D(r0, s1_2_2, 0x050EE011, 0x0AFEF408, 0xFB1403F5, 0xFD0CFE00);
	r1 = D(r1, s1_2_2, 0x01FA000B, 0x0300FEFF, 0x00FD03FF, 0xFAFE0400);
	r2 = D(r2, s1_2_2, 0xF1F805F5, 0x05FF0203, 0xFD010A0F, 0x111B050B);
	r3 = D(r3, s1_2_2, 0x0CFFF1F9, 0xFF0CFE01, 0xFBFDFD04, 0xFE0BFFFD);
	r4 = D(r4, s1_2_2, 0x030008FB, 0x071AF301, 0xFFFF06FC, 0x03FF02FF);
	r5 = D(r5, s1_2_2, 0x210502FA, 0x080BFB00, 0xF3F518F3, 0xFE0D02FF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.479e-02, -2.881e-02, -3.021e-02, -2.133e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.004e-02, -4.166e-03, 1.162e-02, 6.518e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-5.319e-02, -1.972e-02, -2.342e-02, -4.480e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.468e-02, -5.352e-03, -4.462e-03, -2.287e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.083e-02, -4.864e-04, -1.089e-02, -1.815e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-2.863e-02, -5.026e-02, 5.817e-04, -2.338e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_vk] -conv4
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF5EBEA19, 0x03FC07FA, 0x05FAFD02, 0xFFFA0507);
	r1 = D(r1, s0_0_0, 0x070502FD, 0x01FE0403, 0xFDFA0008, 0x12011BE9);
	r2 = D(r2, s0_0_0, 0xF9FAFD0E, 0x030200FE, 0x06ECEB05, 0x02FAFFFD);
	r3 = D(r3, s0_0_0, 0x05FF0402, 0xFF0000FF, 0xE8F90214, 0x000401FF);
	r4 = D(r4, s0_0_0, 0x00F3FA0B, 0x00FDFB00, 0x1B031C4D, 0xF8FF0B10);
	r5 = D(r5, s0_0_0, 0xFF0301F9, 0xFEF4FB00, 0xFDFB01F8, 0xFF060805);
	r0 = D(r0, s0_0_1, 0xEADC1200, 0x07F7EBF7, 0xF200FE02, 0xFBEF0C0C);
	r1 = D(r1, s0_0_1, 0xEDF6FE04, 0x02F0FF00, 0xF4050805, 0xC6C3E04F);
	r2 = D(r2, s0_0_1, 0xF1110402, 0xFC0106FD, 0x1CE2F4FD, 0xFAFC0800);
	r3 = D(r3, s0_0_1, 0x05050910, 0xFBFD0401, 0xFDFF0401, 0xF90406F9);
	r4 = D(r4, s0_0_1, 0xED01181E, 0x0BF3F5F6, 0xCF813339, 0xFF050115);
	r5 = D(r5, s0_0_1, 0x04FCFF04, 0x010106FF, 0xF8E90000, 0xDFCBF61D);
	r0 = D(r0, s0_0_2, 0x08FAEFF5, 0x2EE6FBFB, 0x0BF60806, 0xFE03FE09);
	r1 = D(r1, s0_0_2, 0x02010205, 0x000103FF, 0xFB020203, 0x10F706FF);
	r2 = D(r2, s0_0_2, 0xFE00FFFF, 0x000300FB, 0x0A0006F9, 0xFF02FDFE);
	r3 = D(r3, s0_0_2, 0xFBFEFFFB, 0x02FC0301, 0x06F9FFEC, 0xFF02FFFC);
	r4 = D(r4, s0_0_2, 0x1CE90411, 0x07F1F70A, 0x2593093E, 0x03F500FA);
	r5 = D(r5, s0_0_2, 0x00FB00FC, 0x000103FF, 0xFFF6F9F3, 0x16EB0315);
	r0 = D(r0, s0_1_0, 0xF3F2DA12, 0x08C8FC15, 0x020806FA, 0x0802FEFE);
	r1 = D(r1, s0_1_0, 0xFA0104FB, 0xFCF5F606, 0x0E040901, 0x0CF518EF);
	r2 = D(r2, s0_1_0, 0x0FE50304, 0x010105FC, 0x11FD1D13, 0x04F4FC00);
	r3 = D(r3, s0_1_0, 0x0BFC0BFC, 0xFD00FEFE, 0xE494FE14, 0xFEEE0202);
	r4 = D(r4, s0_1_0, 0x1AF404F7, 0xFD071B1A, 0xF807FFE9, 0x96C61812);
	r5 = D(r5, s0_1_0, 0x10020AFE, 0xEDF4FFFA, 0x02F405FC, 0x03FAF8FF);
	r0 = D(r0, s0_1_1, 0x878119FC, 0xD9E60B1E, 0xECCE1A13, 0xFCEFFC05);
	r1 = D(r1, s0_1_1, 0x07D00B10, 0xE3D81D0D, 0x9ED90612, 0x89C2E324);
	r2 = D(r2, s0_1_1, 0x08E4FFF4, 0xD1E6070B, 0xAB9F1233, 0x10F908FA);
	r3 = D(r3, s0_1_1, 0x09F8EFFE, 0x0AF50D05, 0xED03EE0B, 0xE9E606FB);
	r4 = D(r4, s0_1_1, 0xDACEEE2A, 0xF2102B13, 0xE01B01E1, 0x170A0203);
	r5 = D(r5, s0_1_1, 0xEEFDFA0D, 0xF7FCFC04, 0xEF0817FB, 0x10FEFFFB);
	r0 = D(r0, s0_1_2, 0xEE04CC14, 0xCA0AFF0B, 0xDE08EBFF, 0xFD02FF00);
	r1 = D(r1, s0_1_2, 0xF2FEFD00, 0xFE06F802, 0x0D05FFF9, 0x0DF206F0);
	r2 = D(r2, s0_1_2, 0xF00DF303, 0xFFFC0300, 0xECEB0927, 0x01FFF7FE);
	r3 = D(r3, s0_1_2, 0xFDFEFFFB, 0xF7F10002, 0x0DF205FC, 0x03000203);
	r4 = D(r4, s0_1_2, 0xE3E9F007, 0xF50D240F, 0xF60FF2F8, 0x04F7FDFC);
	r5 = D(r5, s0_1_2, 0xFD0100FE, 0x01010202, 0xFFFC0203, 0x0100F3FC);
	r0 = D(r0, s0_2_0, 0x0CF7F30E, 0xF80507FC, 0x09F50309, 0xFD01FE00);
	r1 = D(r1, s0_2_0, 0x000200FE, 0x04010305, 0xFAFF08FD, 0x03FA09EC);
	r2 = D(r2, s0_2_0, 0xEF0803F7, 0xFC010001, 0x04F60001, 0x00FAF601);
	r3 = D(r3, s0_2_0, 0x04FEFB04, 0xFD0201FF, 0x06F9060E, 0x04FD0200);
	r4 = D(r4, s0_2_0, 0xE90C1FF6, 0x16FDF11D, 0x0DFEF305, 0xD8FD030B);
	r5 = D(r5, s0_2_0, 0xF805FEFF, 0x02FC0700, 0x04FAFEFE, 0xF80201F8);
	r0 = D(r0, s0_2_1, 0x10DC0900, 0x0CFFFAF9, 0x0108FEF8, 0x0200FDFD);
	r1 = D(r1, s0_2_1, 0xFA00FFFC, 0x0807FEFB, 0x0209FEFD, 0x11F9E019);
	r2 = D(r2, s0_2_1, 0x05EDF10D, 0x15FC0400, 0x0B00F1FA, 0xFBFC0201);
	r3 = D(r3, s0_2_1, 0xFFFEFF01, 0x03FFFEFF, 0xFFFDDCF8, 0x07FEFE03);
	r4 = D(r4, s0_2_1, 0x1DE50728, 0x06A00320, 0x0BF0FE05, 0x1CFF0A02);
	r5 = D(r5, s0_2_1, 0x0901F902, 0x07020302, 0x06FD02FB, 0x00FAFBFD);
	r0 = D(r0, s0_2_2, 0x1901FD08, 0xF4F5FB06, 0x08F90BF9, 0x03FFFFFD);
	r1 = D(r1, s0_2_2, 0x0701FD00, 0x04FC08FC, 0x03FFFB05, 0x0E08FAFE);
	r2 = D(r2, s0_2_2, 0x0002FD05, 0xF6FFFC00, 0x120405F3, 0x02FFFE00);
	r3 = D(r3, s0_2_2, 0x04FFFF02, 0xFDFBFD02, 0xF800FCFF, 0xFD01FD00);
	r4 = D(r4, s0_2_2, 0x0001FAF9, 0xEDCAF62D, 0x0B000A0B, 0x01F803F8);
	r5 = D(r5, s0_2_2, 0x040001FC, 0x04FF0000, 0xFE00FCFF, 0xEA01FDFD);
	r0 = D(r0, s1_0_0, 0x2AFEEEE2, 0xF105FA0D, 0x0101F501, 0x00FEFDFD);
	r1 = D(r1, s1_0_0, 0xF40A0204, 0x01000703, 0x0206FEF7, 0xE3F50807);
	r2 = D(r2, s1_0_0, 0x05FDF1DD, 0xFB040104, 0x14FCF2EB, 0x05FCFEFD);
	r3 = D(r3, s1_0_0, 0xF504FF00, 0xFF020201, 0x13F6F8DD, 0xFE020202);
	r4 = D(r4, s1_0_0, 0xFC0B060B, 0xF701F0FD, 0xE4FDF9FC, 0x08F5F3E6);
	r5 = D(r5, s1_0_0, 0xF902FA01, 0x13F4F3FE, 0x02010605, 0xF2030104);
	r0 = D(r0, s1_0_1, 0xF9ECF4DF, 0x01091307, 0x000C0FFE, 0xF8070CFB);
	r1 = D(r1, s1_0_1, 0x090711F5, 0x0DF4F2FE, 0x0FFD0AF6, 0x1EEADFD9);
	r2 = D(r2, s1_0_1, 0xFA0D07F8, 0xFE070CFE, 0x20E7EEFE, 0xF9070702);
	r3 = D(r3, s1_0_1, 0x0DFAF0FA, 0xF1090900, 0xF700F6FF, 0xFB030302);
	r4 = D(r4, s1_0_1, 0xE7FA14F1, 0xFF0A1405, 0xDB10DD14, 0xF60101F4);
	r5 = D(r5, s1_0_1, 0x08F8F9FF, 0xF3FCF700, 0xFF0710FB, 0x1305F9F6);
	r0 = D(r0, s1_0_2, 0xFB03070B, 0x16D40813, 0x14F1FBF4, 0x02FF02FE);
	r1 = D(r1, s1_0_2, 0x08FB06FA, 0xFBFFF700, 0x0303FEEF, 0x05FC03EE);
	r2 = D(r2, s1_0_2, 0x0300FFFB, 0xFFFD0001, 0xF2F4E911, 0xFEFF02FD);
	r3 = D(r3, s1_0_2, 0x08FEFF00, 0x08FD0900, 0x0002F4FC, 0xFDFFFE00);
	r4 = D(r4, s1_0_2, 0x2AF8ECE8, 0xFEF20C10, 0x210FFBEA, 0x08FEF706);
	r5 = D(r5, s1_0_2, 0x00FCFC03, 0x02FFFFFE, 0xF5FD0404, 0x0EF107FA);
	r0 = D(r0, s1_1_0, 0xF308EDF4, 0x1FF0E8E5, 0xF90A0C00, 0x08FCFC02);
	r1 = D(r1, s1_1_0, 0xEA110705, 0x11F0FBF8, 0xFCFBFBF9, 0xE8F90107);
	r2 = D(r2, s1_1_0, 0x1803F7EE, 0xEE0D0606, 0xD9280A0F, 0x02FCFF01);
	r3 = D(r3, s1_1_0, 0xF71AFF05, 0xFA02FE04, 0x38DAF8DD, 0xFDFC01FF);
	r4 = D(r4, s1_1_0, 0xE51EF500, 0xEC170815, 0x002BEF04, 0x43DFFDB4);
	r5 = D(r5, s1_1_0, 0xFD18FC00, 0x2FD3E9FA, 0xFB0705FC, 0xFD07FCFE);
	r0 = D(r0, s1_1_1, 0x11EE01BA, 0xD702EBED, 0x1AD0EBF4, 0x18FAF500);
	r1 = D(r1, s1_1_1, 0xEB0809F2, 0x0808FAF1, 0x090F01E3, 0xE536FCFC);
	r2 = D(r2, s1_1_1, 0x12FD0EDC, 0xFDFE10F1, 0xCA2AE2F8, 0x08F5F803);
	r3 = D(r3, s1_1_1, 0xD44CFFF7, 0xDD2716F9, 0xE32104E3, 0x10FF15F1);
	r4 = D(r4, s1_1_1, 0xDFDC2FD7, 0xE60EDBFA, 0xF242F1FE, 0xDB0214F6);
	r5 = D(r5, s1_1_1, 0xF13CFEF5, 0xE33004F8, 0x1AF7D7F3, 0xDF24F8F9);
	r0 = D(r0, s1_1_2, 0xC91CEC02, 0xE646E5D6, 0xF22600ED, 0x06000100);
	r1 = D(r1, s1_1_2, 0x13F907F8, 0xF81602F6, 0x02FE00F9, 0x20E90BD9);
	r2 = D(r2, s1_1_2, 0xF806F6F3, 0x13FC0CF7, 0x2DF5FCF7, 0xF7040BF7);
	r3 = D(r3, s1_1_2, 0xFA06FB01, 0x14E10800, 0xF7FCFD00, 0xFF01FFFB);
	r4 = D(r4, s1_1_2, 0x1A14F2DA, 0x0207F0DD, 0xFB10F204, 0x13030403);
	r5 = D(r5, s1_1_2, 0x140600FA, 0x0100FCFD, 0x30010601, 0xE215EB02);
	r0 = D(r0, s1_2_0, 0x10F4EEFD, 0xEA2CF303, 0x07F2FAFC, 0xFEFC0202);
	r1 = D(r1, s1_2_0, 0xFE01FF00, 0x0AF4FDFE, 0xFF01FE01, 0xF8F9FB00);
	r2 = D(r2, s1_2_0, 0xEEFEFB03, 0xFE06FF01, 0x04F8FDFE, 0xFB000001);
	r3 = D(r3, s1_2_0, 0x05F500FF, 0xFF04FE00, 0x03EB0AF6, 0x04FCFF01);
	r4 = D(r4, s1_2_0, 0xE61CE505, 0x190CDDE6, 0x0DF0FE04, 0x09FCFFDF);
	r5 = D(r5, s1_2_0, 0xFD00FD03, 0x0AF9FF01, 0xF90AFE03, 0xFD07FD02);
	r0 = D(r0, s1_2_1, 0x2DAE3209, 0x151304FD, 0x041708FC, 0x000300FF);
	r1 = D(r1, s1_2_1, 0xFA06FFFB, 0x0319FFFC, 0xFD04FBF9, 0x12EDF4F0);
	r2 = D(r2, s1_2_1, 0x1A0EF3F4, 0xFFFE00FB, 0xF7250203, 0x02EE0203);
	r3 = D(r3, s1_2_1, 0x02F3FA00, 0xF401FFFA, 0x04F3F8FC, 0x03FEFBFF);
	r4 = D(r4, s1_2_1, 0x24C515CD, 0x1806F8E4, 0x07DAF606, 0xFE01FAF2);
	r5 = D(r5, s1_2_1, 0xF612FAFF, 0xFBFC0003, 0xF8110400, 0xFEEFFC01);
	r0 = D(r0, s1_2_2, 0xE811E7F7, 0xF5FAF90F, 0xF001FC01, 0xFD00FEFF);
	r1 = D(r1, s1_2_2, 0xFF04FDFD, 0xF5F50000, 0x0304FEFE, 0x18E21AF8);
	r2 = D(r2, s1_2_2, 0x05F806FA, 0x0600FDFF, 0xE719F0F1, 0x04FD0200);
	r3 = D(r3, s1_2_2, 0x05FAFF00, 0x0102FFFE, 0xFA0CFC02, 0x03000201);
	r4 = D(r4, s1_2_2, 0x020401FB, 0x12C51035, 0x07F5FB06, 0x05F9FC09);
	r5 = D(r5, s1_2_2, 0xFF05F9FB, 0x00FFFE00, 0xFF02FAFC, 0x01FA0006);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0702020F, 0xE4F702F8, 0xF9040300, 0x08FF0201);
	r1 = D(r1, s0_0_0, 0x02FE05F9, 0xFC0300FC, 0x09FE02F4, 0xF0090AE9);
	r2 = D(r2, s0_0_0, 0x06FE05EF, 0xFE0204FF, 0x14FB0414, 0x08FF05FE);
	r3 = D(r3, s0_0_0, 0xEBFE03F7, 0x01010100, 0xFB0204FE, 0xF60303F8);
	r4 = D(r4, s0_0_0, 0xF7010404, 0x10F7FD09, 0x8A0915E8, 0x0905FC00);
	r5 = D(r5, s0_0_0, 0x00FC07FF, 0x01020003, 0xF6FFFCF6, 0x0901FF03);
	r0 = D(r0, s0_0_1, 0xE00808D6, 0x15FDFB12, 0xFB01F7F5, 0xF4FEFB0B);
	r1 = D(r1, s0_0_1, 0x11FCFEFD, 0x06FF0002, 0xF304F9FF, 0x06FA0110);
	r2 = D(r2, s0_0_1, 0xF40609FA, 0xF5FE00F4, 0xFFFA0900, 0xFE02FBF4);
	r3 = D(r3, s0_0_1, 0x01FF12F7, 0xFE0002FC, 0x0804F9F9, 0xF9FF00F8);
	r4 = D(r4, s0_0_1, 0xE60EEBF9, 0x08FD00FC, 0x0A1F26FB, 0x08060209);
	r5 = D(r5, s0_0_1, 0xFFFE0605, 0xF90101FC, 0xDE01F7F6, 0x20FC1026);
	r0 = D(r0, s0_0_2, 0x0D0802F9, 0x0202021B, 0x05FF0100, 0xF9000204);
	r1 = D(r1, s0_0_2, 0xFA00FE00, 0xFE02FFFC, 0x0A0004FF, 0xF403000A);
	r2 = D(r2, s0_0_2, 0x1101FD00, 0x0101FFFE, 0xFA05FE02, 0x00FF02FB);
	r3 = D(r3, s0_0_2, 0xFB000102, 0x01FEFE03, 0xFF020DFB, 0x00010201);
	r4 = D(r4, s0_0_2, 0x2BF6000C, 0x0303FF1E, 0xA80923E0, 0x03FBFFF8);
	r5 = D(r5, s0_0_2, 0xFD00FF00, 0xFC010101, 0x0101FCFF, 0x07000008);
	r0 = D(r0, s0_1_0, 0xEA160CE1, 0xD70111FA, 0x08F6F1F8, 0xF30D0903);
	r1 = D(r1, s0_1_0, 0x0E0EFE03, 0xF2090100, 0xFC20F6F5, 0x0DFA0D13);
	r2 = D(r2, s0_1_0, 0xF30BECE7, 0x02080504, 0x0F14FEE2, 0xFAFD04F5);
	r3 = D(r3, s0_1_0, 0xFA101109, 0xFF010201, 0x001301E8, 0x040A0E0D);
	r4 = D(r4, s0_1_0, 0x1EF8EDF6, 0xDF02FBE6, 0xFAFEFA2C, 0xF4F606F1);
	r5 = D(r5, s0_1_0, 0xFF060DFF, 0xF4FCF3FF, 0x07FF0106, 0xFB040601);
	r0 = D(r0, s0_1_1, 0xFB060D04, 0xEB1F1406, 0xEA1A0DFA, 0xF20D1CF2);
	r1 = D(r1, s0_1_1, 0xDB120FEC, 0xF2070200, 0x0500170E, 0xD909EAE2);
	r2 = D(r2, s0_1_1, 0x21F40E07, 0x0F03220A, 0xE50351F6, 0xFCFF1DF3);
	r3 = D(r3, s0_1_1, 0x220333FE, 0x040C08FC, 0xF5F7F308, 0x1B00290A);
	r4 = D(r4, s0_1_1, 0xD924FFEB, 0xC6070AF2, 0x131715F5, 0xF305E802);
	r5 = D(r5, s0_1_1, 0xF8FC0FFB, 0xFAFE1303, 0x210BFD07, 0x26250114);
	r0 = D(r0, s0_1_2, 0xE40D0007, 0xC0FB1811, 0xF9FEFE04, 0x050308FC);
	r1 = D(r1, s0_1_2, 0x1601FDFF, 0xFE02FF00, 0x0AFFF7FD, 0x0BF9F502);
	r2 = D(r2, s0_1_2, 0xF00603FF, 0x080107FF, 0x04F80FD6, 0x1004FFFF);
	r3 = D(r3, s0_1_2, 0x08FE06FC, 0x0103F9FB, 0x080211FE, 0xFD0103FF);
	r4 = D(r4, s0_1_2, 0xE9F718F4, 0xEA090EE3, 0xF4010507, 0x12F80600);
	r5 = D(r5, s0_1_2, 0x04FFFD01, 0xFEFF0200, 0xFEFFFFFE, 0xFE051305);
	r0 = D(r0, s0_2_0, 0x0607FDF7, 0xFEF82108, 0xF7EEFC06, 0xFEF90002);
	r1 = D(r1, s0_2_0, 0xF9F904FD, 0xFDED04FF, 0xF9F7FD0A, 0xF7EB1012);
	r2 = D(r2, s0_2_0, 0x0D0F1005, 0xFEF405F9, 0xF513FFF3, 0x01F703FE);
	r3 = D(r3, s0_2_0, 0x04FF00F9, 0xFFFE0101, 0x0707FBF6, 0x010402F9);
	r4 = D(r4, s0_2_0, 0x0EDD1008, 0x25DFFF27, 0x09F8F8FB, 0x05F508FA);
	r5 = D(r5, s0_2_0, 0xFB0C03FF, 0x00050300, 0x00E30B01, 0xFB010801);
	r0 = D(r0, s0_2_1, 0x06E6DF08, 0x03FE0EFA, 0x08EA0601, 0x03FD03FE);
	r1 = D(r1, s0_2_1, 0x0303FD02, 0x02E50602, 0x1209FCFC, 0x051DDEF7);
	r2 = D(r2, s0_2_1, 0xDD0502F6, 0xFD0DFE01, 0x05030509, 0x0703F6FF);
	r3 = D(r3, s0_2_1, 0xF608F801, 0x01FBFD00, 0x03FB0406, 0xED030502);
	r4 = D(r4, s0_2_1, 0xF80CCFFB, 0xF6FB37F5, 0xF80BEF07, 0x100FFB04);
	r5 = D(r5, s0_2_1, 0xF90409FE, 0x00FE03FF, 0xF81011FF, 0xFBF2FEF6);
	r0 = D(r0, s0_2_2, 0x0E040506, 0xFB0904FF, 0x070802FC, 0x0202FB00);
	r1 = D(r1, s0_2_2, 0xFE02FE01, 0x000600FF, 0x00040800, 0xFAF9FD0C);
	r2 = D(r2, s0_2_2, 0x18FFFD05, 0xF90101FF, 0x28020C02, 0xFAFF0000);
	r3 = D(r3, s0_2_2, 0xFB020700, 0xF601FCFE, 0xFA030204, 0x020202FF);
	r4 = D(r4, s0_2_2, 0x1C0002FE, 0x18001114, 0xF8F6FC04, 0x06FF0100);
	r5 = D(r5, s0_2_2, 0x06FF01FF, 0xFF0002FE, 0x010A08FE, 0xFB0003FF);
	r0 = D(r0, s1_0_0, 0x13EB25F0, 0x03FCFD0C, 0x00F80401, 0x0200FFFE);
	r1 = D(r1, s1_0_0, 0x02FAFD02, 0xFB03FE02, 0x08FAFF06, 0xF519FF09);
	r2 = D(r2, s1_0_0, 0x050505F7, 0x01FDFF00, 0x0AFF19EA, 0x02020200);
	r3 = D(r3, s1_0_0, 0x030202F7, 0x02FE0000, 0x0A0411F6, 0x04FFFD01);
	r4 = D(r4, s1_0_0, 0xFDF50B01, 0x0BF40705, 0x071105EE, 0xF90E05F7);
	r5 = D(r5, s1_0_0, 0x03FF01F7, 0xFD0405FA, 0xFB05FC03, 0xFF00FC01);
	r0 = D(r0, s1_0_1, 0x26FE00FD, 0xFAFE08F0, 0xEF04FCFA, 0x04FFFCEB);
	r1 = D(r1, s1_0_1, 0xFFFD08F7, 0x030B06FF, 0xE3F908F2, 0x2E071BD2);
	r2 = D(r2, s1_0_1, 0x0500FC08, 0xFD010300, 0x05FF06F6, 0x0606FAFE);
	r3 = D(r3, s1_0_1, 0xFBF6FFFF, 0x08FE0500, 0x0100F905, 0xF90307F8);
	r4 = D(r4, s1_0_1, 0xED1B08F0, 0x03ED0A10, 0x2F07E6D8, 0xF2F80203);
	r5 = D(r5, s1_0_1, 0xFEF800FA, 0xF20706FF, 0xFDF80709, 0x04EA07D6);
	r0 = D(r0, s1_0_2, 0x0801F301, 0xE2F9F2ED, 0xF2FFF900, 0xFD00FDFA);
	r1 = D(r1, s1_0_2, 0xFEFFFA05, 0x01000503, 0xF204FE0B, 0x1AF3D5EE);
	r2 = D(r2, s1_0_2, 0xF7FA0603, 0x02010203, 0x17F7FBF9, 0x020101FA);
	r3 = D(r3, s1_0_2, 0x04FDF7FA, 0x12FEFE01, 0x08F9140F, 0xFE030201);
	r4 = D(r4, s1_0_2, 0x0301F605, 0xFEF60709, 0xFEFEC2FD, 0xFBFE05FE);
	r5 = D(r5, s1_0_2, 0x02F9FA00, 0xFE02FF01, 0xFBFB0F0A, 0xEDF9E100);
	r0 = D(r0, s1_1_0, 0xFD0C11E6, 0x0C0208EE, 0xF902FC01, 0xFBF80106);
	r1 = D(r1, s1_1_0, 0xFEFD01F7, 0x05FF09FB, 0xECF90DEB, 0x240CFFFF);
	r2 = D(r2, s1_1_0, 0xFEF00108, 0xFFFDFDFF, 0xEF08F3EF, 0xFE01FF00);
	r3 = D(r3, s1_1_0, 0x01FAFFF7, 0x02FC0201, 0x030C24F3, 0x000306F5);
	r4 = D(r4, s1_1_0, 0x1F10080D, 0x070500DC, 0x0FC310FC, 0x370906FB);
	r5 = D(r5, s1_1_0, 0xF9FEFE00, 0x0C19FC02, 0x0106FF01, 0x0303040C);
	r0 = D(r0, s1_1_1, 0x272AB0CD, 0xF619E4DA, 0x09000407, 0xFDFCFF0D);
	r1 = D(r1, s1_1_1, 0x1F120313, 0x0925FA00, 0x2514DE22, 0x411CDB9E);
	r2 = D(r2, s1_1_1, 0xDEEFCCFD, 0x1B000FF9, 0x02F8CBC3, 0x021FEBF9);
	r3 = D(r3, s1_1_1, 0x060400FB, 0xF2FD09F9, 0x3701D707, 0x0802E612);
	r4 = D(r4, s1_1_1, 0x0C1ECDD4, 0xF0F8FCED, 0xBBAB11F9, 0x19F90904);
	r5 = D(r5, s1_1_1, 0x1D09F2FE, 0xF116F9F9, 0x17E2EB22, 0xE40F0D03);
	r0 = D(r0, s1_1_2, 0x1D13D6EE, 0x00FE030A, 0x0C041104, 0xF9FC1005);
	r1 = D(r1, s1_1_2, 0xEDF9F9F4, 0x1009060A, 0xFBF40C07, 0x01E6D3CE);
	r2 = D(r2, s1_1_2, 0x0C081905, 0xF3FEEC05, 0xE5FB14E7, 0x0AFEF7FE);
	r3 = D(r3, s1_1_2, 0xF3FA0004, 0x0EF9F2FF, 0xF8050305, 0xFEFE0501);
	r4 = D(r4, s1_1_2, 0xF0E233ED, 0x18F11DE8, 0x04EA1D07, 0xF0FD03FF);
	r5 = D(r5, s1_1_2, 0xEE0208FC, 0xF6FE0202, 0xE1FE10F4, 0x13FC1705);
	r0 = D(r0, s1_2_0, 0xFCF300FD, 0x02F80D07, 0x03FF05FB, 0x040105FB);
	r1 = D(r1, s1_2_0, 0xFFFD0203, 0x02FD04FB, 0x04020709, 0x04F1FC05);
	r2 = D(r2, s1_2_0, 0xF7F60DF9, 0x00FA0001, 0x12F4F6F2, 0xFDFA0000);
	r3 = D(r3, s1_2_0, 0x04FE030A, 0x00FE0101, 0xFC0002F0, 0xFEF90304);
	r4 = D(r4, s1_2_0, 0x0CFA0801, 0x160112CC, 0xFF1C04FB, 0x1202DC0C);
	r5 = D(r5, s1_2_0, 0x05FD0202, 0x000D02F8, 0x04FB0404, 0x06FBFF01);
	r0 = D(r0, s1_2_1, 0x20011F09, 0xFED1F50C, 0xFBF61306, 0x03FAFFFE);
	r1 = D(r1, s1_2_1, 0xF8FB08FF, 0x09FB1104, 0xF1F00706, 0x21FCFFF4);
	r2 = D(r2, s1_2_1, 0x1CFEF101, 0xFC020608, 0xF0EEFDDE, 0x0912FFFF);
	r3 = D(r3, s1_2_1, 0x070A01FF, 0x01F80500, 0x25ED0F09, 0xFD0A06F5);
	r4 = D(r4, s1_2_1, 0x29FEF305, 0x2C050191, 0x0DF30514, 0x04F4F105);
	r5 = D(r5, s1_2_1, 0xFFEF0108, 0xF6FE0106, 0x04120808, 0x110AF907);
	r0 = D(r0, s1_2_2, 0x5806F2FD, 0x11150205, 0x0D00ED06, 0x03FFFC03);
	r1 = D(r1, s1_2_2, 0x05FF0100, 0x06FDF0FF, 0xFD010601, 0x080102EB);
	r2 = D(r2, s1_2_2, 0xE9F60B06, 0x02FA0900, 0x02EBE0FA, 0x030101FA);
	r3 = D(r3, s1_2_2, 0x03FF0AFF, 0x0E0202FE, 0xFE0C0B09, 0xF7FC0503);
	r4 = D(r4, s1_2_2, 0x07F30C06, 0xF6FCAFBE, 0x01030B03, 0xEBFE1B04);
	r5 = D(r5, s1_2_2, 0x03F700F9, 0x00FDFFFD, 0x10F406FE, 0xFB0BFD02);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF22EF6F2, 0x00F802FD, 0xFCF80101, 0xFD01F700);
	r1 = D(r1, s0_0_0, 0x01FEFC01, 0x01FA0300, 0xFDF6F907, 0x0DFEF913);
	r2 = D(r2, s0_0_0, 0xFBE0F706, 0x0000FE02, 0x02FEE4F7, 0x0005FF04);
	r3 = D(r3, s0_0_0, 0x01FEF703, 0xFE020003, 0xF901F307, 0xFEFF0003);
	r4 = D(r4, s0_0_0, 0xFE0502FD, 0xF8050EFE, 0xFFFBF717, 0xFAFF0A01);
	r5 = D(r5, s0_0_0, 0x0200FA05, 0xFE03FFFC, 0x0800FD00, 0x02F6FE08);
	r0 = D(r0, s0_0_1, 0xE7F91B19, 0x0115E0E9, 0x020DF2FA, 0xFEF6F3FB);
	r1 = D(r1, s0_0_1, 0x04FEFA01, 0x0100FBFE, 0x0BF9EFF1, 0xECF6BC01);
	r2 = D(r2, s0_0_1, 0x0603EFF8, 0x0100FA02, 0x0206F2EC, 0xFCFA0401);
	r3 = D(r3, s0_0_1, 0x0502F809, 0xFEFEFD00, 0x01ED0002, 0x02FEF501);
	r4 = D(r4, s0_0_1, 0xE9FF02D9, 0x04FCFD00, 0xA2F2ACF7, 0x070704FF);
	r5 = D(r5, s0_0_1, 0x0204F905, 0xFEFB02FF, 0x03090201, 0xFD08D602);
	r0 = D(r0, s0_0_2, 0x0F06E501, 0x0AF215BC, 0xFDF703F9, 0x03FCFE03);
	r1 = D(r1, s0_0_2, 0x03FCFEFE, 0xF902FFF9, 0x03FC0109, 0x050C0B00);
	r2 = D(r2, s0_0_2, 0xF804080A, 0xFFFCFD03, 0xFC000002, 0xFE00FE05);
	r3 = D(r3, s0_0_2, 0x0304FEFA, 0x00F90202, 0x060604FC, 0xFFFFFF03);
	r4 = D(r4, s0_0_2, 0x0DEF1DF5, 0xFE02FCEF, 0x891305CC, 0x04F50DFB);
	r5 = D(r5, s0_0_2, 0xFE05FCFA, 0xFFFCFF02, 0xFF04FEFC, 0x08FE09F1);
	r0 = D(r0, s0_1_0, 0x0F0CF5FD, 0xF4FEDBF3, 0x0401FF04, 0xFEFAF7FC);
	r1 = D(r1, s0_1_0, 0x09F8FC04, 0xFC15FEF9, 0xFB0CE905, 0xED01050D);
	r2 = D(r2, s0_1_0, 0xEC18DDF2, 0x06F9FB02, 0xFC02E91E, 0xFEFFFEFE);
	r3 = D(r3, s0_1_0, 0xFF02F801, 0xFE040003, 0xF420EEF8, 0x000FF705);
	r4 = D(r4, s0_1_0, 0x0AE9FAF5, 0xFFFFE01C, 0x092E18E7, 0xF4CAFEF7);
	r5 = D(r5, s0_1_0, 0x0000F801, 0xFA04FA01, 0xF714FB04, 0xFC06FB00);
	r0 = D(r0, s0_1_1, 0xBDB6FDEE, 0xECB50403, 0xF3D6E5F8, 0xF705F908);
	r1 = D(r1, s0_1_1, 0xDD0DEAFC, 0xF5DB0003, 0xD7CE0018, 0x99F9EEC9);
	r2 = D(r2, s0_1_1, 0xFCD2ED0D, 0xF000EF01, 0xD51FCE02, 0xFAEA0603);
	r3 = D(r3, s0_1_1, 0xE901FDE5, 0x0008FBF6, 0xEA0406FD, 0xF5ECFB03);
	r4 = D(r4, s0_1_1, 0x09E6EFA0, 0x02FEDFF4, 0x04FF12CE, 0x0315FBE6);
	r5 = D(r5, s0_1_1, 0xF103F707, 0x00FF0004, 0xEA09FE13, 0xFAF7F503);
	r0 = D(r0, s0_1_2, 0xFCFB0102, 0x051AF710, 0xF708FD10, 0xF4FEFD04);
	r1 = D(r1, s0_1_2, 0x05F9FF0A, 0xFF05FC03, 0x0108FBF9, 0x070504F3);
	r2 = D(r2, s0_1_2, 0x1403F4FE, 0x08F80200, 0x01FE050C, 0x0204FC03);
	r3 = D(r3, s0_1_2, 0x04FE0407, 0x0CF80002, 0x0FFC0510, 0x0402FFFE);
	r4 = D(r4, s0_1_2, 0xF600FE17, 0x0402E30D, 0xD6EA0D98, 0x03FC060F);
	r5 = D(r5, s0_1_2, 0x03F90106, 0xFDFDFCFF, 0x09F804FD, 0xF50FF603);
	r0 = D(r0, s0_2_0, 0x1100D9F5, 0x170DFE00, 0xFD04EE01, 0x00030100);
	r1 = D(r1, s0_2_0, 0x01FF00FF, 0xFDFEF6F9, 0x00FA0000, 0x0018F917);
	r2 = D(r2, s0_2_0, 0xFFF60A19, 0x02FCFEFE, 0xED031003, 0x0200FD00);
	r3 = D(r3, s0_2_0, 0x00FCFFFC, 0x0003FE01, 0xF60CF402, 0xFFFDF6FB);
	r4 = D(r4, s0_2_0, 0x02110717, 0xFE09F8F0, 0x08F8FB03, 0xD3DD050B);
	r5 = D(r5, s0_2_0, 0x01030201, 0xF902FFFD, 0xFEFD0201, 0xF9040401);
	r0 = D(r0, s0_2_1, 0xBBF91D15, 0xD6F503D1, 0xE4FA0806, 0xFEFE02FE);
	r1 = D(r1, s0_2_1, 0xF9030000, 0xF6F30905, 0x0016F9F8, 0xF3E5B9DF);
	r2 = D(r2, s0_2_1, 0xE90506F0, 0xEF06FCFC, 0xDCE012F5, 0xF9050706);
	r3 = D(r3, s0_2_1, 0xF301000C, 0x0104FC00, 0xF3C90500, 0xF8FEFE02);
	r4 = D(r4, s0_2_1, 0xC4DF04B7, 0xCCC6819C, 0xDC0BFA18, 0x0D0DF6EF);
	r5 = D(r5, s0_2_1, 0xF4FBFFFE, 0xFE09FC01, 0xFB01F9F7, 0xFD070DFB);
	r0 = D(r0, s0_2_2, 0xF116D4F7, 0x06F40EEF, 0x0A0202E5, 0x010203FD);
	r1 = D(r1, s0_2_2, 0x09FEFF02, 0xFFFE00ED, 0xFFFE050B, 0xF9E61113);
	r2 = D(r2, s0_2_2, 0xF600FF0A, 0x0AFCFE03, 0x101709DA, 0x01FD0102);
	r3 = D(r3, s0_2_2, 0xFD010003, 0x05FB03FE, 0x00FEFC05, 0xFC01FF05);
	r4 = D(r4, s0_2_2, 0xFC130608, 0xE7E9FB98, 0xE803FC1F, 0xFDFB0408);
	r5 = D(r5, s0_2_2, 0x070001FD, 0xFE030000, 0x10F9FDFD, 0xFCFE0806);
	r0 = D(r0, s1_0_0, 0xF5D211FC, 0x0307F804, 0xFF110D0D, 0x05F0FDFF);
	r1 = D(r1, s1_0_0, 0xFE0DFF05, 0x05EFF504, 0x00FCFB0C, 0xFD04ED0D);
	r2 = D(r2, s1_0_0, 0x0215010A, 0x00090301, 0x02F40B0A, 0x0100FC04);
	r3 = D(r3, s1_0_0, 0x03020405, 0x02FBFFFE, 0x00FAF705, 0x02FA0404);
	r4 = D(r4, s1_0_0, 0x01FD0509, 0xFE02FF0B, 0x170D0CF7, 0x0007040D);
	r5 = D(r5, s1_0_0, 0xFE040502, 0x04EB040D, 0x0206FD06, 0xFEF8FEF6);
	r0 = D(r0, s1_0_1, 0x182EDD19, 0xE110FFEB, 0x0AEAFAFD, 0x15F3F807);
	r1 = D(r1, s1_0_1, 0x02FD07FF, 0xFAEF0904, 0xFB151F00, 0xEEEF1BF3);
	r2 = D(r2, s1_0_1, 0x01EBFAF5, 0x0005F906, 0x010D2705, 0x0B240003);
	r3 = D(r3, s1_0_1, 0xF3E00907, 0x0006F401, 0x06F909F5, 0xFCFC0405);
	r4 = D(r4, s1_0_1, 0x0FADF1EB, 0xFD0E0005, 0xE11EE7CF, 0xFCA9F4E3);
	r5 = D(r5, s1_0_1, 0xF90D0AFE, 0xFE060407, 0x0BF701FD, 0xE8FF0EEE);
	r0 = D(r0, s1_0_2, 0x08081EF0, 0xFB1C1BF9, 0xFB050CFE, 0x02F60700);
	r1 = D(r1, s1_0_2, 0x00FD01FD, 0x02E407F4, 0xFD0DFDFD, 0x1DF315FD);
	r2 = D(r2, s1_0_2, 0xF51FFF02, 0xFDF905FF, 0x04F11607, 0x05FD02FE);
	r3 = D(r3, s1_0_2, 0x04FCFA03, 0x04FC01FC, 0xFF02FC05, 0x000300FF);
	r4 = D(r4, s1_0_2, 0xF733FB09, 0x051E0CFE, 0xB8A7D50C, 0x00FCFC0E);
	r5 = D(r5, s1_0_2, 0x07F7FC04, 0x01FE00FF, 0xFAE40004, 0x07F40FFC);
	r0 = D(r0, s1_1_0, 0xFE0D2F00, 0xEC0529FE, 0x07E7FFFA, 0xF3020402);
	r1 = D(r1, s1_1_0, 0xFEF903F5, 0xF3EE09FE, 0xF4021F00, 0x0DE2E31B);
	r2 = D(r2, s1_1_0, 0xF6200406, 0x0100F7FB, 0xF8F500FC, 0x000701FF);
	r3 = D(r3, s1_1_0, 0xFFFF02F2, 0x01FEFE03, 0xE1EC0CDF, 0x01FAFAFC);
	r4 = D(r4, s1_1_0, 0xFF10010E, 0x07111414, 0xFCF704D7, 0xF0E90C0E);
	r5 = D(r5, s1_1_0, 0xFFFEF700, 0xFCFDF314, 0x01FEF7FC, 0xFF030902);
	r0 = D(r0, s1_1_1, 0x8C05E233, 0xD20A130D, 0xBCEC1D0F, 0x01F0EBFA);
	r1 = D(r1, s1_1_1, 0xC1FC1A07, 0xF8EF09FE, 0x81FBC517, 0xBAEB2003);
	r2 = D(r2, s1_1_1, 0xE8240814, 0xDCE231FB, 0xD21FE9F2, 0x01F9F706);
	r3 = D(r3, s1_1_1, 0xE3020400, 0xFFFC0D0C, 0xFE0E2AFE, 0xD9121608);
	r4 = D(r4, s1_1_1, 0xEDE01FF4, 0x1014E318, 0x03F30CEE, 0x0FC618E7);
	r5 = D(r5, s1_1_1, 0xF80DF803, 0xFDFC0A05, 0x2605FBF6, 0xE7F60401);
	r0 = D(r0, s1_1_2, 0xFDD93302, 0xF0000DF8, 0xF6ED22F9, 0xE9FCF200);
	r1 = D(r1, s1_1_2, 0xE116F501, 0x09EA02F9, 0x09060EFF, 0x06FAFE04);
	r2 = D(r2, s1_1_2, 0x03020DFE, 0xFF19F6FF, 0xFCF1E008, 0x051201FF);
	r3 = D(r3, s1_1_2, 0x0806FC03, 0xFEF8FCFE, 0x001C0000, 0x08F9F8FE);
	r4 = D(r4, s1_1_2, 0xE603FF08, 0x0C9BF210, 0xF6D30FF9, 0xF717FD0C);
	r5 = D(r5, s1_1_2, 0x03FDFA03, 0x09F7FE00, 0xE10E17FD, 0xE70DFC05);
	r0 = D(r0, s1_2_0, 0xFA0A1811, 0xEC0C05E6, 0xF7FC07F9, 0x00010001);
	r1 = D(r1, s1_2_0, 0x03FEFD00, 0xFE0104F8, 0xFEFAFCFD, 0x05FE0B0C);
	r2 = D(r2, s1_2_0, 0x04FB0400, 0x01FD02FD, 0x0B0313F9, 0x03020201);
	r3 = D(r3, s1_2_0, 0x0302FE07, 0xFF00FEFF, 0xEFF8FDF5, 0xFE0102FF);
	r4 = D(r4, s1_2_0, 0x0B04F402, 0xF2E50BC6, 0x03030F2C, 0xEC03E710);
	r5 = D(r5, s1_2_0, 0x030001FA, 0xFE02FC04, 0x01FDFB01, 0x04FF0104);
	r0 = D(r0, s1_2_1, 0xEBEBEB27, 0x0418F3F1, 0xECFD0DFD, 0x03010802);
	r1 = D(r1, s1_2_1, 0x03FFF401, 0xF6F906FC, 0x000403FD, 0xF3091D07);
	r2 = D(r2, s1_2_1, 0xE7FAF202, 0xF003FC02, 0xF5FF29FC, 0x05FF03FE);
	r3 = D(r3, s1_2_1, 0x0AF6FEFF, 0x02FA0401, 0xFF12F5FE, 0xF5FBF603);
	r4 = D(r4, s1_2_1, 0x04DCFFF9, 0xA9D710F8, 0xFE09F011, 0x1BE803ED);
	r5 = D(r5, s1_2_1, 0x0001FCFF, 0x06F3F902, 0xFCFE0802, 0x0D01FF03);
	r0 = D(r0, s1_2_2, 0x0AFE1DF9, 0x051C0003, 0x0F07F4FF, 0x06F80200);
	r1 = D(r1, s1_2_2, 0x010104FE, 0x0DF5F8FA, 0xFB0FFA03, 0x0116100A);
	r2 = D(r2, s1_2_2, 0xFA190002, 0xFB030101, 0xFC131104, 0xFC0101FF);
	r3 = D(r3, s1_2_2, 0xFF01FB02, 0x02030401, 0x00F207FD, 0x0203FEFF);
	r4 = D(r4, s1_2_2, 0x14E810FC, 0xB1143200, 0x0B0A0008, 0xF718FD13);
	r5 = D(r5, s1_2_2, 0x05040001, 0x04FD0002, 0xFF090302, 0x090306FF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.753e-02, -2.460e-02, -1.280e-02, -1.086e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-6.302e-03, -2.929e-03, -1.739e-02, -1.482e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.645e-02, -6.149e-03, -2.582e-02, -1.539e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.212e-02, -4.672e-03, -1.252e-02, -6.627e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.565e-02, -3.339e-02, -6.275e-02, -1.303e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.630e-02, -2.525e-03, -9.941e-03, -1.771e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC [CuNNy_4x24_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0)))
#define l3(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0)))
#define l4(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0)))
#define l5(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0)))
shared V4 G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
			G[3][ay][ax] = l3(x - 1, y - 1);
			G[4][ay][ax] = l4(x - 1, y - 1);
			G[5][ay][ax] = l5(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.178e-02, -8.944e-03, 9.166e-04, -4.432e-03, -6.748e-03, -4.377e-03, -8.789e-04, -1.697e-06, -1.059e-02, 1.338e-03, -5.119e-03, 2.238e-03, 7.191e-03, -3.633e-03, -2.330e-03, -1.761e-03) * s0_0_0;
	r0 += M4(-4.993e-02, 4.602e-02, -8.723e-03, 4.268e-03, 1.694e-02, -6.655e-03, -7.700e-03, -4.399e-03, 3.032e-02, 4.880e-02, 1.277e-03, -1.323e-02, 1.438e-02, 2.467e-02, -2.381e-03, -2.644e-03) * s0_0_1;
	r0 += M4(1.796e-03, 4.571e-03, -5.438e-04, 1.403e-03, 4.697e-03, 3.009e-02, -5.901e-03, -1.100e-02, 2.394e-03, -1.895e-02, 1.142e-02, 1.314e-03, -1.897e-03, -1.278e-03, -4.454e-04, -3.517e-04) * s0_0_2;
	r0 += M4(-1.593e-02, -5.295e-03, 1.195e-02, -9.413e-03, -4.924e-03, 9.245e-03, 1.967e-02, -1.466e-02, 6.540e-02, -4.248e-03, 3.918e-02, -2.386e-02, -4.867e-02, -3.189e-03, -4.436e-03, -1.116e-02) * s0_1_0;
	r0 += M4(-1.490e-01, 1.538e-01, -1.343e-01, 1.470e-01, -1.802e-01, -1.587e-01, 1.401e-01, 1.547e-01, 1.225e-01, -2.340e-01, -1.618e-01, 1.691e-01, -2.426e-01, -2.627e-01, 7.456e-02, 5.203e-02) * s0_1_1;
	r0 += M4(1.182e-02, 1.264e-02, 8.819e-03, 1.060e-02, 1.690e-02, -3.798e-02, -1.844e-02, 2.347e-03, -1.351e-02, 2.354e-02, 9.036e-04, 1.192e-02, 6.101e-03, -3.534e-02, -8.886e-03, -9.436e-03) * s0_1_2;
	r0 += M4(2.025e-04, -1.655e-03, -1.101e-02, -2.001e-03, 1.959e-02, 7.400e-03, -2.692e-02, 2.284e-03, -1.094e-02, 9.125e-03, -5.327e-02, 1.184e-02, -4.396e-03, -3.034e-04, 4.613e-02, -2.730e-03) * s0_2_0;
	r0 += M4(-7.525e-03, 1.027e-02, -6.189e-02, 5.000e-02, 1.426e-02, 2.565e-02, 3.381e-02, -1.935e-02, -5.376e-03, 1.586e-02, 4.961e-02, -2.860e-03, 2.698e-03, 2.287e-03, 1.416e-01, 1.577e-01) * s0_2_1;
	r0 += M4(6.920e-03, -5.425e-03, 1.381e-02, 8.176e-04, -2.061e-03, 7.909e-04, -2.589e-03, 1.169e-02, -1.350e-03, -1.073e-03, -1.904e-03, -1.383e-02, 4.409e-04, -4.249e-04, 4.413e-03, 3.796e-02) * s0_2_2;
	r0 += M4(3.668e-03, 8.507e-05, 1.824e-03, -1.863e-04, 1.444e-02, -1.165e-03, -2.429e-03, -1.265e-03, -2.030e-03, 8.876e-04, 4.996e-04, 1.461e-03, -1.424e-02, 9.677e-03, -9.877e-03, 4.734e-03) * s1_0_0;
	r0 += M4(8.415e-03, 9.892e-03, 2.593e-03, -7.336e-03, 4.661e-02, 4.161e-02, -3.273e-03, -3.069e-03, 2.205e-02, -1.162e-02, -3.985e-03, 4.276e-03, 4.328e-02, -3.772e-02, 3.194e-03, -5.501e-03) * s1_0_1;
	r0 += M4(-3.787e-04, 7.523e-03, 1.293e-04, -1.362e-04, 9.850e-04, 1.710e-02, -3.064e-04, 5.584e-03, -1.995e-03, -1.035e-02, -9.693e-04, 1.169e-03, -1.578e-03, -8.586e-03, -5.275e-04, 1.853e-03) * s1_0_2;
	r0 += M4(-4.797e-02, 1.616e-02, -1.630e-02, -2.194e-03, 4.163e-02, -6.096e-04, 3.503e-02, -5.059e-03, 1.971e-02, -1.019e-02, -3.771e-03, 1.058e-03, 2.103e-02, 1.804e-03, -1.504e-03, 7.413e-03) * s1_1_0;
	r0 += M4(1.520e-01, -3.115e-01, 2.136e-02, 1.008e-01, -1.795e-01, 1.138e-01, 1.831e-02, 1.753e-01, -2.818e-01, 1.577e-01, 1.312e-01, -6.698e-02, 1.905e-01, -1.685e-01, 1.622e-01, -1.411e-01) * s1_1_1;
	r0 += M4(1.779e-04, 3.357e-02, 2.386e-03, 2.812e-03, 1.683e-02, -3.561e-02, 4.052e-03, -4.631e-02, 5.453e-03, 5.087e-02, -5.255e-03, -2.568e-02, -4.317e-03, -2.353e-02, -3.443e-03, -3.455e-02) * s1_1_2;
	r0 += M4(2.189e-03, 3.456e-03, -4.023e-03, -5.643e-03, -1.471e-04, -3.668e-03, 1.467e-02, -1.403e-03, 2.154e-03, -1.852e-03, -1.112e-02, 2.917e-03, -6.398e-03, -9.003e-04, 4.793e-03, -2.568e-03) * s1_2_0;
	r0 += M4(-3.007e-03, 3.299e-03, 2.850e-02, 1.334e-02, 1.161e-02, 1.799e-03, -8.296e-02, -1.502e-02, 4.983e-03, -8.916e-03, 6.958e-02, -3.698e-02, -3.047e-03, -5.358e-03, 5.903e-02, -7.860e-02) * s1_2_1;
	r0 += M4(-5.733e-05, -1.286e-03, -2.155e-03, 8.364e-03, 9.618e-04, 2.796e-03, 3.168e-03, 1.713e-03, 2.602e-03, -9.307e-03, -5.728e-03, 5.551e-03, -3.243e-03, 3.602e-03, -8.306e-03, -5.934e-04) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(1.462e-02, 2.754e-03, 1.326e-02, -1.034e-02, -1.028e-02, 4.308e-03, 1.185e-03, 3.453e-04, 1.867e-02, -4.615e-03, -1.639e-02, -2.784e-04, 4.476e-03, 5.502e-03, 2.890e-03, 5.480e-03) * s0_0_0;
	r0 += M4(7.150e-03, -6.020e-02, 2.350e-02, -7.472e-03, -1.874e-02, -4.505e-02, 2.514e-03, 1.639e-02, -3.332e-02, 5.432e-03, -5.404e-03, -1.947e-02, -8.229e-03, -1.522e-02, 4.102e-03, 1.230e-03) * s0_0_1;
	r0 += M4(2.471e-04, 5.830e-02, -1.152e-03, -3.200e-03, -1.886e-03, -4.072e-03, -2.348e-04, -6.083e-04, -8.306e-04, -1.041e-02, -7.351e-04, -3.268e-03, 1.624e-03, 3.215e-03, -1.228e-04, 1.426e-04) * s0_0_2;
	r0 += M4(-8.341e-03, -5.919e-03, 2.030e-02, -6.726e-03, 7.745e-03, -2.112e-03, -1.177e-02, 2.314e-02, -2.972e-02, 1.057e-02, 1.992e-02, -8.888e-03, 8.936e-02, 1.248e-02, 7.967e-02, 1.095e-02) * s0_1_0;
	r0 += M4(7.915e-02, 3.868e-02, -2.713e-01, 1.284e-01, 9.300e-02, 9.741e-02, 1.597e-01, -4.404e-01, -1.793e-01, -1.625e-01, 1.841e-01, 1.674e-01, -1.848e-01, 6.831e-02, -1.537e-01, -4.626e-02) * s0_1_1;
	r0 += M4(4.243e-02, -1.792e-01, 3.775e-02, 5.090e-02, -5.339e-04, 4.187e-02, -4.005e-04, 6.274e-02, -3.024e-03, -3.748e-02, 2.971e-03, 4.998e-02, -3.425e-04, -7.788e-02, -9.141e-04, -3.863e-02) * s0_1_2;
	r0 += M4(-1.901e-03, -1.091e-04, -2.605e-03, -2.921e-03, -5.207e-04, 6.349e-05, 7.587e-03, 3.712e-03, 1.461e-03, -2.352e-03, 6.588e-03, 1.311e-03, 7.946e-03, 6.314e-04, 3.284e-02, 2.571e-03) * s0_2_0;
	r0 += M4(-7.405e-03, -3.126e-03, 3.310e-02, -8.157e-03, 1.777e-03, -1.886e-03, 3.528e-02, 5.579e-02, 1.679e-02, 1.295e-02, -1.027e-02, 6.453e-03, 2.046e-02, 1.108e-02, 2.303e-02, 7.983e-02) * s0_2_1;
	r0 += M4(-1.677e-03, 1.304e-02, -1.573e-02, -7.891e-03, 2.335e-05, 5.867e-04, 1.992e-05, 1.776e-02, 7.122e-03, 1.492e-02, -8.608e-03, -2.618e-02, -1.251e-03, 4.223e-03, 1.637e-03, -2.619e-02) * s0_2_2;
	r0 += M4(-6.346e-03, -3.789e-03, -5.078e-04, -1.472e-03, -3.193e-02, 2.204e-03, -1.889e-03, 3.530e-03, -5.611e-03, -4.772e-04, -5.926e-04, -7.726e-05, 6.572e-03, -3.511e-03, 2.718e-03, -3.104e-03) * s1_0_0;
	r0 += M4(-3.333e-02, -3.405e-02, -1.384e-03, -1.343e-03, 3.131e-03, 3.339e-02, 1.806e-04, -3.421e-03, 3.088e-02, -1.188e-02, -1.987e-03, 1.708e-03, -6.346e-02, -2.228e-02, 8.187e-03, 2.112e-03) * s1_0_1;
	r0 += M4(-2.607e-03, -1.221e-02, -2.673e-04, 2.313e-04, -2.710e-05, 9.151e-04, -1.687e-05, -7.447e-05, 7.181e-03, -2.253e-02, -5.541e-03, 6.298e-03, 6.698e-03, -1.344e-02, -1.395e-03, 1.944e-03) * s1_0_2;
	r0 += M4(2.940e-03, -8.319e-05, 9.253e-03, -4.780e-03, -1.929e-01, -3.819e-02, -1.841e-01, -3.723e-02, -5.757e-03, 1.092e-03, -4.751e-03, 9.574e-04, 2.778e-02, 1.651e-03, 3.803e-02, -3.042e-03) * s1_1_0;
	r0 += M4(1.899e-01, 1.096e-01, -9.106e-02, -2.736e-02, 2.093e-02, 1.997e-01, 2.521e-02, 1.900e-01, 1.418e-01, -4.089e-02, 1.548e-01, -4.411e-02, 7.161e-02, 6.171e-02, -3.427e-01, 8.585e-02) * s1_1_1;
	r0 += M4(-5.250e-03, 3.380e-02, 1.399e-03, -3.080e-02, 5.255e-05, 3.492e-03, 4.475e-05, 3.950e-03, 1.181e-02, -8.132e-02, 1.977e-02, -1.333e-01, 9.753e-03, 2.338e-02, 2.163e-02, 2.777e-02) * s1_1_2;
	r0 += M4(-1.958e-03, -2.360e-04, -6.103e-03, 1.652e-03, 1.160e-02, 7.412e-04, -3.197e-02, 6.346e-03, -2.148e-04, 8.038e-05, -4.945e-03, -4.890e-05, 7.937e-05, 9.300e-05, 2.277e-02, 2.552e-03) * s1_2_0;
	r0 += M4(-1.972e-02, -1.380e-02, -3.577e-02, -4.798e-02, 1.050e-03, 2.363e-03, -2.313e-03, 4.846e-02, -2.024e-03, 6.969e-04, 1.893e-02, -3.327e-03, 7.006e-03, 8.894e-03, 6.937e-02, 6.045e-02) * s1_2_1;
	r0 += M4(1.127e-03, -8.813e-03, -2.971e-03, 2.528e-03, -2.787e-05, -4.795e-06, -4.912e-05, 1.733e-04, 4.831e-03, 4.837e-03, 6.388e-03, 2.021e-03, -2.361e-04, 4.355e-03, 1.019e-02, 8.999e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(1.539e-02, -6.032e-03, 9.454e-04, -3.144e-03, 1.362e-01, 5.163e-02, -1.645e-01, -7.109e-02, 1.675e-04, 7.351e-04, 3.042e-04, 6.179e-04, -4.979e-04, 3.623e-06, -5.778e-05, -1.432e-05) * s0_0_0;
	r0 += M4(3.465e-02, -5.520e-02, -9.067e-03, 6.402e-03, 1.077e-01, 1.738e-01, -1.214e-01, -1.800e-01, 1.373e-04, 1.514e-04, 2.394e-04, 4.067e-04, -5.011e-03, -2.108e-03, -2.025e-03, 1.206e-04) * s0_0_1;
	r0 += M4(-8.641e-03, 2.663e-02, -4.625e-03, 1.747e-02, 1.258e-02, 2.615e-02, -1.017e-02, -3.591e-02, -8.045e-05, -3.912e-04, 3.549e-05, 7.554e-06, -9.202e-02, 8.099e-02, 1.132e-02, -4.582e-03) * s0_0_2;
	r0 += M4(-3.169e-03, 1.078e-02, 3.032e-02, -1.817e-03, -8.023e-03, -5.105e-03, -4.420e-04, -3.616e-03, 4.096e-03, 9.168e-03, 7.081e-04, -3.247e-03, -1.640e-03, 9.771e-05, -1.612e-03, 7.063e-05) * s0_1_0;
	r0 += M4(1.465e-01, -1.704e-01, 1.450e-01, -1.869e-01, -3.555e-03, -6.996e-03, -3.818e-04, 4.330e-03, 2.054e-03, 2.690e-03, -2.887e-03, -3.216e-04, 1.062e-03, -1.948e-02, -1.068e-02, -1.223e-02) * s0_1_1;
	r0 += M4(-8.507e-04, -1.007e-02, -7.033e-03, 1.393e-02, -4.713e-04, -2.678e-03, 2.065e-04, -7.676e-04, 2.432e-03, 2.937e-03, -7.754e-04, -1.217e-03, -7.775e-02, 9.302e-02, -2.159e-01, 1.877e-01) * s0_1_2;
	r0 += M4(-1.716e-02, 1.579e-02, -3.910e-02, 2.301e-02, 4.531e-07, 4.018e-07, -2.309e-04, -1.494e-08, -1.548e-01, -7.361e-02, 1.400e-01, 6.050e-02, 2.872e-07, 7.181e-05, -4.625e-04, 2.585e-04) * s0_2_0;
	r0 += M4(-1.745e-03, 1.236e-02, 3.674e-02, -1.402e-02, -5.273e-07, -8.683e-08, 6.636e-05, -1.553e-07, -5.237e-02, -1.441e-01, 5.816e-02, 1.421e-01, 5.230e-03, -1.247e-03, 5.171e-03, -8.694e-03) * s0_2_1;
	r0 += M4(2.344e-04, 1.878e-03, 2.248e-03, -9.144e-03, 3.651e-07, -1.267e-07, 1.581e-04, -2.391e-07, -8.393e-03, -1.170e-02, 1.206e-02, 9.991e-03, -1.310e-03, -1.106e-03, 1.018e-02, -2.650e-03) * s0_2_2;
	r0 += M4(7.851e-03, 2.661e-03, 6.471e-04, 1.785e-03, 8.600e-04, -1.705e-05, 1.654e-04, -4.093e-05, -2.995e-03, 1.161e-03, 3.483e-05, 9.895e-05, -5.811e-03, -3.098e-04, 4.087e-04, 6.666e-04) * s1_0_0;
	r0 += M4(6.564e-02, 6.325e-02, 7.287e-04, -1.490e-03, 3.035e-02, 5.360e-04, 8.262e-03, 8.059e-04, 1.530e-03, 3.545e-03, 9.407e-03, 5.981e-03, -9.545e-03, -1.279e-02, 6.282e-04, 2.791e-03) * s1_0_1;
	r0 += M4(2.684e-03, 2.216e-02, 3.173e-04, -6.524e-04, -7.649e-05, 9.673e-03, 5.270e-03, 1.785e-03, 3.051e-04, -1.601e-03, -2.285e-04, 8.504e-04, 3.911e-05, -2.657e-03, 1.018e-04, 1.792e-04) * s1_0_2;
	r0 += M4(-9.902e-03, 1.304e-02, -7.117e-03, 6.441e-03, 6.759e-03, -3.226e-05, 4.089e-03, 1.219e-04, -2.999e-02, -2.168e-03, -2.520e-02, -2.922e-04, 8.898e-02, 1.357e-02, -2.214e-02, 3.162e-03) * s1_1_0;
	r0 += M4(-4.138e-02, -8.667e-02, 1.882e-01, 8.073e-02, 9.350e-02, 5.577e-02, 9.626e-02, 3.600e-02, -6.165e-02, -7.886e-02, -4.904e-02, -5.239e-02, 5.330e-02, 1.782e-01, -1.965e-02, -5.716e-02) * s1_1_1;
	r0 += M4(4.418e-03, 3.684e-02, -3.132e-03, 7.984e-02, -4.456e-02, -1.733e-01, -4.439e-02, -9.181e-02, 7.913e-04, -1.235e-02, -1.311e-03, -1.746e-02, 8.371e-03, 6.941e-04, -3.148e-04, 8.643e-04) * s1_1_2;
	r0 += M4(3.310e-03, 5.691e-04, -1.534e-02, 4.775e-04, -1.325e-04, -2.063e-04, 2.393e-03, -7.395e-04, -6.297e-04, -4.572e-04, -6.852e-03, -6.622e-06, 3.492e-02, -3.923e-04, -9.251e-02, 1.201e-02) * s1_2_0;
	r0 += M4(-7.790e-03, 1.816e-03, -8.464e-02, -7.124e-02, 3.427e-03, -3.583e-03, 1.287e-02, 9.246e-03, 2.652e-03, 5.681e-04, -1.633e-02, -2.295e-02, 7.403e-03, 4.184e-02, -5.723e-02, -1.753e-01) * s1_2_1;
	r0 += M4(-5.769e-03, -6.524e-03, 6.498e-05, -2.801e-02, -2.325e-03, -1.514e-03, -4.590e-03, -5.597e-02, -4.687e-04, -2.459e-07, 3.526e-04, 6.781e-04, -4.104e-03, -2.707e-03, -7.549e-03, 4.846e-03) * s1_2_2;
	r0 += V4(-6.287e-09, -1.083e-08, -2.314e-09, -1.471e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
