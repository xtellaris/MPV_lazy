// CuNNy 2x12
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_2x12] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(1.228e-02, -1.133e-01, -2.986e-02, 4.364e-04) * s0_0_0;
	r1 += V4(-6.615e-01, 5.000e-03, -2.008e-01, 2.753e-02) * s0_0_0;
	r2 += V4(3.324e-01, 8.807e-03, -1.101e-03, 1.812e-01) * s0_0_0;
	r0 += V4(-1.217e-02, -2.378e-01, 1.460e-01, -4.317e-03) * s0_0_1;
	r1 += V4(7.520e-01, 3.656e-02, 2.095e-01, -3.173e-02) * s0_0_1;
	r2 += V4(-8.349e-02, 1.019e-01, 4.051e-02, -2.979e-01) * s0_0_1;
	r0 += V4(-6.734e-03, -9.601e-02, -2.881e-02, 5.345e-03) * s0_0_2;
	r1 += V4(-9.058e-02, -3.155e-02, 2.199e-01, -3.553e-03) * s0_0_2;
	r2 += V4(-1.878e-01, 6.927e-02, -5.115e-02, -2.924e-01) * s0_0_2;
	r0 += V4(-1.171e-02, 5.094e-01, 6.763e-02, 8.262e-01) * s0_1_0;
	r1 += V4(-1.429e-01, -6.734e-03, 9.402e-02, -8.697e-02) * s0_1_0;
	r2 += V4(5.048e-01, 3.844e-01, -6.518e-02, 1.920e-01) * s0_1_0;
	r0 += V4(-8.379e-01, -2.032e-01, -7.207e-01, -8.109e-01) * s0_1_1;
	r1 += V4(7.152e-02, 6.916e-02, 5.959e-01, 8.322e-01) * s0_1_1;
	r2 += V4(-5.176e-01, -1.116e+00, -1.292e-01, 3.328e-01) * s0_1_1;
	r0 += V4(2.611e-02, 1.109e-01, 1.401e-01, -1.470e-02) * s0_1_2;
	r1 += V4(9.149e-02, -6.658e-01, -4.903e-01, 5.042e-02) * s0_1_2;
	r2 += V4(-3.341e-02, 4.474e-02, -5.605e-01, -4.385e-01) * s0_1_2;
	r0 += V4(-2.539e-04, 9.196e-02, -2.845e-03, -1.086e-02) * s0_2_0;
	r1 += V4(2.723e-02, 7.420e-03, 1.170e-01, -1.023e-02) * s0_2_0;
	r2 += V4(-1.753e-01, 5.797e-02, 7.734e-02, -2.477e-01) * s0_2_0;
	r0 += V4(8.465e-01, -4.212e-02, -2.101e-02, 3.470e-03) * s0_2_1;
	r1 += V4(-3.190e-02, -1.177e-01, -2.390e-01, -7.324e-01) * s0_2_1;
	r2 += V4(-8.428e-02, 1.264e-01, 4.557e-02, 3.097e-01) * s0_2_1;
	r0 += V4(-1.753e-02, -8.298e-02, -6.123e-02, 8.114e-03) * s0_2_2;
	r1 += V4(-1.271e-02, 7.151e-01, -3.072e-01, -3.876e-02) * s0_2_2;
	r2 += V4(2.485e-01, 5.053e-02, 6.482e-01, 2.606e-01) * s0_2_2;
	r0 += V4(-2.582e-04, 1.013e-01, 5.488e-01, -2.073e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.363e-04, -5.457e-02, 4.150e-03, -6.477e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-4.121e-03, 3.954e-03, 3.899e-02, 4.100e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(9.075e-02, -6.138e-02, 3.795e-02, 6.715e-02, -5.418e-02, 3.493e-02, 1.999e-01, -9.857e-02, 4.759e-01, 2.458e-01, 1.830e-01, 5.126e-02, 6.204e-02, 8.363e-03, -4.860e-01, 1.644e-01) * s0_0_0;
	r1 += M4(1.062e-01, -2.486e-02, 1.862e-02, 2.144e-01, 2.212e-01, -6.122e-02, 7.312e-02, -3.738e-02, -6.902e-02, -2.525e-01, -9.866e-02, -4.929e-02, -5.748e-01, 1.350e-01, 5.544e-03, 1.932e-01) * s0_0_0;
	r2 += M4(-7.477e-02, 1.629e-02, -2.955e-01, 5.482e-02, -1.005e-02, 3.371e-01, 7.723e-03, 3.256e-02, -2.616e-01, 6.572e-01, 3.372e-02, 7.503e-03, 1.772e-02, -4.796e-01, -3.135e-02, -1.127e-01) * s0_0_0;
	r0 += M4(5.061e-01, 3.313e-01, 1.000e+00, -1.990e-01, 9.209e-02, 1.480e-01, 2.627e-01, 6.541e-02, -3.978e-01, -1.683e-01, -1.917e-01, 8.640e-03, 4.759e-01, -1.324e-02, -2.871e-01, 4.025e-01) * s0_0_1;
	r1 += M4(8.665e-02, -1.000e+00, -2.229e-02, 1.525e-01, 4.583e-01, 2.514e-01, -4.639e-02, 1.854e-02, 5.909e-01, 6.064e-01, 3.688e-01, -6.683e-02, -7.384e-01, -5.800e-01, -4.038e-01, 4.276e-01) * s0_0_1;
	r2 += M4(-2.300e-01, 4.679e-01, 2.215e-02, 2.964e-01, 1.753e-01, 5.727e-01, -2.340e-02, 1.839e-01, 1.286e-01, -5.760e-01, -5.203e-01, -2.548e-01, -7.090e-01, -8.859e-01, -6.398e-02, -2.194e-01) * s0_0_1;
	r0 += M4(3.636e-02, -6.249e-01, 1.402e-01, 3.523e-01, -4.456e-02, 4.206e-02, -9.765e-02, -2.040e-02, -1.542e-01, -6.400e-02, -6.683e-02, -8.178e-02, 2.765e-01, 1.209e-01, 5.262e-02, 1.650e-01) * s0_0_2;
	r1 += M4(1.000e+00, 2.229e-01, -1.880e-01, 9.467e-02, 4.596e-01, 6.798e-02, -1.283e-01, -1.342e-01, -7.204e-01, -4.576e-01, -9.975e-02, 1.216e-01, -4.723e-01, 1.420e-01, -4.749e-02, 4.209e-01) * s0_0_2;
	r2 += M4(-5.879e-01, 7.095e-01, 4.638e-02, -7.238e-02, 8.886e-02, 3.419e-01, -2.947e-01, 9.339e-02, 1.113e-01, -3.182e-01, 4.558e-01, 1.136e-01, -2.449e-01, -1.625e-01, -2.453e-01, -1.266e-01) * s0_0_2;
	r0 += M4(3.415e-01, 3.057e-01, 4.016e-01, -2.826e-01, -1.540e-01, -4.521e-02, 2.140e-01, 1.725e-01, -1.069e-01, 5.433e-01, 6.910e-01, -9.731e-02, 4.606e-01, 3.140e-01, -8.301e-02, -7.477e-02) * s0_1_0;
	r1 += M4(4.138e-01, 1.879e-02, 5.210e-01, -5.103e-02, 1.966e-01, 1.028e-01, -9.403e-02, 5.183e-02, 3.159e-01, -2.121e-02, -3.135e-01, -5.125e-03, -1.606e-01, -2.720e-01, 5.272e-01, 1.275e-01) * s0_1_0;
	r2 += M4(3.051e-01, 3.893e-01, -1.676e-01, 3.697e-01, -2.159e-01, 2.547e-01, 5.381e-02, 6.160e-02, 2.686e-03, 2.971e-01, -1.458e-01, -3.084e-01, 2.932e-01, -4.481e-01, -2.838e-01, 6.982e-02) * s0_1_0;
	r0 += M4(-1.000e+00, -9.176e-02, 3.605e-01, 6.598e-01, -7.918e-02, 5.106e-02, 7.847e-02, 1.394e-02, -7.728e-02, -1.000e+00, -7.754e-01, -5.673e-01, -4.029e-01, 2.354e-01, 3.571e-01, 4.626e-01) * s0_1_1;
	r1 += M4(-1.380e-01, -1.000e+00, -2.482e-01, -3.282e-01, 5.552e-02, 1.171e-01, -7.427e-02, -1.619e-01, -3.936e-01, -1.219e-01, -1.000e+00, -1.526e-01, 2.922e-01, -1.000e+00, 4.112e-01, 8.490e-02) * s0_1_1;
	r2 += M4(7.385e-01, 8.401e-01, 8.760e-01, 3.911e-01, -1.255e-02, 3.493e-01, 1.367e-02, 2.564e-01, 2.358e-01, 4.397e-03, 4.580e-01, 4.485e-01, 3.921e-01, -7.879e-01, 2.684e-01, 4.458e-01) * s0_1_1;
	r0 += M4(-1.000e+00, -3.273e-01, -1.818e-01, 2.064e-01, 3.150e-01, 6.067e-02, 3.360e-01, -2.268e-02, 3.315e-01, 3.399e-01, 7.077e-03, -3.756e-01, -1.000e+00, -4.252e-01, 1.354e-01, 4.062e-01) * s0_1_2;
	r1 += M4(3.521e-01, 4.126e-01, 1.489e-01, 3.789e-01, 5.132e-01, -9.083e-02, -2.176e-01, -2.100e-02, -1.114e-02, 1.802e-01, 6.046e-02, -2.488e-01, 4.293e-01, -3.473e-01, 1.780e-02, 1.000e+00) * s0_1_2;
	r2 += M4(-3.449e-01, -1.164e-01, 1.578e-01, -1.000e+00, -1.094e-01, 4.033e-01, -4.648e-02, -7.252e-02, -9.802e-02, -1.795e-01, -2.153e-01, 8.889e-04, -1.369e-02, -3.124e-01, 5.267e-01, -6.620e-01) * s0_1_2;
	r0 += M4(2.299e-02, 1.506e-02, -1.895e-02, -8.227e-01, -1.803e-01, -1.903e-01, -1.269e-01, 3.201e-01, 4.443e-01, 4.155e-01, 2.544e-01, 2.937e-02, 2.841e-01, 1.710e-01, 6.372e-02, -3.547e-01) * s0_2_0;
	r1 += M4(-3.216e-02, 1.154e-01, -4.830e-02, -1.674e-01, -4.512e-01, -1.230e-01, -5.756e-02, 1.055e-01, -2.092e-01, 1.966e-01, 4.991e-01, 4.498e-02, 2.487e-01, 1.354e-01, 1.314e-01, -1.606e-01) * s0_2_0;
	r2 += M4(1.179e-01, -4.768e-02, -3.969e-02, 1.070e-01, -5.032e-02, -4.539e-01, 1.488e-01, -2.939e-01, 3.304e-01, -2.104e-01, 4.440e-02, 3.218e-01, 2.107e-01, -8.436e-02, -6.459e-02, 2.823e-01) * s0_2_0;
	r0 += M4(-2.879e-01, 2.040e-01, 1.215e-01, -1.000e+00, 4.628e-01, 3.362e-02, -8.345e-02, 4.506e-01, -6.023e-01, -3.873e-01, -2.087e-01, 4.899e-01, -9.445e-02, 3.353e-01, -9.305e-02, -1.000e+00) * s0_2_1;
	r1 += M4(9.786e-02, 1.516e-01, 1.407e-01, -2.433e-01, -7.237e-01, 1.896e-02, -1.263e-01, 6.249e-02, 4.870e-02, -4.487e-01, 4.313e-01, 2.845e-01, 2.587e-01, 4.066e-02, 2.124e-01, -1.164e-01) * s0_2_1;
	r2 += M4(1.718e-01, 1.275e-01, -1.308e-01, -1.077e-01, 4.439e-02, -6.942e-01, 1.246e-01, 5.954e-02, -4.561e-01, -2.078e-01, 1.504e-01, -3.277e-01, 3.185e-01, -2.502e-01, 8.376e-02, -8.855e-02) * s0_2_1;
	r0 += M4(-4.502e-01, -2.124e-01, -8.324e-02, -9.502e-02, 3.835e-01, 1.655e-01, -1.910e-01, 1.774e-01, -2.859e-02, 1.807e-02, 3.409e-02, 3.759e-01, -7.841e-01, 7.724e-03, -2.911e-01, -1.371e-01) * s0_2_2;
	r1 += M4(-2.824e-01, 2.829e-01, 3.870e-02, -1.625e-01, -1.092e-01, -4.225e-02, 2.038e-01, 8.224e-02, 3.782e-01, 2.557e-01, 1.825e-01, 8.325e-02, -3.397e-01, 1.919e-01, -8.032e-02, 1.323e-01) * s0_2_2;
	r2 += M4(2.020e-01, -3.032e-01, -9.291e-02, -3.311e-01, -2.714e-04, -5.013e-01, -1.152e-01, 7.098e-02, 2.277e-02, 4.519e-01, -2.271e-01, -4.217e-02, 3.061e-01, -4.894e-01, 1.084e-01, -5.843e-01) * s0_2_2;
	r0 += M4(2.530e-02, 8.722e-02, -9.937e-02, -3.438e-02, 4.093e-01, -5.598e-02, -2.167e-02, -2.410e-02, 1.202e-01, -7.723e-02, 3.467e-01, -9.225e-03, 3.532e-01, -1.078e-01, -1.724e-01, 1.376e-02) * s1_0_0;
	r1 += M4(-9.857e-02, 3.260e-02, 2.570e-02, 5.538e-02, 2.428e-01, 1.000e+00, -1.161e-01, 4.006e-01, 3.487e-01, -2.375e-02, -1.864e-03, -8.102e-02, -3.346e-01, 1.099e-01, 1.772e-01, -4.297e-02) * s1_0_0;
	r2 += M4(6.618e-02, -2.466e-01, -4.626e-02, -5.181e-02, -2.606e-04, 3.442e-01, -3.190e-02, 2.108e-01, -1.385e-02, 7.403e-01, 1.318e-01, 1.779e-01, 1.970e-01, -6.371e-03, 7.269e-02, 8.812e-02) * s1_0_0;
	r0 += M4(2.362e-01, -1.069e-03, -3.962e-02, 3.269e-02, 7.778e-02, 3.354e-01, -2.009e-01, -1.193e-01, 6.726e-02, 7.207e-02, 1.534e-01, -7.428e-03, -5.119e-01, -3.572e-01, -2.640e-01, 2.029e-01) * s1_0_1;
	r1 += M4(-1.192e-01, -1.093e-01, -3.966e-02, 1.598e-03, -2.815e-01, -1.435e-01, 1.585e-01, -3.990e-01, 2.732e-01, 9.643e-02, 6.870e-02, -5.594e-02, -5.613e-03, -1.000e+00, -7.424e-01, 2.292e-02) * s1_0_1;
	r2 += M4(-4.680e-02, -3.121e-02, 5.321e-03, 9.914e-02, 1.669e-02, -7.272e-01, -1.830e-01, -7.905e-02, 9.206e-02, 2.830e-01, 5.136e-02, 1.537e-01, -2.380e-01, -4.196e-01, 7.483e-01, 2.626e-01) * s1_0_1;
	r0 += M4(-9.557e-02, 2.131e-02, 7.826e-03, 2.418e-02, 1.297e-03, -3.821e-02, 3.006e-02, -7.398e-02, -9.034e-02, -3.127e-02, 4.139e-02, 3.594e-02, 6.477e-02, 1.181e-01, -1.359e-01, 9.025e-02) * s1_0_2;
	r1 += M4(-8.769e-02, 3.769e-02, -1.133e-01, -4.215e-02, 2.521e-01, 4.149e-02, 7.608e-03, 3.424e-03, 2.823e-01, 4.034e-02, -2.054e-02, -2.582e-02, 8.631e-02, -2.181e-01, -8.066e-03, 2.885e-01) * s1_0_2;
	r2 += M4(7.345e-02, 6.648e-03, 1.312e-02, 6.914e-02, 1.287e-02, 1.012e-01, 1.851e-01, 1.940e-01, -4.725e-03, 1.437e-01, -3.468e-02, 9.155e-03, -6.299e-02, -3.819e-01, 2.895e-01, 8.457e-03) * s1_0_2;
	r0 += M4(-3.097e-03, 2.442e-02, 1.372e-01, -7.907e-02, -3.685e-01, -2.524e-01, -1.688e-01, -3.098e-01, 4.509e-01, -1.010e-01, 5.069e-02, -1.407e-01, -2.190e-01, -1.865e-01, -1.694e-01, -3.473e-01) * s1_1_0;
	r1 += M4(1.538e-01, -1.099e-01, 1.561e-01, -8.760e-02, 7.575e-02, -1.630e-01, 2.892e-01, -4.184e-02, -3.259e-01, -2.325e-02, -2.740e-01, -1.217e-02, 2.407e-03, -9.155e-02, -1.442e-01, -5.700e-02) * s1_1_0;
	r2 += M4(-1.441e-02, 1.105e-03, -7.884e-03, 6.920e-02, 1.653e-01, 5.022e-02, -1.241e-01, -1.778e-01, -2.535e-01, 8.781e-01, 4.821e-02, -6.289e-03, 7.453e-02, -6.365e-01, 4.343e-02, 9.967e-02) * s1_1_0;
	r0 += M4(-4.666e-01, 2.270e-01, 2.154e-01, -5.831e-02, 2.530e-01, 1.682e-01, 2.016e-01, -3.199e-02, 2.007e-01, -1.078e-01, 2.027e-01, -7.744e-02, -1.101e-01, 3.396e-01, -1.470e-01, -1.000e+00) * s1_1_1;
	r1 += M4(2.959e-01, 4.589e-01, 2.102e-01, -1.816e-01, 1.219e-01, -1.967e-01, -2.754e-01, -1.450e-01, -1.392e-01, 1.053e-01, -2.234e-01, 7.296e-02, 1.869e-01, 3.524e-01, 4.473e-01, 2.909e-01) * s1_1_1;
	r2 += M4(5.645e-01, -7.181e-02, -5.805e-03, 1.500e-01, 5.798e-02, -2.342e-02, -4.238e-02, 4.610e-01, -3.576e-02, 4.842e-01, -1.010e-01, 8.012e-02, -1.462e-01, -1.000e+00, -2.377e-01, -5.119e-01) * s1_1_1;
	r0 += M4(1.869e-01, -2.852e-01, 4.661e-02, -1.571e-02, -4.848e-02, 5.213e-03, 5.468e-02, 5.925e-02, 2.610e-03, 2.462e-02, 1.773e-01, 8.607e-03, -6.708e-02, -3.183e-02, 3.991e-02, -2.105e-01) * s1_1_2;
	r1 += M4(-3.832e-01, -5.303e-01, -4.838e-01, -1.848e-02, -3.262e-01, 9.891e-02, -1.017e-01, -6.008e-02, 1.180e-01, -1.605e-02, -5.406e-04, -1.214e-01, -1.144e-01, -2.236e-01, 1.724e-01, -4.690e-02) * s1_1_2;
	r2 += M4(-1.035e-01, -3.394e-02, 3.827e-01, 8.806e-02, -7.800e-02, -5.422e-02, 4.788e-02, 1.631e-03, 8.536e-02, 3.152e-01, -7.593e-02, 8.695e-02, 3.115e-01, -5.137e-01, 3.056e-01, 3.216e-01) * s1_1_2;
	r0 += M4(3.966e-02, -5.287e-02, 8.692e-03, 1.491e-01, 2.791e-01, -1.266e-01, 1.043e-01, 3.687e-01, 6.918e-02, 4.549e-02, 6.953e-02, -1.904e-01, -8.930e-04, 2.170e-02, 5.555e-02, 2.325e-01) * s1_2_0;
	r1 += M4(-4.006e-02, 1.029e-01, -1.999e-01, 5.015e-02, -1.089e-01, -1.038e-01, -1.220e-02, -3.057e-02, 2.886e-01, 2.503e-02, 4.231e-04, -3.054e-04, -7.117e-02, -3.578e-02, 7.360e-02, 6.910e-02) * s1_2_0;
	r2 += M4(-9.023e-02, 2.569e-01, 7.272e-02, -1.311e-02, -2.255e-01, 3.402e-01, -4.224e-02, 2.318e-01, -1.086e-01, 5.165e-01, -8.810e-02, 1.087e-01, 6.829e-02, -1.810e-01, 2.981e-02, -5.544e-02) * s1_2_0;
	r0 += M4(5.367e-01, 1.151e-01, 4.720e-02, 7.876e-02, 2.144e-01, 2.654e-02, -2.401e-02, 2.441e-01, -4.322e-01, 2.262e-02, 1.450e-01, 1.379e-01, 3.145e-02, -9.501e-02, -1.941e-01, -8.334e-02) * s1_2_1;
	r1 += M4(-2.106e-01, -1.747e-01, -8.345e-02, 1.978e-01, 8.912e-02, -1.590e-01, -7.033e-02, -1.945e-02, 2.973e-01, -8.049e-02, -6.199e-02, -1.537e-02, -1.848e-01, 7.010e-03, -1.569e-01, -6.585e-02) * s1_2_1;
	r2 += M4(-3.333e-01, -2.729e-01, -1.728e-02, -1.477e-01, 4.511e-02, 5.072e-02, 5.171e-02, 4.656e-02, -1.602e-01, 4.046e-01, -6.466e-02, -1.699e-01, 9.202e-02, -3.422e-01, 7.397e-02, 1.431e-01) * s1_2_1;
	r0 += M4(-5.778e-01, -3.764e-01, 2.004e-02, 4.208e-02, -9.771e-02, 1.527e-02, 1.261e-01, 1.791e-01, -1.091e-01, -3.931e-02, 3.512e-02, 4.678e-02, 2.235e-01, 7.750e-02, 9.832e-03, -2.850e-01) * s1_2_2;
	r1 += M4(-4.056e-01, -3.617e-01, -1.000e+00, -1.392e-01, -6.094e-02, 1.687e-01, 6.499e-02, -2.520e-02, 2.042e-01, 1.286e-01, -2.124e-03, 1.263e-02, -1.238e-01, 4.276e-02, 2.363e-02, -6.146e-02) * s1_2_2;
	r2 += M4(-3.048e-01, 1.090e-01, 2.412e-01, -3.564e-03, 1.318e-01, -3.905e-02, 2.620e-02, 1.506e-01, -1.225e-01, 2.476e-01, -9.727e-02, 8.748e-02, 1.321e-01, -7.491e-02, 3.707e-02, -5.129e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(6.359e-02, 2.603e-02, 2.283e-01, 6.384e-03, 5.118e-02, -1.394e-02, 3.429e-01, -5.290e-02, -2.618e-01, -1.677e-01, -3.841e-01, 1.768e-03, 4.494e-02, -1.274e-01, -1.750e-01, 4.935e-02) * s0_0_0;
	r1 += M4(5.645e-01, 4.499e-02, 1.338e-02, -8.761e-02, 2.277e-02, -9.420e-02, 2.922e-02, -7.548e-02, -1.721e-01, 4.751e-01, 6.462e-02, -8.084e-02, -5.608e-01, -1.160e-01, 7.070e-02, -4.003e-02) * s0_0_0;
	r2 += M4(1.418e-01, 5.320e-01, -9.201e-02, 2.591e-01, -1.241e-01, -2.354e-01, 2.065e-01, -6.579e-03, -4.674e-01, -1.000e+00, 1.319e-02, -3.434e-01, -1.256e-01, -6.310e-01, 4.279e-02, -1.970e-01) * s0_0_0;
	r0 += M4(-1.199e-01, 1.930e-01, 2.711e-01, -8.764e-02, -2.792e-01, -1.622e-01, -2.019e-05, -1.170e-01, 3.480e-01, 2.481e-01, 2.361e-01, -3.564e-01, -2.677e-01, -8.302e-02, -1.899e-01, 6.812e-02) * s0_0_1;
	r1 += M4(6.115e-01, 5.471e-02, 1.427e-01, -2.300e-01, -4.132e-01, 1.886e-02, 2.445e-02, -1.170e-01, -5.618e-01, -3.323e-02, 8.168e-02, -2.020e-02, -3.446e-01, -8.899e-02, 9.999e-03, 1.755e-01) * s0_0_1;
	r2 += M4(2.685e-01, 7.033e-01, -1.492e-01, 3.514e-01, 6.775e-02, -8.283e-02, 5.646e-02, -5.902e-02, 3.539e-01, 3.266e-01, 1.258e-01, 2.372e-01, -7.936e-02, -3.944e-01, 1.892e-01, -1.392e-01) * s0_0_1;
	r0 += M4(-2.807e-01, -1.078e-01, 9.961e-02, 3.413e-02, 1.267e-01, 6.380e-02, -1.204e-01, 2.871e-02, -3.218e-01, 1.004e-01, -4.234e-02, 2.466e-01, 2.270e-01, -3.076e-02, -4.338e-02, -2.642e-02) * s0_0_2;
	r1 += M4(5.924e-02, -1.794e-02, -7.822e-02, -1.795e-02, -1.540e-01, 1.725e-01, 8.872e-02, -3.569e-02, -1.199e-01, -8.656e-03, -4.560e-02, 1.006e-01, -2.822e-01, -6.472e-02, 5.912e-02, 3.530e-02) * s0_0_2;
	r2 += M4(-7.946e-02, 1.774e-02, -1.238e-01, -1.988e-01, 6.562e-02, -1.205e-01, -3.440e-02, 1.001e-01, 3.389e-02, -1.426e-01, -1.545e-01, -1.631e-01, -4.203e-02, -2.953e-01, 1.070e-01, -2.953e-02) * s0_0_2;
	r0 += M4(-2.042e-01, 1.075e-02, 3.033e-01, -2.799e-01, -2.752e-01, -4.023e-01, -2.510e-01, -3.364e-01, 4.717e-02, -2.244e-01, -6.640e-02, -1.049e-01, 7.428e-02, -5.687e-02, -1.789e-01, -5.642e-02) * s0_1_0;
	r1 += M4(3.316e-01, 1.675e-01, -2.558e-01, -1.764e-01, -2.553e-01, 9.548e-02, -5.461e-01, -1.851e-01, 1.332e-01, 1.466e-01, -3.014e-02, 9.664e-03, -2.355e-01, 2.291e-02, -7.310e-03, 8.287e-02) * s0_1_0;
	r2 += M4(-1.354e-01, 4.873e-01, 1.042e-01, -1.506e-02, -1.534e-01, -1.094e-01, 1.359e-01, -3.428e-01, 1.103e-01, -3.715e-01, 6.641e-02, -2.091e-01, 1.204e-01, -4.381e-01, 8.308e-03, -2.043e-01) * s0_1_0;
	r0 += M4(2.858e-01, 9.278e-02, 2.524e-01, -3.020e-01, 3.727e-01, -1.000e+00, -1.852e-01, -3.541e-01, 3.213e-01, 2.968e-01, 1.910e-01, -1.530e-03, 4.242e-02, -6.459e-02, -3.713e-01, -2.004e-01) * s0_1_1;
	r1 += M4(3.346e-01, 3.069e-01, -8.136e-02, -2.959e-01, -9.365e-01, 1.000e+00, -1.344e-01, 1.154e-03, 5.128e-02, 1.352e-01, -1.082e-01, -2.606e-01, -3.632e-01, -7.202e-02, 1.974e-01, -5.823e-03) * s0_1_1;
	r2 += M4(1.960e-01, 5.948e-01, -1.980e-01, 2.448e-01, 2.077e-01, -8.618e-02, -3.573e-01, 4.525e-02, 1.938e-01, 7.973e-01, -1.918e-01, 5.700e-01, 1.823e-01, -7.129e-01, -1.111e-01, -8.237e-02) * s0_1_1;
	r0 += M4(9.244e-02, -4.351e-03, 1.503e-01, -1.319e-01, -1.879e-02, 2.028e-01, -1.521e-01, 1.973e-02, -7.078e-03, -3.308e-02, 6.112e-02, -4.121e-02, -9.216e-02, 7.592e-02, -7.595e-02, -4.242e-02) * s0_1_2;
	r1 += M4(3.067e-01, 2.161e-01, 8.827e-02, -1.382e-01, -4.815e-01, -1.923e-01, -4.110e-02, -2.153e-01, 4.950e-01, -6.294e-02, 1.942e-01, -9.017e-02, -2.485e-01, -4.272e-02, 1.440e-02, 9.270e-02) * s0_1_2;
	r2 += M4(3.467e-01, 1.306e-01, -3.188e-02, 7.501e-02, 1.519e-01, -1.254e-01, -1.745e-01, -6.548e-02, -1.150e-03, 1.817e-01, -1.180e-01, 7.464e-02, -1.572e-02, -1.714e-01, 1.821e-01, 3.491e-02) * s0_1_2;
	r0 += M4(-1.470e-01, -1.565e-01, -4.033e-02, 6.535e-02, -2.332e-01, -5.311e-02, -7.648e-02, 6.176e-01, 6.178e-02, -1.136e-01, -1.091e-01, 9.766e-02, 9.041e-02, -2.079e-01, -1.852e-01, 1.736e-01) * s0_2_0;
	r1 += M4(4.472e-02, 3.370e-02, -1.761e-01, 4.282e-02, 2.694e-02, -7.936e-02, 2.126e-02, 1.448e-01, 4.236e-02, -3.053e-02, 1.455e-01, 3.288e-01, -3.789e-01, -1.187e-01, -7.973e-02, 1.456e-01) * s0_2_0;
	r2 += M4(-7.575e-02, 3.389e-01, 4.573e-02, -6.627e-02, -1.471e-01, 1.473e-01, 2.537e-02, -1.825e-01, -1.228e-01, -3.379e-01, 8.429e-02, -1.665e-01, -1.937e-01, -2.517e-01, 5.251e-03, -1.448e-01) * s0_2_0;
	r0 += M4(1.270e-01, -1.156e-01, 1.574e-01, -4.542e-01, -4.129e-02, 6.841e-02, 8.026e-02, 9.245e-01, 4.432e-02, 2.130e-01, 1.810e-01, 1.969e-01, 1.734e-01, 2.864e-02, -1.571e-01, 7.736e-03) * s0_2_1;
	r1 += M4(-1.778e-01, 1.892e-01, -1.176e-01, -1.149e-01, 2.809e-01, -4.801e-02, -8.901e-02, 1.663e-01, 5.426e-01, -1.639e-01, -6.955e-02, 2.079e-01, -4.358e-01, -3.733e-02, -5.090e-02, -2.691e-02) * s0_2_1;
	r2 += M4(-2.404e-01, 5.004e-01, -1.498e-01, 1.370e-01, -1.758e-01, 8.687e-02, 1.470e-01, 8.128e-02, -1.957e-01, 4.743e-01, 4.737e-02, 3.907e-01, 2.666e-03, -3.234e-01, 9.454e-03, 1.401e-01) * s0_2_1;
	r0 += M4(3.751e-01, -6.421e-04, 5.294e-02, -3.475e-02, 2.642e-01, 3.828e-02, -1.918e-02, 1.563e-01, 6.190e-02, -1.777e-03, -2.148e-02, -7.180e-02, -1.109e-02, -2.883e-02, -1.763e-01, -3.520e-02) * s0_2_2;
	r1 += M4(7.379e-02, 1.467e-01, -1.221e-01, -9.176e-02, 3.365e-01, 1.837e-02, 1.343e-02, 8.533e-02, 1.846e-01, -1.199e-01, -3.594e-03, -7.225e-03, -2.856e-01, -2.641e-02, 1.404e-02, 3.441e-02) * s0_2_2;
	r2 += M4(-3.320e-01, 4.596e-01, -1.115e-01, 9.124e-02, -9.299e-03, -5.989e-02, 5.479e-02, 1.230e-01, -7.639e-02, 9.351e-02, -8.571e-02, -2.796e-02, 1.113e-01, -4.284e-01, 2.260e-02, -2.468e-01) * s0_2_2;
	r0 += V4(-1.418e-02, -2.284e-02, -2.098e-02, -2.612e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.359e-02, -2.153e-05, 9.277e-03, -1.480e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(7.103e-03, -7.697e-03, 3.689e-03, -2.447e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.530e-02, -2.791e-02, 3.570e-02, -6.697e-02, 3.493e-03, -1.437e-02, -5.507e-03, -7.030e-03, 4.963e-02, -7.731e-03, -4.118e-02, 7.798e-02, 1.518e-01, 1.213e-01, 8.871e-02, -2.243e-02) * s0_0_0;
	r1 += M4(-4.582e-02, 9.736e-03, 1.648e-02, -1.694e-01, 8.743e-03, 7.873e-02, -3.421e-02, -2.551e-01, 1.555e-02, -1.811e-02, -2.226e-03, 1.807e-01, 1.588e-01, 1.845e-01, 9.990e-02, -2.931e-01) * s0_0_0;
	r2 += M4(-5.828e-02, -5.832e-02, -3.650e-02, 1.923e-03, 2.505e-01, -3.491e-02, -1.010e-02, -9.328e-02, -2.112e-01, 7.797e-02, 1.509e-02, 5.962e-03, 2.662e-01, 1.209e-01, 6.137e-02, 1.294e-01) * s0_0_0;
	r0 += M4(-9.810e-02, -9.714e-03, 3.793e-02, -1.346e-02, 5.684e-02, -1.382e-01, 7.109e-02, 1.011e-01, 1.077e-02, -4.754e-02, -8.304e-02, 5.463e-02, -5.596e-01, -1.250e-01, -1.827e-02, -5.293e-01) * s0_0_1;
	r1 += M4(-2.763e-01, -2.950e-01, -7.658e-02, -1.232e-01, -3.254e-01, 1.526e-01, 3.914e-02, -1.435e-01, 1.043e-01, -1.167e-01, 1.626e-01, -2.114e-01, -5.583e-01, -7.910e-01, -3.703e-01, -1.000e+00) * s0_0_1;
	r2 += M4(-6.660e-01, -1.153e-01, -4.285e-02, -2.524e-01, 1.547e-01, -1.053e-01, 1.113e-02, -1.744e-01, 2.226e-01, -2.989e-02, 3.021e-02, 8.987e-02, -8.167e-01, -3.976e-01, -2.388e-01, -8.490e-01) * s0_0_1;
	r0 += M4(1.563e-02, -1.778e-02, 2.262e-02, 2.882e-02, -1.807e-02, 4.732e-02, 9.449e-02, -6.505e-02, 6.650e-03, 1.144e-02, -4.687e-02, 1.070e-02, -3.137e-01, -1.499e-01, -3.867e-02, -1.148e-01) * s0_0_2;
	r1 += M4(-5.378e-02, -1.055e-01, 5.920e-02, 3.619e-03, -1.141e-01, 2.879e-02, -5.254e-02, -7.350e-02, -1.447e-01, 5.629e-02, 7.392e-02, 3.939e-02, -9.391e-01, -8.885e-02, -1.943e-01, -2.509e-01) * s0_0_2;
	r2 += M4(6.509e-02, -6.021e-03, -2.917e-03, 3.056e-02, 1.838e-01, -5.544e-02, 8.725e-02, -7.448e-02, -9.095e-02, -1.131e-02, 2.546e-02, -3.915e-02, -2.531e-01, -1.537e-01, -2.786e-01, -5.294e-01) * s0_0_2;
	r0 += M4(-1.123e-01, -8.532e-02, 1.075e-02, -2.129e-01, -4.475e-02, 5.083e-02, 7.958e-02, 3.449e-01, 1.087e-01, 1.379e-02, 2.046e-02, -2.600e-01, 8.906e-02, 4.949e-02, -2.293e-02, 3.850e-01) * s0_1_0;
	r1 += M4(-3.632e-02, -5.491e-02, -2.992e-01, -1.421e-01, -9.925e-02, -2.784e-01, -1.869e-02, 2.014e-01, 8.626e-02, 3.692e-01, 2.690e-02, -2.054e-02, -5.876e-02, 6.991e-02, 5.514e-02, 2.842e-01) * s0_1_0;
	r2 += M4(-1.623e-01, -1.319e-01, -8.126e-02, -3.022e-01, 6.152e-01, -1.164e-01, 2.196e-02, -1.163e-01, -3.057e-01, 1.370e-01, 2.116e-02, 1.723e-01, 1.061e-01, 1.000e-01, 3.636e-02, 2.030e-01) * s0_1_0;
	r0 += M4(-1.997e-01, -1.027e-01, -2.920e-01, -5.332e-01, 5.801e-02, 2.568e-01, -1.670e-01, -3.700e-01, -1.289e-01, -1.243e-01, 1.440e-01, 3.798e-01, -3.617e-01, -3.481e-01, -2.805e-01, -5.697e-01) * s0_1_1;
	r1 += M4(-4.541e-01, -4.676e-01, -4.271e-01, -4.838e-01, -1.270e-01, 8.586e-01, -2.443e-01, -2.862e-01, 1.411e-01, -5.636e-01, -6.382e-02, 4.622e-01, 5.075e-01, -3.022e-01, 1.599e-01, 8.997e-01) * s0_1_1;
	r2 += M4(-5.503e-01, -1.098e-01, -5.473e-02, -1.573e-01, -3.174e-01, 1.163e-01, -5.146e-02, -1.125e-01, 8.447e-01, -2.960e-02, -1.345e-02, 1.692e-01, -7.478e-01, -3.582e-02, -4.387e-01, 3.046e-01) * s0_1_1;
	r0 += M4(-1.133e-01, 1.525e-03, -9.637e-03, -3.993e-02, 1.341e-01, 3.651e-01, -1.005e-01, 5.530e-03, 1.080e-01, 9.851e-02, -7.454e-02, -1.655e-01, -2.232e-01, -2.729e-02, -5.410e-01, -3.221e-01) * s0_1_2;
	r1 += M4(-8.863e-02, -1.274e-01, -2.274e-01, 6.957e-02, 2.700e-01, 5.752e-01, -1.429e-03, 1.642e-01, 1.421e-01, 1.362e-01, -8.017e-02, 2.456e-01, 2.274e-01, -4.010e-02, -1.000e+00, 2.606e-01) * s0_1_2;
	r2 += M4(-5.585e-02, -6.074e-02, -5.994e-02, -7.035e-02, 2.349e-01, -4.027e-02, 5.291e-01, 1.304e-01, -3.142e-01, 8.227e-02, 1.469e-01, -1.480e-01, -1.118e-01, 1.845e-02, -1.324e-01, 1.314e-01) * s0_1_2;
	r0 += M4(1.792e-02, -7.258e-03, -1.092e-01, 7.476e-02, 2.137e-02, -4.147e-02, -1.948e-01, -4.135e-02, 2.996e-02, 5.969e-02, 1.528e-01, 7.451e-02, -4.875e-02, 2.820e-02, 7.953e-02, -1.652e-01) * s0_2_0;
	r1 += M4(1.576e-02, -6.622e-02, 1.537e-01, 1.220e-01, 2.456e-02, -3.338e-02, 4.274e-02, -2.103e-01, -6.549e-02, 1.170e-01, -5.858e-02, 5.999e-02, -2.328e-02, 1.556e-01, 8.718e-02, -4.248e-01) * s0_2_0;
	r2 += M4(-5.375e-02, 4.096e-02, -2.976e-03, 1.194e-01, 5.460e-02, 5.146e-02, 5.896e-02, 1.064e-01, -2.026e-01, 5.248e-02, 1.367e-03, -8.771e-02, -1.103e-02, 4.006e-02, 3.825e-02, -5.231e-02) * s0_2_0;
	r0 += M4(-4.677e-02, -8.906e-03, -2.238e-01, -1.746e-01, 2.323e-02, -1.841e-01, 8.075e-02, 1.318e-01, -2.501e-01, 5.650e-02, -1.822e-01, -1.752e-01, -7.161e-02, 1.349e-02, -3.217e-01, 1.636e-01) * s0_2_1;
	r1 += M4(1.441e-01, -4.341e-01, 6.837e-02, 8.895e-02, 1.292e-01, 3.086e-01, -1.570e-01, 3.102e-01, -1.401e-01, -2.627e-01, -6.720e-02, -1.520e-01, -3.029e-01, 1.667e-01, -7.699e-02, -5.849e-01) * s0_2_1;
	r2 += M4(-1.170e-01, 4.138e-02, 1.921e-02, 6.151e-02, 1.651e-01, -9.005e-02, -7.243e-02, 3.554e-02, 2.364e-01, 1.640e-01, 2.162e-01, -2.092e-01, 1.768e-01, -3.510e-02, -4.434e-02, -1.996e-01) * s0_2_1;
	r0 += M4(-1.339e-02, -4.507e-03, -4.803e-02, -1.590e-02, -7.380e-03, 3.753e-02, 9.423e-03, 2.687e-01, 8.640e-02, -7.428e-03, -5.234e-02, -1.836e-01, 1.004e-02, -7.020e-02, -8.286e-02, 2.260e-01) * s0_2_2;
	r1 += M4(-1.402e-03, -3.950e-02, 1.177e-01, 1.243e-02, -1.656e-01, 1.636e-01, -5.252e-02, -3.151e-01, -5.601e-02, 2.329e-01, 4.018e-02, -7.263e-02, -2.320e-02, -1.206e-01, 2.510e-01, -6.495e-02) * s0_2_2;
	r2 += M4(-5.745e-03, 3.186e-02, 9.326e-03, -1.333e-03, 3.259e-01, 5.659e-02, 9.757e-02, -8.694e-03, -2.346e-01, 1.086e-01, 3.057e-02, -3.510e-02, -8.680e-03, 5.505e-02, -1.645e-02, -8.101e-02) * s0_2_2;
	r0 += M4(-7.675e-02, -1.466e-02, 7.666e-02, -1.543e-01, 3.800e-02, 1.081e-01, 2.730e-03, 5.701e-02, 4.730e-02, -6.323e-02, -4.868e-02, 1.812e-01, 6.245e-02, 2.706e-02, 2.768e-02, -6.038e-02) * s1_0_0;
	r1 += M4(1.106e-02, -1.423e-01, -9.063e-02, 1.352e-01, 1.010e-01, 1.245e-01, -5.529e-02, 5.618e-01, 6.909e-02, -7.741e-03, 3.452e-01, 2.198e-01, -6.654e-02, 2.099e-01, -1.293e-01, -1.228e-01) * s1_0_0;
	r2 += M4(1.042e-01, -5.273e-02, -5.271e-03, 9.446e-02, 1.706e-01, 9.105e-02, 4.816e-02, -3.773e-01, -1.857e-01, -6.067e-02, -2.055e-02, 9.246e-02, -2.157e-01, 9.769e-02, 3.796e-02, -1.012e-01) * s1_0_0;
	r0 += M4(-6.852e-02, -2.081e-02, 6.343e-02, -3.017e-01, 1.999e-01, 3.049e-02, -3.321e-02, 1.497e-01, -1.159e-01, -3.360e-02, -5.916e-02, 3.248e-01, -3.317e-03, 2.054e-02, 6.468e-02, -1.150e-01) * s1_0_1;
	r1 += M4(2.241e-01, 8.018e-02, -2.464e-01, 5.097e-01, -2.893e-01, -1.822e-01, -5.677e-02, -7.033e-01, 3.340e-01, -1.961e-01, 1.979e-01, -1.212e-01, 1.303e-01, -3.235e-02, -1.068e-01, 2.248e-03) * s1_0_1;
	r2 += M4(-1.536e-01, 2.195e-02, -3.370e-02, -6.307e-02, -1.000e+00, -2.294e-02, -1.177e-02, -6.753e-01, -5.223e-01, -4.806e-02, -4.484e-02, 5.747e-01, 9.818e-02, 5.036e-02, -1.122e-04, 1.755e-01) * s1_0_1;
	r0 += M4(-3.134e-02, 1.367e-03, 4.757e-02, 6.809e-02, 1.109e-01, -2.167e-03, -7.365e-03, 2.951e-02, -1.001e-02, -1.695e-02, -3.359e-02, -1.431e-01, 1.569e-02, -3.654e-03, 1.461e-02, 5.397e-02) * s1_0_2;
	r1 += M4(1.023e-01, -6.289e-02, -4.446e-02, 1.214e-01, -6.543e-01, -7.669e-02, -7.685e-02, -7.585e-01, 2.231e-01, -2.038e-02, 2.285e-02, -3.495e-02, 6.953e-02, -5.112e-02, -8.058e-02, -4.218e-02) * s1_0_2;
	r2 += M4(3.230e-02, -2.766e-02, -3.021e-02, 5.966e-02, 1.563e-01, -9.470e-02, 2.825e-02, 6.698e-02, 3.129e-02, 3.224e-02, 7.050e-04, 5.439e-02, 5.986e-02, 2.570e-02, -5.161e-03, 1.742e-02) * s1_0_2;
	r0 += M4(2.509e-02, 1.461e-01, -1.241e-01, 2.210e-02, 1.002e-01, -1.029e-01, 1.764e-01, -6.950e-01, -4.151e-02, -1.158e-01, 6.534e-02, -4.011e-04, 2.627e-01, 3.014e-01, -6.646e-02, 3.755e-02) * s1_1_0;
	r1 += M4(5.671e-02, -3.956e-02, 2.208e-01, 2.442e-01, -1.153e-01, 3.901e-01, -4.197e-01, -8.128e-01, 4.941e-02, 6.618e-02, -6.229e-02, -1.684e-01, -3.867e-02, 1.627e-01, 1.536e-01, -2.839e-01) * s1_1_0;
	r2 += M4(-1.634e-01, 4.702e-02, -7.572e-03, -1.748e-01, -5.077e-01, 6.161e-02, -1.464e-01, -4.902e-01, -3.187e-01, -1.908e-02, -9.337e-02, 6.525e-02, 3.812e-01, 2.599e-01, 8.652e-02, 1.142e-01) * s1_1_0;
	r0 += M4(1.653e-01, 4.220e-02, 1.175e-01, 8.643e-02, -7.704e-01, -3.623e-01, 2.057e-02, -1.000e+00, -1.849e-01, -8.564e-02, 3.505e-01, -5.453e-01, 1.142e-01, -3.790e-02, 1.374e-01, 2.732e-01) * s1_1_1;
	r1 += M4(-2.011e-01, -6.427e-02, 5.645e-01, 2.530e-01, -1.000e+00, -1.000e+00, -1.000e+00, -1.000e+00, 3.394e-01, 2.704e-02, -9.945e-02, -3.487e-01, -3.176e-01, -2.495e-01, 1.193e-01, -7.872e-01) * s1_1_1;
	r2 += M4(1.947e-01, -7.790e-02, 3.458e-02, -2.239e-01, -1.000e+00, -7.561e-01, -4.723e-01, -4.351e-01, -9.892e-01, 1.375e-01, 3.374e-02, 2.713e-01, -1.371e-01, -1.858e-01, -1.003e-02, -5.482e-01) * s1_1_1;
	r0 += M4(-3.728e-02, -1.124e-02, 7.837e-02, 3.018e-02, -2.230e-01, -8.645e-02, 1.071e-01, 1.481e-01, -2.302e-01, -1.787e-01, 1.150e-01, 2.607e-01, 1.071e-01, -5.366e-03, 1.959e-02, -2.457e-02) * s1_1_2;
	r1 += M4(7.332e-02, 1.716e-02, 2.381e-03, -1.531e-02, -1.802e-01, -2.920e-01, -1.000e+00, -9.146e-02, -2.803e-01, -4.634e-01, 1.856e-01, -6.820e-02, -2.009e-01, 2.032e-02, 1.554e-01, -1.799e-02) * s1_1_2;
	r2 += M4(-8.521e-02, 2.555e-02, -1.288e-02, -5.234e-02, 4.710e-02, -2.039e-01, -1.341e-01, -4.364e-02, 3.543e-01, -2.195e-01, -3.032e-01, 8.486e-02, 1.010e-02, -1.506e-02, 2.854e-02, -5.294e-02) * s1_1_2;
	r0 += M4(-2.642e-02, -1.053e-01, 7.792e-02, -3.147e-01, -3.352e-02, -2.042e-02, -1.543e-02, -4.335e-02, -5.703e-02, 6.358e-03, 4.736e-02, 1.096e-02, 1.231e-01, 1.111e-01, -2.242e-02, 1.372e-01) * s1_2_0;
	r1 += M4(1.344e-01, 3.345e-02, -8.145e-02, 2.164e-01, -1.064e-01, 2.540e-01, 1.098e-01, -1.875e-01, 4.490e-03, 4.562e-02, -9.473e-03, -2.089e-02, -2.862e-02, 5.538e-02, -8.034e-02, -7.788e-02) * s1_2_0;
	r2 += M4(-1.138e-01, 9.518e-03, -5.144e-02, 1.451e-01, -1.117e-01, 7.050e-02, -5.735e-02, 9.832e-02, 1.048e-01, -4.151e-02, -1.696e-02, -3.423e-02, -3.613e-04, 3.138e-02, -2.714e-02, -1.461e-02) * s1_2_0;
	r0 += M4(-1.514e-01, 3.871e-02, -9.778e-03, -1.228e-01, -1.440e-01, -3.673e-02, -2.365e-01, -5.621e-01, 5.715e-02, -2.546e-02, -1.400e-01, 2.889e-01, 1.072e-03, -2.607e-02, -1.831e-01, -2.105e-01) * s1_2_1;
	r1 += M4(1.363e-01, -1.075e-01, -6.749e-02, -2.164e-02, -7.309e-02, -5.947e-01, -4.201e-01, -3.020e-02, -1.153e-01, -4.618e-02, 3.446e-01, -4.400e-02, 1.774e-01, -5.726e-02, -1.420e-02, 1.593e-01) * s1_2_1;
	r2 += M4(-7.980e-02, -8.860e-02, 9.313e-04, -5.304e-02, -2.546e-01, -1.831e-01, -1.293e-01, -7.264e-02, -1.116e-01, -4.936e-02, -5.924e-02, 3.258e-02, 4.450e-02, 2.930e-01, 4.592e-02, 2.156e-01) * s1_2_1;
	r0 += M4(1.036e-01, -2.021e-02, 3.726e-02, -4.378e-02, 6.165e-02, 2.730e-02, -6.829e-03, 1.077e-01, -1.793e-01, -1.722e-02, -3.867e-03, 2.268e-02, 2.135e-02, 3.135e-02, -2.331e-02, 1.777e-02) * s1_2_2;
	r1 += M4(-6.263e-02, 4.146e-02, 6.484e-02, 7.144e-02, 1.460e-01, -1.167e-01, -3.467e-02, 1.065e-01, 8.273e-02, -3.083e-01, 1.089e-01, 4.040e-02, -5.544e-03, -1.065e-02, -1.230e-01, 3.847e-02) * s1_2_2;
	r2 += M4(-5.234e-02, 5.393e-04, -2.282e-02, -6.220e-02, 8.119e-02, 8.279e-02, 1.144e-01, -4.413e-03, 5.123e-02, -5.828e-02, -3.447e-02, 3.735e-02, 3.097e-02, 5.115e-02, 2.586e-02, 5.742e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.059e-02, -2.973e-02, -1.443e-02, 1.012e-01, 2.586e-02, 1.874e-02, -1.995e-03, -8.648e-02, -2.933e-02, -5.416e-03, 5.568e-03, 4.278e-02, 3.838e-02, 7.154e-03, -3.594e-02, 6.086e-02) * s0_0_0;
	r1 += M4(-4.402e-03, -9.203e-02, 3.648e-02, -6.126e-02, -3.055e-02, 5.669e-02, 1.015e-01, -1.586e-01, 1.536e-02, -8.130e-02, -7.901e-03, -6.094e-02, -1.513e-02, 1.318e-02, -4.380e-02, 1.332e-01) * s0_0_0;
	r2 += M4(-4.305e-01, 5.202e-02, -1.548e-02, 2.358e-01, -1.083e-01, -4.129e-03, 1.194e-02, -1.323e-01, 7.201e-02, -5.572e-02, 1.407e-02, 6.470e-02, 1.224e-01, 6.051e-02, 1.682e-02, -5.987e-02) * s0_0_0;
	r0 += M4(-1.265e-01, -8.016e-02, 3.925e-02, -2.166e-01, -1.453e-02, 1.589e-02, 1.687e-02, -1.094e-01, -2.618e-02, 1.729e-02, 2.563e-03, -2.464e-02, 5.372e-02, -1.226e-02, -7.105e-02, -3.090e-02) * s0_0_1;
	r1 += M4(4.532e-01, 6.973e-02, -7.686e-02, 4.786e-01, -2.066e-01, 1.433e-02, 6.022e-02, -1.501e-01, -1.109e-01, 1.902e-02, -7.836e-02, 1.646e-01, 3.292e-02, 1.303e-01, 1.657e-01, -3.057e-01) * s0_0_1;
	r2 += M4(-3.235e-02, 1.172e-01, -4.443e-02, 1.727e-01, -1.806e-01, -8.228e-02, -1.978e-02, -1.822e-01, -2.900e-01, -4.330e-03, -3.039e-02, -2.007e-01, 3.463e-01, 5.110e-02, -4.923e-03, 1.047e-01) * s0_0_1;
	r0 += M4(-9.440e-02, 1.885e-02, -9.169e-03, 1.077e-01, -1.305e-02, -1.817e-02, 2.670e-02, -2.570e-01, -2.076e-02, -2.827e-02, -4.978e-03, 8.692e-03, 2.307e-02, -1.949e-02, -8.365e-03, 1.002e-01) * s0_0_2;
	r1 += M4(2.360e-02, -5.123e-02, 6.854e-03, 5.103e-03, -5.143e-02, -1.235e-01, -2.074e-01, -5.950e-02, -1.959e-02, -1.255e-01, 7.929e-02, -8.479e-02, 5.888e-02, 2.124e-01, -1.111e-02, 1.698e-01) * s0_0_2;
	r2 += M4(2.212e-02, -4.961e-02, -1.368e-02, 2.294e-02, -6.405e-02, -1.250e-02, -3.671e-02, -3.515e-02, 1.223e-01, -5.066e-02, -1.679e-02, 4.845e-02, -1.976e-02, 6.750e-02, -3.355e-02, -2.096e-02) * s0_0_2;
	r0 += M4(-9.550e-02, -1.787e-02, -4.884e-02, -3.134e-01, -6.011e-02, -1.905e-02, 4.710e-04, 5.593e-02, -7.522e-02, -4.757e-02, -1.261e-02, 3.188e-01, 6.324e-02, -5.779e-03, 7.030e-03, 7.104e-02) * s0_1_0;
	r1 += M4(8.423e-02, -7.595e-02, -8.636e-02, 6.566e-02, -8.600e-02, -2.001e-01, -2.051e-01, -4.695e-02, -5.728e-02, -1.675e-01, 8.270e-02, 1.620e-01, -4.604e-03, 8.685e-02, 5.353e-02, 3.482e-02) * s0_1_0;
	r2 += M4(-3.132e-02, -8.529e-02, 5.857e-03, -1.443e-01, 2.588e-01, -1.105e-01, -8.355e-03, 5.664e-02, -3.934e-02, -1.221e-01, -2.845e-02, -1.475e-02, -4.986e-02, 7.340e-03, 4.611e-02, 1.166e-01) * s0_1_0;
	r0 += M4(1.824e-01, 1.567e-01, -2.358e-01, 3.584e-01, 5.972e-02, -6.133e-02, -9.119e-02, -1.725e-01, 4.776e-01, 9.221e-02, -2.212e-01, -1.636e-01, -3.921e-01, 1.941e-01, 6.812e-02, -9.973e-02) * s0_1_1;
	r1 += M4(-3.077e-01, 7.336e-02, 3.943e-01, -6.698e-02, 2.192e-01, 4.880e-01, -5.902e-01, -6.183e-02, 2.339e-01, 4.165e-01, 3.149e-01, -7.290e-01, 1.389e-01, -4.423e-01, -2.141e-01, 5.841e-01) * s0_1_1;
	r2 += M4(3.629e-02, 3.082e-01, 2.705e-01, -1.071e-01, -7.150e-01, 1.538e-01, -4.191e-02, 1.362e-01, -2.868e-01, 3.174e-01, 4.334e-01, 4.616e-01, 6.294e-01, -4.180e-01, -1.746e-01, -5.027e-02) * s0_1_1;
	r0 += M4(-6.702e-02, -1.846e-02, -9.298e-02, -3.239e-02, -1.325e-01, 1.490e-02, -3.027e-02, -1.568e-02, -2.787e-01, -4.868e-02, -1.027e-02, 4.094e-02, 3.720e-01, -3.576e-02, 3.820e-02, -1.715e-01) * s0_1_2;
	r1 += M4(1.082e-01, -2.476e-01, 5.960e-02, -3.556e-02, -6.979e-02, -4.342e-01, 9.508e-03, -2.717e-01, 2.839e-02, -3.585e-01, -1.842e-01, 2.043e-01, 4.244e-02, 5.956e-01, 1.491e-01, -2.071e-01) * s0_1_2;
	r2 += M4(-8.873e-02, 6.456e-02, -3.144e-02, 7.603e-02, 3.680e-01, -1.567e-01, -1.132e-02, 9.009e-02, 2.988e-02, -8.701e-02, -1.527e-01, -4.844e-03, -1.542e-01, 2.376e-01, 2.704e-02, -1.919e-04) * s0_1_2;
	r0 += M4(1.415e-02, 1.207e-02, -1.352e-02, 1.025e-01, -3.463e-02, 2.888e-02, -1.080e-01, -4.115e-04, -1.570e-02, -6.679e-02, 5.471e-02, -2.211e-01, 5.831e-02, 2.460e-03, 6.839e-02, 3.821e-02) * s0_2_0;
	r1 += M4(1.007e-02, -4.948e-02, -3.457e-03, 9.404e-02, 6.338e-02, -7.299e-02, 4.971e-02, -1.135e-01, 1.527e-02, 9.838e-02, -1.060e-01, -4.035e-02, -1.311e-02, -1.588e-02, -5.579e-02, 3.479e-02) * s0_2_0;
	r2 += M4(1.116e-01, -4.512e-03, 4.875e-03, 1.145e-02, 2.317e-01, -6.480e-02, -1.435e-03, -7.740e-02, -2.532e-01, -8.414e-02, -3.748e-02, -5.358e-02, 1.532e-02, 1.493e-02, 8.853e-03, -5.043e-02) * s0_2_0;
	r0 += M4(2.009e-02, -1.737e-02, 1.225e-02, -4.485e-02, 1.313e-01, -3.167e-02, 5.182e-02, 5.415e-02, -1.959e-02, 5.714e-02, 4.078e-01, 3.010e-01, 1.889e-01, 1.528e-02, 1.120e-01, 1.765e-01) * s0_2_1;
	r1 += M4(1.932e-02, 1.041e-01, 2.472e-02, -1.677e-01, -1.658e-01, 1.038e-01, 1.160e-01, -8.823e-02, -9.042e-02, -3.765e-01, -2.628e-01, 3.251e-01, -5.965e-02, 1.347e-01, 1.142e-01, -8.971e-02) * s0_2_1;
	r2 += M4(-1.026e-01, 7.707e-02, -8.048e-04, 7.725e-02, -2.686e-01, -2.114e-02, -7.935e-02, -2.556e-02, 2.716e-01, -2.593e-01, -4.386e-02, -9.657e-02, 1.320e-01, 9.143e-03, 5.994e-02, -3.281e-02) * s0_2_1;
	r0 += M4(-6.156e-02, -5.475e-03, -3.692e-03, -5.458e-02, -9.094e-02, 3.106e-03, 1.999e-02, 7.732e-02, 2.005e-01, 2.470e-02, -2.923e-02, -1.568e-02, 6.155e-02, 8.216e-03, 1.031e-01, 8.168e-02) * s0_2_2;
	r1 += M4(4.651e-02, -1.519e-01, -1.900e-03, 1.999e-02, 8.618e-02, -1.501e-01, -8.307e-02, 1.259e-01, -9.175e-02, 1.215e-01, 6.436e-02, -2.396e-01, -2.824e-04, 7.854e-02, -8.667e-02, 1.280e-01) * s0_2_2;
	r2 += M4(2.567e-02, 1.219e-02, -2.533e-02, 3.175e-02, 9.430e-02, -9.815e-03, -1.872e-02, 7.377e-02, -1.942e-01, 9.644e-02, 8.491e-02, -7.077e-02, 5.101e-02, -4.516e-02, -2.532e-02, 1.716e-02) * s0_2_2;
	r0 += V4(1.522e-03, 3.565e-05, -6.186e-03, -1.187e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-9.550e-03, -1.035e-02, -1.137e-02, -6.586e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-5.950e-03, 1.130e-03, 2.250e-03, -1.098e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-9.433e-02, 6.468e-03, 5.755e-04, 2.395e-02, 3.323e-03, 8.409e-04, 1.133e-03, 1.520e-03, -9.448e-02, -2.182e-02, -4.065e-02, -1.318e-04, 9.313e-03, -9.101e-03, 1.374e-02, 1.080e-03) * s0_0_0;
	r0 += M4(-9.081e-02, -2.524e-01, -2.843e-02, 1.332e-02, -4.309e-02, -3.768e-02, 3.449e-03, -1.807e-02, 2.483e-01, 1.936e-01, -2.478e-01, -2.861e-01, -4.574e-02, -7.854e-02, 6.568e-02, 2.975e-03) * s0_0_1;
	r0 += M4(-2.433e-02, 1.991e-02, -1.362e-02, -2.057e-02, -2.364e-02, 8.045e-02, -3.391e-03, -2.980e-02, -1.661e-02, -8.005e-04, -2.584e-02, -5.664e-02, -3.938e-03, 3.204e-02, -8.266e-03, -1.401e-02) * s0_0_2;
	r0 += M4(4.229e-02, 3.931e-02, -2.156e-02, 5.750e-02, 4.357e-02, 1.108e-03, 3.058e-02, -4.015e-03, -1.862e-03, -7.042e-04, 1.304e-02, 6.971e-03, 1.669e-02, -4.233e-03, 6.811e-02, -1.477e-02) * s0_1_0;
	r0 += M4(9.644e-02, 8.032e-02, 1.509e-01, -2.466e-01, -3.488e-02, -1.548e-01, -1.861e-01, -1.615e-01, 1.754e-03, -1.408e-03, 1.635e-01, 1.799e-01, 1.781e-01, 1.847e-01, -4.463e-01, 1.313e-01) * s0_1_1;
	r0 += M4(1.155e-03, 2.488e-02, -1.379e-03, 7.451e-02, 5.166e-02, 2.247e-01, 6.511e-02, 3.142e-01, 4.191e-04, -8.543e-03, 8.439e-03, 2.243e-02, 4.138e-02, -8.858e-02, 4.783e-02, -6.616e-02) * s0_1_2;
	r0 += M4(6.556e-03, 2.209e-03, 1.758e-02, 1.752e-02, -1.096e-02, -6.249e-04, -1.311e-03, -3.495e-03, -8.690e-05, 2.362e-07, 2.217e-04, -1.384e-07, -1.781e-03, -2.120e-06, 1.250e-03, -3.768e-03) * s0_2_0;
	r0 += M4(-5.095e-03, -4.139e-03, 2.136e-02, 4.430e-02, -2.191e-02, -8.874e-03, -3.650e-02, -3.376e-02, -6.832e-06, -2.100e-07, -4.378e-03, -3.951e-03, -9.229e-03, -4.787e-03, 7.544e-02, 1.070e-02) * s0_2_1;
	r0 += M4(-4.102e-05, -6.081e-05, -8.219e-04, 1.193e-02, 7.165e-03, 1.120e-02, -1.142e-03, 4.770e-03, 5.750e-06, 8.225e-07, 1.987e-04, -1.805e-03, 7.862e-04, -1.774e-03, 1.303e-02, -3.323e-03) * s0_2_2;
	r0 += M4(-2.955e-02, -3.772e-03, 1.010e-02, -3.713e-03, 3.138e-02, 3.218e-03, -1.980e-02, 4.578e-03, 1.514e-02, -6.075e-03, 7.531e-03, 8.875e-03, 3.869e-03, -2.311e-04, -3.288e-03, 8.785e-05) * s1_0_0;
	r0 += M4(-4.850e-02, 3.461e-03, 7.614e-03, -3.951e-03, 1.087e-01, -1.304e-01, -1.194e-04, 3.821e-02, 8.035e-02, 1.082e-01, -3.211e-02, -1.447e-02, 5.604e-02, 6.309e-03, -1.467e-02, -6.187e-03) * s1_0_1;
	r0 += M4(-4.582e-03, 3.037e-03, 4.471e-03, -8.156e-03, -1.201e-02, 1.486e-02, -5.010e-03, -4.214e-03, -5.447e-03, -9.549e-03, 6.212e-03, 4.896e-03, 3.230e-02, 3.259e-02, -1.581e-02, -1.108e-02) * s1_0_2;
	r0 += M4(5.725e-02, 3.033e-02, 7.017e-03, -1.145e-02, 4.236e-02, -6.207e-03, 1.071e-01, -1.759e-02, 1.135e-01, 9.492e-03, -1.423e-01, -6.050e-03, 5.639e-02, -1.222e-02, 3.982e-03, -9.136e-03) * s1_1_0;
	r0 += M4(1.313e-01, -4.743e-01, -1.773e-02, 2.783e-01, 2.075e-01, -2.445e-01, 3.174e-01, -3.603e-01, 1.429e-01, 2.204e-01, -1.042e-01, -4.035e-01, -3.682e-01, 2.832e-02, 2.071e-01, 1.276e-01) * s1_1_1;
	r0 += M4(-1.484e-02, 4.070e-02, -1.211e-03, -3.446e-03, -2.489e-02, -9.533e-03, -2.324e-02, 1.715e-02, -3.020e-02, 6.165e-02, -1.023e-02, -6.050e-04, 1.387e-02, -5.504e-02, 1.667e-02, -1.197e-02) * s1_1_2;
	r0 += M4(9.139e-03, 2.279e-02, -6.091e-02, 2.033e-02, -4.500e-03, 8.906e-03, -2.814e-02, 5.067e-03, -8.630e-03, -2.434e-03, -1.098e-03, -5.846e-03, 1.811e-02, 1.788e-02, -4.309e-02, -3.512e-03) * s1_2_0;
	r0 += M4(-3.924e-02, 8.110e-03, 4.062e-02, 6.909e-02, -2.883e-03, 2.563e-02, 1.837e-02, -3.078e-03, -2.025e-02, -1.630e-02, -1.458e-03, 4.035e-04, 6.237e-02, 6.361e-02, -2.773e-03, -1.701e-01) * s1_2_1;
	r0 += M4(-4.524e-03, 2.832e-03, -6.048e-03, -6.795e-03, 1.175e-03, -6.787e-03, -4.355e-03, -8.498e-03, 2.594e-03, -8.764e-03, -1.072e-03, 1.605e-02, 8.714e-04, -9.019e-03, -1.059e-02, 1.941e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.464e-03, -2.774e-03, -1.431e-03, -1.215e-03, 4.845e-02, 3.675e-02, -1.349e-02, -2.743e-03, 4.127e-02, -4.658e-03, 8.072e-03, 2.470e-03, 1.765e-02, 2.215e-03, -1.077e-02, 6.873e-04) * s0_0_0;
	r0 += M4(1.955e-02, 1.319e-02, -1.576e-03, -1.182e-02, 1.323e-01, 1.743e-01, -5.490e-03, -1.327e-02, 5.819e-02, 1.205e-01, 7.495e-02, 3.583e-02, 3.678e-02, -1.142e-02, -1.653e-02, 1.538e-03) * s0_0_1;
	r0 += M4(9.674e-03, -1.208e-02, 2.774e-03, -2.331e-03, 2.678e-03, 2.081e-02, 3.340e-05, 3.151e-03, 3.792e-02, -7.259e-02, 1.593e-02, 4.286e-02, -8.516e-04, 5.849e-03, -7.198e-03, -4.296e-03) * s0_0_2;
	r0 += M4(-3.288e-03, -2.253e-02, -1.717e-02, -1.727e-02, -2.261e-01, 5.979e-03, -1.255e-01, -2.924e-03, 1.777e-01, 7.550e-03, 1.704e-01, -4.909e-03, 2.174e-02, -3.147e-02, 2.777e-02, -7.199e-03) * s0_1_0;
	r0 += M4(-3.564e-01, 2.598e-01, -9.818e-02, 1.489e-01, 9.643e-02, -3.115e-01, 1.959e-01, 4.496e-03, -2.920e-01, 8.035e-02, -3.193e-01, 1.544e-01, -6.127e-01, -4.497e-02, 3.417e-01, 8.041e-02) * s0_1_1;
	r0 += M4(-1.772e-02, 8.248e-02, -2.285e-02, 2.618e-02, 9.024e-03, 5.762e-02, 6.124e-03, 7.495e-02, -1.687e-02, -1.362e-01, -2.577e-02, -2.646e-01, -7.587e-04, -8.138e-02, 8.503e-03, 1.116e-01) * s0_1_2;
	r0 += M4(8.863e-04, -9.921e-03, 5.597e-03, -2.054e-02, 7.904e-03, -2.672e-03, -3.961e-02, 4.095e-03, 5.378e-03, 9.669e-04, 3.771e-02, 7.053e-03, 4.905e-04, 1.380e-03, 4.809e-03, -8.170e-03) * s0_2_0;
	r0 += M4(-4.862e-03, 1.240e-02, -1.499e-01, 1.495e-01, 2.827e-03, 1.556e-02, -4.895e-02, -6.969e-02, 1.541e-02, 8.086e-03, 1.492e-02, 5.086e-03, 2.144e-02, -1.961e-02, 9.303e-02, 3.885e-02) * s0_2_1;
	r0 += M4(9.444e-03, -3.185e-02, 1.715e-03, 3.455e-02, -5.060e-03, 3.881e-03, -8.667e-03, -9.851e-03, -2.487e-03, -8.020e-03, 8.026e-03, 5.059e-04, 1.321e-02, 9.980e-04, 4.440e-04, -8.374e-03) * s0_2_2;
	r0 += V4(-1.508e-08, -1.485e-08, -1.518e-08, -1.474e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
