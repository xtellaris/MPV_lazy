// CuNNy 3x12
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_3x12] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(4.258e-02, 6.782e-03, 2.484e-01, -4.550e-02) * s0_0_0;
	r1 += V4(1.514e-02, 3.322e-03, -1.074e-02, 3.800e-01) * s0_0_0;
	r2 += V4(-8.075e-03, -5.828e-02, -4.598e-03, -2.185e-01) * s0_0_0;
	r0 += V4(1.100e-01, -1.493e-02, -1.938e-01, 2.866e-01) * s0_0_1;
	r1 += V4(-5.529e-02, -8.077e-01, -1.540e-01, -3.659e-01) * s0_0_1;
	r2 += V4(8.346e-04, -7.690e-02, 1.588e-03, -5.902e-01) * s0_0_1;
	r0 += V4(4.078e-02, 1.195e-02, -4.449e-02, 3.784e-01) * s0_0_2;
	r1 += V4(5.287e-02, -3.466e-03, -6.240e-03, -1.311e-01) * s0_0_2;
	r2 += V4(7.615e-03, 1.398e-01, -7.726e-04, 4.072e-01) * s0_0_2;
	r0 += V4(1.096e-02, -1.214e-02, -2.372e-01, -7.642e-02) * s0_1_0;
	r1 += V4(-5.838e-02, 4.194e-03, -1.471e-01, 2.550e-01) * s0_1_0;
	r2 += V4(3.584e-04, 1.124e-01, 4.185e-03, 6.004e-02) * s0_1_0;
	r0 += V4(-5.840e-01, -7.808e-01, -5.920e-01, -7.494e-01) * s0_1_1;
	r1 += V4(6.629e-01, 8.105e-01, 8.613e-01, 2.725e-01) * s0_1_1;
	r2 += V4(7.387e-01, -7.512e-01, 6.439e-03, 5.762e-01) * s0_1_1;
	r0 += V4(6.173e-02, 7.910e-01, 1.189e-01, 2.007e-01) * s0_1_2;
	r1 += V4(-6.567e-02, -6.028e-03, -1.023e-01, -4.280e-01) * s0_1_2;
	r2 += V4(-1.440e-03, -5.885e-02, -7.766e-03, -2.154e-01) * s0_1_2;
	r0 += V4(-4.313e-03, 3.055e-03, 1.979e-02, 1.260e-01) * s0_2_0;
	r1 += V4(2.395e-02, -6.127e-03, -3.891e-02, -1.978e-01) * s0_2_0;
	r2 += V4(9.259e-03, 5.510e-01, 8.245e-01, 1.553e-01) * s0_2_0;
	r0 += V4(1.820e-01, -4.644e-03, 2.163e-01, -4.558e-02) * s0_2_1;
	r1 += V4(-8.862e-02, -4.277e-03, -1.714e-01, 5.592e-03) * s0_2_1;
	r2 += V4(-1.544e-02, 1.755e-01, -8.262e-01, 2.927e-02) * s0_2_1;
	r0 += V4(4.434e-03, 7.228e-04, 4.655e-01, -7.633e-02) * s0_2_2;
	r1 += V4(1.211e-02, 9.734e-03, -8.916e-02, 2.104e-01) * s0_2_2;
	r2 += V4(-7.300e-01, -3.384e-02, 2.111e-03, -2.049e-01) * s0_2_2;
	r0 += V4(1.489e-01, -1.484e-05, -9.884e-04, 2.526e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.374e-02, 5.631e-06, 1.011e-02, 8.364e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(7.687e-07, 6.457e-04, -1.144e-04, 1.567e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.216e-02, 7.610e-03, 4.190e-02, 1.296e-01, 1.291e-01, 1.621e-01, 7.511e-02, -2.389e-01, 8.856e-02, -3.117e-01, 4.318e-03, 1.326e-01, -2.256e-02, -2.186e-02, -2.348e-02, -1.114e-01) * s0_0_0;
	r1 += M4(9.847e-02, -1.863e-01, -4.624e-01, 7.947e-02, 4.255e-01, -2.807e-01, 7.022e-01, 8.301e-02, -4.262e-01, 5.869e-02, -4.049e-01, 1.184e-01, 3.142e-02, 2.476e-01, -1.171e-01, 2.799e-02) * s0_0_0;
	r2 += M4(-2.020e-02, 2.461e-03, 3.980e-02, 6.546e-02, 2.851e-01, -2.389e-02, -2.201e-01, 6.209e-02, 1.262e-02, 3.369e-02, -7.755e-02, -3.703e-02, 2.655e-02, -5.291e-02, 9.380e-02, 6.794e-02) * s0_0_0;
	r0 += M4(-2.569e-01, 2.926e-01, 3.995e-02, -2.347e-01, 7.093e-02, -5.918e-01, 1.824e-01, -6.258e-02, 3.665e-01, -2.351e-01, 6.215e-02, 5.258e-01, -1.334e-01, 6.549e-03, 1.335e-02, 1.145e-01) * s0_0_1;
	r1 += M4(-1.062e-01, -2.665e-01, 2.132e-01, -2.018e-01, 1.401e-01, -1.000e+00, -1.878e-01, -1.815e-03, -2.335e-01, 1.075e-01, 4.526e-02, 1.166e-01, -3.514e-02, 2.257e-01, -3.040e-01, 6.677e-02) * s0_0_1;
	r2 += M4(-1.133e-01, 1.500e-01, 5.998e-02, 1.256e-01, 2.269e-01, -5.314e-03, -1.926e-01, -2.482e-01, -1.963e-02, 1.700e-01, -4.134e-01, 3.033e-02, 1.250e-02, 1.552e-01, -1.440e-01, 3.953e-02) * s0_0_1;
	r0 += M4(2.164e-01, 5.318e-02, -5.017e-02, 1.314e-01, -2.588e-01, -2.665e-02, 6.010e-02, -3.947e-03, 5.156e-01, -9.107e-02, 1.036e-02, 1.962e-01, 1.705e-01, 3.748e-03, -4.448e-03, -1.900e-01) * s0_0_2;
	r1 += M4(-2.084e-01, -6.434e-02, -1.817e-01, -9.784e-02, 6.532e-03, -2.354e-01, -1.037e-01, 2.122e-03, -1.479e-01, 1.148e-01, -1.949e-01, 1.290e-01, 1.470e-01, 4.056e-02, 5.270e-01, 1.063e-01) * s0_0_2;
	r2 += M4(3.181e-02, 2.273e-02, -1.496e-01, -6.997e-04, -3.189e-01, 7.431e-02, 1.174e-01, 8.191e-02, 1.141e-01, 6.271e-02, -1.392e-01, -6.764e-02, -8.822e-02, -4.692e-02, -5.254e-03, -2.440e-02) * s0_0_2;
	r0 += M4(-2.628e-01, 2.914e-01, 1.075e-01, 2.380e-01, -1.800e-01, -1.643e-01, 1.348e-01, -7.700e-01, 4.717e-01, -1.665e-01, 4.679e-02, 6.017e-01, -2.221e-01, 1.110e-02, -8.325e-02, -1.000e+00) * s0_1_0;
	r1 += M4(3.599e-02, 1.839e-01, 5.280e-01, -1.790e-01, -1.000e+00, -6.457e-02, -1.564e-01, -5.224e-01, -5.428e-02, 2.339e-02, -2.389e-01, 2.420e-01, 3.126e-01, 2.061e-01, -7.121e-02, 2.873e-01) * s0_1_0;
	r2 += M4(-2.215e-01, 1.789e-01, -1.314e-01, 1.697e-01, 1.170e-01, 5.345e-01, 3.160e-02, 1.458e-01, -9.337e-02, -5.253e-02, -2.551e-02, -2.485e-01, -6.627e-02, -3.366e-01, -1.916e-01, -2.223e-01) * s0_1_0;
	r0 += M4(-3.652e-01, -5.793e-01, -2.178e-01, -1.552e-01, -7.558e-01, 1.000e+00, 6.036e-01, 1.861e-01, 1.000e+00, -8.718e-01, 5.384e-02, 6.176e-01, -2.102e-01, -1.217e-02, -1.720e-01, -4.685e-01) * s0_1_1;
	r1 += M4(5.435e-01, -2.196e-01, -4.096e-01, 5.999e-01, 2.697e-01, 8.143e-01, 7.207e-01, -1.000e+00, 4.581e-01, -2.037e-01, -8.749e-01, -7.472e-02, 5.141e-01, -5.304e-01, -4.204e-01, -2.129e-01) * s0_1_1;
	r2 += M4(-4.211e-01, -2.822e-01, -1.377e-01, 4.250e-01, 1.968e-01, 1.000e+00, 1.000e+00, 1.274e-01, -2.337e-01, -1.012e-01, -1.644e-01, -3.785e-01, -3.271e-01, -5.566e-01, -2.034e-01, -2.277e-01) * s0_1_1;
	r0 += M4(2.705e-01, -1.436e-01, 5.929e-03, -1.620e-01, -2.402e-01, -2.082e-01, 5.404e-02, 6.408e-02, 3.510e-01, -4.424e-01, -1.766e-02, 2.398e-01, -2.484e-02, 5.137e-01, -5.247e-02, -1.303e-01) * s0_1_2;
	r1 += M4(-2.663e-01, 3.054e-01, 2.932e-01, -1.244e-02, 2.405e-01, -9.906e-02, 2.769e-01, -1.025e-02, -1.696e-01, -2.767e-01, -5.126e-01, -3.023e-02, -1.743e-01, 4.713e-01, 2.378e-01, -1.348e-01) * s0_1_2;
	r2 += M4(1.000e+00, 8.490e-02, 1.046e-01, -3.408e-01, -1.000e+00, 1.739e-01, 9.703e-02, 2.274e-01, 3.502e-01, 1.224e-02, 8.915e-02, -2.297e-01, -3.430e-01, 5.619e-03, -1.111e-01, -7.819e-02) * s0_1_2;
	r0 += M4(2.678e-01, -2.130e-01, -3.453e-02, 2.635e-01, 2.461e-02, 3.509e-01, -2.435e-01, -8.147e-01, -2.620e-02, -1.400e-02, 2.402e-02, 2.623e-01, -3.208e-01, -6.823e-02, 1.124e-01, 5.685e-02) * s0_2_0;
	r1 += M4(6.504e-02, -1.366e-02, -1.359e-01, 2.460e-02, 1.429e-01, -1.940e-01, 1.885e-01, 2.645e-01, 3.352e-02, -3.437e-03, -3.259e-01, -6.827e-02, -4.153e-01, 1.917e-01, -1.274e-02, -8.059e-02) * s0_2_0;
	r2 += M4(3.591e-02, -2.508e-02, 3.507e-02, -1.488e-01, -2.403e-01, -3.363e-01, 4.842e-02, 2.997e-01, 1.845e-01, 3.507e-02, 3.749e-02, -1.121e-01, 3.327e-02, 3.925e-01, 1.949e-02, -7.851e-02) * s0_2_0;
	r0 += M4(-6.471e-02, 4.184e-01, 2.944e-02, -3.895e-02, -3.865e-01, 3.463e-01, 7.252e-02, -4.165e-01, 3.214e-01, -2.325e-01, 1.181e-01, 3.360e-01, -6.829e-02, 2.315e-01, -1.244e-02, -1.534e-01) * s0_2_1;
	r1 += M4(-2.134e-01, 3.341e-02, 1.874e-01, 6.927e-02, 2.912e-01, -2.310e-01, -6.458e-01, -2.545e-01, -1.315e-01, 1.524e-02, -8.856e-02, -1.641e-02, -6.811e-02, -4.871e-02, -1.251e-01, 1.274e-01) * s0_2_1;
	r2 += M4(-3.545e-01, 1.934e-01, 1.034e-01, 1.671e-01, -1.824e-01, -2.316e-01, -5.525e-02, 9.706e-02, 1.370e-01, 2.906e-01, 5.503e-02, 8.842e-02, -1.569e-01, 1.391e-01, -1.275e-01, 2.410e-02) * s0_2_1;
	r0 += M4(-1.226e-01, -7.478e-02, -4.144e-02, -8.837e-02, -7.039e-02, 1.540e-01, 6.813e-02, -2.496e-04, 4.839e-02, -6.256e-03, 1.641e-02, 8.807e-02, -1.115e-01, 4.687e-02, -1.124e-01, -1.598e-01) * s0_2_2;
	r1 += M4(1.092e-01, -3.802e-02, -1.208e-01, -4.435e-02, 1.475e-01, -5.764e-02, 3.260e-01, -3.962e-02, -2.361e-02, -2.165e-02, -7.249e-02, 6.820e-02, 4.768e-02, 8.763e-02, -2.405e-01, 1.062e-01) * s0_2_2;
	r2 += M4(2.093e-01, -1.314e-01, 2.426e-02, -1.246e-01, -4.582e-01, 3.627e-02, -3.500e-02, 6.455e-02, 1.445e-01, -1.105e-02, 2.844e-02, -7.605e-02, 1.873e-01, -1.272e-01, -8.751e-02, -3.968e-03) * s0_2_2;
	r0 += M4(-9.975e-02, 2.939e-02, 1.231e-01, 3.818e-01, -6.798e-02, 1.503e-01, -1.558e-02, -2.649e-01, 1.957e-01, 9.934e-02, 2.139e-02, -1.663e-01, -5.973e-02, 2.035e-01, -3.378e-02, -2.928e-01) * s1_0_0;
	r1 += M4(2.800e-01, -2.779e-02, -2.243e-01, 1.331e-01, 2.960e-02, 6.083e-02, 3.310e-01, -3.093e-02, -2.689e-01, -7.931e-02, 7.392e-03, 4.476e-02, -7.338e-02, 1.065e-01, 2.335e-02, 1.916e-03) * s1_0_0;
	r2 += M4(3.776e-02, 4.621e-02, 1.213e-01, 1.887e-01, -1.129e-01, 3.071e-02, 1.137e-01, -2.271e-02, 1.170e-01, 2.824e-02, -3.021e-01, 1.738e-01, 4.977e-02, -3.004e-02, -7.222e-02, -4.082e-02) * s1_0_0;
	r0 += M4(-5.500e-02, 1.106e-01, 4.975e-01, 6.579e-01, 1.606e-01, 8.452e-02, -3.208e-02, -1.097e-01, -5.689e-02, 1.522e-01, 3.177e-03, -1.829e-01, -1.794e-01, 1.769e-01, -7.471e-03, -2.529e-01) * s1_0_1;
	r1 += M4(-2.292e-01, 4.889e-02, -3.267e-01, -4.967e-01, 4.322e-02, 2.479e-01, 7.402e-01, 9.816e-03, -2.654e-01, -1.589e-01, -7.330e-01, -3.237e-01, 1.351e-01, -8.482e-02, 8.760e-02, 2.569e-02) * s1_0_1;
	r2 += M4(-6.594e-02, 7.374e-02, 6.070e-01, -4.692e-01, -3.216e-02, -1.204e-01, -1.966e-01, 2.581e-02, -1.916e-01, 1.086e-01, 4.753e-01, 2.075e-01, 7.035e-03, -8.263e-02, -1.697e-03, -1.003e-01) * s1_0_1;
	r0 += M4(7.030e-02, -2.153e-01, 1.479e-01, -6.834e-02, -1.333e-01, -8.856e-02, 2.768e-02, 1.958e-01, -2.204e-01, 8.662e-02, -4.479e-02, -9.421e-04, -4.976e-02, 1.231e-01, 3.844e-02, -1.035e-01) * s1_0_2;
	r1 += M4(2.479e-01, -1.498e-01, -1.082e-02, -2.962e-01, -3.365e-04, -2.513e-02, -4.342e-01, -1.339e-01, -1.742e-01, 6.182e-02, 6.081e-01, 9.649e-02, 4.906e-02, 9.694e-02, -7.635e-02, 6.926e-02) * s1_0_2;
	r2 += M4(-2.764e-01, 1.179e-01, 5.062e-01, 2.824e-01, 4.405e-02, 1.313e-01, 6.676e-02, 5.776e-02, -4.993e-02, -2.782e-02, 2.765e-01, 1.654e-01, -7.640e-02, 1.818e-02, -2.660e-02, 2.419e-02) * s1_0_2;
	r0 += M4(-2.808e-01, -5.896e-01, -1.215e-01, 1.409e-01, 2.381e-01, 4.471e-01, 3.972e-02, -3.360e-02, -1.422e-01, -2.113e-01, 2.881e-02, 2.375e-01, -2.241e-01, -1.666e-01, 1.744e-02, -2.913e-02) * s1_1_0;
	r1 += M4(2.275e-01, 1.070e-01, -6.323e-02, 4.960e-03, 4.571e-02, -2.497e-01, -2.135e-01, 1.090e-01, 2.564e-01, -8.602e-02, 2.646e-01, -1.222e-01, 5.866e-03, -5.842e-02, 1.129e-01, -1.119e-01) * s1_1_0;
	r2 += M4(-7.496e-02, -2.221e-01, -3.988e-02, -1.776e-01, -1.759e-02, -5.923e-02, -3.111e-01, -6.788e-03, 9.514e-03, 2.383e-02, 1.177e-01, -8.322e-02, 3.412e-02, -2.712e-02, 1.550e-01, 1.507e-01) * s1_1_0;
	r0 += M4(-8.473e-01, 4.347e-01, -1.000e+00, -5.513e-01, 1.304e-01, 5.684e-01, 3.154e-01, -2.371e-01, 1.379e-01, -5.645e-01, -1.342e-01, -6.975e-02, 4.278e-02, -1.563e-01, 3.494e-02, 6.055e-02) * s1_1_1;
	r1 += M4(-2.326e-01, 7.139e-02, 3.142e-01, 6.281e-01, -6.616e-01, 1.000e+00, 2.590e-01, -9.002e-01, 1.000e+00, -6.507e-02, -6.883e-01, 9.618e-01, 1.961e-01, 2.581e-02, -4.070e-01, 1.976e-01) * s1_1_1;
	r2 += M4(5.099e-02, 1.431e-01, -4.167e-01, 1.640e-01, 1.896e-01, 2.666e-01, 9.668e-01, 1.150e-01, -6.457e-01, -2.240e-01, -3.430e-01, -4.213e-01, -8.327e-02, 6.927e-02, -1.136e-01, 1.535e-02) * s1_1_1;
	r0 += M4(4.309e-01, 9.187e-03, 1.430e-01, -2.484e-01, -6.547e-01, -6.405e-01, 6.002e-02, 6.390e-02, 3.291e-01, 1.808e-01, -1.217e-01, -9.270e-02, 1.952e-01, 1.415e-01, 1.860e-02, -1.048e-01) * s1_1_2;
	r1 += M4(4.140e-01, -7.517e-02, -9.824e-02, 2.877e-02, 4.441e-01, -1.000e+00, -2.056e-01, 1.253e-01, -1.254e-01, 2.578e-01, 1.855e-01, -2.048e-01, 1.165e-01, 2.849e-01, -4.875e-02, 1.687e-01) * s1_1_2;
	r2 += M4(3.432e-01, -2.936e-01, -4.590e-01, 4.386e-02, -4.097e-01, -1.931e-01, 2.388e-01, -5.232e-02, 7.653e-01, -2.367e-01, -7.306e-02, -2.774e-01, -5.166e-02, 1.556e-01, -1.333e-01, 7.397e-02) * s1_1_2;
	r0 += M4(3.578e-01, 3.224e-01, -1.108e-01, -2.340e-01, -2.370e-01, -4.964e-02, -2.496e-02, -4.366e-01, -7.207e-02, 1.835e-01, 1.112e-02, -1.007e-01, 9.460e-02, -1.062e-01, -1.694e-03, 5.643e-03) * s1_2_0;
	r1 += M4(-1.167e-01, -2.186e-01, 1.560e-02, 1.876e-02, 3.450e-02, -1.549e-01, -5.401e-01, -1.327e-01, 9.297e-02, 1.822e-01, -1.637e-01, 1.295e-01, 8.247e-02, -6.181e-02, 1.344e-01, 1.254e-01) * s1_2_0;
	r2 += M4(-1.206e-01, -8.684e-03, -7.133e-02, 1.839e-01, 2.750e-01, -2.764e-01, -9.105e-02, 1.155e-01, -1.264e-01, -3.051e-02, 1.581e-01, -7.730e-02, -2.583e-01, -3.494e-02, -3.786e-02, 1.786e-01) * s1_2_0;
	r0 += M4(2.573e-01, -7.880e-02, 3.706e-01, 9.403e-02, -4.760e-01, 8.714e-01, 5.499e-01, 3.432e-01, -3.144e-02, -3.330e-01, 4.281e-03, 3.606e-03, 8.207e-02, -5.442e-01, -4.490e-02, -2.621e-01) * s1_2_1;
	r1 += M4(-4.462e-01, -1.060e-01, 1.471e-01, -6.175e-02, -9.861e-01, 3.913e-01, -5.341e-01, -1.000e+00, 3.153e-01, 7.509e-02, 7.501e-01, -3.536e-02, 1.027e-01, -3.634e-02, -5.769e-02, 2.429e-01) * s1_2_1;
	r2 += M4(1.294e-01, 5.115e-03, -2.266e-01, -3.975e-02, 7.593e-01, 6.721e-01, 4.216e-01, 3.922e-01, -4.553e-02, -2.697e-01, -1.684e-01, -3.947e-01, -9.318e-02, -2.311e-01, -2.206e-01, -1.391e-01) * s1_2_1;
	r0 += M4(1.365e-01, 1.927e-01, -1.839e-02, -6.121e-02, 1.888e-02, 3.389e-01, 3.276e-01, 4.620e-02, -3.043e-01, -3.335e-01, 1.370e-03, 7.082e-02, -2.378e-01, -1.290e-02, -4.270e-02, -8.805e-02) * s1_2_2;
	r1 += M4(-3.041e-01, 2.075e-01, 1.390e-01, -1.882e-02, 3.428e-01, 1.304e-01, 1.000e+00, -1.596e-01, -1.857e-01, 1.032e-02, 3.243e-03, -1.208e-02, -1.166e-02, 4.871e-02, -4.235e-02, 4.183e-02) * s1_2_2;
	r2 += M4(3.300e-02, 3.623e-01, -1.227e-01, 1.210e-01, -1.000e+00, 8.794e-02, -1.124e-01, 1.815e-01, 1.805e-01, -2.225e-02, 1.772e-01, 7.332e-02, -1.681e-01, 1.218e-02, 2.895e-02, -3.534e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.548e-01, -1.753e-01, 7.940e-02, 6.972e-01, -2.053e-01, 1.390e-01, -4.192e-02, -3.775e-01, 1.721e-01, 1.451e-02, 2.703e-02, -3.182e-02, 1.244e-01, -8.764e-02, 7.464e-03, 1.204e-01) * s0_0_0;
	r1 += M4(-1.342e-01, 1.169e-01, 1.722e-01, -1.000e+00, 3.440e-02, 1.357e-01, 2.168e-02, 4.684e-02, -2.028e-01, -1.208e-01, -2.465e-01, 2.067e-02, 1.713e-02, -2.482e-02, -1.181e-01, 1.206e-01) * s0_0_0;
	r2 += M4(5.441e-03, 2.865e-02, 4.315e-01, -2.900e-01, -1.072e-01, 1.692e-02, -6.598e-02, 9.815e-02, 1.892e-01, -7.731e-03, -9.889e-02, -2.996e-01, 8.962e-02, -6.818e-02, -1.881e-02, -1.421e-01) * s0_0_0;
	r0 += M4(3.451e-01, 6.314e-02, 8.242e-02, -1.482e-02, -2.831e-01, 1.549e-01, -6.696e-02, -2.798e-01, 3.890e-01, 6.169e-01, 1.358e-01, 2.291e-01, -1.767e-02, -3.297e-01, 9.549e-02, 4.784e-01) * s0_0_1;
	r1 += M4(3.911e-01, -6.631e-02, 1.895e-01, -1.102e-01, -4.266e-01, 1.872e-01, 3.449e-01, -3.459e-02, 7.861e-02, -5.618e-02, -7.730e-02, -1.000e+00, 1.457e-01, -2.548e-01, -8.731e-01, 9.796e-02) * s0_0_1;
	r2 += M4(-6.749e-01, 1.010e-01, 3.207e-01, 2.383e-01, -1.078e-01, -2.567e-02, -3.341e-01, 1.540e-01, -3.253e-02, 2.846e-01, -6.611e-02, -7.683e-01, 7.931e-02, 5.581e-02, 7.425e-02, -1.640e-02) * s0_0_1;
	r0 += M4(1.579e-02, -1.716e-01, -1.717e-02, 1.761e-01, -6.411e-01, 2.862e-01, 7.081e-02, -3.103e-01, 5.496e-02, -5.832e-01, -7.260e-02, 1.413e-01, 1.077e-01, -1.234e-01, 2.261e-02, 1.280e-01) * s0_0_2;
	r1 += M4(-1.711e-03, -1.606e-01, -7.007e-02, -1.112e-01, -3.582e-01, 8.059e-01, 6.145e-02, -2.352e-01, -1.000e+00, -3.601e-02, 5.677e-01, -9.944e-02, 5.883e-02, -3.220e-01, -2.240e-01, 1.752e-01) * s0_0_2;
	r2 += M4(2.771e-02, -1.881e-02, -6.999e-03, -1.046e-02, -2.004e-01, 3.349e-01, 5.340e-01, 4.942e-01, -1.000e+00, 4.338e-01, -2.351e-01, 5.520e-01, 8.209e-02, -6.516e-02, -8.179e-02, -1.708e-01) * s0_0_2;
	r0 += M4(2.225e-01, 1.529e-01, 7.792e-02, -2.386e-02, -1.166e-01, 2.434e-01, 5.915e-03, -4.444e-01, 3.280e-02, -1.861e-01, -3.580e-03, 1.756e-01, 1.568e-01, 6.284e-02, 1.060e-01, 6.636e-01) * s0_1_0;
	r1 += M4(-3.689e-01, -1.054e-01, -3.076e-01, 9.518e-02, 3.089e-01, 7.317e-02, 2.131e-01, -2.480e-02, -1.156e-01, 2.968e-03, -1.072e-01, -7.532e-02, -1.739e-01, 9.496e-02, 2.958e-01, -9.005e-02) * s0_1_0;
	r2 += M4(8.419e-02, 1.186e-01, 4.337e-02, 1.051e-01, -1.951e-01, 7.079e-02, 2.479e-02, 8.497e-02, 2.009e-01, 4.073e-02, 3.144e-02, -1.023e-01, -2.023e-02, 8.973e-02, 3.537e-01, -1.091e-01) * s0_1_0;
	r0 += M4(1.760e-01, 3.715e-01, 2.202e-01, -4.340e-02, -6.247e-01, -4.074e-01, -2.665e-01, -9.165e-01, -2.247e-01, -5.839e-01, 7.411e-02, 6.738e-01, 2.057e-02, -3.068e-01, 1.661e-01, 5.441e-01) * s0_1_1;
	r1 += M4(-7.258e-01, 8.783e-02, 7.012e-01, -4.229e-01, 3.349e-01, 6.169e-02, 9.245e-01, -5.782e-01, -3.355e-01, 2.183e-01, -5.630e-01, -2.007e-01, 1.759e-01, 5.311e-02, 4.134e-02, 1.550e-01) * s0_1_1;
	r2 += M4(-5.931e-02, 4.217e-01, -1.215e-01, 4.160e-01, -2.617e-01, -5.511e-01, -1.163e-01, -2.917e-01, 6.660e-01, 4.033e-01, 1.788e-02, -3.385e-01, -1.396e-01, 3.167e-01, 9.275e-02, 4.367e-01) * s0_1_1;
	r0 += M4(1.876e-03, 3.133e-02, 3.409e-02, -6.009e-02, -9.159e-01, -1.435e-01, -1.613e-01, -1.226e-01, 5.494e-01, 3.249e-02, -1.740e-02, 3.972e-01, 1.952e-01, -1.262e-01, 5.304e-02, 3.232e-01) * s0_1_2;
	r1 += M4(6.699e-02, -6.426e-02, -5.578e-02, 4.559e-02, 1.885e-01, -4.700e-02, -4.967e-02, -5.280e-02, -3.106e-01, 6.420e-02, 2.784e-01, 3.102e-01, 1.365e-01, 1.120e-01, -5.286e-01, 1.124e-01) * s0_1_2;
	r2 += M4(-1.048e-01, -5.752e-02, -9.976e-03, -5.821e-02, -9.406e-01, -2.095e-01, 2.481e-01, 1.953e-01, -2.431e-01, 5.097e-01, 7.629e-02, 1.048e-01, 9.982e-02, 8.526e-02, -1.047e-01, 9.251e-02) * s0_1_2;
	r0 += M4(5.541e-02, 1.573e-01, 1.438e-03, 1.346e-02, -1.142e-02, 7.311e-02, -1.802e-02, -1.933e-01, 3.821e-02, -8.576e-02, 4.715e-03, 5.583e-02, 1.638e-01, 2.700e-01, 1.522e-01, 3.580e-01) * s0_2_0;
	r1 += M4(-6.248e-02, -4.944e-02, 1.926e-02, 9.168e-03, 5.711e-02, -4.435e-02, 5.827e-02, 6.962e-02, -1.753e-02, 2.063e-02, -2.405e-02, 1.032e-02, -2.780e-01, -6.098e-02, -1.862e-01, 7.050e-02) * s0_2_0;
	r2 += M4(-1.405e-01, 8.460e-02, -1.986e-03, 1.275e-01, -1.314e-01, -7.307e-02, -8.752e-02, 4.775e-02, 8.137e-02, -4.247e-02, -4.336e-03, 1.887e-02, 3.180e-02, 2.026e-01, 1.306e-01, 8.226e-03) * s0_2_0;
	r0 += M4(-2.795e-02, 3.642e-03, -5.713e-02, -4.095e-02, -1.533e-01, 9.905e-02, -2.323e-02, -3.130e-01, -3.821e-02, -6.926e-02, 1.182e-02, 1.192e-02, 3.496e-01, -3.461e-01, 2.028e-01, 3.429e-01) * s0_2_1;
	r1 += M4(9.540e-02, -5.000e-03, -2.941e-01, 3.106e-02, 4.511e-02, 1.298e-01, 1.161e-01, -2.265e-02, 1.306e-01, -2.859e-03, -7.906e-02, 3.002e-02, 1.008e-01, -1.158e-01, 2.318e-01, -1.597e-01) * s0_2_1;
	r2 += M4(1.801e-01, -8.424e-02, -1.904e-02, -1.602e-02, -5.671e-02, -1.149e-01, -2.633e-02, -1.150e-01, 8.858e-02, -4.399e-02, 9.471e-02, 5.748e-02, -3.897e-01, 2.527e-01, 2.169e-02, -8.938e-03) * s0_2_1;
	r0 += M4(8.539e-02, 3.947e-02, 2.120e-02, 5.588e-02, -3.252e-01, 2.799e-01, -2.435e-02, -1.948e-01, 2.214e-02, -2.961e-02, 1.632e-02, 7.935e-02, 1.607e-01, -3.941e-01, 6.983e-03, 5.605e-02) * s0_2_2;
	r1 += M4(-4.064e-02, -5.088e-02, -2.034e-02, -4.154e-02, 5.119e-02, 1.154e-02, -8.720e-03, -3.348e-02, -4.406e-02, -5.625e-02, 6.746e-02, 4.098e-02, 1.844e-01, 6.484e-02, -1.146e-01, 2.909e-01) * s0_2_2;
	r2 += M4(-3.939e-02, 1.116e-01, -1.505e-03, 6.359e-02, -7.713e-02, -8.288e-02, -2.811e-02, 2.298e-02, -6.242e-02, 3.235e-02, 4.246e-02, 6.853e-02, 1.794e-01, -1.538e-01, -1.409e-01, -2.226e-01) * s0_2_2;
	r0 += V4(5.441e-02, -5.480e-03, 1.885e-02, 2.820e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.641e-02, 4.046e-02, 1.572e-02, -4.020e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-2.303e-02, -1.477e-02, 2.745e-03, -4.317e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(8.597e-02, 2.779e-02, -9.299e-02, -9.005e-02, 2.557e-01, 7.452e-02, -2.634e-02, -4.351e-02, -3.720e-01, 1.002e-01, 8.975e-02, -2.110e-02, -1.592e-01, -5.162e-02, 4.074e-02, 1.103e-02) * s0_0_0;
	r1 += M4(-2.180e-01, 7.199e-02, 2.990e-01, 9.884e-02, -4.163e-02, -1.237e-01, -8.641e-03, -7.084e-02, -4.204e-02, -1.689e-01, -6.948e-01, 3.050e-01, 6.521e-02, -7.848e-02, -5.088e-02, -1.129e-01) * s0_0_0;
	r2 += M4(-1.667e-02, -1.025e-01, -3.287e-01, 8.825e-02, -1.925e-02, -3.594e-02, -3.114e-02, 3.623e-02, -3.404e-02, 6.108e-02, 1.764e-01, -2.348e-01, -9.320e-03, 3.320e-02, 7.357e-02, -3.163e-03) * s0_0_0;
	r0 += M4(-5.524e-01, -3.562e-01, -2.322e-01, -1.908e-01, 2.483e-01, 2.997e-01, 1.078e-01, 3.123e-01, 5.215e-01, 3.179e-01, 6.267e-01, 6.285e-02, -1.724e-01, 5.294e-02, 9.396e-02, 2.034e-01) * s0_0_1;
	r1 += M4(-4.269e-02, -1.389e-01, 4.502e-01, -5.309e-01, -1.440e-01, -1.077e-01, -9.107e-02, 2.104e-01, 1.598e-01, 4.816e-01, -5.407e-01, 9.150e-02, 1.353e-01, 4.246e-02, -4.534e-01, 3.441e-01) * s0_0_1;
	r2 += M4(-4.986e-02, 3.968e-02, -1.496e-01, 1.378e-03, -3.046e-02, 2.512e-03, 1.713e-01, -3.446e-02, 1.593e-01, -1.209e-01, -2.841e-01, 8.668e-02, 6.188e-02, -1.565e-02, -1.062e-01, -5.840e-02) * s0_0_1;
	r0 += M4(5.889e-02, -1.976e-01, -9.979e-02, 8.618e-02, -7.012e-02, 2.366e-02, 4.894e-02, -7.164e-02, -1.774e-01, 2.832e-01, 1.499e-01, -1.852e-03, 1.694e-01, 1.701e-01, 3.922e-02, 2.467e-01) * s0_0_2;
	r1 += M4(1.727e-02, -1.033e-01, 8.352e-02, -5.443e-01, -3.521e-02, -3.698e-01, 8.665e-02, -3.682e-01, 9.500e-02, -8.675e-02, -1.842e-01, 4.137e-01, 4.645e-02, -1.165e-02, -1.509e-01, 4.768e-01) * s0_0_2;
	r2 += M4(-1.116e-01, -1.396e-02, -2.019e-01, -7.725e-02, 1.916e-02, 3.389e-03, 4.740e-02, -3.292e-02, 4.343e-01, 1.871e-03, 3.743e-02, 3.193e-01, 8.389e-02, 1.929e-03, -6.960e-02, 4.935e-02) * s0_0_2;
	r0 += M4(-3.291e-01, -9.206e-02, -9.005e-02, 2.041e-03, 7.175e-03, -2.115e-01, 1.498e-02, 8.023e-02, 4.412e-01, 2.593e-01, 3.687e-01, 1.402e-01, -2.443e-01, 2.355e-02, -8.258e-03, -1.220e-02) * s0_1_0;
	r1 += M4(-2.465e-01, -1.025e-01, -2.423e-01, -1.382e-01, 3.931e-02, -4.108e-01, 1.756e-01, -3.759e-01, 4.602e-01, 9.908e-02, 5.561e-01, 9.465e-01, -3.612e-02, 2.782e-02, 1.419e-01, -4.177e-03) * s0_1_0;
	r2 += M4(3.653e-02, -9.797e-02, -2.583e-01, 1.042e-01, -4.475e-02, -1.521e-02, -1.954e-01, 5.260e-02, -8.230e-02, 2.995e-01, 2.605e-01, -5.527e-02, 4.442e-02, 6.472e-03, 1.909e-01, -6.021e-02) * s0_1_0;
	r0 += M4(-5.842e-01, 1.000e+00, -5.124e-02, 2.486e-01, 1.895e-03, -2.389e-01, -2.301e-02, -1.164e-01, -7.563e-01, -1.000e+00, -2.839e-01, -4.187e-01, 4.451e-01, -1.735e-01, -4.139e-02, -1.255e-01) * s0_1_1;
	r1 += M4(7.795e-01, -4.286e-01, -3.897e-01, -1.431e-01, -5.946e-02, 1.181e-01, 4.524e-01, -2.517e-01, -1.000e+00, -2.930e-01, 9.838e-01, 5.185e-01, -2.872e-01, 2.130e-01, 4.088e-01, -5.059e-01) * s0_1_1;
	r2 += M4(-1.342e-01, -3.491e-01, -4.585e-01, -2.510e-01, 5.633e-02, -1.541e-01, 3.877e-01, 2.838e-02, 1.135e-01, -5.200e-01, -3.213e-01, 6.971e-01, -6.733e-04, 1.208e-01, -2.715e-01, 7.787e-02) * s0_1_1;
	r0 += M4(1.276e-01, -3.261e-01, 4.053e-02, -1.464e-01, 1.660e-01, -1.402e-01, -7.939e-02, 7.053e-02, 3.869e-01, 2.454e-01, -1.203e-01, 1.465e-01, -2.490e-01, -3.613e-01, 2.647e-02, -4.001e-01) * s0_1_2;
	r1 += M4(3.387e-02, -1.342e-01, 7.853e-02, 3.258e-02, 3.188e-02, -1.822e-01, -2.766e-02, 8.918e-02, -2.491e-02, 2.045e-01, -3.115e-01, -8.710e-02, -1.276e-01, 1.450e-01, 3.516e-01, -2.210e-01) * s0_1_2;
	r2 += M4(-2.412e-02, 5.201e-02, -4.750e-01, -1.583e-01, -4.243e-02, 9.817e-02, -1.431e-01, -9.736e-02, 9.646e-02, 1.999e-01, 5.982e-02, -2.386e-01, -1.548e-01, 7.229e-02, -1.621e-01, -1.623e-01) * s0_1_2;
	r0 += M4(-6.459e-02, 8.485e-02, 2.984e-02, -1.540e-01, -4.775e-02, 7.193e-02, 1.718e-02, -1.053e-01, -5.847e-02, 1.733e-01, -4.131e-02, -5.917e-02, -2.972e-02, 5.642e-03, 6.194e-03, -3.141e-02) * s0_2_0;
	r1 += M4(-1.592e-01, -6.136e-02, -3.228e-01, -3.286e-01, 1.459e-02, -1.103e-01, 1.998e-01, 1.358e-01, 2.274e-01, 5.012e-02, -1.463e-01, 2.705e-01, -2.976e-02, 6.011e-02, -1.425e-01, 1.356e-01) * s0_2_0;
	r2 += M4(3.122e-02, -1.871e-02, -7.566e-02, 8.226e-04, 2.354e-02, 7.592e-03, 9.023e-02, 3.481e-02, 1.739e-02, 5.760e-02, -1.192e-01, -8.014e-02, 4.185e-02, -5.066e-02, 1.623e-01, -8.068e-04) * s0_2_0;
	r0 += M4(1.247e-03, -1.263e-01, 1.386e-01, -3.351e-01, 1.899e-02, 1.644e-01, -3.014e-03, 2.864e-01, -4.517e-02, -1.503e-01, 1.482e-01, 1.183e-01, -2.232e-01, 3.394e-01, -4.527e-02, -8.977e-02) * s0_2_1;
	r1 += M4(-3.021e-01, 1.520e-02, -1.799e-01, -1.746e-01, 2.021e-01, -1.676e-01, 3.121e-01, 2.230e-01, -1.456e-01, -3.584e-01, -5.243e-01, -5.868e-02, 1.062e-02, 3.419e-02, 1.106e-01, 7.256e-01) * s0_2_1;
	r2 += M4(-7.891e-02, 9.133e-02, -4.012e-02, -1.294e-01, -7.176e-02, 7.275e-02, 2.280e-02, -2.770e-02, -1.158e-01, -3.970e-02, 3.349e-01, 1.627e-01, -2.315e-02, -6.680e-02, -3.156e-01, 4.563e-02) * s0_2_1;
	r0 += M4(-1.794e-01, -3.717e-01, 8.451e-02, 9.007e-02, 1.538e-01, -2.936e-02, -6.788e-02, 2.719e-01, 1.933e-01, 8.051e-02, 3.321e-03, 5.164e-02, -1.401e-01, 3.221e-01, -2.010e-01, 7.056e-02) * s0_2_2;
	r1 += M4(-1.883e-01, -4.620e-02, -1.428e-01, 3.658e-02, 1.281e-01, -9.400e-02, 1.473e-01, 1.576e-02, 1.688e-01, 1.431e-01, 5.080e-01, -4.832e-02, 1.818e-01, -9.697e-02, -2.646e-01, -2.665e-02) * s0_2_2;
	r2 += M4(1.318e-02, 1.783e-02, -2.731e-01, -5.196e-02, 3.472e-02, -2.150e-03, 1.334e-01, 9.305e-02, -1.261e-02, -3.891e-03, -6.877e-02, -1.671e-01, 4.301e-02, -6.207e-02, 6.833e-03, 1.082e-01) * s0_2_2;
	r0 += M4(-6.872e-02, -1.863e-01, -4.871e-02, 3.898e-02, -2.056e-01, -2.954e-02, 1.063e-02, -5.290e-02, 1.709e-01, 6.280e-02, -3.056e-02, -3.589e-02, 3.509e-01, 5.665e-02, 8.172e-03, 4.300e-02) * s1_0_0;
	r1 += M4(1.055e-01, 1.577e-01, 2.359e-01, -2.929e-01, -2.519e-02, -1.476e-01, -2.718e-01, 5.083e-02, 5.629e-02, -4.112e-03, -8.338e-02, -1.005e-01, -1.993e-03, 1.923e-01, 2.645e-01, 6.477e-01) * s1_0_0;
	r2 += M4(1.943e-02, 4.017e-02, 6.196e-02, -4.327e-03, -7.215e-02, 1.100e-03, -8.828e-02, 5.527e-05, 8.292e-02, -5.752e-02, 2.706e-01, -8.929e-02, -3.258e-02, 2.399e-02, 1.333e-01, 2.709e-02) * s1_0_0;
	r0 += M4(-2.797e-01, -1.704e-01, -3.252e-01, 7.140e-03, -4.960e-02, 9.777e-02, 1.136e-01, 4.479e-02, 1.490e-01, -1.213e-01, -4.768e-02, -2.309e-03, 2.242e-01, 6.560e-01, 1.524e-01, 4.896e-02) * s1_0_1;
	r1 += M4(-1.255e-01, -2.678e-01, 7.230e-02, -1.615e-01, 5.662e-02, -9.495e-02, -1.030e-01, 1.492e-01, 4.249e-02, -1.095e-01, 1.389e-01, -8.183e-01, -1.124e-01, -1.531e-01, 2.652e-01, -3.998e-01) * s1_0_1;
	r2 += M4(-7.004e-02, -7.690e-02, -4.627e-02, 5.140e-02, 2.173e-02, -3.187e-02, -1.836e-01, -4.158e-02, 7.673e-02, 3.445e-02, 3.117e-01, -1.890e-02, -1.159e-01, 2.004e-01, 6.703e-01, -1.084e-01) * s1_0_1;
	r0 += M4(3.369e-02, -3.020e-01, -1.043e-01, -4.752e-02, 3.096e-03, -3.544e-02, -7.720e-03, 2.625e-03, 6.620e-02, 7.572e-02, 2.649e-02, 2.783e-02, 9.335e-02, 2.764e-01, 1.128e-01, 4.047e-02) * s1_0_2;
	r1 += M4(-7.298e-02, -7.072e-02, 1.325e-01, -4.868e-01, 1.365e-02, 1.101e-02, -8.583e-02, 1.160e-01, 1.140e-02, 1.978e-02, -8.871e-02, -1.445e-01, -6.331e-02, 3.373e-01, 2.828e-02, -5.604e-01) * s1_0_2;
	r2 += M4(-2.311e-01, -5.144e-02, -1.883e-01, -1.653e-01, 1.137e-01, -1.861e-02, -4.781e-02, 7.262e-02, -2.231e-02, -3.118e-02, -2.753e-02, -5.254e-02, -3.529e-01, -7.129e-03, -3.325e-01, 3.958e-02) * s1_0_2;
	r0 += M4(-5.317e-05, -4.665e-03, -1.176e-01, -1.312e-03, 1.643e-02, 2.068e-01, 8.929e-02, 4.931e-02, 7.257e-03, -1.250e-01, 7.886e-02, -5.513e-03, 2.867e-01, -6.138e-02, 3.950e-02, 2.207e-01) * s1_1_0;
	r1 += M4(9.833e-02, 1.834e-01, -6.887e-02, -4.559e-01, -2.471e-01, -7.643e-02, 3.705e-01, 3.449e-01, 3.214e-01, 6.539e-03, 1.295e-01, 2.253e-02, 3.547e-01, -2.888e-01, -7.660e-01, -1.000e+00) * s1_1_0;
	r2 += M4(9.336e-02, -9.113e-02, 4.751e-02, 2.137e-02, -7.339e-03, 4.480e-02, -1.665e-01, 7.352e-02, 5.188e-02, 8.120e-03, 3.129e-01, -4.245e-02, -6.608e-02, 1.747e-01, -2.972e-01, 1.577e-01) * s1_1_0;
	r0 += M4(-1.211e-01, 1.788e-01, -2.505e-01, -7.187e-02, -1.121e-01, -2.076e-02, -5.008e-02, -3.631e-01, 4.268e-01, 1.047e-01, 1.006e-02, 5.717e-02, 3.583e-01, 7.066e-01, 2.570e-01, 5.523e-01) * s1_1_1;
	r1 += M4(4.336e-02, -3.670e-02, -1.347e-01, -7.397e-01, -5.565e-01, -4.211e-01, -8.602e-02, -1.713e-01, -5.420e-03, -1.785e-01, -5.871e-01, 3.013e-01, 7.043e-01, 6.818e-01, -1.000e+00, -7.686e-01) * s1_1_1;
	r2 += M4(-1.130e-01, -1.190e-01, -5.996e-01, 1.293e-01, 3.292e-01, 1.868e-01, 1.411e-01, -1.222e-01, -4.511e-02, -3.672e-02, 8.950e-03, 1.573e-01, 2.592e-01, 2.511e-01, 8.377e-01, -8.448e-01) * s1_1_1;
	r0 += M4(-2.375e-01, -2.598e-01, -9.034e-02, 1.460e-01, -1.059e-01, -2.906e-02, 6.858e-02, -1.195e-01, 2.128e-02, 1.704e-01, 4.125e-02, -1.607e-01, -1.109e-01, 3.679e-01, 3.414e-01, 2.130e-01) * s1_1_2;
	r1 += M4(3.274e-01, -3.320e-01, 2.907e-02, -7.333e-01, -4.024e-02, 6.297e-02, 3.656e-03, -4.764e-01, -1.836e-02, 1.200e-01, -9.601e-02, 2.139e-02, 2.500e-01, 2.936e-01, 1.788e-01, 7.071e-01) * s1_1_2;
	r2 += M4(-1.318e-01, -1.247e-01, -5.799e-02, -8.212e-02, 8.862e-02, -3.525e-02, -1.493e-01, -2.928e-03, 3.726e-02, 4.460e-02, 1.787e-01, -3.031e-02, -1.186e-01, 3.944e-02, 5.312e-01, -1.044e-01) * s1_1_2;
	r0 += M4(3.988e-02, -3.703e-02, -3.102e-02, -6.511e-02, -2.822e-01, -4.092e-02, -1.615e-01, -9.868e-02, 1.189e-01, 2.593e-02, 6.210e-02, -1.341e-02, -5.679e-02, -1.510e-01, 6.384e-02, -7.268e-02) * s1_2_0;
	r1 += M4(-5.225e-02, -1.140e-01, -4.708e-01, -5.117e-01, -9.057e-02, 8.123e-02, 5.390e-02, -6.770e-01, 9.198e-02, -2.117e-02, -2.963e-01, -3.677e-01, 2.239e-01, -1.293e-01, 6.163e-01, 9.024e-01) * s1_2_0;
	r2 += M4(-8.702e-03, -3.652e-02, -1.703e-01, 5.158e-03, 5.903e-02, -6.157e-02, -1.121e-01, -4.318e-02, -2.680e-03, -5.858e-04, -4.839e-02, 1.417e-02, 2.789e-02, 6.029e-02, 2.807e-01, 6.877e-02) * s1_2_0;
	r0 += M4(-1.078e-03, -3.011e-02, 1.206e-01, -3.994e-01, -2.656e-01, -3.874e-01, -9.283e-03, 3.116e-01, 2.524e-01, 2.396e-02, 6.279e-02, -2.909e-01, 2.641e-01, 8.278e-01, -2.755e-01, -6.907e-01) * s1_2_1;
	r1 += M4(-5.859e-01, -2.085e-01, -7.077e-01, -7.941e-01, -1.181e-01, -1.953e-01, 3.012e-01, -7.456e-02, -2.379e-02, 4.420e-02, -6.298e-02, -1.254e-01, 3.006e-01, 2.368e-01, -4.072e-01, 7.881e-01) * s1_2_1;
	r2 += M4(1.565e-02, -5.254e-02, 8.067e-02, 1.063e-01, -2.368e-01, -5.587e-02, -6.924e-01, -1.570e-01, 1.072e-02, 5.917e-02, 1.984e-01, 4.275e-02, 1.847e-01, -9.581e-03, -1.761e-01, -3.347e-02) * s1_2_1;
	r0 += M4(-1.751e-01, -1.209e-02, 1.499e-01, -4.385e-01, -5.023e-02, -9.567e-02, -2.070e-02, 1.617e-01, 3.552e-02, 8.188e-02, 2.843e-02, -1.704e-01, 2.050e-01, 4.706e-01, -1.516e-01, -1.056e-01) * s1_2_2;
	r1 += M4(-3.372e-01, -8.812e-02, -3.561e-01, -5.931e-02, 1.527e-01, -1.854e-01, -2.218e-01, 7.469e-02, -7.782e-02, 8.525e-05, 7.056e-02, -2.553e-01, 2.858e-01, -2.195e-01, -1.325e-01, 1.504e-01) * s1_2_2;
	r2 += M4(-4.242e-02, -1.040e-03, 8.227e-02, 5.940e-03, 6.150e-02, 1.321e-02, -2.417e-03, -6.773e-02, 6.872e-03, 3.331e-02, 2.452e-01, 1.015e-01, 9.974e-02, -8.850e-02, 4.556e-01, 1.429e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.540e-01, -2.220e-02, 5.261e-02, 1.582e-01, 8.427e-02, -8.554e-02, -1.076e-01, -4.666e-02, 1.250e-01, 7.103e-02, -2.005e-02, 1.665e-02, 5.979e-02, -8.008e-02, -1.931e-02, -4.606e-02) * s0_0_0;
	r1 += M4(-7.166e-02, 1.299e-01, 3.302e-01, -2.828e-01, 4.766e-02, -4.016e-02, 1.682e-01, -3.708e-01, 1.152e-02, 3.245e-02, 9.628e-02, -9.847e-03, -2.051e-01, 1.041e-02, 2.549e-01, 3.393e-01) * s0_0_0;
	r2 += M4(2.258e-02, 1.301e-01, -8.392e-02, 8.450e-02, 7.920e-03, 2.160e-02, -8.226e-02, 2.386e-02, -1.257e-02, 1.505e-03, 5.558e-02, 7.255e-03, -3.744e-02, -5.424e-02, -6.310e-04, 2.399e-03) * s0_0_0;
	r0 += M4(-1.040e-01, 9.894e-02, 7.799e-02, 6.463e-02, 7.051e-02, 6.817e-02, -3.344e-02, -1.463e-01, -2.910e-02, -9.907e-02, -3.483e-02, -1.397e-01, -6.510e-02, -1.230e-01, -1.067e-01, 9.981e-02) * s0_0_1;
	r1 += M4(3.013e-01, 1.901e-01, 1.663e-01, -9.672e-01, -1.674e-01, 9.625e-02, 1.815e-01, -2.624e-02, -8.811e-02, -7.104e-02, 1.147e-01, 1.069e-01, 3.961e-02, -1.498e-01, 6.227e-02, 1.668e-02) * s0_0_1;
	r2 += M4(-7.249e-02, 1.385e-01, -7.548e-02, -1.787e-01, -3.503e-02, 1.833e-01, 2.213e-01, -5.390e-02, -1.007e-01, 5.550e-02, 3.383e-02, 1.661e-02, 5.656e-02, -4.602e-02, 1.373e-01, 9.391e-03) * s0_0_1;
	r0 += M4(3.985e-01, 1.057e-01, -4.123e-01, 1.007e-01, -1.054e-01, 1.025e-01, 1.652e-02, -2.404e-01, -4.914e-02, 2.047e-01, 1.246e-01, 3.638e-02, 1.271e-02, -2.084e-01, -5.278e-02, 1.394e-02) * s0_0_2;
	r1 += M4(-1.656e-01, 8.776e-02, 2.572e-01, 2.366e-01, -1.577e-01, 1.229e-01, 1.416e-01, -3.491e-01, 1.090e-02, 6.925e-02, -5.846e-02, 3.170e-01, 1.048e-01, -1.923e-01, 9.259e-02, -2.189e-02) * s0_0_2;
	r2 += M4(2.643e-02, 3.097e-01, 1.354e-01, 2.679e-01, -2.241e-01, -1.091e-01, -1.720e-01, -1.750e-01, -3.583e-02, -3.338e-03, -9.210e-02, -7.020e-02, -4.329e-02, 1.063e-01, 1.647e-01, -9.172e-03) * s0_0_2;
	r0 += M4(3.177e-01, -1.877e-01, 1.543e-01, 3.529e-02, 1.847e-01, -2.986e-01, -1.499e-01, 1.844e-02, -7.235e-02, -2.207e-02, 7.435e-02, -2.968e-02, -3.915e-01, 1.571e-02, -1.200e-01, -9.236e-03) * s0_1_0;
	r1 += M4(4.149e-01, 9.230e-02, -1.000e+00, -3.061e-01, 4.168e-01, -1.092e-01, -2.375e-01, -4.329e-01, -5.562e-03, 2.437e-01, -3.022e-01, 1.566e-01, -1.655e-01, -1.417e-01, -2.416e-01, -4.187e-01) * s0_1_0;
	r2 += M4(-1.448e-01, 1.677e-01, -5.275e-01, 1.120e-02, 3.012e-02, -4.491e-02, -1.264e-01, -2.316e-02, 4.193e-02, 6.594e-02, 7.407e-02, -8.679e-02, -1.222e-01, -7.522e-04, -1.284e-01, 8.860e-02) * s0_1_0;
	r0 += M4(-4.841e-01, 1.199e-01, 3.894e-02, 3.947e-01, 1.681e-01, -1.128e-01, 1.149e-01, 5.422e-01, -1.425e-01, -6.511e-02, 1.334e-01, -2.704e-01, -1.938e-03, 4.960e-01, -1.478e-01, 6.054e-02) * s0_1_1;
	r1 += M4(3.747e-01, 1.385e-01, -7.777e-03, 6.880e-01, -2.369e-01, 4.268e-01, -1.071e-01, -5.542e-02, -2.110e-02, -3.872e-01, -3.461e-01, -4.655e-02, 6.178e-01, 2.286e-01, -1.968e-01, -3.166e-01) * s0_1_1;
	r2 += M4(1.733e-01, -2.884e-01, 6.152e-01, -2.762e-01, 1.141e-01, 5.172e-01, 3.302e-01, -5.315e-02, -5.422e-02, 7.472e-02, -9.202e-02, 1.500e-01, 2.917e-01, -2.204e-01, -1.351e-01, -6.720e-02) * s0_1_1;
	r0 += M4(5.173e-01, -4.523e-01, -6.034e-02, -3.859e-01, -2.018e-01, 8.590e-02, -8.774e-02, 1.783e-01, -6.939e-02, 1.581e-01, 9.485e-03, -1.522e-01, 2.333e-01, 6.339e-02, 5.159e-02, 1.018e-01) * s0_1_2;
	r1 += M4(-3.978e-02, 3.136e-01, 1.951e-01, -9.520e-01, -3.235e-03, -1.142e-01, -1.512e-01, 4.108e-01, -3.406e-01, 1.509e-01, 2.855e-01, 6.985e-01, 3.376e-02, -9.645e-02, -5.823e-02, -1.022e-01) * s0_1_2;
	r2 += M4(-4.701e-02, 3.843e-02, -3.839e-01, 1.025e-01, 3.389e-01, -2.043e-03, 2.549e-01, 5.356e-01, 5.994e-02, 1.037e-01, 1.574e-01, -1.228e-01, -2.536e-01, -1.546e-02, -1.661e-01, -3.121e-01) * s0_1_2;
	r0 += M4(1.065e-01, 1.919e-01, 1.333e-02, -1.847e-01, 2.772e-02, -2.939e-01, -4.116e-02, 4.519e-02, -4.559e-02, 8.966e-02, 1.278e-01, 1.753e-01, 4.459e-02, 2.648e-02, 2.354e-02, -2.164e-01) * s0_2_0;
	r1 += M4(1.975e-01, 2.464e-01, -4.176e-01, 1.665e-01, 1.395e-01, -1.272e-01, -1.276e-01, -2.188e-01, 1.744e-01, 4.024e-01, 2.186e-01, 3.317e-01, -2.017e-01, -4.068e-02, -7.568e-02, -8.182e-02) * s0_2_0;
	r2 += M4(4.209e-02, -6.353e-03, -2.836e-01, 5.585e-02, -5.481e-02, -5.800e-03, -1.610e-01, -2.070e-02, 4.235e-02, 1.120e-01, 7.551e-02, -2.638e-02, 2.703e-02, -3.755e-02, 2.982e-02, -2.061e-02) * s0_2_0;
	r0 += M4(-2.511e-01, -3.981e-01, 2.245e-01, 1.118e-01, 9.246e-02, -1.207e-01, -1.695e-01, -4.859e-01, 2.033e-01, -6.305e-01, 2.854e-01, 3.653e-01, -9.410e-02, -2.011e-01, 1.410e-01, -1.972e-01) * s0_2_1;
	r1 += M4(1.592e-01, 2.457e-01, -7.553e-02, -1.000e+00, -1.461e-01, 2.492e-01, 1.766e-01, -3.667e-01, 1.898e-01, 1.950e-01, -9.857e-02, 2.889e-01, -2.823e-01, -1.360e-01, -1.216e-03, -2.350e-01) * s0_2_1;
	r2 += M4(-9.465e-04, 2.038e-01, 3.529e-01, 2.351e-01, 1.243e-01, -4.319e-02, 3.258e-01, 9.872e-02, -5.213e-02, 3.049e-01, -2.317e-01, -2.561e-02, -1.986e-02, 4.423e-02, -2.246e-02, -1.709e-01) * s0_2_1;
	r0 += M4(2.268e-01, 7.095e-02, 8.410e-03, -1.819e-01, -1.005e-01, 3.784e-02, -8.315e-03, 3.707e-02, -4.311e-02, 7.412e-02, 9.253e-02, 4.020e-01, 1.138e-01, -1.036e-01, -1.725e-02, -2.146e-02) * s0_2_2;
	r1 += M4(-2.964e-01, 1.621e-01, 3.944e-02, 3.505e-01, 1.053e-01, 1.009e-02, 1.082e-02, -1.005e-01, 2.151e-02, 2.878e-02, 1.723e-01, -1.994e-01, -1.763e-01, 9.373e-02, 1.723e-01, -1.590e-01) * s0_2_2;
	r2 += M4(3.122e-02, -2.166e-02, -1.351e-01, -5.807e-02, -1.022e-01, -5.049e-02, -1.033e-01, 2.623e-02, -7.477e-02, 7.296e-02, -4.599e-02, -1.001e-02, 1.048e-01, -1.925e-02, -1.190e-01, -1.817e-02) * s0_2_2;
	r0 += V4(-2.171e-02, -1.552e-02, 5.913e-03, -7.842e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.022e-02, -1.293e-02, -1.120e-02, 3.281e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-8.795e-03, -6.113e-03, -2.184e-02, -3.273e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12] -conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(5.528e-02, 1.575e-03, 2.203e-02, -1.228e-02, -9.792e-02, 4.612e-02, 9.304e-03, -2.189e-01, 2.737e-03, -4.140e-02, 2.179e-02, 9.502e-02, 2.201e-01, 9.150e-02, -1.009e-02, -3.925e-02) * s0_0_0;
	r1 += M4(-3.924e-02, -4.801e-02, -6.965e-02, -4.507e-02, 5.563e-02, 2.127e-02, 3.929e-02, 5.205e-02, -9.574e-02, -9.648e-02, -1.122e-01, -1.031e-01, -4.396e-02, -4.602e-02, -9.466e-02, -5.322e-02) * s0_0_0;
	r2 += M4(4.637e-03, 9.487e-03, 3.768e-04, -1.405e-02, -4.070e-02, -3.199e-03, -1.390e-01, 3.021e-02, -8.520e-02, 8.538e-03, 1.050e-02, 4.041e-02, 1.740e-01, 6.245e-02, 5.445e-02, 2.808e-02) * s0_0_0;
	r0 += M4(-5.797e-02, -3.532e-02, -1.049e-03, -9.072e-02, -9.811e-02, -1.250e-01, -6.092e-02, 1.282e-02, 1.200e-01, 1.885e-02, -5.146e-02, -6.858e-02, 5.501e-01, 4.022e-01, 9.035e-02, -3.161e-02) * s0_0_1;
	r1 += M4(-1.238e-01, -1.385e-01, -1.336e-01, -1.262e-01, -1.215e-01, -1.469e-01, -1.321e-01, -1.209e-01, 8.050e-03, 7.376e-03, -8.387e-03, -1.837e-03, 5.966e-02, 6.248e-02, 1.138e-02, 6.005e-02) * s0_0_1;
	r2 += M4(-3.503e-02, 2.151e-02, 9.765e-02, 3.259e-02, -1.597e-01, -9.495e-02, -1.455e-01, -3.835e-01, 8.857e-02, -8.462e-03, 4.551e-01, -1.691e-01, 3.066e-02, 3.252e-01, 6.368e-01, 1.703e-02) * s0_0_1;
	r0 += M4(1.580e-02, -2.855e-02, -5.534e-02, 9.506e-03, 6.544e-04, -1.601e-02, -9.689e-03, -1.615e-02, -3.001e-02, 1.435e-02, 9.710e-03, 4.978e-02, 7.414e-02, 4.045e-02, 6.347e-02, 1.464e-03) * s0_0_2;
	r1 += M4(2.880e-02, 1.563e-02, 2.031e-02, 2.768e-02, -1.103e-01, -1.293e-01, -1.184e-01, -1.116e-01, 1.894e-02, 1.554e-02, 1.594e-04, 6.044e-03, 1.706e-01, 1.729e-01, 1.149e-01, 1.711e-01) * s0_0_2;
	r2 += M4(5.010e-02, -1.233e-02, -1.434e-01, 1.423e-02, -6.187e-02, 1.426e-02, -7.895e-02, -9.861e-02, 6.135e-02, 1.948e-02, 3.113e-02, 1.791e-01, 1.280e-01, 7.963e-02, 1.827e-01, 2.456e-01) * s0_0_2;
	r0 += M4(1.928e-02, -4.953e-02, 9.655e-04, 1.554e-02, -3.345e-01, -3.205e-02, 3.245e-02, -2.453e-01, -1.014e-01, -1.672e-01, 3.142e-02, -1.475e-01, -3.468e-02, -4.681e-02, 3.605e-02, -1.024e-01) * s0_1_0;
	r1 += M4(-1.011e-01, -6.400e-02, -1.110e-01, -8.705e-02, 2.166e-02, 4.085e-02, 7.283e-02, 1.957e-02, -3.391e-02, 4.282e-03, -1.084e-02, -3.921e-02, -1.340e-01, -1.079e-01, -1.084e-01, -1.169e-01) * s0_1_0;
	r2 += M4(-1.182e-01, -3.345e-02, 6.833e-02, 3.590e-03, -1.232e-01, -8.054e-02, 5.790e-02, -1.737e-03, -2.042e-01, -1.308e-01, -2.360e-02, -8.600e-03, 1.959e-02, -2.037e-02, 5.190e-02, 5.724e-03) * s0_1_0;
	r0 += M4(-3.888e-01, -3.833e-02, 1.268e-01, 6.509e-02, -3.657e-01, -2.023e-01, -3.123e-01, -1.413e-02, 1.237e-01, -2.590e-02, -1.593e-01, 9.530e-02, -2.963e-02, -2.019e-01, -1.372e-01, -5.795e-02) * s0_1_1;
	r1 += M4(-1.862e-01, -1.699e-01, -1.880e-01, -1.738e-01, -1.844e-01, -1.763e-01, -1.646e-01, -1.854e-01, 4.148e-03, 2.584e-02, 1.814e-02, 1.378e-02, 1.471e-01, 1.682e-01, 1.535e-01, 1.651e-01) * s0_1_1;
	r2 += M4(1.279e-01, -1.635e-01, -7.562e-02, 1.342e-01, -3.090e-01, -1.569e-01, -6.942e-01, -2.075e-01, -4.294e-01, 1.136e-02, -8.413e-01, -2.606e-01, 8.620e-02, -1.318e-01, 4.251e-01, -5.554e-02) * s0_1_1;
	r0 += M4(-1.804e-02, 3.758e-02, -9.130e-02, 1.927e-02, -1.220e-02, -5.628e-02, -1.255e-01, -2.570e-02, 2.493e-02, 6.063e-02, 2.153e-02, 2.801e-02, 3.584e-02, -3.326e-02, 1.982e-02, -1.964e-03) * s0_1_2;
	r1 += M4(-8.431e-02, -5.489e-02, -6.864e-02, -6.318e-02, -1.840e-01, -1.925e-01, -1.472e-01, -1.853e-01, 1.467e-01, 1.660e-01, 1.605e-01, 1.604e-01, -1.364e-01, -1.180e-01, -1.326e-01, -1.185e-01) * s0_1_2;
	r2 += M4(-1.128e-01, 1.107e-01, -2.465e-01, -5.720e-01, -2.566e-02, -8.423e-02, -1.998e-01, -1.907e-01, 2.031e-02, -1.502e-02, -2.023e-01, -1.475e-01, -5.439e-02, 5.457e-02, 2.136e-01, 1.430e-01) * s0_1_2;
	r0 += M4(1.501e-03, 3.503e-03, -1.005e-02, -5.115e-03, 6.821e-03, 3.844e-02, -2.188e-02, -4.466e-03, -1.372e-01, -5.461e-02, 1.182e-02, 7.221e-02, 2.186e-02, 3.892e-02, 1.668e-02, -3.842e-02) * s0_2_0;
	r1 += M4(1.637e-04, -1.850e-03, 3.849e-03, -1.992e-02, 1.295e-01, 1.734e-01, 1.239e-01, 1.535e-01, -6.313e-02, -3.120e-02, -6.923e-02, -9.858e-02, 4.447e-02, -3.770e-02, -1.546e-03, -1.911e-02) * s0_2_0;
	r2 += M4(-8.102e-03, -6.250e-02, 3.341e-02, -1.319e-02, 1.704e-02, -2.628e-02, 5.892e-02, -1.683e-03, 3.238e-02, -4.739e-02, 1.523e-01, 1.752e-02, 1.882e-02, 5.496e-02, -1.194e-01, -1.081e-03) * s0_2_0;
	r0 += M4(-7.157e-02, 8.201e-02, -1.194e-02, 4.480e-02, 2.985e-02, 1.834e-02, -4.837e-02, 1.783e-02, 2.597e-02, -1.841e-01, -1.621e-01, -5.749e-03, 1.745e-02, 2.832e-02, 2.742e-02, -2.183e-03) * s0_2_1;
	r1 += M4(3.532e-02, -1.234e-03, 4.413e-02, 4.235e-02, 7.372e-02, 5.505e-02, 4.028e-02, 7.920e-02, -7.602e-02, -6.631e-02, -7.416e-02, -6.377e-02, -9.614e-02, -1.205e-01, -8.486e-02, -8.439e-02) * s0_2_1;
	r2 += M4(6.714e-02, 2.349e-01, -1.061e-01, -4.126e-02, 5.657e-02, -2.496e-02, 1.078e-03, 1.022e-02, 6.220e-02, -1.384e-01, 2.352e-01, 3.982e-03, -3.866e-02, 4.171e-02, -1.255e-01, 4.963e-03) * s0_2_1;
	r0 += M4(5.641e-02, -1.008e-01, -1.313e-01, -2.310e-02, -1.407e-05, 7.626e-03, -1.245e-02, 5.188e-03, 1.195e-02, 2.273e-02, 5.424e-02, 4.121e-02, 5.481e-03, 1.969e-03, -2.302e-03, -2.956e-02) * s0_2_2;
	r1 += M4(-1.769e-01, -1.944e-01, -1.732e-01, -1.642e-01, -2.001e-01, -2.140e-01, -2.363e-01, -2.035e-01, -1.859e-01, -1.733e-01, -1.959e-01, -1.812e-01, 1.771e-02, 2.606e-02, 2.367e-02, 2.134e-02) * s0_2_2;
	r2 += M4(-4.410e-02, -1.870e-01, 2.808e-01, 8.780e-02, -5.449e-03, -1.224e-02, 1.194e-01, 4.477e-02, 1.491e-02, 2.442e-02, 2.861e-01, 8.276e-02, -9.437e-04, -1.938e-02, -2.262e-01, -5.139e-02) * s0_2_2;
	r0 += M4(-5.119e-02, -6.266e-02, -1.918e-02, -2.064e-02, 3.020e-03, -4.281e-02, 1.397e-02, -4.795e-02, -3.427e-03, -2.847e-02, 1.183e-04, -6.145e-03, -8.155e-02, -2.217e-02, -5.378e-03, -2.819e-02) * s1_0_0;
	r1 += M4(-2.216e-01, -2.355e-01, -2.892e-01, -2.239e-01, -8.759e-02, -1.045e-01, -1.240e-01, -8.862e-02, 8.409e-02, 1.124e-01, 1.095e-01, 9.811e-02, 1.465e-01, 2.055e-01, 1.912e-01, 1.757e-01) * s1_0_0;
	r2 += M4(-7.746e-02, -3.992e-02, -7.430e-02, -1.602e-02, -5.626e-02, -2.772e-03, 1.250e-01, -4.702e-02, -6.356e-02, -7.090e-03, 2.627e-01, -1.318e-02, -2.707e-02, -3.675e-02, 5.646e-02, -1.798e-02) * s1_0_0;
	r0 += M4(-2.920e-01, -1.941e-01, -2.855e-02, 9.815e-02, 6.946e-03, 1.946e-02, 2.876e-02, -3.545e-02, -2.047e-01, -6.909e-02, 3.552e-02, 6.987e-03, 5.977e-02, 1.143e-02, 1.354e-02, -1.760e-02) * s1_0_1;
	r1 += M4(-1.516e-01, -1.657e-01, -2.188e-01, -1.474e-01, 1.618e-02, -3.179e-03, -5.358e-02, 1.317e-02, 1.107e-01, 1.285e-01, 1.260e-01, 1.191e-01, -3.612e-02, 2.888e-02, -5.615e-03, -4.226e-03) * s1_0_1;
	r2 += M4(-3.780e-01, -1.670e-01, -7.746e-01, -1.152e-01, 3.962e-02, 6.323e-02, -3.886e-02, 1.036e-01, 6.846e-02, -1.204e-01, 5.449e-01, 2.551e-02, -7.853e-04, 3.708e-02, -1.551e-01, 5.482e-02) * s1_0_1;
	r0 += M4(1.115e-02, -6.865e-03, -3.025e-02, 1.802e-02, 1.334e-02, 4.316e-03, 3.428e-02, 1.290e-02, 3.193e-02, -8.981e-02, -1.866e-01, -9.635e-03, 1.922e-02, 2.664e-02, 3.649e-02, 9.546e-03) * s1_0_2;
	r1 += M4(-1.745e-01, -1.870e-01, -2.381e-01, -1.710e-01, -1.263e-01, -1.460e-01, -1.721e-01, -1.300e-01, 7.365e-02, 8.555e-02, 8.097e-02, 7.952e-02, -6.935e-02, -4.632e-03, -4.415e-02, -1.987e-02) * s1_0_2;
	r2 += M4(-1.441e-01, -1.825e-02, -6.037e-02, -4.053e-01, 1.494e-02, 6.318e-03, -5.382e-02, -7.689e-02, -4.947e-02, -7.441e-02, 4.877e-01, 8.427e-03, -1.227e-01, 1.995e-02, -1.950e-01, -1.238e-01) * s1_0_2;
	r0 += M4(-8.995e-02, -2.791e-02, -1.303e-02, 4.757e-02, 2.955e-02, 3.168e-02, -1.261e-01, 1.064e-02, 5.139e-03, 9.239e-04, 4.767e-03, -5.848e-02, -8.582e-02, 2.923e-03, -1.935e-02, 9.058e-02) * s1_1_0;
	r1 += M4(-2.163e-01, -1.866e-01, -2.262e-01, -2.307e-01, -1.009e-01, -1.180e-01, -1.470e-01, -1.108e-01, 3.505e-03, -2.643e-02, 4.400e-03, -1.934e-02, -6.563e-02, -6.251e-02, -9.424e-02, -6.430e-02) * s1_1_0;
	r2 += M4(-6.491e-02, -7.641e-02, -1.006e-01, -3.847e-03, 1.038e-01, 2.362e-02, 7.139e-02, -7.066e-03, -3.582e-02, -1.282e-02, -6.705e-02, -1.638e-02, -1.439e-02, -3.452e-03, 1.462e-01, 1.965e-02) * s1_1_0;
	r0 += M4(-2.587e-01, -1.851e-01, -7.985e-02, 7.360e-02, -2.062e-01, -1.997e-01, 7.485e-02, -1.134e-01, 9.641e-02, -5.533e-02, -1.121e-02, -3.396e-02, -2.075e-01, -1.597e-01, -6.665e-02, 4.040e-02) * s1_1_1;
	r1 += M4(5.438e-02, 6.260e-02, 2.558e-03, 5.224e-02, 6.637e-02, 2.628e-02, 1.044e-02, 6.204e-02, -2.038e-01, -2.145e-01, -2.210e-01, -2.063e-01, 4.072e-02, 4.924e-02, 2.946e-02, 3.835e-02) * s1_1_1;
	r2 += M4(-2.380e-01, -1.902e-01, -8.260e-01, -6.282e-02, -5.439e-01, -3.029e-01, -2.044e-01, -2.124e-01, -1.714e-01, 9.628e-02, -2.396e-01, -3.158e-02, 5.954e-02, -2.643e-01, 2.115e-01, -7.376e-02) * s1_1_1;
	r0 += M4(3.462e-02, -2.818e-02, -5.332e-01, -4.726e-03, -8.693e-02, -2.974e-02, -7.543e-02, 6.573e-02, -3.137e-02, 3.995e-02, 2.143e-01, 1.925e-02, 6.020e-02, -1.154e-02, -9.892e-02, 2.873e-02) * s1_1_2;
	r1 += M4(-5.988e-02, -7.190e-02, -9.834e-02, -5.420e-02, -1.164e-01, -1.360e-01, -1.789e-01, -1.165e-01, -1.292e-01, -1.290e-01, -1.342e-01, -1.314e-01, -1.067e-01, -1.084e-01, -1.081e-01, -1.154e-01) * s1_1_2;
	r2 += M4(-6.632e-03, -9.791e-02, -2.510e-01, -3.877e-01, 1.294e-01, 6.075e-02, 2.137e-01, 2.581e-01, -1.526e-02, 1.429e-01, -2.004e-01, -1.274e-01, 9.417e-02, 4.602e-02, 5.116e-02, 1.924e-01) * s1_1_2;
	r0 += M4(-2.294e-02, -3.552e-02, -8.779e-03, -2.050e-03, -1.282e-01, -2.131e-02, 2.253e-02, -4.257e-03, -1.271e-02, -4.389e-03, -1.891e-02, -1.328e-02, 5.481e-02, 1.223e-02, -1.941e-03, -4.871e-02) * s1_2_0;
	r1 += M4(1.078e-01, 6.235e-02, 1.052e-01, 8.247e-02, -1.545e-01, -1.707e-01, -1.713e-01, -1.427e-01, -8.990e-02, -7.559e-02, -3.771e-02, -5.243e-02, 1.430e-01, 1.459e-01, 1.260e-01, 1.451e-01) * s1_2_0;
	r2 += M4(-1.790e-02, -2.688e-02, 6.474e-02, -3.930e-03, 2.237e-02, 6.136e-02, 3.671e-03, 1.543e-02, -5.368e-03, -1.463e-02, -3.806e-02, 3.169e-03, 2.361e-02, 6.310e-03, -1.831e-01, 3.860e-04) * s1_2_0;
	r0 += M4(-1.712e-02, -1.108e-01, -3.513e-02, -1.450e-02, 5.868e-02, -4.295e-03, -2.588e-01, -4.179e-02, -1.152e-02, -9.353e-03, -1.100e-02, -6.609e-03, 2.267e-02, 5.069e-02, 1.265e-01, -2.945e-02) * s1_2_1;
	r1 += M4(1.738e-01, 1.327e-01, 1.868e-01, 1.630e-01, -4.938e-02, -6.294e-02, -6.309e-02, -4.513e-02, 9.070e-02, 1.079e-01, 1.428e-01, 1.277e-01, -1.042e-01, -9.756e-02, -1.251e-01, -1.011e-01) * s1_2_1;
	r2 += M4(-1.967e-02, -1.452e-01, 9.141e-02, -5.020e-04, 2.825e-02, -1.452e-01, 3.318e-02, -4.130e-02, 2.441e-03, -3.432e-02, 2.984e-02, -6.545e-03, -1.343e-01, 1.528e-01, -2.064e-01, -2.504e-02) * s1_2_1;
	r0 += M4(1.128e-02, -4.185e-02, -1.033e-01, 1.499e-02, -3.649e-02, 4.919e-02, 2.192e-01, 1.892e-02, -1.880e-02, 1.568e-03, -4.553e-02, -4.944e-04, 2.359e-04, -2.276e-02, -3.412e-02, -2.471e-03) * s1_2_2;
	r1 += M4(-1.545e-02, -5.280e-02, 5.233e-03, -2.296e-02, -1.761e-01, -1.839e-01, -2.236e-01, -1.737e-01, -2.235e-01, -1.790e-01, -1.269e-01, -1.804e-01, -2.144e-01, -2.133e-01, -2.577e-01, -2.123e-01) * s1_2_2;
	r2 += M4(-6.341e-03, -6.653e-03, 2.089e-02, 6.825e-03, -2.533e-02, 5.778e-02, -1.426e-01, -1.296e-02, -1.763e-03, -3.871e-02, 3.316e-02, 1.784e-03, -1.775e-02, -5.956e-02, -3.966e-01, -1.223e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-2.168e-02, -2.240e-02, 8.917e-03, -5.155e-02, 1.912e-02, -6.434e-04, -1.329e-02, -3.753e-02, 1.606e-01, 8.610e-02, -2.641e-02, 1.528e-01, 1.860e-01, 5.054e-02, 2.591e-03, 1.434e-01) * s0_0_0;
	r1 += M4(-2.592e-01, -2.284e-01, -2.302e-01, -2.749e-01, 1.873e-02, 2.654e-02, -1.487e-02, -1.872e-02, 5.432e-02, 3.161e-02, 5.320e-02, 5.120e-02, -3.652e-01, -3.076e-01, -3.409e-01, -3.865e-01) * s0_0_0;
	r2 += M4(-6.682e-03, -2.755e-03, -1.125e-01, -8.133e-03, 5.464e-02, 3.013e-03, 1.757e-02, -1.128e-02, 9.516e-02, 4.797e-02, -3.312e-02, -1.631e-02, 7.975e-02, 6.277e-02, -1.608e-01, 2.667e-02) * s0_0_0;
	r0 += M4(-1.220e-01, -6.186e-02, 1.375e-02, 4.220e-03, 2.860e-01, 1.808e-01, 5.247e-03, 7.188e-02, 2.233e-02, 1.561e-02, 4.478e-02, -7.434e-02, 1.945e-02, -3.254e-02, -2.983e-02, -7.228e-03) * s0_0_1;
	r1 += M4(-2.629e-01, -2.255e-01, -2.537e-01, -2.570e-01, -1.311e-01, -1.221e-01, -1.776e-01, -1.525e-01, -1.692e-01, -1.822e-01, -1.689e-01, -1.676e-01, -3.614e-01, -2.477e-01, -3.350e-01, -3.765e-01) * s0_0_1;
	r2 += M4(-2.368e-01, -5.275e-02, 2.143e-01, -1.117e-03, 4.267e-01, 1.048e-01, -1.286e-01, 1.185e-01, 8.851e-02, 3.937e-02, 1.168e-01, 8.331e-02, 2.867e-01, 2.766e-02, -1.163e-01, 1.491e-01) * s0_0_1;
	r0 += M4(-9.074e-03, -1.019e-02, -9.798e-03, 1.401e-02, 6.252e-02, 6.041e-02, 3.193e-02, -4.808e-02, -2.020e-02, -3.627e-02, -3.364e-02, 7.300e-03, 1.454e-02, 2.814e-02, 2.064e-02, -2.095e-02) * s0_0_2;
	r1 += M4(1.060e-01, 1.294e-01, 1.371e-01, 1.228e-01, -1.365e-01, -1.296e-01, -1.572e-01, -1.458e-01, -1.866e-02, -2.782e-02, -1.371e-02, -1.653e-02, -2.067e-01, -1.555e-01, -2.054e-01, -2.438e-01) * s0_0_2;
	r2 += M4(-2.339e-02, -1.249e-02, -1.218e-01, -1.618e-01, 1.092e-01, 6.518e-02, 1.169e-01, 3.208e-01, -1.793e-02, -2.612e-02, -1.145e-02, 4.161e-02, -3.883e-03, 1.643e-02, 4.473e-03, 4.919e-02) * s0_0_2;
	r0 += M4(1.509e-01, 1.641e-01, -3.408e-02, 1.538e-01, 2.565e-01, 2.607e-01, -1.089e-02, -1.138e-02, -4.307e-02, 5.724e-02, -3.287e-02, -2.388e-01, 2.801e-01, -9.138e-02, 2.172e-03, 4.951e-01) * s0_1_0;
	r1 += M4(-2.678e-01, -1.888e-01, -2.063e-01, -3.051e-01, -1.906e-01, -1.564e-01, -1.516e-01, -1.979e-01, -6.868e-02, -5.356e-02, -6.432e-02, -3.512e-02, -7.434e-02, -4.039e-02, -1.034e-01, -1.079e-01) * s0_1_0;
	r2 += M4(4.953e-01, 1.776e-01, -1.922e-01, -3.337e-03, 2.722e-01, 1.980e-01, 1.507e-02, 5.870e-03, 8.882e-02, 7.151e-02, 1.870e-01, -6.421e-02, 7.642e-02, -6.307e-02, 7.190e-01, -3.843e-02) * s0_1_0;
	r0 += M4(-1.031e-01, -7.927e-02, 7.401e-02, 1.359e-02, -7.369e-02, 6.856e-01, 2.842e-01, 1.518e-01, 2.421e-01, -1.981e-01, -1.165e-01, 4.321e-02, 2.959e-01, 1.837e-01, 2.854e-01, -3.803e-02) * s0_1_1;
	r1 += M4(-2.309e-01, -1.788e-01, -2.044e-01, -2.422e-01, -1.665e-01, -1.355e-01, -1.594e-01, -1.661e-01, -9.067e-02, -7.399e-02, -1.002e-01, -5.707e-02, -1.391e-01, -3.548e-02, -1.775e-01, -1.412e-01) * s0_1_1;
	r2 += M4(1.889e-01, -1.998e-01, -5.215e-02, 5.084e-01, 3.643e-02, 2.979e-01, -2.181e-01, 4.401e-01, -4.220e-01, -1.284e-01, -3.375e-01, 1.200e-02, 3.602e-01, 4.752e-01, 8.677e-02, 4.854e-01) * s0_1_1;
	r0 += M4(-6.256e-02, 1.108e-02, -5.797e-02, 2.728e-02, 1.261e-01, -3.427e-02, -1.652e-02, -9.740e-02, -1.422e-02, 1.102e-01, 2.283e-01, 4.015e-02, 2.902e-02, -2.137e-02, -3.553e-02, -2.471e-02) * s0_1_2;
	r1 += M4(2.324e-02, 4.479e-02, 4.564e-02, 1.332e-02, -2.913e-02, -1.993e-03, -2.434e-02, -3.053e-02, -2.161e-01, -1.978e-01, -2.125e-01, -1.975e-01, -7.832e-02, -5.912e-02, -1.169e-01, -1.098e-01) * s0_1_2;
	r2 += M4(-8.815e-03, 2.791e-02, 7.902e-02, -1.902e-02, -1.686e-01, -7.068e-02, -3.896e-01, -5.258e-01, 1.191e-01, 3.336e-02, 1.053e-01, 2.674e-01, 1.108e-02, -4.307e-02, -4.319e-02, -4.722e-02) * s0_1_2;
	r0 += M4(-6.077e-02, 7.330e-02, 2.534e-02, 6.897e-02, 7.721e-02, 3.533e-02, -1.036e-02, -9.890e-02, 1.020e-01, 3.729e-02, -4.135e-02, 2.528e-02, 1.254e-01, -2.347e-02, -1.558e-02, -9.205e-02) * s0_2_0;
	r1 += M4(-1.999e-01, -1.947e-01, -1.891e-01, -2.068e-01, -1.148e-01, -1.006e-01, -1.395e-01, -9.977e-02, 2.959e-02, -2.050e-02, 1.096e-02, -5.283e-03, -8.203e-02, -6.818e-02, -1.129e-01, -7.578e-02) * s0_2_0;
	r2 += M4(6.470e-02, 2.959e-01, -6.395e-02, 1.759e-02, -1.482e-02, 5.261e-02, -1.701e-02, -1.581e-02, -8.222e-03, 1.140e-02, -4.974e-02, 6.025e-03, -3.256e-02, 9.323e-02, -2.607e-01, -1.780e-02) * s0_2_0;
	r0 += M4(-5.027e-02, 4.052e-02, 5.468e-01, -2.428e-02, -1.103e-01, 6.717e-02, 1.761e-01, 7.514e-02, -5.926e-02, 6.969e-02, 9.905e-02, -3.073e-02, 4.793e-02, -6.197e-02, 1.810e-01, -1.431e-02) * s0_2_1;
	r1 += M4(-1.482e-01, -1.127e-01, -1.568e-01, -1.540e-01, -2.792e-01, -2.574e-01, -3.108e-01, -2.770e-01, 7.202e-02, 3.190e-02, 7.676e-02, 8.716e-02, -4.176e-01, -2.886e-01, -4.560e-01, -4.101e-01) * s0_2_1;
	r2 += M4(5.656e-02, 3.185e-01, 6.035e-02, 7.202e-02, 9.730e-03, -5.090e-02, 1.400e-01, 8.211e-03, 6.784e-02, -1.330e-01, 6.863e-02, 1.764e-02, -3.831e-02, 1.038e-01, -2.487e-01, -6.250e-02) * s0_2_1;
	r0 += M4(8.622e-03, -1.811e-02, 1.081e-02, 2.760e-03, 1.652e-03, -2.726e-02, -2.678e-01, -2.070e-02, -2.836e-02, 2.061e-02, 5.390e-02, 1.945e-02, 6.656e-03, 4.787e-04, -4.278e-02, -6.072e-03) * s0_2_2;
	r1 += M4(-1.305e-01, -1.227e-01, -1.862e-01, -1.305e-01, -3.047e-03, 4.005e-02, -2.760e-02, 2.231e-03, -8.987e-02, -1.189e-01, -9.056e-02, -8.635e-02, -1.715e-01, -1.177e-01, -2.225e-01, -1.885e-01) * s0_2_2;
	r2 += M4(1.719e-02, -1.071e-02, 1.169e-01, 4.186e-03, -7.158e-03, -9.424e-02, 1.786e-02, 3.740e-02, 8.984e-03, 8.374e-02, 1.242e-01, -9.894e-03, -2.226e-02, -9.662e-03, -9.258e-02, 1.286e-02) * s0_2_2;
	r0 += V4(-3.207e-03, -2.127e-03, -3.314e-03, -2.763e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.312e-01, -1.909e-01, -1.665e-01, -1.896e-01);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.513e-03, -3.102e-03, -1.696e-02, -3.687e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_3x12] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv3
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(5.914e-03, -1.432e-02, 7.037e-04, -1.714e-03, -1.188e-01, -1.871e-02, -1.021e-02, -1.122e-03, 1.671e-01, 8.285e-02, -3.275e-03, -1.950e-02, 3.900e-08, -1.093e-07, -1.904e-07, 1.871e-04) * s0_0_0;
	r0 += M4(-1.265e-01, -4.666e-03, 1.546e-03, 7.270e-03, 2.285e-03, -1.675e-01, -8.091e-03, -2.533e-02, 3.096e-04, 1.792e-01, -1.457e-03, 1.839e-02, 2.128e-02, -1.326e-02, -6.940e-04, -2.723e-03) * s0_0_1;
	r0 += M4(-1.132e-02, -7.739e-02, 4.751e-03, -1.009e-02, -1.606e-02, 4.063e-02, -5.169e-03, 1.303e-02, 4.774e-03, -1.434e-02, 2.113e-03, -7.055e-03, -3.838e-03, 5.294e-02, -1.842e-02, -1.308e-02) * s0_0_2;
	r0 += M4(5.481e-02, -7.174e-03, 5.505e-02, -1.577e-02, 6.030e-03, -2.088e-02, -1.851e-01, -2.099e-03, -1.156e-02, -2.252e-02, -5.322e-01, 1.450e-01, 2.525e-03, 3.041e-04, 1.992e-06, 1.049e-04) * s0_1_0;
	r0 += M4(1.282e-01, 2.159e-01, -3.951e-01, 9.605e-02, 1.975e-01, 1.841e-01, 1.824e-01, -8.375e-02, -6.190e-02, 2.119e-02, -2.159e-02, 2.259e-01, 2.386e-01, 7.856e-03, 1.613e-01, 8.964e-03) * s0_1_1;
	r0 += M4(-2.375e-02, -2.323e-02, -2.324e-02, -1.255e-01, 3.396e-03, 5.481e-02, 3.875e-03, 7.886e-02, -2.275e-03, -1.679e-02, -1.913e-03, -3.539e-02, -2.764e-01, -1.009e-01, -2.216e-02, 7.154e-02) * s0_1_2;
	r0 += M4(-3.802e-04, 2.775e-05, 1.903e-02, -1.549e-03, -1.168e-02, -4.615e-03, -3.772e-02, -4.406e-02, -1.795e-03, 4.430e-03, -4.061e-02, -2.948e-02, -2.964e-03, -2.524e-05, -3.166e-03, -1.548e-05) * s0_2_0;
	r0 += M4(-5.548e-03, -1.096e-03, 1.025e-01, 9.839e-02, -1.776e-02, -3.746e-03, 2.378e-02, 5.630e-02, -6.353e-03, 4.868e-03, -2.167e-02, -2.440e-02, -5.311e-04, 2.508e-03, 5.533e-02, -1.243e-02) * s0_2_1;
	r0 += M4(1.477e-02, 2.230e-03, 1.295e-02, 1.179e-02, 1.229e-03, -2.502e-03, -4.091e-03, 2.210e-03, -3.053e-04, -5.222e-04, 1.670e-03, -6.048e-03, 3.473e-02, 1.250e-03, -8.765e-02, -1.845e-02) * s0_2_2;
	r0 += M4(2.915e-02, 4.374e-02, -4.534e-02, -6.523e-02, -1.134e-01, -1.123e-01, -1.183e-01, -1.125e-01, 1.737e-02, 2.522e-02, 1.042e-01, 2.999e-02, 6.977e-02, 7.073e-02, 4.451e-03, -2.356e-02) * s1_0_0;
	r0 += M4(1.090e-01, 1.197e-01, 5.894e-02, 3.541e-02, 6.266e-02, 7.786e-02, 9.484e-02, 7.543e-02, 1.227e-02, 1.353e-02, 5.362e-02, 4.709e-02, 2.844e-02, 3.728e-02, 1.602e-02, 1.320e-02) * s1_0_1;
	r0 += M4(8.843e-02, 1.158e-01, 1.252e-03, 5.994e-03, 5.333e-03, 4.682e-03, -8.049e-03, 2.594e-03, 6.018e-02, 3.021e-02, 6.763e-04, 1.186e-02, 4.325e-02, 5.116e-02, 4.309e-02, 1.614e-02) * s1_0_2;
	r0 += M4(-4.147e-02, -4.457e-03, 3.354e-02, 3.398e-02, -5.982e-02, -6.177e-02, -6.117e-02, -7.067e-02, 2.671e-02, 2.012e-02, -4.657e-02, -8.841e-02, -5.728e-02, -5.070e-02, 3.864e-02, 2.734e-02) * s1_1_0;
	r0 += M4(-9.193e-02, -8.461e-02, 2.834e-02, 3.355e-03, -1.461e-02, -2.311e-02, -2.214e-02, -1.085e-02, 3.821e-02, 2.961e-02, -5.805e-02, -5.904e-02, 2.275e-02, 4.654e-02, 1.281e-01, 1.199e-01) * s1_1_1;
	r0 += M4(-6.908e-02, -6.197e-02, 5.824e-02, 2.804e-02, -7.914e-02, -7.692e-02, -6.846e-02, -7.802e-02, 5.060e-04, 6.348e-03, -8.012e-02, -9.867e-02, -3.967e-02, -1.257e-02, 7.555e-02, 7.307e-02) * s1_1_2;
	r0 += M4(-5.860e-02, -5.421e-02, 6.882e-02, 6.369e-02, 1.155e-02, 1.018e-02, 3.119e-03, 5.154e-03, -1.050e-01, -7.727e-02, -9.844e-02, -8.813e-02, 2.284e-01, 2.550e-01, 1.613e-01, 1.699e-01) * s1_2_0;
	r0 += M4(-4.060e-02, -4.826e-02, 7.349e-02, 7.002e-02, 1.878e-02, 1.547e-02, 9.358e-03, 1.308e-02, 7.030e-02, 4.437e-02, 9.009e-02, 8.004e-02, 3.618e-02, 2.336e-02, -3.818e-02, -4.324e-02) * s1_2_1;
	r0 += M4(-5.505e-02, -3.584e-02, 7.155e-02, 6.384e-02, 1.037e-01, 1.021e-01, 1.034e-01, 1.086e-01, -1.171e-01, -1.013e-01, -5.081e-02, -3.921e-02, 9.293e-02, 8.476e-02, 5.090e-02, 2.515e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.715e-02, 1.511e-02, -5.990e-05, -3.701e-04, 8.426e-02, 2.042e-02, 9.792e-03, 5.597e-03, 3.018e-02, 5.922e-04, -3.094e-03, -6.435e-04, 4.283e-02, 1.008e-02, -4.546e-04, 1.761e-03) * s0_0_0;
	r0 += M4(3.648e-02, 3.503e-02, 1.564e-03, -9.210e-04, 9.131e-02, 9.526e-02, 2.693e-02, 3.581e-02, 1.495e-02, 3.333e-02, -1.143e-02, -1.206e-02, -3.901e-03, 1.581e-02, -5.829e-04, -6.190e-04) * s0_0_1;
	r0 += M4(-1.134e-03, 1.162e-02, 5.314e-04, -3.340e-04, 1.272e-02, 7.523e-03, 1.358e-03, 3.791e-03, 7.476e-04, 8.784e-03, -1.154e-03, -3.524e-04, 3.300e-04, -2.919e-03, -1.015e-04, 9.374e-07) * s0_0_2;
	r0 += M4(-5.965e-02, 8.447e-03, 1.224e-02, 3.562e-03, -5.512e-04, 6.228e-03, 8.667e-02, 1.858e-02, -1.046e-01, 5.744e-03, 7.018e-02, -3.470e-03, -6.695e-01, 1.754e-01, 1.199e-01, 1.440e-01) * s0_1_0;
	r0 += M4(1.194e-01, -6.074e-01, 1.117e-01, 5.243e-02, 4.749e-02, -4.514e-02, 6.715e-02, -7.333e-01, -8.686e-02, -2.666e-01, 1.184e-01, 1.541e-01, 3.953e-03, 7.446e-02, -2.502e-02, 6.223e-02) * s0_1_1;
	r0 += M4(-2.480e-03, 2.858e-02, -1.587e-03, 2.744e-02, -2.071e-03, 3.405e-02, 6.754e-04, 3.107e-02, -3.260e-03, 1.452e-02, -7.036e-03, 2.471e-02, 1.393e-03, -1.581e-02, 6.512e-05, -7.827e-03) * s0_1_2;
	r0 += M4(6.741e-03, 4.103e-03, -4.907e-03, 1.102e-02, 2.482e-03, 5.813e-04, 1.894e-02, 1.935e-02, 8.771e-04, -9.251e-04, 3.650e-02, -1.046e-02, -4.141e-03, 3.121e-03, 8.362e-02, 2.687e-02) * s0_2_0;
	r0 += M4(-6.837e-03, 1.625e-02, 5.725e-02, 4.708e-02, 8.873e-03, -9.040e-03, 3.174e-02, 1.043e-02, 1.628e-02, 5.716e-03, -2.529e-02, 3.799e-02, 3.264e-04, -1.811e-02, -1.780e-02, 3.459e-02) * s0_2_1;
	r0 += M4(-1.801e-03, -6.516e-03, -1.474e-03, 8.956e-04, -3.013e-03, 8.568e-04, -1.766e-03, 1.813e-02, 9.367e-04, 1.242e-02, -4.848e-03, -2.155e-02, 5.855e-04, -1.079e-03, 1.151e-03, -2.636e-04) * s0_2_2;
	r0 += V4(-1.487e-08, -1.434e-08, -9.046e-09, -1.464e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
