// CuNNy 8x32
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_8x32_vk] -in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(2.855e-02, 1.707e-02, 2.314e-02, 2.500e-03) * s0_0_0;
	r1 += V4(3.692e-03, -1.355e-03, 3.064e-03, -4.530e-02) * s0_0_0;
	r2 += V4(5.777e-02, -5.683e-02, -1.666e-02, -2.719e-02) * s0_0_0;
	r3 += V4(-3.304e-02, 1.202e-01, 1.399e-02, -1.489e-01) * s0_0_0;
	r4 += V4(4.080e-02, -2.506e-02, 2.926e-03, 7.671e-02) * s0_0_0;
	r5 += V4(1.831e-02, -3.543e-02, 7.485e-03, -7.280e-03) * s0_0_0;
	r6 += V4(-1.392e-01, -4.439e-02, -7.912e-01, -8.170e-03) * s0_0_0;
	r7 += V4(1.448e-01, 2.085e-01, 1.224e-01, -4.533e-03) * s0_0_0;
	r0 += V4(-6.009e-02, -6.154e-02, 3.230e-02, -1.121e-01) * s0_0_1;
	r1 += V4(-1.485e-02, 7.612e-04, -1.736e-02, 8.820e-02) * s0_0_1;
	r2 += V4(-3.668e-02, 1.526e-01, 1.426e-02, 5.054e-03) * s0_0_1;
	r3 += V4(-2.408e-01, -2.173e-01, -4.334e-02, -1.222e-02) * s0_0_1;
	r4 += V4(-8.667e-02, 6.069e-02, 5.945e-02, -4.990e-01) * s0_0_1;
	r5 += V4(-9.986e-02, 2.254e-01, 2.356e-01, 7.351e-02) * s0_0_1;
	r6 += V4(-9.684e-02, -1.258e-03, -1.899e-01, -4.092e-01) * s0_0_1;
	r7 += V4(-1.812e-01, -3.108e-02, -1.694e-01, 1.296e-02) * s0_0_1;
	r0 += V4(-1.597e-02, -7.643e-02, 8.351e-02, 7.521e-02) * s0_0_2;
	r1 += V4(8.984e-03, 1.846e-03, 1.762e-02, 2.954e-02) * s0_0_2;
	r2 += V4(-2.137e-02, -8.341e-02, -1.143e+00, 1.454e-02) * s0_0_2;
	r3 += V4(-9.541e-03, 9.128e-02, 3.748e-02, 1.421e-01) * s0_0_2;
	r4 += V4(1.334e-02, -4.343e-02, -2.238e-02, 7.613e-02) * s0_0_2;
	r5 += V4(1.047e-01, 2.458e-01, 3.423e-01, 3.551e-02) * s0_0_2;
	r6 += V4(-2.939e-01, 2.207e-02, -4.137e-02, 5.960e-02) * s0_0_2;
	r7 += V4(-1.526e-01, -2.065e-01, 4.767e-02, -8.130e-04) * s0_0_2;
	r0 += V4(-1.821e-02, -8.794e-02, -9.575e-02, 1.621e-02) * s0_1_0;
	r1 += V4(1.787e-02, 7.867e-04, -7.714e-03, 1.578e-01) * s0_1_0;
	r2 += V4(1.450e-01, 1.095e-01, -5.164e-02, 1.081e-01) * s0_1_0;
	r3 += V4(6.910e-02, -7.155e-02, 2.843e-02, 3.526e-01) * s0_1_0;
	r4 += V4(2.541e-01, 1.357e-02, 1.521e-01, 5.342e-01) * s0_1_0;
	r5 += V4(4.897e-02, 4.818e-02, -1.136e-02, -6.340e-03) * s0_1_0;
	r6 += V4(8.874e-02, -7.748e-02, -1.008e-01, -5.704e-02) * s0_1_0;
	r7 += V4(7.476e-02, -1.146e-01, 5.384e-02, -1.988e-03) * s0_1_0;
	r0 += V4(2.418e-01, 1.256e-01, 4.191e-02, 9.107e-02) * s0_1_1;
	r1 += V4(-1.460e-01, -1.868e-02, 1.708e-04, -2.533e-01) * s0_1_1;
	r2 += V4(-3.388e-01, -2.511e-01, 8.829e-02, -1.007e-01) * s0_1_1;
	r3 += V4(-1.167e-01, 4.885e-02, -1.813e-01, -1.663e-01) * s0_1_1;
	r4 += V4(-2.427e-01, -3.994e-01, -1.687e-01, 6.916e-02) * s0_1_1;
	r5 += V4(5.676e-02, -2.085e-01, -2.448e-01, 4.053e-01) * s0_1_1;
	r6 += V4(3.258e-01, 2.666e-01, 3.416e-01, 3.057e-01) * s0_1_1;
	r7 += V4(2.265e-01, -2.713e-02, 2.048e-01, -4.969e-02) * s0_1_1;
	r0 += V4(5.517e-02, 1.687e-01, 1.095e-01, 1.073e-01) * s0_1_2;
	r1 += V4(7.326e-02, -3.727e-02, 5.940e-03, -1.048e-02) * s0_1_2;
	r2 += V4(1.958e-01, 1.598e-01, -1.449e+00, -5.757e-02) * s0_1_2;
	r3 += V4(-4.161e-02, 7.684e-02, -1.689e-02, -1.564e-01) * s0_1_2;
	r4 += V4(-2.446e-04, 3.869e-01, -1.292e-02, 7.200e-02) * s0_1_2;
	r5 += V4(-3.682e-01, -2.705e-01, -3.154e-01, -3.936e-01) * s0_1_2;
	r6 += V4(-1.374e-03, -9.468e-03, -8.073e-02, 7.872e-02) * s0_1_2;
	r7 += V4(-1.002e-01, 7.056e-02, -2.099e-01, -4.738e-01) * s0_1_2;
	r0 += V4(-1.452e-02, 7.782e-02, 5.225e-03, -8.094e-03) * s0_2_0;
	r1 += V4(-2.510e-02, 1.531e-03, -5.324e-03, -6.665e-02) * s0_2_0;
	r2 += V4(-2.096e-01, -7.077e-02, -7.443e-02, -7.840e-02) * s0_2_0;
	r3 += V4(-3.984e-02, -8.567e-02, -5.432e-02, -2.056e-01) * s0_2_0;
	r4 += V4(2.265e-01, 1.667e-02, 1.395e-01, -1.802e-01) * s0_2_0;
	r5 += V4(2.496e-02, -1.493e-03, -4.101e-03, 1.408e-02) * s0_2_0;
	r6 += V4(-6.192e-01, -2.648e-01, -4.268e-01, -3.213e-01) * s0_2_0;
	r7 += V4(-1.979e-02, -1.343e-01, -1.860e-01, 8.148e-03) * s0_2_0;
	r0 += V4(-1.565e-01, -6.149e-02, -1.196e-01, -5.345e-02) * s0_2_1;
	r1 += V4(-4.232e-01, -5.687e-02, -4.270e-01, -4.456e-01) * s0_2_1;
	r2 += V4(3.799e-01, 1.460e-01, 2.308e-01, 3.838e-01) * s0_2_1;
	r3 += V4(3.680e-01, 2.161e-01, 2.381e-01, 2.046e-01) * s0_2_1;
	r4 += V4(-1.657e-01, 2.053e-02, -8.384e-02, -5.442e-02) * s0_2_1;
	r5 += V4(-1.107e-02, 4.045e-03, 1.050e-02, -7.063e-02) * s0_2_1;
	r6 += V4(1.165e-01, -4.575e-02, -1.120e-01, -2.028e-02) * s0_2_1;
	r7 += V4(-1.846e-02, 6.908e-02, 5.914e-03, 1.682e-02) * s0_2_1;
	r0 += V4(-4.626e-02, 3.604e-02, -9.914e-03, -2.306e-03) * s0_2_2;
	r1 += V4(5.059e-01, 6.465e-01, 4.190e-01, 2.764e-01) * s0_2_2;
	r2 += V4(-1.717e-01, -7.749e-02, -1.142e-01, -2.457e-01) * s0_2_2;
	r3 += V4(4.768e-02, -1.684e-01, -6.199e-03, -7.760e-03) * s0_2_2;
	r4 += V4(-3.219e-02, -2.495e-02, 5.256e-02, -3.420e-02) * s0_2_2;
	r5 += V4(5.692e-02, 1.215e-02, -2.166e-02, -4.490e-02) * s0_2_2;
	r6 += V4(-1.145e-01, -5.603e-02, -1.661e-02, -2.958e-02) * s0_2_2;
	r7 += V4(3.475e-02, 1.209e-01, 1.323e-01, 4.955e-01) * s0_2_2;
	r0 += V4(1.834e-02, -8.105e-02, -8.157e-03, 3.711e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(8.311e-03, -5.238e-01, -2.519e-02, 1.877e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.848e-03, 2.005e-02, 1.795e-02, -1.678e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(5.444e-03, 9.715e-03, 2.326e-02, 7.335e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(1.318e-02, 1.810e-02, -4.741e-03, -3.369e-01);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(4.722e-02, -5.313e-02, 2.583e-02, 4.764e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(-7.824e-03, 4.349e-04, 5.781e-02, 1.780e-02);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(8.696e-03, 7.974e-04, 7.167e-03, 1.526e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC [CuNNy_8x32_vk] -conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1E07FAFB, 0x13E71000, 0x19EFE106, 0x10F7F0EB);
	r1 = D(r1, s0_0_0, 0xFAFF07FF, 0xFAF2FF1A, 0xE5FED2AD, 0xEEFDEFF4);
	r2 = D(r2, s0_0_0, 0x07F41AF7, 0xF218F608, 0x00EEFB01, 0x06EEFAF7);
	r3 = D(r3, s0_0_0, 0xF402F302, 0xF51206EF, 0xFDF70201, 0xEA08FB02);
	r4 = D(r4, s0_0_0, 0xF507FBF4, 0xEFF700F0, 0x0F0B0606, 0x01F8FAF9);
	r5 = D(r5, s0_0_0, 0xD1E2FE04, 0xFE09F12B, 0xEBFE08F1, 0x81873CBB);
	r6 = D(r6, s0_0_0, 0xE61005F6, 0x120C0E00, 0x020F100D, 0x07FB05F9);
	r7 = D(r7, s0_0_0, 0x81DDE3C1, 0xC4BBE2D5, 0xFDD86705, 0xC4DA28B4);
	r0 = D(r0, s0_0_1, 0xF4EA03DF, 0x0FF9F20D, 0xF9F80AEA, 0xEF0703FD);
	r1 = D(r1, s0_0_1, 0xFDF900EF, 0xF40405E6, 0xC1CFEDD2, 0xF606F4F8);
	r2 = D(r2, s0_0_1, 0x1935F627, 0x16F9FFF6, 0x201B03F6, 0x230E1612);
	r3 = D(r3, s0_0_1, 0xF70CFFF2, 0xE50AFFF4, 0xF208FBF5, 0xF1FE00FC);
	r4 = D(r4, s0_0_1, 0xFDFC0403, 0x01F6FD11, 0xF1052002, 0xF3FCF015);
	r5 = D(r5, s0_0_1, 0xF8DFE8FC, 0xF60BFC04, 0xFDF8100B, 0x15131208);
	r6 = D(r6, s0_0_1, 0xF404F5F2, 0xF9F3FCFA, 0x07E80EF7, 0x03F30AF1);
	r7 = D(r7, s0_0_1, 0xDAE08119, 0xDCF0E617, 0x15F02842, 0xF1B4A408);
	r0 = D(r0, s0_0_2, 0x01070011, 0xFF0E0011, 0xFEFFF0FB, 0x05F3F309);
	r1 = D(r1, s0_0_2, 0xFE01FF05, 0xF5F5F30E, 0xF503FB15, 0x08FF0902);
	r2 = D(r2, s0_0_2, 0x0C0915F9, 0xF7FBF5F0, 0x03E7E410, 0x14170829);
	r3 = D(r3, s0_0_2, 0xF5ECFDEC, 0xFFE914EE, 0xFCFC03FB, 0xFBFBFDE6);
	r4 = D(r4, s0_0_2, 0x02120503, 0xF5FD01F3, 0xFF17CE00, 0x050E000D);
	r5 = D(r5, s0_0_2, 0x12FAF40C, 0xE1DE1A21, 0x0D01F8FF, 0xE3E50D11);
	r6 = D(r6, s0_0_2, 0x000308FB, 0xF700F6F4, 0xFDE30E07, 0x0603FEFB);
	r7 = D(r7, s0_0_2, 0xE3E4BBB8, 0x0F02F9E0, 0xEBD8F1E6, 0xD9FF1CDD);
	r0 = D(r0, s0_1_0, 0xFF16F6F0, 0xF51602F8, 0x15180414, 0x1102EA09);
	r1 = D(r1, s0_1_0, 0xFC0C0BF6, 0xF9FBE3FA, 0xF1E624F1, 0x06E60E0C);
	r2 = D(r2, s0_1_0, 0xF8F602FA, 0x0B22ECE7, 0xFE0CFDF1, 0xFB0207FD);
	r3 = D(r3, s0_1_0, 0xF9F5160D, 0xF80F07F7, 0xF600FC03, 0xFBF40BF7);
	r4 = D(r4, s0_1_0, 0xF801F1F8, 0xFD011705, 0xE7F5FE05, 0x07080411);
	r5 = D(r5, s0_1_0, 0x042B0803, 0xFF0DF9F1, 0x1406DAFF, 0x8181E1B0);
	r6 = D(r6, s0_1_0, 0x1607FA0E, 0x080E0210, 0x06F80824, 0x0F0C1507);
	r7 = D(r7, s0_1_0, 0x12C5F0E8, 0xEFF6FCD5, 0xD5AEEFE8, 0x2A5A11FA);
	r0 = D(r0, s0_1_1, 0xF9030EFE, 0xFAF31223, 0xE90718FA, 0x04150710);
	r1 = D(r1, s0_1_1, 0x0B030C15, 0x000BFAF4, 0xE50D0721, 0x1307FE07);
	r2 = D(r2, s0_1_1, 0xF030F1FA, 0x0B0FFC16, 0x041E0EED, 0x0813F6FD);
	r3 = D(r3, s0_1_1, 0x04F4040D, 0xFE001104, 0xF5F809F3, 0xFA00F6F7);
	r4 = D(r4, s0_1_1, 0xEA14060C, 0xFAEE19F6, 0xE5F831F1, 0xFAFFEA0B);
	r5 = D(r5, s0_1_1, 0xF510E5F9, 0x0BF4FFF7, 0xF2E9EEFB, 0x02120124);
	r6 = D(r6, s0_1_1, 0x19FDF818, 0xFAF61016, 0xF1FE3A11, 0x0D10FD1E);
	r7 = D(r7, s0_1_1, 0xCAD2E1DA, 0x2407334C, 0xF8E1090C, 0x110010F5);
	r0 = D(r0, s0_1_2, 0x0A11FB18, 0xFFEDE8EA, 0x01F5FBF4, 0x14FB050C);
	r1 = D(r1, s0_1_2, 0x090DFC0C, 0xFC060FF0, 0x15F0F023, 0x0AE7F608);
	r2 = D(r2, s0_1_2, 0xFC1007DA, 0xDAF7FEEF, 0xF6110DEF, 0xD8FFF2E6);
	r3 = D(r3, s0_1_2, 0xF9F6F1F2, 0xF9E107E9, 0xEEE6FFDF, 0xF3EBF2E8);
	r4 = D(r4, s0_1_2, 0x1514F40F, 0x151CE3FB, 0x07012C14, 0x0803F711);
	r5 = D(r5, s0_1_2, 0x16041405, 0x04EA1EF1, 0x000B1601, 0xF2D8F4C8);
	r6 = D(r6, s0_1_2, 0x00F500FE, 0xF8F3F8F9, 0xFC01E7FF, 0x1607F802);
	r7 = D(r7, s0_1_2, 0xF6EF2AFE, 0x1C071B25, 0xE5D9E9E1, 0xFFEFF421);
	r0 = D(r0, s0_2_0, 0xF301F806, 0xE7FC12D9, 0xF8E81A07, 0xFE01000A);
	r1 = D(r1, s0_2_0, 0xFEF9F4F9, 0xF9D6F90C, 0x210D1F0E, 0x05140DF1);
	r2 = D(r2, s0_2_0, 0xFC00F51C, 0x03FA1411, 0xF9050B18, 0xF106FAFB);
	r3 = D(r3, s0_2_0, 0x011C10FB, 0x060EE308, 0x0809FB04, 0x150EF205);
	r4 = D(r4, s0_2_0, 0xECF202F4, 0xFC0BF8E9, 0x09EDEEF3, 0xF7CE0FEA);
	r5 = D(r5, s0_2_0, 0x08FE0AEC, 0x101424E6, 0xFEEC06EF, 0x5181702A);
	r6 = D(r6, s0_2_0, 0x14FCEF00, 0x17FFF9FE, 0xFB13E7F1, 0x120C00FD);
	r7 = D(r7, s0_2_0, 0x082AFB06, 0xF91DC7FA, 0xF2DAF2E4, 0xFF10F93A);
	r0 = D(r0, s0_2_1, 0xF9001504, 0x1DD016F7, 0x0E00EE05, 0x0A040903);
	r1 = D(r1, s0_2_1, 0x0513FD07, 0x1A16051D, 0xFE04F4FF, 0x061C09FD);
	r2 = D(r2, s0_2_1, 0xFCE7FA04, 0x19F21220, 0xF6DB0E1D, 0xFDFAFA01);
	r3 = D(r3, s0_2_1, 0x0AFB0DF5, 0x180FF114, 0x1AFF1312, 0x15FE1D0B);
	r4 = D(r4, s0_2_1, 0x01F600ED, 0x0300FE06, 0xFB16F209, 0xEC16DFEE);
	r5 = D(r5, s0_2_1, 0xF80B18E2, 0xEC1CDDFD, 0xE306F909, 0xE316E5F7);
	r6 = D(r6, s0_2_1, 0xF1F400F3, 0xF101FBF8, 0xE2F4F5EF, 0x0500F505);
	r7 = D(r7, s0_2_1, 0xA3F3F20C, 0xFD1327F8, 0x0EF3F525, 0xDCCBD6FF);
	r0 = D(r0, s0_2_2, 0xEBF2FBE3, 0x0101FAFC, 0xF6F7050E, 0xF5FD0403);
	r1 = D(r1, s0_2_2, 0x0002FC03, 0x0CF30C13, 0x0EE6F90F, 0x1106040D);
	r2 = D(r2, s0_2_2, 0x04CE02FC, 0xE7E00900, 0xFBE7FAFA, 0xF0FB0701);
	r3 = D(r3, s0_2_2, 0x07F00311, 0x0EED0714, 0x0FFAFB11, 0x18EA070B);
	r4 = D(r4, s0_2_2, 0x26130D03, 0xFBFDFE12, 0x07EACBF8, 0x1E123014);
	r5 = D(r5, s0_2_2, 0x101FED16, 0x0D09FE18, 0x130F011A, 0xFB270E16);
	r6 = D(r6, s0_2_2, 0x01F908FF, 0xE7F20600, 0x04FFEEFD, 0x0200050A);
	r7 = D(r7, s0_2_2, 0x1B3734E0, 0x11DCE211, 0xFAE3D504, 0x06F9EDE1);
	r0 = D(r0, s1_0_0, 0xE4067DFC, 0x1B299CC4, 0xEAF4E7FC, 0x16178132);
	r1 = D(r1, s1_0_0, 0xF4C9582F, 0xF9EE1B08, 0x2DEE9CE6, 0xF3BE41F7);
	r2 = D(r2, s1_0_0, 0x30C24F20, 0x23EE81EE, 0xFCF91B10, 0x09FE1BFE);
	r3 = D(r3, s1_0_0, 0xF00775D5, 0x005A3CC6, 0x03000A07, 0x090B14FE);
	r4 = D(r4, s1_0_0, 0x1FEE8104, 0x1D1F7F05, 0xE30B8103, 0x1FE98108);
	r5 = D(r5, s1_0_0, 0xCBF9D0E8, 0x0518F2D7, 0x15018115, 0xEB0F9A81);
	r6 = D(r6, s1_0_0, 0x09FA150D, 0x05F546F6, 0xE0C77F0A, 0x01127F11);
	r7 = D(r7, s1_0_0, 0xB56F7F81, 0x8DE581F9, 0x35E3C4DC, 0xC8267FDF);
	r0 = D(r0, s1_0_1, 0xF5276824, 0x25D783FA, 0xF10CFB04, 0x070B04F9);
	r1 = D(r1, s1_0_1, 0xF43ADBD7, 0xF5E3B1DF, 0xF61D53C5, 0xE9CE32E9);
	r2 = D(r2, s1_0_1, 0x0C359703, 0xFA0EB7ED, 0xF9E9FE27, 0xF31FD6CC);
	r3 = D(r3, s1_0_1, 0x254FE092, 0x50F65B24, 0xEC11EBF8, 0x0D109AC6);
	r4 = D(r4, s1_0_1, 0x02DDBA16, 0x1A261510, 0xB415990B, 0xC4E5B90F);
	r5 = D(r5, s1_0_1, 0x220A3FE6, 0x727FA5D6, 0xD8E78129, 0x26C33FF9);
	r6 = D(r6, s1_0_1, 0xFD0AF107, 0xF238BC81, 0x140A1A0B, 0x110316F9);
	r7 = D(r7, s1_0_1, 0x63028117, 0xDF316701, 0x13F9D327, 0xE9E19911);
	r0 = D(r0, s1_0_2, 0xF91625E5, 0xF7C5DE11, 0x08F1E4F3, 0xF91FF7F9);
	r1 = D(r1, s1_0_2, 0xFB0DEFF3, 0xDCEC2E19, 0xEBEBED13, 0xF7EA1A0A);
	r2 = D(r2, s1_0_2, 0xFEFCEA04, 0xEB2BF9E5, 0xFB0B0CF3, 0x140124EC);
	r3 = D(r3, s1_0_2, 0xC84CECF2, 0x0BFB2F29, 0x120AE801, 0xF7EDE017);
	r4 = D(r4, s1_0_2, 0xD7A30B2E, 0xFC0F1EFB, 0xF7F31D0B, 0x2305C0D1);
	r5 = D(r5, s1_0_2, 0xE91B240D, 0xE1FC6027, 0xEA041606, 0xF7FA0A2A);
	r6 = D(r6, s1_0_2, 0x05F5070B, 0x080C0BFE, 0xE9E71BF0, 0xFAEF0C05);
	r7 = D(r7, s1_0_2, 0x1200EBF0, 0xC303C332, 0x3805180D, 0xC9FAC60A);
	r0 = D(r0, s1_1_0, 0xF0F78112, 0xEDF5A2F8, 0x17C9B41F, 0x15E1CF39);
	r1 = D(r1, s1_1_0, 0x08FF0929, 0xFDDD9CFC, 0x36EF3B0A, 0xEE1810FF);
	r2 = D(r2, s1_1_0, 0x0113F0EB, 0x0A23F6D5, 0x2D01D0FC, 0x01FC1203);
	r3 = D(r3, s1_1_0, 0xD00981C3, 0xE018F1BC, 0x07000AFE, 0xF4F3F806);
	r4 = D(r4, s1_1_0, 0xE217F5FE, 0x18FAF2FD, 0x41F80AFC, 0x0DC30D1A);
	r5 = D(r5, s1_1_0, 0xF229E6EF, 0xFD26DAD5, 0x11F6BB19, 0x281E2622);
	r6 = D(r6, s1_1_0, 0x02F2B8F2, 0xFC23E2E0, 0x0DF97FF1, 0xFA033702);
	r7 = D(r7, s1_1_0, 0x1EF92CD9, 0xFC0BE804, 0xD21B03E6, 0xC72C4FFE);
	r0 = D(r0, s1_1_1, 0x1ACA81F8, 0xF8F96633, 0xE0F4F907, 0xE9DADB2D);
	r1 = D(r1, s1_1_1, 0x01D02316, 0x41ED81ED, 0x0B136408, 0xDA28AD96);
	r2 = D(r2, s1_1_1, 0x003213CB, 0x011A6612, 0x07F00604, 0xFE0614FB);
	r3 = D(r3, s1_1_1, 0x14D21EF6, 0xEBC4D101, 0xE7064C15, 0xF30B6309);
	r4 = D(r4, s1_1_1, 0x17F1F604, 0x0D113111, 0x02040DFA, 0xEBF29509);
	r5 = D(r5, s1_1_1, 0x0528C5A1, 0xD1221C81, 0xEA0CFFE7, 0xDDDEDF15);
	r6 = D(r6, s1_1_1, 0xFA050100, 0x0C20EC9B, 0x06F6DCF1, 0xF50922FB);
	r7 = D(r7, s1_1_1, 0x01C5F9F0, 0xEB0C24ED, 0xF019F0F5, 0xF01B2009);
	r0 = D(r0, s1_1_2, 0xFC2A1EFF, 0x0C14EE14, 0x2A121E01, 0x08F5021D);
	r1 = D(r1, s1_1_2, 0xF60B05F4, 0x19FDD607, 0xF11FCD05, 0x11140EF3);
	r2 = D(r2, s1_1_2, 0xEA1322F0, 0x100E2100, 0x12F5E70B, 0x0FF80C1E);
	r3 = D(r3, s1_1_2, 0xF0081307, 0xE1F4042A, 0x141C01F1, 0x13190CE8);
	r4 = D(r4, s1_1_2, 0x1208CDF5, 0xF1300CDD, 0x2FC51F10, 0x2BDBEDFC);
	r5 = D(r5, s1_1_2, 0xCEFA111C, 0xF700EDDB, 0xE10F46FC, 0xEB180610);
	r6 = D(r6, s1_1_2, 0xFE041E02, 0x1313080A, 0xFFF30E10, 0x0502DD09);
	r7 = D(r7, s1_1_2, 0xFEF720F7, 0xF0081701, 0x130D5AFD, 0xF2014513);
	r0 = D(r0, s1_2_0, 0xFD07F9FF, 0xE6E0320D, 0x080C1200, 0x02F41708);
	r1 = D(r1, s1_2_0, 0xE7120100, 0x03F1CB19, 0x05E324FF, 0xF328E7F2);
	r2 = D(r2, s1_2_0, 0xF107F706, 0xFA15F4E7, 0x02094B07, 0x04FFFDFB);
	r3 = D(r3, s1_2_0, 0x02042501, 0xFF16D9CA, 0xF402FF05, 0xFD000AFF);
	r4 = D(r4, s1_2_0, 0xFDFF0401, 0x10190AE1, 0x0AEA1DF4, 0x282138F8);
	r5 = D(r5, s1_2_0, 0xF40BD308, 0xEEFC180B, 0xF604D0F9, 0xD0F2923B);
	r6 = D(r6, s1_2_0, 0x0205FBFA, 0x06FA0308, 0xE9F9FCF5, 0x00F402FB);
	r7 = D(r7, s1_2_0, 0x120CF9F8, 0x0427E6F2, 0xEF101BF8, 0xF70CEBEF);
	r0 = D(r0, s1_2_1, 0x0705110F, 0xEE0D11FA, 0x19FE3913, 0xF60A2A07);
	r1 = D(r1, s1_2_1, 0x1409E600, 0xEB0AE80C, 0xDF0A21FD, 0xE000FBFB);
	r2 = D(r2, s1_2_1, 0x0229D6C9, 0x131E17EB, 0xED13CC14, 0xFBFD0800);
	r3 = D(r3, s1_2_1, 0x201D5BF6, 0xD2EF0720, 0x0201170B, 0x01F60FFD);
	r4 = D(r4, s1_2_1, 0x05160EF8, 0xF6FFDBF7, 0xF50A81FD, 0xF03C81EC);
	r5 = D(r5, s1_2_1, 0x05081016, 0x1F02EDFC, 0xFBEC4D12, 0x192F3B02);
	r6 = D(r6, s1_2_1, 0x00FAED02, 0xFEF80605, 0xEF0D1115, 0x03F3F502);
	r7 = D(r7, s1_2_1, 0xF030CDD4, 0xFE06EEF7, 0xF225B4F6, 0x0A1E6016);
	r0 = D(r0, s1_2_2, 0xFA20E0EB, 0x28260CCB, 0x14FD0EFA, 0xFD11E2EB);
	r1 = D(r1, s1_2_2, 0x070B17F6, 0x00ED1F0A, 0x08DFFB12, 0xF6071003);
	r2 = D(r2, s1_2_2, 0x0EFD1101, 0xFFF9CD01, 0xCDFBF01A, 0x02F2010A);
	r3 = D(r3, s1_2_2, 0x07FBF10E, 0xD61B08ED, 0x02FFDD0D, 0x02F21C05);
	r4 = D(r4, s1_2_2, 0x3DFA06F0, 0xFB0EFCF8, 0x340B3AEA, 0x09F6B411);
	r5 = D(r5, s1_2_2, 0xF1090105, 0xF509D206, 0xFE020905, 0xF70AD1FE);
	r6 = D(r6, s1_2_2, 0xFDFC0CFE, 0xFB02F302, 0xE002B408, 0xF6021301);
	r7 = D(r7, s1_2_2, 0x0202150B, 0x01DA1415, 0xF7F8E813, 0x010FD4F5);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x14EBFBE0, 0xDFE5FDFC, 0xDE1C11EE, 0xE2090AFA);
	r1 = D(r1, s0_0_0, 0xDFEDFBE6, 0xF74C0A09, 0xFA3B162C, 0xB481F612);
	r2 = D(r2, s0_0_0, 0x07F702F3, 0xFE08E712, 0x11B20324, 0x0105FC05);
	r3 = D(r3, s0_0_0, 0xCC1E1102, 0xFDFDDEFD, 0x02E30107, 0x120DF9F5);
	r4 = D(r4, s0_0_0, 0xFC17FBFC, 0xF81BE810, 0x003119FC, 0xFD18FAFD);
	r5 = D(r5, s0_0_0, 0x052901CC, 0xE513E500, 0xEE0DFF00, 0x22F1F337);
	r6 = D(r6, s0_0_0, 0xFEF6F513, 0xF7FE0102, 0x52D7E7CC, 0xF420FA08);
	r7 = D(r7, s0_0_0, 0x5FD408C4, 0x16F2F581, 0x333600FD, 0x18D1FAEF);
	r0 = D(r0, s0_0_1, 0x0507ED11, 0xF527DA46, 0x03380506, 0x0C05E803);
	r1 = D(r1, s0_0_1, 0xDF1C0B19, 0xDD110D19, 0xF8322A0F, 0x06E1F8E8);
	r2 = D(r2, s0_0_1, 0xF505E613, 0xE30EFDFE, 0xE62717F0, 0x011D0DF6);
	r3 = D(r3, s0_0_1, 0xE623F9EB, 0xF8E1FF0E, 0xE81B0906, 0xDAE70009);
	r4 = D(r4, s0_0_1, 0x0FE9EF12, 0xF60C1416, 0xE4D90B44, 0xE6E703FB);
	r5 = D(r5, s0_0_1, 0xE31CFB0E, 0x04C801EB, 0x0A180B0F, 0x5118221E);
	r6 = D(r6, s0_0_1, 0x251A0D2A, 0xC0FE111D, 0xDE100DE9, 0x0DCE09F7);
	r7 = D(r7, s0_0_1, 0x0600FB08, 0xD7CCFEE6, 0xDD0A113D, 0x052FDA09);
	r0 = D(r0, s0_0_2, 0xE7321CC1, 0x1C180DEA, 0x1D12F5EA, 0xEE0A08EC);
	r1 = D(r1, s0_0_2, 0xF5ED0413, 0xC00A0C26, 0xF1810B04, 0x000B03DB);
	r2 = D(r2, s0_0_2, 0x09FC07EE, 0x2CF6FBAC, 0xEA37F51F, 0x0CFDE1E7);
	r3 = D(r3, s0_0_2, 0xE0F71000, 0x28C6F60C, 0x13EBF309, 0x17FBF5F0);
	r4 = D(r4, s0_0_2, 0x7FF902CB, 0xE5040D05, 0xC541F306, 0x1B1E0504);
	r5 = D(r5, s0_0_2, 0x254FE30E, 0xEAF8F1FC, 0x0AE9FDFC, 0x00D00041);
	r6 = D(r6, s0_0_2, 0x0EF9FA11, 0x1DEEECE6, 0x0B05FCFE, 0xFA01EEFD);
	r7 = D(r7, s0_0_2, 0xC71CF82C, 0x06EEDAF7, 0x221804E4, 0x467F1B81);
	r0 = D(r0, s0_1_0, 0x111000CC, 0x22320A02, 0x1D2B032A, 0xFD3CFC20);
	r1 = D(r1, s0_1_0, 0x41E1FF2A, 0xDDB1D20C, 0xDBF3040D, 0xE98110E4);
	r2 = D(r2, s0_1_0, 0x098108E2, 0x3D53F405, 0x08B31C11, 0xF31311FE);
	r3 = D(r3, s0_1_0, 0xF50A0AFB, 0xF221FBE6, 0x09F8020B, 0x0808F2FE);
	r4 = D(r4, s0_1_0, 0x22BDF009, 0xF005F02D, 0x03CEF5F8, 0x1115FF23);
	r5 = D(r5, s0_1_0, 0x1610EB0C, 0x383806F0, 0x06F80906, 0x09F3B9C4);
	r6 = D(r6, s0_1_0, 0x09DA1116, 0x1AFD09F9, 0xFDF40A0E, 0x04EC0608);
	r7 = D(r7, s0_1_0, 0xFA43F82E, 0xC5C029EE, 0xE327E719, 0x025625FF);
	r0 = D(r0, s0_1_1, 0x05EF10FE, 0x19BEE710, 0x06DCFD50, 0xFFFBFBF2);
	r1 = D(r1, s0_1_1, 0x332C0511, 0xF60B22F8, 0x210F01FC, 0xF607FFE0);
	r2 = D(r2, s0_1_1, 0x0AEEFF2E, 0x04C0FBE7, 0x0E240513, 0x07B3F3EE);
	r3 = D(r3, s0_1_1, 0x24330FE1, 0x0CF513F5, 0x11FBF814, 0xF9180403);
	r4 = D(r4, s0_1_1, 0x1F56FEF1, 0x08E62804, 0xFFCF03F3, 0x0405ECDE);
	r5 = D(r5, s0_1_1, 0x01A9F0DE, 0xE1F2EEDC, 0xE8F1F310, 0x810FA9E1);
	r6 = D(r6, s0_1_1, 0x02EFEB19, 0xE8D2F2F8, 0x23371822, 0xF409F825);
	r7 = D(r7, s0_1_1, 0xE7300345, 0x2F33DFB8, 0xFCFF06F8, 0x051CCBB4);
	r0 = D(r0, s0_1_2, 0xFDF6F50A, 0xD9020D01, 0x25CEFB00, 0xF6F1E70B);
	r1 = D(r1, s0_1_2, 0xF11D0F02, 0x25FFFADD, 0x37560D11, 0xFFCB05E9);
	r2 = D(r2, s0_1_2, 0x04E608E3, 0xEDDF09F1, 0x0DD1F524, 0x04E91D0D);
	r3 = D(r3, s0_1_2, 0xF2D3E7FC, 0xE71FE444, 0xFEDF0F11, 0xED0412D6);
	r4 = D(r4, s0_1_2, 0x01F21BAC, 0x0824F8E1, 0x130115FC, 0xCFCD2422);
	r5 = D(r5, s0_1_2, 0x15BA02F8, 0x02181720, 0x01030014, 0xD802FB0A);
	r6 = D(r6, s0_1_2, 0x07FE0A0F, 0xF1E50D26, 0x0D30FC14, 0x19FB0703);
	r7 = D(r7, s0_1_2, 0x0701F525, 0xFE1CF5D9, 0x00DCEFF9, 0xF9082814);
	r0 = D(r0, s0_2_0, 0x16FEFFFC, 0x01BD04FB, 0xF5361103, 0xFFF11716);
	r1 = D(r1, s0_2_0, 0xD5BCEF16, 0x191DF10F, 0xF60AE8FA, 0x01EBE122);
	r2 = D(r2, s0_2_0, 0x3293EEF5, 0x050C13EE, 0xEC10FC0B, 0x0A04FCFC);
	r3 = D(r3, s0_2_0, 0x0BCEFD0D, 0x2E4D0BF8, 0xFD0F05FD, 0x05DE0A00);
	r4 = D(r4, s0_2_0, 0xFC0FF6F7, 0xF79A06F3, 0xF3FF0920, 0x0A05F517);
	r5 = D(r5, s0_2_0, 0xF6EB1412, 0x15EBFAEF, 0xFF23FB06, 0x1FE6C223);
	r6 = D(r6, s0_2_0, 0x02CFFB04, 0x06FBFBF3, 0xFB81F700, 0xFAF90300);
	r7 = D(r7, s0_2_0, 0xE413F335, 0x0452F3CF, 0x0204F0F2, 0x0EC2E805);
	r0 = D(r0, s0_2_1, 0x1500E600, 0xBC2421F3, 0x02BF0338, 0xFBEE081D);
	r1 = D(r1, s0_2_1, 0xF203F0FA, 0xE9ECFDF8, 0xF6CEFAF8, 0x06F109EC);
	r2 = D(r2, s0_2_1, 0x0FFF07F2, 0x05FC1406, 0x2A3CFD07, 0x00F40600);
	r3 = D(r3, s0_2_1, 0x020B01EF, 0x201D24F2, 0xFEFC0B17, 0x0CD51701);
	r4 = D(r4, s0_2_1, 0xFECA0709, 0x032EF6FA, 0x075EE0DF, 0x10CB0F0F);
	r5 = D(r5, s0_2_1, 0xD6491206, 0x03161FED, 0xFE02040F, 0xE2D36009);
	r6 = D(r6, s0_2_1, 0x08060C00, 0xFCFD0004, 0xF5440A17, 0xFD011005);
	r7 = D(r7, s0_2_1, 0x0205FB1B, 0x0A163709, 0x160044ED, 0xFBED19BB);
	r0 = D(r0, s0_2_2, 0x01F807C8, 0xFB2DF0F3, 0x11FFEB08, 0x0A1202FB);
	r1 = D(r1, s0_2_2, 0x01FDFFF8, 0x17F4FDE8, 0x21B0DF2F, 0xF1090A21);
	r2 = D(r2, s0_2_2, 0xFCF611F6, 0x16E5F0EE, 0x20E7F1EA, 0x09F2F801);
	r3 = D(r3, s0_2_2, 0x0BD3E704, 0x12190EF2, 0xFA02EB0F, 0xFE1BE5F9);
	r4 = D(r4, s0_2_2, 0xFD2A02D4, 0xEE02F8F9, 0xE417EFD6, 0xEF0CE429);
	r5 = D(r5, s0_2_2, 0x022C1A19, 0x090C03E8, 0xEFDAFB23, 0x071EDFE6);
	r6 = D(r6, s0_2_2, 0xFF01FDFF, 0x021DFDF1, 0xED1EE711, 0xFA05FE0A);
	r7 = D(r7, s0_2_2, 0xF7F3CD47, 0x03B122E8, 0x0017F2F5, 0x1819E500);
	r0 = D(r0, s1_0_0, 0x072103FC, 0x020A08E1, 0x04FBFC05, 0x0C130013);
	r1 = D(r1, s1_0_0, 0x00F603F4, 0xFFE9EF10, 0xFCF1F20F, 0x12FBF807);
	r2 = D(r2, s1_0_0, 0x1A1CF504, 0x08FAFFF1, 0x01FDF406, 0x0405F603);
	r3 = D(r3, s1_0_0, 0x0319F30C, 0x1207F9E2, 0xFF0808FE, 0x0003F2FF);
	r4 = D(r4, s1_0_0, 0x011BFBFE, 0x0CEDFC04, 0x0412F628, 0x0C0A16FF);
	r5 = D(r5, s1_0_0, 0xFCF9FF10, 0x1D0D02D8, 0xFBF0FE05, 0xCA0ACF81);
	r6 = D(r6, s1_0_0, 0xFC02F609, 0xFEF7FDFA, 0x0FEBFEFB, 0x0401FDFE);
	r7 = D(r7, s1_0_0, 0x03B2DFFD, 0x1EF6D20E, 0xE90BE0FE, 0x29EBF204);
	r0 = D(r0, s1_0_1, 0x07F2D8F8, 0xD0FAD8E6, 0xCFEAFDF5, 0xFAF414F7);
	r1 = D(r1, s1_0_1, 0xFF10050E, 0xFF0910E9, 0xF8EB0D16, 0x13F50D0B);
	r2 = D(r2, s1_0_1, 0xE6FDFFB4, 0xECE41817, 0xFEF727F7, 0xFE131AEF);
	r3 = D(r3, s1_0_1, 0x1517FD06, 0x02F7FA0E, 0x010C050D, 0xF31FFC08);
	r4 = D(r4, s1_0_1, 0x10FAFCFB, 0x1BFC04F9, 0x19FCF6E7, 0xF6E30FDF);
	r5 = D(r5, s1_0_1, 0x3FF00815, 0x270CF628, 0xF717FA00, 0xFCEBF8F0);
	r6 = D(r6, s1_0_1, 0x0A1E0714, 0xFA0E0B18, 0x091418F2, 0x100309E7);
	r7 = D(r7, s1_0_1, 0x0800D4D3, 0x020DFB30, 0x172F09FA, 0xCEBAE20E);
	r0 = D(r0, s1_0_2, 0xDF16FA20, 0x20E61631, 0xE2FB0111, 0xF90DFFE8);
	r1 = D(r1, s1_0_2, 0x1403F60B, 0x12E40AF7, 0xFC1BC8FA, 0xFFF202FF);
	r2 = D(r2, s1_0_2, 0x13EA0B2D, 0x11F9F3FD, 0x251211FB, 0xF9D40EED);
	r3 = D(r3, s1_0_2, 0x14E7131B, 0x15DA0307, 0xFAEE09F8, 0x0701F903);
	r4 = D(r4, s1_0_2, 0xF40411FD, 0x01040703, 0xDE0315F2, 0xED1EFD1A);
	r5 = D(r5, s1_0_2, 0xEEFC16C9, 0xDADF01EE, 0xFCF6FE13, 0xFD1F1E19);
	r6 = D(r6, s1_0_2, 0x0BE604FF, 0xF9F6FCF5, 0x091308EA, 0xEF0A0104);
	r7 = D(r7, s1_0_2, 0x780C34BD, 0xD50DD2E2, 0x18FEFFF0, 0xFB4EFF81);
	r0 = D(r0, s1_1_0, 0x02030103, 0xC6E8DDE6, 0xFE0201E9, 0x0500F8EA);
	r1 = D(r1, s1_1_0, 0xE9F90502, 0x26FD0902, 0x0502F3E6, 0xD127EAF8);
	r2 = D(r2, s1_1_0, 0x1AFB1217, 0x14EA0CF4, 0xFE04EFEE, 0x0300F206);
	r3 = D(r3, s1_1_0, 0x0012E9F4, 0x2003F8DC, 0x01F3F7F3, 0xFFEA04F7);
	r4 = D(r4, s1_1_0, 0x0CD9FE08, 0xF9F9F9FF, 0xF21CFFDA, 0x1815DDFB);
	r5 = D(r5, s1_1_0, 0x17EE0005, 0xF40EEDD8, 0xF801F611, 0x15DFB676);
	r6 = D(r6, s1_1_0, 0xFFF7FAF9, 0xFF07050D, 0x030C0EFD, 0xF2F90003);
	r7 = D(r7, s1_1_0, 0x0A041A1E, 0xF4DA2701, 0x20C0FC2A, 0xD60529F3);
	r0 = D(r0, s1_1_1, 0xE3E9F897, 0x1403D728, 0x2703D6F8, 0x10F8F50E);
	r1 = D(r1, s1_1_1, 0x10FFFDFD, 0x1818FB2C, 0x1E2229E8, 0x200527E4);
	r2 = D(r2, s1_1_1, 0x0701F0FD, 0xF128F618, 0xEB0CDF06, 0x040AF9F6);
	r3 = D(r3, s1_1_1, 0xF706F8ED, 0xEB0D1217, 0xF603EE13, 0x09F7FC09);
	r4 = D(r4, s1_1_1, 0xEFF5F71E, 0x0C1AF2E6, 0x110418D3, 0x011FF40B);
	r5 = D(r5, s1_1_1, 0xF720E02D, 0x00F20024, 0xFD11F0FA, 0xBDF7D7B0);
	r6 = D(r6, s1_1_1, 0x0EFC03FD, 0x120F01DC, 0xE9190726, 0xF2F5E304);
	r7 = D(r7, s1_1_1, 0xF6FB2A02, 0xEA002FFA, 0xFDE6FD1B, 0xF00D2016);
	r0 = D(r0, s1_1_2, 0x23FAFD1A, 0xE90C16FB, 0xF20CFF00, 0xF7E9FFFC);
	r1 = D(r1, s1_1_2, 0x010B0111, 0xE20EE5FD, 0xE2181FFD, 0xE723FA0A);
	r2 = D(r2, s1_1_2, 0xEBE52A3C, 0x03F60AE7, 0x06F419E0, 0xFCF5F5E7);
	r3 = D(r3, s1_1_2, 0xEB0E040E, 0x000AEAEB, 0xFF0BFB09, 0x0A080F08);
	r4 = D(r4, s1_1_2, 0x211D0806, 0x03FD1605, 0x0B2FF8BD, 0x19FFF1E8);
	r5 = D(r5, s1_1_2, 0x090E01A5, 0x09E608F0, 0x19FF1A09, 0x57F7F70B);
	r6 = D(r6, s1_1_2, 0x1BFDFDFD, 0x1DF7EB02, 0x0610E2E9, 0x12FF040F);
	r7 = D(r7, s1_1_2, 0x7AF5EC08, 0x1E05E914, 0x0BFE12FD, 0x4D0FEB25);
	r0 = D(r0, s1_2_0, 0xFD0504EF, 0xF80101F9, 0x1A04101C, 0x01FD1406);
	r1 = D(r1, s1_2_0, 0x0CFB05F4, 0xFF02FD0B, 0xFE1800DB, 0x04FCF52A);
	r2 = D(r2, s1_2_0, 0x0A00E30F, 0x0404F817, 0x0EFEF1FD, 0x00FB0000);
	r3 = D(r3, s1_2_0, 0x07E6EF18, 0xE7FFFBF5, 0x060BFFFF, 0xEF000102);
	r4 = D(r4, s1_2_0, 0x0BF9F001, 0xFD01F310, 0xFFBBF701, 0x00E70102);
	r5 = D(r5, s1_2_0, 0xFC1715EF, 0xFDFD0E0F, 0x030EF5F5, 0xF01C1113);
	r6 = D(r6, s1_2_0, 0x020701F8, 0x06020DFF, 0x0200FB05, 0x01FE06FA);
	r7 = D(r7, s1_2_0, 0x2721DBE3, 0x1211F514, 0x0E0F0B01, 0xF60813E9);
	r0 = D(r0, s1_2_1, 0xF1F611D0, 0x2F0E5312, 0xFC0810FC, 0x00F4FB29);
	r1 = D(r1, s1_2_1, 0xF4F1F7E6, 0x0606FE25, 0xFFD632F5, 0x1EE9FED6);
	r2 = D(r2, s1_2_1, 0xDEF2F6F3, 0xF119FB1C, 0xF8E801FF, 0x0706FDFA);
	r3 = D(r3, s1_2_1, 0xECE918F8, 0xF41C1908, 0xEC03FBFF, 0xF003FE19);
	r4 = D(r4, s1_2_1, 0x02F7020E, 0xF7070D06, 0xFDF70931, 0xFFED1824);
	r5 = D(r5, s1_2_1, 0xE60CFD48, 0xE928E3E8, 0xF7F10601, 0x18E8E603);
	r6 = D(r6, s1_2_1, 0xFDFF0EFA, 0xFAF0F307, 0xFCC9F7FD, 0x040206FB);
	r7 = D(r7, s1_2_1, 0x05EBE11C, 0xFF18FDF7, 0x090BF4E8, 0xEC071A25);
	r0 = D(r0, s1_2_2, 0x16FE28F1, 0xEA1009F9, 0x15FB01F2, 0xF70AEDFF);
	r1 = D(r1, s1_2_2, 0xEC0203F8, 0xE2F603EB, 0xFC01B5E2, 0x1DE3F003);
	r2 = D(r2, s1_2_2, 0xFB160811, 0x1E02EFF3, 0xFA0F16F1, 0xFA000507);
	r3 = D(r3, s1_2_2, 0x11F219E2, 0x0BFCFDFF, 0x0300092B, 0x11F80D11);
	r4 = D(r4, s1_2_2, 0xF31C0A24, 0x070DFB2B, 0xF1E4EB16, 0x17F1F815);
	r5 = D(r5, s1_2_2, 0xEED8E408, 0xF7EA111F, 0x00E31803, 0xEB091BD4);
	r6 = D(r6, s1_2_2, 0xFA0A0505, 0xED0B0406, 0xDFF5F208, 0x07050405);
	r7 = D(r7, s1_2_2, 0xBAED2E01, 0x21010DEA, 0x04F7EEEF, 0x2006DBCE);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xD602110F, 0x2900F5FE, 0x18FC0AF5, 0xFEE7010E);
	r1 = D(r1, s0_0_0, 0x0AFAF606, 0x32EF1912, 0xFCC30927, 0x140AE4F3);
	r2 = D(r2, s0_0_0, 0x24FB071C, 0xD7E412FB, 0x24F5E5F1, 0xE7F50507);
	r3 = D(r3, s0_0_0, 0xD6F5E624, 0x01F71201, 0x0E010501, 0xDC04F601);
	r4 = D(r4, s0_0_0, 0x2A10F912, 0xFC00F9F6, 0xF5FFE610, 0x1BFC0500);
	r5 = D(r5, s0_0_0, 0x38ED1C21, 0xE40209FA, 0xE401ECF0, 0x3289FF81);
	r6 = D(r6, s0_0_0, 0x07FD0305, 0x01030AFC, 0xC6EA0A08, 0x060502F9);
	r7 = D(r7, s0_0_0, 0xC7C09311, 0x90BDEDDA, 0x40E7DEFC, 0x81E7130A);
	r0 = D(r0, s0_0_1, 0x1411E5F0, 0xDBFACFF8, 0x2EF7EE04, 0x1116F907);
	r1 = D(r1, s0_0_1, 0x05F8F8D6, 0x19EE17C9, 0xFBD30103, 0xEFEAFFD0);
	r2 = D(r2, s0_0_1, 0xCEFF0112, 0x13F618FF, 0xEA0F19F0, 0x0D031609);
	r3 = D(r3, s0_0_1, 0xD7191A15, 0xD8FBFCF3, 0xF7EF090B, 0x1BFB0004);
	r4 = D(r4, s0_0_1, 0xB402F5DF, 0x150B03FB, 0xD206E0FC, 0xE4FE10ED);
	r5 = D(r5, s0_0_1, 0xDD0013E1, 0x1C044020, 0x2305141F, 0x81CD0423);
	r6 = D(r6, s0_0_1, 0x02FC09F9, 0x14FC0DEA, 0x34F9100A, 0xF5F4F2FD);
	r7 = D(r7, s0_0_1, 0x12AFC3EB, 0xEAF50D1E, 0x21F83315, 0x12DD3200);
	r0 = D(r0, s0_0_2, 0xD1111AE7, 0x45FCFF02, 0x08130D13, 0xFCFC010A);
	r1 = D(r1, s0_0_2, 0x0C1DEE01, 0xEB1EFA1F, 0xFC16FF0E, 0x03F911EC);
	r2 = D(r2, s0_0_2, 0x02F81CFD, 0xE307F5FA, 0xBB0E0DF8, 0xEC01E1F1);
	r3 = D(r3, s0_0_2, 0x1B060913, 0x3A1B0012, 0xFC04FBF7, 0xE001FF12);
	r4 = D(r4, s0_0_2, 0x1C130600, 0xF110F6FC, 0xE925021A, 0xB1F7F903);
	r5 = D(r5, s0_0_2, 0xC9D410F8, 0xF40310E9, 0xC9FF15F7, 0xE328E2FE);
	r6 = D(r6, s0_0_2, 0xFA190109, 0x04110B1E, 0x4113010F, 0xFD25020C);
	r7 = D(r7, s0_0_2, 0x8181F281, 0x23DFF91F, 0x01FB06FE, 0xB9E50EE8);
	r0 = D(r0, s0_1_0, 0xE3F2FB18, 0xFE1A13FD, 0x08FEE904, 0x06F2FB01);
	r1 = D(r1, s0_1_0, 0xF6F02EFF, 0xE00EF606, 0xDDFC23F8, 0xCFFC10EA);
	r2 = D(r2, s0_1_0, 0xEBF60CF2, 0xF8061815, 0x0AFFF40E, 0xF40507FB);
	r3 = D(r3, s0_1_0, 0xF3DFFBED, 0x07E9FC0F, 0xF8F6F302, 0x01F9F908);
	r4 = D(r4, s0_1_0, 0xE8F516FD, 0xFEFD0A02, 0x1D07F3E2, 0xF5F116FC);
	r5 = D(r5, s0_1_0, 0xA2F8FA04, 0xE9F4E2F8, 0x07FAF205, 0xE310D0D4);
	r6 = D(r6, s0_1_0, 0xFCF4200B, 0x0D01000B, 0xD5F91F0D, 0x140911F7);
	r7 = D(r7, s0_1_0, 0xF4EE3911, 0x25111703, 0x12F8F70B, 0xEEEC1003);
	r0 = D(r0, s0_1_1, 0x4403F620, 0x27010CFA, 0x1FF8EC0D, 0xF9F714FA);
	r1 = D(r1, s0_1_1, 0xFEF5ECAD, 0x1D08EED0, 0x0123F0EF, 0x3DE815BE);
	r2 = D(r2, s0_1_1, 0xE4160508, 0xB503E4ED, 0xFA0EFCEC, 0x0C0903FC);
	r3 = D(r3, s0_1_1, 0xF314F711, 0x320CEBF6, 0x18FEFE07, 0x0AFFDCE9);
	r4 = D(r4, s0_1_1, 0x190BFBE9, 0x280D1DEB, 0x1C051403, 0xFA18E4C7);
	r5 = D(r5, s0_1_1, 0xF716D0F3, 0x0FF1A72C, 0xF9F9DBF9, 0x30B7F02C);
	r6 = D(r6, s0_1_1, 0x07F4F1FD, 0xF5078100, 0xE111DFE1, 0x21FBEBFC);
	r7 = D(r7, s0_1_1, 0x00E818EE, 0x0EDFEFE0, 0xF6F9F902, 0x14F4EC12);
	r0 = D(r0, s0_1_2, 0xF703FF01, 0xBCF705C7, 0x2EFC0DF3, 0xE1EEF4FC);
	r1 = D(r1, s0_1_2, 0x0F2112F8, 0xE320FB0E, 0xF61B19FA, 0x07190601);
	r2 = D(r2, s0_1_2, 0x1EFD0716, 0x34050510, 0x160107FE, 0xED130702);
	r3 = D(r3, s0_1_2, 0x2513DE1B, 0x0402FEE4, 0xF2060B20, 0xE4FB1F09);
	r4 = D(r4, s0_1_2, 0x04E93A0B, 0xF305030B, 0x81101112, 0x180EEF15);
	r5 = D(r5, s0_1_2, 0x8111FBC2, 0x2C11E801, 0xF73BFB2B, 0x2009EC1A);
	r6 = D(r6, s0_1_2, 0x1A1A0A0F, 0x1A230453, 0x4834060E, 0x18140410);
	r7 = D(r7, s0_1_2, 0xC74C154C, 0x1CEFE509, 0x0EDAF705, 0xE5231A0C);
	r0 = D(r0, s0_2_0, 0xEAF2020E, 0xFD0B02DD, 0x58190F08, 0x06051007);
	r1 = D(r1, s0_2_0, 0xF9DAF50E, 0xE0F9F707, 0xD5E0DFFD, 0xE3F1F716);
	r2 = D(r2, s0_2_0, 0xFDFE0404, 0xFCFDF206, 0x13060408, 0x07FB0800);
	r3 = D(r3, s0_2_0, 0x0203FE24, 0x55080E00, 0xFF080403, 0x140F09FB);
	r4 = D(r4, s0_2_0, 0x0DE9FB05, 0xFC020DF9, 0xED0D0309, 0x1BFA150F);
	r5 = D(r5, s0_2_0, 0xD9FEFF09, 0x41031301, 0xBDF9F301, 0xFF1A3BCF);
	r6 = D(r6, s0_2_0, 0xFCFAFD0D, 0xF5FF02FF, 0x04FDF609, 0xFA080501);
	r7 = D(r7, s0_2_0, 0xD01DF3F3, 0xF3E817FF, 0x15FD1406, 0x36DB0530);
	r0 = D(r0, s0_2_1, 0xE1F8F2F2, 0xF40B1BE7, 0xF50425EE, 0x07120BF6);
	r1 = D(r1, s0_2_1, 0x94FD0BE9, 0xAFEC1F04, 0xD5F409E5, 0xD3FDFBD9);
	r2 = D(r2, s0_2_1, 0xEFFEE5E2, 0x2C1700E6, 0x2406022A, 0x0BF5FD04);
	r3 = D(r3, s0_2_1, 0xF605F1E4, 0xC805FF06, 0x0116FD05, 0xF7161DF6);
	r4 = D(r4, s0_2_1, 0xC2010A0B, 0x2A02E712, 0xDCE6E811, 0xE902EE1A);
	r5 = D(r5, s0_2_1, 0x551714DB, 0x36ED18E5, 0x32F0FB08, 0xF6EC35C9);
	r6 = D(r6, s0_2_1, 0xFA12020A, 0xE8FF2501, 0x81F0F610, 0xF309FF0B);
	r7 = D(r7, s0_2_1, 0x430D06EE, 0xE020EB04, 0xF00503FE, 0x811F0212);
	r0 = D(r0, s0_2_2, 0x36FEE012, 0x21F5F1CA, 0x16F9F805, 0x07F8EB06);
	r1 = D(r1, s0_2_2, 0x2AFF0DED, 0xE5F6F5F0, 0xFC2103C4, 0x170DF5EF);
	r2 = D(r2, s0_2_2, 0x0CE6F611, 0x02F50502, 0x9E131004, 0x01EFEF08);
	r3 = D(r3, s0_2_2, 0x0EF0F90A, 0xE4F4F2F3, 0xE413F910, 0x3301EA0E);
	r4 = D(r4, s0_2_2, 0x32F6E7E3, 0xFBE603FE, 0x59DDFCE7, 0x3BF71806);
	r5 = D(r5, s0_2_2, 0xF903F6F0, 0xF6FFFCF8, 0xD8F6F2FB, 0xF9EFF907);
	r6 = D(r6, s0_2_2, 0xFB03FFFE, 0x13EAEC0C, 0xF104EA10, 0xFB0BFE02);
	r7 = D(r7, s0_2_2, 0xB8D406FC, 0xC020F7F4, 0xF5F6F614, 0x2A09170F);
	r0 = D(r0, s1_0_0, 0xED27EDEE, 0xEAF613EC, 0xEF01EBF8, 0x02F214EF);
	r1 = D(r1, s1_0_0, 0x080702FB, 0x420ACB10, 0xE923C6E0, 0xEE06103A);
	r2 = D(r2, s1_0_0, 0x1BD20415, 0x0608F610, 0xF4F9E903, 0x030300E9);
	r3 = D(r3, s1_0_0, 0x15F80E15, 0x1AF80CED, 0x0002FAFB, 0xF707FB0D);
	r4 = D(r4, s1_0_0, 0x1507F9EA, 0xF7FF021C, 0xFF18F7F8, 0x15E327FD);
	r5 = D(r5, s1_0_0, 0x010C001F, 0x04E81914, 0x0407F005, 0x0929F922);
	r6 = D(r6, s1_0_0, 0x03080804, 0x06FA04F8, 0x00FFF5D7, 0xFB05F70C);
	r7 = D(r7, s1_0_0, 0xF40B3516, 0x2811DDCC, 0x13062238, 0x380ED882);
	r0 = D(r0, s1_0_1, 0x2EE7FC17, 0x0E000C1D, 0xEC160C0B, 0x06FE0610);
	r1 = D(r1, s1_0_1, 0xFB02FA0B, 0xF5F7F91F, 0xFB19EF12, 0xF602F40F);
	r2 = D(r2, s1_0_1, 0xF6F4471A, 0xEE0218FA, 0xFD0AF2F5, 0x04F20EFC);
	r3 = D(r3, s1_0_1, 0xF30BEF0E, 0x1304F723, 0xF407F9FF, 0xF1FE000E);
	r4 = D(r4, s1_0_1, 0x19EA16F8, 0xF203EBE5, 0x2D06DD21, 0x120206E5);
	r5 = D(r5, s1_0_1, 0xF0EF0A21, 0xF811CAED, 0x0C0A1605, 0xE80CEA19);
	r6 = D(r6, s1_0_1, 0xF10705F3, 0xEA030009, 0x00FD07ED, 0x0001F2FC);
	r7 = D(r7, s1_0_1, 0x0F0E0415, 0xF50FF2ED, 0xDC0E0514, 0x04DE50EF);
	r0 = D(r0, s1_0_2, 0xFF0D0E03, 0xF9F507E1, 0xF7010811, 0x04FFFB10);
	r1 = D(r1, s1_0_2, 0x0EFBFCF1, 0x2108E412, 0xF61DEAF3, 0xEEFA1905);
	r2 = D(r2, s1_0_2, 0xE5F2FAF3, 0xF8ED0B07, 0xF205F4E0, 0x1BFA06F9);
	r3 = D(r3, s1_0_2, 0x06FA1A0A, 0x020306EE, 0x0D030200, 0xF70AF30F);
	r4 = D(r4, s1_0_2, 0x250CF0ED, 0x0BFF0CF2, 0x0CF71BE1, 0xD50B00D4);
	r5 = D(r5, s1_0_2, 0xE914F001, 0xE30C1617, 0xFDFB0811, 0x15FE0C07);
	r6 = D(r6, s1_0_2, 0xFDFFFEFD, 0xF60304EF, 0xF6FFECEB, 0x050707FA);
	r7 = D(r7, s1_0_2, 0x0BE8F4E3, 0x06F41614, 0xFAFBF20A, 0xCAF22D15);
	r0 = D(r0, s1_1_0, 0xEE1733FE, 0x1119DA16, 0x1AFA15E1, 0xF0F910F0);
	r1 = D(r1, s1_1_0, 0xDE190A1B, 0xF61A0FFB, 0xF9F955DB, 0x812B03F7);
	r2 = D(r2, s1_1_0, 0xECFFD4CA, 0xEBF719EE, 0xF408E4EF, 0x06F6FF09);
	r3 = D(r3, s1_1_0, 0xDACD5114, 0xF6E4E8F6, 0xFA020006, 0x05061AF9);
	r4 = D(r4, s1_1_0, 0x252BE4D7, 0x2415FA42, 0x1B27E610, 0x3AEB2A0E);
	r5 = D(r5, s1_1_0, 0x18FEE820, 0xBE8131EE, 0xE1F622EF, 0x47EC579B);
	r6 = D(r6, s1_1_0, 0xFB0709F5, 0x0AFC040B, 0xDDEAEB12, 0x050FF522);
	r7 = D(r7, s1_1_0, 0x38121918, 0x46078134, 0x0FB67FF3, 0x0A2E2195);
	r0 = D(r0, s1_1_1, 0xEE9ECE05, 0x21D0020C, 0x1105E105, 0xFF05FFFD);
	r1 = D(r1, s1_1_1, 0xF9F502E6, 0x23CCD2EB, 0x02E115F3, 0x2703071E);
	r2 = D(r2, s1_1_1, 0x0F150401, 0x1A1A0FFD, 0xDC0CFCF0, 0x1561D21D);
	r3 = D(r3, s1_1_1, 0xC929BDF8, 0xF2DE55F3, 0x0AF80814, 0x33FFFAF1);
	r4 = D(r4, s1_1_1, 0xE0F90F1C, 0x11FC030D, 0x1419D40B, 0xD7FEE303);
	r5 = D(r5, s1_1_1, 0xC2CE0809, 0x35060F08, 0x191DF21C, 0x56E9F6FB);
	r6 = D(r6, s1_1_1, 0x1210F807, 0x300E0205, 0x0A18D8FE, 0x29ED0703);
	r7 = D(r7, s1_1_1, 0xF733B0ED, 0x16D31D0C, 0xF6F99340, 0x13183B03);
	r0 = D(r0, s1_1_2, 0x0AD146FB, 0xF6EA27D9, 0xF3EA2421, 0xF9090402);
	r1 = D(r1, s1_1_2, 0x0E0B08E2, 0x02F5121B, 0xE20C0CE4, 0x0DFBFD16);
	r2 = D(r2, s1_1_2, 0x15F4E102, 0xED00FF0B, 0xF6080702, 0xF920C402);
	r3 = D(r3, s1_1_2, 0xFA0223F7, 0xF4110F19, 0xE315EEFE, 0xCE14F2FC);
	r4 = D(r4, s1_1_2, 0x88DC1414, 0x08F02CE5, 0xEAEA1528, 0x811EC5D9);
	r5 = D(r5, s1_1_2, 0xE5FAE6DA, 0x181FEDE7, 0x0DF70410, 0x00091BF7);
	r6 = D(r6, s1_1_2, 0xF6F710FB, 0xF103F6FF, 0xF1FF0208, 0xFC02F5F7);
	r7 = D(r7, s1_1_2, 0x0DD679DF, 0xECFF1B0A, 0xE1E938FE, 0xF1CE5E04);
	r0 = D(r0, s1_2_0, 0x0BFE02DE, 0x1D1EE20B, 0x11220FE1, 0x09FA11F6);
	r1 = D(r1, s1_2_0, 0xE214FE13, 0x17220CCB, 0xFB22EF1F, 0xEF0FEA12);
	r2 = D(r2, s1_2_0, 0xEB2DF5FB, 0x09FD1217, 0xE6011300, 0xFC00FF01);
	r3 = D(r3, s1_2_0, 0x1403E1E6, 0xE2D809DD, 0xFCFA00ED, 0x06170DFB);
	r4 = D(r4, s1_2_0, 0xDB051C08, 0xF810ED01, 0x1B13A6CB, 0x06EE0D37);
	r5 = D(r5, s1_2_0, 0x12F1DFCF, 0xC20EFBEB, 0xFAEEF201, 0xB4B1ED0A);
	r6 = D(r6, s1_2_0, 0x07110AFF, 0xFC010D04, 0x19EEE1E2, 0x030501F5);
	r7 = D(r7, s1_2_0, 0x0D191FF7, 0x15030DBA, 0x2015EAD0, 0xF3281FEA);
	r0 = D(r0, s1_2_1, 0xF618F610, 0xE3AD57FA, 0x08140CF0, 0xFA0524E4);
	r1 = D(r1, s1_2_1, 0x0017D90B, 0xDDF4EF30, 0xF92FE732, 0x070303DA);
	r2 = D(r2, s1_2_1, 0xF7E10724, 0xF32EF6EC, 0x0C041B10, 0x0704FFF3);
	r3 = D(r3, s1_2_1, 0x26FE1EFC, 0xE0CF2A22, 0xF7A522F5, 0xCE815908);
	r4 = D(r4, s1_2_1, 0xF1EFD61D, 0xF7F9FD0A, 0xC207ECFA, 0xFE3D94F7);
	r5 = D(r5, s1_2_1, 0xCECA1FDB, 0xD9E6FB00, 0xF4120723, 0x247FFD06);
	r6 = D(r6, s1_2_1, 0xFB070DFB, 0x0F01E3FC, 0xE826030C, 0x05FF11FF);
	r7 = D(r7, s1_2_1, 0x320802E6, 0x01FBE6F4, 0x0E24F908, 0x100CE1EE);
	r0 = D(r0, s1_2_2, 0x0402EFFB, 0x18ED620F, 0xF5E11901, 0x0507EA0C);
	r1 = D(r1, s1_2_2, 0x0FFC010E, 0xF1061601, 0xC40FFBF2, 0x2000F4FA);
	r2 = D(r2, s1_2_2, 0x0BE10CF3, 0xFE0512F1, 0xF3F60B10, 0xFAFD0A08);
	r3 = D(r3, s1_2_2, 0x2AFAD20E, 0x070A03E7, 0x0FC24214, 0x11B268F2);
	r4 = D(r4, s1_2_2, 0xFDF32A0D, 0xFBFAF5F7, 0xF2D1081E, 0xEB18EC28);
	r5 = D(r5, s1_2_2, 0x0F1CF305, 0xF90224F3, 0x0F0009F4, 0x04112A01);
	r6 = D(r6, s1_2_2, 0x01FF0A01, 0xFD090307, 0xE81604EA, 0xFBFA11FA);
	r7 = D(r7, s1_2_2, 0x0B08E6F5, 0x22EFF20E, 0xEE11E8FE, 0xD411E907);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1118FCDD, 0xF90B34D9, 0xD71DE214, 0x16F312F3);
	r1 = D(r1, s0_0_0, 0x02F80106, 0x093E1FD6, 0x46F30DAB, 0x0030E9E5);
	r2 = D(r2, s0_0_0, 0x13E4200F, 0x0CED0928, 0x141EF4D8, 0x04FDF6FF);
	r3 = D(r3, s0_0_0, 0x19F2F0E9, 0x07F1040D, 0x04F50CFD, 0xFE010901);
	r4 = D(r4, s0_0_0, 0x11FEF50C, 0xFEEF13F0, 0xFDFCFC24, 0x1102F4E8);
	r5 = D(r5, s0_0_0, 0xC709CF43, 0x11F0F711, 0xFEFE03F3, 0x7F81D14E);
	r6 = D(r6, s0_0_0, 0x02F70303, 0x08EEF703, 0x031707EE, 0xFBFEF901);
	r7 = D(r7, s0_0_0, 0x1711FCFB, 0x33E93511, 0x12E24ADC, 0xEE81F83A);
	r0 = D(r0, s0_0_1, 0x13A7FBE4, 0xFE11F4D1, 0xFD2727EC, 0xF70AF51E);
	r1 = D(r1, s0_0_1, 0x14ECCEF0, 0x3039C4B9, 0x18E60028, 0x0E0DEBD2);
	r2 = D(r2, s0_0_1, 0xD637FEF0, 0xD2D6F825, 0xF81E03F4, 0xFC0BF3FB);
	r3 = D(r3, s0_0_1, 0x05163908, 0xFEDCF307, 0xF90D0202, 0xE9F9140C);
	r4 = D(r4, s0_0_1, 0xF4F61108, 0xDE1D1812, 0x4DE132FF, 0x131BCEE6);
	r5 = D(r5, s0_0_1, 0x09FDCC0F, 0xFCE7BD07, 0x0CE6E706, 0x031D1DF3);
	r6 = D(r6, s0_0_1, 0xFAFF0807, 0xF0092AF3, 0x10F8D605, 0xFB130C07);
	r7 = D(r7, s0_0_1, 0x071949BF, 0x15F01B19, 0xFED90AD1, 0xBC81817F);
	r0 = D(r0, s0_0_2, 0x16129E1F, 0x210F3F81, 0xC018040A, 0xFDFA14DA);
	r1 = D(r1, s0_0_2, 0xF202D618, 0x0030B18F, 0x0BC83306, 0xFADA04E9);
	r2 = D(r2, s0_0_2, 0x03DD1D01, 0xF6399F20, 0xFEEFF0E6, 0xFADEF2F1);
	r3 = D(r3, s0_0_2, 0x20F3E4F4, 0xF20A4D13, 0x00030BEF, 0x170522AE);
	r4 = D(r4, s0_0_2, 0xF3FC04BE, 0xFED5540F, 0xF28AA7FB, 0xECE12F21);
	r5 = D(r5, s0_0_2, 0x0018A8E7, 0x1DF89E9B, 0xEB16D2FE, 0xE7E5F409);
	r6 = D(r6, s0_0_2, 0xF9F2EF11, 0x0B1408F0, 0xA5E2D864, 0x02E542FB);
	r7 = D(r7, s0_0_2, 0x30172027, 0xF4E89630, 0x271418F7, 0x15D57F0E);
	r0 = D(r0, s0_1_0, 0x04EEE131, 0xFF12D1F7, 0x0ED714FA, 0x121904E9);
	r1 = D(r1, s0_1_0, 0x0D05E1EF, 0x51D3E5E3, 0x011DE6C7, 0xDDE606C1);
	r2 = D(r2, s0_1_0, 0x0812F50D, 0xF606FE0D, 0xF6E71DFB, 0x01FC0B0A);
	r3 = D(r3, s0_1_0, 0x12D410E1, 0xCF26050B, 0x030EFBF0, 0x04F900F5);
	r4 = D(r4, s0_1_0, 0x0316EF14, 0xF412F0FE, 0xF8B3FF2E, 0xEEFEF718);
	r5 = D(r5, s0_1_0, 0x0F072D08, 0xF93EF8E2, 0xFC2004F0, 0xF436F0D3);
	r6 = D(r6, s0_1_0, 0x1D03F4FA, 0xF012FC08, 0xFA06EA23, 0xD9110514);
	r7 = D(r7, s0_1_0, 0x131BCD04, 0x2710FDE2, 0x03F60203, 0x16BE2BF6);
	r0 = D(r0, s0_1_1, 0xF034D314, 0xE0F3C281, 0x0FE6000B, 0x04FF280C);
	r1 = D(r1, s0_1_1, 0x00E104DB, 0x37A000DE, 0xEF08E8E6, 0xBBFD1DF4);
	r2 = D(r2, s0_1_1, 0xEFCDF266, 0xF8082C00, 0xF7BA0032, 0xFCEEF10E);
	r3 = D(r3, s0_1_1, 0xF016F62B, 0xFCF4E7E7, 0xFD0802F7, 0x1006DBE6);
	r4 = D(r4, s0_1_1, 0x01F6D3F9, 0x050DF50A, 0x5BA0E61D, 0xEE450315);
	r5 = D(r5, s0_1_1, 0x09032B1D, 0x0BBF0EEA, 0x0B29E51E, 0x391021FA);
	r6 = D(r6, s0_1_1, 0x1707100D, 0x1C0511EC, 0x2091FC0C, 0xEE0918FC);
	r7 = D(r7, s0_1_1, 0x27F537FF, 0x2FDAFCDE, 0x6916C4E5, 0xF812E0F9);
	r0 = D(r0, s0_1_2, 0xBF08F4F5, 0xF54EE20D, 0xEF030418, 0x1411E70F);
	r1 = D(r1, s0_1_2, 0x0119EDFB, 0x0A8E0105, 0x242046FF, 0x1E1907F2);
	r2 = D(r2, s0_1_2, 0xC6610AEA, 0x23EA0FE9, 0x22413C46, 0xE72B0615);
	r3 = D(r3, s0_1_2, 0x2206F4D1, 0x0219F72B, 0xEAFFFE11, 0x0F2EF72C);
	r4 = D(r4, s0_1_2, 0x140529EC, 0xFFF3EFF8, 0xD42B0FE8, 0x06B1CC11);
	r5 = D(r5, s0_1_2, 0xD203FB36, 0xDF1F15E2, 0xF4011419, 0xCF7FD2C1);
	r6 = D(r6, s0_1_2, 0xFD03EB20, 0xE8D8C0FA, 0x08ABEE0E, 0xF517EC03);
	r7 = D(r7, s0_1_2, 0x0CFE03ED, 0xE90D8D14, 0xFA2CFAFB, 0x2E188125);
	r0 = D(r0, s0_2_0, 0x20F0060E, 0xDC0C060C, 0x031206DF, 0xFF0BDE05);
	r1 = D(r1, s0_2_0, 0xF61AFAED, 0xE6220E3C, 0x06DFF846, 0x25F20119);
	r2 = D(r2, s0_2_0, 0x0707F6F0, 0xF210E1EC, 0x00F2F810, 0x01FA0206);
	r3 = D(r3, s0_2_0, 0x2ADBE6FA, 0xD302FDF2, 0xFBF5FCFF, 0xF205FAFB);
	r4 = D(r4, s0_2_0, 0x000120F0, 0xE60C090D, 0xF9EF1EB3, 0xDD292228);
	r5 = D(r5, s0_2_0, 0x0BD2E7F4, 0xCB0C0211, 0x0101F6F6, 0x0D99615B);
	r6 = D(r6, s0_2_0, 0x0B0707FA, 0xFFFC071A, 0xE1181427, 0x06EF06F2);
	r7 = D(r7, s0_2_0, 0x02CBF70C, 0x20DAF73D, 0xD6030408, 0xA10E02D5);
	r0 = D(r0, s0_2_1, 0x30D1FD36, 0x04CC4DFA, 0x15DF09D5, 0xE6F8F606);
	r1 = D(r1, s0_2_1, 0x0EF9D604, 0x35D9001A, 0xDE0DFCEE, 0x10E8CA26);
	r2 = D(r2, s0_2_1, 0xFE200AE8, 0xE8EDEA01, 0xFB111ADB, 0x1200F403);
	r3 = D(r3, s0_2_1, 0xDC0BDE12, 0xFA23F331, 0xFF0901FB, 0x18FC2013);
	r4 = D(r4, s0_2_1, 0x0CFF031B, 0xF6F7FF33, 0x1F2CD9D6, 0x00F5F8F8);
	r5 = D(r5, s0_2_1, 0x1FDA2957, 0x06DA0522, 0xDCEAFE38, 0xB2E0C726);
	r6 = D(r6, s0_2_1, 0xF4020503, 0xFB00FF12, 0xEF3F15E4, 0xFDFFF4FA);
	r7 = D(r7, s0_2_1, 0x1B10D6F4, 0xF917FF17, 0x3BF4070E, 0x0A474981);
	r0 = D(r0, s0_2_2, 0x24020619, 0x10D0FAE1, 0xFFF4F323, 0x04ED2016);
	r1 = D(r1, s0_2_2, 0x0CF70A07, 0xE72AADF0, 0xF9281607, 0xDD40E5BA);
	r2 = D(r2, s0_2_2, 0xFDFF1803, 0xFC1210DC, 0xF33919FF, 0x031609E7);
	r3 = D(r3, s0_2_2, 0x15E4D1FE, 0xFF3DEA3B, 0xFAEDF201, 0xC0B9EDFF);
	r4 = D(r4, s0_2_2, 0xEBD114E3, 0x1900F5E4, 0xCC0A05CB, 0x0C2915A8);
	r5 = D(r5, s0_2_2, 0x072612EA, 0xE9E20817, 0xE8D9F1E4, 0x0ABB032C);
	r6 = D(r6, s0_2_2, 0xFFFD0C02, 0x11140605, 0xEF810A01, 0xF7FEEE0D);
	r7 = D(r7, s0_2_2, 0xFBE239F7, 0xEEB706D1, 0xD105F128, 0xC88113D7);
	r0 = D(r0, s1_0_0, 0xA1F11009, 0xDFEB2BEA, 0xD7FD0E12, 0xFF000608);
	r1 = D(r1, s1_0_0, 0x0C090702, 0x1BDE0016, 0xF0C5F02F, 0xF600FAFE);
	r2 = D(r2, s1_0_0, 0xD5FF0B0A, 0x13FDF5F7, 0x1AFD13F0, 0xF800FE0C);
	r3 = D(r3, s1_0_0, 0x07E71E07, 0x0BF61705, 0xFCF5FFFE, 0xFA05FE05);
	r4 = D(r4, s1_0_0, 0x05F90609, 0xFFF91EFC, 0xE5FDFEFE, 0x030B0316);
	r5 = D(r5, s1_0_0, 0x1AE124EB, 0x27E9EF0A, 0xD8061BF6, 0x0AF5FC9F);
	r6 = D(r6, s1_0_0, 0x3C0800F9, 0x0C0103FE, 0xF3F31301, 0xF0F20508);
	r7 = D(r7, s1_0_0, 0xCA111317, 0xAAD68109, 0x20FD13CE, 0xCBD80C53);
	r0 = D(r0, s1_0_1, 0x1DF3CB06, 0x0102F3F6, 0x0604F5DC, 0xF6F90807);
	r1 = D(r1, s1_0_1, 0x020FFCF6, 0x1FF52709, 0x0504CFF2, 0x091D0FFE);
	r2 = D(r2, s1_0_1, 0xE4181CE0, 0x05F41709, 0xD0081FF0, 0x8101F4F6);
	r3 = D(r3, s1_0_1, 0xECFC07D6, 0x06F7F1F0, 0x03F7FB0C, 0xF1FBF5F0);
	r4 = D(r4, s1_0_1, 0x05EDF607, 0x12F60006, 0x64F6D20B, 0x0D0EDFFC);
	r5 = D(r5, s1_0_1, 0xE916FDFE, 0x0F24FA18, 0xF1E307E2, 0xEA36C302);
	r6 = D(r6, s1_0_1, 0x0B0201FE, 0xF5FB0001, 0xE8FEDF04, 0xF205060C);
	r7 = D(r7, s1_0_1, 0xCA1A13FE, 0x1206D3EB, 0x2ED5FF16, 0x25EF66C5);
	r0 = D(r0, s1_0_2, 0xF50FEBF2, 0xF712FAF9, 0xF80B0501, 0xF5FAF308);
	r1 = D(r1, s1_0_2, 0xFA0DFEFE, 0x0208F5EC, 0xF311E809, 0x09051906);
	r2 = D(r2, s1_0_2, 0x0E01E611, 0xFEF0F7FC, 0x10EC0826, 0xF312FD11);
	r3 = D(r3, s1_0_2, 0xF5000908, 0x02F80510, 0xFBFF05FA, 0xFDEDFB0E);
	r4 = D(r4, s1_0_2, 0x0E10FA17, 0xF303EF08, 0xF71005E9, 0xF90224EE);
	r5 = D(r5, s1_0_2, 0x0B03FB19, 0xDF15DECE, 0x0900F20C, 0xF216F8FE);
	r6 = D(r6, s1_0_2, 0x00F90502, 0x06010CFA, 0xFFFD05FF, 0xFFF80306);
	r7 = D(r7, s1_0_2, 0xE8EEEEE9, 0xF3FCFA0F, 0x0CCC0707, 0xE829CF0C);
	r0 = D(r0, s1_1_0, 0x081603E1, 0x3D290606, 0xE41BF008, 0xEBFFFB09);
	r1 = D(r1, s1_1_0, 0xE3F1FCFB, 0xE10D0ED0, 0x37060AEE, 0x0AFE05C3);
	r2 = D(r2, s1_1_0, 0xF2EC01EF, 0xD4070F04, 0x110DFD03, 0xFFF60301);
	r3 = D(r3, s1_1_0, 0xE10E0009, 0xEC2B0C1A, 0xFE0206F0, 0x140B0EF2);
	r4 = D(r4, s1_1_0, 0x0CF6E4F8, 0x1109F803, 0x0004FADE, 0x0416EE07);
	r5 = D(r5, s1_1_0, 0x18050FF2, 0xC902FD06, 0xFD1BF50B, 0x1E920CE3);
	r6 = D(r6, s1_1_0, 0x140102FE, 0x0A05F615, 0x12F1F713, 0xF003FDFB);
	r7 = D(r7, s1_1_0, 0x10D71FED, 0xEB021EFD, 0xF3EE1717, 0x00F5D9E7);
	r0 = D(r0, s1_1_1, 0xF3C7EE12, 0x1818DD10, 0x00FCF62C, 0x01041801);
	r1 = D(r1, s1_1_1, 0x2906FC0C, 0x01F4EF0A, 0x3F2BF328, 0x18ECFB2E);
	r2 = D(r2, s1_1_1, 0x0E00DDF9, 0x08E6EE21, 0x0700DC1B, 0x09010BEE);
	r3 = D(r3, s1_1_1, 0x1516F5F6, 0x170E09FE, 0x731004F6, 0x59060CFC);
	r4 = D(r4, s1_1_1, 0x0B020B00, 0x07F20A15, 0x12E6D7DB, 0xE21127FF);
	r5 = D(r5, s1_1_1, 0xDC0D0420, 0x27F219ED, 0xFAF40218, 0xE30F081C);
	r6 = D(r6, s1_1_1, 0x02110719, 0x070F0F10, 0xF91306E5, 0xF5F8F5EC);
	r7 = D(r7, s1_1_1, 0x2A06FBFB, 0x1B32F4EC, 0x0D0E0202, 0x120BEC0D);
	r0 = D(r0, s1_1_2, 0x0617E61D, 0xE8F219CF, 0x08E7FCDC, 0x0B00FCFC);
	r1 = D(r1, s1_1_2, 0x04FAEBF1, 0xDE0FF2E5, 0x0E08F2E6, 0xFB02E217);
	r2 = D(r2, s1_1_2, 0xF515E8F7, 0x0BF302F2, 0x12070D03, 0xFFFA03C3);
	r3 = D(r3, s1_1_2, 0x1ECF0519, 0x0600E9E5, 0xFDFEF503, 0xFEF904F1);
	r4 = D(r4, s1_1_2, 0xE900F7E6, 0xF3FC001F, 0x16F7EA14, 0x02E317FC);
	r5 = D(r5, s1_1_2, 0x0DE8EAEE, 0x1C2B2E14, 0xFD210702, 0xE305DF10);
	r6 = D(r6, s1_1_2, 0xFDFE0905, 0x02FCFB01, 0x160EF0FF, 0xFE120208);
	r7 = D(r7, s1_1_2, 0xECFD11E1, 0xFFE71D02, 0x0811DED6, 0x11D5BBEC);
	r0 = D(r0, s1_2_0, 0xFBFF07FB, 0x01ED130A, 0xF5F100FA, 0xF0EDED12);
	r1 = D(r1, s1_2_0, 0x21EC01F6, 0xEEEBFDF2, 0x20FAEF04, 0x191EF8DF);
	r2 = D(r2, s1_2_0, 0xFB05F706, 0xDC16F5EE, 0xEE1200EF, 0x05FA0607);
	r3 = D(r3, s1_2_0, 0x193200ED, 0xFBFE1D02, 0xFBF8070A, 0xF013F6F6);
	r4 = D(r4, s1_2_0, 0xFEF305F9, 0xF6090811, 0xDED31814, 0xF1F6FD05);
	r5 = D(r5, s1_2_0, 0x11EAF2D5, 0xEA0819FB, 0xFBFB0417, 0xEDC50247);
	r6 = D(r6, s1_2_0, 0x050104FF, 0x04F9FFEB, 0x03F8FFFA, 0x080308F9);
	r7 = D(r7, s1_2_0, 0x06C0FE18, 0xE803EAFF, 0xF7FD01E2, 0x170A2B07);
	r0 = D(r0, s1_2_1, 0x2104FBEA, 0x1DEDE7F4, 0x02FBDF18, 0x081CEE08);
	r1 = D(r1, s1_2_1, 0x04F4F3E5, 0x083100E5, 0x17F6F2C6, 0xFB0CF9F9);
	r2 = D(r2, s1_2_1, 0xF4FD1DFF, 0x030E02FB, 0xF2F404F8, 0xF8060404);
	r3 = D(r3, s1_2_1, 0x08030008, 0xF3180706, 0xD502EA03, 0xEEFEFC15);
	r4 = D(r4, s1_2_1, 0xED10F402, 0xEC12FDD4, 0x141A1507, 0xF0E204E1);
	r5 = D(r5, s1_2_1, 0xF40BE5FD, 0x04F6F927, 0x18ED0CF2, 0x2CA6C9D6);
	r6 = D(r6, s1_2_1, 0xFC05060C, 0x04F5FE08, 0x0A0D0ACF, 0xFE000004);
	r7 = D(r7, s1_2_1, 0x0CE8E4F7, 0x2104C6F0, 0x261617CC, 0xFB17D202);
	r0 = D(r0, s1_2_2, 0x07F60BDE, 0xE6DE26EE, 0x12FCF9F9, 0x03FB0AFD);
	r1 = D(r1, s1_2_2, 0x020307FB, 0xF7FC080B, 0xF7FEF8FA, 0x06E3FCF3);
	r2 = D(r2, s1_2_2, 0xFCF70A0A, 0x0917E814, 0x0CEC060B, 0x01000E0A);
	r3 = D(r3, s1_2_2, 0x10F40F0E, 0x0EDE08FA, 0xFFF41214, 0xFEEE112C);
	r4 = D(r4, s1_2_2, 0xFD080EFC, 0xF804F8D5, 0xE30AE20B, 0x010CF32B);
	r5 = D(r5, s1_2_2, 0x0CEF0403, 0xFC0BDF17, 0x0008FA15, 0x0C09F8C7);
	r6 = D(r6, s1_2_2, 0xFDFE0703, 0xFB07051A, 0x0DF00322, 0x03000401);
	r7 = D(r7, s1_2_2, 0x0C220E05, 0xFCE20914, 0x01ECF114, 0x17ECC406);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(6.141e-02, 3.449e-02, -6.533e-03, -5.262e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(7.593e-03, 1.884e-02, -2.065e-02, 2.087e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.796e-02, 2.624e-02, -5.177e-02, 1.307e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.468e-02, 4.334e-02, 2.192e-02, 2.558e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.249e-02, 1.084e-02, -3.479e-02, 3.929e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(4.999e-02, 2.159e-02, 1.422e-02, 4.861e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.771e-02, 4.408e-03, 1.156e-02, -2.564e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(5.773e-02, -9.981e-03, -6.595e-02, -1.116e-01);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0114F000, 0x02FB2C0F, 0x16FEF90D, 0x0AF0F4ED);
	r1 = D(r1, s0_0_0, 0x0FE9001E, 0xDD03F5ED, 0x01030B09, 0xFDEA021B);
	r2 = D(r2, s0_0_0, 0xEF1AFFF4, 0xFF020B02, 0xF1F419F2, 0x00010604);
	r3 = D(r3, s0_0_0, 0xDA0DF802, 0x1709020B, 0x29FEFBFE, 0x090212DD);
	r4 = D(r4, s0_0_0, 0xFA0CF505, 0xE811E522, 0xF8F50105, 0xEFECFBFB);
	r5 = D(r5, s0_0_0, 0xFA1CEA01, 0x0603FA0A, 0xFD030707, 0xF408D9F9);
	r6 = D(r6, s0_0_0, 0xEFFDF3F8, 0x0CFDEF0F, 0x0FF5F703, 0xF602E9FF);
	r7 = D(r7, s0_0_0, 0x120EF914, 0x0B071302, 0x0B0011FA, 0x25E6FAA5);
	r0 = D(r0, s0_0_1, 0x07DFFBFE, 0x041602FD, 0xF7FBF0EC, 0x1603D6FC);
	r1 = D(r1, s0_0_1, 0xF313F7D9, 0xECF0F705, 0xF6000FFE, 0xDF08FC09);
	r2 = D(r2, s0_0_1, 0xFBFA00EE, 0xFB0A09F8, 0xF10336F8, 0x0BFE0E04);
	r3 = D(r3, s0_0_1, 0x16042C02, 0xE3F08114, 0xEFFF02E4, 0x19FBB000);
	r4 = D(r4, s0_0_1, 0xF4CAD840, 0xFD2A030F, 0xC1EEF510, 0xF50D1CFC);
	r5 = D(r5, s0_0_1, 0x07EC17F3, 0x1D0B01FC, 0x150221FD, 0x03E52800);
	r6 = D(r6, s0_0_1, 0x01F50DFE, 0x09FF00F3, 0xFDFDD8FA, 0xF1F3E1EC);
	r7 = D(r7, s0_0_1, 0x17FADA0F, 0xE6120311, 0x1909101C, 0x05CD27EF);
	r0 = D(r0, s0_0_2, 0xFEF50006, 0xF40F0100, 0xFBF4F0FC, 0xDDE9ECFB);
	r1 = D(r1, s0_0_2, 0x131B08E6, 0xECFB0A15, 0xE6091800, 0x140D0CFD);
	r2 = D(r2, s0_0_2, 0xEDDB09F9, 0x0005FDFF, 0x01FFF4F5, 0xFF010601);
	r3 = D(r3, s0_0_2, 0xF5EEFE16, 0x0B13F207, 0xEAF9D7F7, 0xE6040F16);
	r4 = D(r4, s0_0_2, 0x23FD0116, 0x12FA041D, 0x16DBEBFB, 0x1911F700);
	r5 = D(r5, s0_0_2, 0xE7250619, 0xF71101FE, 0x0D01FAFC, 0xF9E3130F);
	r6 = D(r6, s0_0_2, 0x0F030008, 0x2313F702, 0x07FFEEF5, 0xF4FE0407);
	r7 = D(r7, s0_0_2, 0xF205D8EB, 0xCF0E0702, 0x000DF206, 0xD7DF1D08);
	r0 = D(r0, s0_1_0, 0x0B11EC00, 0x100501F0, 0xFEFE0D0F, 0x03F8E1E0);
	r1 = D(r1, s0_1_0, 0xF311F00A, 0x16DFFE05, 0x02FC06FD, 0xE1F91719);
	r2 = D(r2, s0_1_0, 0x1806080D, 0x0409FCF5, 0x15ED0DF8, 0x0CFD0801);
	r3 = D(r3, s0_1_0, 0x1E06F30E, 0x0C10C7FF, 0x16C5F7FD, 0x02E703F5);
	r4 = D(r4, s0_1_0, 0x112205FF, 0xF7E6EAE7, 0x02240AFB, 0xF52D0FFB);
	r5 = D(r5, s0_1_0, 0x11F7CE39, 0xFA0D07FD, 0x03031707, 0x010A0CF6);
	r6 = D(r6, s0_1_0, 0xF4FBFBF9, 0xEF07D918, 0xFB01EAEF, 0x000AD801);
	r7 = D(r7, s0_1_0, 0xD3EFF0F1, 0xFD070009, 0xF3060EEB, 0xFBEDD51C);
	r0 = D(r0, s0_1_1, 0xE70C26F0, 0x050DE8DF, 0xFE1B11E8, 0x0EFD15E3);
	r1 = D(r1, s0_1_1, 0xD6F50B1C, 0xE3F2E81C, 0xF3FBE901, 0x0907F3FB);
	r2 = D(r2, s0_1_1, 0xE801FB02, 0x01FE04FE, 0x110CF6EC, 0x1E080DF9);
	r3 = D(r3, s0_1_1, 0xE9F922F4, 0xF6FFCFF1, 0x080D3401, 0xED01F803);
	r4 = D(r4, s0_1_1, 0xFDF806F5, 0x170AD606, 0xFA180F02, 0x0E370604);
	r5 = D(r5, s0_1_1, 0xF9F8031F, 0xFD030005, 0xF8F12AFC, 0x090B1C1A);
	r6 = D(r6, s0_1_1, 0x0BE901F0, 0x0807ED1A, 0x0709EC11, 0xE2EBE8F7);
	r7 = D(r7, s0_1_1, 0xEF45B50D, 0x0807F314, 0x19F11600, 0x2326C539);
	r0 = D(r0, s0_1_2, 0x09F916F7, 0x05FD0302, 0x21E80300, 0x120D030A);
	r1 = D(r1, s0_1_2, 0x09D30EEF, 0x390ED7E8, 0x0912F5F3, 0x0DF2FBF4);
	r2 = D(r2, s0_1_2, 0xF1F916F3, 0xF7FFFEF9, 0xF50F09FD, 0x070104FE);
	r3 = D(r3, s0_1_2, 0xE20F1404, 0xBFFD37DE, 0xD203E8F7, 0xE0D7EA10);
	r4 = D(r4, s0_1_2, 0xEAF0F30E, 0xFED50E07, 0x01ED04FB, 0xDEE1FD0E);
	r5 = D(r5, s0_1_2, 0x2005DE02, 0x16FD0100, 0x22F0F9FA, 0x0413F904);
	r6 = D(r6, s0_1_2, 0xE81113F5, 0xDFEFF2EC, 0xFC00F001, 0xFE1C0916);
	r7 = D(r7, s0_1_2, 0x0DF8230A, 0xFB0E0EF8, 0xF4EC0801, 0xE806CE0A);
	r0 = D(r0, s0_2_0, 0xF502FDFC, 0x00031017, 0x0301FA06, 0x14F2EF13);
	r1 = D(r1, s0_2_0, 0xF20AEE2F, 0x0501F3E2, 0xFC0C0602, 0x0FF70BF3);
	r2 = D(r2, s0_2_0, 0x00FD0D04, 0x00FB01FF, 0x081000F8, 0x0203FDFE);
	r3 = D(r3, s0_2_0, 0x020CEA12, 0xFD11F605, 0x2DEFD1CE, 0xF003F3E5);
	r4 = D(r4, s0_2_0, 0x16F9DC0A, 0xDE1D0728, 0x0F0EF30E, 0x04F911E5);
	r5 = D(r5, s0_2_0, 0x1202EB19, 0x05FDF8F7, 0xFE020B08, 0xEB0100D8);
	r6 = D(r6, s0_2_0, 0x0902F002, 0x01FFE8FF, 0x06FFF9FC, 0x0E0BF7FA);
	r7 = D(r7, s0_2_0, 0x04E50EF0, 0xFD021115, 0x060B04F8, 0xFF1E0550);
	r0 = D(r0, s0_2_1, 0x0CDDFEEF, 0xF30807F2, 0x1101F8F8, 0x061B3DF7);
	r1 = D(r1, s0_2_1, 0xF717E0F2, 0x1416EA05, 0xFB1202F6, 0x04FEF5F0);
	r2 = D(r2, s0_2_1, 0x1207260F, 0xF80C09FF, 0xF62D0FF9, 0x0F02FD01);
	r3 = D(r3, s0_2_1, 0xFCFC15FE, 0x131AEDFB, 0x170DF1E8, 0x2006FF0F);
	r4 = D(r4, s0_2_1, 0xF4F40213, 0x08D4F3F5, 0x04F8F1EB, 0x0BF1F828);
	r5 = D(r5, s0_2_1, 0xEAF5D20D, 0xF60FFB0C, 0xF802F704, 0x11F7022A);
	r6 = D(r6, s0_2_1, 0xFBFF03FB, 0xFEEBE908, 0xF907101B, 0xFDF6FED7);
	r7 = D(r7, s0_2_1, 0xFC0A0FEF, 0x0BFBFE01, 0xF00F0508, 0x000DE40D);
	r0 = D(r0, s0_2_2, 0x0BF9F214, 0x01F91507, 0xF702FAFA, 0xFDFA0B12);
	r1 = D(r1, s0_2_2, 0xFBE910F3, 0xE5240D01, 0xFD0407FA, 0xF4F9FF0D);
	r2 = D(r2, s0_2_2, 0xFC150402, 0x04FF01FE, 0xF31A1510, 0xF70300FF);
	r3 = D(r3, s0_2_2, 0x2102FFF9, 0xF200FA26, 0x24E6D3FB, 0x13EDE8EC);
	r4 = D(r4, s0_2_2, 0xEC0C2405, 0x2D07F6D9, 0x041F0AFD, 0x0BF0E2E6);
	r5 = D(r5, s0_2_2, 0xFFFD18F3, 0xFE050801, 0x08F80F06, 0x0014F7FA);
	r6 = D(r6, s0_2_2, 0xFCFE040E, 0xF50F1BF8, 0x011304ED, 0x0DFEEF06);
	r7 = D(r7, s0_2_2, 0x0D0AFA0B, 0x03F8F7FC, 0x0115FCFC, 0xE724F959);
	r0 = D(r0, s1_0_0, 0xFC140AFB, 0xFBF10E03, 0x02EFF0F6, 0x1BFC05DD);
	r1 = D(r1, s1_0_0, 0xF5E7E605, 0xE71CF30E, 0xFFF8FCFE, 0x0DF00104);
	r2 = D(r2, s1_0_0, 0xF419040A, 0xFF0A0402, 0xF0150801, 0x04FB03FD);
	r3 = D(r3, s1_0_0, 0xEBE30003, 0x0216F902, 0x4FCCEEDF, 0x19E8DBEE);
	r4 = D(r4, s1_0_0, 0x05E811E6, 0xFF09D5FE, 0xEEE92C07, 0xFDE81319);
	r5 = D(r5, s1_0_0, 0x0B26F2ED, 0x0400F900, 0xFBFB0902, 0xE80D0B0C);
	r6 = D(r6, s1_0_0, 0x05FD060F, 0x02ECEB0A, 0xFF02FD01, 0xEDE70110);
	r7 = D(r7, s1_0_0, 0xE7E9DF25, 0xFEFEFAEF, 0xF7FE0A06, 0xF30731D7);
	r0 = D(r0, s1_0_1, 0xF0110707, 0x070705FE, 0xFCFC0AFD, 0xE70C120B);
	r1 = D(r1, s1_0_1, 0xFD05DE07, 0x24F9EEEF, 0x070E01FD, 0x052904F6);
	r2 = D(r2, s1_0_1, 0x15F7F3E4, 0xFDEA03FF, 0x110DFAF4, 0x03040306);
	r3 = D(r3, s1_0_1, 0xEF1EF5F8, 0x0E33FBF8, 0xE2280EFF, 0x222004F8);
	r4 = D(r4, s1_0_1, 0x0EF50BCB, 0xDAE2E70E, 0xCDFD05F6, 0x01F615F7);
	r5 = D(r5, s1_0_1, 0x2304FFFA, 0x10F505FD, 0x0A05F7F9, 0x051515F8);
	r6 = D(r6, s1_0_1, 0x080B1404, 0x06EDFB0C, 0xE7FE0019, 0x0209F01F);
	r7 = D(r7, s1_0_1, 0x3026FB1A, 0x1CFE0119, 0x0002F8F6, 0x2CF10016);
	r0 = D(r0, s1_0_2, 0x08FC0BFC, 0x06F90CF9, 0x0C16F4FA, 0x08FFE713);
	r1 = D(r1, s1_0_2, 0x2EEB81B2, 0x040CEEE0, 0xE60003DA, 0x81F00708);
	r2 = D(r2, s1_0_2, 0x00100EFE, 0x0D0B01F7, 0xEB0202DB, 0x00F90101);
	r3 = D(r3, s1_0_2, 0xF307F212, 0xF124FA1E, 0x11F6F804, 0xD91905D4);
	r4 = D(r4, s1_0_2, 0xEDFEEDDA, 0x041417FA, 0xF501D809, 0x2502E631);
	r5 = D(r5, s1_0_2, 0xEF1CEE1F, 0x04FE0EF9, 0x03FCFEFC, 0x033601FF);
	r6 = D(r6, s1_0_2, 0x02F00101, 0xF40F0B15, 0x1EFAFF17, 0x09FCF610);
	r7 = D(r7, s1_0_2, 0x150FFD0A, 0x00FF1FFB, 0x17FC140F, 0xBDFAFD39);
	r0 = D(r0, s1_1_0, 0xFDDFF911, 0x12FBE8E4, 0x1110EA08, 0x06E30612);
	r1 = D(r1, s1_1_0, 0x1AFC08FF, 0x0AD601FB, 0x00F8FAFE, 0xF8F1FB02);
	r2 = D(r2, s1_1_0, 0xF8080003, 0x000A06FC, 0x06FC130D, 0x04FEFE03);
	r3 = D(r3, s1_1_0, 0xF812F408, 0xFEFCF3F1, 0xE01BC600, 0x1FCFECF6);
	r4 = D(r4, s1_1_0, 0xED1B0A11, 0xF7F41000, 0x15EC09F2, 0xD025F70A);
	r5 = D(r5, s1_1_0, 0xEDEBE9F7, 0x0CF80AE7, 0x060CF5FE, 0x120D0C03);
	r6 = D(r6, s1_1_0, 0xF9EDFB08, 0xFDFC1CF6, 0x02180BFE, 0x1404FA04);
	r7 = D(r7, s1_1_0, 0xE1EC06E1, 0xF808FF01, 0x0219EBF5, 0xFD16CF16);
	r0 = D(r0, s1_1_1, 0x001DFDEB, 0xF901FDF3, 0xED0E0610, 0x1B090406);
	r1 = D(r1, s1_1_1, 0x0E4506F2, 0x0F0C131B, 0x12041A16, 0x0DE50A17);
	r2 = D(r2, s1_1_1, 0x24D10216, 0x0A0702EB, 0x0DECF008, 0xF5FAFF0C);
	r3 = D(r3, s1_1_1, 0xF6E219F4, 0xF4E408E0, 0xC12E1001, 0x19F71722);
	r4 = D(r4, s1_1_1, 0x0B27E5FD, 0x0229F627, 0x4A1DE511, 0x0BFD1E16);
	r5 = D(r5, s1_1_1, 0xEDEAF616, 0xFEFBF40D, 0xFFEA05FB, 0xEFE4CBE1);
	r6 = D(r6, s1_1_1, 0xE0180AF6, 0x1D1107E5, 0xF90301FF, 0x1812020A);
	r7 = D(r7, s1_1_1, 0xFC17CBE9, 0x14FFE3F6, 0x05F2FF07, 0x03F8EAF1);
	r0 = D(r0, s1_1_2, 0x0A1BF707, 0x0E0B05EA, 0x050DF216, 0xFAEEFEFC);
	r1 = D(r1, s1_1_2, 0xC7FFF8E1, 0x81EDCEAC, 0xEBF8EAD7, 0xDD0CE4E5);
	r2 = D(r2, s1_1_2, 0xDF0E08CF, 0x07040806, 0x02FE0101, 0x05020104);
	r3 = D(r3, s1_1_2, 0x140DF920, 0xE22916D6, 0xD7D9F8DB, 0xE2E2FBFB);
	r4 = D(r4, s1_1_2, 0x040204F0, 0xF92E2308, 0x05FAF6F9, 0xE22B1901);
	r5 = D(r5, s1_1_2, 0xFFF2EC16, 0xEDFFFFF7, 0xF8FAFF0A, 0xDB04D311);
	r6 = D(r6, s1_1_2, 0x0D10061A, 0xF102EB20, 0x1DF5FF2C, 0xD9E70E15);
	r7 = D(r7, s1_1_2, 0x1F23F914, 0x0A13DA0A, 0x0A04FB09, 0xE523CE01);
	r0 = D(r0, s1_2_0, 0xF8F6FE0E, 0xFCFB0305, 0x06F6F804, 0xEB1708FE);
	r1 = D(r1, s1_2_0, 0x18E31902, 0xFF04FA03, 0x0304FD02, 0x17EEFFFC);
	r2 = D(r2, s1_2_0, 0xFE140F07, 0xFC0001FA, 0xFEFD0CFB, 0xFF0504FF);
	r3 = D(r3, s1_2_0, 0xFBF4F903, 0xFFEDF90C, 0xF404F517, 0xF63DFF05);
	r4 = D(r4, s1_2_0, 0x0FC114F4, 0x2CD2F9E6, 0xFFFB06FA, 0x0EC2ED00);
	r5 = D(r5, s1_2_0, 0x23E2F2DB, 0xF9FD0502, 0x090309FB, 0x04F60502);
	r6 = D(r6, s1_2_0, 0xFD01FA06, 0xFF07FB04, 0xF7020100, 0xF2031204);
	r7 = D(r7, s1_2_0, 0xF7F4D4F8, 0xFE1109FB, 0xFF0F0001, 0xE1E0AB1A);
	r0 = D(r0, s1_2_1, 0x02F8FCF9, 0xFA04F712, 0xF3FE20F2, 0xF4A2D0E1);
	r1 = D(r1, s1_2_1, 0xE2181C23, 0xF12E0BFB, 0xFE06FFFE, 0xFF0615FF);
	r2 = D(r2, s1_2_1, 0x01FDFA01, 0x0701FBF5, 0x020EECFD, 0xFE080304);
	r3 = D(r3, s1_2_1, 0xFFF824F9, 0x011708F0, 0x3049F0CD, 0x00F70FFC);
	r4 = D(r4, s1_2_1, 0xFAE9ECFD, 0xDFEFD90D, 0xEB03F1F4, 0xE629EDEF);
	r5 = D(r5, s1_2_1, 0x174428F1, 0x040CF604, 0xF7F9030A, 0x2CE7FCE5);
	r6 = D(r6, s1_2_1, 0x00F8F604, 0xF9E90DFC, 0xFC00FB04, 0xF3F90B03);
	r7 = D(r7, s1_2_1, 0xF82422FA, 0x04F213FC, 0x00F6F8FC, 0x31F8D5DD);
	r0 = D(r0, s1_2_2, 0xF4F3EF02, 0x0809FCFB, 0xF3070B0D, 0xFBF71813);
	r1 = D(r1, s1_2_2, 0x081C00E5, 0x09E5F818, 0x01010102, 0x0A0A110A);
	r2 = D(r2, s1_2_2, 0xF50500FC, 0x07060101, 0x0AE1FA07, 0xFEFE0309);
	r3 = D(r3, s1_2_2, 0x2006F9F5, 0xF8D5F60A, 0x26AAF53A, 0xFE0BFDF8);
	r4 = D(r4, s1_2_2, 0x0102FE04, 0xF12B21F9, 0x0E18F40A, 0x0210ED06);
	r5 = D(r5, s1_2_2, 0x1EE9FB20, 0xFAF10D0A, 0x04FAFAFC, 0xFA140405);
	r6 = D(r6, s1_2_2, 0xFAFE0206, 0x08EC050B, 0x00FDF5F7, 0xE1F3FFF0);
	r7 = D(r7, s1_2_2, 0xF0FAF306, 0xFB07F2F1, 0xFD09FFFC, 0x0DF10C45);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF3F30C02, 0xFE0901FB, 0xFCFFF103, 0xFFED19F5);
	r1 = D(r1, s0_0_0, 0x0211D619, 0x14E90D0E, 0x0102FE0C, 0xF7F8EE02);
	r2 = D(r2, s0_0_0, 0xF9011608, 0xFB070803, 0xFBF11E05, 0x0100FEFD);
	r3 = D(r3, s0_0_0, 0x04ECC114, 0x0FF6E503, 0x2516BF01, 0xD92107F3);
	r4 = D(r4, s0_0_0, 0xFEE22D06, 0x06ED2C09, 0x08F616F4, 0xF4EF2E03);
	r5 = D(r5, s0_0_0, 0x2DF81C05, 0x05030209, 0x0C0CFFFF, 0x0810FEFE);
	r6 = D(r6, s0_0_0, 0x0BEA10F7, 0xF0FC0A12, 0x03F60CF7, 0x09060D08);
	r7 = D(r7, s0_0_0, 0x2F3FE5FF, 0x000DE2EF, 0xFF0AFEFC, 0xD8D6F8EF);
	r0 = D(r0, s0_0_1, 0x05FDFCF1, 0x00F20CF9, 0x06EF06E6, 0xF70307ED);
	r1 = D(r1, s0_0_1, 0x000A0605, 0x09FDDA04, 0x06E811FA, 0x03ED0500);
	r2 = D(r2, s0_0_1, 0xFF020805, 0xF803FFEE, 0xFBFB0EEE, 0x0003FA00);
	r3 = D(r3, s0_0_1, 0xF701130F, 0x0FF704F3, 0xFA3409F8, 0xE2FF0309);
	r4 = D(r4, s0_0_1, 0x24FDF111, 0x0B0703E0, 0x020CF1FA, 0x150AD1FD);
	r5 = D(r5, s0_0_1, 0xFA09C5F0, 0xFD0308FE, 0xF90DF2F9, 0xF405F716);
	r6 = D(r6, s0_0_1, 0x10FEFC1A, 0x05F2FB13, 0xFBFBFCFE, 0xFB0CFE1C);
	r7 = D(r7, s0_0_1, 0xE30916FA, 0x04FEE4FE, 0xF6000E0C, 0xFCE201F6);
	r0 = D(r0, s0_0_2, 0xFFF30503, 0x0CFAF4F3, 0xF9F1FD00, 0x0B10F00C);
	r1 = D(r1, s0_0_2, 0xFEFA2228, 0xFF2001E6, 0x06FEFE07, 0xFA14E10B);
	r2 = D(r2, s0_0_2, 0xF908FC10, 0xFEF50402, 0x0CEFF709, 0x02FFFDFC);
	r3 = D(r3, s0_0_2, 0x070B07FF, 0x070A031D, 0xEBE106E7, 0x061A20D5);
	r4 = D(r4, s0_0_2, 0x052102F8, 0x03ED0D2B, 0x0F14E912, 0x0C15F2F1);
	r5 = D(r5, s0_0_2, 0x09FBFD0B, 0xFDF80004, 0x06F701EB, 0xFA0104FC);
	r6 = D(r6, s0_0_2, 0xFE040E09, 0xFBF9FB32, 0xFFFEEEFD, 0x0003F3F2);
	r7 = D(r7, s0_0_2, 0xEBF412F1, 0xECF80305, 0xFEF9FD01, 0xFB0614D7);
	r0 = D(r0, s0_1_0, 0xD6FA1307, 0x24F8E902, 0x250E0904, 0x0B05D904);
	r1 = D(r1, s0_1_0, 0x140507EF, 0xE7F71E0D, 0x08040801, 0xF6100CFB);
	r2 = D(r2, s0_1_0, 0x8102F9FC, 0xFDF80308, 0xD6E30118, 0x0B0A05FC);
	r3 = D(r3, s0_1_0, 0xF2EA07E7, 0xE10A1209, 0x1CF6E15F, 0x16EAF0FC);
	r4 = D(r4, s0_1_0, 0xE903ECF0, 0xDF00E9E5, 0x3AEAFB20, 0x0C0FFCF1);
	r5 = D(r5, s0_1_0, 0xEB0121C3, 0x0E060BFD, 0x060AF5FC, 0x16180DD5);
	r6 = D(r6, s0_1_0, 0xEAF602F5, 0xF9EE1AEF, 0xEF0002F7, 0xED0604FB);
	r7 = D(r7, s0_1_0, 0x21EF02D5, 0x1B1EFA1B, 0x17FB0603, 0xF0E903F4);
	r0 = D(r0, s0_1_1, 0xF5FD0304, 0xF104F90D, 0xFF01E803, 0xE11CF322);
	r1 = D(r1, s0_1_1, 0x81FC09D1, 0x15E02439, 0xF6FF1305, 0xECF11415);
	r2 = D(r2, s0_1_1, 0xF0E9FD0A, 0x0FF4F3FA, 0x27FBDD01, 0xFAFE03FD);
	r3 = D(r3, s0_1_1, 0x11F406DC, 0x14121EF0, 0xECD52EBD, 0x23EFF61B);
	r4 = D(r4, s0_1_1, 0x2407F309, 0x0E26EDE1, 0xE704DD00, 0xF5D70B0E);
	r5 = D(r5, s0_1_1, 0x01DC07FC, 0xED010FE6, 0xF106FF20, 0x09E30AF8);
	r6 = D(r6, s0_1_1, 0x0C020100, 0xEA00DFEB, 0xD303EEF2, 0xCF0BF6EF);
	r7 = D(r7, s0_1_1, 0xE91EDF1D, 0x0712F90E, 0xFD0DF311, 0x5029001D);
	r0 = D(r0, s0_1_2, 0x021A0C07, 0x0100F8F8, 0xF5040B0E, 0x0AF006F3);
	r1 = D(r1, s0_1_2, 0xFFC403F3, 0x0AF3E2F9, 0x0EF0E300, 0xF803E3E6);
	r2 = D(r2, s0_1_2, 0xFDF4ECFB, 0x010A0105, 0x0401EEED, 0x03FD02FF);
	r3 = D(r3, s0_1_2, 0xEEFB04F9, 0xFC23FEF6, 0x0D33F229, 0xF80C13FD);
	r4 = D(r4, s0_1_2, 0x0B0FEBFD, 0x0B1F2408, 0xDD110FED, 0x031AEFF3);
	r5 = D(r5, s0_1_2, 0x092F07E2, 0x0500010E, 0x0004FEF5, 0x0CF20B06);
	r6 = D(r6, s0_1_2, 0x10F306F7, 0x111FF0F3, 0x09FC0D0E, 0x1F17FDF4);
	r7 = D(r7, s0_1_2, 0xEC12E312, 0x03040511, 0xFB0401FB, 0xF2E01207);
	r0 = D(r0, s0_2_0, 0x8DFAF407, 0xF5FFFCF3, 0x1817000E, 0xBAE8FE10);
	r1 = D(r1, s0_2_0, 0x1405E702, 0xF70802FA, 0xFE1002F8, 0xFF061303);
	r2 = D(r2, s0_2_0, 0x01070BFC, 0xF201FDFA, 0xF8010BFF, 0x300105FF);
	r3 = D(r3, s0_2_0, 0x07FB14FE, 0xA40AF909, 0xD0CF2C0F, 0xE70803FE);
	r4 = D(r4, s0_2_0, 0xE2DB1CF9, 0x0EECD9E5, 0x04E909F2, 0xDF1203FB);
	r5 = D(r5, s0_2_0, 0x1213000C, 0x0206FEF9, 0x12FE0300, 0x14EE1119);
	r6 = D(r6, s0_2_0, 0xE7FAFA0E, 0xF5020BED, 0xF702010A, 0x18FC0CF3);
	r7 = D(r7, s0_2_0, 0x07D91938, 0x0FF7FCFD, 0x23EF0D01, 0xDA0E1B20);
	r0 = D(r0, s0_2_1, 0xFA02FB06, 0xFE0413ED, 0xFDFDF5FE, 0x10ECE1E2);
	r1 = D(r1, s0_2_1, 0xB4D31122, 0xFB09F1E7, 0x05F700F5, 0xF8FDFAFF);
	r2 = D(r2, s0_2_1, 0xF8FD0A0F, 0x0C00F901, 0x1BF507F7, 0x19F60103);
	r3 = D(r3, s0_2_1, 0x12FEFF20, 0xBCD61111, 0x00DBCDDF, 0xE406FB15);
	r4 = D(r4, s0_2_1, 0xF9000D1D, 0xEDEA1811, 0xE7E7150A, 0xB5EDF611);
	r5 = D(r5, s0_2_1, 0xD41BFD0D, 0xFDF7E9FA, 0xF0FB0C0C, 0xE20CEE0A);
	r6 = D(r6, s0_2_1, 0xEB050100, 0xD7F11DFE, 0xCFF5FEFE, 0xFEE01818);
	r7 = D(r7, s0_2_1, 0x03DDF8FD, 0x0003FD0A, 0x01FA01F5, 0xE6FCC6D9);
	r0 = D(r0, s0_2_2, 0xFFF0F208, 0x0AFFFC05, 0xED0204EB, 0xFA191EEC);
	r1 = D(r1, s0_2_2, 0x0FF30D0A, 0x01FB17F1, 0x06020A0C, 0x000500FA);
	r2 = D(r2, s0_2_2, 0xFCFB00F7, 0xFF0704FE, 0x151B06F1, 0x0600FF00);
	r3 = D(r3, s0_2_2, 0xFD15FBFB, 0x11EEFF18, 0x08E4EC32, 0xD7F119FD);
	r4 = D(r4, s0_2_2, 0x1306FAE7, 0xFD1101EB, 0x0FFA0BF6, 0xF5FAF103);
	r5 = D(r5, s0_2_2, 0xEDF00DDD, 0xFE0C09FA, 0x060AFE0B, 0xF50AFB06);
	r6 = D(r6, s0_2_2, 0x080D07F9, 0x0A0AE406, 0xFFFEFD06, 0xEEF60216);
	r7 = D(r7, s0_2_2, 0x0209EBF6, 0xFB020701, 0xFE06FE07, 0x0401F22C);
	r0 = D(r0, s1_0_0, 0xF61105FF, 0x07CCF203, 0xFC0D07FD, 0xF2F8FA11);
	r1 = D(r1, s1_0_0, 0xE9EB0FFD, 0x07070111, 0xF609FB02, 0xE91BF0F9);
	r2 = D(r2, s1_0_0, 0xD120070C, 0x0F1D00FD, 0xB2150D13, 0xFFF60201);
	r3 = D(r3, s1_0_0, 0xFE1211EC, 0xCDE50900, 0xF3F8F904, 0xEBE7E0ED);
	r4 = D(r4, s1_0_0, 0x09F5F417, 0xDDFD0703, 0x12F2EF27, 0x07E8FA09);
	r5 = D(r5, s1_0_0, 0x031E01FA, 0xF0060507, 0x0014FBF3, 0xF1F410FC);
	r6 = D(r6, s1_0_0, 0x09050011, 0x0409F808, 0xFCF00B0D, 0xF905FD06);
	r7 = D(r7, s1_0_0, 0x2FAA23F0, 0xE9130503, 0xFCC70EEC, 0xFFF41BE3);
	r0 = D(r0, s1_0_1, 0xF5EF0E01, 0x16F0F3F5, 0x0BF2F9F8, 0x22B7EEF1);
	r1 = D(r1, s1_0_1, 0x0512FFD8, 0x08F306FD, 0xFB08EB0E, 0xF802D6FC);
	r2 = D(r2, s1_0_1, 0xCF1BF403, 0x0303FEF8, 0xEBEAEFEF, 0xFE04FE01);
	r3 = D(r3, s1_0_1, 0x12EFF7F6, 0x8113EEF5, 0x18151E0E, 0xD2E71B1B);
	r4 = D(r4, s1_0_1, 0x321404E0, 0x04F90900, 0xFAFB171F, 0xF50403F3);
	r5 = D(r5, s1_0_1, 0x271A05F1, 0x13ECFFF8, 0x0A150EF8, 0xFF12FAEB);
	r6 = D(r6, s1_0_1, 0x0E3307F9, 0x36D2FC15, 0xE6350B10, 0xF81CFE21);
	r7 = D(r7, s1_0_1, 0x22FAEEE4, 0x03F510F9, 0x00E0D8F3, 0x01FEF0EC);
	r0 = D(r0, s1_0_2, 0xF412FDF2, 0x0CF2FC06, 0x0BFEF61F, 0x0DF8011D);
	r1 = D(r1, s1_0_2, 0x14FE0503, 0x1DF2FA09, 0xF60B0511, 0xFA0B15F2);
	r2 = D(r2, s1_0_2, 0xF3FEF716, 0x02F6FDFE, 0xFF0E0500, 0xFFFF0000);
	r3 = D(r3, s1_0_2, 0xF80021F2, 0x09090A12, 0x0C050700, 0xF911F7FE);
	r4 = D(r4, s1_0_2, 0x11041FED, 0xF20604F9, 0x1CFC0805, 0x1DFD1C18);
	r5 = D(r5, s1_0_2, 0x07E3E5FC, 0x01FC0201, 0x0BF0F7FE, 0xE70BF90F);
	r6 = D(r6, s1_0_2, 0xFCF71707, 0xF30D15F7, 0x0503F20B, 0xFC040E14);
	r7 = D(r7, s1_0_2, 0x29F4F0F9, 0xFA00F0F7, 0xF60CF7F6, 0xF71030FC);
	r0 = D(r0, s1_1_0, 0xFE21031A, 0xF02E0BFD, 0x16FB0B05, 0xEB220CF8);
	r1 = D(r1, s1_1_0, 0xA913FCFC, 0xF10BD807, 0xFC0EFBF9, 0xED110FF8);
	r2 = D(r2, s1_1_0, 0x818D1A10, 0x0606F902, 0xCF010B1C, 0xFFFEFC05);
	r3 = D(r3, s1_1_0, 0xE2E8E708, 0xED04E4E8, 0xCD9BE091, 0xE801FA11);
	r4 = D(r4, s1_1_0, 0xF9100D0B, 0x1FEE1FFC, 0xEAECEACB, 0xE40AF2FF);
	r5 = D(r5, s1_1_0, 0xF5F7EDEC, 0x04FFF8FC, 0xF709FA07, 0x21C3E105);
	r6 = D(r6, s1_1_0, 0xF50FF809, 0x092BF3E9, 0x17F4F904, 0x17E20115);
	r7 = D(r7, s1_1_0, 0x24E8FB21, 0xF500FA08, 0xF4EEF50C, 0xCBF50EEA);
	r0 = D(r0, s1_1_1, 0xD1001EF4, 0x051C2005, 0x001A0B0E, 0x0AF1EF07);
	r1 = D(r1, s1_1_1, 0x0CFCD9FF, 0x1716F709, 0x010E0210, 0xF10B1403);
	r2 = D(r2, s1_1_1, 0xC8F60216, 0xFBFAFC0C, 0x0910120F, 0xF4010502);
	r3 = D(r3, s1_1_1, 0xCE29F9DC, 0x84F1DD02, 0xBE1FD4BD, 0xF2FEF125);
	r4 = D(r4, s1_1_1, 0x18FA0AE0, 0x08F2038B, 0x0617FFED, 0xECFDFC2C);
	r5 = D(r5, s1_1_1, 0x1827380B, 0x00F1EB02, 0xF8080D02, 0xE80304FD);
	r6 = D(r6, s1_1_1, 0x16EEFF01, 0x000B161C, 0xF824FEF8, 0xFC210007);
	r7 = D(r7, s1_1_1, 0x31ED0EE5, 0xF8FAF007, 0xEB0002F8, 0x2E0D2300);
	r0 = D(r0, s1_1_2, 0xF4F9F301, 0xEB06FD03, 0xF902FF10, 0x09FF0CF5);
	r1 = D(r1, s1_1_2, 0x0DE21E00, 0x0C023612, 0x00051715, 0xF9030F01);
	r2 = D(r2, s1_1_2, 0xED061815, 0xF8FFFA05, 0xF0060A06, 0xFCFF01FE);
	r3 = D(r3, s1_1_2, 0x08E6F7EE, 0xE2FAFC26, 0xFBEC330A, 0x2A1119F3);
	r4 = D(r4, s1_1_2, 0x0BF7FDFB, 0x070103EA, 0x08FD00F5, 0x11E9FBF1);
	r5 = D(r5, s1_1_2, 0xFE0D20BE, 0x02041000, 0x04FDEDFF, 0xE41AFBF5);
	r6 = D(r6, s1_1_2, 0xF2FC01F4, 0x12F30EF3, 0x11F90C08, 0x21E50810);
	r7 = D(r7, s1_1_2, 0x09F6D9EA, 0x06F90004, 0xF40C07FC, 0xF8FFEE50);
	r0 = D(r0, s1_2_0, 0x0DFE06F3, 0xFEF60200, 0x18FAFA01, 0xDE10FD07);
	r1 = D(r1, s1_2_0, 0xE72C0BFD, 0x1DEE1414, 0x02FDFFFB, 0xF70DF7FA);
	r2 = D(r2, s1_2_0, 0x02F5F90A, 0xFDFE0009, 0xF80DFE0B, 0x0AFBFCFF);
	r3 = D(r3, s1_2_0, 0xFB16ECF9, 0x0B0CF20D, 0xE92BD50D, 0xE21B0AE8);
	r4 = D(r4, s1_2_0, 0xF824F6EC, 0xEE1FDDCC, 0x13FFFB17, 0x04F2E9F1);
	r5 = D(r5, s1_2_0, 0x1B05FAE3, 0x0FFFFE0F, 0x000306F9, 0xF50B1202);
	r6 = D(r6, s1_2_0, 0xFC030DF2, 0x1BF7000C, 0x0DF6F802, 0x03F7F10D);
	r7 = D(r7, s1_2_0, 0x00F5EA03, 0xFA050BF4, 0xEE0FFF06, 0x03122D9F);
	r0 = D(r0, s1_2_1, 0x0018071B, 0xF808FA00, 0x1100EDF7, 0x0102ED00);
	r1 = D(r1, s1_2_1, 0xFA02D1F1, 0x0DE1FCF5, 0x05FEFFF7, 0xF60A04F2);
	r2 = D(r2, s1_2_1, 0xF00208FB, 0x01000506, 0x0AF50B08, 0xFDFCF600);
	r3 = D(r3, s1_2_1, 0x0401FAFA, 0x0CFA1118, 0x00FA290D, 0x18DF0017);
	r4 = D(r4, s1_2_1, 0x0AF7FB00, 0x021DE4DE, 0xF90A0300, 0xDA1F210F);
	r5 = D(r5, s1_2_1, 0xF209D408, 0x05F4000A, 0xF30902F0, 0xF4FF11E7);
	r6 = D(r6, s1_2_1, 0x0BFFF301, 0x0FF809F5, 0xEC17030E, 0x0FFFF403);
	r7 = D(r7, s1_2_1, 0xEC12FD26, 0xFB0806FC, 0x01F2140B, 0x2C0A2AD7);
	r0 = D(r0, s1_2_2, 0xFD0DFE11, 0xFCFD0004, 0x08F3000D, 0xEF01FFEC);
	r1 = D(r1, s1_2_2, 0xFE0608EA, 0xF4FF05FC, 0x03F601FB, 0xF30400F8);
	r2 = D(r2, s1_2_2, 0xEC0CFB0A, 0xF8020101, 0xFFF71300, 0x02FCFC00);
	r3 = D(r3, s1_2_2, 0xF50A0D0B, 0x00010EF8, 0x050528E8, 0x050DE9E8);
	r4 = D(r4, s1_2_2, 0x02F7FB1A, 0x06FE0501, 0xF60715FB, 0xDD1DF60E);
	r5 = D(r5, s1_2_2, 0x0E09E6F0, 0xFDFC02F7, 0xFC06FB02, 0xF60DEDF0);
	r6 = D(r6, s1_2_2, 0x0404FEFA, 0x17F501FC, 0x08F80EFF, 0x0EFDF3FD);
	r7 = D(r7, s1_2_2, 0xFAFBE3FC, 0xFEFF0806, 0xF6090004, 0xE013D1C7);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF30610FC, 0x0D0300FF, 0xFAFFF4EF, 0x0A1802E9);
	r1 = D(r1, s0_0_0, 0xE008C7F8, 0xE9010306, 0xFB06FCF4, 0xEAF1FDEF);
	r2 = D(r2, s0_0_0, 0x071120F2, 0x0BFA0AFE, 0x042C0815, 0x04FB0708);
	r3 = D(r3, s0_0_0, 0x04EAF00A, 0xDA140AFE, 0xE41815FA, 0xEE0F10E1);
	r4 = D(r4, s0_0_0, 0xD0F417EB, 0xE400F4F7, 0x1B1713C5, 0xFBFD2115);
	r5 = D(r5, s0_0_0, 0xFDE51708, 0x0B00F5FB, 0x02F30403, 0x02FB0508);
	r6 = D(r6, s0_0_0, 0xF50DFF01, 0x1CE10719, 0x0904F80F, 0x19EAF51E);
	r7 = D(r7, s0_0_0, 0x03D4F2F5, 0xDAF4F3E8, 0x081AECFA, 0xAD1A03B8);
	r0 = D(r0, s0_0_1, 0x03F7F603, 0x04FF0F1F, 0x160908F9, 0xFB13EC09);
	r1 = D(r1, s0_0_1, 0x3F064110, 0x1DE0F4E5, 0x0510F9FE, 0x0A05090B);
	r2 = D(r2, s0_0_1, 0xFBF2030B, 0xFD0A1407, 0xE402F415, 0x01F3FA06);
	r3 = D(r3, s0_0_1, 0xF402FCE6, 0x0B02E8E9, 0xEEF91F17, 0xDF10FBFD);
	r4 = D(r4, s0_0_1, 0xF3BDEBF8, 0x24FD07CD, 0xF903F710, 0x1AFEE932);
	r5 = D(r5, s0_0_1, 0xEDE805D4, 0x070B1101, 0xF1EEF605, 0x0B141BDD);
	r6 = D(r6, s0_0_1, 0xFE01FFF8, 0x0E0DFBE7, 0x06F80904, 0x07DE021A);
	r7 = D(r7, s0_0_1, 0xF0FE05FC, 0x0F1527FD, 0xF5FA1218, 0xFFF1F726);
	r0 = D(r0, s0_0_2, 0x01EAF311, 0xFE0107FE, 0x08001515, 0x062A0A06);
	r1 = D(r1, s0_0_2, 0xFCCF14CC, 0x07EEF60C, 0xF4F4F902, 0x05EBF4FB);
	r2 = D(r2, s0_0_2, 0x0F0BF705, 0x06F3FB00, 0xE7020B15, 0x0103FB04);
	r3 = D(r3, s0_0_2, 0x0736F4FF, 0xF1D0060C, 0x11C1F7F1, 0x0DD71918);
	r4 = D(r4, s0_0_2, 0x0404DFF7, 0x1114F9F8, 0xF9CE08FF, 0xF71D1DF0);
	r5 = D(r5, s0_0_2, 0xEBEFD2E7, 0x050B0A01, 0xFFF105FB, 0x16130DF0);
	r6 = D(r6, s0_0_2, 0x110CF6ED, 0x13FEF7FC, 0x0EFA07F5, 0x00E5F8E8);
	r7 = D(r7, s0_0_2, 0xF3F916F6, 0xE80403F8, 0xFA030F03, 0x91BAE5FF);
	r0 = D(r0, s0_1_0, 0xFB12051F, 0xFF19F60C, 0x02FC1203, 0xF5F5EBFC);
	r1 = D(r1, s0_1_0, 0x35D40C0C, 0x04150ABC, 0xF7FD0AFB, 0x02ED10F1);
	r2 = D(r2, s0_1_0, 0x072EFADD, 0xF508FF00, 0x17190602, 0x05030E04);
	r3 = D(r3, s0_1_0, 0xF4DD2329, 0x210504ED, 0x190EEFF2, 0xE3F1FFEF);
	r4 = D(r4, s0_1_0, 0x1CDCF0EF, 0xEBF700F8, 0xDAD32E2A, 0xFF1C11E2);
	r5 = D(r5, s0_1_0, 0x010CE712, 0x06F3130F, 0x040E0900, 0xF528FAE3);
	r6 = D(r6, s0_1_0, 0x04FE0609, 0xF90F1012, 0xFB0B0C18, 0x07F62DDE);
	r7 = D(r7, s0_1_0, 0x16100CFA, 0xFCF403E6, 0xFF09010A, 0xF281DEB9);
	r0 = D(r0, s0_1_1, 0x0411130C, 0xF41420FB, 0x03F716E6, 0xF4E31902);
	r1 = D(r1, s0_1_1, 0xD70E0113, 0x19F51F08, 0x0324FB03, 0xF313E708);
	r2 = D(r2, s0_1_1, 0x0FF3FBFE, 0xFF0AFD01, 0x190613F7, 0xFDFBEFFF);
	r3 = D(r3, s0_1_1, 0x1233F8F7, 0x2AF90106, 0x192C17E9, 0x1A03EF0D);
	r4 = D(r4, s0_1_1, 0xF109F7EE, 0x091B16F7, 0x150CEB03, 0xE1D915F7);
	r5 = D(r5, s0_1_1, 0x252202FE, 0xFE07FC09, 0xFC0E2B00, 0xEE240DFC);
	r6 = D(r6, s0_1_1, 0xF3091110, 0xFCF010D8, 0x032B09FE, 0x07290210);
	r7 = D(r7, s0_1_1, 0x03C8EBF4, 0xF80A0711, 0x07F31A06, 0x362632CC);
	r0 = D(r0, s0_1_2, 0xEA0AF403, 0xFEF60A0C, 0x0402F411, 0xFD170EF4);
	r1 = D(r1, s0_1_2, 0x0E0D03FD, 0x03100408, 0x0E02FD07, 0x07F1FBFC);
	r2 = D(r2, s0_1_2, 0xFC080703, 0x07FD010B, 0xF109F908, 0xFEF80103);
	r3 = D(r3, s0_1_2, 0xECF1F702, 0xF1170DF5, 0xEA08F0D6, 0xF7F406BF);
	r4 = D(r4, s0_1_2, 0x1C2D1BE9, 0x03E803F7, 0xFA21FF0C, 0x0507E9F5);
	r5 = D(r5, s0_1_2, 0x0D0C22F3, 0x0A19F40D, 0xF3FB130A, 0x030CE8FC);
	r6 = D(r6, s0_1_2, 0x13FB08FF, 0xF202F60D, 0xFFF5FC06, 0x020906F7);
	r7 = D(r7, s0_1_2, 0x050ED404, 0xF90703F4, 0xF60C0A0E, 0xF8AAF327);
	r0 = D(r0, s0_2_0, 0x0901DFEA, 0x15EEF402, 0xFA0EEFF6, 0x1919F815);
	r1 = D(r1, s0_2_0, 0xE80EF516, 0x0917F40B, 0xFE08FB0D, 0xF612F60A);
	r2 = D(r2, s0_2_0, 0x0C16FFEC, 0x0904FF06, 0x0B1D070A, 0xFA0302FD);
	r3 = D(r3, s0_2_0, 0x0FF811F9, 0x07C8FE00, 0xD5250109, 0xE1E20417);
	r4 = D(r4, s0_2_0, 0xED1CF1FD, 0xEE021EED, 0x2D3DD900, 0x081FCFE7);
	r5 = D(r5, s0_2_0, 0xEFDB0F00, 0x08070CEC, 0xFE03F6FD, 0x0B04F715);
	r6 = D(r6, s0_2_0, 0x03F3FF09, 0xEBF02002, 0xFBF610FA, 0x02F80CF0);
	r7 = D(r7, s0_2_0, 0x10D4010F, 0xF102F7FA, 0x07100001, 0x2CE0E7D7);
	r0 = D(r0, s0_2_1, 0x1C0CEAF6, 0xF2FEF604, 0x050AEAEA, 0x0013F9F3);
	r1 = D(r1, s0_2_1, 0xEAE4FE13, 0xFEE5F71F, 0x0100FFF9, 0xF50705FB);
	r2 = D(r2, s0_2_1, 0x111508F8, 0xFFFA0503, 0xF1040101, 0x02040304);
	r3 = D(r3, s0_2_1, 0x010DE6F1, 0xE124FE02, 0x3A1AE7C3, 0x16FCFFEA);
	r4 = D(r4, s0_2_1, 0x0BF20303, 0x1304FEF7, 0xFC0DED14, 0x23F51308);
	r5 = D(r5, s0_2_1, 0xF808FB20, 0xFEEF13FB, 0x0801FA06, 0xEEEAFF13);
	r6 = D(r6, s0_2_1, 0xF30DF2F1, 0xF81EF71F, 0x0D0F0002, 0x0B22ECD6);
	r7 = D(r7, s0_2_1, 0x03F615DA, 0x0FFAF30B, 0xFFF9F902, 0xBB22E701);
	r0 = D(r0, s0_2_2, 0xED1B0401, 0x080FF702, 0xF9F704F6, 0xF1EA0003);
	r1 = D(r1, s0_2_2, 0xF2CFF2F8, 0xF113FCF1, 0xFF11F8FF, 0x08F0F604);
	r2 = D(r2, s0_2_2, 0xFF0CFFFF, 0xFF090204, 0xFD07F704, 0x02F8FD01);
	r3 = D(r3, s0_2_2, 0xFD0B0E06, 0xFAA8F202, 0xF80F08F3, 0x12F1F313);
	r4 = D(r4, s0_2_2, 0xF7F80B0A, 0xE610DD08, 0xF608F3FD, 0xFC27F60E);
	r5 = D(r5, s0_2_2, 0x02FF0FE9, 0xF9F9000C, 0xFEF8FFFD, 0xF5F9F208);
	r6 = D(r6, s0_2_2, 0xFCF8FFFB, 0xFD38F1F3, 0x0C0EEA00, 0x12F015FE);
	r7 = D(r7, s0_2_2, 0x0508FFFD, 0xFFEFFD0A, 0xFF12FD02, 0xFFC1D704);
	r0 = D(r0, s1_0_0, 0xFE07F618, 0xF7001605, 0xFBF411F5, 0xEF09F3FA);
	r1 = D(r1, s1_0_0, 0x10D91BD0, 0xEA040015, 0x01F5EFFD, 0xF9FBE801);
	r2 = D(r2, s1_0_0, 0x03E70EF2, 0xFEFC190C, 0x14FAE711, 0xFE0403FC);
	r3 = D(r3, s1_0_0, 0x1DEBFBFF, 0x080013F1, 0x0214002A, 0xF528E926);
	r4 = D(r4, s1_0_0, 0x0302210A, 0x24F0E208, 0x0CFDD81F, 0x040DFF19);
	r5 = D(r5, s1_0_0, 0x0D12F511, 0x03FB0405, 0xFEFC07FD, 0x010AFCEB);
	r6 = D(r6, s1_0_0, 0x04F8E3FC, 0x150FE5DC, 0xF9040CF0, 0xFFF6FFF7);
	r7 = D(r7, s1_0_0, 0x11F6401A, 0x02D9101B, 0x1006F713, 0x1ED1D343);
	r0 = D(r0, s1_0_1, 0xE20DFE13, 0x120C07FF, 0x02F519F4, 0x181819F3);
	r1 = D(r1, s1_0_1, 0x8102DBE9, 0x01021922, 0x0F0B00FB, 0xD022F2ED);
	r2 = D(r2, s1_0_1, 0xBD1B0E07, 0xDC0309F8, 0xA6120FF9, 0x08030104);
	r3 = D(r3, s1_0_1, 0xCEE9DA1A, 0x131B2DD9, 0x3FFB0CEA, 0xE210FF10);
	r4 = D(r4, s1_0_1, 0xFC12DB0F, 0xAFEBF801, 0x3807BEF1, 0x18021F07);
	r5 = D(r5, s1_0_1, 0xEE00F3CF, 0x12FB0604, 0x0305F5FC, 0x0E2200F8);
	r6 = D(r6, s1_0_1, 0xF909E4ED, 0x04F61AFC, 0xFB02070E, 0xFFED1826);
	r7 = D(r7, s1_0_1, 0x170EF7DD, 0x1DD4FFFD, 0x32F7F1F3, 0x092FFE2C);
	r0 = D(r0, s1_0_2, 0x9B1B0414, 0x810EFBFB, 0x2E0302F5, 0x47080B21);
	r1 = D(r1, s1_0_2, 0x81F4DC06, 0xAE020DED, 0xDBF50E02, 0x17EB0613);
	r2 = D(r2, s1_0_2, 0xC7130703, 0x6A0F0206, 0x3207F91B, 0xE70303FE);
	r3 = D(r3, s1_0_2, 0x50F5040F, 0x81F105E4, 0x9F02E7D3, 0x7FDF0A0A);
	r4 = D(r4, s1_0_2, 0x9CE9F813, 0xB1F41C1B, 0xF7E8E111, 0x02EA0F05);
	r5 = D(r5, s1_0_2, 0x81E037FD, 0x23F708FD, 0x05F7F603, 0x05F3181E);
	r6 = D(r6, s1_0_2, 0x28F10B03, 0xDDF209F5, 0x6FFF0E04, 0x24FE0DEB);
	r7 = D(r7, s1_0_2, 0xBA09DC07, 0xF5F7020C, 0xA717EC00, 0x3F40E0D3);
	r0 = D(r0, s1_1_0, 0x18EAE408, 0xFE0A08FA, 0x0CED0CFE, 0x16E6F7E6);
	r1 = D(r1, s1_1_0, 0xFD0D0212, 0x09EA01FA, 0xFFF0F9FC, 0xFDF5F5FA);
	r2 = D(r2, s1_1_0, 0x0CF10603, 0x0AF0FB0F, 0xFBFDB724, 0xFFF70EFA);
	r3 = D(r3, s1_1_0, 0xFAFB0CCF, 0x0DF52914, 0xA6C6D1EB, 0x051FE6D1);
	r4 = D(r4, s1_1_0, 0x0613C6D4, 0x15E8CDFD, 0x100DC6E6, 0x130FF3F0);
	r5 = D(r5, s1_1_0, 0xEEC70DE0, 0x02060309, 0x02F70005, 0xEDF41DED);
	r6 = D(r6, s1_1_0, 0xED0EEB06, 0x05082AEA, 0xFF021A04, 0xF609F30C);
	r7 = D(r7, s1_1_0, 0xFEF71DF7, 0xF40413E9, 0xF10EF005, 0x01B5BA81);
	r0 = D(r0, s1_1_1, 0xB2EFF606, 0xB8F91B07, 0x11021B07, 0xC80B110F);
	r1 = D(r1, s1_1_1, 0xF22807E4, 0x120CF0F2, 0x1119F2F4, 0x06090CE6);
	r2 = D(r2, s1_1_1, 0x23012515, 0x06FD2E03, 0x33FD0712, 0x44090AFF);
	r3 = D(r3, s1_1_1, 0x0F290C13, 0xE828D106, 0xFE3CF113, 0xFC1200EE);
	r4 = D(r4, s1_1_1, 0xBF1D05DD, 0x090C2805, 0xF4F701DD, 0xDD0624F9);
	r5 = D(r5, s1_1_1, 0xC3FBC10C, 0x25E70806, 0x1908030A, 0x200112E7);
	r6 = D(r6, s1_1_1, 0x03F904F8, 0x1908EC0B, 0xFADE2308, 0x1BF71DFE);
	r7 = D(r7, s1_1_1, 0xEA001004, 0x0BE83700, 0x1EF62514, 0xFAF751DE);
	r0 = D(r0, s1_1_2, 0xDCEF18F7, 0x0AF60CEF, 0x94011C04, 0xF10917FC);
	r1 = D(r1, s1_1_2, 0x6417D9E5, 0xF1100004, 0xEE13F307, 0x4023D904);
	r2 = D(r2, s1_1_2, 0xE6F712FF, 0xA705F9F6, 0x610524E9, 0x4B020B07);
	r3 = D(r3, s1_1_2, 0x371923F0, 0x15FCE944, 0x5FF6121E, 0x81EF08B0);
	r4 = D(r4, s1_1_2, 0x81F8FE0B, 0x600106F0, 0x7F02CF03, 0x26EF0BF6);
	r5 = D(r5, s1_1_2, 0xB01BF229, 0xFC1D010A, 0x6309E5FF, 0x930CFB12);
	r6 = D(r6, s1_1_2, 0x19FE0D01, 0x1B06E7E3, 0x02000B00, 0xA903060B);
	r7 = D(r7, s1_1_2, 0xAF110E01, 0xBC050E09, 0x050104F5, 0x9839A6C1);
	r0 = D(r0, s1_2_0, 0xF404D001, 0xFE0318FD, 0xFF07181A, 0x01011EF8);
	r1 = D(r1, s1_2_0, 0x1DE80C8E, 0x020601F6, 0x0A071101, 0x02F41CF3);
	r2 = D(r2, s1_2_0, 0x03FE02F5, 0x02FE0209, 0x0AFE0501, 0x03001004);
	r3 = D(r3, s1_2_0, 0xEBED18EA, 0x0EF801E2, 0xEDE5E9B5, 0x0921ED02);
	r4 = D(r4, s1_2_0, 0xF2EC0BF0, 0x05F5201A, 0x25F6F406, 0xE4F3F209);
	r5 = D(r5, s1_2_0, 0xF6013110, 0x0BFB03F2, 0xFDFE0FF4, 0x11F50004);
	r6 = D(r6, s1_2_0, 0xF0FFFAFF, 0x0C0AF800, 0x070FFDFA, 0x0DF21200);
	r7 = D(r7, s1_2_0, 0xED1214F3, 0x03F6F4FA, 0x0AFFF416, 0x03D8F0E6);
	r0 = D(r0, s1_2_1, 0xF122C10C, 0xFB07EE1C, 0x101D17F9, 0xFA091606);
	r1 = D(r1, s1_2_1, 0xF004F3A6, 0x05F6062C, 0xFBF20FF4, 0x03F10AB6);
	r2 = D(r2, s1_2_1, 0x05FD2E0A, 0x15FBFA02, 0x1106D7ED, 0x000B1003);
	r3 = D(r3, s1_2_1, 0x13E921FB, 0x0CFEEE15, 0xE7F5D700, 0xF9F42106);
	r4 = D(r4, s1_2_1, 0xFD0D0A10, 0xE80EEE1F, 0x02F0ACFB, 0xF90F06FA);
	r5 = D(r5, s1_2_1, 0xE1F006C2, 0x090E09EA, 0xF8FF0104, 0xF805C5FB);
	r6 = D(r6, s1_2_1, 0x02F70CF3, 0xCCFEF0E9, 0x08060B0D, 0xF20C040E);
	r7 = D(r7, s1_2_1, 0x09F7161C, 0x0F0DF004, 0x0410ED03, 0x01292CE0);
	r0 = D(r0, s1_2_2, 0x91F51218, 0x5F0709FD, 0x7FF81903, 0x7F211101);
	r1 = D(r1, s1_2_2, 0x54EBECFC, 0x81E6F5E8, 0x20090805, 0x9C0003FF);
	r2 = D(r2, s1_2_2, 0x7C0C150A, 0xEA040701, 0x810E0407, 0xE701FC02);
	r3 = D(r3, s1_2_2, 0x2FFF150D, 0x7F09C801, 0x7FD72B19, 0x7FFAF010);
	r4 = D(r4, s1_2_2, 0xC1EEF10A, 0x37FFEA03, 0x8116EFFC, 0xEEF82306);
	r5 = D(r5, s1_2_2, 0xBEFAEAE2, 0x87F70A07, 0x81EDEE0F, 0x81E3E6F8);
	r6 = D(r6, s1_2_2, 0xFD091500, 0x810DF0F2, 0xA0FF1AF6, 0x321E030C);
	r7 = D(r7, s1_2_2, 0x8116290C, 0xB0F40CFC, 0xB8FA0000, 0x7FFCD93C);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x000C13FD, 0xFCF9FCFF, 0x01010307, 0x0E04F612);
	r1 = D(r1, s0_0_0, 0xF2F4EFFC, 0x07EEE307, 0x0104F30D, 0xFBEE0A06);
	r2 = D(r2, s0_0_0, 0xFDE5CE07, 0xED0C03F9, 0x071F050C, 0xFBFD06FF);
	r3 = D(r3, s0_0_0, 0x0BFE1611, 0xFA000815, 0xE811FB00, 0xE3EC1902);
	r4 = D(r4, s0_0_0, 0x090EE30C, 0x14CBE70F, 0x0ED7FC0D, 0xF4F4F7FD);
	r5 = D(r5, s0_0_0, 0xF62BCF19, 0x05FA0005, 0xFFFA03FD, 0xFE19F703);
	r6 = D(r6, s0_0_0, 0x0B09FA03, 0x05ECE706, 0x020B08FD, 0x07FA03FE);
	r7 = D(r7, s0_0_0, 0xF20ADBEB, 0x22F0D40B, 0x07FAFCF3, 0xE50DBB10);
	r0 = D(r0, s0_0_1, 0xF8F70D0B, 0x0A07F600, 0x03E9E0FB, 0xE8E6FCF7);
	r1 = D(r1, s0_0_1, 0x02F72205, 0xFFE9FEF6, 0xFFF01F09, 0x18011E06);
	r2 = D(r2, s0_0_1, 0x0415F5FC, 0xEE0717FA, 0x10FA0CF7, 0xF9FD0AF7);
	r3 = D(r3, s0_0_1, 0xFF04C70C, 0x0FDF230B, 0xE722EAE8, 0x0AD907EB);
	r4 = D(r4, s0_0_1, 0x04F02117, 0x100AFC0D, 0x12F90006, 0x0CDE040F);
	r5 = D(r5, s0_0_1, 0xD5E60814, 0x02F2FFFF, 0xFD0AFEFE, 0x0C04EB02);
	r6 = D(r6, s0_0_1, 0x000CFF03, 0xF7FDFC01, 0xFAF5E3F0, 0xFFE9F2F9);
	r7 = D(r7, s0_0_1, 0x1DFEFD10, 0x4431FF2E, 0x23FDEE1E, 0xEE0AFB0D);
	r0 = D(r0, s0_0_2, 0x0302FC03, 0x07FA0501, 0x12F0F5FA, 0x1AFAED02);
	r1 = D(r1, s0_0_2, 0x0C0B0AD6, 0x0A08F707, 0x00F1FEFD, 0xD7E61CEE);
	r2 = D(r2, s0_0_2, 0xFFFBFF02, 0x02FF00FE, 0xF1F704F8, 0x0502FF05);
	r3 = D(r3, s0_0_2, 0x130E06FD, 0x0D06F005, 0xF1020C0F, 0x28130708);
	r4 = D(r4, s0_0_2, 0xEF3F10F4, 0xE900F00C, 0xEFFE180E, 0xFADAE701);
	r5 = D(r5, s0_0_2, 0x0AC8FF04, 0x00F8F506, 0x02050D06, 0x0D0BFAFE);
	r6 = D(r6, s0_0_2, 0x05F4FEFF, 0xF61A03FB, 0x0BEFF8FB, 0x11EBF409);
	r7 = D(r7, s0_0_2, 0x1207E712, 0x09FB0514, 0xFEFC0605, 0xFBAEF1F0);
	r0 = D(r0, s0_1_0, 0xFCFAEC03, 0x0501F111, 0xE502F10F, 0x00FD0905);
	r1 = D(r1, s0_1_0, 0xE81E0C18, 0x0813D604, 0x11EBD811, 0x0EDFF5FD);
	r2 = D(r2, s0_1_0, 0x0E0DA5FA, 0xFDFCFC03, 0x06E2CAF0, 0xF20B18EE);
	r3 = D(r3, s0_1_0, 0xFE0B1DF7, 0x020C1106, 0xF7D55412, 0x1310F4F6);
	r4 = D(r4, s0_1_0, 0x1317E5F3, 0xFBC03EEC, 0x0E0092F4, 0xF81BD002);
	r5 = D(r5, s0_1_0, 0x10EFFB05, 0x0C04F410, 0xEB030403, 0xF1D5FEEF);
	r6 = D(r6, s0_1_0, 0xFDFCFE00, 0x1A11E2F6, 0x0A05EAFD, 0x0AE404F5);
	r7 = D(r7, s0_1_0, 0xDBE9F4FF, 0x0BF002FE, 0xED0DF40D, 0xCBA11C25);
	r0 = D(r0, s0_1_1, 0xF222F413, 0xF201FD0C, 0xF4FDFFF8, 0xF50E1F0F);
	r1 = D(r1, s0_1_1, 0x06262316, 0xFC013BFE, 0x15023C1D, 0x160F2A11);
	r2 = D(r2, s0_1_1, 0x190C0722, 0x03FCFA3F, 0x1E00D128, 0x28141441);
	r3 = D(r3, s0_1_1, 0x05FAE021, 0x0AE6D408, 0xF92A1D12, 0x01301A17);
	r4 = D(r4, s0_1_1, 0xF0FF14EA, 0xFA01FF14, 0xE7ECAC0E, 0xE6FB13F1);
	r5 = D(r5, s0_1_1, 0xE2D803EC, 0xDCE530F6, 0xE50A07FC, 0xFCE34C11);
	r6 = D(r6, s0_1_1, 0xF101EF14, 0xF2D1FA31, 0xEAE581FC, 0xF50CCCF2);
	r7 = D(r7, s0_1_1, 0x0FEAFEED, 0x1C05F708, 0xF2EFF1E8, 0x00100C0B);
	r0 = D(r0, s0_1_2, 0xF80910FB, 0xFA0D07EB, 0x0BF30103, 0xFC150AFD);
	r1 = D(r1, s0_1_2, 0xFFFF15F9, 0xEBEF11F0, 0xE40FF3E5, 0xEF0F12EF);
	r2 = D(r2, s0_1_2, 0xFD05060C, 0x15020403, 0xFA06FFFC, 0xF40307F9);
	r3 = D(r3, s0_1_2, 0x00020EF4, 0xEBF3FCED, 0x00EC071C, 0xECC303D6);
	r4 = D(r4, s0_1_2, 0x11E92DF2, 0x19B30B00, 0x11040501, 0x23171200);
	r5 = D(r5, s0_1_2, 0xFA31FDC3, 0xFD08FBFD, 0xFEF0F70E, 0xF3ECFFFC);
	r6 = D(r6, s0_1_2, 0xFAF9EF16, 0x11010C00, 0x0F16CD21, 0x10FFF019);
	r7 = D(r7, s0_1_2, 0x0A0002F6, 0x1702F501, 0x1002FF0E, 0x0C16030A);
	r0 = D(r0, s0_2_0, 0x05FAFBFC, 0x0803FEF8, 0x05F40DF8, 0xF004FEEA);
	r1 = D(r1, s0_2_0, 0xF40CF812, 0x0516F2FC, 0x040C03F7, 0xFA0904FE);
	r2 = D(r2, s0_2_0, 0xEF0CEE01, 0x0D14F4FB, 0xF605E8F4, 0xEDF80E01);
	r3 = D(r3, s0_2_0, 0xE2F90505, 0x0C0DF80D, 0x81CAEF2D, 0xE91402EF);
	r4 = D(r4, s0_2_0, 0x04EDEBEA, 0xBD3223F5, 0xEE15E704, 0xF02119FA);
	r5 = D(r5, s0_2_0, 0x2AF1F7ED, 0x21060E07, 0x08F20CF6, 0x2319FFFD);
	r6 = D(r6, s0_2_0, 0xFAF80509, 0xF5F81906, 0xF2050302, 0xEEFCFDFB);
	r7 = D(r7, s0_2_0, 0xF904DA17, 0x030EF805, 0xF709000F, 0xF2EF282E);
	r0 = D(r0, s0_2_1, 0x13FE0315, 0xF1F81C10, 0xFF0E1109, 0x11121402);
	r1 = D(r1, s0_2_1, 0x00FF0404, 0x0D0CDBF5, 0x05F906F7, 0x0703F207);
	r2 = D(r2, s0_2_1, 0x1D0B07E1, 0x1CFCFBFE, 0x0812F3F4, 0x0E0406EC);
	r3 = D(r3, s0_2_1, 0x11FE1BFC, 0x181CCAE1, 0xEE050CED, 0x06F4FBFE);
	r4 = D(r4, s0_2_1, 0xFDE7E4F6, 0xD23C0CFB, 0x06FDEA07, 0x0FD9FCFC);
	r5 = D(r5, s0_2_1, 0x03ED07F7, 0xD502FFF7, 0xEB080011, 0xE303F7EA);
	r6 = D(r6, s0_2_1, 0x050AFD05, 0xF1FDFFE4, 0xEDF80FF9, 0xFC0F1007);
	r7 = D(r7, s0_2_1, 0xF4FDFDEA, 0x00F8FC02, 0xEE130208, 0xD1FD1C05);
	r0 = D(r0, s0_2_2, 0xF3FD0A04, 0x02FDFCFF, 0xEF0E00F7, 0x08030001);
	r1 = D(r1, s0_2_2, 0x08E2040B, 0xF71EFDFF, 0xED01F908, 0xFD050CF5);
	r2 = D(r2, s0_2_2, 0xF806FB01, 0xFEFFFD01, 0x060902FD, 0x09000203);
	r3 = D(r3, s0_2_2, 0xEEE818F3, 0xE002F0DD, 0xCC00F6FF, 0xE5F8EA12);
	r4 = D(r4, s0_2_2, 0xF5D2190E, 0xC90610F0, 0xF9F4FA06, 0x01EE0607);
	r5 = D(r5, s0_2_2, 0x00F81806, 0x0A020608, 0x1BFE00FB, 0xF8F2060B);
	r6 = D(r6, s0_2_2, 0x0AF707F0, 0x09F502EF, 0x1FFAFA0F, 0xF90102E8);
	r7 = D(r7, s0_2_2, 0xFA0FFFEE, 0x1BF90704, 0x0601FCF7, 0xF529F0FB);
	r0 = D(r0, s1_0_0, 0x0105EC0F, 0x0601040A, 0x03FD00EA, 0xF1180A0F);
	r1 = D(r1, s1_0_0, 0x81FEF038, 0x16FEFCF6, 0xFF060402, 0x2203F7F8);
	r2 = D(r2, s1_0_0, 0x180BF70C, 0xF60AFF03, 0xF711F3F9, 0x0202FE05);
	r3 = D(r3, s1_0_0, 0xE60A13FB, 0xF0FF1509, 0x1E391EFE, 0xFFF7F0F2);
	r4 = D(r4, s1_0_0, 0xEFFF11F2, 0x8D04FCD4, 0x2609F82D, 0x01E1F725);
	r5 = D(r5, s1_0_0, 0xE213F326, 0xFC0B0DF6, 0x1008F9F7, 0x0D0DF602);
	r6 = D(r6, s1_0_0, 0xF4FE0CEE, 0xEFF1F620, 0x07FAFEFC, 0x0BFD13EA);
	r7 = D(r7, s1_0_0, 0xCDEB12F8, 0xF4070407, 0x1911E009, 0x7B24D134);
	r0 = D(r0, s1_0_1, 0x02F00706, 0xD518FC19, 0x05030908, 0xECFDF307);
	r1 = D(r1, s1_0_1, 0x061C2ED0, 0x2E07F8FC, 0xF6FB090E, 0x180FF8FA);
	r2 = D(r2, s1_0_1, 0x0706F400, 0x01F1FD04, 0x251FFAE8, 0xFD00FB08);
	r3 = D(r3, s1_0_1, 0x0906EE0B, 0xD90E1504, 0xDED90FFF, 0xF3D336B2);
	r4 = D(r4, s1_0_1, 0x26FA0207, 0x0CECE637, 0x27D40220, 0x2E0409F6);
	r5 = D(r5, s1_0_1, 0xEED40005, 0xFD04F803, 0x1903EC09, 0x43F4E1FA);
	r6 = D(r6, s1_0_1, 0x0410ED0F, 0x06FA11EA, 0x140806F2, 0x1106EB08);
	r7 = D(r7, s1_0_1, 0x11FAFF02, 0x210212E7, 0x07F812FF, 0x2722F10E);
	r0 = D(r0, s1_0_2, 0x1DF5F309, 0x0FFEF5F7, 0x110EFEFE, 0x201D08EC);
	r1 = D(r1, s1_0_2, 0x01DBD039, 0xECEF0D05, 0x08F1F0FC, 0x02EE15FF);
	r2 = D(r2, s1_0_2, 0xFEF4FBFC, 0x0404FAFF, 0x0304070D, 0x03010708);
	r3 = D(r3, s1_0_2, 0x4218F805, 0x16F4E0FD, 0xD8081F08, 0x2901B0E2);
	r4 = D(r4, s1_0_2, 0xE916FC1A, 0x1CF20509, 0xFF0902E5, 0x1318F10F);
	r5 = D(r5, s1_0_2, 0xC0FF0518, 0x000BFAF9, 0x00000509, 0x211303EE);
	r6 = D(r6, s1_0_2, 0xE8FC0A2A, 0x0807FDE2, 0xFE01F908, 0x0BE20D1B);
	r7 = D(r7, s1_0_2, 0x1AE2F1FC, 0x2011E4F1, 0x000EFAF9, 0xCEFE33EE);
	r0 = D(r0, s1_1_0, 0x0203F9E1, 0x06FAF90F, 0xF5E9FEE9, 0xE81712F4);
	r1 = D(r1, s1_1_0, 0x2D020BCD, 0x1D00F1CF, 0x08050C0D, 0x02F91306);
	r2 = D(r2, s1_1_0, 0xEAEF0A16, 0xF4EEED02, 0xCEEC01F0, 0xFDF8FBFA);
	r3 = D(r3, s1_1_0, 0xBB0623E9, 0x371FF60E, 0x6ED6BCD6, 0xEB2722FF);
	r4 = D(r4, s1_1_0, 0x0D281101, 0x8DC05236, 0x02E8DAEF, 0xCDEED62A);
	r5 = D(r5, s1_1_0, 0xB0E4114C, 0xFFFFF638, 0xFFEAE114, 0xBDD60928);
	r6 = D(r6, s1_1_0, 0x0C03F419, 0xDAFD03FF, 0xDD03F815, 0x12F5FC12);
	r7 = D(r7, s1_1_0, 0x03180E2A, 0x0AFB290A, 0xF4FD0FE6, 0xEA3134D0);
	r0 = D(r0, s1_1_1, 0xF015D927, 0x0EE7F010, 0xE717D607, 0xFBFCF7FB);
	r1 = D(r1, s1_1_1, 0x131FCA35, 0xEC0EF003, 0x15060D17, 0x29F00B10);
	r2 = D(r2, s1_1_1, 0x27F212FA, 0x0B26F519, 0x020F1C30, 0x0DECFD1D);
	r3 = D(r3, s1_1_1, 0x29ED1515, 0x26FB4100, 0xA6FE480C, 0x0773C1D3);
	r4 = D(r4, s1_1_1, 0x15EA2AEA, 0x10DB31F0, 0xF9BE103E, 0xF2C4F719);
	r5 = D(r5, s1_1_1, 0x39082AE1, 0x01F90820, 0xF020EC06, 0xEE02F3D3);
	r6 = D(r6, s1_1_1, 0x3811092C, 0xEEEC1143, 0xFCFFEDE9, 0xC82109E8);
	r7 = D(r7, s1_1_1, 0xD5F3EFF0, 0xEA032148, 0xFAFCE1FF, 0x9EB6B87D);
	r0 = D(r0, s1_1_2, 0xFFF929EC, 0xFA00FDFF, 0x012C30E4, 0xDD18E628);
	r1 = D(r1, s1_1_2, 0x18321C34, 0xFBFE22FF, 0xF50FD307, 0x0322B203);
	r2 = D(r2, s1_1_2, 0x07E7DF09, 0xFFF6FBF5, 0x0004E70E, 0x00FAF909);
	r3 = D(r3, s1_1_2, 0xD50EE2D4, 0xC100E621, 0xF109B61A, 0xC70D3F45);
	r4 = D(r4, s1_1_2, 0xCAFFE5FB, 0xE3EBDB16, 0x27EE3B11, 0x24ED3D07);
	r5 = D(r5, s1_1_2, 0x6119DBBE, 0xFA0C120D, 0xFFDC21EE, 0xC40832EB);
	r6 = D(r6, s1_1_2, 0x0A241020, 0x3BE0F40E, 0x28F02C27, 0xE7D80A14);
	r7 = D(r7, s1_1_2, 0xF21846F3, 0x00131F1D, 0x22FA2B11, 0xF13C1C06);
	r0 = D(r0, s1_2_0, 0xEBFBFDEC, 0x01F5160D, 0x241007EA, 0xF6FDE7D1);
	r1 = D(r1, s1_2_0, 0xECFCDBCE, 0xA2231CF3, 0xF6F0F90A, 0xFE0AF8FE);
	r2 = D(r2, s1_2_0, 0x10F0FE3B, 0xFCF70116, 0xE51AEEEE, 0x0EFFF4FA);
	r3 = D(r3, s1_2_0, 0x0105162B, 0xBEDE1CDE, 0x270381C9, 0x180FD942);
	r4 = D(r4, s1_2_0, 0x1BF7F0CD, 0x1A3AF828, 0xF4FE0513, 0xC4F34B01);
	r5 = D(r5, s1_2_0, 0xB2013BD1, 0xEFF00DE9, 0x20190CFF, 0x29EF013B);
	r6 = D(r6, s1_2_0, 0xF7F70BF7, 0xB1D6FAF4, 0x050302F9, 0xDAF3F50F);
	r7 = D(r7, s1_2_0, 0x250A0E54, 0x10F3EE0E, 0xF8FAFF13, 0x0EBB5505);
	r0 = D(r0, s1_2_1, 0xFF033BE7, 0xF8FB1BD0, 0xDA3738AA, 0xC0E612CD);
	r1 = D(r1, s1_2_1, 0xF12D1748, 0xE3FB07EA, 0xFBF30D14, 0xE4D317E2);
	r2 = D(r2, s1_2_1, 0x10B8D2E0, 0x01FBFA0C, 0x14001237, 0x0709FA05);
	r3 = D(r3, s1_2_1, 0x16BEC026, 0xC521F36A, 0x819A33CB, 0xED05D2C5);
	r4 = D(r4, s1_2_1, 0x3F1900B4, 0xF621A7C5, 0x5A19C641, 0x0E05EBC7);
	r5 = D(r5, s1_2_1, 0x9A073318, 0x31CE3455, 0x1222120E, 0x36D426CF);
	r6 = D(r6, s1_2_1, 0x001119DA, 0xF123DAF1, 0x05FC120F, 0x01001E09);
	r7 = D(r7, s1_2_1, 0xCBF2B0D8, 0xF4091E27, 0x1B04BB19, 0x83F14781);
	r0 = D(r0, s1_2_2, 0x1E01F213, 0xF5F02600, 0x2BF0DA00, 0x1A1311F2);
	r1 = D(r1, s1_2_2, 0xD53402F5, 0xDFE9AA09, 0x0802E6FA, 0x0FF70302);
	r2 = D(r2, s1_2_2, 0xFAC900FD, 0x080B2305, 0x06E4CDFD, 0x01FAEBFD);
	r3 = D(r3, s1_2_2, 0x44D9DAF0, 0xC322EFFD, 0xBD0E2D73, 0x3B2A17FC);
	r4 = D(r4, s1_2_2, 0x011F340B, 0xDDFC9511, 0x01A181ED, 0xE2D78AF6);
	r5 = D(r5, s1_2_2, 0xFAF673ED, 0x0FE9A606, 0xF002CBFB, 0xDCE8E612);
	r6 = D(r6, s1_2_2, 0xC300E32A, 0x07EFEDD5, 0xE2E4DDCB, 0x1BCE95F6);
	r7 = D(r7, s1_2_2, 0x1EE6F417, 0xF5121202, 0xF70204F8, 0xD8ECF4DE);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.053e-02, 1.253e-02, 1.168e-02, 1.133e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-5.101e-02, 4.407e-03, 1.552e-02, -4.781e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.079e-02, -1.408e-02, -7.485e-03, -2.201e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.815e-02, 2.911e-02, 7.443e-03, 5.063e-04);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.934e-02, 2.922e-02, 2.808e-02, 1.243e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.811e-02, 1.330e-02, 5.664e-03, 1.430e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-5.811e-03, 1.243e-03, 9.532e-03, -2.935e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.549e-02, -4.002e-01, -1.313e-03, -1.863e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x14E20606, 0x0BF3F711, 0x06DDFB0B, 0x03E2F9F8);
	r1 = D(r1, s0_0_0, 0x02030101, 0x010BFFF6, 0x1BFA09FA, 0xFEECEF17);
	r2 = D(r2, s0_0_0, 0xFA0E07F2, 0xF8020603, 0x1421F9F3, 0xFC02F0EB);
	r3 = D(r3, s0_0_0, 0xFAE6120A, 0x14EBF800, 0xEE062B03, 0x02FEEF00);
	r4 = D(r4, s0_0_0, 0x05030309, 0xF613F6ED, 0x0303FE05, 0xFDF7FFF7);
	r5 = D(r5, s0_0_0, 0xF2F312FC, 0x02F707F2, 0x050513DF, 0xF304F107);
	r6 = D(r6, s0_0_0, 0xF704F50D, 0x0CFBF313, 0xFAF80509, 0xFC080509);
	r7 = D(r7, s0_0_0, 0xCF05F5FA, 0x04FB1A0F, 0xF5DF01F2, 0x0406FC03);
	r0 = D(r0, s0_0_1, 0xFDEACEC4, 0xF50DFCED, 0xF726DDEA, 0xE8FE09F1);
	r1 = D(r1, s0_0_1, 0x010E0B01, 0xFE0707FB, 0x05FFF20C, 0x08EFE9F6);
	r2 = D(r2, s0_0_1, 0x18F32121, 0x12081C21, 0x0F041110, 0x19E80210);
	r3 = D(r3, s0_0_1, 0x0BFC1105, 0x0702030A, 0x15152C1E, 0xFE1B050D);
	r4 = D(r4, s0_0_1, 0x0AFFFA13, 0x060A152E, 0x06FFFA00, 0x00FAFCFC);
	r5 = D(r5, s0_0_1, 0x0D04F7FB, 0xFD090818, 0xF1251112, 0x110BF4D4);
	r6 = D(r6, s0_0_1, 0xEA03FBEE, 0x370C0322, 0x0EECD4FA, 0x1412E50D);
	r7 = D(r7, s0_0_1, 0xDA15C501, 0xEF08C54A, 0x1DF2F908, 0xFCF0EBF9);
	r0 = D(r0, s0_0_2, 0xFFF10712, 0xEB03F6EB, 0x0BEE232D, 0xEFFAF3EC);
	r1 = D(r1, s0_0_2, 0x000CFD07, 0xFC05F3F9, 0xEF08AFBA, 0x07FCCDEC);
	r2 = D(r2, s0_0_2, 0x0507FEFE, 0x02F7F6E3, 0xE6F90AFC, 0x0DF901F7);
	r3 = D(r3, s0_0_2, 0xFAF901F4, 0x05F4F10D, 0xFC0307FC, 0xFCF20A01);
	r4 = D(r4, s0_0_2, 0x0205ED03, 0x0108E908, 0x14FE0011, 0xFA0AF904);
	r5 = D(r5, s0_0_2, 0x11EF040D, 0x08EFFDF7, 0x07EFE8FA, 0xF9F90C0C);
	r6 = D(r6, s0_0_2, 0xFE01F8F7, 0x21DACBEE, 0x16EEF303, 0x07C5EEEE);
	r7 = D(r7, s0_0_2, 0xF21805F4, 0xDDFCDACA, 0xDA00F804, 0x050000FB);
	r0 = D(r0, s0_1_0, 0x05130318, 0x1C0CFAF0, 0x30F50012, 0xFD0704ED);
	r1 = D(r1, s0_1_0, 0x04010005, 0x08FBF714, 0xFA07FD17, 0x020DF801);
	r2 = D(r2, s0_1_0, 0xF2F3F9FC, 0x13E8FC08, 0xFAEE1403, 0x0C10F20A);
	r3 = D(r3, s0_1_0, 0xFAFCFCFB, 0x061BF903, 0xF6F90EF6, 0xF7EF0BE9);
	r4 = D(r4, s0_1_0, 0xFE0902FF, 0xFFFAF9F9, 0x0F1905F4, 0xFC0C0902);
	r5 = D(r5, s0_1_0, 0x0908F9F8, 0xFAFC0112, 0xFCFDFC1B, 0xFD030303);
	r6 = D(r6, s0_1_0, 0x00FD06FD, 0xCFE707F7, 0x030F01F2, 0xE5191DE7);
	r7 = D(r7, s0_1_0, 0xEAF91B16, 0xE60EFA07, 0x0B10F00E, 0xF8F40501);
	r0 = D(r0, s0_1_1, 0xF406EFCA, 0xFB12EAFA, 0xE9EBE4FF, 0xF2FA0D07);
	r1 = D(r1, s0_1_1, 0x04F60401, 0x040CF5FB, 0xFD2909F9, 0x0B0FFCFE);
	r2 = D(r2, s0_1_1, 0xDDF8091B, 0xE801EF0E, 0xCC01E615, 0x0CFDE10E);
	r3 = D(r3, s0_1_1, 0x0CEDFD04, 0x0315E200, 0xE3141817, 0x0CE71412);
	r4 = D(r4, s0_1_1, 0xF803FBFB, 0xF30A1233, 0x0F070F1F, 0xF516FA07);
	r5 = D(r5, s0_1_1, 0x0105D602, 0x02EBEEF2, 0xECF8CDFF, 0x21EF2102);
	r6 = D(r6, s0_1_1, 0x02010DF4, 0x05181A1C, 0x08000709, 0x1407ED21);
	r7 = D(r7, s0_1_1, 0x022F06E6, 0x181DCE05, 0xFF0EFDF7, 0x0411110C);
	r0 = D(r0, s0_1_2, 0x09020C01, 0x19FC0BF9, 0x0C0CDA26, 0x0CEFFD02);
	r1 = D(r1, s0_1_2, 0xFFFC0CFD, 0x0701F802, 0x0301160D, 0xF812EC0F);
	r2 = D(r2, s0_1_2, 0xFE08F503, 0x0310F2E5, 0x1700E7FF, 0x0CF8FA04);
	r3 = D(r3, s0_1_2, 0xFE01FB0C, 0x09FFEA06, 0x0E00D0FF, 0xF011F906);
	r4 = D(r4, s0_1_2, 0x0009EE05, 0xF71103EB, 0xF3F40EFD, 0xFF0308FA);
	r5 = D(r5, s0_1_2, 0xF315FEFF, 0xFC10F7F8, 0xE2EBE7DD, 0x1101F1FE);
	r6 = D(r6, s0_1_2, 0x000400FD, 0xFA1021EC, 0xFA0C0DF5, 0x00071814);
	r7 = D(r7, s0_1_2, 0x1AE1FB05, 0x15D72402, 0xE4FFF0EA, 0xF9FFE3E7);
	r0 = D(r0, s0_2_0, 0xF904EC0B, 0xFAF726F8, 0x112AE60C, 0xFA09FF09);
	r1 = D(r1, s0_2_0, 0x01FE0002, 0xFF00F802, 0x0AF001F9, 0xF3FF0207);
	r2 = D(r2, s0_2_0, 0x0802FDFC, 0xF40B0300, 0x021ED700, 0xFF0FFD07);
	r3 = D(r3, s0_2_0, 0xFF09F40B, 0xFBF60CFD, 0xF10DEE02, 0xE90402ED);
	r4 = D(r4, s0_2_0, 0x01FC03FD, 0xE5090205, 0xF3FCF8F5, 0x030305FF);
	r5 = D(r5, s0_2_0, 0x0013F709, 0x07F70C09, 0x04001903, 0xEA0D0BFC);
	r6 = D(r6, s0_2_0, 0x04070403, 0xF9FFEFF5, 0x021F01F5, 0x0C05FFEB);
	r7 = D(r7, s0_2_0, 0x0A010FEC, 0x061A0BFD, 0xE71C1004, 0x03F9FBFD);
	r0 = D(r0, s0_2_1, 0x09FC0904, 0x0FEF0009, 0x04FD1CE9, 0xFDF7F004);
	r1 = D(r1, s0_2_1, 0xFFF800FF, 0x01F9FFF4, 0xF6EF0D05, 0xFA03F709);
	r2 = D(r2, s0_2_1, 0xF406FB03, 0x0A11FD11, 0xEEE02109, 0xEF1FFDFF);
	r3 = D(r3, s0_2_1, 0x0205FF07, 0x0BFEFB00, 0x1801FAFA, 0xFD100503);
	r4 = D(r4, s0_2_1, 0xFBFB12FE, 0x030902FB, 0x03110DFE, 0xFFF602FF);
	r5 = D(r5, s0_2_1, 0xFE0DFE09, 0x0AF80A0A, 0x2DFF0C1D, 0x00F9E912);
	r6 = D(r6, s0_2_1, 0x03FFFD04, 0x200AC41A, 0x0A15EA16, 0x010CEB07);
	r7 = D(r7, s0_2_1, 0x170A2402, 0xE9E832E3, 0xF0F609DE, 0x00070002);
	r0 = D(r0, s0_2_2, 0x0303EE13, 0xEEFEFFF7, 0xF0E421D4, 0xF9F90702);
	r1 = D(r1, s0_2_2, 0xFF04FCFF, 0xFB0101FF, 0x03EB090B, 0xF305F7F9);
	r2 = D(r2, s0_2_2, 0x06FC0502, 0x0EFBF7F2, 0xFFF6FD01, 0x0111F204);
	r3 = D(r3, s0_2_2, 0xFEF7060D, 0xFEFEF607, 0xFDFDF108, 0x0B02F4FC);
	r4 = D(r4, s0_2_2, 0x01FE00FE, 0x09F7F512, 0x03F209F8, 0xFE0701FD);
	r5 = D(r5, s0_2_2, 0xFC02F2F2, 0xF7F80EFE, 0xF911F60A, 0xFFF103ED);
	r6 = D(r6, s0_2_2, 0x03FD04FE, 0x0AFA0FF5, 0x01F406F8, 0x24051DCE);
	r7 = D(r7, s0_2_2, 0x131D0204, 0x1ECD1CF8, 0x13E928F8, 0xFA0DF600);
	r0 = D(r0, s1_0_0, 0x100214F6, 0xE4F5C70B, 0xFBFBDA02, 0x04F0081B);
	r1 = D(r1, s1_0_0, 0x05FE0303, 0x03FE0901, 0x1C0FFCF0, 0xEE0FC3F1);
	r2 = D(r2, s1_0_0, 0xF7F6DE00, 0xE410EE16, 0x10130007, 0x0C0A02EE);
	r3 = D(r3, s1_0_0, 0x06FD08F3, 0xFFFF0AFF, 0xFDFD0116, 0xE801F50D);
	r4 = D(r4, s1_0_0, 0x0BF5FE08, 0x14F830F1, 0xF6FDFAFE, 0xF50602FF);
	r5 = D(r5, s1_0_0, 0x0EED0BFD, 0xF8EE090D, 0x23FEF805, 0x05E9E9F5);
	r6 = D(r6, s1_0_0, 0x0001FE02, 0x13F30A0D, 0xEDF80014, 0xFBF4E900);
	r7 = D(r7, s1_0_0, 0xEC00FFF7, 0xFEF503F5, 0xEDFF12E4, 0xFAFFF3FF);
	r0 = D(r0, s1_0_1, 0xFEFAF309, 0x1CE7EEFF, 0xE71CF3E6, 0x05FC10FE);
	r1 = D(r1, s1_0_1, 0x10FE0802, 0x0EF20DFF, 0x23E90EFF, 0x09F7DEF9);
	r2 = D(r2, s1_0_1, 0xF5FD0FF8, 0x16FD0FFD, 0x41ECF6EA, 0x15FC0E02);
	r3 = D(r3, s1_0_1, 0x07020605, 0x0807FB03, 0xDF14BC08, 0x020CF9FB);
	r4 = D(r4, s1_0_1, 0x0002F6F9, 0x36EDF606, 0xF4F60200, 0xFCF90900);
	r5 = D(r5, s1_0_1, 0x18E616FE, 0xEDFAE419, 0xEFFB00F9, 0xDEEBFD19);
	r6 = D(r6, s1_0_1, 0xFD00FFFB, 0xFFBBEE25, 0xFFFF01FF, 0xEFFFEEEC);
	r7 = D(r7, s1_0_1, 0xE822F21A, 0x3A0D00CB, 0xEB13000E, 0xE81401FF);
	r0 = D(r0, s1_0_2, 0x09F61207, 0xE7011812, 0x080206EF, 0xF80201FA);
	r1 = D(r1, s1_0_2, 0x0201FF03, 0xF505FB0A, 0x0DFCF501, 0xFFFEF309);
	r2 = D(r2, s1_0_2, 0x0202F901, 0x071A08EE, 0xEFFDF409, 0xFA010504);
	r3 = D(r3, s1_0_2, 0x07FAF7FE, 0xF90AF9FB, 0x1BE80803, 0x04000004);
	r4 = D(r4, s1_0_2, 0xFBFFFA00, 0xFD0101EF, 0x03F50DFF, 0xF803FD05);
	r5 = D(r5, s1_0_2, 0xEB09FDF6, 0xF305F401, 0xFEE81A1A, 0x10F40014);
	r6 = D(r6, s1_0_2, 0x000300FC, 0xED06E519, 0xFF0DFEFA, 0xFF1CED04);
	r7 = D(r7, s1_0_2, 0x0B16EFF0, 0xE817DBEE, 0xE627F3DB, 0x0000F905);
	r0 = D(r0, s1_1_0, 0xF31EF4FB, 0x9C20EEF5, 0xF02917FB, 0xA8FBF4D2);
	r1 = D(r1, s1_1_0, 0x03040301, 0x0907FEFC, 0xE31CF1F1, 0x1C08E5FD);
	r2 = D(r2, s1_1_0, 0x36EBF123, 0x2BF2C507, 0x3BD5EDEA, 0xD414D7FE);
	r3 = D(r3, s1_1_0, 0xEA3804FA, 0x1604F909, 0x13050800, 0x11FC1E0B);
	r4 = D(r4, s1_1_0, 0xE60E0011, 0xF80012F6, 0xEB1614FD, 0xEF09FB07);
	r5 = D(r5, s1_1_0, 0x0EE31309, 0xF41FED17, 0x11FF0AB7, 0xED0BD50C);
	r6 = D(r6, s1_1_0, 0x0AF6FCFF, 0x07FFFFDE, 0xFD0CE918, 0x21110FE3);
	r7 = D(r7, s1_1_0, 0xE7DD1004, 0x16071CF8, 0xE5EEE421, 0xF406FF03);
	r0 = D(r0, s1_1_1, 0xEE0E0605, 0xF1121803, 0xD7131109, 0x12EE10FD);
	r1 = D(r1, s1_1_1, 0x0D1B03FE, 0x1D07F304, 0x1EF40622, 0x0CF100FF);
	r2 = D(r2, s1_1_1, 0x28E912EA, 0x3AF10FEE, 0xFCF6111F, 0x21EFF304);
	r3 = D(r3, s1_1_1, 0xD623FDFC, 0xD924ECDC, 0xEE000903, 0xE31705EA);
	r4 = D(r4, s1_1_1, 0xF901F3F0, 0x3DBEDADD, 0x0900F00D, 0x03F902FD);
	r5 = D(r5, s1_1_1, 0xD51001F9, 0xE423DE1C, 0x11280223, 0x0338F101);
	r6 = D(r6, s1_1_1, 0xFD01060C, 0x54EB0E49, 0xCCD6F01F, 0xEFFF3022);
	r7 = D(r7, s1_1_1, 0x7F8912FE, 0x01E0ECB1, 0xFDBCF9F2, 0x3EC1DBD9);
	r0 = D(r0, s1_1_2, 0x06FFF502, 0x1AD01B02, 0x64B51AEB, 0xFFEC190B);
	r1 = D(r1, s1_1_2, 0x0305FDFE, 0x01EA08F4, 0xECFE13EC, 0xF80CEF0B);
	r2 = D(r2, s1_1_2, 0x07F801FD, 0x09F4F20B, 0x04EBF212, 0x1EEFFDF1);
	r3 = D(r3, s1_1_2, 0x10E703FF, 0x0801F8FD, 0xF701FB00, 0xFAF10F0B);
	r4 = D(r4, s1_1_2, 0xFBF9F80E, 0xEC0EF913, 0x0BFE020C, 0xF6000101);
	r5 = D(r5, s1_1_2, 0x38B40129, 0x0301DC0D, 0x02190FB9, 0x19EF0D0B);
	r6 = D(r6, s1_1_2, 0xF6000006, 0x2AF10715, 0x0AFD0FF8, 0x1D084DE5);
	r7 = D(r7, s1_1_2, 0x1505F1F6, 0xDA2FF014, 0xF1041705, 0xE90CF0F7);
	r0 = D(r0, s1_2_0, 0x06F8F5E7, 0xE8FC0FFC, 0xE512F79B, 0xFF0202FC);
	r1 = D(r1, s1_2_0, 0x030201FB, 0x19E407F7, 0x15F507F7, 0x1101F7DF);
	r2 = D(r2, s1_2_0, 0x0308F9D6, 0xEFF51081, 0x0FE6EC81, 0x21ED0C03);
	r3 = D(r3, s1_2_0, 0xF0FF02ED, 0xFB0AFB04, 0x01FFFAE1, 0x0A04040E);
	r4 = D(r4, s1_2_0, 0xFC01010C, 0xFCF20D0B, 0x08EA04E6, 0xFBFB0405);
	r5 = D(r5, s1_2_0, 0xFE030B1E, 0x22F7F413, 0x09000FEC, 0x0D12F005);
	r6 = D(r6, s1_2_0, 0xFAFA030B, 0xE122CB07, 0xF3080318, 0xEFE70F01);
	r7 = D(r7, s1_2_0, 0x28BB0D43, 0x33CC0002, 0xFEFCFF39, 0xE513F6FA);
	r0 = D(r0, s1_2_1, 0xE9040D05, 0xF81A16F3, 0x1004090C, 0xFCFB0CFB);
	r1 = D(r1, s1_2_1, 0x0818FCF6, 0xF212FEFC, 0xF0FE070F, 0x1A09FE12);
	r2 = D(r2, s1_2_1, 0x0DFAFE10, 0x0207FAE7, 0xF2D6F600, 0x010A06EA);
	r3 = D(r3, s1_2_1, 0xDAFA0600, 0x010CFEF8, 0x03DE0F21, 0x0201FE04);
	r4 = D(r4, s1_2_1, 0xF2FB0511, 0x03DBFA22, 0xF8FA06EC, 0xF7FB0304);
	r5 = D(r5, s1_2_1, 0x9128F3D4, 0xFFFEEE1C, 0xE303FEAD, 0xFEFE02FF);
	r6 = D(r6, s1_2_1, 0x01FC01FF, 0x0FE9EEBF, 0xDAF8FA11, 0x39ECF231);
	r7 = D(r7, s1_2_1, 0xDE0833D6, 0x57B60911, 0x9196DD07, 0x0FD0FF05);
	r0 = D(r0, s1_2_2, 0xEE16EA06, 0xF20FE9A2, 0x1002F6C2, 0x14EDFBFC);
	r1 = D(r1, s1_2_2, 0x0406FBFC, 0x02F1FD0D, 0x05130211, 0xFE0003EC);
	r2 = D(r2, s1_2_2, 0xFBFF0904, 0xF309EE02, 0x110E04FE, 0xF70EFCF3);
	r3 = D(r3, s1_2_2, 0x0CFA02FA, 0xFDF70514, 0x03F50F0F, 0x16E90B13);
	r4 = D(r4, s1_2_2, 0xFA000201, 0x01FA0F14, 0x07F017EF, 0xF70501FE);
	r5 = D(r5, s1_2_2, 0xD30C0B0A, 0x0EF8F5E7, 0x21EE030C, 0x10FEFC05);
	r6 = D(r6, s1_2_2, 0xFC05FFFB, 0x18F11BC2, 0xF804F7ED, 0x55C530FE);
	r7 = D(r7, s1_2_2, 0x0EFF0AED, 0x02180E29, 0x03F602F2, 0xE810FC04);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x06FBFFF8, 0xF7E60112, 0xEEE8EF14, 0xF4FA0E1C);
	r1 = D(r1, s0_0_0, 0x01010100, 0xFC090200, 0xFB06F5F5, 0xF8FAF905);
	r2 = D(r2, s0_0_0, 0xED0AECE4, 0xE913F6CE, 0xFD1D0FE3, 0xF710EAE3);
	r3 = D(r3, s0_0_0, 0xFC0909FD, 0xF406EEFE, 0x000CFAE5, 0x01FEF610);
	r4 = D(r4, s0_0_0, 0x0403F4FF, 0xF20D06F3, 0x0DF80DF7, 0x070504FB);
	r5 = D(r5, s0_0_0, 0x060404F2, 0xFC02030A, 0x020A0ADF, 0xF6F800F1);
	r6 = D(r6, s0_0_0, 0x0AF30B01, 0xFF090514, 0xFBFF0405, 0xF8E90018);
	r7 = D(r7, s0_0_0, 0xFCFAF106, 0x1012EDFF, 0x08ECFE0D, 0x02FEFA04);
	r0 = D(r0, s0_0_1, 0x1F0F192D, 0xF61A0112, 0x011DDC18, 0x0D10101B);
	r1 = D(r1, s0_0_1, 0x00010301, 0x0309FAFD, 0xE1F20A0D, 0x120B020C);
	r2 = D(r2, s0_0_1, 0xD10707C7, 0xBFED05B7, 0xE6FDEFE7, 0xCEEF12DC);
	r3 = D(r3, s0_0_1, 0xEFFE03EB, 0xE71203DB, 0xE906F3A7, 0xDDF804F5);
	r4 = D(r4, s0_0_1, 0xE3F7FF07, 0xFEED08F3, 0x1307F90D, 0x0F08010C);
	r5 = D(r5, s0_0_1, 0x09FDF7ED, 0xF7F4F102, 0x0CEBDDED, 0xFEFBF5EB);
	r6 = D(r6, s0_0_1, 0x3C09FB0B, 0xFDF6F00C, 0x1302120B, 0xFF0DFB03);
	r7 = D(r7, s0_0_1, 0xFA011B2C, 0xE8D1FBAB, 0xF2FFFDEE, 0x0D06FC02);
	r0 = D(r0, s0_0_2, 0xF50A02F5, 0xFF20EF12, 0x0DD604EA, 0x12FAF60A);
	r1 = D(r1, s0_0_2, 0x12FDEFFD, 0x2201F2FC, 0x1F36F927, 0x1514000C);
	r2 = D(r2, s0_0_2, 0x010F0DFA, 0x0319EEF1, 0x0BFAF127, 0xF90C0F07);
	r3 = D(r3, s0_0_2, 0x090FFDFF, 0xF409FEEE, 0x0D1310E9, 0xF7F102FA);
	r4 = D(r4, s0_0_2, 0x0CFE0006, 0x04F20604, 0xFE0D00EE, 0x1E09F200);
	r5 = D(r5, s0_0_2, 0xF40307FD, 0xF6FF0910, 0xED2916C3, 0x07F11EFA);
	r6 = D(r6, s0_0_2, 0xFE000704, 0xE8F62315, 0xECF71410, 0xFA1E05F5);
	r7 = D(r7, s0_0_2, 0xE204F915, 0x0906F905, 0x0FDEEA0B, 0x06FFFAFC);
	r0 = D(r0, s0_1_0, 0x0B0AF108, 0x0615F200, 0x0634E7FD, 0xF9FA1615);
	r1 = D(r1, s0_1_0, 0x02FC05FF, 0xF6FA0AFE, 0x0EF8020E, 0x05FFF6FA);
	r2 = D(r2, s0_1_0, 0x05FBF900, 0x01E616F8, 0xF4F00103, 0xF5FDE3F4);
	r3 = D(r3, s0_1_0, 0x0B0CFCFE, 0xF6FC0517, 0xD7EF1602, 0xF8020A01);
	r4 = D(r4, s0_1_0, 0x0001F8F6, 0x0B00FCF1, 0x180CFAFC, 0x060F0702);
	r5 = D(r5, s0_1_0, 0x0908F1ED, 0xFA0B01F5, 0x07F01E12, 0x08FAEEEF);
	r6 = D(r6, s0_1_0, 0x000A0704, 0xFE01FE01, 0xE90BFE0D, 0xF713F2E4);
	r7 = D(r7, s0_1_0, 0x03FC0201, 0xE91CEBE5, 0xDFFF07F7, 0xFDFCFFFE);
	r0 = D(r0, s0_1_1, 0x20F8EE0F, 0x1AE3FBFB, 0x04C4D5ED, 0x27FCF61C);
	r1 = D(r1, s0_1_1, 0x2AEF0CFD, 0xF8F901FA, 0x130306E0, 0xF30007DE);
	r2 = D(r2, s0_1_1, 0x0A09271D, 0x01170530, 0x0B031DE1, 0xFC1B2C1C);
	r3 = D(r3, s0_1_1, 0xED06E91D, 0xFF0A0E17, 0xFF0A0BEC, 0xF2F703CE);
	r4 = D(r4, s0_1_1, 0x040633F6, 0xFF20030C, 0x14F7F3FF, 0xDAFAEB1A);
	r5 = D(r5, s0_1_1, 0x08F5FB11, 0x121303F8, 0x08DAF709, 0xFD11090F);
	r6 = D(r6, s0_1_1, 0xE9FEE6E2, 0xD5CC17B2, 0xAE29DC81, 0xD0810581);
	r7 = D(r7, s0_1_1, 0x13FF27D8, 0x0CCB05E9, 0xE515EB10, 0xDBF2F9DA);
	r0 = D(r0, s0_1_2, 0xF8ECFD0A, 0xFBDA1B09, 0xF00E0CF0, 0x04FB070A);
	r1 = D(r1, s0_1_2, 0xD9FCED01, 0x1C06F302, 0xECE5E6DD, 0xF7090DFB);
	r2 = D(r2, s0_1_2, 0x05FEFB08, 0x1002FB01, 0x0015F8FE, 0xF612040B);
	r3 = D(r3, s0_1_2, 0x17FE02F5, 0x0FFB1807, 0x10FAE7F0, 0x10F60105);
	r4 = D(r4, s0_1_2, 0x1804FD08, 0xFD08EF13, 0x1EF407F3, 0xFE0BF904);
	r5 = D(r5, s0_1_2, 0x15F314DC, 0xF60A12F7, 0xD6EDFC01, 0xF2FD0EF2);
	r6 = D(r6, s0_1_2, 0x03F7F904, 0x0BFD14D6, 0x040DFE06, 0xB006FDD8);
	r7 = D(r7, s0_1_2, 0xF616E317, 0x061B2BF9, 0x25130B00, 0x1A1C092C);
	r0 = D(r0, s0_2_0, 0xFC110BFC, 0xFA0709F6, 0xF31B0E14, 0xFA020B0A);
	r1 = D(r1, s0_2_0, 0x00FD03FF, 0xFF010903, 0x05FFF900, 0x0601FB06);
	r2 = D(r2, s0_2_0, 0xFFFE0801, 0x09F8020A, 0xF9F9191D, 0x170C01FA);
	r3 = D(r3, s0_2_0, 0xF6140800, 0x06F50A08, 0x08060C08, 0xF6040E08);
	r4 = D(r4, s0_2_0, 0x0101F000, 0x091002FF, 0xF60003FB, 0x0302FEFC);
	r5 = D(r5, s0_2_0, 0x09FF0BE9, 0x0302F708, 0xFFFBF4D7, 0xFF0605FA);
	r6 = D(r6, s0_2_0, 0xFF02FAFF, 0x001FF504, 0x0C04FEFE, 0x0516F2FF);
	r7 = D(r7, s0_2_0, 0x020906E6, 0xFEDEF5E3, 0xFA10E9E4, 0x05000100);
	r0 = D(r0, s0_2_1, 0x0011DEE8, 0xF2ED05FB, 0x15EE1CE2, 0xFA00F7FB);
	r1 = D(r1, s0_2_1, 0x05FB0705, 0xECF8E201, 0x00F5EBEF, 0x0715F8F1);
	r2 = D(r2, s0_2_1, 0x07FC0511, 0x0404080D, 0xFC07FD37, 0x010B100C);
	r3 = D(r3, s0_2_1, 0x1221FB12, 0xFA19F508, 0x18FEF90F, 0x1AFC0913);
	r4 = D(r4, s0_2_1, 0x020A0AF8, 0x0C1E00EF, 0xFB0E0619, 0x0BFC2301);
	r5 = D(r5, s0_2_1, 0x050617F2, 0xFEFD030E, 0xF9DBF617, 0x060704F4);
	r6 = D(r6, s0_2_1, 0xF8FEF802, 0x051509F8, 0x010A071D, 0x0EFF1802);
	r7 = D(r7, s0_2_1, 0x07DAEDC6, 0x03EB0527, 0x0010DF1E, 0xF7FC08F9);
	r0 = D(r0, s0_2_2, 0x0101E2F1, 0x0610ED0F, 0xFE0D0F07, 0x0DFEFF09);
	r1 = D(r1, s0_2_2, 0x02FE0F06, 0x15FEFC12, 0x0DFE00EA, 0x050701F5);
	r2 = D(r2, s0_2_2, 0x00FEF803, 0xF9051AFE, 0x04F7E7E4, 0xEC08FF02);
	r3 = D(r3, s0_2_2, 0xF00D04FD, 0xF8FE08F5, 0xFDE71409, 0xFCF51DFE);
	r4 = D(r4, s0_2_2, 0xFD00F6FF, 0xF1F611F5, 0xFF0401EB, 0xFA051305);
	r5 = D(r5, s0_2_2, 0x060C05F6, 0x101303F9, 0x0B1317F7, 0x02F70100);
	r6 = D(r6, s0_2_2, 0x0301F900, 0xFE10DCF8, 0x0BF1FA08, 0xE2DEF11A);
	r7 = D(r7, s0_2_2, 0xEA0C03EA, 0xF412EFDC, 0xF3E8EBEC, 0x06FCF3F9);
	r0 = D(r0, s1_0_0, 0x05050CFF, 0x04F7FEF5, 0x07E8100A, 0x3617FE03);
	r1 = D(r1, s1_0_0, 0xFF000004, 0x05FBFE08, 0x1CF6FA15, 0xEFFEFCFB);
	r2 = D(r2, s1_0_0, 0x0501E9F7, 0x1FF200D7, 0x26C4CA26, 0xDEFD00FC);
	r3 = D(r3, s1_0_0, 0xF4ED19FD, 0xF8E8F608, 0xFF20FE0A, 0x08070B01);
	r4 = D(r4, s1_0_0, 0xFBFC0FF9, 0xE80201FE, 0x02FA03FB, 0xF60706FF);
	r5 = D(r5, s1_0_0, 0x09E50013, 0x01F4FDFE, 0x1CE38125, 0x040BFBF6);
	r6 = D(r6, s1_0_0, 0xFEF7FAFA, 0xFC0E2213, 0xFAFB1502, 0x1AF206E8);
	r7 = D(r7, s1_0_0, 0xA8F412F7, 0x2D0A2D26, 0xE5F61000, 0x00FC0407);
	r0 = D(r0, s1_0_1, 0xFF230E17, 0x0CF908F1, 0x0F0BFB10, 0x0C121C03);
	r1 = D(r1, s1_0_1, 0x0303FA05, 0xFF060702, 0xE608D3FA, 0xFBE709EE);
	r2 = D(r2, s1_0_1, 0xEC050AED, 0xE724FFFD, 0x28E9F838, 0xF623FEE6);
	r3 = D(r3, s1_0_1, 0xF80C1AF7, 0x001C08F6, 0xDBCEFD04, 0xFE010403);
	r4 = D(r4, s1_0_1, 0x000115F7, 0x1A01FBF8, 0xE8CEF0F2, 0xFA180BFA);
	r5 = D(r5, s1_0_1, 0xFD1804FB, 0xF40FFDF0, 0x2814EF05, 0xF7D20C0C);
	r6 = D(r6, s1_0_1, 0x01030306, 0xF4D633F0, 0xE01720FF, 0xF7DB05E1);
	r7 = D(r7, s1_0_1, 0xFFFCD6EC, 0x631FC4CA, 0x051B81ED, 0xF5FF01F0);
	r0 = D(r0, s1_0_2, 0xFFD60207, 0x1531F910, 0xFACA092E, 0x0DCAFC0D);
	r1 = D(r1, s1_0_2, 0x07F6FE08, 0x09DC0C04, 0x17F90B11, 0xFC27FAF2);
	r2 = D(r2, s1_0_2, 0xF21FFFFF, 0xE77F0F0B, 0x20E5D508, 0xFE35FDF3);
	r3 = D(r3, s1_0_2, 0x0515F9F8, 0x0215F5FD, 0xF1391BE2, 0xFBDF0CFD);
	r4 = D(r4, s1_0_2, 0x05200809, 0xF509F5EC, 0xF612F8F6, 0x03F0FF03);
	r5 = D(r5, s1_0_2, 0xFF81FF00, 0xF03C02F1, 0x1E9F09EC, 0x00A719FB);
	r6 = D(r6, s1_0_2, 0x02050103, 0xF58110E2, 0xEC0C1EFF, 0xFD40F608);
	r7 = D(r7, s1_0_2, 0x0FBC1C2B, 0xF0A4F024, 0x2A7F0735, 0xF942FB03);
	r0 = D(r0, s1_1_0, 0xED141AFC, 0xF203FFF6, 0xF9F001FB, 0x16140707);
	r1 = D(r1, s1_1_0, 0xF9FEFE02, 0xF8F3F309, 0x0F0803F3, 0x040E18F9);
	r2 = D(r2, s1_1_0, 0xE5F8E7FB, 0x1FFFF2F4, 0xD3FAD509, 0xFBFAE6FD);
	r3 = D(r3, s1_1_0, 0xFF1D0802, 0x04FF010E, 0x03FC0A0D, 0x0007FD1A);
	r4 = D(r4, s1_1_0, 0xFE0B02F9, 0xE3FE0B05, 0xFCF9F400, 0xFA02F4FE);
	r5 = D(r5, s1_1_0, 0x0702F205, 0x030E10F8, 0x12F51B05, 0xE6090202);
	r6 = D(r6, s1_1_0, 0x03FD0DFE, 0x15EFFE27, 0x1A0513EA, 0x1CEB1D2F);
	r7 = D(r7, s1_1_0, 0xE705101A, 0xF1F609DC, 0x35FC04D9, 0x040DFFFE);
	r0 = D(r0, s1_1_1, 0xEC080F05, 0xF8E80D13, 0x02FA0202, 0x03FDFC1C);
	r1 = D(r1, s1_1_1, 0x0506FB06, 0x0500F3FE, 0xF812000B, 0x000E0FF4);
	r2 = D(r2, s1_1_1, 0xEF1FEAF6, 0x072BEDF0, 0xF00CCA00, 0xF12BF5DE);
	r3 = D(r3, s1_1_1, 0x091602FB, 0xFC2008FC, 0xE7EAFB0D, 0x01000611);
	r4 = D(r4, s1_1_1, 0xFA05FBFF, 0xCF1FFDEF, 0x1521EEFB, 0x010403FD);
	r5 = D(r5, s1_1_1, 0xD50FEFD5, 0x0B080801, 0xFF1BE217, 0x10021A07);
	r6 = D(r6, s1_1_1, 0x03E50001, 0x38CFF916, 0x002318EF, 0xFC1A0BEA);
	r7 = D(r7, s1_1_1, 0xFFF3FD08, 0xE8F613D3, 0x81F11E18, 0xE4F5F607);
	r0 = D(r0, s1_1_2, 0xEDEE0807, 0x1AEE0034, 0xF4D3142F, 0xFC27F90B);
	r1 = D(r1, s1_1_2, 0x060B0207, 0xFAFE0D09, 0xFC290923, 0xF9FC0009);
	r2 = D(r2, s1_1_2, 0x01D2FCF5, 0xFBEF090B, 0xECFA21EE, 0x000903FF);
	r3 = D(r3, s1_1_2, 0xF9F60118, 0x0AEBFC13, 0xE818270A, 0xF80016FC);
	r4 = D(r4, s1_1_2, 0x0C0A01FA, 0xF2E208F2, 0x0108F90B, 0xFDFC0301);
	r5 = D(r5, s1_1_2, 0x07F700E2, 0xF0E507EA, 0x361027C9, 0xED1E1924);
	r6 = D(r6, s1_1_2, 0x0B170605, 0xF822EBF8, 0x15F814FF, 0x02B61C30);
	r7 = D(r7, s1_1_2, 0x0A340802, 0xD02747BD, 0xF94B1A31, 0x04FDF4F2);
	r0 = D(r0, s1_2_0, 0x0BFCFEF9, 0x0CFA05FB, 0x0403F000, 0x0A04FFFB);
	r1 = D(r1, s1_2_0, 0xFAFE01FA, 0xFCFE05F6, 0x01EB06F5, 0x02FFFC09);
	r2 = D(r2, s1_2_0, 0x040906FC, 0xEF1D06FB, 0x1E0D0501, 0xF01BF5FD);
	r3 = D(r3, s1_2_0, 0xFCFE0401, 0x0304F706, 0xFBEC10F7, 0xF6FF050C);
	r4 = D(r4, s1_2_0, 0x05F406FA, 0xC611FE00, 0xFF01EC11, 0x00F5FC05);
	r5 = D(r5, s1_2_0, 0xED1AFFF2, 0x1311F805, 0xFA13082D, 0xF10CF00E);
	r6 = D(r6, s1_2_0, 0x03000105, 0xE003EF13, 0xF0FA16F0, 0x23020CFC);
	r7 = D(r7, s1_2_0, 0x1C3027F0, 0x28CD0C3F, 0xEFEFE921, 0xE9FEF700);
	r0 = D(r0, s1_2_1, 0x10F603FD, 0xE2E3003F, 0x1D0F061D, 0xF807010C);
	r1 = D(r1, s1_2_1, 0xF701FEFB, 0xEFF00006, 0xEB05F408, 0x00EFF603);
	r2 = D(r2, s1_2_1, 0x0BF5F804, 0x04070E11, 0x1E000308, 0xDBFDFBF4);
	r3 = D(r3, s1_2_1, 0x00100B0B, 0x15E5060D, 0xF81B0501, 0xFD27F6FA);
	r4 = D(r4, s1_2_1, 0xFAFF03FB, 0x20F70105, 0xFDF8F802, 0x0B1A0606);
	r5 = D(r5, s1_2_1, 0xEC14FEFE, 0x12061B04, 0xC21C0E4D, 0x00F407F9);
	r6 = D(r6, s1_2_1, 0x010602FF, 0x20F8D4FF, 0xF5FC19E4, 0x3317F822);
	r7 = D(r7, s1_2_1, 0xD9D51BF9, 0x0912E60A, 0x11C402FB, 0x04F60509);
	r0 = D(r0, s1_2_2, 0x1CFEF008, 0x1431EDF8, 0x0E02F80E, 0x02030402);
	r1 = D(r1, s1_2_2, 0xFBF6FEF9, 0x0A0101FB, 0xF9F3F9FD, 0x0414FE11);
	r2 = D(r2, s1_2_2, 0xF91E0900, 0xF32909F2, 0xF915FE01, 0x0213FB04);
	r3 = D(r3, s1_2_2, 0x0502FC01, 0x0706EF15, 0xFB181AF8, 0xFDF60905);
	r4 = D(r4, s1_2_2, 0x0812090B, 0xF2F7FB12, 0xF4200009, 0xF6FC02FB);
	r5 = D(r5, s1_2_2, 0xF9FAFAE2, 0x0BFAFBF8, 0x0BF6E70E, 0x0A080A0D);
	r6 = D(r6, s1_2_2, 0x06FBFD04, 0xF5270725, 0x032311FE, 0xCBBF230D);
	r7 = D(r7, s1_2_2, 0x02DB0509, 0x0FEF18D3, 0xF50E2E32, 0x060E0609);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FB00F5, 0x0EF80902, 0x07DF1211, 0xFFEC05FF);
	r1 = D(r1, s0_0_0, 0xFF02FE02, 0x01020A05, 0x0A06FC08, 0x10F707EC);
	r2 = D(r2, s0_0_0, 0x0009EEFC, 0x0D0DD40C, 0xFEF6121C, 0x1B0A010C);
	r3 = D(r3, s0_0_0, 0x0E0104F7, 0x01FBF401, 0x030128E9, 0xFDFFFAF9);
	r4 = D(r4, s0_0_0, 0x0C04FAFF, 0x140C020C, 0x08050408, 0x06000C09);
	r5 = D(r5, s0_0_0, 0xF510FD0A, 0x000AF9F9, 0xF4E2D2E9, 0x0D000110);
	r6 = D(r6, s0_0_0, 0xF60301F9, 0x13EC1023, 0xF503FEFA, 0x08081ADA);
	r7 = D(r7, s0_0_0, 0xF2011BEE, 0x0E042AFA, 0x120403F9, 0xFD04FD0C);
	r0 = D(r0, s0_0_1, 0xFAE304E2, 0xF40CDC05, 0xF61CE5E4, 0xF100F8EC);
	r1 = D(r1, s0_0_1, 0xFFFFFB02, 0x01F9000B, 0x11E812FA, 0x00050807);
	r2 = D(r2, s0_0_1, 0xFD12FB03, 0x14FF15E5, 0xEC14FDF7, 0x0D04EC09);
	r3 = D(r3, s0_0_1, 0x0101020D, 0x1AF40A0E, 0xCBED38EB, 0x04FBF7FE);
	r4 = D(r4, s0_0_1, 0x0B09F601, 0xFEFB0805, 0x09FC0C14, 0x04030402);
	r5 = D(r5, s0_0_1, 0x070B061F, 0x06030804, 0xEA071B17, 0xF8FEE7FC);
	r6 = D(r6, s0_0_1, 0xFDFF0CFF, 0xEE2601FD, 0x1B04F8F6, 0xDDEB08E9);
	r7 = D(r7, s0_0_1, 0xF5DC00EF, 0x02E32CB3, 0xE7F9EF14, 0x07FB0403);
	r0 = D(r0, s0_0_2, 0xFF080FF5, 0x09F5FB06, 0x01FDF808, 0xF9F7BCF6);
	r1 = D(r1, s0_0_2, 0xFFFEFF00, 0x00FC0904, 0xF90BF90B, 0x0BF6ECFA);
	r2 = D(r2, s0_0_2, 0x0DFFFDFB, 0xF2FECEEF, 0x0FF8F003, 0x0C0708F7);
	r3 = D(r3, s0_0_2, 0xFEFD0201, 0xFDEEFC0D, 0xF8F104E1, 0xEDEDE506);
	r4 = D(r4, s0_0_2, 0x0B040300, 0x0E0D18ED, 0x130BF503, 0xFEFC0D00);
	r5 = D(r5, s0_0_2, 0x0710FA08, 0xF902EF09, 0x04F90805, 0x0D180DF2);
	r6 = D(r6, s0_0_2, 0xFF0A03FC, 0x070326EB, 0xF70013F6, 0x15E503E6);
	r7 = D(r7, s0_0_2, 0x0409F5FC, 0x2EDAD3F7, 0x2EFCF0EC, 0x030F0302);
	r0 = D(r0, s0_1_0, 0x0EEFE109, 0x08EE0513, 0x24E43515, 0xF40FFC0F);
	r1 = D(r1, s0_1_0, 0x0002FD05, 0xFA0DFC09, 0xF715F6FC, 0x07FF06F2);
	r2 = D(r2, s0_1_0, 0x040511FA, 0xFEF608DD, 0xD712EEEF, 0x0EFB000B);
	r3 = D(r3, s0_1_0, 0x15FA1308, 0x0FFDFCFB, 0xE40627E5, 0xFCF9060A);
	r4 = D(r4, s0_1_0, 0xFF02FB03, 0x03020318, 0x1A01F907, 0x030AFE0A);
	r5 = D(r5, s0_1_0, 0x00F00613, 0x16000C02, 0xF4FB2A04, 0xFE01F818);
	r6 = D(r6, s0_1_0, 0xFF000206, 0xFB0A02F1, 0x0B04FAFC, 0xF6FE1009);
	r7 = D(r7, s0_1_0, 0xF51F07C4, 0xF024FEE3, 0x0C17EC01, 0x0CFE01EF);
	r0 = D(r0, s0_1_1, 0x0FFBE106, 0xFFF7F718, 0x05090C31, 0xFE04F507);
	r1 = D(r1, s0_1_1, 0xFDFD0502, 0x05090303, 0xF7FBFFF2, 0x17FE03FA);
	r2 = D(r2, s0_1_1, 0x03021601, 0x11F40002, 0x02193D0B, 0x19EC2C06);
	r3 = D(r3, s0_1_1, 0x0EED000C, 0x060E09FD, 0xE0FEE601, 0xF8F613FA);
	r4 = D(r4, s0_1_1, 0x0AFD0C11, 0xED01F3F3, 0x0F03F0E9, 0x04070701);
	r5 = D(r5, s0_1_1, 0x04FC050F, 0x12110605, 0xF54B3A11, 0xFCEAED12);
	r6 = D(r6, s0_1_1, 0x02FEF8FC, 0xE214FBB7, 0x0C011EDC, 0x1508FF14);
	r7 = D(r7, s0_1_1, 0xE204F512, 0xDA05E581, 0xECF40D08, 0xFD0D05EB);
	r0 = D(r0, s0_1_2, 0xFC0DEB15, 0xF3E91915, 0xFFFCF2EE, 0xF7FEEDF6);
	r1 = D(r1, s0_1_2, 0xFBF90001, 0x0906F903, 0x08E8FE13, 0x04EC0311);
	r2 = D(r2, s0_1_2, 0x0204FC09, 0xE9EADE08, 0x02E5E90B, 0x0D0D1A0D);
	r3 = D(r3, s0_1_2, 0x0A041808, 0xFB0112FC, 0xF1FE1005, 0xF0FFF704);
	r4 = D(r4, s0_1_2, 0x0BF1F602, 0x0EFBFF07, 0x090604FD, 0xFEF908FC);
	r5 = D(r5, s0_1_2, 0xE8F3FAFF, 0x0A020B1B, 0x06092ACE, 0x03FB0503);
	r6 = D(r6, s0_1_2, 0x02FC0CFB, 0x25FC0E0E, 0x0A011908, 0xF41014B1);
	r7 = D(r7, s0_1_2, 0xD715F20F, 0x12DFA8D2, 0xEA1700CB, 0x03040414);
	r0 = D(r0, s0_2_0, 0x0D0207FC, 0x020FF5FF, 0x17C906F6, 0x0CFCEAF6);
	r1 = D(r1, s0_2_0, 0x0002FD06, 0x08FAFC01, 0xFF0EFEFB, 0x04FC0E06);
	r2 = D(r2, s0_2_0, 0x06FBFFF8, 0x03F60705, 0xF3ED05FC, 0x1507F611);
	r3 = D(r3, s0_2_0, 0x0014FD00, 0x040A030C, 0x0518EEF8, 0xFC01F30D);
	r4 = D(r4, s0_2_0, 0xFB01FC02, 0x0607FCF8, 0xFB07FBFF, 0x0200FAFA);
	r5 = D(r5, s0_2_0, 0x060EF5FD, 0xFB11FB0C, 0xD9FEE4FD, 0x06F508FF);
	r6 = D(r6, s0_2_0, 0x01FD0303, 0xEAE8060A, 0x0602FEEF, 0x030D03F9);
	r7 = D(r7, s0_2_0, 0x15F2FBF9, 0x261919EE, 0xF3DD08DA, 0xFBFE0103);
	r0 = D(r0, s0_2_1, 0x1701FEF1, 0x011AFDF5, 0x0A06FAFD, 0xF60408F9);
	r1 = D(r1, s0_2_1, 0xFC050009, 0x03040002, 0xF1020CF1, 0x1304FB14);
	r2 = D(r2, s0_2_1, 0xFF06F601, 0xE4EA0A01, 0x04ECFDFD, 0x090D091D);
	r3 = D(r3, s0_2_1, 0xFEFDFE0C, 0x0BF6F9FA, 0x01F4E3F9, 0xF1FDE9F9);
	r4 = D(r4, s0_2_1, 0xFD03F4FF, 0x0BFDFF06, 0xF9F6FD12, 0xFD02F7FB);
	r5 = D(r5, s0_2_1, 0x05FFFE15, 0x16070A04, 0xD82CF8F4, 0xF80FF40F);
	r6 = D(r6, s0_2_1, 0xFC020702, 0xF6E1FCEA, 0xF8FEF1EB, 0x19E5D8EF);
	r7 = D(r7, s0_2_1, 0x33F3DCD5, 0x14021DAA, 0xF4F40630, 0x04FEFCF2);
	r0 = D(r0, s0_2_2, 0x03FE0DFE, 0xF714FD08, 0x11FE13DB, 0x01F6F9F8);
	r1 = D(r1, s0_2_2, 0xFD030002, 0xFA01FAFF, 0xE1101B02, 0x08FDFCFF);
	r2 = D(r2, s0_2_2, 0x00F5F6FB, 0x100AF4F6, 0x02F7EC06, 0x0F02FCFF);
	r3 = D(r3, s0_2_2, 0x03F9F9FF, 0x0CF509F0, 0xEE07D7E7, 0x010CF1F8);
	r4 = D(r4, s0_2_2, 0xFE0B02FD, 0x0AF3F504, 0xF9FF04EF, 0x03020400);
	r5 = D(r5, s0_2_2, 0x03190617, 0x010C0509, 0x0FF10722, 0x11F50AF4);
	r6 = D(r6, s0_2_2, 0x0005FAFF, 0x1CDD1EC4, 0xFAFDE704, 0x0BB410E8);
	r7 = D(r7, s0_2_2, 0xFFFEEF09, 0xF2C910EE, 0xFEF11CF1, 0x05F703FD);
	r0 = D(r0, s1_0_0, 0x02FC03A8, 0x070C03C3, 0x0F1AE455, 0x170CF6F5);
	r1 = D(r1, s1_0_0, 0x04FEFF01, 0x11060303, 0xF403FCFC, 0x0DF9FFE5);
	r2 = D(r2, s1_0_0, 0xF01000F9, 0x0306F9FA, 0xE80DEAFA, 0xF21C0EDD);
	r3 = D(r3, s1_0_0, 0x0A0C0204, 0x012010FC, 0xCDCCE113, 0xEE000D07);
	r4 = D(r4, s1_0_0, 0xEC020002, 0xE402FBFF, 0x01FCFB06, 0x09040701);
	r5 = D(r5, s1_0_0, 0xF21100F9, 0x16F9080B, 0xFCEEF61F, 0xF4051B0C);
	r6 = D(r6, s1_0_0, 0xFAEC01FC, 0x1001DAD5, 0x0DF9F7B7, 0x19DAE60A);
	r7 = D(r7, s1_0_0, 0x27F900F3, 0x080213EC, 0xFC0900F1, 0x0805FF08);
	r0 = D(r0, s1_0_1, 0x140A0FF8, 0x17F7F311, 0x07ED10E7, 0x24FAEE16);
	r1 = D(r1, s1_0_1, 0x0701F305, 0x180C0111, 0x14021003, 0x01FC0007);
	r2 = D(r2, s1_0_1, 0x0703F20D, 0xF7E6061B, 0xFD02101B, 0xF9EE0209);
	r3 = D(r3, s1_0_1, 0xFC05F7FE, 0xF6FE0103, 0xD50104FD, 0xFE11130B);
	r4 = D(r4, s1_0_1, 0xF21EFE0D, 0x07ECFA01, 0x0E13F40A, 0x11FC0507);
	r5 = D(r5, s1_0_1, 0xE60B10F6, 0xEC0505F6, 0xF502182F, 0x19F3F3FB);
	r6 = D(r6, s1_0_1, 0x09F2F904, 0x2BF6F31A, 0xFDFA1DF0, 0xDADD18E2);
	r7 = D(r7, s1_0_1, 0xFCF10D11, 0x24DF0F07, 0xE9FF2FEE, 0x000F15EF);
	r0 = D(r0, s1_0_2, 0x040109F6, 0x28F813FD, 0xE4001D20, 0xFFF3F2F6);
	r1 = D(r1, s1_0_2, 0xFA070505, 0xFEFBF214, 0x08E3E6FF, 0x0BF60CF8);
	r2 = D(r2, s1_0_2, 0x0608F010, 0x001CE50D, 0xE21000F6, 0x1002EB10);
	r3 = D(r3, s1_0_2, 0x0BF6F200, 0xF9FF0C08, 0xD50D0FF7, 0xF500FC06);
	r4 = D(r4, s1_0_2, 0x0002F5F2, 0xFAEFFEFB, 0xFFFEF7FA, 0xFD06FB06);
	r5 = D(r5, s1_0_2, 0x09FC0601, 0x00F6F4F0, 0xDAF80305, 0xF7E2F00E);
	r6 = D(r6, s1_0_2, 0xFCFC0601, 0xD0DBFE00, 0xFCFB0302, 0x0DF60815);
	r7 = D(r7, s1_0_2, 0x07F8E80F, 0x3CDABCA3, 0x2602B921, 0xFA01E602);
	r0 = D(r0, s1_1_0, 0xFEEA00E9, 0x12000727, 0xF61BFEAF, 0x0DF7EAF4);
	r1 = D(r1, s1_1_0, 0x05FFFFFD, 0x0203FDFB, 0xDF050FF7, 0xFEF00901);
	r2 = D(r2, s1_1_0, 0xE813040D, 0xC303FB04, 0x09F8E20F, 0xDDEA14E4);
	r3 = D(r3, s1_1_0, 0xF515F8F4, 0x0F070206, 0x0E0E0C0E, 0x0E07FBEF);
	r4 = D(r4, s1_1_0, 0xFD090604, 0x0C06060E, 0x04FB1906, 0x02FA0209);
	r5 = D(r5, s1_1_0, 0xF9D40D19, 0xFD130A1A, 0x0EE818CF, 0x100A12F0);
	r6 = D(r6, s1_1_0, 0xFCF3F30A, 0x11101D0E, 0x0BE2FFFC, 0x04FAF4F9);
	r7 = D(r7, s1_1_0, 0x16C0EE0F, 0x0D191F0C, 0x2C0506F1, 0xFD030EFB);
	r0 = D(r0, s1_1_1, 0xFDFDFB07, 0x03BF0B0C, 0x0C021B01, 0xF7E9EFF6);
	r1 = D(r1, s1_1_1, 0x0D0002FB, 0x0A1C1B08, 0xFBD4F3F3, 0x0CF20AFE);
	r2 = D(r2, s1_1_1, 0xFF091510, 0xDFCE1817, 0xE9EFEE31, 0xE0E6FDE7);
	r3 = D(r3, s1_1_1, 0x1006F61C, 0x09E8FBEA, 0x0601F5F9, 0xFFF60D00);
	r4 = D(r4, s1_1_1, 0x0513F307, 0xFA0405FF, 0xFCED0608, 0x0C27FC06);
	r5 = D(r5, s1_1_1, 0x111903FF, 0x0914FF21, 0x0C18FCDE, 0xF307FE10);
	r6 = D(r6, s1_1_1, 0xF8150EF8, 0x0FFB0F2E, 0xF613FF0B, 0x0E0716FA);
	r7 = D(r7, s1_1_1, 0xF6101D15, 0xEAF30700, 0x1D0B0A0A, 0xE21E090E);
	r0 = D(r0, s1_1_2, 0x02F2F6F6, 0x0A090C05, 0x0CECF4F9, 0xF8F3FF08);
	r1 = D(r1, s1_1_2, 0x07FC1101, 0x03F408FA, 0x06FE1AF4, 0xFAFD05EB);
	r2 = D(r2, s1_1_2, 0xF9F5FF11, 0xF901F403, 0xFCF31308, 0x06F3F406);
	r3 = D(r3, s1_1_2, 0xFE012501, 0x040E0605, 0xDB0A010C, 0xF9FF0BF2);
	r4 = D(r4, s1_1_2, 0x00FFF901, 0x1709E711, 0xFCF808FB, 0x06FC0509);
	r5 = D(r5, s1_1_2, 0x07E51512, 0xEBFF1A03, 0xD10A0C92, 0xF4000F01);
	r6 = D(r6, s1_1_2, 0xFD030800, 0x030BF50A, 0x000B1814, 0xDF1434E9);
	r7 = D(r7, s1_1_2, 0x0F06E527, 0x3012DDDE, 0x270EC220, 0x1007FB03);
	r0 = D(r0, s1_2_0, 0xFC020F01, 0x1A00FE02, 0x13DF15E7, 0x0305FDFE);
	r1 = D(r1, s1_2_0, 0x00000103, 0xFF0407FF, 0x04F8F8FB, 0xF9EB0711);
	r2 = D(r2, s1_2_0, 0x0D060001, 0xF0E6F112, 0xF0150FF0, 0xDDF016FF);
	r3 = D(r3, s1_2_0, 0x0BF905FB, 0xEF120F09, 0x09FFF200, 0x040BF5F6);
	r4 = D(r4, s1_2_0, 0x01FDF905, 0xE3F9FCF4, 0x060A020F, 0x0A06FFF8);
	r5 = D(r5, s1_2_0, 0xEDFD0001, 0xFB0B00F4, 0xEBFBF138, 0x03EEFB07);
	r6 = D(r6, s1_2_0, 0x05F802FF, 0xF20CEA0F, 0x06F1F2FF, 0xF6FDE3E3);
	r7 = D(r7, s1_2_0, 0x070405F6, 0x3E00F6E9, 0xF4BB01F9, 0xF30400FF);
	r0 = D(r0, s1_2_1, 0xFB090209, 0xF90DFBFD, 0xE3F4F4E0, 0x0903F307);
	r1 = D(r1, s1_2_1, 0x0103FA03, 0x040CFDF1, 0x0303F5FD, 0xFD160AF7);
	r2 = D(r2, s1_2_1, 0xFE030FF8, 0xEA1709F1, 0x04F61BD7, 0x040308F0);
	r3 = D(r3, s1_2_1, 0x170E02FE, 0xF00700FE, 0xE3EFFC07, 0xF3EC0207);
	r4 = D(r4, s1_2_1, 0x0B01FC0B, 0x0C0B00FD, 0x17F410F8, 0x000D010B);
	r5 = D(r5, s1_2_1, 0xFF040101, 0x01F40007, 0x0129EDD2, 0xE205E5FF);
	r6 = D(r6, s1_2_1, 0x01030202, 0xF6031001, 0x171BE5F6, 0xD01212ED);
	r7 = D(r7, s1_2_1, 0x020500ED, 0x2AF5F0E9, 0xECF1EC01, 0xFF0FF906);
	r0 = D(r0, s1_2_2, 0x0C030014, 0xFC03FEFF, 0x1606F80C, 0x01FA00FE);
	r1 = D(r1, s1_2_2, 0x0005FF00, 0xFE000701, 0x0117F1FE, 0x0C0C0600);
	r2 = D(r2, s1_2_2, 0x0601000A, 0xEF0AF512, 0xF3FA04F9, 0x08FBFF00);
	r3 = D(r3, s1_2_2, 0x00FF09F5, 0x06FE0300, 0xF1070813, 0xFFFFF71D);
	r4 = D(r4, s1_2_2, 0x0600F90C, 0x00FCFDEE, 0xFC02EBFD, 0x0305FC02);
	r5 = D(r5, s1_2_2, 0x0A12FE0E, 0xFCF914F3, 0xEDF0FCFF, 0xF9E6FD00);
	r6 = D(r6, s1_2_2, 0x00FE02FF, 0xF7EB10FB, 0x0901F003, 0x09ED00F2);
	r7 = D(r7, s1_2_2, 0x19E8FD1C, 0xFF11E2F3, 0x0DFB1500, 0xFDF8EF00);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0BF10CFB, 0x1211FE09, 0xF6F3FC15, 0x08F51800);
	r1 = D(r1, s0_0_0, 0x010200FE, 0xFA02FCF7, 0xFA0CF704, 0xF503000C);
	r2 = D(r2, s0_0_0, 0xF30E090B, 0xFC1FFD0D, 0xC51006D7, 0xEB0DFE0B);
	r3 = D(r3, s0_0_0, 0x000BFFF9, 0x0316F6E8, 0x1B1103F3, 0xFD0CF4FA);
	r4 = D(r4, s0_0_0, 0x070C0CF9, 0xE0E417F3, 0xFAF901F6, 0xF70400FF);
	r5 = D(r5, s0_0_0, 0xFC0BF8F2, 0x0AFC0206, 0x1225EB13, 0x07E9F40F);
	r6 = D(r6, s0_0_0, 0xFDE6FAFE, 0xFC0E0BF5, 0xFD0E0102, 0x15DB0C0E);
	r7 = D(r7, s0_0_0, 0x12C31814, 0xD12203FB, 0xFD18F515, 0x11EF09FF);
	r0 = D(r0, s0_0_1, 0xFE0206F5, 0xFFE40A0B, 0x05F1EEF9, 0x0CFDF700);
	r1 = D(r1, s0_0_1, 0x050403FE, 0xFE090807, 0x12D9041D, 0x0AF10110);
	r2 = D(r2, s0_0_1, 0x06031704, 0x0810120D, 0xF700FF0D, 0x0C010EFA);
	r3 = D(r3, s0_0_1, 0x0FEF1806, 0x0A17FDF1, 0xFC0D2DFA, 0x0AF8F50F);
	r4 = D(r4, s0_0_1, 0xF41102FE, 0xEE161D07, 0xF205F9F6, 0x0AF504FE);
	r5 = D(r5, s0_0_1, 0x17050718, 0x11FEF900, 0x160006FD, 0xF719F615);
	r6 = D(r6, s0_0_1, 0x06030FFA, 0x25ED1EF9, 0x1403DFDC, 0x11170519);
	r7 = D(r7, s0_0_1, 0xF3F40D12, 0xDEEC412D, 0xE20DFBF6, 0xF1F2FD05);
	r0 = D(r0, s0_0_2, 0x1302FE05, 0x09F01005, 0xF20C3307, 0x070D0B00);
	r1 = D(r1, s0_0_2, 0xFD040204, 0xFC0605FF, 0x081CFEF1, 0x07FC09EE);
	r2 = D(r2, s0_0_2, 0x08FE04F4, 0x0301FBFA, 0x09F900FF, 0x0EFE01F9);
	r3 = D(r3, s0_0_2, 0x070306F8, 0x050CEFFE, 0x19F8F5F6, 0xF101070C);
	r4 = D(r4, s0_0_2, 0x08ED07F7, 0xFCF4FFFE, 0x00FBFD01, 0xFB00FEFD);
	r5 = D(r5, s0_0_2, 0xFEF00704, 0x05FBFEFC, 0xFEF6EF19, 0x0D09FA01);
	r6 = D(r6, s0_0_2, 0x05FAFAFA, 0xFDE1DB1D, 0x0CFBEB06, 0xDF09EBFD);
	r7 = D(r7, s0_0_2, 0xF81D0FEC, 0xEF1BF506, 0x0806D4F5, 0xFE02F602);
	r0 = D(r0, s0_1_0, 0x03C30A04, 0x13DE15F3, 0xDCCB18D9, 0x090B0801);
	r1 = D(r1, s0_1_0, 0x00FEFE01, 0xFE0AF20D, 0xF01BE6F0, 0x08F30CF8);
	r2 = D(r2, s0_1_0, 0x020F0509, 0x11111718, 0x27F50421, 0x0AF6111D);
	r3 = D(r3, s0_1_0, 0xE6FFFD05, 0x0100F9EE, 0xFEEAFC15, 0xFA12FFF6);
	r4 = D(r4, s0_1_0, 0x0303FE00, 0xF212021D, 0xE9F9FEF8, 0xFEF8FD02);
	r5 = D(r5, s0_1_0, 0x0B10060C, 0x090C03F5, 0xE7E3FEF3, 0x19D819EE);
	r6 = D(r6, s0_1_0, 0xF9080B16, 0xD5E518F7, 0x03D50200, 0xC3092AEA);
	r7 = D(r7, s0_1_0, 0xEBF7060F, 0xF2E8B5DB, 0xFC00ED13, 0xF9FCFCFD);
	r0 = D(r0, s0_1_1, 0x13EAF9F3, 0xE1F5C503, 0xF4F29DE3, 0x120404F6);
	r1 = D(r1, s0_1_1, 0xFB08FBFF, 0xF316FC02, 0xFCEE21C8, 0xE3F311EA);
	r2 = D(r2, s0_1_1, 0xF9220911, 0x1703F8F9, 0x103F00EB, 0xF7E009DE);
	r3 = D(r3, s0_1_1, 0xFDE8EFFA, 0xFD07F610, 0x0FFBFCEE, 0x150DF313);
	r4 = D(r4, s0_1_1, 0x13170526, 0x14130804, 0x04FDF801, 0xFDFAFE08);
	r5 = D(r5, s0_1_1, 0xFBBA0F10, 0x09EEF6F3, 0xDAB10114, 0xEEEC1723);
	r6 = D(r6, s0_1_1, 0xFFE7F7FC, 0x1A02030D, 0xFBF4FD17, 0x1EBEF11E);
	r7 = D(r7, s0_1_1, 0x1A30EDDC, 0x02EE2F18, 0x02321217, 0x0D41040D);
	r0 = D(r0, s0_1_2, 0xFF07F8F5, 0xF226FFF2, 0xED18EEFD, 0xFDFE0403);
	r1 = D(r1, s0_1_2, 0xFFFEFF05, 0x05030505, 0xC502F8FB, 0xFB021403);
	r2 = D(r2, s0_1_2, 0xFDFAFEFC, 0xEC05F207, 0x06E8E5FF, 0x0EECFA0F);
	r3 = D(r3, s0_1_2, 0xFA0604FA, 0xFAF502F8, 0xF20F06FC, 0xFC090501);
	r4 = D(r4, s0_1_2, 0xFEFAEEFD, 0x0DE6F8F3, 0xFF0CFB08, 0xFCF8FB05);
	r5 = D(r5, s0_1_2, 0xEF31FF02, 0xF42210EF, 0x120FF700, 0xFA0C0CEB);
	r6 = D(r6, s0_1_2, 0x030206FD, 0x03E725F1, 0x07FB040A, 0x0AF2FCEF);
	r7 = D(r7, s0_1_2, 0x1705FAFC, 0xFDE7EB2B, 0x36F717F9, 0x05EA01F5);
	r0 = D(r0, s0_2_0, 0xF5FEF104, 0xEFF803DF, 0xE214F7A1, 0xFCFFFF06);
	r1 = D(r1, s0_2_0, 0x02FE0001, 0x01FEFFF8, 0x12FFFE0D, 0x040DF3FF);
	r2 = D(r2, s0_2_0, 0xFEFF06EC, 0x0711ECF3, 0x16FB0CF9, 0x01EDFDE5);
	r3 = D(r3, s0_2_0, 0xFFFFF003, 0xFF03EEEB, 0xF709E7FA, 0xFBFE0F0A);
	r4 = D(r4, s0_2_0, 0xFF010203, 0x00FAF710, 0x0B17F8EC, 0xFA02FEFF);
	r5 = D(r5, s0_2_0, 0x0DFAEFF1, 0xF703F5EF, 0x15F6CEF5, 0xF80103F1);
	r6 = D(r6, s0_2_0, 0x01FFFF00, 0x0B14FE25, 0xF803F508, 0x020F0FFC);
	r7 = D(r7, s0_2_0, 0x17DF12EB, 0xE51EDDE4, 0x10F206EE, 0x05080603);
	r0 = D(r0, s0_2_1, 0xF60608E6, 0xEE14F70E, 0xDE130300, 0x100BFA00);
	r1 = D(r1, s0_2_1, 0x0103010D, 0x020A0608, 0x00F90405, 0xFA11FCF7);
	r2 = D(r2, s0_2_1, 0xFAFBEC0A, 0xE0E4F1BE, 0xEA07D2EB, 0xFAEEFF0B);
	r3 = D(r3, s0_2_1, 0x14F11802, 0x000804F7, 0x06F80BF3, 0x0AF40709);
	r4 = D(r4, s0_2_1, 0x0107F8F9, 0x060000F9, 0x10ED030E, 0x0BF2FF11);
	r5 = D(r5, s0_2_1, 0xF3F2FCFF, 0x00F30301, 0xCDAEFD9C, 0xF90AFBF1);
	r6 = D(r6, s0_2_1, 0x0302FD04, 0xFCFEE1EC, 0x000313FF, 0xC0EEF804);
	r7 = D(r7, s0_2_1, 0xE3DBEFFC, 0x2117D8E5, 0x0600FDD8, 0xF90107F6);
	r0 = D(r0, s0_2_2, 0x090107FA, 0x060904FC, 0x010AF70A, 0xFE03F9FA);
	r1 = D(r1, s0_2_2, 0xFA010006, 0xFFFC0003, 0x0713FDF4, 0x030506F7);
	r2 = D(r2, s0_2_2, 0xFCF00104, 0xF2F911F7, 0xFAF10F23, 0x0300FAFE);
	r3 = D(r3, s0_2_2, 0xFD08FBF1, 0xF9FBF9F4, 0xFC020FF5, 0xF4F9070D);
	r4 = D(r4, s0_2_2, 0x08F7FE02, 0xFFFC0FE8, 0x01F4F6FD, 0xFDF90106);
	r5 = D(r5, s0_2_2, 0x17F7FFF6, 0xFD00F7F0, 0x00F429DE, 0x031CF110);
	r6 = D(r6, s0_2_2, 0x05020204, 0xFE1909D3, 0x030DFAEA, 0xF700062B);
	r7 = D(r7, s0_2_2, 0x0ED90B06, 0x060300FC, 0x0FE81315, 0xF90300F9);
	r0 = D(r0, s1_0_0, 0x07F91503, 0xEC06F4F1, 0xFE20F1D7, 0x07020DEE);
	r1 = D(r1, s1_0_0, 0x00FF0203, 0x02F90300, 0x01FDFF07, 0xF40CF9F5);
	r2 = D(r2, s1_0_0, 0x06FE01FD, 0x0701FED8, 0xD5F601F8, 0xF905F4FE);
	r3 = D(r3, s1_0_0, 0xF7F7F8F6, 0xF7FF0105, 0x18E60A04, 0x0B0EF6F2);
	r4 = D(r4, s1_0_0, 0xF006FF06, 0xEDEB0210, 0x01F70504, 0x05FF0001);
	r5 = D(r5, s1_0_0, 0xF5FFFF08, 0x09FEFAF4, 0x090308FA, 0x100705F2);
	r6 = D(r6, s1_0_0, 0x0500FEFF, 0x000810F2, 0x04FE020E, 0x330903F1);
	r7 = D(r7, s1_0_0, 0xEB1206FE, 0x19DD0DD9, 0xF9FAF408, 0xFBFFFC03);
	r0 = D(r0, s1_0_1, 0xFF1AF0F8, 0xF0FDFAD0, 0xE5F009DF, 0xF2F0040C);
	r1 = D(r1, s1_0_1, 0xFEFC0300, 0xFDF205F9, 0x0609ED03, 0x0B0CFFF7);
	r2 = D(r2, s1_0_1, 0x0C04070E, 0x1111F407, 0x0616EAFA, 0xFD020518);
	r3 = D(r3, s1_0_1, 0xF008F4ED, 0xF203F4FA, 0x10100CFC, 0xF70A0AFF);
	r4 = D(r4, s1_0_1, 0xFD09F0FF, 0xFEFC1801, 0xFC01F007, 0x0FF70300);
	r5 = D(r5, s1_0_1, 0x0EF8FCF8, 0x2111FDF3, 0x1C0306FB, 0x1BFA1AEC);
	r6 = D(r6, s1_0_1, 0xF10806F5, 0x0D03F1FD, 0xF007F8FB, 0xE9F4EC04);
	r7 = D(r7, s1_0_1, 0x110400FA, 0x3D08F1E4, 0x0AFD0C02, 0x0C04F905);
	r0 = D(r0, s1_0_2, 0xF001F7F4, 0x1501F3F3, 0xEEE6FC0E, 0x01FA1C03);
	r1 = D(r1, s1_0_2, 0xFA00FDFD, 0x0003F9F7, 0x1109F300, 0x03FC0209);
	r2 = D(r2, s1_0_2, 0x04FB0507, 0x08F608F8, 0x1BFCF2FE, 0x21FCF30A);
	r3 = D(r3, s1_0_2, 0xFF08FEF0, 0x0709FCF7, 0x2D0B10E7, 0xFD0611FF);
	r4 = D(r4, s1_0_2, 0xFFF9FC09, 0x1917F2FD, 0x0DF10407, 0xEEFA00FC);
	r5 = D(r5, s1_0_2, 0x1E0A05F8, 0xFBFC0100, 0xBFFB0717, 0x19FDF700);
	r6 = D(r6, s1_0_2, 0xFEFE0205, 0x4E18FDEB, 0xF90A0803, 0x8103F212);
	r7 = D(r7, s1_0_2, 0x3DF1F71C, 0x25EE25C7, 0x25FB0B0A, 0xFBF40A09);
	r0 = D(r0, s1_1_0, 0xF205F90B, 0x0AF40629, 0xC3E30C35, 0xFAFE07F5);
	r1 = D(r1, s1_1_0, 0x0102FF00, 0xF408F603, 0xF7EA230A, 0xF800FC0D);
	r2 = D(r2, s1_1_0, 0xF2FFFF01, 0x1925F5E7, 0x1D14F9C3, 0x06FFFA14);
	r3 = D(r3, s1_1_0, 0xE0F8FD06, 0xFAFEF602, 0x26CF08F1, 0x0803FC0A);
	r4 = D(r4, s1_1_0, 0x0AFA0A00, 0xFD100316, 0xF7EB0209, 0xFDF7FF04);
	r5 = D(r5, s1_1_0, 0x0704F9F9, 0xE412F1F4, 0x1019FEFC, 0x18020606);
	r6 = D(r6, s1_1_0, 0xF50902FE, 0x0505E10D, 0xF60DFAF5, 0x12F0F9E0);
	r7 = D(r7, s1_1_0, 0xE017EA12, 0xCDEC28FA, 0xDBE8D30B, 0x12FFF4FD);
	r0 = D(r0, s1_1_1, 0xFE0C05F1, 0x18FA01AD, 0x2D0812E2, 0xFFFA7011);
	r1 = D(r1, s1_1_1, 0x02060203, 0xF416FD0F, 0x1F37FB06, 0x2426F0FE);
	r2 = D(r2, s1_1_1, 0xF9D3FB31, 0xFEC6E13A, 0x0FD70F56, 0xCE08061F);
	r3 = D(r3, s1_1_1, 0x12D2FDF6, 0xFCDEE908, 0xFBF27FF7, 0x17F204EF);
	r4 = D(r4, s1_1_1, 0x0304FC03, 0x3D1DDBEF, 0x0416FB1F, 0x0D02F8F3);
	r5 = D(r5, s1_1_1, 0x0603F806, 0x09F40814, 0x14E1C753, 0x12DFC9F5);
	r6 = D(r6, s1_1_1, 0x082B12FD, 0xF30BE306, 0x0BE6FAFB, 0xFC0D1106);
	r7 = D(r7, s1_1_1, 0x21FDFCCC, 0xE4F78128, 0xB805EBF2, 0x061AF8F5);
	r0 = D(r0, s1_1_2, 0xCFFBEE01, 0x1A0FF3ED, 0x3CF50906, 0x3200FFD9);
	r1 = D(r1, s1_1_2, 0xF200080A, 0x06000006, 0xDDFCFCDB, 0x170B08EE);
	r2 = D(r2, s1_1_2, 0x07F7EFFC, 0x101E13C9, 0x0DFE06EA, 0x2508F918);
	r3 = D(r3, s1_1_2, 0x15FB0AFD, 0x1CD81811, 0x0BEBFB0F, 0x1FF80302);
	r4 = D(r4, s1_1_2, 0xF60804F3, 0x0901ED07, 0x37F4F90F, 0xE8020C01);
	r5 = D(r5, s1_1_2, 0xEE0711EC, 0x140001FD, 0xBD080020, 0xFF0F17F2);
	r6 = D(r6, s1_1_2, 0xF50AFEFC, 0x9018FBEC, 0xE604FF13, 0xE2041F05);
	r7 = D(r7, s1_1_2, 0xE221E2E5, 0xDF3AF4E8, 0x1EF215DE, 0xF805FDFF);
	r0 = D(r0, s1_2_0, 0x0CF8DF0D, 0x1509F3E5, 0x1DC30632, 0xEF040BFE);
	r1 = D(r1, s1_2_0, 0xFBFFFE00, 0xFB03FFFD, 0x0202E1FD, 0x07FC0812);
	r2 = D(r2, s1_2_0, 0xF0FBFAF2, 0xE112FBEF, 0x1E0201E0, 0x091507F8);
	r3 = D(r3, s1_2_0, 0x06F40CFA, 0x0DFD0AF8, 0x000809FA, 0x1DFD0304);
	r4 = D(r4, s1_2_0, 0x0504F808, 0x06F2F9FF, 0xF9F21100, 0x0203FBFE);
	r5 = D(r5, s1_2_0, 0xFE04E606, 0x0200F7FD, 0xF2140914, 0x04140001);
	r6 = D(r6, s1_2_0, 0x08FF0705, 0x1FCFF828, 0x09060A12, 0x1310E302);
	r7 = D(r7, s1_2_0, 0x2703D906, 0x101ED1B3, 0x061DFF00, 0x0EFE0905);
	r0 = D(r0, s1_2_1, 0xF3F003FB, 0x02090EC1, 0xFC22ADD2, 0x07F32F03);
	r1 = D(r1, s1_2_1, 0xF901F705, 0x0302F30A, 0xED05FBF1, 0xFFF9EF00);
	r2 = D(r2, s1_2_1, 0x1BF3E70D, 0x051116EE, 0x1DF2DADE, 0xBF04131B);
	r3 = D(r3, s1_2_1, 0x01C62905, 0xDF07F000, 0x250A1712, 0xF110E305);
	r4 = D(r4, s1_2_1, 0x06FC03FB, 0x9AF00702, 0x09F0FB12, 0x0405F202);
	r5 = D(r5, s1_2_1, 0x04F60F17, 0x02000CDB, 0x27F9D9FE, 0xF0FC01E1);
	r6 = D(r6, s1_2_1, 0x050303F7, 0x04E9E508, 0x0AF145BF, 0xC7FFCF3D);
	r7 = D(r7, s1_2_1, 0xEE1FE8D9, 0x36CF81F6, 0x0BFDCDF3, 0x011512F6);
	r0 = D(r0, s1_2_2, 0xE409FDF2, 0x3EE9FE28, 0x3BEEFAF7, 0xC4F8F900);
	r1 = D(r1, s1_2_2, 0xFA00FF0A, 0x10FF010A, 0x09EE20EA, 0x1100EDED);
	r2 = D(r2, s1_2_2, 0xF90E12FF, 0x1AE22105, 0x1F1627CE, 0x420AFB00);
	r3 = D(r3, s1_2_2, 0xFEEBEEF9, 0x32FD0E15, 0x14E50BFE, 0x0CF8010B);
	r4 = D(r4, s1_2_2, 0xF805FA06, 0xF50F03DB, 0x1504FEF7, 0xFB040804);
	r5 = D(r5, s1_2_2, 0xD5D80923, 0xF4E7D8F2, 0x7FD381A8, 0xE6201206);
	r6 = D(r6, s1_2_2, 0xF2FEF503, 0x36180500, 0x09FF031B, 0xEC19DB14);
	r7 = D(r7, s1_2_2, 0x39050BF6, 0x0638F5C4, 0xFF1DF3ED, 0xFA0F0509);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.754e-02, -2.078e-02, -7.474e-03, -4.302e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(3.995e-03, 4.409e-03, -6.677e-03, 1.214e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.821e-03, -1.213e-02, 2.640e-03, -1.835e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.003e-02, 1.077e-02, -5.296e-03, -1.131e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-9.635e-03, 7.297e-03, -2.003e-02, 1.140e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(5.566e-03, 3.237e-03, -2.528e-03, 2.442e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.309e-02, -9.220e-03, 8.670e-03, -4.086e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.258e-02, 1.082e-02, 2.661e-03, 6.414e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x010208FB, 0xF8FF01FC, 0xEA0300F9, 0x03F9F800);
	r1 = D(r1, s0_0_0, 0x02FFFE03, 0xFAFBFD00, 0x0AF6F703, 0x0F01FA03);
	r2 = D(r2, s0_0_0, 0x03FFFB04, 0xF5F604FF, 0x0006F205, 0xF5E90D04);
	r3 = D(r3, s0_0_0, 0xFD0D02F7, 0xDFF7FC09, 0x011F00EC, 0xE8080C0B);
	r4 = D(r4, s0_0_0, 0x07EB1603, 0xF7DEF913, 0x061513F2, 0x10F0F40B);
	r5 = D(r5, s0_0_0, 0x0BFE0F04, 0xF4FC08E8, 0x05F41108, 0x030B07E3);
	r6 = D(r6, s0_0_0, 0x00010D0A, 0x080EF1FD, 0xFFFA04FE, 0x0007E4FD);
	r7 = D(r7, s0_0_0, 0xF900FAF8, 0x14F8EF0B, 0x0208FD08, 0x03030BF8);
	r0 = D(r0, s0_0_1, 0xFAF4FFF4, 0xF7020DF3, 0xEFF3E6F4, 0xFAFE03FE);
	r1 = D(r1, s0_0_1, 0x000405FC, 0x1EC8DB0B, 0x0BF5F40E, 0xF41A00FC);
	r2 = D(r2, s0_0_1, 0x0C2C4213, 0xEB09EEED, 0x0F01100B, 0x020C1014);
	r3 = D(r3, s0_0_1, 0x0704F409, 0xFDC0F9F4, 0xEFE0EF28, 0x06E8EF1D);
	r4 = D(r4, s0_0_1, 0x1933F404, 0xF8ED05F3, 0x1519FF0B, 0x0AD9F20D);
	r5 = D(r5, s0_0_1, 0xFF092200, 0x09081ECF, 0x002B16F7, 0xF7DD0B09);
	r6 = D(r6, s0_0_1, 0x08EF18FC, 0x03FD08FE, 0xFE1106F6, 0x08FE07F6);
	r7 = D(r7, s0_0_1, 0x05F4F9F9, 0xFC03D8FE, 0x05F9FE11, 0xFAF8C3FF);
	r0 = D(r0, s0_0_2, 0x0004FAFE, 0x070B12F3, 0xF70A0FF1, 0x0BFFFAFF);
	r1 = D(r1, s0_0_2, 0xFEFE0600, 0xFCF8EC06, 0x0DFAFCFD, 0xF5F70001);
	r2 = D(r2, s0_0_2, 0x0D4707F4, 0xF4ED05F4, 0x19CA210A, 0xF810FFEA);
	r3 = D(r3, s0_0_2, 0x030CF803, 0xFACE05F7, 0x03180DEB, 0xFFEE0702);
	r4 = D(r4, s0_0_2, 0x05FB1202, 0xF497E219, 0xFAEB11F9, 0x09EB000E);
	r5 = D(r5, s0_0_2, 0x000617FF, 0xFAFE17EE, 0xECEE0FFB, 0xF01903E7);
	r6 = D(r6, s0_0_2, 0x0AED05FB, 0x07F2F9F9, 0xFBFEFF08, 0x02FAF3E8);
	r7 = D(r7, s0_0_2, 0x010518F9, 0x0EE9EE05, 0x020402FA, 0xF908F0FA);
	r0 = D(r0, s0_1_0, 0xF2F00707, 0x0D26F9F2, 0xFDF009EE, 0xFB03F405);
	r1 = D(r1, s0_1_0, 0x02F80107, 0x05E91AF3, 0xE602ED02, 0x0EFB010F);
	r2 = D(r2, s0_1_0, 0x0428FFF6, 0x041501FB, 0x04190AE6, 0x0AFD04F6);
	r3 = D(r3, s0_1_0, 0x040801FA, 0xF5FA0FF8, 0x0415F4EE, 0x19071AF3);
	r4 = D(r4, s0_1_0, 0x050003F7, 0x1BDD0BEE, 0xFBDD0606, 0xEFFCF20B);
	r5 = D(r5, s0_1_0, 0xED11EB11, 0x3315FC10, 0x0E1A210E, 0x0227FCF7);
	r6 = D(r6, s0_1_0, 0x101CF6F1, 0x0903FD05, 0x0D000304, 0x08FAF5F9);
	r7 = D(r7, s0_1_0, 0xEBF6070F, 0xF30BEDFD, 0xFCF005FF, 0xFB0BF8F1);
	r0 = D(r0, s0_1_1, 0x19EDF801, 0x00FC020E, 0x262D041D, 0xF4FAF0FE);
	r1 = D(r1, s0_1_1, 0xFA0F0102, 0x14EA251C, 0xE4FD09FC, 0x0A000E15);
	r2 = D(r2, s0_1_1, 0xE3D7DC1F, 0x0FEAD3E8, 0xE3E421C2, 0x0DF1EEFC);
	r3 = D(r3, s0_1_1, 0xFD010309, 0x2308270C, 0xE1E1081A, 0x1119EE11);
	r4 = D(r4, s0_1_1, 0xEE0CF00C, 0x020E2805, 0xF61D112E, 0xDDC6E9F9);
	r5 = D(r5, s0_1_1, 0x129F13E9, 0x20F8C608, 0x1205340C, 0xFCE829F7);
	r6 = D(r6, s0_1_1, 0xEEFA07FF, 0x040CFEF6, 0xF70202FD, 0xEB17F4FB);
	r7 = D(r7, s0_1_1, 0xFE00F601, 0xD120E205, 0x0C2D0E0C, 0x1815F409);
	r0 = D(r0, s0_1_2, 0xFFF4FBF5, 0xF5DE0506, 0xFBF425FA, 0xFC05F7FB);
	r1 = D(r1, s0_1_2, 0x0307FEFF, 0xE3EE0FF3, 0x0019F3FD, 0xEB2C0DFA);
	r2 = D(r2, s0_1_2, 0x0B0D11DE, 0x1E1305E9, 0xE1000AF6, 0xE800FE04);
	r3 = D(r3, s0_1_2, 0x04FC01FF, 0x14EF25E7, 0xFAF001FF, 0x05F41B01);
	r4 = D(r4, s0_1_2, 0xFDEAF514, 0xF618010A, 0xE1F90019, 0xFFF21615);
	r5 = D(r5, s0_1_2, 0xEF0218F7, 0x0518F506, 0xE52E2EF5, 0xD70A06EE);
	r6 = D(r6, s0_1_2, 0xFFD1F9F0, 0xFC08FDF9, 0x03FDFBFE, 0x0B04EC0A);
	r7 = D(r7, s0_1_2, 0xE7F70005, 0xF7EDF70C, 0x0A07FEF9, 0x02F700FF);
	r0 = D(r0, s0_2_0, 0x0306EC0E, 0x00F7F300, 0x0D1CEFEC, 0xF9F803F7);
	r1 = D(r1, s0_2_0, 0xFE010000, 0x090118FF, 0xF101E70A, 0x10ED0B0D);
	r2 = D(r2, s0_2_0, 0xF720F405, 0xF707FA08, 0x031905F5, 0xF2F9ECFC);
	r3 = D(r3, s0_2_0, 0x0300FE00, 0x0DFF06E6, 0x09E00603, 0x0D0E1BEA);
	r4 = D(r4, s0_2_0, 0x0935E509, 0xFBE31301, 0x0C0EFE02, 0xE2FAFF10);
	r5 = D(r5, s0_2_0, 0xEDF80E15, 0xDDE622F9, 0x010E0015, 0x040BE5F6);
	r6 = D(r6, s0_2_0, 0xE8FDFBEF, 0x00010900, 0x0105F604, 0x0906F205);
	r7 = D(r7, s0_2_0, 0xF20607FE, 0xFEF40A06, 0x060307FB, 0x1915F4F5);
	r0 = D(r0, s0_2_1, 0x22090103, 0x17000204, 0xF1EDE522, 0x12FEE819);
	r1 = D(r1, s0_2_1, 0xF6FF0404, 0xE9F506F5, 0xE412FE04, 0xEF0410FB);
	r2 = D(r2, s0_2_1, 0x0A201DF8, 0x0FF10DEF, 0xED071EFB, 0x1BF6F80B);
	r3 = D(r3, s0_2_1, 0xFC080001, 0xFCF9F6F9, 0x050BECFD, 0x0F330CFA);
	r4 = D(r4, s0_2_1, 0x1AEF091B, 0xE3381ECC, 0xF10D1702, 0x10DB0C0B);
	r5 = D(r5, s0_2_1, 0x30001AE9, 0xE316D6F5, 0x160E0EFB, 0xE9E4FC1E);
	r6 = D(r6, s0_2_1, 0xE9B21BFC, 0x070502FE, 0xF8FEFB03, 0x12EEFFF9);
	r7 = D(r7, s0_2_1, 0xFFE10AF8, 0xE5F4F1FC, 0xFC070C0C, 0x04EBF703);
	r0 = D(r0, s0_2_2, 0xEAFC22FB, 0x0EF30F02, 0x2AFB0A01, 0x04FD08FE);
	r1 = D(r1, s0_2_2, 0x00FF0501, 0x02140BFD, 0x00F7FB02, 0xF2FB05F7);
	r2 = D(r2, s0_2_2, 0xF9100CFF, 0x07F107F3, 0x18FAF807, 0xF8FB06FC);
	r3 = D(r3, s0_2_2, 0xFD0202F7, 0x07F5EEFD, 0xF9FAFDFD, 0x0915F0F0);
	r4 = D(r4, s0_2_2, 0xF90801F5, 0x3ACA11DF, 0xEF1C12F0, 0x06FD01F9);
	r5 = D(r5, s0_2_2, 0xEC100312, 0xEFEA1EFE, 0xF1150BF8, 0x0712EA15);
	r6 = D(r6, s0_2_2, 0xFC0512F2, 0x010CFDFE, 0xFFFB0400, 0xF70102FD);
	r7 = D(r7, s0_2_2, 0xF2020600, 0xF6000B09, 0xFF0601F4, 0x00F3F502);
	r0 = D(r0, s1_0_0, 0x01010BF0, 0x05000002, 0xFFD80EF4, 0x04FFFCF5);
	r1 = D(r1, s1_0_0, 0xFFFCFA02, 0xFEEA18EE, 0x06FAFE0E, 0xFDFEFA03);
	r2 = D(r2, s1_0_0, 0x15FD09FD, 0x09EEF80C, 0x040A0CF4, 0x03FA08FE);
	r3 = D(r3, s1_0_0, 0xFB0606EA, 0x07DE0AD2, 0xE20E00E8, 0xE2EB05E1);
	r4 = D(r4, s1_0_0, 0xF30AE80A, 0xF90519FB, 0xF2F80804, 0xF300FFFB);
	r5 = D(r5, s1_0_0, 0xF70D1D08, 0xF8112311, 0xF8F4FAFE, 0x0A0BF70D);
	r6 = D(r6, s1_0_0, 0x000212FF, 0x0411FC27, 0x01FEF413, 0xF70EF00C);
	r7 = D(r7, s1_0_0, 0x0AF80401, 0x01F1120B, 0xF90108FF, 0x08F912D5);
	r0 = D(r0, s1_0_1, 0x0406F818, 0xFC0C030A, 0x28EB0515, 0xFBF6F408);
	r1 = D(r1, s1_0_1, 0x04FD0A08, 0x02FBE200, 0x0E0B0108, 0x06DFFFEA);
	r2 = D(r2, s1_0_1, 0xF30C07EE, 0x12F0FC05, 0x200AFE03, 0x0C0D0EFB);
	r3 = D(r3, s1_0_1, 0xF9030CFC, 0x0DAF28D7, 0xFAED0809, 0xF407FBE6);
	r4 = D(r4, s1_0_1, 0x0B0513F1, 0xF20C0AE9, 0x08F218F5, 0x02080DE8);
	r5 = D(r5, s1_0_1, 0xFB03F908, 0xFC200A09, 0x07E9F219, 0x01E90528);
	r6 = D(r6, s1_0_1, 0xFD010007, 0x0208E80C, 0x0400F608, 0x1112EAFE);
	r7 = D(r7, s1_0_1, 0x0002010A, 0xFBEA0CE3, 0xFBFCFFFB, 0xF50EEEE5);
	r0 = D(r0, s1_0_2, 0x03F70203, 0xEC080CFC, 0xF8FEFC05, 0x060005FE);
	r1 = D(r1, s1_0_2, 0x01FEFE01, 0x05131504, 0xFBFFED08, 0x10E4060B);
	r2 = D(r2, s1_0_2, 0x001E0009, 0x06020401, 0x140D010E, 0xF30303FE);
	r3 = D(r3, s1_0_2, 0x00FDFA01, 0x19EF050F, 0x01FCFB08, 0x0809F60B);
	r4 = D(r4, s1_0_2, 0x10F8F70B, 0x17F40CE2, 0x15050104, 0x02F60206);
	r5 = D(r5, s1_0_2, 0xF0F40209, 0xE31C0802, 0xFAF6F800, 0x0E2EFD11);
	r6 = D(r6, s1_0_2, 0x000A110C, 0x0108FDFC, 0x04FCF906, 0xFF0AFEEF);
	r7 = D(r7, s1_0_2, 0xFA01F905, 0x12F51302, 0xF702F8FD, 0xF80A09F9);
	r0 = D(r0, s1_1_0, 0xF4F80BE5, 0xEFF3FDF9, 0xCAE410EC, 0xFAE70223);
	r1 = D(r1, s1_1_0, 0x0004F543, 0x29ED02FB, 0x0A08F110, 0x0603030A);
	r2 = D(r2, s1_1_0, 0xF0EE0A1D, 0xF4EB09FE, 0xE513E910, 0x0AF9050E);
	r3 = D(r3, s1_1_0, 0x0400F60B, 0x0306FC1F, 0x07FEFE03, 0x000A0B17);
	r4 = D(r4, s1_1_0, 0x10FDFEE5, 0x12E60A13, 0x1EF30604, 0x0C0A130E);
	r5 = D(r5, s1_1_0, 0x0AAA01C4, 0x112AF2E0, 0x1A16FEBE, 0x0408E9D7);
	r6 = D(r6, s1_1_0, 0x0AFB08EC, 0xFD0BF7DE, 0xFB0712DC, 0xFD04F60E);
	r7 = D(r7, s1_1_0, 0xFC0AEDF5, 0x0B09E3E0, 0x0C0A06EC, 0x1702ED04);
	r0 = D(r0, s1_1_1, 0x1DFE1A1E, 0x190C1B27, 0xF3F724ED, 0x17FFF8E8);
	r1 = D(r1, s1_1_1, 0x01060FF2, 0xFBF1EFFE, 0xF30206FD, 0x1CF1FBED);
	r2 = D(r2, s1_1_1, 0xE5FA0B07, 0xEAE513FE, 0x040FD8DC, 0x0508E008);
	r3 = D(r3, s1_1_1, 0x101021FC, 0x121AFE01, 0x270DF7EC, 0x2B070BE8);
	r4 = D(r4, s1_1_1, 0xFAF81911, 0x2BED1407, 0xFEE3E6FB, 0x0110FAEE);
	r5 = D(r5, s1_1_1, 0x0BF014F1, 0x1C0E00F3, 0xDA00D5F7, 0xDDF6F4E7);
	r6 = D(r6, s1_1_1, 0x13E3F5FE, 0xF2FAFF13, 0x0114032C, 0x0BF6102A);
	r7 = D(r7, s1_1_1, 0xF706FC40, 0xDEF11A25, 0x0605FB42, 0x02301C0E);
	r0 = D(r0, s1_1_2, 0x06FFFFFB, 0xF4F7DF12, 0xF2F9F90B, 0x03040006);
	r1 = D(r1, s1_1_2, 0x01010408, 0xFDF8F6E5, 0xF109F6EE, 0xE8F80E06);
	r2 = D(r2, s1_1_2, 0x010015FD, 0xF9000303, 0xF91821EE, 0x090A0902);
	r3 = D(r3, s1_1_2, 0xFBFC15FF, 0x0E080EF4, 0xEEF514F5, 0xEDF01DF8);
	r4 = D(r4, s1_1_2, 0x0B0B0013, 0x0DEDF915, 0xFA1006FC, 0xF4F71709);
	r5 = D(r5, s1_1_2, 0xFDFDF805, 0x190F04FB, 0xE61B09FC, 0xFEF7F7EE);
	r6 = D(r6, s1_1_2, 0x03FAF212, 0x0DFC0805, 0x0100FD01, 0x0209020E);
	r7 = D(r7, s1_1_2, 0x0007F009, 0x0A01EB04, 0x02080810, 0x02080010);
	r0 = D(r0, s1_2_0, 0xFDE30423, 0x0BFA0312, 0x0009F212, 0xFF0802FC);
	r1 = D(r1, s1_2_0, 0xFF02FC02, 0xF4F8EC01, 0x0DF0F9FB, 0xEF0AF202);
	r2 = D(r2, s1_2_0, 0x01F108EE, 0xFEF209F9, 0x1001E5E3, 0xEA1DF4FD);
	r3 = D(r3, s1_2_0, 0x00FF01FD, 0x181BE8EC, 0xEE0F0DFC, 0xED10FE04);
	r4 = D(r4, s1_2_0, 0x19F9EAE4, 0xEAFFF1F4, 0xEF0EEBFD, 0xF00407F7);
	r5 = D(r5, s1_2_0, 0xECCF19F8, 0xDDE60DF5, 0xF7EEFE06, 0x19E31EFC);
	r6 = D(r6, s1_2_0, 0x08EE03F4, 0xFEFC0004, 0xFE030304, 0x04FD00FA);
	r7 = D(r7, s1_2_0, 0xFE0708FB, 0xF9EA180A, 0xFAFEF40C, 0x10F7FEF5);
	r0 = D(r0, s1_2_1, 0x0FECFC11, 0x01FCE5E8, 0x1ED7F9F3, 0x0A040103);
	r1 = D(r1, s1_2_1, 0x01F90503, 0xF81215E9, 0xEFFA0306, 0xEA0BFEF6);
	r2 = D(r2, s1_2_1, 0xD5F0F107, 0x05FE01EF, 0x11FBFCF8, 0xF5F8FBEF);
	r3 = D(r3, s1_2_1, 0xFBFBFEFD, 0xEB0EFC10, 0xFE110101, 0xEE02FF02);
	r4 = D(r4, s1_2_1, 0xF32000F9, 0xFEF8DD03, 0x0203ECF7, 0xF9100FF9);
	r5 = D(r5, s1_2_1, 0xFEF3E105, 0x22EEF90C, 0xFCEFFB12, 0x0DF00CE1);
	r6 = D(r6, s1_2_1, 0x09FADCD5, 0x06FD0907, 0xFFFE0502, 0xFD2D0BF4);
	r7 = D(r7, s1_2_1, 0x0B0F0003, 0xFA05F9F7, 0x01F606FF, 0xF70F160B);
	r0 = D(r0, s1_2_2, 0x07F0F1FC, 0xF6110504, 0x0A0B0DF8, 0x0102FF07);
	r1 = D(r1, s1_2_2, 0x05FE0002, 0x1000070E, 0x01FC0107, 0x1703F2FF);
	r2 = D(r2, s1_2_2, 0x16F4E1F7, 0xF5FF0B02, 0x0CFDF4FC, 0xF9140A02);
	r3 = D(r3, s1_2_2, 0x06FEFD04, 0xF900FE01, 0x12EEFA02, 0x03F8EA0C);
	r4 = D(r4, s1_2_2, 0x011EFAF1, 0x05EDFB05, 0xF20814FB, 0x0B0702F5);
	r5 = D(r5, s1_2_2, 0x0E0204F8, 0xFAECF203, 0x0A0A0FF4, 0xFFEF0006);
	r6 = D(r6, s1_2_2, 0x1108EDF2, 0x05FEFDFD, 0x07FEFEFE, 0xF1FCFFF3);
	r7 = D(r7, s1_2_2, 0xF40313FB, 0x10F907FE, 0x0303F200, 0x020C0AF9);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDFCFF0A, 0xF6FCFBFA, 0xF4EC1CDE, 0x0A04FD03);
	r1 = D(r1, s0_0_0, 0x0000FA05, 0x12F9F0FE, 0xFEFB090B, 0xFDF4F804);
	r2 = D(r2, s0_0_0, 0xDDE71DEF, 0xFB1608F4, 0xD9FB11F8, 0xEA090F06);
	r3 = D(r3, s0_0_0, 0xFBFF07FE, 0x1902F9E5, 0x09E7F510, 0x1E0DEEFD);
	r4 = D(r4, s0_0_0, 0x040909F1, 0x282AE11F, 0x0CECFC08, 0x0B0C090B);
	r5 = D(r5, s0_0_0, 0xF0FE1402, 0xEF06EA04, 0xF1070EFA, 0x0802FAFB);
	r6 = D(r6, s0_0_0, 0xFF0401FE, 0xF6FA0500, 0xFF01FA08, 0x0C01F9FA);
	r7 = D(r7, s0_0_0, 0xE7FD0906, 0x110DFDFE, 0x0802FCFC, 0xF7001BF9);
	r0 = D(r0, s0_0_1, 0xFBFFF7F9, 0x10F6F505, 0xFDF6D402, 0x0DFDED05);
	r1 = D(r1, s0_0_1, 0xFF000100, 0x070DFDFF, 0xFFF418F3, 0x0604F906);
	r2 = D(r2, s0_0_1, 0xF901280D, 0x0F01E606, 0xCFCE3E0D, 0xE5F3F90C);
	r3 = D(r3, s0_0_1, 0x03FE02FA, 0xF5FA05EA, 0x0B0CED13, 0xF61E03F1);
	r4 = D(r4, s0_0_1, 0x09F615F2, 0x09E10A01, 0xF1ED09E3, 0x080D0A07);
	r5 = D(r5, s0_0_1, 0xFE0CFC0F, 0xFC14FCF5, 0xE12A18FF, 0xEF01090F);
	r6 = D(r6, s0_0_1, 0x0A09FBF6, 0x0E03FC04, 0xF6FD0602, 0xE1081202);
	r7 = D(r7, s0_0_1, 0x02010FF8, 0x07F20401, 0x060BF403, 0x01F204FB);
	r0 = D(r0, s0_0_2, 0x0A06F6FE, 0x0AF5ED04, 0x08D2ECF1, 0x03FCFFFE);
	r1 = D(r1, s0_0_2, 0x030101FC, 0xF41E0B05, 0xF4F814FC, 0x060CFB03);
	r2 = D(r2, s0_0_2, 0xFDEF11EE, 0x0FEBFEF8, 0xD2112306, 0xFF08ED10);
	r3 = D(r3, s0_0_2, 0x02FEFB00, 0x0309F504, 0x020BF4F2, 0xFDEA2003);
	r4 = D(r4, s0_0_2, 0xF8040912, 0xF6E60414, 0xE2143705, 0xFDF5FD0F);
	r5 = D(r5, s0_0_2, 0xFF0904F6, 0x1602E805, 0x0715150B, 0xF9F70D0E);
	r6 = D(r6, s0_0_2, 0x0AEEFC0C, 0xF8080505, 0x0201FF00, 0x0BFDF1E9);
	r7 = D(r7, s0_0_2, 0x08F10008, 0x04F3F9FD, 0x0BF9FDF8, 0x0DF40D02);
	r0 = D(r0, s0_1_0, 0x0B02FBF8, 0xF7FCF90A, 0xEEE409F4, 0x08FFFA04);
	r1 = D(r1, s0_1_0, 0x010203FF, 0xF5FD01F3, 0x060B00FE, 0x0BF5FB16);
	r2 = D(r2, s0_1_0, 0xCEE70008, 0xF9F90AF9, 0xFFF9040B, 0x02ECEA01);
	r3 = D(r3, s0_1_0, 0xFEF6FE02, 0x050DD5FB, 0x22D6D70C, 0xEF2CFB14);
	r4 = D(r4, s0_1_0, 0xF402FF03, 0x1440E623, 0xFB131406, 0x050908EF);
	r5 = D(r5, s0_1_0, 0xF80EFB05, 0xC1C71104, 0xF3252208, 0xFCEDFDFF);
	r6 = D(r6, s0_1_0, 0xFBF9F513, 0x0A04FB07, 0xF7FE0101, 0xEDEC0500);
	r7 = D(r7, s0_1_0, 0x03FEF9FC, 0xF7EB02F7, 0x04070A02, 0x0DEA00F6);
	r0 = D(r0, s0_1_1, 0x18F2F9DE, 0x0A230EE8, 0x04EFE008, 0x030909EB);
	r1 = D(r1, s0_1_1, 0xFB00FE10, 0xF5AD08FC, 0xF6EB1316, 0x0A0515DF);
	r2 = D(r2, s0_1_1, 0xF90F16F6, 0x21F804FF, 0x01F1002D, 0x0CF3F0FA);
	r3 = D(r3, s0_1_1, 0xFBFD0104, 0xC0E738F0, 0xC3381EDC, 0x9006170D);
	r4 = D(r4, s0_1_1, 0xE9FA2BF3, 0x9241F527, 0xC80BE329, 0x0DF30D03);
	r5 = D(r5, s0_1_1, 0xFB2716ED, 0xFEE11909, 0x05151E07, 0x0EFDF407);
	r6 = D(r6, s0_1_1, 0xE407E20D, 0x1205F70F, 0x00FBF71E, 0xFDEAE60B);
	r7 = D(r7, s0_1_1, 0xF501E906, 0x06C6D410, 0xEA0A10FD, 0x12F4F024);
	r0 = D(r0, s0_1_2, 0x00FAFB05, 0xF210F7F1, 0xE70B16D1, 0x0404F2FE);
	r1 = D(r1, s0_1_2, 0x01FDFA0A, 0x0EF21505, 0x14EBEBFE, 0x06F9F916);
	r2 = D(r2, s0_1_2, 0x0105FEF2, 0x2505FCD6, 0x091A00F0, 0xFC210CFD);
	r3 = D(r3, s0_1_2, 0x04010AF8, 0x13EFB7E2, 0x00DA041D, 0x01E617DA);
	r4 = D(r4, s0_1_2, 0xF7E9221A, 0xFD20E1CF, 0xFF222E09, 0xFA1013F8);
	r5 = D(r5, s0_1_2, 0x1BECDB17, 0xE3F11802, 0x0009081A, 0x0B0B0911);
	r6 = D(r6, s0_1_2, 0x0E1CEAFB, 0x0103FF01, 0xFDFDFE0F, 0xED0803FD);
	r7 = D(r7, s0_1_2, 0x0A17F6FC, 0x0616F6FA, 0xFBF7FE08, 0x06EDFCF8);
	r0 = D(r0, s0_2_0, 0x0B01F100, 0x0AFAF9F6, 0xF8EB2004, 0x0E00EB06);
	r1 = D(r1, s0_2_0, 0xFC0007FF, 0xEF241205, 0xF810F4FC, 0x07060F03);
	r2 = D(r2, s0_2_0, 0x030403CD, 0x0401F2EE, 0xFFFF02F5, 0x0210F1F8);
	r3 = D(r3, s0_2_0, 0x0201F100, 0xF617F006, 0x04DD12ED, 0x000302FC);
	r4 = D(r4, s0_2_0, 0xEAEB1AE4, 0x0109FF02, 0xE71B22F3, 0xFDFFE428);
	r5 = D(r5, s0_2_0, 0xFA10E5FC, 0x1914A7EB, 0x020E0102, 0xF708D600);
	r6 = D(r6, s0_2_0, 0x05F3E9F1, 0x05FA0103, 0xFE06FE01, 0x04FE0DF4);
	r7 = D(r7, s0_2_0, 0xFD020604, 0xF5FDFCF9, 0xF5FD0DFE, 0x09F7F7F0);
	r0 = D(r0, s0_2_1, 0x0823E8C3, 0x0616EAF9, 0xEF0EFFFD, 0x0912ECFD);
	r1 = D(r1, s0_2_1, 0x01FF0A02, 0x0003F916, 0x0300FC0A, 0x1823F806);
	r2 = D(r2, s0_2_1, 0x10F6F719, 0xF5F2F902, 0x04D6EE2A, 0xF1F8FE11);
	r3 = D(r3, s0_2_1, 0x0304F8FE, 0x10E5F00B, 0x27EDEEF7, 0x0601F717);
	r4 = D(r4, s0_2_1, 0x0EE81F0E, 0x0C0B14F2, 0x07FCFF28, 0xFFEA140D);
	r5 = D(r5, s0_2_1, 0x0B2FD5ED, 0x271BD1EC, 0xFF120408, 0x200BC5E6);
	r6 = D(r6, s0_2_1, 0x0018E415, 0xFA000001, 0x0501FF01, 0x010800E9);
	r7 = D(r7, s0_2_1, 0xFF09FB08, 0x1208EE01, 0x06F90207, 0xE61008F9);
	r0 = D(r0, s0_2_2, 0x130EF6D1, 0x0E1903CF, 0xF7020C07, 0x001308E7);
	r1 = D(r1, s0_2_2, 0x00000101, 0x03EBF801, 0x01F5F5EE, 0x1019F2F8);
	r2 = D(r2, s0_2_2, 0x0505EB0B, 0x04FA0EE3, 0xE5FC0D0B, 0x09FDF8E6);
	r3 = D(r3, s0_2_2, 0xFB010001, 0xFA00F0FE, 0xF9F8F810, 0x0BFDF608);
	r4 = D(r4, s0_2_2, 0x12E50F05, 0x11FFEAF0, 0x13EDF707, 0x02060016);
	r5 = D(r5, s0_2_2, 0xF819F8EC, 0x0017FFF6, 0xFF0701FE, 0xF70AE109);
	r6 = D(r6, s0_2_2, 0x00E2F5FB, 0x000309F9, 0x0104FC03, 0x0AF3EFFA);
	r7 = D(r7, s0_2_2, 0xFFECFE11, 0xF4F803F9, 0xFCF5010C, 0xF8F409FC);
	r0 = D(r0, s1_0_0, 0xFAFD01FF, 0x0106FCF9, 0x11050410, 0xFFFFFC02);
	r1 = D(r1, s1_0_0, 0x000200FD, 0xF90BEE0B, 0xFD00E509, 0xFFF90603);
	r2 = D(r2, s1_0_0, 0xF31AF50E, 0x01F0F804, 0x160001F7, 0xFC06F3F0);
	r3 = D(r3, s1_0_0, 0xFBFE0304, 0x1A10F1E6, 0xF9EDF9F2, 0xE4FD09F3);
	r4 = D(r4, s1_0_0, 0xFB0614DE, 0x0CE3FA0A, 0xEB161108, 0x04E8F012);
	r5 = D(r5, s1_0_0, 0xFCF5FA01, 0xF11AF4EF, 0x10FE0CF5, 0xFFFF0A02);
	r6 = D(r6, s1_0_0, 0x1005F405, 0x0302FAFB, 0x0001FDFF, 0xFA0CFB04);
	r7 = D(r7, s1_0_0, 0x0BF900FD, 0x02FAF505, 0x04020805, 0x16F7FBFE);
	r0 = D(r0, s1_0_1, 0x03060504, 0xFDF9010F, 0x0FC7010A, 0x010B04F5);
	r1 = D(r1, s1_0_1, 0xFDFF0205, 0xFB0E0EE3, 0xF900FC14, 0x0BFE08E8);
	r2 = D(r2, s1_0_1, 0x15E3E2F9, 0xF904EE02, 0x0DE6AE1E, 0xEFFC05F7);
	r3 = D(r3, s1_0_1, 0x0700FDFA, 0x4019E8B3, 0x1F07FCB7, 0xEC34EFEC);
	r4 = D(r4, s1_0_1, 0xDDEE1807, 0xD72A18D8, 0x0D2A0BCF, 0xE8F703EC);
	r5 = D(r5, s1_0_1, 0x0FF808FF, 0x23FA0111, 0xF2E6F826, 0x02F4F7F7);
	r6 = D(r6, s1_0_1, 0xF60605FA, 0x14FEF111, 0x03FF0205, 0x0E02F406);
	r7 = D(r7, s1_0_1, 0x03F7FD03, 0xFDF7FB07, 0x090502F6, 0x00ED0EF3);
	r0 = D(r0, s1_0_2, 0x0A01FB0D, 0x0D01F5FC, 0xEDC50FF4, 0xFA03FAFA);
	r1 = D(r1, s1_0_2, 0x01FFFEFC, 0xF704100F, 0x04FF1111, 0xEBFBF30A);
	r2 = D(r2, s1_0_2, 0xF90A0E05, 0xFF190108, 0x05FB1A15, 0x0FF3E30E);
	r3 = D(r3, s1_0_2, 0xFF04FC05, 0xDC10FEFF, 0xEA0C0A10, 0x01ED0319);
	r4 = D(r4, s1_0_2, 0xEEF8F805, 0xED12E3DA, 0xF4D1E323, 0x0AF204F2);
	r5 = D(r5, s1_0_2, 0xF70500FE, 0x1CEE12EC, 0xE8F207FD, 0xFFF91730);
	r6 = D(r6, s1_0_2, 0xF300ECF8, 0xFCFAFC08, 0x04F9FC00, 0x0C04F412);
	r7 = D(r7, s1_0_2, 0x0001FEFF, 0x030D0EFB, 0xFD0805F6, 0x180D09FD);
	r0 = D(r0, s1_1_0, 0xF5FF0702, 0xFEF913F5, 0xF50EFC06, 0x05F40401);
	r1 = D(r1, s1_1_0, 0x03010401, 0xF5FA0724, 0x06F90300, 0xFBFA060B);
	r2 = D(r2, s1_1_0, 0x121204ED, 0x0BFE0800, 0xFD0DF1EE, 0xEB1AE811);
	r3 = D(r3, s1_1_0, 0xFA00FC06, 0xE318E10D, 0xFAF9FB25, 0xE106DDF6);
	r4 = D(r4, s1_1_0, 0x1CDFF3F6, 0x04E6F119, 0x0EEEE505, 0x15F0FB06);
	r5 = D(r5, s1_1_0, 0xFAFDFF00, 0xE60B070F, 0xE4F2ECE0, 0xF3052E09);
	r6 = D(r6, s1_1_0, 0x08E9FD04, 0x09FDF9FC, 0x02050CFF, 0xEA081808);
	r7 = D(r7, s1_1_0, 0x0506FF01, 0x11FD02FD, 0xFFF7F40E, 0xF9120007);
	r0 = D(r0, s1_1_1, 0xEB1BF30E, 0x0311F913, 0x19F3FE06, 0x0E080BFB);
	r1 = D(r1, s1_1_1, 0x13FE0207, 0x02F60004, 0x1101011B, 0xFCE9E5F8);
	r2 = D(r2, s1_1_1, 0x0FFEFDF7, 0x08ED1520, 0x21EE38F2, 0x14EDFD16);
	r3 = D(r3, s1_1_1, 0x09FDEDEF, 0x171BDB0E, 0x22F3D5F5, 0x0CD2EEE5);
	r4 = D(r4, s1_1_1, 0xFDDD1604, 0xF50BC5FD, 0xE7F2EAF0, 0xF90818E2);
	r5 = D(r5, s1_1_1, 0xCEF7E501, 0x20EBF72F, 0xF6D7FCE3, 0xD71FF0DD);
	r6 = D(r6, s1_1_1, 0x0A060001, 0xF4080909, 0x1CF50304, 0x0AF70603);
	r7 = D(r7, s1_1_1, 0xFE05FD05, 0x05FD3AEF, 0x0007F201, 0x0BFBE519);
	r0 = D(r0, s1_1_2, 0xF8FDF806, 0xEF00F522, 0x0C2307FF, 0x02F20410);
	r1 = D(r1, s1_1_2, 0x01F9FCFC, 0x0B08F2EC, 0x1705FBF2, 0xFBF709ED);
	r2 = D(r2, s1_1_2, 0xE20B06E5, 0x010B00F1, 0x04F3EC03, 0x1202F414);
	r3 = D(r3, s1_1_2, 0x0010FDFB, 0xF3EFFCF2, 0x17CD0EE5, 0xF3F7FBDE);
	r4 = D(r4, s1_1_2, 0xFCD1180C, 0x0181EDD7, 0x12E60803, 0x040305E8);
	r5 = D(r5, s1_1_2, 0xE80A06FB, 0xEDC1EF04, 0xDDF00AFC, 0x18F4140D);
	r6 = D(r6, s1_1_2, 0xEA0D090E, 0xFFF106FC, 0x01FEF704, 0x14FF0A11);
	r7 = D(r7, s1_1_2, 0xF91308FD, 0xFD0AFAFB, 0xFBE80A04, 0xFBF00708);
	r0 = D(r0, s1_2_0, 0x07F8F2F9, 0xFB0DFE00, 0x0D03F7FA, 0xF704F502);
	r1 = D(r1, s1_2_0, 0x04FF0400, 0xFC0C13F6, 0x0DEF04F7, 0x04F9FD00);
	r2 = D(r2, s1_2_0, 0xFC0606F8, 0x0403060A, 0xF6132503, 0xFD0A10FC);
	r3 = D(r3, s1_2_0, 0xFCFEFD02, 0xF70823F4, 0x06040BF9, 0xF6FD1D06);
	r4 = D(r4, s1_2_0, 0xF202F7F7, 0x13FEFDDD, 0xF1F9FAFF, 0x0CF2FA0F);
	r5 = D(r5, s1_2_0, 0x14E2F00C, 0x092530EC, 0xF1F3E40E, 0x040AEFF7);
	r6 = D(r6, s1_2_0, 0x0C07F904, 0xFA02F9FA, 0x05000103, 0x11090DF7);
	r7 = D(r7, s1_2_0, 0xFE0106FF, 0xF0061A08, 0x060502F7, 0x0808FBFE);
	r0 = D(r0, s1_2_1, 0xE00ACD01, 0x0FF9F2EF, 0x21E1F4FF, 0x15FDF803);
	r1 = D(r1, s1_2_1, 0x0302FDFC, 0x1E0DF7F3, 0x04EBF706, 0xFB030A08);
	r2 = D(r2, s1_2_1, 0xFAF21EFC, 0xFF140F03, 0x15F4F3F9, 0x08FAFB03);
	r3 = D(r3, s1_2_1, 0x02030205, 0x15E80C06, 0x0EF20C12, 0xF5ED0209);
	r4 = D(r4, s1_2_1, 0x011013F9, 0x0EF5171E, 0x08FA04FF, 0xE6F30DFE);
	r5 = D(r5, s1_2_1, 0xE3230DE0, 0x31C2F505, 0xFBDDE2FD, 0xF30ED001);
	r6 = D(r6, s1_2_1, 0x220CFBEC, 0xFDFC0300, 0x0AFBF902, 0x0C05FD01);
	r7 = D(r7, s1_2_1, 0x03F808F5, 0x020EFC00, 0xF502F702, 0x07FC0005);
	r0 = D(r0, s1_2_2, 0xEC0BF6FF, 0x0A1C08F1, 0x0F0F04FF, 0x020909FD);
	r1 = D(r1, s1_2_2, 0x0002FDFD, 0xF3100300, 0xF305F2EF, 0x15F30606);
	r2 = D(r2, s1_2_2, 0xE1FCFDF9, 0x06EA13FA, 0xFFEC0CFC, 0x10060BFB);
	r3 = D(r3, s1_2_2, 0xFCFE0506, 0xEDE1FF10, 0x05D6EF02, 0x01FFFE0D);
	r4 = D(r4, s1_2_2, 0x09E900FF, 0xE9171EE1, 0xF805FBFF, 0xF80D02F9);
	r5 = D(r5, s1_2_2, 0x09DE180F, 0xDFFB0BE4, 0xEB0113F7, 0xFE29E1F5);
	r6 = D(r6, s1_2_2, 0xFE0CF8FE, 0x0205F906, 0xFF02FE00, 0x070EFB07);
	r7 = D(r7, s1_2_2, 0xEEEE05FD, 0x070113FE, 0x03FA03FF, 0xFBEEF50A);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x010D01F8, 0x0DF104FD, 0x00F31D01, 0xF6EF06FE);
	r1 = D(r1, s0_0_0, 0x00FF01FD, 0xF20EE30D, 0x070602F9, 0x0307F708);
	r2 = D(r2, s0_0_0, 0x0102FD00, 0xFE0AF906, 0x0EFAE0F8, 0x1410FCFC);
	r3 = D(r3, s0_0_0, 0xFA0E0208, 0x0719ED1E, 0x0E2019F6, 0x240CE105);
	r4 = D(r4, s0_0_0, 0x0EF60309, 0x1C15BAF8, 0x010AE600, 0x2408FE00);
	r5 = D(r5, s0_0_0, 0xFD1504F2, 0xFA0BCBEE, 0x13FDF00B, 0xF902E80B);
	r6 = D(r6, s0_0_0, 0xF901EF01, 0x0D070FFE, 0x08FD01FD, 0xF6FAF804);
	r7 = D(r7, s0_0_0, 0x01FAFEFC, 0x01EAF20B, 0xF805FDFE, 0xE702FA22);
	r0 = D(r0, s0_0_1, 0x0503FE08, 0x0B0C0503, 0x010E06DC, 0x0208F5F9);
	r1 = D(r1, s0_0_1, 0xFE05FD00, 0x04FEF5FE, 0xF5FBFE06, 0x2CEFF306);
	r2 = D(r2, s0_0_1, 0x0A0A0B00, 0x050F01FF, 0xF61FEAF6, 0x010A06FD);
	r3 = D(r3, s0_0_1, 0xEAFBFA03, 0x13E7F804, 0xFF03F4E7, 0xF4EAEFF2);
	r4 = D(r4, s0_0_1, 0xE1F7081D, 0x0901DD12, 0x09EEF5F9, 0xE6EFF6F8);
	r5 = D(r5, s0_0_1, 0x1CF5F710, 0x0DD921F8, 0x1C1BFBF7, 0xFCFBE4F0);
	r6 = D(r6, s0_0_1, 0x130DF005, 0x2802F908, 0x150C02FF, 0x05130C05);
	r7 = D(r7, s0_0_1, 0x04FA0AF6, 0xFFF2FF04, 0x03F70001, 0x10060C06);
	r0 = D(r0, s0_0_2, 0xF500FD04, 0xF1FCFFFD, 0xF800070D, 0xF300F906);
	r1 = D(r1, s0_0_2, 0xFE00FD00, 0x04FC0FEA, 0x00050903, 0xFBFFF40F);
	r2 = D(r2, s0_0_2, 0xF9090506, 0x08FFFFFD, 0xF2F8EBFB, 0x0A0AFAF6);
	r3 = D(r3, s0_0_2, 0x07FEF904, 0x14F9FA07, 0xFA0AF423, 0xFF05010C);
	r4 = D(r4, s0_0_2, 0xF81703F3, 0xC40AF1F6, 0xF30CFD07, 0xFEFE0805);
	r5 = D(r5, s0_0_2, 0xF903F00B, 0x010BEBFC, 0xEF05F607, 0xF206F90E);
	r6 = D(r6, s0_0_2, 0xF402080A, 0xFE02FA00, 0x00FF0004, 0x1705020F);
	r7 = D(r7, s0_0_2, 0x0AFE08FF, 0x00FBF8F8, 0x0B03FA05, 0xF7FF06F8);
	r0 = D(r0, s0_1_0, 0xF20904FE, 0x041501FF, 0xDA0E03FB, 0xF305F40F);
	r1 = D(r1, s0_1_0, 0x07FEFEFB, 0xFDEAEC10, 0x1B16FDF1, 0xFD03FCEE);
	r2 = D(r2, s0_1_0, 0xF11A1CE9, 0xF2030000, 0x0C1804FE, 0x13FEFD1F);
	r3 = D(r3, s0_1_0, 0x04FF04F6, 0x27F0EDCD, 0xFDF1FCE4, 0x1FFEF1DB);
	r4 = D(r4, s0_1_0, 0x16ED09FD, 0x11E7C4CF, 0x18F0E8FF, 0xEBFAFEF9);
	r5 = D(r5, s0_1_0, 0xF708FE0A, 0x001301EF, 0x24270DFD, 0x101A1509);
	r6 = D(r6, s0_1_0, 0x180F061E, 0x020902F5, 0xFF04060A, 0xFEF60303);
	r7 = D(r7, s0_1_0, 0xF8FBED17, 0xF1210C13, 0x0900F7FA, 0xF210061F);
	r0 = D(r0, s0_1_1, 0x060203F2, 0xE6F2ECF3, 0x0711F00B, 0x19FCF3F0);
	r1 = D(r1, s0_1_1, 0x180102FC, 0xF61F0211, 0xE3051AE6, 0xF2F91004);
	r2 = D(r2, s0_1_1, 0x09E10602, 0x06F0FEFB, 0xC91803F1, 0xF004ECF5);
	r3 = D(r3, s0_1_1, 0x24120516, 0x1602E3F5, 0x0D1FF0D8, 0xF90BF3B6);
	r4 = D(r4, s0_1_1, 0xF6E701D8, 0x1BFFEDF9, 0x0618EFF5, 0x01EE02FD);
	r5 = D(r5, s0_1_1, 0x17EC1A16, 0x14E21704, 0xF8F7FD07, 0x0000C604);
	r6 = D(r6, s0_1_1, 0xF3FFEDEC, 0xEB03070B, 0xE50C0905, 0xD9F9F1FD);
	r7 = D(r7, s0_1_1, 0xEC0CFD0B, 0xE0E7130B, 0xF50D10FD, 0x09E4F9EF);
	r0 = D(r0, s0_1_2, 0xF5060AFC, 0x150BFD06, 0xE807FA08, 0x0BFDFC0C);
	r1 = D(r1, s0_1_2, 0x04010202, 0x01FD10FA, 0xFD0EFDF2, 0x1318F7F6);
	r2 = D(r2, s0_1_2, 0x05FD0405, 0x0BF5F907, 0x02F4F90D, 0xF6FF05FB);
	r3 = D(r3, s0_1_2, 0xEBFFFF02, 0xEB0C1105, 0xFF1111E2, 0xE6130911);
	r4 = D(r4, s0_1_2, 0xF8F109FC, 0xDF0A0408, 0x121014F0, 0xFE0503F5);
	r5 = D(r5, s0_1_2, 0x0A0A0814, 0xE3F52200, 0x100DF71B, 0xE1E709FB);
	r6 = D(r6, s0_1_2, 0xFA04E910, 0xFC04FBFA, 0xFD070603, 0xFB0CF7F1);
	r7 = D(r7, s0_1_2, 0xF911ED04, 0xFF00FC10, 0xFFF80C07, 0xF708F913);
	r0 = D(r0, s0_2_0, 0xFFFC0BF8, 0xFDFC051B, 0xF90C080C, 0xF7FEFB00);
	r1 = D(r1, s0_2_0, 0xF9FBFA07, 0xF90DF2EF, 0xF8110DDB, 0xF0FD0800);
	r2 = D(r2, s0_2_0, 0xEE251DF8, 0xF902F71C, 0x030AF306, 0x02F5EDE2);
	r3 = D(r3, s0_2_0, 0x010200F4, 0xF00217E9, 0xF6FC0DFF, 0xF6150C0C);
	r4 = D(r4, s0_2_0, 0x0A0D0ED6, 0x15F3061A, 0xFF1CF603, 0x03E70AFC);
	r5 = D(r5, s0_2_0, 0xEE06140F, 0xFDF7E808, 0x08F70705, 0x0BE91C05);
	r6 = D(r6, s0_2_0, 0xF606F204, 0x08020605, 0xFAFEFC02, 0x0707FB06);
	r7 = D(r7, s0_2_0, 0x12FD0617, 0x1103F40D, 0xFF0503F5, 0x03FB0111);
	r0 = D(r0, s0_2_1, 0x0720FCB5, 0xF2F800E4, 0xF204FDE2, 0xFC08EAF0);
	r1 = D(r1, s0_2_1, 0x03FDFC0C, 0x050DFC04, 0xFF030BED, 0x0AFB0325);
	r2 = D(r2, s0_2_1, 0x18FF0B13, 0xFBFCF5F7, 0x0CFCFF0F, 0xFD0705EF);
	r3 = D(r3, s0_2_1, 0x00050105, 0x03E8090F, 0x03E90519, 0xF6F80806);
	r4 = D(r4, s0_2_1, 0x0A20FFEE, 0xFEFE0024, 0x01190F04, 0x1D0A0620);
	r5 = D(r5, s0_2_1, 0x2009130F, 0xF0E2EEEE, 0x1003FC1A, 0x0C110131);
	r6 = D(r6, s0_2_1, 0x0904F2FB, 0x03FF060A, 0x0605FCF8, 0xF6FAFF15);
	r7 = D(r7, s0_2_1, 0x01FB020D, 0xFDFF0D00, 0xFF020BFA, 0xEE06FFF3);
	r0 = D(r0, s0_2_2, 0xF801FB09, 0x0019090D, 0x11050C14, 0x071101FB);
	r1 = D(r1, s0_2_2, 0xF903FF03, 0x07070010, 0xFD08FC1B, 0xFEFDF0FB);
	r2 = D(r2, s0_2_2, 0x20FDF012, 0x09FA0304, 0x02E70600, 0xF6010EFC);
	r3 = D(r3, s0_2_2, 0x0100FEFA, 0xF8FAFFE9, 0xF8FAEFE9, 0x0AF6F010);
	r4 = D(r4, s0_2_2, 0x0F050A01, 0x05FF0E01, 0x00FD11ED, 0x06FA0300);
	r5 = D(r5, s0_2_2, 0x04EE02FB, 0x0E16F908, 0xF5011309, 0x080705FE);
	r6 = D(r6, s0_2_2, 0x0E221018, 0xF60101FC, 0x0004FEFE, 0x03F107FB);
	r7 = D(r7, s0_2_2, 0xFF040BFD, 0x02FF0302, 0xF80DFFFD, 0x050C01F9);
	r0 = D(r0, s1_0_0, 0xF9E102FE, 0xF8070A0E, 0xF5280404, 0x0108FA00);
	r1 = D(r1, s1_0_0, 0xFC07FD04, 0x0415F208, 0x06F81103, 0xFF14F406);
	r2 = D(r2, s1_0_0, 0xFC100FF6, 0x03EB0203, 0x161621ED, 0x021202EE);
	r3 = D(r3, s1_0_0, 0x00FC02FE, 0x06D80316, 0xF71DF703, 0x04F2210B);
	r4 = D(r4, s1_0_0, 0xFD12F7EF, 0x1EF8EA1D, 0x05EFFEE7, 0x02E1FDE3);
	r5 = D(r5, s1_0_0, 0xFC0A1A06, 0x06F60701, 0xF40804EA, 0xF8EE0C12);
	r6 = D(r6, s1_0_0, 0xFD08131F, 0xFC030901, 0xF904FA01, 0x01EBF609);
	r7 = D(r7, s1_0_0, 0xF612FE08, 0x111618FB, 0x080DFF02, 0xFDFEF8F7);
	r0 = D(r0, s1_0_1, 0x02F1F709, 0xFFFCFDFC, 0xFBDBF8E8, 0x0A050B08);
	r1 = D(r1, s1_0_1, 0x02FEFFFA, 0x0413030D, 0xF80AF906, 0x0700120C);
	r2 = D(r2, s1_0_1, 0xF9FFE7D7, 0x09DA0303, 0xF22FE40A, 0xF31C0510);
	r3 = D(r3, s1_0_1, 0x010FF904, 0xD0E2F904, 0x040EFF01, 0x0CFDFA1F);
	r4 = D(r4, s1_0_1, 0x0028F912, 0xE202FCDF, 0xF4121F0C, 0xF90D10F9);
	r5 = D(r5, s1_0_1, 0x0202FC0A, 0xF840F5E3, 0xFEF91809, 0xF0F228F2);
	r6 = D(r6, s1_0_1, 0xFDE00F0E, 0xFFF00803, 0x0A06F9FF, 0x010A0706);
	r7 = D(r7, s1_0_1, 0xFF000DFC, 0x030E05F4, 0xF6F50801, 0xF00BEFFE);
	r0 = D(r0, s1_0_2, 0xF5F90201, 0x01FF0001, 0x090BF701, 0x0D0B0001);
	r1 = D(r1, s1_0_2, 0xFE00FFFE, 0xFCE2FBF7, 0x05F8F7FF, 0x08FF02EE);
	r2 = D(r2, s1_0_2, 0xEB0EFC17, 0x0DF7F9F1, 0x1D07E1F7, 0xF7FFF4F4);
	r3 = D(r3, s1_0_2, 0xFBFEFCFA, 0xFFFC05E8, 0x0D0705FD, 0x0F0CE200);
	r4 = D(r4, s1_0_2, 0xF803E60B, 0xFB2AF112, 0xFAEDFA0E, 0xF807FBFC);
	r5 = D(r5, s1_0_2, 0xF7FA02F6, 0x02FC0F0A, 0x0CE606FA, 0xFC10CCFC);
	r6 = D(r6, s1_0_2, 0x0601E816, 0x0A0FF901, 0xFDFEFAFE, 0x0D0FF1FE);
	r7 = D(r7, s1_0_2, 0xF6F7FF00, 0x11050506, 0x030C09FF, 0xF8F6EDFA);
	r0 = D(r0, s1_1_0, 0xF101FBF1, 0xEF0EF6E4, 0x1918F808, 0xFE0903F5);
	r1 = D(r1, s1_1_0, 0x040100FF, 0x120D2027, 0x0AFE010C, 0x011605F3);
	r2 = D(r2, s1_1_0, 0x0D2A0406, 0xF709EDFD, 0xEE280B15, 0x0217FB01);
	r3 = D(r3, s1_1_0, 0x02060603, 0xFE041D13, 0x13FF0BF1, 0xFD15F6F8);
	r4 = D(r4, s1_1_0, 0xED1C120D, 0x0FE1EAE4, 0x03071218, 0xFC26F014);
	r5 = D(r5, s1_1_0, 0xF7DF22E7, 0x150809FC, 0xEEE412E5, 0x06FA02FA);
	r6 = D(r6, s1_1_0, 0xF40D16FA, 0x1012FEFE, 0x0102F904, 0x0DE3FF07);
	r7 = D(r7, s1_1_0, 0x0A0AF904, 0xFF15F6F6, 0x04070BFC, 0x050E0115);
	r0 = D(r0, s1_1_1, 0x15D710F7, 0x13F41B1C, 0xF60F12FE, 0xF61BFC00);
	r1 = D(r1, s1_1_1, 0xF9020202, 0xE52509F1, 0xFA1AFAF2, 0xEF060401);
	r2 = D(r2, s1_1_1, 0x00000CCA, 0x0EFF0DEA, 0xEAF6FFDD, 0x23F70208);
	r3 = D(r3, s1_1_1, 0xFF0605F5, 0xE32FC0DC, 0xF110DBF6, 0xF20BF206);
	r4 = D(r4, s1_1_1, 0xF7111CF4, 0x046016D4, 0xFA22FEE4, 0x0FFB050A);
	r5 = D(r5, s1_1_1, 0x1EEC1AF4, 0x1614DDEB, 0xEBF40802, 0xF5F63AFE);
	r6 = D(r6, s1_1_1, 0xFAE60522, 0x07020D04, 0x00060B04, 0xFCF002F2);
	r7 = D(r7, s1_1_1, 0x0502FF0D, 0xF5071411, 0xF706F9FE, 0x040FFEF2);
	r0 = D(r0, s1_1_2, 0x0DF100FD, 0x0DF402F0, 0x00FCF2FB, 0x040CEFFE);
	r1 = D(r1, s1_1_2, 0xFDFF05FE, 0x0418FC0A, 0xF3091C0E, 0xF10C150B);
	r2 = D(r2, s1_1_2, 0x08FE1BFE, 0x0006F6FF, 0xF80E1502, 0x0BF40106);
	r3 = D(r3, s1_1_2, 0xFBFA0100, 0xCE0F180C, 0xF4120D0A, 0xF906250B);
	r4 = D(r4, s1_1_2, 0x0D01EA06, 0x09E409D6, 0xF70A14CF, 0x15060CFE);
	r5 = D(r5, s1_1_2, 0x0E03FEF9, 0xF7E801FD, 0xE3FB05F4, 0xF1F6F402);
	r6 = D(r6, s1_1_2, 0x11EF07F7, 0x0401FA0D, 0x000003FB, 0xFAF4F00C);
	r7 = D(r7, s1_1_2, 0x0E0DF90B, 0x17FEE4FB, 0x00010102, 0xFA0BFE09);
	r0 = D(r0, s1_2_0, 0xFE060FFE, 0xFDFAFBFA, 0x010A12FF, 0x101809FC);
	r1 = D(r1, s1_2_0, 0xFCFFFD01, 0x1401F205, 0xF910FD0A, 0x0207020A);
	r2 = D(r2, s1_2_0, 0xE91CEC09, 0xFDF90509, 0xF9F8F80B, 0xF100F30A);
	r3 = D(r3, s1_2_0, 0x01FC0203, 0xFF000B05, 0xFB080C01, 0xFCF10507);
	r4 = D(r4, s1_2_0, 0x0706041E, 0x07E71203, 0xF4EDF9FC, 0x0BF7F3F6);
	r5 = D(r5, s1_2_0, 0xF3D0F10B, 0x17D8ED16, 0xFAD7FEF7, 0xEEDBF7E9);
	r6 = D(r6, s1_2_0, 0x101A050C, 0x0204FEF8, 0x0201FE07, 0x0C04FC08);
	r7 = D(r7, s1_2_0, 0xFC01F8F9, 0x0315F0FD, 0x000C00FF, 0x01040FF0);
	r0 = D(r0, s1_2_1, 0x0FFB04FC, 0xFAFD06F9, 0xF9000CF4, 0xF3130E04);
	r1 = D(r1, s1_2_1, 0xFDFD07FD, 0xEE0E14FD, 0x000C1401, 0x0FF20CFE);
	r2 = D(r2, s1_2_1, 0x23EA16FA, 0xF9F506FC, 0xF304EE04, 0xFF0E1308);
	r3 = D(r3, s1_2_1, 0x01FEFF00, 0x01000604, 0x18F903FD, 0x01E80C0D);
	r4 = D(r4, s1_2_1, 0x091105FD, 0xE91E17F3, 0xFD02FF10, 0x000D0003);
	r5 = D(r5, s1_2_1, 0x0A08E40A, 0xFC40F1F8, 0x04F1EE07, 0x26EBE304);
	r6 = D(r6, s1_2_1, 0xEC020DFB, 0x0600F906, 0xFE000AFA, 0xFD0209F9);
	r7 = D(r7, s1_2_1, 0x0103EF07, 0x1407050A, 0x02060808, 0x0600F906);
	r0 = D(r0, s1_2_2, 0x0C01FAF6, 0x03EBF8FD, 0xFB1206F3, 0x0BFC06FF);
	r1 = D(r1, s1_2_2, 0xFDFFFB00, 0xFE050701, 0xFD131304, 0x0010F803);
	r2 = D(r2, s1_2_2, 0x14FBEA19, 0x08080BF5, 0x1D030D06, 0xF7FB01FB);
	r3 = D(r3, s1_2_2, 0x0600FD01, 0x0AFC030F, 0xF502F212, 0xFF04F3FE);
	r4 = D(r4, s1_2_2, 0x0FF60E11, 0xB0F10FF0, 0x0701020D, 0x02FE0102);
	r5 = D(r5, s1_2_2, 0xF40EF911, 0x0B111200, 0x0C0C0A06, 0x17FD10F1);
	r6 = D(r6, s1_2_2, 0xF404F906, 0x0501FCFE, 0xFD01FF02, 0xF2030BF4);
	r7 = D(r7, s1_2_2, 0xF6FB010C, 0xFCFEFFF8, 0x0B09FE02, 0x00F60602);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FA0C00, 0x08000BF7, 0xC40B08F1, 0x0D01FB06);
	r1 = D(r1, s0_0_0, 0x0401FE00, 0x0812E6F8, 0x0205ECF2, 0x04F20A0D);
	r2 = D(r2, s0_0_0, 0xEA0CF2E8, 0x05FB06FB, 0xEDFA1101, 0xD7020C09);
	r3 = D(r3, s0_0_0, 0xF8010206, 0xF4EE00F6, 0xE7080AFB, 0xF8F1E5FC);
	r4 = D(r4, s0_0_0, 0xD300E112, 0x08090C03, 0x0904F900, 0x0308EEFD);
	r5 = D(r5, s0_0_0, 0x1D03FD06, 0x220E13FA, 0xD4FD110A, 0x06FC1A1A);
	r6 = D(r6, s0_0_0, 0xF0FFEF09, 0x02FD0AF7, 0x00FBFAFE, 0x04F10B00);
	r7 = D(r7, s0_0_0, 0xF9020E03, 0x16FEF801, 0x0700F905, 0xFD08FF0B);
	r0 = D(r0, s0_0_1, 0x0EF10906, 0x0F0D030B, 0x021D09F7, 0x0F020204);
	r1 = D(r1, s0_0_1, 0xFFFE05F8, 0x14F3FB02, 0xF61EF0FF, 0xF2E7FB01);
	r2 = D(r2, s0_0_1, 0xFD29F4FA, 0x011DF3FC, 0x030707F6, 0x18F808F3);
	r3 = D(r3, s0_0_1, 0x08FB0107, 0x81E9FBF9, 0x02D4EEFF, 0xD6FC2CFC);
	r4 = D(r4, s0_0_1, 0x00E80700, 0x90E923E9, 0xFBFE0BF3, 0xA70F0312);
	r5 = D(r5, s0_0_1, 0xFFFDFA08, 0xFF0E16F9, 0xF51406FB, 0x22EF2003);
	r6 = D(r6, s0_0_1, 0xFE0AF3FF, 0xFD1303FC, 0xF8F904F3, 0x18E311FF);
	r7 = D(r7, s0_0_1, 0x0202F0FF, 0x06000D06, 0x06F40CFB, 0xC414F504);
	r0 = D(r0, s0_0_2, 0x130C04FB, 0xEF0504FA, 0xFB0811F2, 0x05050802);
	r1 = D(r1, s0_0_2, 0x01FE01FD, 0xFDF907FE, 0x090EF507, 0xED11F5E8);
	r2 = D(r2, s0_0_2, 0x28F9F7F1, 0x0715F7F8, 0x060B0AF7, 0xEDFDF9FA);
	r3 = D(r3, s0_0_2, 0xFF00090A, 0x26F1F9F4, 0xF5111612, 0x08E70305);
	r4 = D(r4, s0_0_2, 0xF305FEEA, 0xFBB624ED, 0x0125D5F3, 0xFC0B0906);
	r5 = D(r5, s0_0_2, 0x0BFBF5F3, 0xFC1A2D14, 0x0311E5F6, 0xD90809F9);
	r6 = D(r6, s0_0_2, 0x12FF02EA, 0x0109F6F1, 0xFCFBFFFB, 0x07140AFF);
	r7 = D(r7, s0_0_2, 0xF80DFEFF, 0x0FF700F0, 0x05FE0207, 0xFB14F910);
	r0 = D(r0, s0_1_0, 0x06110F0B, 0xF5041807, 0xF11026F9, 0xFE03EE11);
	r1 = D(r1, s0_1_0, 0x0BFE0109, 0x0502ED04, 0xF400F6F2, 0x0E040E05);
	r2 = D(r2, s0_1_0, 0xCC0F12FD, 0x0C080923, 0x0D120DF5, 0xEEFB0BF6);
	r3 = D(r3, s0_1_0, 0x02040402, 0x031012E2, 0xF81C02EE, 0x0D07F602);
	r4 = D(r4, s0_1_0, 0x200B05F8, 0xFA0BEAF2, 0x13FBE309, 0xFC06D1F8);
	r5 = D(r5, s0_1_0, 0x16FC1310, 0xB4F1BCC7, 0x0402F0F7, 0xFD02FA0C);
	r6 = D(r6, s0_1_0, 0xEE000507, 0x01F50BEA, 0x0305FCFE, 0xFFFBFDFD);
	r7 = D(r7, s0_1_0, 0x0FE5F412, 0xFFF3FD22, 0x03F90F0E, 0xEB190AF8);
	r0 = D(r0, s0_1_1, 0xF21CFDDB, 0x0EEA0509, 0xE51A12A4, 0x0B1C0A23);
	r1 = D(r1, s0_1_1, 0x00FC0612, 0xFD3D0310, 0xDA0BF400, 0x112FF1F5);
	r2 = D(r2, s0_1_1, 0xFADCFBF8, 0x2403F8EB, 0x22BCDCDB, 0x10051213);
	r3 = D(r3, s0_1_1, 0x0C04FF21, 0xF2FE0522, 0xFC2E09F8, 0xF81EF81B);
	r4 = D(r4, s0_1_1, 0x01FD04EE, 0xF10F26EE, 0x020ED3F3, 0x1B2AF029);
	r5 = D(r5, s0_1_1, 0x81E3B081, 0xD6D8F9EB, 0x3006CE05, 0x1AD009FF);
	r6 = D(r6, s0_1_1, 0x08F800F8, 0x0200FF09, 0x00FD0501, 0x0A05FCF5);
	r7 = D(r7, s0_1_1, 0xFDE2FC03, 0x1108FF19, 0xED08F8E2, 0xE0C9F418);
	r0 = D(r0, s0_1_2, 0xFD0AF7F9, 0xF001FC08, 0xF80008E9, 0xF901FB0F);
	r1 = D(r1, s0_1_2, 0x00FF0200, 0xFA030318, 0xFFE20B09, 0x01F00FF8);
	r2 = D(r2, s0_1_2, 0x28E91FEB, 0xE8ED11FB, 0x34C21AC8, 0xF2FBF615);
	r3 = D(r3, s0_1_2, 0x0201FA08, 0x1A103000, 0x0BFD1707, 0x1BF505FC);
	r4 = D(r4, s0_1_2, 0x3CF7F8F0, 0xE9E1DFCD, 0x2102E9FB, 0x10FDFA0F);
	r5 = D(r5, s0_1_2, 0x0E020EEB, 0xDDE314FE, 0x191EF2E8, 0xF6F5F717);
	r6 = D(r6, s0_1_2, 0xFCF10CF9, 0xF704FB00, 0x0304FBFA, 0x000DFAF9);
	r7 = D(r7, s0_1_2, 0x04F7F80E, 0xF402FC04, 0x03FA010D, 0xF11402E7);
	r0 = D(r0, s0_2_0, 0xFD0F0908, 0xFF0B01FB, 0xE8110910, 0x0A0BFBFC);
	r1 = D(r1, s0_2_0, 0x01FD0400, 0x0501E604, 0xFA0EFDF3, 0xFFF5FD05);
	r2 = D(r2, s0_2_0, 0x0E20EFD5, 0xFA061908, 0x02F91E0A, 0x05100A0E);
	r3 = D(r3, s0_2_0, 0x02000200, 0xF01008F5, 0xF3000CFE, 0x03FAF8FF);
	r4 = D(r4, s0_2_0, 0x0400F8E7, 0xF2F8EF23, 0x020CD813, 0xF509FAFE);
	r5 = D(r5, s0_2_0, 0x2EF2EF0D, 0x14D31DF5, 0x06FAF7F0, 0xDB01E9EC);
	r6 = D(r6, s0_2_0, 0xF4F50D17, 0xFDFFF304, 0x04FB0AFC, 0xF6FDF505);
	r7 = D(r7, s0_2_0, 0xFBF60B12, 0xF8F904FF, 0xFC04FD16, 0xE00704F2);
	r0 = D(r0, s0_2_1, 0x00160103, 0x1B03F615, 0x2514F9F7, 0x1600120F);
	r1 = D(r1, s0_2_1, 0xFFFD01FE, 0x0619FB02, 0xF431E911, 0x00F80102);
	r2 = D(r2, s0_2_1, 0xEFF5D116, 0x140A0802, 0x12DF0218, 0xFC04FF11);
	r3 = D(r3, s0_2_1, 0x0001FF01, 0xFF08FF04, 0xFDF40EFE, 0x17020101);
	r4 = D(r4, s0_2_1, 0xF910F304, 0xE10A0104, 0xF311DBEB, 0xF912E7EB);
	r5 = D(r5, s0_2_1, 0x0DFCE9D6, 0x1BED2301, 0x0205E50E, 0x0D0DD411);
	r6 = D(r6, s0_2_1, 0xEAF9FD0E, 0x01F2F7FE, 0xFE02071E, 0x01FE000A);
	r7 = D(r7, s0_2_1, 0x01FFF715, 0x06F003F9, 0x07ECFE2E, 0x12F7FDFF);
	r0 = D(r0, s0_2_2, 0xF40DF80C, 0x05FC0305, 0x0102EAE7, 0x01F8FA02);
	r1 = D(r1, s0_2_2, 0x02FE01FF, 0x10F604F5, 0x020900FF, 0x050C0DEF);
	r2 = D(r2, s0_2_2, 0xDB06FBF2, 0xFE02060A, 0x0C0706F1, 0x08FFFB1F);
	r3 = D(r3, s0_2_2, 0xFAFEFFFF, 0x0E0A0105, 0x0F0D08F4, 0x060C07F4);
	r4 = D(r4, s0_2_2, 0xE8F7FD09, 0xFFE32203, 0x0E0003FE, 0xF80203FF);
	r5 = D(r5, s0_2_2, 0x12F90515, 0xFFEAF11E, 0x1A0500EC, 0xDBE809E8);
	r6 = D(r6, s0_2_2, 0xE3EBF311, 0xFEF7FDF6, 0xFE05FF01, 0x05FE00EF);
	r7 = D(r7, s0_2_2, 0x06FF0407, 0xF9F00101, 0x05FA0012, 0x04FF08FF);
	r0 = D(r0, s1_0_0, 0x08FCF704, 0x07F7F008, 0x0801EDD8, 0xFA0601FB);
	r1 = D(r1, s1_0_0, 0x0003F9FB, 0xE7EAE5E4, 0x0DF41BFC, 0x12FF00EA);
	r2 = D(r2, s1_0_0, 0x140F3008, 0x0FF60303, 0x042311FD, 0xF00BEA11);
	r3 = D(r3, s1_0_0, 0x0901FC05, 0xF3E99DF5, 0x14F9EF07, 0xDBFC1BC8);
	r4 = D(r4, s1_0_0, 0x090215E9, 0xD5E01C11, 0x000718D0, 0xF10F1A10);
	r5 = D(r5, s1_0_0, 0x010C000A, 0xE4A71AC4, 0xFAED22FD, 0x0214EDFF);
	r6 = D(r6, s1_0_0, 0xF504F001, 0x010B0002, 0x0505F504, 0x0416D811);
	r7 = D(r7, s1_0_0, 0xF0FFFBFB, 0xFDF90FFB, 0x03FF03ED, 0xEFF2011A);
	r0 = D(r0, s1_0_1, 0x07EAED03, 0xEAFB03FD, 0xF828F60B, 0x0306E7F3);
	r1 = D(r1, s1_0_1, 0xFD02F601, 0xFD11FF03, 0xFC00F404, 0xF1ECF9E4);
	r2 = D(r2, s1_0_1, 0x00053E14, 0x03DEF8FA, 0xE42CFA1A, 0xF4E9C422);
	r3 = D(r3, s1_0_1, 0x0D0C14F2, 0xD30EB4F0, 0x121735E4, 0xE9F00013);
	r4 = D(r4, s1_0_1, 0x04130B0B, 0xEEAF3C27, 0xE80AEB0F, 0xFA05EF10);
	r5 = D(r5, s1_0_1, 0xF5810DFD, 0x02093714, 0xDAA4FDC6, 0xEC16F5E3);
	r6 = D(r6, s1_0_1, 0xFB17081F, 0xFC02FD0B, 0x0305F506, 0x110DEC21);
	r7 = D(r7, s1_0_1, 0x04130E00, 0xFE09F105, 0xFDFAFAFA, 0xFDEE0702);
	r0 = D(r0, s1_0_2, 0x040321FE, 0xFEFAFCF4, 0xF726D3E6, 0xFA06E8FD);
	r1 = D(r1, s1_0_2, 0x010100FB, 0xFF10BE09, 0x0603060D, 0xF503D901);
	r2 = D(r2, s1_0_2, 0xFCEE0D0D, 0x020108F5, 0xFDFF21FE, 0xF3F302FB);
	r3 = D(r3, s1_0_2, 0x070200FF, 0xD2DCCBEE, 0xF405DDFD, 0xFE16F008);
	r4 = D(r4, s1_0_2, 0x090A2E1F, 0xFEF6F424, 0xF8070BFA, 0xFB0B2307);
	r5 = D(r5, s1_0_2, 0xFEC4EA01, 0xF4D9F205, 0xF3C6F7EF, 0x0624281D);
	r6 = D(r6, s1_0_2, 0xF0F8D209, 0xFD08F704, 0x060006FD, 0xF4F60421);
	r7 = D(r7, s1_0_2, 0x00FEFF09, 0xF11525EE, 0xF90A08FE, 0xF9F60CFF);
	r0 = D(r0, s1_1_0, 0xF0F0FD05, 0xFB08EE07, 0x0C032B06, 0xE6FFFCF2);
	r1 = D(r1, s1_1_0, 0x040B02FF, 0xC8170EFB, 0x15040BF4, 0x080E0409);
	r2 = D(r2, s1_1_0, 0x020AC3EF, 0x03F6FE05, 0x1A00F1F4, 0x04DF1016);
	r3 = D(r3, s1_1_0, 0x0BF80002, 0x01180610, 0x0A02FC2B, 0x202EF809);
	r4 = D(r4, s1_1_0, 0xF20603FB, 0xCACECC19, 0xE8052CFD, 0xEB0026F7);
	r5 = D(r5, s1_1_0, 0xE5FD00D4, 0xC40A35F3, 0xF306EEF3, 0xDC0C0519);
	r6 = D(r6, s1_1_0, 0x02F80C03, 0xFD03FF00, 0x12FFF704, 0xFD041506);
	r7 = D(r7, s1_1_0, 0xF10602F8, 0xDC1ADDFD, 0x04120B07, 0xF903F40D);
	r0 = D(r0, s1_1_1, 0x01E0F002, 0xB1EC0F00, 0xF32022FB, 0xF306F60D);
	r1 = D(r1, s1_1_1, 0x0D0603F6, 0xD71CFA16, 0x0E15121C, 0x070B21E5);
	r2 = D(r2, s1_1_1, 0x050406EE, 0x0CFC2AFB, 0x05033122, 0xEBF91B15);
	r3 = D(r3, s1_1_1, 0x2016010A, 0x1500E311, 0x11FC0BF5, 0x230828D8);
	r4 = D(r4, s1_1_1, 0xF23B19FC, 0x135FC613, 0xF20DEED6, 0xF9070207);
	r5 = D(r5, s1_1_1, 0x81CADDEE, 0xEC09FA00, 0xF9F933EA, 0xD9002700);
	r6 = D(r6, s1_1_1, 0xDEFBCC10, 0x09FDF3FC, 0x0703F907, 0xF7F8101C);
	r7 = D(r7, s1_1_1, 0x0BF70705, 0xDE07E100, 0x110104F9, 0x09FE060A);
	r0 = D(r0, s1_1_2, 0x02DFF8EB, 0xFDE5F00C, 0x07FD1EE8, 0xFF080609);
	r1 = D(r1, s1_1_2, 0x02FA01FE, 0xF401E8FA, 0xF7180A08, 0xF9E2FCE7);
	r2 = D(r2, s1_1_2, 0xF8F8F6F7, 0xF9F51901, 0x0209ED04, 0x03D22408);
	r3 = D(r3, s1_1_2, 0x050206FA, 0xEBD32B1F, 0xFF0B010C, 0xFAFFF2FB);
	r4 = D(r4, s1_1_2, 0x0E0005FA, 0x2FF917D3, 0x0600F6CE, 0xF42F0C03);
	r5 = D(r5, s1_1_2, 0xF9F911E6, 0xFB030B00, 0xDDEF07E3, 0x06F0333D);
	r6 = D(r6, s1_1_2, 0xE3F9EDF9, 0x09FCFB08, 0x0001FAFD, 0x0CEC040F);
	r7 = D(r7, s1_1_2, 0x000B05F5, 0x03FD0B08, 0x06F90312, 0x01FB10FF);
	r0 = D(r0, s1_2_0, 0x00ECFD06, 0xFA060BFF, 0x01082D1D, 0xFEF8010E);
	r1 = D(r1, s1_2_0, 0x020206FD, 0x0E031C03, 0x10F9EEFC, 0x0E08FBF9);
	r2 = D(r2, s1_2_0, 0xFCEB120C, 0xF1F80308, 0x0507EC11, 0xFBF40901);
	r3 = D(r3, s1_2_0, 0x02FD0A01, 0x0CF905FE, 0xFF04D90B, 0x05F3FC02);
	r4 = D(r4, s1_2_0, 0xFEC41604, 0xE2FEFC14, 0xFB012FF6, 0xFCF2E8F2);
	r5 = D(r5, s1_2_0, 0xEA0009E8, 0x1797F9E1, 0x06F919E9, 0xFD26BFF1);
	r6 = D(r6, s1_2_0, 0xE718F70B, 0xFCFFF7FD, 0x0D010402, 0x0504FF04);
	r7 = D(r7, s1_2_0, 0xF105FBF5, 0xF2052306, 0xFDF906FF, 0x01010107);
	r0 = D(r0, s1_2_1, 0xFFE4DDFA, 0xFCFDFAF0, 0xF90A25FB, 0x1A03E9FF);
	r1 = D(r1, s1_2_1, 0xFD030BFE, 0xFF0CF7EB, 0x0702F9E8, 0x02F7E504);
	r2 = D(r2, s1_2_1, 0xF5111F0F, 0xFAF5EF08, 0xFEF50513, 0x0210F702);
	r3 = D(r3, s1_2_1, 0x02FCF001, 0x00FC2725, 0x07FCE116, 0x0100FF10);
	r4 = D(r4, s1_2_1, 0x07053EE8, 0x0004BB2E, 0x0AFC38F6, 0xF00BE810);
	r5 = D(r5, s1_2_1, 0xE8178AFD, 0x2C0DC30D, 0xFFF32CEB, 0xEDFB24CD);
	r6 = D(r6, s1_2_1, 0xF407EE01, 0x01F8FD01, 0x030200FE, 0xF6FF21F2);
	r7 = D(r7, s1_2_1, 0xF500FE09, 0x15FFE7F5, 0xF9080809, 0xFF0712F7);
	r0 = D(r0, s1_2_2, 0x01E208F7, 0x0300FFFA, 0xFD0F04EC, 0x0BFDF80C);
	r1 = D(r1, s1_2_2, 0xFF0102FC, 0x050EEE09, 0x040D12FF, 0xFFFD12F2);
	r2 = D(r2, s1_2_2, 0xF4EC1920, 0xFAF4070A, 0x000C13EA, 0x03FC0D01);
	r3 = D(r3, s1_2_2, 0x02F901FC, 0x09020A19, 0x0E04E8FE, 0xFC020812);
	r4 = D(r4, s1_2_2, 0x0000060B, 0xF5131C36, 0xFA0EF3FE, 0xF30AE612);
	r5 = D(r5, s1_2_2, 0x050425F9, 0x06E81426, 0xF2FA0F13, 0xFF11FDF2);
	r6 = D(r6, s1_2_2, 0xF8FBC314, 0x02FB01FC, 0x030002F9, 0x0001EC18);
	r7 = D(r7, s1_2_2, 0xF405F015, 0xFD021600, 0x0404F20B, 0xF901D318);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.600e-02, 8.637e-03, 8.935e-03, 1.870e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-5.104e-03, 1.902e-02, -2.866e-02, -6.680e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-5.848e-02, 1.835e-02, -5.985e-03, 1.309e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(6.943e-03, -5.708e-04, -7.837e-03, -9.125e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.912e-02, -4.658e-02, -2.513e-02, -7.652e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.912e-03, -1.354e-02, -5.607e-04, -5.225e-04);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.705e-02, -1.145e-02, -1.126e-02, -2.298e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.368e-03, 1.402e-02, -2.544e-02, 1.867e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDF901FE, 0xF5FD0306, 0xF4020206, 0xFAFDFDFD);
	r1 = D(r1, s0_0_0, 0x030001FB, 0x0605CC03, 0x0205F6FA, 0x07F80508);
	r2 = D(r2, s0_0_0, 0xE92907E0, 0x08FEFDED, 0xFCFE0102, 0xF30D130B);
	r3 = D(r3, s0_0_0, 0x00FEFC02, 0xFDFB16EA, 0xFDED04EA, 0xFB0FF20D);
	r4 = D(r4, s0_0_0, 0xD802F9F5, 0xDF0C01F6, 0xF7EE05FA, 0xF90D03FE);
	r5 = D(r5, s0_0_0, 0x0EF00AF8, 0xF8FDFF03, 0xF9FD0614, 0xEDF915F6);
	r6 = D(r6, s0_0_0, 0x00F40BE5, 0xDDFD19FA, 0xE31DFC03, 0x0EEFEDFB);
	r7 = D(r7, s0_0_0, 0xFBFF0000, 0xFC070A06, 0xFD030408, 0xF708FB00);
	r0 = D(r0, s0_0_1, 0xFD0205FE, 0xF703FD0B, 0xF5FEFCF3, 0x01FBFAFD);
	r1 = D(r1, s0_0_1, 0xEF010201, 0x350C1B16, 0x0808F605, 0x2917001E);
	r2 = D(r2, s0_0_1, 0x09050D0F, 0xFAFF14E6, 0xFF03FB10, 0x1D0C0410);
	r3 = D(r3, s0_0_1, 0xF2FCFBDE, 0xC9F307D7, 0xDBFCFCD7, 0x08F2FB14);
	r4 = D(r4, s0_0_1, 0xD606E3D5, 0xF2FC0E15, 0x02FB050C, 0x0207EC11);
	r5 = D(r5, s0_0_1, 0xECFB0E08, 0x04030101, 0xFDDAFFE5, 0xDB030C08);
	r6 = D(r6, s0_0_1, 0x071DF514, 0xEE19FB2B, 0x120CFB1E, 0xEE100AF3);
	r7 = D(r7, s0_0_1, 0x00FF00FF, 0xFF090008, 0xFE1608F4, 0xF4FCF8FD);
	r0 = D(r0, s0_0_2, 0xF4F8F50A, 0xFF01FD0B, 0xF40E05F3, 0x04F7FE02);
	r1 = D(r1, s0_0_2, 0x01F903FC, 0x07060707, 0x150302FF, 0x09F9FAFC);
	r2 = D(r2, s0_0_2, 0x190704FA, 0x08F00204, 0x0B0602FE, 0x17DAFFFE);
	r3 = D(r3, s0_0_2, 0xFB1E0DFB, 0x09FE01F9, 0xFC1009FC, 0xFC230BE6);
	r4 = D(r4, s0_0_2, 0xC619F20A, 0xE3F41AFC, 0xF8F5FEFD, 0x0BFDFCFF);
	r5 = D(r5, s0_0_2, 0xFEFCFFFD, 0xFBFB05FA, 0xFC090902, 0x0CF4FFEC);
	r6 = D(r6, s0_0_2, 0x08F500FD, 0x17ECFA1A, 0x06031DFA, 0xF90204EB);
	r7 = D(r7, s0_0_2, 0xFCFE0000, 0xF60401FD, 0xE6091806, 0xF80406FA);
	r0 = D(r0, s0_1_0, 0x0504FEFA, 0xFB1DF3E2, 0xE4FE01F1, 0xF6FCF8FF);
	r1 = D(r1, s0_1_0, 0xFEFCF7F1, 0x010501EF, 0xFC02E908, 0xFAF8FB05);
	r2 = D(r2, s0_1_0, 0x13F8191A, 0x060E1817, 0xF804FA00, 0x12FF160C);
	r3 = D(r3, s0_1_0, 0xEA1BE914, 0xF4FDF90E, 0xDBF225F0, 0x0AECC0F3);
	r4 = D(r4, s0_1_0, 0xE2F9080E, 0xE1FB2FE5, 0x03FB15F8, 0xE2F100FF);
	r5 = D(r5, s0_1_0, 0x0803F7F1, 0xF8FF0600, 0x221A28FC, 0xFC0506F2);
	r6 = D(r6, s0_1_0, 0xE609FC0C, 0xFE00020E, 0x0C04F91D, 0xEF01FEED);
	r7 = D(r7, s0_1_0, 0x0001FF02, 0x07010EFE, 0x1507E011, 0x08020007);
	r0 = D(r0, s0_1_1, 0x05F2FAF0, 0x0BF00BEC, 0xEAF5FAF6, 0x0100FAF5);
	r1 = D(r1, s0_1_1, 0xFBF20B1D, 0xF3E30907, 0x020DFE0B, 0x14E5010E);
	r2 = D(r2, s0_1_1, 0xFB030DFA, 0xF3130BF4, 0xF5FDFEF4, 0xF506F0D9);
	r3 = D(r3, s0_1_1, 0xEE05DB1D, 0xECFBFBF3, 0xFA021B11, 0xEAF1C6FC);
	r4 = D(r4, s0_1_1, 0x0704FE12, 0xE7F338E4, 0xFEF410ED, 0x16F10BEC);
	r5 = D(r5, s0_1_1, 0x140B190C, 0x0A061416, 0xF619F1CD, 0xDBF502F7);
	r6 = D(r6, s0_1_1, 0x11FAFAFE, 0xF7F8F9EB, 0x1E0AECD1, 0x0E07FF08);
	r7 = D(r7, s0_1_1, 0xFF0003FD, 0xFCF714FF, 0x1A01FD01, 0xFC0506F7);
	r0 = D(r0, s0_1_2, 0x08FCF303, 0x01040605, 0x02FD0CF6, 0x0FFEF900);
	r1 = D(r1, s0_1_2, 0x19080507, 0x01FDFB01, 0xF4F908F7, 0xF6FE01FE);
	r2 = D(r2, s0_1_2, 0xEB040E0C, 0x060EEFFB, 0xF3FD0600, 0xF20203FD);
	r3 = D(r3, s0_1_2, 0x0A06020A, 0x13060418, 0x140EEE1A, 0x1109EDF9);
	r4 = D(r4, s0_1_2, 0x06EA0D03, 0xDC161604, 0xFA09FBED, 0xFAFF020D);
	r5 = D(r5, s0_1_2, 0x1713EF09, 0x0A08FA15, 0x301DF30C, 0x0308F1F7);
	r6 = D(r6, s0_1_2, 0x060210EB, 0xE5FB1BDD, 0xE4FB07EE, 0xFBF1FE05);
	r7 = D(r7, s0_1_2, 0x0600FE01, 0x15050700, 0x03130FE7, 0xFE020204);
	r0 = D(r0, s0_2_0, 0xF9050305, 0x0505F3FC, 0xFC010404, 0x00FF05FE);
	r1 = D(r1, s0_2_0, 0xFEFE0406, 0x10F4FAFA, 0xFB0AFAFF, 0xFC09F4FB);
	r2 = D(r2, s0_2_0, 0xE915FEFF, 0xF4040DED, 0x01020004, 0xFEFA15F6);
	r3 = D(r3, s0_2_0, 0x0AF8FDF5, 0x03FB0B07, 0xFDFE10FC, 0xF023F317);
	r4 = D(r4, s0_2_0, 0x050CFDFB, 0x00070CFA, 0x01F605FE, 0x06050110);
	r5 = D(r5, s0_2_0, 0x0210FCFD, 0x0301FCFD, 0x10F9F7F4, 0xFC05E501);
	r6 = D(r6, s0_2_0, 0x0507FE10, 0x15F80EFB, 0x0810F60A, 0xF40815FA);
	r7 = D(r7, s0_2_0, 0xFFFE03FD, 0x01070400, 0x02FEEF09, 0xFE010103);
	r0 = D(r0, s0_2_1, 0xFD030300, 0xFE1105EC, 0xFD05F506, 0x05FA0503);
	r1 = D(r1, s0_2_1, 0xF9FDFB04, 0x03FAF002, 0xF40BFB07, 0xFD00FB00);
	r2 = D(r2, s0_2_1, 0xF50D010A, 0x160808EC, 0x0100F600, 0x03F22517);
	r3 = D(r3, s0_2_1, 0x03F9F80D, 0x130101EE, 0x1A16FE00, 0x13FF0CFD);
	r4 = D(r4, s0_2_1, 0x0EDC0B17, 0x071AFCFE, 0xFCFE02F6, 0x1C0BFCDF);
	r5 = D(r5, s0_2_1, 0xF90AFDFB, 0x0C06F5FD, 0x15EE14FB, 0x0BF9E022);
	r6 = D(r6, s0_2_1, 0x1F1200D5, 0x160D00E4, 0xFC05F2D1, 0x160DED10);
	r7 = D(r7, s0_2_1, 0x00FD0301, 0x04090200, 0xF9F9FD0E, 0xFBFB0000);
	r0 = D(r0, s0_2_2, 0x0600FEFB, 0x0909F7FE, 0x0DE20E07, 0x04FB00FB);
	r1 = D(r1, s0_2_2, 0x02FCF705, 0xFEF803FF, 0xFC0BFB08, 0xF8080101);
	r2 = D(r2, s0_2_2, 0xFAFBFBF6, 0x06FCFFFF, 0x02070300, 0xEF19FF0D);
	r3 = D(r3, s0_2_2, 0x01040002, 0xFCF6FE08, 0xFF07EEFE, 0xF3F4080C);
	r4 = D(r4, s0_2_2, 0x010E1106, 0xDC070A18, 0x06FC0AFC, 0x08E80104);
	r5 = D(r5, s0_2_2, 0x0509F9FA, 0xFDF8FF02, 0x08010CF9, 0x021D01FF);
	r6 = D(r6, s0_2_2, 0xF8F51E11, 0x00010611, 0xFB121521, 0x01E61613);
	r7 = D(r7, s0_2_2, 0x01FE01FF, 0xFF000503, 0x060E0A09, 0xFE04FF04);
	r0 = D(r0, s1_0_0, 0x05FE04F2, 0x0510F705, 0x0101F1FD, 0x0002FC09);
	r1 = D(r1, s1_0_0, 0x040005E3, 0x0F04FE04, 0x0E0305FD, 0x17F90306);
	r2 = D(r2, s1_0_0, 0x03140801, 0xFEF90712, 0xFFFA0203, 0x08F7FF0B);
	r3 = D(r3, s1_0_0, 0x0A0B0600, 0x001010F1, 0x0AF104FC, 0xF505050E);
	r4 = D(r4, s1_0_0, 0xE2E21707, 0x0F131AFD, 0xFB0BEF05, 0x08FDF912);
	r5 = D(r5, s1_0_0, 0x05FCFCF2, 0x01F9FFFB, 0xE5091412, 0x10FDF50B);
	r6 = D(r6, s1_0_0, 0xE60E0700, 0x0A0D0419, 0x0405F8FB, 0xE6F6FB03);
	r7 = D(r7, s1_0_0, 0xFE03FF00, 0x000301FE, 0x06040A01, 0xFB02000B);
	r0 = D(r0, s1_0_1, 0x020BF1EE, 0xEF01FFE1, 0xFBEAF9FD, 0x0404021B);
	r1 = D(r1, s1_0_1, 0xFB0004EF, 0xFFED04E4, 0x150900F3, 0xFCFEF8D7);
	r2 = D(r2, s1_0_1, 0xEEE3F7DD, 0xFDFA17E3, 0x02000604, 0xE501E7ED);
	r3 = D(r3, s1_0_1, 0x14060328, 0x2021E217, 0x04070422, 0xFEFA1406);
	r4 = D(r4, s1_0_1, 0xDA2BDAED, 0xF1ED00D6, 0xF800F9F6, 0xF7F4F4E6);
	r5 = D(r5, s1_0_1, 0xF512F1FD, 0xF8FDFFFC, 0xF7E20D14, 0x16E60A05);
	r6 = D(r6, s1_0_1, 0xE6E3F7E8, 0x05EAE813, 0xFDF6DFE6, 0xECF0F916);
	r7 = D(r7, s1_0_1, 0x00020107, 0xFC00F9FB, 0x0BFF1414, 0x05FCFE28);
	r0 = D(r0, s1_0_2, 0x03FEF7E9, 0xFF030DFF, 0x05F7F5E2, 0x04000409);
	r1 = D(r1, s1_0_2, 0xFCFE04F4, 0xF1020EEF, 0x0111FD08, 0xF20BFCF0);
	r2 = D(r2, s1_0_2, 0x0A0A010D, 0x01000006, 0xFDFEFCEE, 0x010AFBE7);
	r3 = D(r3, s1_0_2, 0xF40608EE, 0xE6EBCBD1, 0xE6F4EDFF, 0xE8FC1303);
	r4 = D(r4, s1_0_2, 0xFADE180C, 0xF01A0F07, 0xFEFA0603, 0xF7E4FEF1);
	r5 = D(r5, s1_0_2, 0x01FA0304, 0x080A001C, 0x08F5090B, 0x1FF10D0A);
	r6 = D(r6, s1_0_2, 0x0101F91D, 0xFB070408, 0x1C070321, 0x07FDE90B);
	r7 = D(r7, s1_0_2, 0x010102F9, 0x0203F904, 0x0900FFFD, 0xFE00000E);
	r0 = D(r0, s1_1_0, 0xFF06FC00, 0x06FCF22B, 0xFDF40317, 0x04FC0A0B);
	r1 = D(r1, s1_1_0, 0x09FD0910, 0xFAF3F20C, 0x07F704F5, 0xFBFBF3F8);
	r2 = D(r2, s1_1_0, 0x01FB1709, 0x010606F0, 0x09F602FB, 0xF5ECF100);
	r3 = D(r3, s1_1_0, 0xFA01FC17, 0x01F90210, 0xF8F61315, 0x0DE6E80A);
	r4 = D(r4, s1_1_0, 0xE2082B28, 0x192612FD, 0x0A09FB06, 0xFBED061C);
	r5 = D(r5, s1_1_0, 0x0AF60204, 0x0400F8F8, 0x0A10DDED, 0xFD10EDE4);
	r6 = D(r6, s1_1_0, 0xFE0D0312, 0x0203F80C, 0x1808F8F3, 0x0213EC0E);
	r7 = D(r7, s1_1_0, 0x01010501, 0x0402FCEB, 0xFA010C08, 0xFEFA04FD);
	r0 = D(r0, s1_1_1, 0xEFF50327, 0xF800EDD0, 0x0803F6F7, 0xFEFD07E8);
	r1 = D(r1, s1_1_1, 0xF4F110E5, 0xFDFB24F8, 0x14020A0A, 0x15F9FD0A);
	r2 = D(r2, s1_1_1, 0xFF020A15, 0xEF00EE10, 0xF612F710, 0x140D082F);
	r3 = D(r3, s1_1_1, 0x15F9EEE9, 0xF504EB03, 0xF012F3FA, 0x04F1ED28);
	r4 = D(r4, s1_1_1, 0xD2FA14F9, 0x020809E8, 0xFA091315, 0xEC1211FE);
	r5 = D(r5, s1_1_1, 0xF60EE5C9, 0xE610E5F5, 0xD7EEDB07, 0xE11EC5F0);
	r6 = D(r6, s1_1_1, 0x1719DDE4, 0x251FF8F9, 0x0BF6F024, 0x160ACEDE);
	r7 = D(r7, s1_1_1, 0xF9FE003E, 0xFC01FD0D, 0xF0F3FAFB, 0xF60300F2);
	r0 = D(r0, s1_1_2, 0x020EFBFF, 0x04180E25, 0x06F7FAEB, 0x0100081B);
	r1 = D(r1, s1_1_2, 0x07090229, 0x0FEF0801, 0xFEFC06F7, 0x00F9FE00);
	r2 = D(r2, s1_1_2, 0xE31414FF, 0x05040413, 0x01FEF2EE, 0xCCF8FBF9);
	r3 = D(r3, s1_1_2, 0x04FBF3FA, 0xF80DEB04, 0x090109FF, 0x06FB0602);
	r4 = D(r4, s1_1_2, 0xF0F51E25, 0x10F91415, 0x091308F2, 0x02FE0207);
	r5 = D(r5, s1_1_2, 0x10070410, 0x00042441, 0x171119E7, 0xEC031906);
	r6 = D(r6, s1_1_2, 0xEC04EEEE, 0xEDF8D7DB, 0xEE0B02FD, 0xFFFAF8E4);
	r7 = D(r7, s1_1_2, 0xFF0003FB, 0x0503052B, 0x0D0D1626, 0x02FCFAFC);
	r0 = D(r0, s1_2_0, 0xFCFB0008, 0x0EE004F7, 0xF8020405, 0x04FC00F6);
	r1 = D(r1, s1_2_0, 0x12FB0302, 0x000507FE, 0x0807FD03, 0x06FAFE00);
	r2 = D(r2, s1_2_0, 0x04FC0E00, 0xFAF7070E, 0x07FD04FE, 0xE4FC0207);
	r3 = D(r3, s1_2_0, 0x0A02FFFA, 0xF90706E9, 0x0012FDED, 0xF60D2203);
	r4 = D(r4, s1_2_0, 0x0BF4F2F9, 0xEC140205, 0xFC05F9FF, 0x04FEFFF4);
	r5 = D(r5, s1_2_0, 0x05FEF502, 0x0104F9FD, 0xF8FD0FFA, 0xF5FE0902);
	r6 = D(r6, s1_2_0, 0x1A0904E7, 0xF90B04E5, 0x07FBF908, 0xF8E7040E);
	r7 = D(r7, s1_2_0, 0x00010001, 0xFB050501, 0x09FAF6F5, 0x01010007);
	r0 = D(r0, s1_2_1, 0x0803FEE9, 0x07F5F6F1, 0xF5010704, 0xFC0002F8);
	r1 = D(r1, s1_2_1, 0xFE03FAF4, 0x080400F5, 0x050203FE, 0xFF04FE04);
	r2 = D(r2, s1_2_1, 0x01000607, 0x030AF7ED, 0xFF02FEF6, 0xE2F513E8);
	r3 = D(r3, s1_2_1, 0xF8FA020E, 0xFEF5FA08, 0x1B00E908, 0x0109DB02);
	r4 = D(r4, s1_2_1, 0x1D07F800, 0x261205E1, 0x0AF8FCFA, 0x08EEF9FD);
	r5 = D(r5, s1_2_1, 0xF7F90201, 0x060A02F6, 0xE4FFF4FB, 0xD80A1609);
	r6 = D(r6, s1_2_1, 0x1900F622, 0x03060516, 0x0F08F7FD, 0x0112F6F3);
	r7 = D(r7, s1_2_1, 0xFCFEFF07, 0xFCFEFE0A, 0xE9F1FD08, 0x00FB04ED);
	r0 = D(r0, s1_2_2, 0x00090008, 0xF9FEFC0D, 0xFEEEFB00, 0xFE020301);
	r1 = D(r1, s1_2_2, 0x0309FD10, 0x08F00703, 0x03FB02FC, 0x01FF0901);
	r2 = D(r2, s1_2_2, 0x06F801E6, 0xF40207EE, 0x01FE04FF, 0x240EFB03);
	r3 = D(r3, s1_2_2, 0xFEF8F804, 0x0D04FCF7, 0x00FCFB00, 0xEB1A0E12);
	r4 = D(r4, s1_2_2, 0x09F80CF3, 0x0DFC0504, 0xF7FF00F9, 0x08EBF707);
	r5 = D(r5, s1_2_2, 0xF9F9FD08, 0xFE030518, 0x0F09E81D, 0x1BF60412);
	r6 = D(r6, s1_2_2, 0x0EF103E1, 0x0FE100E5, 0xE9EBE9EB, 0x05FAF41F);
	r7 = D(r7, s1_2_2, 0x00FF0102, 0xFB0000F8, 0x02FD1605, 0x00FDFD01);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0100FE07, 0xFF0DF4FB, 0xFD15F103, 0xFF01FFFE);
	r1 = D(r1, s0_0_0, 0xFF06040C, 0xF7EA2BF9, 0x06FA0602, 0x02F00FFC);
	r2 = D(r2, s0_0_0, 0x0801FDE9, 0xF506F604, 0xFAFFFEFF, 0xFAFFF0F7);
	r3 = D(r3, s0_0_0, 0x0003E302, 0x130808F4, 0xF907F5E7, 0x0407D8FD);
	r4 = D(r4, s0_0_0, 0xE913FD03, 0xFCF315F9, 0x05F2FBF6, 0x07EA1EF4);
	r5 = D(r5, s0_0_0, 0xF7FC03FB, 0x0306FF00, 0xFA12E50E, 0x090BF602);
	r6 = D(r6, s0_0_0, 0x0CFA0DE4, 0xECF80206, 0x0DEE0DF3, 0xE61601D0);
	r7 = D(r7, s0_0_0, 0x01000100, 0x03F9FD00, 0x05F90409, 0xFCFF0204);
	r0 = D(r0, s0_0_1, 0x02FF0AF1, 0x0CFDFB05, 0xFE0703FB, 0xFBF90402);
	r1 = D(r1, s0_0_1, 0x02FF0306, 0x18E1FD01, 0x02E8FE03, 0x08EEEAFF);
	r2 = D(r2, s0_0_1, 0x0FF90414, 0xFA18DA01, 0x050002FF, 0xF6FC0315);
	r3 = D(r3, s0_0_1, 0xEE190900, 0xFAFB0026, 0xE40B0902, 0xE6150F00);
	r4 = D(r4, s0_0_1, 0x1A20FCFD, 0xF7100003, 0xFF0CF30A, 0x0BFEE810);
	r5 = D(r5, s0_0_1, 0x0509F4F9, 0xFD0CFAF7, 0xFCFD0CEB, 0xFB10FA03);
	r6 = D(r6, s0_0_1, 0xE6FEFAF6, 0x00F4F111, 0x100CF008, 0x0204FBED);
	r7 = D(r7, s0_0_1, 0x01FC03FF, 0x0BF6FA00, 0x00FB0BFE, 0x00F807FD);
	r0 = D(r0, s0_0_2, 0x0AFFFC04, 0xF1FCF7FC, 0x04060112, 0x0701FC02);
	r1 = D(r1, s0_0_2, 0xFE06FE11, 0x13DCF801, 0xFBEDFEF8, 0x00E7FCDF);
	r2 = D(r2, s0_0_2, 0xF7FBEAFC, 0xECFD0303, 0x0201F8FC, 0x070B00FB);
	r3 = D(r3, s0_0_2, 0x00FCFFF1, 0x16F40BFA, 0x000DECE0, 0x180CF93E);
	r4 = D(r4, s0_0_2, 0xEF1CF20A, 0xFB11150A, 0x01020409, 0xF71107F2);
	r5 = D(r5, s0_0_2, 0x01EE0703, 0x03FD00FA, 0xFFEFF50A, 0x0AF7F20D);
	r6 = D(r6, s0_0_2, 0x0216FEDA, 0xECEF02E9, 0xFEEBE9F7, 0x031B03E0);
	r7 = D(r7, s0_0_2, 0x02030003, 0xFF020102, 0x030D040A, 0xFFFC0404);
	r0 = D(r0, s0_1_0, 0xFBFE00FC, 0xEE17FEFF, 0xF3FD1502, 0x010103FC);
	r1 = D(r1, s0_1_0, 0xF60906FA, 0xECB3FF09, 0xFAFBFBFA, 0x0318F5F3);
	r2 = D(r2, s0_1_0, 0x071010F1, 0xF405F607, 0xFDFB03FA, 0x0106FB12);
	r3 = D(r3, s0_1_0, 0x1107010D, 0xFEFE0303, 0x1FFEF3F8, 0x062AEEF5);
	r4 = D(r4, s0_1_0, 0x182DD6E8, 0xFF16EDF3, 0x1907E40B, 0x1B16E3F4);
	r5 = D(r5, s0_1_0, 0xFCF614FC, 0xF7FE07FD, 0x0BEFFC19, 0x16F012F5);
	r6 = D(r6, s0_1_0, 0x0B0A05DE, 0x010303F2, 0x1405EBF7, 0xFC001DD2);
	r7 = D(r7, s0_1_0, 0x01FE0201, 0x01FCFF07, 0xFBEC0CF7, 0xFAFBFF05);
	r0 = D(r0, s0_1_1, 0x11F404F4, 0x0F09030C, 0x0E041916, 0x0009020D);
	r1 = D(r1, s0_1_1, 0x0007F3FB, 0xE3EE0A17, 0x00C3FCFE, 0xF90EE403);
	r2 = D(r2, s0_1_1, 0xF0F9E809, 0xFD1CEE03, 0xF6030906, 0xE8FFF8F8);
	r3 = D(r3, s0_1_1, 0x130318FC, 0x18F6F412, 0xFFF90F02, 0x0238DF03);
	r4 = D(r4, s0_1_1, 0xFA0329E6, 0xF0F6D4F0, 0x151BE8EB, 0xFB29E60D);
	r5 = D(r5, s0_1_1, 0xFE09F310, 0x1404FAFA, 0x2C0E18F8, 0x20FDD20C);
	r6 = D(r6, s0_1_1, 0x0A02E404, 0xF0F0E011, 0x1119DFE8, 0x09F7FD1C);
	r7 = D(r7, s0_1_1, 0x05FFFF02, 0xFCFFFAFF, 0x170EECEA, 0x03F20800);
	r0 = D(r0, s0_1_2, 0xFAFB0404, 0x0F0C0110, 0xEF04FBF6, 0x0411FF05);
	r1 = D(r1, s0_1_2, 0xF403FC0D, 0x220CEF05, 0xFFFEFAFE, 0x10F602F3);
	r2 = D(r2, s0_1_2, 0xE0E70FF5, 0x01F2051D, 0xFBF906F7, 0xF0E80DF1);
	r3 = D(r3, s0_1_2, 0xFEE9EFEF, 0x010CF9F7, 0x0A1B000F, 0x03280A2B);
	r4 = D(r4, s0_1_2, 0xF81608F5, 0xFD05100D, 0x090306FD, 0x071F0602);
	r5 = D(r5, s0_1_2, 0x03EEF808, 0x010A0507, 0xFD06F224, 0xFD1A0213);
	r6 = D(r6, s0_1_2, 0x02D903D4, 0xF6F302E1, 0xFC030FF6, 0x0AF100E4);
	r7 = D(r7, s0_1_2, 0x0105FE02, 0xFC00F505, 0xE727F912, 0x00F8FDFD);
	r0 = D(r0, s0_2_0, 0xF9F20200, 0x0709050A, 0xFFFF0503, 0x040501FB);
	r1 = D(r1, s0_2_0, 0xF8FC05F4, 0x0AFB030A, 0x0AFAFF05, 0x05F0FF00);
	r2 = D(r2, s0_2_0, 0x05040503, 0xFA08F0FF, 0xFDF90403, 0xF7F60005);
	r3 = D(r3, s0_2_0, 0xF61A0CF1, 0xE001FC05, 0xFC0801F5, 0x0DF5ED12);
	r4 = D(r4, s0_2_0, 0x2A2B13E3, 0xF0F900EE, 0xFF05F2FD, 0x0F130AF9);
	r5 = D(r5, s0_2_0, 0x0008FCF1, 0xF4FBFB00, 0xEDF50B0E, 0xFD010B12);
	r6 = D(r6, s0_2_0, 0x060BF200, 0xFE1AFC08, 0xEEFA040F, 0xFE3212EF);
	r7 = D(r7, s0_2_0, 0x010301FE, 0x01F80307, 0x010004F7, 0x0100FEFD);
	r0 = D(r0, s0_2_1, 0x0EF90FFA, 0x03F40500, 0x0BE7F3F5, 0xFB0804FB);
	r1 = D(r1, s0_2_1, 0x05F0F701, 0x0D05FF0E, 0x06050408, 0x0AF51503);
	r2 = D(r2, s0_2_1, 0x08F40AFD, 0x0F0F0B0D, 0x0202010C, 0x00DD2205);
	r3 = D(r3, s0_2_1, 0x0605FD03, 0x130A0516, 0xF329ED00, 0x0C04FBCE);
	r4 = D(r4, s0_2_1, 0xF50ADCE6, 0x00FAFBE8, 0x120CF501, 0x1223FB0D);
	r5 = D(r5, s0_2_1, 0x00020007, 0xFD08FF00, 0xF1FE18DD, 0x02FEE608);
	r6 = D(r6, s0_2_1, 0xF9FE150A, 0xFB070D08, 0xE7120FFF, 0xEFFB1406);
	r7 = D(r7, s0_2_1, 0xFD04FFFE, 0xFAF604FF, 0xFB1C07F5, 0xF906FF03);
	r0 = D(r0, s0_2_2, 0x07F40804, 0xE20BFDF0, 0xF4080705, 0xFF06FC03);
	r1 = D(r1, s0_2_2, 0x03F0FA01, 0xF909020A, 0x010500FF, 0x06FDF7FE);
	r2 = D(r2, s0_2_2, 0x0CFBF8F6, 0x00F502FD, 0xFF05F908, 0x2C1FE611);
	r3 = D(r3, s0_2_2, 0x03FAF6F1, 0x0514F600, 0x0901FEFF, 0xFB090CFB);
	r4 = D(r4, s0_2_2, 0x00080A0C, 0xFB07FCF9, 0xF5E80FF4, 0xF80515FE);
	r5 = D(r5, s0_2_2, 0x06FF0104, 0x02F201F7, 0xFAFF0003, 0x02061FF5);
	r6 = D(r6, s0_2_2, 0xE4E509EA, 0xDBF5FFFE, 0xE0ED02F3, 0x00E5FCF8);
	r7 = D(r7, s0_2_2, 0xFD01FE00, 0xFAF60100, 0xF4FB02FE, 0x00000302);
	r0 = D(r0, s1_0_0, 0xFD01FB09, 0x0F09FC0D, 0x00041014, 0x01FD050B);
	r1 = D(r1, s1_0_0, 0xFDFB0A02, 0x03EC0715, 0xFDFAFAFD, 0xFCFCEE0B);
	r2 = D(r2, s1_0_0, 0xF4FB2A09, 0xF5FAFD0B, 0x03030707, 0xF3F800F4);
	r3 = D(r3, s1_0_0, 0x190405FC, 0x0BECF9FB, 0xFBFD0900, 0x0404DA1B);
	r4 = D(r4, s1_0_0, 0x1DE2170A, 0x05F6EE10, 0x0401EA0E, 0x0D03FEF7);
	r5 = D(r5, s1_0_0, 0x02F7060E, 0x05FDF908, 0xF51B1111, 0x1209F502);
	r6 = D(r6, s1_0_0, 0xEFFF10FD, 0xF5170C0B, 0x02EA0F07, 0xFA110DFB);
	r7 = D(r7, s1_0_0, 0xFF000400, 0x0004FDF5, 0x0504E310, 0xFEFE05F3);
	r0 = D(r0, s1_0_1, 0x02FEFE05, 0x12FBF312, 0x020F0C00, 0x07FEFFFC);
	r1 = D(r1, s1_0_1, 0x01FBFC07, 0x0AD9D281, 0xFCE9FD08, 0x0006E7F3);
	r2 = D(r2, s1_0_1, 0x0E1B21FB, 0xE602F008, 0x030408F6, 0x070E02F5);
	r3 = D(r3, s1_0_1, 0x00FA020A, 0x15EDF20F, 0xF7F8030D, 0x2909D3F6);
	r4 = D(r4, s1_0_1, 0x1411EF0F, 0x141CBCFE, 0x040DE80D, 0x1C03FE00);
	r5 = D(r5, s1_0_1, 0x0107F4F4, 0xFEF807FB, 0x0117F904, 0x060C050B);
	r6 = D(r6, s1_0_1, 0x0617EF04, 0x0623F7F8, 0x020FECF8, 0x0E1FE0F9);
	r7 = D(r7, s1_0_1, 0x0101FF06, 0x030501FC, 0x06FDF405, 0xFBF705FC);
	r0 = D(r0, s1_0_2, 0x0305FE03, 0x07F9EB03, 0xFC0EEB04, 0x0400FBFB);
	r1 = D(r1, s1_0_2, 0x02FB0D00, 0x14FDFE13, 0xFAFF01FC, 0xFE03F604);
	r2 = D(r2, s1_0_2, 0xF4EF17F8, 0xF0FAFC09, 0x0303FF02, 0xFEFD25FD);
	r3 = D(r3, s1_0_2, 0x020C0408, 0x02FA0517, 0x030412FC, 0xF602FCF3);
	r4 = D(r4, s1_0_2, 0x230E07FB, 0x0615E60E, 0x06FFF502, 0x0207FEF6);
	r5 = D(r5, s1_0_2, 0x0AF60404, 0xFFF805FB, 0xF5FCF7F9, 0xE8FAFE00);
	r6 = D(r6, s1_0_2, 0xEF0B00E1, 0x06FEFBF6, 0xF8FE38F9, 0xF80908F0);
	r7 = D(r7, s1_0_2, 0x0002FE01, 0x050300FE, 0xFD03FF00, 0xFB0504F7);
	r0 = D(r0, s1_1_0, 0x03FC050D, 0x0AF3FE17, 0x0FF82402, 0x0AFE0004);
	r1 = D(r1, s1_1_0, 0xF8F60304, 0x0D0919E6, 0xF3FCF104, 0xFEFC0719);
	r2 = D(r2, s1_1_0, 0x08F5040A, 0xF0FC0203, 0xFFFC020D, 0xF9122400);
	r3 = D(r3, s1_1_0, 0x120B0CEA, 0x23E5D6FD, 0x17F700F9, 0x37ECC7F7);
	r4 = D(r4, s1_1_0, 0x301E10D1, 0xFB1E18E6, 0x1609E5FA, 0x1B120616);
	r5 = D(r5, s1_1_0, 0xFDF20AF5, 0x0D09FEEB, 0x080A0CF5, 0x1D0DFCE7);
	r6 = D(r6, s1_1_0, 0x0707F518, 0x19F528EF, 0x02F70D1A, 0xF6F62024);
	r7 = D(r7, s1_1_0, 0x02030205, 0xF4030206, 0xF6ED06FC, 0xF5FC0510);
	r0 = D(r0, s1_1_1, 0x07F51014, 0xF7FC1D0F, 0x01F2F8FF, 0x100BF8FC);
	r1 = D(r1, s1_1_1, 0xF8F70113, 0xEAF81E0D, 0xD5F7F800, 0xEFFD0A22);
	r2 = D(r2, s1_1_1, 0xE7E30D0C, 0x110DF107, 0x04010132, 0xF5DB1A00);
	r3 = D(r3, s1_1_1, 0x11EEEF07, 0x0918EAFD, 0x250BF7F3, 0x0DDFF1E5);
	r4 = D(r4, s1_1_1, 0x2D0E09D4, 0x0815EE12, 0xF2FBF2F5, 0x12070729);
	r5 = D(r5, s1_1_1, 0x0C15FDEC, 0xF91002C7, 0x341403F4, 0x0328D5F7);
	r6 = D(r6, s1_1_1, 0xE3FDF702, 0x030AE219, 0xEDF4EDFB, 0xF826FFD8);
	r7 = D(r7, s1_1_1, 0x0209FE24, 0xF301001C, 0xF112ECFD, 0x05051907);
	r0 = D(r0, s1_1_2, 0x05FC0E0B, 0x00FFE6F9, 0xFBF8FF01, 0x0404FFF9);
	r1 = D(r1, s1_1_2, 0xFDF903FC, 0x00FF1904, 0xEC02F504, 0xF90AFC08);
	r2 = D(r2, s1_1_2, 0xEF180107, 0xFA00FFE2, 0xFD01FB07, 0x0F05EB09);
	r3 = D(r3, s1_1_2, 0xF0E9F203, 0x07CDEE18, 0x00E11705, 0x0D0107DE);
	r4 = D(r4, s1_1_2, 0x19D0F2E7, 0x1628F801, 0x0C010810, 0x0102F8FD);
	r5 = D(r5, s1_1_2, 0xFB07FA09, 0xFF0411EF, 0xF9E91510, 0x040D1423);
	r6 = D(r6, s1_1_2, 0xCA0BEC0E, 0xE20FEF04, 0xE9183704, 0x071DFD03);
	r7 = D(r7, s1_1_2, 0xFF030004, 0xFBFB02F4, 0xFBF518FB, 0x03F8FC01);
	r0 = D(r0, s1_2_0, 0xF7010900, 0x0EF8FFF1, 0x24F80902, 0x08FB00FF);
	r1 = D(r1, s1_2_0, 0x0EF3FEFE, 0x11FDFF10, 0x01FC0E05, 0xF8051001);
	r2 = D(r2, s1_2_0, 0x100909E9, 0xF909E7F3, 0x05FC04FF, 0xD41C21F2);
	r3 = D(r3, s1_2_0, 0xE8FBF706, 0x07E71018, 0x06F7E715, 0x1401160C);
	r4 = D(r4, s1_2_0, 0x14EB0E19, 0x091AEEF3, 0x0702E003, 0x2A04E4F2);
	r5 = D(r5, s1_2_0, 0x06F50703, 0x030312FE, 0xE706D906, 0x0AF3041B);
	r6 = D(r6, s1_2_0, 0x29F70E0A, 0x070DD616, 0x0D2509EB, 0x0D0E180A);
	r7 = D(r7, s1_2_0, 0x010201FF, 0xFF0700F5, 0x01F700FD, 0xFAFC02F8);
	r0 = D(r0, s1_2_1, 0x08F406FB, 0x07FA04E5, 0x0FF507F7, 0x0206F9FB);
	r1 = D(r1, s1_2_1, 0xFCFCEB04, 0x10FAFD06, 0xF9F10924, 0x06EA180C);
	r2 = D(r2, s1_2_1, 0xEF260101, 0xFE18E002, 0xF308FE10, 0xFB053902);
	r3 = D(r3, s1_2_1, 0xFBFF0C05, 0xFEFF00EF, 0xEE14F7FC, 0x27E40A05);
	r4 = D(r4, s1_2_1, 0xF1F4FF01, 0xE22218EE, 0x1321E7F5, 0x220BDEF9);
	r5 = D(r5, s1_2_1, 0xF308F9D7, 0xF6F612E9, 0x1036D1DC, 0xE40DF9E8);
	r6 = D(r6, s1_2_1, 0xF32EF50B, 0xEF24FE00, 0x0CF4070A, 0xFF201521);
	r7 = D(r7, s1_2_1, 0xFC06FE08, 0xF5FC07FA, 0xFF0608F0, 0x070301F5);
	r0 = D(r0, s1_2_2, 0x08FD0003, 0x03FBF6EF, 0x08F907F2, 0x0105FBFB);
	r1 = D(r1, s1_2_2, 0xFB0309EC, 0x000E1500, 0x15FAF304, 0x060302FC);
	r2 = D(r2, s1_2_2, 0x0005DE03, 0xEBF4F90A, 0x01F4050E, 0x10D92803);
	r3 = D(r3, s1_2_2, 0xFAFCF703, 0xF3E810FD, 0xF72307F1, 0x02041AEE);
	r4 = D(r4, s1_2_2, 0x01DB20F7, 0xFC12EAE8, 0x0B1003FD, 0x18110DE3);
	r5 = D(r5, s1_2_2, 0xFE0603ED, 0x0EF8F0E4, 0xD32E0EE7, 0xF9E209E4);
	r6 = D(r6, s1_2_2, 0xFD071A1A, 0xF9F10A16, 0x13FDE803, 0xF11111F6);
	r7 = D(r7, s1_2_2, 0xFF030000, 0xFAFE04FD, 0xFD0DEFE9, 0x00FFFCFF);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFB03EAF7, 0x030BF300, 0xFEFA0A02, 0xFDF700FE);
	r1 = D(r1, s0_0_0, 0x0409FEF9, 0xF7FB1F0E, 0x04FB0905, 0x0A020E05);
	r2 = D(r2, s0_0_0, 0x0820EAE5, 0xFF06F4FF, 0xFD01F4FD, 0x062A0C02);
	r3 = D(r3, s0_0_0, 0x01D30712, 0x03F21B08, 0xF1FAF5FD, 0xE8EEFEE9);
	r4 = D(r4, s0_0_0, 0x051DFBFA, 0xFE1FF20C, 0xFBFDFDFF, 0x060C220E);
	r5 = D(r5, s0_0_0, 0xFFFA0602, 0xFB02F3FE, 0xD6ECF6F6, 0xFAF3CDF9);
	r6 = D(r6, s0_0_0, 0xFEFFE300, 0xEFE80AFE, 0xEF1AF109, 0xE607FDEE);
	r7 = D(r7, s0_0_0, 0x00FE0200, 0x0305FEFF, 0xFDF80D06, 0x01010302);
	r0 = D(r0, s0_0_1, 0xFE11F900, 0x00F90F05, 0xEC010310, 0xF9F702FA);
	r1 = D(r1, s0_0_1, 0x0D13F6FB, 0xF4E4EAFB, 0x050CFC0F, 0x0302FC12);
	r2 = D(r2, s0_0_1, 0x0400E21A, 0x07EF0EFB, 0x04FF0802, 0x0BFB03F6);
	r3 = D(r3, s0_0_1, 0xFC0AFE02, 0xFC1804DF, 0x031209EA, 0x07ED2107);
	r4 = D(r4, s0_0_1, 0xFB1D11F5, 0xFC06E312, 0xF9FB0B09, 0xFFFAF312);
	r5 = D(r5, s0_0_1, 0xF0000E06, 0xFDFF0706, 0x08E002F6, 0x05F722E3);
	r6 = D(r6, s0_0_1, 0x04F2F8F6, 0xFB01F809, 0x06062512, 0xFEDDE703);
	r7 = D(r7, s0_0_1, 0x00FF01FD, 0x07020603, 0x060DF6F1, 0x080603F4);
	r0 = D(r0, s0_0_2, 0xFB030500, 0x07FA00F9, 0xF2020EFD, 0x01F808FE);
	r1 = D(r1, s0_0_2, 0xFE0DFCF6, 0x0301130B, 0x0A080508, 0x0CF6FD15);
	r2 = D(r2, s0_0_2, 0x0CF1E9F5, 0xFD0707EB, 0x0001FB06, 0xF9FFFEFB);
	r3 = D(r3, s0_0_2, 0x0600F406, 0x03071003, 0xFE1104F0, 0x08C80EE1);
	r4 = D(r4, s0_0_2, 0xED200703, 0xF2FF0AF6, 0xFCFDF801, 0x07031F09);
	r5 = D(r5, s0_0_2, 0x0102F808, 0x0206F7FD, 0xEF0706E7, 0xF702FAED);
	r6 = D(r6, s0_0_2, 0x01EEF806, 0x0BEC090B, 0xFCE4C2FB, 0x01FBFCFF);
	r7 = D(r7, s0_0_2, 0x000002FE, 0xFD060206, 0x05101013, 0xFF05FAFC);
	r0 = D(r0, s0_1_0, 0x06FEEEF8, 0x0AE90DFF, 0x070C0AF3, 0x0BFD0302);
	r1 = D(r1, s0_1_0, 0x0706F9FB, 0xFBF51DFB, 0xFF19FFF1, 0x0A0EF9F7);
	r2 = D(r2, s0_1_0, 0x130611EE, 0x120B02F5, 0x05FD02FD, 0xF2E6D20D);
	r3 = D(r3, s0_1_0, 0x11EE0D10, 0xFA0BF304, 0xFD0018F4, 0x20F8F60A);
	r4 = D(r4, s0_1_0, 0x14F0EF03, 0xE51FE9FD, 0xF8F7FB09, 0xFAEB08F0);
	r5 = D(r5, s0_1_0, 0x0D070300, 0xFF09010D, 0xF6D8F61A, 0x0802190E);
	r6 = D(r6, s0_1_0, 0x0703F1F0, 0xF9EF28F6, 0xF103D6F7, 0x010505F5);
	r7 = D(r7, s0_1_0, 0x0100FD01, 0xF80601FF, 0x10FACA0A, 0x01FCF401);
	r0 = D(r0, s0_1_1, 0x040005F6, 0xCBF9010B, 0xF700FBF3, 0x04FD0606);
	r1 = D(r1, s0_1_1, 0xFBFDF100, 0xF1E50A02, 0x1C110B09, 0x17F8F601);
	r2 = D(r2, s0_1_1, 0x15FCF605, 0x040F1EF3, 0xF5F40203, 0xF804EBE8);
	r3 = D(r3, s0_1_1, 0x05EE0114, 0xFCFDD522, 0xF216FA1B, 0x200516FB);
	r4 = D(r4, s0_1_1, 0x371BA0F3, 0x021AF411, 0xE50F0E09, 0xE803FEEF);
	r5 = D(r5, s0_1_1, 0xDEFE1D02, 0xF40F1A05, 0xF1E71304, 0x0900111A);
	r6 = D(r6, s0_1_1, 0xE3D7E916, 0xE5CBF60C, 0x10EC0406, 0x1ABAFAF7);
	r7 = D(r7, s0_1_1, 0x02070304, 0x04001402, 0x00ECFA01, 0xFA0CFA01);
	r0 = D(r0, s0_1_2, 0x0302FBF2, 0x0BE7FAFF, 0x0310F5F3, 0x02F80308);
	r1 = D(r1, s0_1_2, 0x0104FC01, 0x00F90500, 0x04070B06, 0xFD00FC05);
	r2 = D(r2, s0_1_2, 0xFBF5FB07, 0xFE050801, 0xFC0907FD, 0xED291802);
	r3 = D(r3, s0_1_2, 0x09FF00F6, 0x0415FFF5, 0x2EE613FF, 0x27002013);
	r4 = D(r4, s0_1_2, 0x0126EAF0, 0x1C050823, 0xF5FEEF08, 0x170A11FA);
	r5 = D(r5, s0_1_2, 0x01F3FA09, 0x110D06FB, 0x1EE6FDDD, 0x10F21406);
	r6 = D(r6, s0_1_2, 0x0402FA01, 0xF40FF525, 0xFDEF0007, 0x05F9F81D);
	r7 = D(r7, s0_1_2, 0x02020204, 0x0202FA05, 0x18FCFC04, 0x0105FFFF);
	r0 = D(r0, s0_2_0, 0x0600EC0B, 0x0D011DF4, 0xF7FAFF07, 0x040703FA);
	r1 = D(r1, s0_2_0, 0x060702FB, 0xFC02FEFF, 0xFF0905FD, 0xFA05F5FF);
	r2 = D(r2, s0_2_0, 0xFFFCF9F7, 0x10F0E605, 0x010209FE, 0x12F60FF1);
	r3 = D(r3, s0_2_0, 0xF4FB1001, 0x000EF7FB, 0x12240EE9, 0xD8FE011B);
	r4 = D(r4, s0_2_0, 0x0804D5F6, 0xF4FEF31B, 0xF6000608, 0xF4092503);
	r5 = D(r5, s0_2_0, 0x13FCF2FA, 0x00F7FE02, 0xF0D2FB0E, 0xF8FF2204);
	r6 = D(r6, s0_2_0, 0xF8EE12F5, 0xEFFD1CFB, 0xE1D2DB21, 0x080824EF);
	r7 = D(r7, s0_2_0, 0x000000FD, 0xF7FC0001, 0xFFFDE007, 0x06FDF9FF);
	r0 = D(r0, s0_2_1, 0x070F0C00, 0x06020313, 0x0E000CF6, 0x0303FD03);
	r1 = D(r1, s0_2_1, 0x0808F5FE, 0x03FC0707, 0xFF0DEC0C, 0x0300EDFB);
	r2 = D(r2, s0_2_1, 0x06160710, 0xFD101404, 0x02F7FC01, 0x000EED08);
	r3 = D(r3, s0_2_1, 0x02EEEE17, 0x17FFFA08, 0xF20406FF, 0x061A2FE7);
	r4 = D(r4, s0_2_1, 0xE6F615FA, 0xED1D83DC, 0x01FE16F7, 0x0B041CF5);
	r5 = D(r5, s0_2_1, 0xFFF62007, 0xF101FDF9, 0xD1042FED, 0xACF7FA0A);
	r6 = D(r6, s0_2_1, 0xF3C9F806, 0xE3F7FA02, 0xFFFFF2F1, 0xE6B6D2FD);
	r7 = D(r7, s0_2_1, 0x0100FD04, 0xFB050600, 0x0BFD2301, 0x01FDFF07);
	r0 = D(r0, s0_2_2, 0x01070201, 0xF9F71402, 0xFE010406, 0x01FD0300);
	r1 = D(r1, s0_2_2, 0xFDFBF6F8, 0xF2FF0E03, 0xFA060407, 0xFFFAF9FE);
	r2 = D(r2, s0_2_2, 0x0BFB0A08, 0x070809F4, 0xFB05FEFF, 0x26F3FDEB);
	r3 = D(r3, s0_2_2, 0x03EC0601, 0xFFFD0002, 0xF0F6FB0C, 0xF7F609FE);
	r4 = D(r4, s0_2_2, 0x130002FC, 0xF917FF13, 0xFC06060E, 0xFB051A08);
	r5 = D(r5, s0_2_2, 0xF903FB01, 0xF002F702, 0xF3E9FE08, 0xDB222207);
	r6 = D(r6, s0_2_2, 0xE9FBE9F0, 0xFBF316FE, 0x033703F5, 0xF1E9CDE1);
	r7 = D(r7, s0_2_2, 0x01FF01FF, 0xFB0200FA, 0xEDFB0B05, 0x0401FC00);
	r0 = D(r0, s1_0_0, 0xFAFEEF01, 0x040900EE, 0x04090BF7, 0xFA0106FC);
	r1 = D(r1, s1_0_0, 0xF803FA0B, 0xEFFD001A, 0x07020D00, 0xFFFB00FF);
	r2 = D(r2, s1_0_0, 0x1300EA0F, 0x14060003, 0x02010600, 0x08E4F22D);
	r3 = D(r3, s1_0_0, 0x04F80301, 0xF2FD0FF6, 0x00F92B14, 0xFD080010);
	r4 = D(r4, s1_0_0, 0xDBD8FB1D, 0xE805CF02, 0xF6FAF5F2, 0xE7F8F7DF);
	r5 = D(r5, s1_0_0, 0xFA00FFFF, 0xFEFDFCF3, 0x18FF14FD, 0x07030800);
	r6 = D(r6, s1_0_0, 0xE607F7F4, 0x020C1C00, 0xEDFE0608, 0xFC09FE07);
	r7 = D(r7, s1_0_0, 0xFD000201, 0x0BFE0402, 0xFC040EEE, 0x0900F8FD);
	r0 = D(r0, s1_0_1, 0xF7FAF3FB, 0xF9090CFF, 0xF4E51BFF, 0x0406FCF4);
	r1 = D(r1, s1_0_1, 0xFAFCFF0C, 0x0D231530, 0x0AF7F409, 0x0F0B0701);
	r2 = D(r2, s1_0_1, 0x1B0BFF00, 0x15041E07, 0xF9030300, 0xFB2DF1FF);
	r3 = D(r3, s1_0_1, 0x03ED3902, 0xEEEA06D0, 0x01E90913, 0xFD0317DD);
	r4 = D(r4, s1_0_1, 0xCE1201FD, 0xE71FE1F8, 0x05FAF0FF, 0xF81A1EE8);
	r5 = D(r5, s1_0_1, 0x05F20605, 0xFAFAF0FC, 0xD1EB28E7, 0x04F0F9F2);
	r6 = D(r6, s1_0_1, 0xF918FEF0, 0xEDFE21F3, 0xFB19FCFC, 0xFBF6131A);
	r7 = D(r7, s1_0_1, 0x0000FE02, 0x03FDFCFE, 0xF7FBE6FC, 0xFC02030A);
	r0 = D(r0, s1_0_2, 0xFB06F4EF, 0xFE0109FD, 0x1005021B, 0xFE03FFF9);
	r1 = D(r1, s1_0_2, 0x0001F100, 0xE7010C31, 0x0201FC07, 0xFE0BF018);
	r2 = D(r2, s1_0_2, 0x0BE9E30C, 0x07EEF0E3, 0x04FA0608, 0x0AFAF60A);
	r3 = D(r3, s1_0_2, 0x040C22FC, 0xF90E100F, 0x08031E04, 0xFDED14E5);
	r4 = D(r4, s1_0_2, 0xE9F0952A, 0xDEFEEAF6, 0xFEF3F2FC, 0xEC080BF3);
	r5 = D(r5, s1_0_2, 0xFF0005E2, 0xFB02F706, 0x1101F8E6, 0x0EE701F6);
	r6 = D(r6, s1_0_2, 0x0FEEFA06, 0xFB090B01, 0x15E20C19, 0x07071001);
	r7 = D(r7, s1_0_2, 0x0000FFFE, 0x010006FD, 0xF511F7EE, 0x00FE0003);
	r0 = D(r0, s1_1_0, 0x00F8F702, 0xEFFC1186, 0xF8F10E02, 0x00FAFFFC);
	r1 = D(r1, s1_1_0, 0xFBFB02FF, 0xE0E6FD1A, 0xF6F40510, 0x03FBF500);
	r2 = D(r2, s1_1_0, 0xFFD4FE0A, 0x19030FFF, 0x00FF06F9, 0x2501160B);
	r3 = D(r3, s1_1_0, 0xF6040300, 0xF70B0B07, 0x060D3003, 0xFEC71819);
	r4 = D(r4, s1_1_0, 0xFC04FE21, 0x0BD617FF, 0x0E09F6FB, 0xF00808F3);
	r5 = D(r5, s1_1_0, 0xFF0B1004, 0xFFFF0303, 0x1C07FE06, 0x0DF302F1);
	r6 = D(r6, s1_1_0, 0xF5F200EE, 0xE6000AF0, 0x03EDFA14, 0x0DDF0ACC);
	r7 = D(r7, s1_1_0, 0xFFFE0103, 0xFBFD0206, 0xFB03FA05, 0x0204FDFF);
	r0 = D(r0, s1_1_1, 0xF805000A, 0x060931ED, 0xF5051904, 0x000CFAEC);
	r1 = D(r1, s1_1_1, 0xFC0C0807, 0x01000927, 0xDE060003, 0x02FDF5EF);
	r2 = D(r2, s1_1_1, 0x0624EC12, 0x0BEB1CCF, 0x05050000, 0xF1D10313);
	r3 = D(r3, s1_1_1, 0xF6E30DE2, 0x06EAFD11, 0xFFF201F5, 0xE70CEF0B);
	r4 = D(r4, s1_1_1, 0xF1E60D20, 0xE3D122DF, 0x0AE6FE01, 0x12D525EA);
	r5 = D(r5, s1_1_1, 0x0D0BFEFF, 0xF812F9FD, 0x100F209E, 0x0DEEFAE5);
	r6 = D(r6, s1_1_1, 0xF4211AE4, 0xEEE40781, 0x0AFC1417, 0xED18FCEA);
	r7 = D(r7, s1_1_1, 0xFC03FFFE, 0xFAF500FF, 0x05EF1D00, 0xFDFD030F);
	r0 = D(r0, s1_1_2, 0xFE00F3FF, 0x08FF05F3, 0x02FF0404, 0x07FBFDF6);
	r1 = D(r1, s1_1_2, 0xFD040AFE, 0xEFF9120D, 0xF2F30309, 0xF9080F08);
	r2 = D(r2, s1_1_2, 0xFFF9EE0D, 0x2801EAE5, 0xFD00100D, 0xF71D200A);
	r3 = D(r3, s1_1_2, 0xECF504F6, 0xFDEBF9F9, 0x03F1F404, 0x1E080C11);
	r4 = D(r4, s1_1_2, 0xEE040F04, 0xEF0CF10B, 0x0CF6F2F6, 0xFEFE0EF9);
	r5 = D(r5, s1_1_2, 0x18F2FDEF, 0xF6FD05EB, 0x11FEFAD3, 0xEABAF3F7);
	r6 = D(r6, s1_1_2, 0xFE1D2304, 0xEE2408F4, 0x0C17041C, 0xFF1A34FF);
	r7 = D(r7, s1_1_2, 0x00FCFFFF, 0xF80400FF, 0x11DF0D1F, 0xFFFAFA06);
	r0 = D(r0, s1_2_0, 0x0AFEF800, 0x0DEBFCEF, 0x0EF61018, 0xFFFF02FA);
	r1 = D(r1, s1_2_0, 0xF9F5FFFB, 0xF6E8FB0F, 0xF8F0FD05, 0x07FC0B07);
	r2 = D(r2, s1_2_0, 0x03EEFF08, 0x030101FF, 0xF9FF04FE, 0x122E0408);
	r3 = D(r3, s1_2_0, 0x090207F8, 0xF5ED03F9, 0xEA030CFF, 0x0ADA0D23);
	r4 = D(r4, s1_2_0, 0xF91DF2FB, 0xF910EF04, 0x1006FBF1, 0x03F41302);
	r5 = D(r5, s1_2_0, 0x06FC0403, 0xFD08FBFF, 0x141E0D0A, 0xFE120703);
	r6 = D(r6, s1_2_0, 0xEEC20200, 0xDAF302FE, 0x0D030313, 0x18F20BD5);
	r7 = D(r7, s1_2_0, 0xFEFFFFFF, 0xFA020402, 0xDE0AFBF1, 0x0402FCFE);
	r0 = D(r0, s1_2_1, 0x06FDEF02, 0x07F8EE05, 0xE7061212, 0xFE0000FB);
	r1 = D(r1, s1_2_1, 0xFA0B06FD, 0xFFFD0C1C, 0x02F7020E, 0xFCF70703);
	r2 = D(r2, s1_2_1, 0x06F4F500, 0x11F9FE07, 0xF709FF03, 0x0CED0914);
	r3 = D(r3, s1_2_1, 0x09FD06FC, 0xDD1DF2FC, 0xF20CDDF8, 0xCBF93A15);
	r4 = D(r4, s1_2_1, 0x14FECF1D, 0x05ECE910, 0x01FF04F7, 0x0B0E00F4);
	r5 = D(r5, s1_2_1, 0x0606F9F8, 0x06FD0808, 0x060828FA, 0x110AFE18);
	r6 = D(r6, s1_2_1, 0x08FC06E3, 0xD20C1509, 0x11B8102A, 0x24F61309);
	r7 = D(r7, s1_2_1, 0xFE020301, 0x04020207, 0xF10B0E01, 0x0405FE00);
	r0 = D(r0, s1_2_2, 0x0807EA05, 0x03FEF10E, 0x06F6FCF2, 0x0106F9F9);
	r1 = D(r1, s1_2_2, 0x01F8F90A, 0xF9F91207, 0xFFF60105, 0xFEFDF801);
	r2 = D(r2, s1_2_2, 0x01FDEDF6, 0xFAEEF205, 0xF9FB0BF9, 0x0AF2DF0B);
	r3 = D(r3, s1_2_2, 0xF8FE0FF2, 0xEF060DFD, 0x0005080C, 0x05F3EAFD);
	r4 = D(r4, s1_2_2, 0xE8F0D110, 0xEBECF7FF, 0x0000FE0D, 0x17010C01);
	r5 = D(r5, s1_2_2, 0x0BF3FE04, 0xFFF90B14, 0x10E4F1F7, 0x1BFD020C);
	r6 = D(r6, s1_2_2, 0xFD1A15F5, 0xFAFF3602, 0x0C0F1419, 0xFBFF18E7);
	r7 = D(r7, s1_2_2, 0x000001FD, 0xFFFC06FF, 0x02EF070F, 0x03FF03FE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0CF6FE07, 0xFF1B06DD, 0x00FA0EF7, 0xFCFBFBFD);
	r1 = D(r1, s0_0_0, 0xFF0BF8FB, 0xE6110412, 0xF20505FA, 0xFF060606);
	r2 = D(r2, s0_0_0, 0xF2E5FFE7, 0x0B01F904, 0xFCFAFE00, 0x21E7F905);
	r3 = D(r3, s0_0_0, 0xFAFCFC03, 0xF6FDE6FA, 0xFDE9F1F5, 0xDC07080C);
	r4 = D(r4, s0_0_0, 0x03E602F1, 0xEDF019F7, 0x070501F0, 0x1703040B);
	r5 = D(r5, s0_0_0, 0xFDFEF9FE, 0xF80403FC, 0xFBFC0CF6, 0x1303F2F6);
	r6 = D(r6, s0_0_0, 0x05FFFA16, 0x0302F0FE, 0x0FEC0610, 0x07FA040E);
	r7 = D(r7, s0_0_0, 0x01FDFEFE, 0x09F501FE, 0xF3020A02, 0x0DEF0101);
	r0 = D(r0, s0_0_1, 0xFC12FA00, 0xEDFE050F, 0x0A04FA06, 0x0AFE0104);
	r1 = D(r1, s0_0_1, 0x0A06FD05, 0x10FA00E5, 0xFF020A0F, 0xFE0F0503);
	r2 = D(r2, s0_0_1, 0xFD130220, 0xFAFAF60B, 0xFF050C05, 0xFB0EFAE9);
	r3 = D(r3, s0_0_1, 0x18FC090D, 0xFA2CF7F5, 0x0102FD10, 0x14F81023);
	r4 = D(r4, s0_0_1, 0xDF0A0105, 0xE5030017, 0xFC0203F2, 0xF2021C0C);
	r5 = D(r5, s0_0_1, 0xF8FD13F8, 0xFCFB0202, 0x08E41F08, 0x03040DFE);
	r6 = D(r6, s0_0_1, 0xFF0D0D02, 0xFDFE13FD, 0x050DFA0D, 0x04FCED03);
	r7 = D(r7, s0_0_1, 0x010AFF00, 0xFD1005FB, 0xFEF819F8, 0xFB00FCFD);
	r0 = D(r0, s0_0_2, 0xFCFE0004, 0xF8E51F00, 0x0E08FD06, 0x09FCFFFB);
	r1 = D(r1, s0_0_2, 0xFE05FCFB, 0x110DF901, 0x0712F7FB, 0x060AFC03);
	r2 = D(r2, s0_0_2, 0x00FFF2E5, 0x0DECFDF1, 0xFE0CF1FD, 0xF205F907);
	r3 = D(r3, s0_0_2, 0x05D9160C, 0xE60F10ED, 0xF4E4110B, 0xE1D011D5);
	r4 = D(r4, s0_0_2, 0xC7F8381E, 0xEBF81111, 0xF6F911E7, 0xF4F81400);
	r5 = D(r5, s0_0_2, 0x05FD09E0, 0xFBFC0302, 0x12F80C04, 0x02E21B0A);
	r6 = D(r6, s0_0_2, 0xFEED0D0B, 0x06FEF100, 0xFC05ECEC, 0x1200F100);
	r7 = D(r7, s0_0_2, 0x0401FFFE, 0x08F3FF03, 0xFD010BFC, 0x02F7FD07);
	r0 = D(r0, s0_1_0, 0x0EFFF207, 0x19FBD304, 0xEB03FE07, 0xFF070A0F);
	r1 = D(r1, s0_1_0, 0x02FE0BF3, 0xFCF9F3FC, 0xF0F9F716, 0xFEEAE200);
	r2 = D(r2, s0_1_0, 0x00FD02FC, 0x05F5E9E9, 0xFEFC0AFB, 0xEA0BF611);
	r3 = D(r3, s0_1_0, 0xF9141000, 0xF408FEFB, 0xE50521E8, 0xFD16F7FE);
	r4 = D(r4, s0_1_0, 0xAF0B0E0A, 0x91FFFBF5, 0xE61406FA, 0xF3030906);
	r5 = D(r5, s0_1_0, 0xEFF4F902, 0x02F7040E, 0xFCFBFF12, 0xF401060B);
	r6 = D(r6, s0_1_0, 0xF30809FD, 0x01F7F9B8, 0x17FC0311, 0x0EEF280C);
	r7 = D(r7, s0_1_0, 0xF9020503, 0xF90702FB, 0xF908ED0B, 0xFE0908FF);
	r0 = D(r0, s0_1_1, 0x0208FEF6, 0xFA22F2FE, 0xFB2A0BF4, 0x063A110E);
	r1 = D(r1, s0_1_1, 0xF0FFF605, 0xE3E6F5F9, 0xE9D7DD11, 0x09BEB710);
	r2 = D(r2, s0_1_1, 0xFFE904F2, 0x0DFC1306, 0x0323FBF0, 0xF9F9F5E2);
	r3 = D(r3, s0_1_1, 0xF905FF11, 0xE9291AF4, 0xF0362218, 0x24DAEC10);
	r4 = D(r4, s0_1_1, 0x1605F2FB, 0xF2D6E4F6, 0x0414EAEB, 0x09F4E4FE);
	r5 = D(r5, s0_1_1, 0x181B1BFA, 0xF21B0306, 0xFB1D1026, 0x0327F312);
	r6 = D(r6, s0_1_1, 0x1D07EF12, 0x0901E904, 0xECE9E7D7, 0x20FD0417);
	r7 = D(r7, s0_1_1, 0xFFE70303, 0x170804FB, 0x00080A1A, 0xFE3328FB);
	r0 = D(r0, s0_1_2, 0x07F60004, 0x0DE22402, 0x100C0A0F, 0x06FD0202);
	r1 = D(r1, s0_1_2, 0xF807EEFF, 0xFA13EDFB, 0xFF1AF900, 0xF8F7F6FC);
	r2 = D(r2, s0_1_2, 0xF0031508, 0xF5F600E0, 0xFA12F50D, 0x090508FF);
	r3 = D(r3, s0_1_2, 0x0EE40007, 0x0910FDF5, 0x0FF3E5F8, 0x1AE3F614);
	r4 = D(r4, s0_1_2, 0xF00603FB, 0xD1F937F1, 0xF6FD14E4, 0x03FAFBEF);
	r5 = D(r5, s0_1_2, 0xFAF0F6DE, 0x09D5E8F1, 0xEBEDF1FE, 0x12CDE6F7);
	r6 = D(r6, s0_1_2, 0xFB0EFCF5, 0xFD1A0415, 0xDE07EC26, 0xF8F82410);
	r7 = D(r7, s0_1_2, 0x0109FE02, 0x06EEFB03, 0x17DBDFE2, 0x0506FA02);
	r0 = D(r0, s0_2_0, 0xFCFD0200, 0xEF0AE4E4, 0x010BF102, 0x0100F6FD);
	r1 = D(r1, s0_2_0, 0x09FBF400, 0x090709F9, 0x0D0011FA, 0x0C0A1101);
	r2 = D(r2, s0_2_0, 0xECFFF805, 0x0903EBF4, 0xFCFC03FE, 0xEBEEF5E9);
	r3 = D(r3, s0_2_0, 0x010203FE, 0xF7FE16F5, 0x0DEBF80B, 0xE80002F2);
	r4 = D(r4, s0_2_0, 0x13DCFD01, 0xC7FE131B, 0xF4FF09FE, 0xE90EF7FE);
	r5 = D(r5, s0_2_0, 0x16FEFE10, 0x0803FAFF, 0xDE05E514, 0x0FFD0812);
	r6 = D(r6, s0_2_0, 0xFBFC170E, 0xEF02FA0B, 0xF30BFE15, 0xFE0D0209);
	r7 = D(r7, s0_2_0, 0xFDFEFBFE, 0xEC040400, 0x0AECFBFF, 0x04050105);
	r0 = D(r0, s0_2_1, 0x05FAF409, 0x131FDA02, 0xFDF4F6FB, 0xFC050503);
	r1 = D(r1, s0_2_1, 0x00FE0709, 0xFD010203, 0xFA02FCFE, 0xEE0702FD);
	r2 = D(r2, s0_2_1, 0x1417FFF9, 0x260C08EF, 0x00F40001, 0xEB200A12);
	r3 = D(r3, s0_2_1, 0x060503FF, 0x16EDEF04, 0x07F1FA1F, 0xFDE7DE03);
	r4 = D(r4, s0_2_1, 0xDFE702FD, 0xAA13010A, 0xFE05F4FE, 0x0608EB14);
	r5 = D(r5, s0_2_1, 0xEE021CFB, 0x01F307FF, 0x012305DB, 0xF3FA16E4);
	r6 = D(r6, s0_2_1, 0x0209DD02, 0x03F5E5DA, 0x08ECE7E2, 0xE706D216);
	r7 = D(r7, s0_2_1, 0xFC0A0800, 0x0A09FAFB, 0xE6F0FEF1, 0xFCFFF701);
	r0 = D(r0, s0_2_2, 0x03050507, 0xF2FAFAFB, 0x0BFFFBF9, 0xFEFD06F9);
	r1 = D(r1, s0_2_2, 0xF6F902FB, 0x0500F102, 0xF006F3FB, 0xEFFD0006);
	r2 = D(r2, s0_2_2, 0xFC14F7F7, 0xF903FAF3, 0x0A06FCFB, 0x1FFEEB02);
	r3 = D(r3, s0_2_2, 0xF5FEF007, 0x05FDFC0F, 0xF6FF03FC, 0x02E41CDE);
	r4 = D(r4, s0_2_2, 0xF108E6F8, 0xC502F8FA, 0xFC0104FA, 0x11FDF2FF);
	r5 = D(r5, s0_2_2, 0xFB07FCF7, 0xFEF4FDFF, 0x0B0DFB14, 0x15F90002);
	r6 = D(r6, s0_2_2, 0xF809F1F1, 0xF91FFFF3, 0x240CEE0F, 0x27EBEB0A);
	r7 = D(r7, s0_2_2, 0x0205FEFD, 0x07F60702, 0xFA010D00, 0x0609FE01);
	r0 = D(r0, s1_0_0, 0xF8FA060B, 0x03D80003, 0x0A0907F8, 0xFD0203F9);
	r1 = D(r1, s1_0_0, 0x010A0708, 0xF70501FA, 0xFF0709F5, 0xFD03000A);
	r2 = D(r2, s1_0_0, 0xF8090DF8, 0xFD0F0200, 0xFAFE02FF, 0x01E90315);
	r3 = D(r3, s1_0_0, 0x0700EB04, 0xEDFB05F2, 0xE6120AF4, 0xCA0508D9);
	r4 = D(r4, s1_0_0, 0xE01006FA, 0xEFFAFB1A, 0x09F1FC0E, 0xF6F50203);
	r5 = D(r5, s1_0_0, 0x09030500, 0xFE0304FC, 0xEE0F0CEC, 0xFC070100);
	r6 = D(r6, s1_0_0, 0xFB020DE9, 0xFD01F8F6, 0xEBE21319, 0xF80005EA);
	r7 = D(r7, s1_0_0, 0xFE01FF00, 0xFFFFFAF9, 0x08ECF2F6, 0x03ECFF01);
	r0 = D(r0, s1_0_1, 0xFF15FF0B, 0x08FC0300, 0x080BE800, 0xFDF6FFF9);
	r1 = D(r1, s1_0_1, 0x080F0406, 0x0DEADFF0, 0x04F9F9F6, 0x0E05110B);
	r2 = D(r2, s1_0_1, 0x09D83007, 0x0217ECF5, 0x0201FE05, 0x0404FD06);
	r3 = D(r3, s1_0_1, 0xFA17FEFE, 0xF5D70706, 0xE9FAEEE1, 0x1614F4EC);
	r4 = D(r4, s1_0_1, 0xE205F003, 0x04DFE70C, 0x0713F1FA, 0xF8DC0C12);
	r5 = D(r5, s1_0_1, 0x08F9FF0A, 0x0C090605, 0xFC03F1DA, 0x0A07DDE6);
	r6 = D(r6, s1_0_1, 0xFCF50AFD, 0xFDEEF8FF, 0x100907F6, 0xFAEE00FA);
	r7 = D(r7, s1_0_1, 0xFD070104, 0x00050600, 0x04EFF30C, 0xF302FE03);
	r0 = D(r0, s1_0_2, 0xFFFC0503, 0xF7FDF90A, 0x0006FEF7, 0x04FA04FF);
	r1 = D(r1, s1_0_2, 0x00070302, 0x0A0009FF, 0x0100FE04, 0x020BFAFA);
	r2 = D(r2, s1_0_2, 0xFAF1F5F3, 0x02130507, 0xFC0409F7, 0xF90704F7);
	r3 = D(r3, s1_0_2, 0xF9FE07FD, 0xF5E20C15, 0xEEFC0C0F, 0xE70D0A22);
	r4 = D(r4, s1_0_2, 0xFEF5E21B, 0x0B00ED0A, 0x07FDE120, 0x0DF80416);
	r5 = D(r5, s1_0_2, 0x05FEF900, 0x06FC03FB, 0x02EA0EF3, 0x05F80811);
	r6 = D(r6, s1_0_2, 0x1A1FF5F7, 0x0402EE01, 0xFEE90F03, 0x041807F4);
	r7 = D(r7, s1_0_2, 0x01000200, 0xFD0203FB, 0x08F01E04, 0xFEFC04FB);
	r0 = D(r0, s1_1_0, 0xEF050206, 0xF80CFC00, 0xF50A01EF, 0xFE0700FE);
	r1 = D(r1, s1_1_0, 0xF11800F9, 0x080DE8E4, 0xF9FB0EF5, 0x020AF609);
	r2 = D(r2, s1_1_0, 0xF40D0A10, 0x0005040C, 0xF80106FB, 0x1DF30A0A);
	r3 = D(r3, s1_1_0, 0x06F20305, 0x01080CF1, 0x07FB20E5, 0x1B04FDEE);
	r4 = D(r4, s1_1_0, 0x29FEEFF4, 0x1801DE05, 0x06FB0006, 0x0C1006EB);
	r5 = D(r5, s1_1_0, 0x001503FD, 0x0505070A, 0x1B00FC14, 0x01F506FB);
	r6 = D(r6, s1_1_0, 0xE90AFDF4, 0xED020FFC, 0x12EEF717, 0xF0F80503);
	r7 = D(r7, s1_1_0, 0xFF03FF00, 0x020702F5, 0xECF00615, 0xFFFEFE09);
	r0 = D(r0, s1_1_1, 0xFEFB070D, 0xFE0C0FEF, 0x0728F4E9, 0x0B02FC0B);
	r1 = D(r1, s1_1_1, 0xFB12EE16, 0x141EEB10, 0xE31306FD, 0xF41BEC0C);
	r2 = D(r2, s1_1_1, 0xCD17FA08, 0x0E0112E9, 0x0506FD03, 0xE6ECC102);
	r3 = D(r3, s1_1_1, 0x0CF720F8, 0x17EF0302, 0x1BF21301, 0x2216D2E8);
	r4 = D(r4, s1_1_1, 0xFEF8F2F8, 0xE70AF426, 0x070E01F8, 0x0514E009);
	r5 = D(r5, s1_1_1, 0x01FEFC1C, 0x0A0C0A1D, 0xFD05111B, 0x0EFB2009);
	r6 = D(r6, s1_1_1, 0x092202FC, 0x12F81D0C, 0xF530EC0C, 0xFEF20BE2);
	r7 = D(r7, s1_1_1, 0x03F4FF00, 0xFB28010D, 0x02EC111C, 0x01010506);
	r0 = D(r0, s1_1_2, 0xFD03FB02, 0x1A100100, 0x100104E7, 0x08FEFA07);
	r1 = D(r1, s1_1_2, 0xFFF1FB09, 0x10F1FC0D, 0x03FCFDF3, 0x000408FB);
	r2 = D(r2, s1_1_2, 0xF1FF05F4, 0xFFF50719, 0xF80602FD, 0xED0120F7);
	r3 = D(r3, s1_1_2, 0xFD0B13ED, 0xFEF515FF, 0x051B01FB, 0x2204EE10);
	r4 = D(r4, s1_1_2, 0x00F20DF7, 0x16DEE506, 0x04FB0102, 0x0D0DFEFF);
	r5 = D(r5, s1_1_2, 0x02FEFEFC, 0x0D0202F9, 0xF312E111, 0x0D16F821);
	r6 = D(r6, s1_1_2, 0x08F215F3, 0xDC0E03E5, 0xDEFB0211, 0x20F80EE8);
	r7 = D(r7, s1_1_2, 0x02FCFD01, 0xFFF9FBFD, 0x1416D70B, 0xF8FCFDFE);
	r0 = D(r0, s1_2_0, 0x0107FFFD, 0x0B1008F9, 0x0905FCE8, 0x0105FD02);
	r1 = D(r1, s1_2_0, 0x00040709, 0xF1010309, 0x020D08FF, 0x0002FBF7);
	r2 = D(r2, s1_2_0, 0x0E05F307, 0x0202FB09, 0x05FC0BFF, 0xDA1B0CF0);
	r3 = D(r3, s1_2_0, 0x0107EFF5, 0xF4FF04F0, 0x0CF60C08, 0x19E81A06);
	r4 = D(r4, s1_2_0, 0xFE050407, 0xE7FCDEF2, 0xF505FEF6, 0x0AE500FC);
	r5 = D(r5, s1_2_0, 0xFD04FEF6, 0x01010000, 0xF20CD9F5, 0xDD060EFC);
	r6 = D(r6, s1_2_0, 0x0CEFFA0E, 0xFDFF06F7, 0x0CFD0011, 0xF1F9F10A);
	r7 = D(r7, s1_2_0, 0x0102FC03, 0x0002FDF5, 0xFFF6FD0C, 0x02FBFF01);
	r0 = D(r0, s1_2_1, 0x0CF90502, 0x131202DB, 0x0F030309, 0x0404FBFC);
	r1 = D(r1, s1_2_1, 0xFF0CFCEA, 0xF80FEC0B, 0x0609F60A, 0xF50BFBFA);
	r2 = D(r2, s1_2_1, 0x0A0BF2FF, 0xF702EADF, 0xF9FF0106, 0x0AE02A14);
	r3 = D(r3, s1_2_1, 0xFDF6FD17, 0x0E130003, 0x14FFE8FB, 0x1B122D04);
	r4 = D(r4, s1_2_1, 0xFCFFFFFB, 0xF503E020, 0x0707F601, 0x010DFC04);
	r5 = D(r5, s1_2_1, 0x0002FCF2, 0xFD08090C, 0x01DAFAFE, 0xEA00E9FB);
	r6 = D(r6, s1_2_1, 0xF10AF515, 0xEF1C031D, 0xFC29E206, 0x02FCFB03);
	r7 = D(r7, s1_2_1, 0x03FCFE00, 0xF505FCFE, 0xDD000FFB, 0x02050300);
	r0 = D(r0, s1_2_2, 0xFC0800FE, 0xF805EE10, 0xEEFC01F9, 0xFD02F803);
	r1 = D(r1, s1_2_2, 0xFDFF01FE, 0x08F8FFFF, 0xFE0300FB, 0xFC0801FD);
	r2 = D(r2, s1_2_2, 0x17F5FFFD, 0xED090509, 0x02F90201, 0x0D0206F4);
	r3 = D(r3, s1_2_2, 0xFFFF0707, 0xF2ECF804, 0xEC05F00E, 0xEEEC0F00);
	r4 = D(r4, s1_2_2, 0x06F90BFB, 0x03F8F3E5, 0x01FD0B0E, 0x01F3FA01);
	r5 = D(r5, s1_2_2, 0xF90FFF08, 0xEA08FEFD, 0x070FEBFE, 0xF805F104);
	r6 = D(r6, s1_2_2, 0xF9F11DF9, 0x00EC130B, 0x07F12DE8, 0x07FA0FFF);
	r7 = D(r7, s1_2_2, 0xFDFDFE00, 0x0104FDF3, 0x10F4F900, 0x04FD03FE);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.292e-02, 4.230e-03, 2.640e-03, 1.186e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.076e-02, 2.605e-03, 7.495e-03, -2.525e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.595e-02, 1.821e-02, -1.633e-04, -1.730e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-5.590e-04, -1.404e-03, -1.545e-02, -1.055e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.097e-02, -3.812e-02, 3.290e-02, -5.435e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.700e-02, -1.833e-02, -3.010e-02, -2.067e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-6.076e-03, -3.353e-02, -1.769e-02, -3.336e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-4.940e-03, 1.942e-03, -1.399e-02, -8.406e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEF040AF2, 0xD70425CF, 0xFD0B0403, 0xF4FF00FB);
	r1 = D(r1, s0_0_0, 0x0807DF10, 0xFF30C415, 0x0001FD00, 0xFD06FCF4);
	r2 = D(r2, s0_0_0, 0xF90509F8, 0xF013F606, 0x1200FAFA, 0x0907FC01);
	r3 = D(r3, s0_0_0, 0xF406EA18, 0xFEFA07FC, 0x0100FE01, 0xFE0102F9);
	r4 = D(r4, s0_0_0, 0xFDFA07F3, 0x1AFEF20E, 0xFD0105FA, 0xE40E0801);
	r5 = D(r5, s0_0_0, 0xF1FCFEEC, 0xD8F811E4, 0x080105EB, 0xEDFEFEF7);
	r6 = D(r6, s0_0_0, 0xEAF10BEA, 0xF70205F6, 0xE413F4F8, 0xF20504ED);
	r7 = D(r7, s0_0_0, 0x1AEB17F4, 0xF5FF03F6, 0xFE02FEEF, 0xE40506F3);
	r0 = D(r0, s0_0_1, 0x1BFF0516, 0x0FFB0823, 0x020D04EA, 0xF8FC15FC);
	r1 = D(r1, s0_0_1, 0xF4FB080F, 0x0AFD81E3, 0xFF0601FD, 0xFB02FAF1);
	r2 = D(r2, s0_0_1, 0x1003F304, 0xFE01F0F9, 0xEE16FBE6, 0x0501FB02);
	r3 = D(r3, s0_0_1, 0xF5E7FDF5, 0x01FDFE02, 0xFDFC0C00, 0xEAF808FD);
	r4 = D(r4, s0_0_1, 0xF00516E4, 0xE8FBFCFC, 0x0B00FFF6, 0x160306E7);
	r5 = D(r5, s0_0_1, 0xF1E9DBDF, 0x1D0009F2, 0xF70F0BFC, 0x1102FB04);
	r6 = D(r6, s0_0_1, 0x001B17F1, 0x0F01FBFE, 0x1BF711F2, 0x1104D70F);
	r7 = D(r7, s0_0_1, 0x02FC03DE, 0x0B02ECF7, 0x03FF000C, 0xE6F712FC);
	r0 = D(r0, s0_0_2, 0xFBF9EC04, 0x0BF7F3FF, 0xED08FFF9, 0x04F9F701);
	r1 = D(r1, s0_0_2, 0xFA00F9F9, 0x0321D7E4, 0xFEFB03FD, 0x0B08FA08);
	r2 = D(r2, s0_0_2, 0x0001F9FD, 0xE50A01FD, 0x091302FF, 0xF603F90B);
	r3 = D(r3, s0_0_2, 0x0303F5FD, 0xFFF9FFFF, 0x04FBFEFD, 0x08FC03FD);
	r4 = D(r4, s0_0_2, 0x0F0DF5FC, 0x03051205, 0x0002FDFD, 0xE502F609);
	r5 = D(r5, s0_0_2, 0x1F24E0F1, 0x0BF71DEF, 0xF6040502, 0xFD01FDFA);
	r6 = D(r6, s0_0_2, 0x0E21F7F0, 0xFC01FFFF, 0xFD0013F6, 0xEE00F018);
	r7 = D(r7, s0_0_2, 0xF906190E, 0xFE00FE0A, 0xFAFFFCFE, 0xFDFC01FD);
	r0 = D(r0, s0_1_0, 0xF2F604ED, 0xEAEC12F3, 0x00FF070F, 0xEFEE150C);
	r1 = D(r1, s0_1_0, 0xE0ED11B9, 0x16014710, 0xF502FC0B, 0xF2060D19);
	r2 = D(r2, s0_1_0, 0xF20BFE09, 0xF80F020E, 0x08FEFDFF, 0x07FBF8FD);
	r3 = D(r3, s0_1_0, 0x11F80809, 0x0AFFFFFB, 0x0501FDF8, 0x12F604FA);
	r4 = D(r4, s0_1_0, 0xF6FF04F3, 0x00F500FD, 0xF90201F9, 0xCE0F06E4);
	r5 = D(r5, s0_1_0, 0x1726FFE5, 0xF30AFDFB, 0x27F906FE, 0x01FA0304);
	r6 = D(r6, s0_1_0, 0x16D429D3, 0xFF04FC02, 0xF60A09F6, 0xF3FB08F7);
	r7 = D(r7, s0_1_0, 0xEBFAE90F, 0x02FBFC07, 0xFF04FCF5, 0xF2F609FC);
	r0 = D(r0, s0_1_1, 0x0FF80CFC, 0xECF52BE1, 0x160914F7, 0xF220FFF4);
	r1 = D(r1, s0_1_1, 0x15220E06, 0x10DF3BFA, 0x1310F103, 0x33E00019);
	r2 = D(r2, s0_1_1, 0x250E0CF4, 0x1E0900F7, 0xFA00F90C, 0xFBFA1108);
	r3 = D(r3, s0_1_1, 0x00F00102, 0xF501010B, 0x19F80B05, 0xF2F31305);
	r4 = D(r4, s0_1_1, 0x2718F90C, 0x12EAE8F9, 0x2E01FC08, 0x2A08000D);
	r5 = D(r5, s0_1_1, 0xF6F73F2D, 0xF102051A, 0xEBE7E409, 0xF7FF0010);
	r6 = D(r6, s0_1_1, 0xDEC035DA, 0xF8FEF614, 0xFFF81B0E, 0x060FF8E9);
	r7 = D(r7, s0_1_1, 0xEE17F511, 0xF3FAFA11, 0xE81914FA, 0x250508F6);
	r0 = D(r0, s0_1_2, 0x0B00F903, 0x1007FE0C, 0xFF0BFC01, 0x19E405FF);
	r1 = D(r1, s0_1_2, 0x0DFBF500, 0x05131607, 0xF813DFFF, 0xE9F5FFF0);
	r2 = D(r2, s0_1_2, 0xF3020509, 0xF50F0502, 0x010006FF, 0xFE07F904);
	r3 = D(r3, s0_1_2, 0x1AFEF502, 0xFBFD0C04, 0xFB060305, 0xF3FF08FD);
	r4 = D(r4, s0_1_2, 0x05F8E8FC, 0xEB070F04, 0x04020101, 0x000801EA);
	r5 = D(r5, s0_1_2, 0x08FAF0E5, 0xF300FBFC, 0x0601FF02, 0x0602FB00);
	r6 = D(r6, s0_1_2, 0xFFE715D7, 0x04020702, 0x0AEEDAF7, 0x0A0009F0);
	r7 = D(r7, s0_1_2, 0x1309F7F6, 0xF304FF06, 0x0E0206F5, 0x0B020AF9);
	r0 = D(r0, s0_2_0, 0xF7FA09FB, 0x0E0DF9F7, 0x02020002, 0xFB0A03F5);
	r1 = D(r1, s0_2_0, 0x81812581, 0xEE05F306, 0x0C06F806, 0x0A08070D);
	r2 = D(r2, s0_2_0, 0xF60B02FD, 0x0B0FF705, 0x0505FA04, 0x000CFDFF);
	r3 = D(r3, s0_2_0, 0x060106F1, 0xFDFD08FC, 0xF403FFFD, 0xFA00FDFE);
	r4 = D(r4, s0_2_0, 0x0502F80C, 0xFCF90003, 0xFC000301, 0xF10A0304);
	r5 = D(r5, s0_2_0, 0xF1FA09F6, 0xFEF91107, 0x01FB0916, 0xFA0307F7);
	r6 = D(r6, s0_2_0, 0x04F40113, 0x00010202, 0xFA000A07, 0xF5FFFF09);
	r7 = D(r7, s0_2_0, 0x10F7F9F4, 0x05FD0006, 0xF5FC10F8, 0x050201F8);
	r0 = D(r0, s0_2_1, 0x04EF0103, 0x02F71C20, 0xFA120906, 0x0107071D);
	r1 = D(r1, s0_2_1, 0xF9141AE7, 0x1D2ECB0F, 0xE50FF908, 0xFFEC00FC);
	r2 = D(r2, s0_2_1, 0xFB040904, 0x030BFFF6, 0x07F8F800, 0xF905FC07);
	r3 = D(r3, s0_2_1, 0x00FC0506, 0x16F20C02, 0x09000703, 0x08FE0809);
	r4 = D(r4, s0_2_1, 0xFA01F8FD, 0x00F9FA03, 0x03000000, 0xF6FE0409);
	r5 = D(r5, s0_2_1, 0xF7FA0122, 0xECF1F507, 0xFBEB0FFD, 0x0803FFFE);
	r6 = D(r6, s0_2_1, 0x0B141813, 0x05FF01F7, 0xF3DF1B0C, 0x190AF9FF);
	r7 = D(r7, s0_2_1, 0xF70006F7, 0x0108FDF9, 0x06040311, 0xFCF90400);
	r0 = D(r0, s0_2_2, 0x110BFCFF, 0x0A02F3E7, 0xFA0100FE, 0x0EEEEB08);
	r1 = D(r1, s0_2_2, 0x09F8FB06, 0xF920150E, 0xFE07F208, 0x02E7F50B);
	r2 = D(r2, s0_2_2, 0x0AFE00FE, 0xED050006, 0x0600F9FF, 0xFCFAF404);
	r3 = D(r3, s0_2_2, 0xFCFC04F8, 0xFFF90800, 0xFE0507F9, 0xF9000004);
	r4 = D(r4, s0_2_2, 0x06FF0203, 0x03FF09FF, 0xFB0004FF, 0x00F607FF);
	r5 = D(r5, s0_2_2, 0xEBDFFB16, 0x17F2FC0D, 0xFBF707FC, 0x0202FFF6);
	r6 = D(r6, s0_2_2, 0x0E0A101A, 0xFC010702, 0x00F2E60E, 0xF90A040B);
	r7 = D(r7, s0_2_2, 0x07F5FE1F, 0xFC00FF04, 0x060700F4, 0xFE010C09);
	r0 = D(r0, s1_0_0, 0xFE02FE06, 0x04D30014, 0xF9FEFF0A, 0x01F406F5);
	r1 = D(r1, s1_0_0, 0xF90902FE, 0x04F8F4D7, 0xFBFF07FE, 0xF8FCF6E6);
	r2 = D(r2, s1_0_0, 0x03FB04F1, 0xFAF8FE00, 0xFA0B02ED, 0xFC01FFF9);
	r3 = D(r3, s1_0_0, 0xFEFEFBE3, 0xFF00FF05, 0x01FEFF04, 0x06F6FD0A);
	r4 = D(r4, s1_0_0, 0x0900000A, 0x020405FE, 0xFF0100FA, 0x0501FDFF);
	r5 = D(r5, s1_0_0, 0x19F3FC1A, 0x08F2FFFA, 0x05F70606, 0x11FA0301);
	r6 = D(r6, s1_0_0, 0xF02BF61B, 0x00FFFFFA, 0x02FDFFEA, 0xFB0200F1);
	r7 = D(r7, s1_0_0, 0xEF05FF0A, 0x040001FB, 0x05FB000D, 0x0DFDFC0A);
	r0 = D(r0, s1_0_1, 0xF7070404, 0xF51804ED, 0xFB01FCFE, 0xFD09FE0A);
	r1 = D(r1, s1_0_1, 0xF90906FB, 0x11E2FC21, 0xF7030BFA, 0x1BDCF9D7);
	r2 = D(r2, s1_0_1, 0x0202FE10, 0x04F3FD0D, 0x05071412, 0xFF02FD05);
	r3 = D(r3, s1_0_1, 0xF41AFDF5, 0xF807FEF0, 0xFFFFFE04, 0x00FA05F4);
	r4 = D(r4, s1_0_1, 0x11F50008, 0xF90A0100, 0x01FBFF02, 0xF6E8F51F);
	r5 = D(r5, s1_0_1, 0x16E805F7, 0x0FEEF719, 0xFFFD03F8, 0x10F5FDF8);
	r6 = D(r6, s1_0_1, 0x01CDDA25, 0x03F9FF0C, 0x01EB0016, 0xE6E8F105);
	r7 = D(r7, s1_0_1, 0x0DEE0D31, 0x08F60212, 0xFF060409, 0x13ECFDE9);
	r0 = D(r0, s1_0_2, 0x030AF706, 0xFE05FD1F, 0xFEF3000D, 0xF5080101);
	r1 = D(r1, s1_0_2, 0xF90604FA, 0xF2060315, 0x05FB0604, 0xFB04FFFD);
	r2 = D(r2, s1_0_2, 0xFF000103, 0xF9FE020F, 0xFC000AEC, 0xFC070306);
	r3 = D(r3, s1_0_2, 0x06FCFA04, 0x0302FCFD, 0x04FDFD03, 0xFE00FFFB);
	r4 = D(r4, s1_0_2, 0x01EA0406, 0xFE0100FC, 0x02FD0001, 0xF61E08EC);
	r5 = D(r5, s1_0_2, 0x21E8F309, 0xF9EB04FB, 0x0CF2FF02, 0x01F90007);
	r6 = D(r6, s1_0_2, 0xF30CDE10, 0x05FCFF04, 0x11F00AFD, 0xEF070803);
	r7 = D(r7, s1_0_2, 0x08F00BDA, 0x06F40307, 0x05FD01F7, 0x0602F609);
	r0 = D(r0, s1_1_0, 0x04F20716, 0xFAD906E0, 0x0AE401EB, 0x09FC02F8);
	r1 = D(r1, s1_1_0, 0xFFEE0201, 0x1AFE09C4, 0xF0FA0CDE, 0x06EDFEDA);
	r2 = D(r2, s1_1_0, 0xFEF70DE8, 0x0105F1FD, 0xF9030B05, 0xFA020107);
	r3 = D(r3, s1_1_0, 0x17F7100C, 0x05FBF807, 0x00FD010B, 0xF8F8FE0D);
	r4 = D(r4, s1_1_0, 0xFB010307, 0xF41903FD, 0xFDFF0000, 0xFF13FAF2);
	r5 = D(r5, s1_1_0, 0xF90310D6, 0xFF0203FF, 0x04F50506, 0x02F2F8E8);
	r6 = D(r6, s1_1_0, 0x04E9CC0A, 0xFDFD0102, 0x0F0406FA, 0x050705FA);
	r7 = D(r7, s1_1_0, 0xF1F40203, 0xFEFB010C, 0x0502FFFE, 0x07F901F7);
	r0 = D(r0, s1_1_1, 0xEE17EBFA, 0x0A0BF3F1, 0x0901FC02, 0x11F4FCEA);
	r1 = D(r1, s1_1_1, 0x19EEFB08, 0x11EDE3DB, 0xFCF014F8, 0xFEC3F2D8);
	r2 = D(r2, s1_1_1, 0xEC120110, 0xED07F413, 0x08F10A0C, 0xFF000705);
	r3 = D(r3, s1_1_1, 0x04F80D09, 0xE919FF02, 0x0C03040D, 0xF7F6EFEC);
	r4 = D(r4, s1_1_1, 0x17F3E50F, 0xF9F0020E, 0x04F7FE01, 0xE406EC16);
	r5 = D(r5, s1_1_1, 0xE2F50FC8, 0xF414E8F1, 0xFD1C0CEF, 0x17FAF2FB);
	r6 = D(r6, s1_1_1, 0x05D2C917, 0x18F9FD05, 0x1CD81000, 0x2CDCFDFB);
	r7 = D(r7, s1_1_1, 0x1F1BF6F9, 0x16FCFA03, 0xFC0C0F03, 0xF905FB13);
	r0 = D(r0, s1_1_2, 0xF31FF7FE, 0xF8FF0305, 0xFDF3FCFB, 0xD82D0114);
	r1 = D(r1, s1_1_2, 0x00010105, 0x29E1F8E0, 0xFCF40F02, 0x07F9FDE4);
	r2 = D(r2, s1_1_2, 0x02F9FBF8, 0x09FEF50E, 0xFD09FA07, 0xFA000303);
	r3 = D(r3, s1_1_2, 0xFC12F80E, 0xFF08020C, 0xFFFB02FF, 0x00090401);
	r4 = D(r4, s1_1_2, 0xF7090005, 0x10FDF4FD, 0xFFFE0101, 0xFA06F4FE);
	r5 = D(r5, s1_1_2, 0xE6F7A40A, 0x000D00FE, 0xFD050305, 0x00000007);
	r6 = D(r6, s1_1_2, 0xEE0BB5E7, 0x03FF0201, 0xFF1FF30E, 0x03EFFDFB);
	r7 = D(r7, s1_1_2, 0xF002F000, 0x0DFCFFFF, 0x01FE0402, 0xF4FDFEFF);
	r0 = D(r0, s1_2_0, 0xFCF6060E, 0x19C9E904, 0x030CFD08, 0x0EFE12F8);
	r1 = D(r1, s1_2_0, 0x8181FF81, 0x00EFEAD6, 0xFB0513F8, 0x0AF5FDF6);
	r2 = D(r2, s1_2_0, 0xF7020805, 0xF4FBF702, 0xF9010AFA, 0x0302FE0B);
	r3 = D(r3, s1_2_0, 0x15E60300, 0xFCFE0602, 0x00FD000A, 0xFC04FE02);
	r4 = D(r4, s1_2_0, 0xF9FB0704, 0x02020105, 0x0003FFFD, 0x0501FA06);
	r5 = D(r5, s1_2_0, 0xF20DFF06, 0xF00BFB03, 0xF20C0EF3, 0xFA05F705);
	r6 = D(r6, s1_2_0, 0x0001DBFA, 0xFF0301FA, 0x1901F603, 0xFDFBFD05);
	r7 = D(r7, s1_2_0, 0xFBEB02FB, 0xFFFE02FC, 0x05F8F302, 0x0EF704FE);
	r0 = D(r0, s1_2_1, 0xF106FDF3, 0xEE19CBEE, 0xF6EDEFF1, 0x11EFDA0F);
	r1 = D(r1, s1_2_1, 0x2BF3DDFE, 0x1708D7FF, 0xE7EF1904, 0xFF1107F1);
	r2 = D(r2, s1_2_1, 0x00000702, 0x0106F408, 0xFEFEFBFA, 0x02FFF0FF);
	r3 = D(r3, s1_2_1, 0x06F9FDF9, 0xFBFCE6F7, 0x0403EFF9, 0xFF02E402);
	r4 = D(r4, s1_2_1, 0xF7FF0F06, 0xF50C0403, 0x03FFFEFF, 0xE70601F8);
	r5 = D(r5, s1_2_1, 0xF121021E, 0xE8041400, 0xC00B01F3, 0x12F6F705);
	r6 = D(r6, s1_2_1, 0x280881F0, 0x0601FB02, 0xF90104F4, 0x0801F8FC);
	r7 = D(r7, s1_2_1, 0x0E07EA07, 0x09FCF300, 0x030E0B03, 0x10F2FAF7);
	r0 = D(r0, s1_2_2, 0x00F805F8, 0x0AFF050F, 0x0203020B, 0xECFC1EE4);
	r1 = D(r1, s1_2_2, 0xE50B070D, 0x1405F4FD, 0xFBFA050C, 0x08EBFA04);
	r2 = D(r2, s1_2_2, 0xF5010102, 0xFBF2FD01, 0x03FEFFF7, 0xF8FF03FC);
	r3 = D(r3, s1_2_2, 0xF3F502F8, 0x040302F3, 0x030000FF, 0xFF00FD02);
	r4 = D(r4, s1_2_2, 0xF70302FF, 0x0405FEF9, 0x02FFFDFE, 0xFB07FE01);
	r5 = D(r5, s1_2_2, 0xDE11120B, 0xED0401FE, 0xF403FB03, 0x0501FFFE);
	r6 = D(r6, s1_2_2, 0xF208D405, 0x03FFFEFF, 0xF71BFC03, 0xF706060C);
	r7 = D(r7, s1_2_2, 0xDB0AFAF7, 0xFD00FF01, 0x04000103, 0x03050307);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02F40503, 0xFD0CFA07, 0x1CFBFF13, 0xFFFAFC02);
	r1 = D(r1, s0_0_0, 0xF8DA07FE, 0xFEE60CE7, 0xFBFCFE00, 0xFD06F808);
	r2 = D(r2, s0_0_0, 0xFAFCFC04, 0x4402F52A, 0x04FC0703, 0xFCF201FF);
	r3 = D(r3, s0_0_0, 0xFBF20B00, 0x09F8F9FE, 0x03FD0003, 0xFAFB0204);
	r4 = D(r4, s0_0_0, 0xFDFB030A, 0x03FB02F5, 0x0005FB03, 0x00F1FF05);
	r5 = D(r5, s0_0_0, 0x0EF8DB01, 0xF624010B, 0xFD000F06, 0x01210001);
	r6 = D(r6, s0_0_0, 0xF8032200, 0xFD080004, 0xF5F30405, 0xED031600);
	r7 = D(r7, s0_0_0, 0xF7F212F2, 0xFB0B0201, 0xFBED03FF, 0xFD0FFA02);
	r0 = D(r0, s0_0_1, 0x02FF00FE, 0x0CF906F1, 0x1C0D0518, 0x00F305FE);
	r1 = D(r1, s0_0_1, 0xFFE005FA, 0x05F0E7FA, 0xFFF60903, 0xF81BF008);
	r2 = D(r2, s0_0_1, 0x0609F200, 0x1CFCF214, 0x02D1F8FF, 0x00E80400);
	r3 = D(r3, s0_0_1, 0x06090305, 0x070103FC, 0x00F70801, 0x00FBF904);
	r4 = D(r4, s0_0_1, 0xFBF70408, 0x01E309FB, 0x02FDFFFF, 0x0505F5FE);
	r5 = D(r5, s0_0_1, 0x0B1CF6F1, 0xFA1FFFF7, 0xFD03090B, 0x09070B07);
	r6 = D(r6, s0_0_1, 0xD42C00E8, 0x000404FF, 0x06EF1004, 0xEF0323F6);
	r7 = D(r7, s0_0_1, 0xF7E21100, 0x03FD07FD, 0xFA0503F9, 0xF1FC010A);
	r0 = D(r0, s0_0_2, 0x0E0EEE03, 0xFD061006, 0x1D07F614, 0xED1A0700);
	r1 = D(r1, s0_0_2, 0x04FE00FF, 0xF84EFA13, 0x03FE0400, 0x0202EF07);
	r2 = D(r2, s0_0_2, 0x04FC07FC, 0x37FFE620, 0xFF050905, 0x01FBFF05);
	r3 = D(r3, s0_0_2, 0x06F4FCFF, 0x03010B00, 0x0100FDFE, 0x010506FF);
	r4 = D(r4, s0_0_2, 0xFAF8FE04, 0xFC05FF02, 0x01FCFD02, 0x1309FB01);
	r5 = D(r5, s0_0_2, 0xF50F05E4, 0xFD0AF806, 0xF701FD06, 0xFDF80205);
	r6 = D(r6, s0_0_2, 0xF5FF14F5, 0xFFFE0202, 0x06E8E408, 0xFDFA15F5);
	r7 = D(r7, s0_0_2, 0xFFE3FD00, 0x04FF02FE, 0xFE0AFE02, 0xFD070402);
	r0 = D(r0, s0_1_0, 0x010BFC00, 0xFE27E606, 0x23FC0012, 0xF5F90114);
	r1 = D(r1, s0_1_0, 0xF8461B05, 0xFB0FF90E, 0x0309FBFE, 0x000BE30B);
	r2 = D(r2, s0_1_0, 0xFE20FC07, 0x1F200815, 0xFEFC0600, 0x030DFB04);
	r3 = D(r3, s0_1_0, 0x05060A0E, 0xFDF40501, 0x000AFB02, 0x00FE02FC);
	r4 = D(r4, s0_1_0, 0xFDFBF701, 0xF9FF0CF5, 0x0104FF00, 0xFF1D0203);
	r5 = D(r5, s0_1_0, 0x060825E1, 0x010A0803, 0x02DD0C02, 0x02FAFDF7);
	r6 = D(r6, s0_1_0, 0xCFD4F309, 0x00FC0201, 0xF612F507, 0xFC07EA06);
	r7 = D(r7, s0_1_0, 0xEFFFDF05, 0x02F9F301, 0xFD1AF8FF, 0xF102F908);
	r0 = D(r0, s0_1_1, 0x02FCF2F3, 0xFF0907F9, 0x1B00F30E, 0x1026DCF8);
	r1 = D(r1, s0_1_1, 0x04381CFD, 0xF105D907, 0x01DBFF09, 0xF10AEE06);
	r2 = D(r2, s0_1_1, 0x020AFC01, 0xFC01F4EC, 0x0B1308FC, 0xFDFF03FE);
	r3 = D(r3, s0_1_1, 0x03F2FC05, 0x0D150700, 0xFF050BFC, 0x020AFC01);
	r4 = D(r4, s0_1_1, 0x07D5E9F7, 0xFD0F14FC, 0x00110501, 0x04F6EEFC);
	r5 = D(r5, s0_1_1, 0xFC0105F8, 0xFEE1C103, 0x03E9FE09, 0x0126F904);
	r6 = D(r6, s0_1_1, 0xF5E00006, 0xFF1B0D03, 0x01E1EFF7, 0xFF18EC1D);
	r7 = D(r7, s0_1_1, 0xFC1204F3, 0xFDEF0EFF, 0x0014FA05, 0x02F4F80B);
	r0 = D(r0, s0_1_2, 0x0AFE00F9, 0x04FDF90A, 0x160FE912, 0x11E9E8F2);
	r1 = D(r1, s0_1_2, 0xFDEF0705, 0x17FC0E12, 0x01060804, 0x030A0404);
	r2 = D(r2, s0_1_2, 0x00F5FBFC, 0x1D14DF10, 0xFC1108FC, 0x0305FA00);
	r3 = D(r3, s0_1_2, 0x0004F703, 0xFDFD0FFE, 0x06010301, 0x03000803);
	r4 = D(r4, s0_1_2, 0x0302FBF8, 0xFF0CFE02, 0x0102FD01, 0x05FBFBF3);
	r5 = D(r5, s0_1_2, 0xFFF416F9, 0x0309FB03, 0x00180905, 0x02FD0203);
	r6 = D(r6, s0_1_2, 0x05F1F220, 0x00060100, 0x0EEAF0F9, 0xFCF6F701);
	r7 = D(r7, s0_1_2, 0x04FB0EE8, 0xFFF9FFFD, 0x00020303, 0xF20B0300);
	r0 = D(r0, s0_2_0, 0x040D0B02, 0xFAFCE11E, 0x1C070305, 0xFC0A070F);
	r1 = D(r1, s0_2_0, 0x81064981, 0x0AF9112A, 0xFE06E301, 0x07FCF50A);
	r2 = D(r2, s0_2_0, 0xFEF9FDFB, 0x4BFB0406, 0xFD05FB00, 0x04F60403);
	r3 = D(r3, s0_2_0, 0x04F5F407, 0x00F70004, 0x01FAFEFE, 0xFC04FDFA);
	r4 = D(r4, s0_2_0, 0xFEFA0302, 0xF8FD00FB, 0x02030201, 0x00020B02);
	r5 = D(r5, s0_2_0, 0xFBFB0CFA, 0xF70806FC, 0x02ED0B05, 0x0307FDFD);
	r6 = D(r6, s0_2_0, 0xFAEEFF05, 0x00070300, 0xF5E70DF2, 0xF6FDFCF8);
	r7 = D(r7, s0_2_0, 0xF2120AFB, 0xFE0700FF, 0x00FB0202, 0xF509F5FE);
	r0 = D(r0, s0_2_1, 0x03100502, 0x07C500E6, 0x1EF2FBF7, 0x02F5E00A);
	r1 = D(r1, s0_2_1, 0xF61AF810, 0xFDEAFB05, 0x0400E301, 0x0202E914);
	r2 = D(r2, s0_2_1, 0xFE0AF6FF, 0x2DF2F8F5, 0x0103FB06, 0x050001FA);
	r3 = D(r3, s0_2_1, 0x02140A05, 0xFC0704FB, 0xFFF000FE, 0xFE02F309);
	r4 = D(r4, s0_2_1, 0xFDFDF000, 0xFC0603FC, 0x04FEFD01, 0x0E1CF901);
	r5 = D(r5, s0_2_1, 0xF6E8E6FA, 0xF90EF205, 0x08FD150F, 0xFEF40200);
	r6 = D(r6, s0_2_1, 0xEA0812F5, 0x02020302, 0x10ED00FF, 0xFAFDFA09);
	r7 = D(r7, s0_2_1, 0xF90D09FF, 0x03030006, 0x00FCF300, 0xEEFAFC0B);
	r0 = D(r0, s0_2_2, 0x08EC07FB, 0xFB0115FF, 0x190D0109, 0xFDF30501);
	r1 = D(r1, s0_2_2, 0xF61005F7, 0x08C3E100, 0x00FBFDFC, 0x0BF0FB00);
	r2 = D(r2, s0_2_2, 0x01010002, 0x38FDF3FC, 0xFC0A03F8, 0x03060AFE);
	r3 = D(r3, s0_2_2, 0x00F4F203, 0xFDF4FB03, 0x01FCFC00, 0x01F80302);
	r4 = D(r4, s0_2_2, 0xFF1408F8, 0x02040DFE, 0x0201FF01, 0x0D000902);
	r5 = D(r5, s0_2_2, 0xF3EE05FC, 0xFB041200, 0x06040E03, 0xFD03FF05);
	r6 = D(r6, s0_2_2, 0xF5FA0E01, 0xFF040101, 0x00091804, 0xF103F60B);
	r7 = D(r7, s0_2_2, 0xF70D16F0, 0x00F903FF, 0x02010101, 0xEC000701);
	r0 = D(r0, s1_0_0, 0x0900F911, 0x150FF80E, 0x0B15F803, 0xFFFF0602);
	r1 = D(r1, s1_0_0, 0xFFF2F904, 0x1B29D218, 0x010403FB, 0xFB0105F3);
	r2 = D(r2, s1_0_0, 0x07040007, 0xFF13F102, 0x01F803F8, 0x0202FFFB);
	r3 = D(r3, s1_0_0, 0x00F9FC02, 0x01FB0704, 0xFB02FD04, 0xFB02FDFE);
	r4 = D(r4, s1_0_0, 0x0302FF07, 0xFBED03FC, 0xFD03FF00, 0x050200FF);
	r5 = D(r5, s1_0_0, 0x1BF5FA1F, 0x0E0AED13, 0x000AFF01, 0x010300FF);
	r6 = D(r6, s1_0_0, 0xF313F31D, 0x0005FB01, 0x1003F40A, 0x04FDF5FD);
	r7 = D(r7, s1_0_0, 0xE2F808F9, 0xFD0303FE, 0xF802FE07, 0x050BF906);
	r0 = D(r0, s1_0_1, 0xF5F90DEE, 0xD8F90002, 0x0812F20E, 0xD40B060E);
	r1 = D(r1, s1_0_1, 0xFE010503, 0xD704E3E8, 0x0408FF06, 0x0601F601);
	r2 = D(r2, s1_0_1, 0x0A01F9F4, 0x0A16FC12, 0xFC0201FB, 0x04FF01FC);
	r3 = D(r3, s1_0_1, 0x0AF503F6, 0x04F603F8, 0x0101FC00, 0x0302FF04);
	r4 = D(r4, s1_0_1, 0xFAFF050B, 0x07FDFC04, 0x03000103, 0xEE0010F7);
	r5 = D(r5, s1_0_1, 0xF613D101, 0xFD060416, 0x0804F702, 0x01F800FF);
	r6 = D(r6, s1_0_1, 0x1E07F80A, 0x05FF0002, 0x04FE01FF, 0x0201ED04);
	r7 = D(r7, s1_0_1, 0x09F91007, 0xFD0300FD, 0x00FC040B, 0xE60403FB);
	r0 = D(r0, s1_0_2, 0x0DFFF705, 0x1D02F6F7, 0x0E13ED07, 0x1305FCEA);
	r1 = D(r1, s1_0_2, 0xF5FD0204, 0xFC1EFCEA, 0xF3FF0400, 0x0105E607);
	r2 = D(r2, s1_0_2, 0x0B020009, 0x0E1CE816, 0xF0FE0702, 0xFF0503F8);
	r3 = D(r3, s1_0_2, 0xFDFCFB07, 0x08FEFD01, 0x0001FD04, 0xFDFFFEFE);
	r4 = D(r4, s1_0_2, 0xFEFD0103, 0xF1050005, 0x04020000, 0x06080901);
	r5 = D(r5, s1_0_2, 0x1403D70B, 0x1308ED03, 0x0000F7FF, 0x01020200);
	r6 = D(r6, s1_0_2, 0xEC0206E3, 0x0701FFFE, 0x0215000A, 0xF7090206);
	r7 = D(r7, s1_0_2, 0xEC031701, 0xFE06FC05, 0xF70401FF, 0xF80200FB);
	r0 = D(r0, s1_1_0, 0xFB0D0C0C, 0x0D06EA10, 0x080AFBF9, 0xF5140302);
	r1 = D(r1, s1_1_0, 0x110FFE09, 0x0E0326EB, 0x0300FEFB, 0xE60EEF04);
	r2 = D(r2, s1_1_0, 0x0605F30E, 0x140FDFFB, 0x11F9FE02, 0xF20004FD);
	r3 = D(r3, s1_1_0, 0xDAFC01FA, 0x03F90F05, 0x0303FF01, 0xF7FF02FC);
	r4 = D(r4, s1_1_0, 0xFC0AFAFE, 0xFDF50DFB, 0x0403FA02, 0x060BFEFB);
	r5 = D(r5, s1_1_0, 0xFC0C22EF, 0x030EF10F, 0x050E0309, 0x05FEE600);
	r6 = D(r6, s1_1_0, 0xC71DEE06, 0x0605F903, 0x00FAF706, 0xF00C0801);
	r7 = D(r7, s1_1_0, 0x15FEFE0A, 0x0101F909, 0xF6FE0A09, 0xEA0EFF0B);
	r0 = D(r0, s1_1_1, 0x07F110FA, 0xD0F71BF0, 0x0B04FB08, 0xF6F6130E);
	r1 = D(r1, s1_1_1, 0x0304170B, 0xE9D814E7, 0x0806F5FC, 0xFE0CB702);
	r2 = D(r2, s1_1_1, 0xFAF9F50B, 0x0B03F8F4, 0x02FA05FA, 0xE2100705);
	r3 = D(r3, s1_1_1, 0x02F1EA0C, 0xFDF90AF6, 0x0701FF00, 0xF90102F5);
	r4 = D(r4, s1_1_1, 0xFB081301, 0x0FF5010D, 0xF9010502, 0x06FB0F11);
	r5 = D(r5, s1_1_1, 0xF90F25DD, 0x17000FF9, 0xF415F30C, 0xF80107F6);
	r6 = D(r6, s1_1_1, 0x1D06F700, 0xFCFF0FFF, 0xDF2410EE, 0xEA0906F3);
	r7 = D(r7, s1_1_1, 0x111EF702, 0x06060E02, 0xEE041C06, 0xF8070A04);
	r0 = D(r0, s1_1_2, 0xFFF401FC, 0x0904EE01, 0x0F0CEF04, 0x2000EA05);
	r1 = D(r1, s1_1_2, 0x0FFA00F7, 0xF40AB444, 0x0E07FCFB, 0xEC0FF1E5);
	r2 = D(r2, s1_1_2, 0x09010AF4, 0xEA0BF8FF, 0x080001FB, 0xF10C04F4);
	r3 = D(r3, s1_1_2, 0xF6F7F610, 0x00F2FEFF, 0x0702FD01, 0x00FFFA01);
	r4 = D(r4, s1_1_2, 0x0103FF0A, 0x1A0DF9F6, 0xFC0001FF, 0xF7F41BFD);
	r5 = D(r5, s1_1_2, 0x1A14FE02, 0x00F9FBFB, 0x0307FE05, 0x11F8FB08);
	r6 = D(r6, s1_1_2, 0x0E03090D, 0x0002FCFF, 0x120FF006, 0xEC00FDFD);
	r7 = D(r7, s1_1_2, 0x050101FC, 0x010B02F2, 0xEEFA080C, 0xF70A01FB);
	r0 = D(r0, s1_2_0, 0x000B060A, 0xF50BF0F1, 0x0109FF00, 0x1007FCFC);
	r1 = D(r1, s1_2_0, 0x175F2C81, 0x0F169608, 0xFAFD00FB, 0x1C05E1FF);
	r2 = D(r2, s1_2_0, 0xFD06F009, 0x1A13EEF4, 0x000AFAFB, 0xFB0410F7);
	r3 = D(r3, s1_2_0, 0x150A0306, 0xFDFA0F04, 0xFEFEFB02, 0x010113F8);
	r4 = D(r4, s1_2_0, 0x08FCFFF4, 0x03F9FF09, 0x0202FEFF, 0x220C09E5);
	r5 = D(r5, s1_2_0, 0xECF80AFC, 0xF8F50900, 0xF908E6FE, 0xF4FCFDFC);
	r6 = D(r6, s1_2_0, 0x12300802, 0x0302FD01, 0x1A03FFFE, 0xFE01EC00);
	r7 = D(r7, s1_2_0, 0xD9031103, 0x000307FD, 0x03FA0305, 0xF6040000);
	r0 = D(r0, s1_2_1, 0xFAFE16FC, 0xCD011BFE, 0xFA08E90B, 0xF9070700);
	r1 = D(r1, s1_2_1, 0x321210DD, 0xE11C811A, 0xF4FF0404, 0x0319D0F1);
	r2 = D(r2, s1_2_1, 0xFF08FBFC, 0x190C01EE, 0x060008FD, 0xFA01F9F9);
	r3 = D(r3, s1_2_1, 0x100BE3FD, 0x06F5FDFF, 0xFB000305, 0x00FFFB02);
	r4 = D(r4, s1_2_1, 0xFFF90E07, 0xFFFC0400, 0x03FF0501, 0x04F70F05);
	r5 = D(r5, s1_2_1, 0xF9F5F80B, 0xFAEDEB04, 0xEAF8E9FB, 0xEDFDFF05);
	r6 = D(r6, s1_2_1, 0xF30D08EB, 0x07FE0DFE, 0xED0113FF, 0xFF02FBFF);
	r7 = D(r7, s1_2_1, 0x050D1ED6, 0xFB0305F7, 0xF2F30209, 0x0A010705);
	r0 = D(r0, s1_2_2, 0xFCF50601, 0x0C05F001, 0x0C0AF3FF, 0x1ADDEB15);
	r1 = D(r1, s1_2_2, 0x0701FC02, 0x1527BFEF, 0xF0F7FE03, 0xC9FEEC12);
	r2 = D(r2, s1_2_2, 0x02010103, 0x0F11F307, 0xFB0103FF, 0xF60200FD);
	r3 = D(r3, s1_2_2, 0xEF00FB00, 0xFDFBF6FC, 0xFF000201, 0x000201FD);
	r4 = D(r4, s1_2_2, 0xF20102FE, 0x020203FC, 0x0602FF00, 0xFFFBFC04);
	r5 = D(r5, s1_2_2, 0x0CEEB714, 0xF0E9FE10, 0xFB06F7FE, 0xF9FDFFFF);
	r6 = D(r6, s1_2_2, 0xFCF60507, 0x0902FA01, 0xF1F7EB26, 0x0708FDED);
	r7 = D(r7, s1_2_2, 0xE5EE011C, 0x04FFFD07, 0x04F70103, 0xEF01FE01);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF60105FC, 0xF205F101, 0xFCEAFFF6, 0x0AFBF902);
	r1 = D(r1, s0_0_0, 0xFAF7FC0D, 0xFBFC16DD, 0x09FDFD02, 0xF50D42E5);
	r2 = D(r2, s0_0_0, 0x0D01FB03, 0xEFEBEB04, 0x02F8FA01, 0x00FBFF03);
	r3 = D(r3, s0_0_0, 0x05F6FA00, 0xF80006FC, 0xFB01FFFF, 0xFD06FEFE);
	r4 = D(r4, s0_0_0, 0x0606FB00, 0x04F0FE04, 0xFE02FE00, 0x0AFAFC02);
	r5 = D(r5, s0_0_0, 0x02F80BFB, 0x0F08FC03, 0xF7FC06F9, 0xFE09FC02);
	r6 = D(r6, s0_0_0, 0x1B1606EE, 0x0002FF01, 0xFBFE0808, 0x05FC03F7);
	r7 = D(r7, s0_0_0, 0x0CF7F7FE, 0x0800FFFF, 0xFB0907FF, 0xFB0B01F7);
	r0 = D(r0, s0_0_1, 0x0AFA14FD, 0x1FF208F8, 0xF3FE08FF, 0x0D080EFC);
	r1 = D(r1, s0_0_1, 0x010007F7, 0x1FFE08F2, 0x0A09FE01, 0x10061DF8);
	r2 = D(r2, s0_0_1, 0xFAF8F105, 0xFE01FBEE, 0x04FB0308, 0xFCF0FD02);
	r3 = D(r3, s0_0_1, 0xF9F70110, 0xFDFE0604, 0x02000103, 0x0207FD01);
	r4 = D(r4, s0_0_1, 0x150A0A00, 0x0301FF06, 0x040700FF, 0xE9FB07EF);
	r5 = D(r5, s0_0_1, 0xF60F00F3, 0x10140BEC, 0x100AFC03, 0xF8050001);
	r6 = D(r6, s0_0_1, 0xF4EF09E7, 0x0507FFFD, 0xEA050901, 0x07F402F5);
	r7 = D(r7, s0_0_1, 0x0B02EB00, 0x10FCFFFE, 0xFE0903FF, 0xFF0513F7);
	r0 = D(r0, s0_0_2, 0xF604FA04, 0x02F40105, 0xF0020EF5, 0x01F40208);
	r1 = D(r1, s0_0_2, 0xF7FA0604, 0x00F9AAE6, 0x00FF0A02, 0xF1F84301);
	r2 = D(r2, s0_0_2, 0xFAFAFEF9, 0xF9F30C10, 0x0AF8070D, 0xFEFE0803);
	r3 = D(r3, s0_0_2, 0xFB11F302, 0xF900FA07, 0xFE01FC01, 0xFFFBF505);
	r4 = D(r4, s0_0_2, 0x0DFF15FF, 0x02081300, 0x0101FBFD, 0x000910F9);
	r5 = D(r5, s0_0_2, 0x0C06F3E3, 0x0901F802, 0xFC04FCFD, 0xFE00F8FC);
	r6 = D(r6, s0_0_2, 0x18FB1CE3, 0xFFFCFAFA, 0x05FD08F5, 0x0CE9CDF5);
	r7 = D(r7, s0_0_2, 0x17F5FC00, 0x05010CF6, 0x040CFDF0, 0xFF090FFC);
	r0 = D(r0, s0_1_0, 0x1005FDFA, 0xE80B0609, 0xFAFD0BFA, 0x0913FDF9);
	r1 = D(r1, s0_1_0, 0x091712FF, 0x060CD41C, 0x0AF30E00, 0xF1F435DB);
	r2 = D(r2, s0_1_0, 0x0FFCFCF8, 0xFAF5FB07, 0xFD02FF00, 0xFDFD08F9);
	r3 = D(r3, s0_1_0, 0x2D0DE704, 0x02FA0603, 0x05FBFA00, 0x07FCFC05);
	r4 = D(r4, s0_1_0, 0x01020607, 0x05FDF706, 0x0105FFFF, 0xE51207F1);
	r5 = D(r5, s0_1_0, 0x07F8DB0B, 0xED08FA03, 0xEE000B03, 0xF106EEF0);
	r6 = D(r6, s0_1_0, 0x1EFFE1FF, 0x0402FFFF, 0x1304FBF9, 0x03F6FFE6);
	r7 = D(r7, s0_1_0, 0x0B060CFD, 0x020305FC, 0xF50204EF, 0x021505E7);
	r0 = D(r0, s0_1_1, 0xDEFF1C02, 0x1EF7CD10, 0xF9070B0C, 0xF8FE1DE7);
	r1 = D(r1, s0_1_1, 0x28030BF4, 0x070DE5C2, 0xFA0405F2, 0xE10DEFDE);
	r2 = D(r2, s0_1_1, 0xFF0F0311, 0x010FFDF5, 0xED0EF2F3, 0x00161009);
	r3 = D(r3, s0_1_1, 0xF8E710F8, 0x01F6050A, 0x0C0F01F9, 0xEBFCF0F1);
	r4 = D(r4, s0_1_1, 0x0AFDF9F4, 0x07F8FA02, 0x0306FE00, 0x1E0D05F7);
	r5 = D(r5, s0_1_1, 0x05F1EA0B, 0xF5EDE714, 0xFD00F411, 0xF700F7F5);
	r6 = D(r6, s0_1_1, 0x0F0A04ED, 0x0704FBFF, 0x27001A18, 0x26050004);
	r7 = D(r7, s0_1_1, 0xD81503F6, 0x00050905, 0x090C1113, 0xFC0C01F6);
	r0 = D(r0, s0_1_2, 0xF113F606, 0xF30217FE, 0xF502FBFF, 0xFAF2000C);
	r1 = D(r1, s0_1_2, 0x13F203FA, 0x0DFC0A15, 0x0DFCFEF8, 0xF6F44281);
	r2 = D(r2, s0_1_2, 0x0BF6FFFC, 0xEE01FB0C, 0x01070403, 0x02FB0D0D);
	r3 = D(r3, s0_1_2, 0xF1060403, 0xFCF90400, 0x06FFFFF9, 0xFD07FBFF);
	r4 = D(r4, s0_1_2, 0xFF05F711, 0x08FB05FE, 0xFE030102, 0xFEF9FECC);
	r5 = D(r5, s0_1_2, 0xFA098116, 0xF408EDFB, 0xFC06FD03, 0xFB08F0EF);
	r6 = D(r6, s0_1_2, 0x37FA08FB, 0x01FE0304, 0xFEF7E51C, 0xFF040205);
	r7 = D(r7, s0_1_2, 0x16F9F206, 0x040700FA, 0xFE060008, 0x08F70002);
	r0 = D(r0, s0_2_0, 0xFA000FF5, 0xED1ADF05, 0x060204FC, 0xED0BF313);
	r1 = D(r1, s0_2_0, 0xC8D1E4BD, 0x03FEDFCA, 0x050301F7, 0xF2F7419E);
	r2 = D(r2, s0_2_0, 0x0508F9F9, 0xFEEB0C04, 0x09FBFD09, 0xFE0608FF);
	r3 = D(r3, s0_2_0, 0x07010CEA, 0xF8F30005, 0x01FFFAFF, 0xFEF9F800);
	r4 = D(r4, s0_2_0, 0xFBF30C09, 0x04020201, 0xFF01FE03, 0x020CFC09);
	r5 = D(r5, s0_2_0, 0x0907D4F6, 0x03F3F602, 0xFDF200F3, 0x0602F0FF);
	r6 = D(r6, s0_2_0, 0x08EA0AFB, 0x0200FE08, 0xFE0B1417, 0xF60C01FE);
	r7 = D(r7, s0_2_0, 0x18EFEF17, 0xFE01FE03, 0xF50C0606, 0xF60D0D11);
	r0 = D(r0, s0_2_1, 0x16F5FD00, 0x21E0FFFE, 0x0DFD03EE, 0x1DE6DA0B);
	r1 = D(r1, s0_2_1, 0x0105FE11, 0x121F0BFC, 0x0CFB0000, 0xF2F43181);
	r2 = D(r2, s0_2_1, 0xFF05F806, 0xF0EEFDEC, 0x0B000501, 0xFBFF01EC);
	r3 = D(r3, s0_2_1, 0x01FEF30E, 0x04F50101, 0x0102F90B, 0x0305070A);
	r4 = D(r4, s0_2_1, 0xF701020A, 0x02FFFF06, 0x0103FBFC, 0xF0FFFBC8);
	r5 = D(r5, s0_2_1, 0x14E200F9, 0x03E8F119, 0xF2F9FBF1, 0x000AFD09);
	r6 = D(r6, s0_2_1, 0xFDE5EAE2, 0x0802FEFB, 0x1AE71BCD, 0xFD02FDE2);
	r7 = D(r7, s0_2_1, 0x09F9F80D, 0x06FDFA05, 0xFB09F6DD, 0xEB03FBFC);
	r0 = D(r0, s0_2_2, 0x0BFC01F3, 0xFFFEF7FD, 0xFA0703F3, 0x08E7FDCF);
	r1 = D(r1, s0_2_2, 0x04F1FAFD, 0xF3EAF3AB, 0x020108F5, 0xF7032A81);
	r2 = D(r2, s0_2_2, 0x01040203, 0xF8020103, 0x01FA03F7, 0x03040903);
	r3 = D(r3, s0_2_2, 0x000B01F8, 0xFFF6F808, 0xF8080100, 0xFFFAFE01);
	r4 = D(r4, s0_2_2, 0x020304FE, 0x03030707, 0xFD0002FC, 0x14040809);
	r5 = D(r5, s0_2_2, 0xF3EF1BD3, 0x0DF314E0, 0xF8F20AFE, 0xF804F2FF);
	r6 = D(r6, s0_2_2, 0x19F6F50D, 0x00FF03F8, 0x13FB020C, 0xF9F9EE05);
	r7 = D(r7, s0_2_2, 0x0EF005F8, 0x04FFFFFD, 0xEE0402FF, 0x02020503);
	r0 = D(r0, s1_0_0, 0xFEFBF21A, 0x0012FC07, 0x03FDF9FA, 0x0DFFFEFE);
	r1 = D(r1, s1_0_0, 0xFF03F702, 0x1C0202D9, 0xFCFEFC00, 0xFB080200);
	r2 = D(r2, s1_0_0, 0xFE0DF10B, 0xEDFD09FD, 0xEC02FDEC, 0x0604F702);
	r3 = D(r3, s1_0_0, 0x0AF6EF05, 0xF80506F8, 0xF703FC10, 0xF90307FE);
	r4 = D(r4, s1_0_0, 0x11080002, 0x00F3F8F8, 0x000307FF, 0x000B050B);
	r5 = D(r5, s1_0_0, 0x2AF71000, 0x1810041D, 0xFF020900, 0x070AFE08);
	r6 = D(r6, s1_0_0, 0xED25CA11, 0x03020501, 0x0B100D00, 0x07160806);
	r7 = D(r7, s1_0_0, 0xFAE206DC, 0x0B06FB01, 0x01FF0209, 0xFD0418FB);
	r0 = D(r0, s1_0_1, 0xF1E618D1, 0x11E9F51A, 0xFD01F7ED, 0xFAE202E8);
	r1 = D(r1, s1_0_1, 0x05FD03F7, 0xE827DDC5, 0xF901FA0E, 0xF60AE8FD);
	r2 = D(r2, s1_0_1, 0x0E02FAF6, 0x070AEF08, 0x0BE7050A, 0x0304FA03);
	r3 = D(r3, s1_0_1, 0x1308ED0A, 0xFF050AFA, 0xFF04FE01, 0x06FFF60C);
	r4 = D(r4, s1_0_1, 0x0A070202, 0x08FDEF00, 0x04FF05F4, 0x04E1FEFB);
	r5 = D(r5, s1_0_1, 0x2C020611, 0x18031808, 0x0700FF02, 0x020BFC05);
	r6 = D(r6, s1_0_1, 0x0E1E02E0, 0x0800F9FE, 0xFD2017E2, 0x0C061BF3);
	r7 = D(r7, s1_0_1, 0xE4FD20E8, 0xFC0905FD, 0xFCF111FB, 0xFDF3001A);
	r0 = D(r0, s1_0_2, 0xFDFEF901, 0xFD04F6F7, 0x00FC03F4, 0xF80EFE00);
	r1 = D(r1, s1_0_2, 0xFF0205F8, 0x18FBD4FD, 0x02FBFD08, 0x07FCF70C);
	r2 = D(r2, s1_0_2, 0xFF01FB08, 0xFE05F6FE, 0x04F5FE0D, 0xFEFFFC01);
	r3 = D(r3, s1_0_2, 0xFB05000C, 0xFB0B0400, 0xFE0102FD, 0x0305F800);
	r4 = D(r4, s1_0_2, 0x02F9F401, 0x00000202, 0x04FC0002, 0x09FBF709);
	r5 = D(r5, s1_0_2, 0x1908E6F9, 0x09FF01F3, 0x020100FF, 0xFE0002FD);
	r6 = D(r6, s1_0_2, 0xFD0AE840, 0x01FFFE06, 0xF8FE0406, 0xFAED0909);
	r7 = D(r7, s1_0_2, 0x09D4021A, 0xF70404FB, 0xFCFB07FB, 0xF6050008);
	r0 = D(r0, s1_1_0, 0xFDFE1318, 0xE814180B, 0x05FCF712, 0x110906FF);
	r1 = D(r1, s1_1_0, 0xE416430A, 0x0E0AC5F4, 0x0BFFEA01, 0xEF02F4F0);
	r2 = D(r2, s1_1_0, 0x1001F311, 0x1204F4FC, 0x0007FE03, 0xFFFF0802);
	r3 = D(r3, s1_1_0, 0x120513F2, 0xF707FC00, 0xFFF9190B, 0x02F61617);
	r4 = D(r4, s1_1_0, 0xFAECFFD9, 0x040105F8, 0x03010301, 0xFE16FFF2);
	r5 = D(r5, s1_1_0, 0x0BED13F6, 0x09F6F8FE, 0xE402E4E4, 0x02FF05FC);
	r6 = D(r6, s1_1_0, 0xF1EC0CC4, 0x06FB030C, 0x2902F219, 0x0C0802F3);
	r7 = D(r7, s1_1_0, 0x15F20619, 0x07F80AEC, 0xF8040C13, 0x060904F8);
	r0 = D(r0, s1_1_1, 0xE907F1DC, 0x07E3C43B, 0x0AFAF9FB, 0x05DD81E9);
	r1 = D(r1, s1_1_1, 0x050B0CFC, 0xF505FC03, 0x0D0EF617, 0x060603FB);
	r2 = D(r2, s1_1_1, 0x060903F9, 0x03FC03FE, 0x1801010A, 0xEBF5FDEA);
	r3 = D(r3, s1_1_1, 0x0510F5E3, 0xFE010B08, 0x03130DE9, 0xFF0D0802);
	r4 = D(r4, s1_1_1, 0x01E2F1BD, 0xF5FE0013, 0x04FD06F9, 0x0EEAFD05);
	r5 = D(r5, s1_1_1, 0x96E81293, 0x0D030901, 0x04E3C8CF, 0x080DFAF9);
	r6 = D(r6, s1_1_1, 0xE50224EF, 0x07FCFF09, 0x16FBDBA7, 0x0AEFF501);
	r7 = D(r7, s1_1_1, 0x151EE912, 0x050DF6F8, 0xFCF80605, 0x090C0A03);
	r0 = D(r0, s1_1_2, 0xEEF10FED, 0xF917F8EF, 0xF7FA08FE, 0xFD00F1F1);
	r1 = D(r1, s1_1_2, 0x0801FFFC, 0x11F9F703, 0x08FDFCFB, 0x0501ED0C);
	r2 = D(r2, s1_1_2, 0x0DF80305, 0x06ECF9F3, 0x14F8FFFD, 0xFC03F805);
	r3 = D(r3, s1_1_2, 0xFEF804F7, 0xF908FE06, 0xFFFC0707, 0xFC02FC06);
	r4 = D(r4, s1_1_2, 0xF7E90102, 0x070FFEFF, 0x00FCFF03, 0x0DF1E21C);
	r5 = D(r5, s1_1_2, 0x00DBF0F5, 0x05FAFCF4, 0xFCFAF30B, 0x050804EF);
	r6 = D(r6, s1_1_2, 0xEBE8E61E, 0xFD02FD01, 0x22FDDBFD, 0x0DFF0AF4);
	r7 = D(r7, s1_1_2, 0x19ECF4FA, 0x0A0603F7, 0xF50307FA, 0x02FEFC00);
	r0 = D(r0, s1_2_0, 0x08FC0A11, 0xFAF7FC23, 0xFEFBFA06, 0x1301F901);
	r1 = D(r1, s1_2_0, 0xEEE42881, 0x0EFBFDED, 0xFE09FEF5, 0x0900F90E);
	r2 = D(r2, s1_2_0, 0x04FCF1FD, 0x03F3F710, 0xFE02FDFF, 0x0502F300);
	r3 = D(r3, s1_2_0, 0x1905F70C, 0xF8FE0500, 0xFF000703, 0x0105FE06);
	r4 = D(r4, s1_2_0, 0xFA02F8FA, 0x0B0105FE, 0x0402FFFE, 0xFCF911E4);
	r5 = D(r5, s1_2_0, 0xF20DEF21, 0xF900FD04, 0xF10AEE08, 0xF5FC0AFD);
	r6 = D(r6, s1_2_0, 0x1DF9EE03, 0x0600FD03, 0x19F5FAF1, 0x08F9F60A);
	r7 = D(r7, s1_2_0, 0xFFF5FD0A, 0x03FFFE04, 0xFDFC0807, 0x0CF8FA0A);
	r0 = D(r0, s1_2_1, 0xFA030FFB, 0xFA01F814, 0xF6F7020E, 0x08070CD7);
	r1 = D(r1, s1_2_1, 0x0318F6F7, 0xFFF20600, 0xF7FAFD04, 0xF90102F0);
	r2 = D(r2, s1_2_1, 0x04FDFCF2, 0xFF0EF8F3, 0x02FB00FD, 0x080000FA);
	r3 = D(r3, s1_2_1, 0xF502FDEF, 0xF2010AFF, 0x00FB0202, 0x04FFFA0E);
	r4 = D(r4, s1_2_1, 0xFF04F909, 0xFBFEFE07, 0x030000FD, 0xFDFCF6FB);
	r5 = D(r5, s1_2_1, 0x0908FBFF, 0xE70701F5, 0xF9FBF9ED, 0xFD0000FC);
	r6 = D(r6, s1_2_1, 0xF317EB14, 0x00FEFB04, 0x1807E4DA, 0x1802EF01);
	r7 = D(r7, s1_2_1, 0xEC09FFFC, 0x00FEFB04, 0x07030003, 0x040F05FD);
	r0 = D(r0, s1_2_2, 0x05EE0309, 0x0303EEFC, 0xE803FE03, 0xECFA0CED);
	r1 = D(r1, s1_2_2, 0x0900F6F9, 0x2F070AD9, 0x0304FF0B, 0x09FEFF09);
	r2 = D(r2, s1_2_2, 0x07F8FBF6, 0xF5020105, 0x09F7FDFE, 0x00FE02FD);
	r3 = D(r3, s1_2_2, 0xF1FE03FC, 0xF3010502, 0x050003FA, 0x0302FF04);
	r4 = D(r4, s1_2_2, 0xFF07FD00, 0xFFFDFF0E, 0xFF0000FF, 0xF8FA01FA);
	r5 = D(r5, s1_2_2, 0xF714F719, 0xFEF00007, 0xEFF9FC0A, 0x010002FA);
	r6 = D(r6, s1_2_2, 0x18E8EAFE, 0xFD010100, 0xF6EDFC08, 0x0F02FAF8);
	r7 = D(r7, s1_2_2, 0x03DF010B, 0x03FCFE01, 0xFD020A00, 0x010701F7);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF3FF150C, 0xE3FF32E5, 0xF8120900, 0x060607F3);
	r1 = D(r1, s0_0_0, 0xFBFE180B, 0xFA109E1B, 0x0AFD0604, 0xEBFEFF06);
	r2 = D(r2, s0_0_0, 0xF8FC0F03, 0x0521FCEF, 0x060C02F8, 0x06FE0C03);
	r3 = D(r3, s0_0_0, 0xF9FA1C24, 0x010609FD, 0xFD050603, 0xFFFD0A06);
	r4 = D(r4, s0_0_0, 0xFE00F9FC, 0x0C02FF02, 0x0300F7FC, 0xF501F4F4);
	r5 = D(r5, s0_0_0, 0xF805F8F5, 0x06F7EEF0, 0xF9FAD1F3, 0xFCF6F10B);
	r6 = D(r6, s0_0_0, 0xD4F6D116, 0x01FFFAF9, 0xF0F90000, 0xF7F5F705);
	r7 = D(r7, s0_0_0, 0x27050FEF, 0x02FCF7FD, 0x03FC07F8, 0xF300F3FD);
	r0 = D(r0, s0_0_1, 0xEA05EA0F, 0xF2F3FA0C, 0xF926EFEF, 0x150510F3);
	r1 = D(r1, s0_0_1, 0x05FE0BFF, 0xE8FF81FC, 0xF6FD1802, 0xF6102104);
	r2 = D(r2, s0_0_1, 0xF8FE0807, 0x1720F708, 0x0D031100, 0x1001FCFE);
	r3 = D(r3, s0_0_1, 0xF001D70A, 0x0601F902, 0xFE0405FE, 0x01FE0D05);
	r4 = D(r4, s0_0_1, 0x0E0205F9, 0x1308FA03, 0xFEFF0501, 0x02110E00);
	r5 = D(r5, s0_0_1, 0xECF2E7FA, 0x0005110B, 0xFD04EE07, 0xF9FB0311);
	r6 = D(r6, s0_0_1, 0xE911A2E7, 0xF4000A04, 0x0816F5E0, 0xDEF5E3FB);
	r7 = D(r7, s0_0_1, 0xB016EFD3, 0xF902FB04, 0x06FE05FE, 0xFB06ECFF);
	r0 = D(r0, s0_0_2, 0x18FCF209, 0x04010FFD, 0xF91EF7FC, 0xD8EC0DF2);
	r1 = D(r1, s0_0_2, 0xF000FF03, 0xFBECB406, 0x01FE06FA, 0xF50FE50A);
	r2 = D(r2, s0_0_2, 0xFD01FD08, 0xFF28DFF1, 0xFB0406FE, 0xF7FB0000);
	r3 = D(r3, s0_0_2, 0x0B0501FF, 0x0D06FBFF, 0x0302FBFC, 0xFA03F602);
	r4 = D(r4, s0_0_2, 0xF600FEEA, 0x000AFCF4, 0xFD01FC00, 0xE6F1F7F8);
	r5 = D(r5, s0_0_2, 0x05F7F4E4, 0xFC06F7FB, 0x0103F7F6, 0xFFFFFA03);
	r6 = D(r6, s0_0_2, 0xB1F5E623, 0xFB02FAFE, 0xEFFED70D, 0xE5F1070F);
	r7 = D(r7, s0_0_2, 0xFD021A03, 0xF901F2FF, 0xF8FC01FC, 0x0803F1FF);
	r0 = D(r0, s0_1_0, 0xFD070203, 0xF608FD02, 0xF70CF1F6, 0xFF06EFF0);
	r1 = D(r1, s0_1_0, 0xD7FFFB09, 0xFE17B0F0, 0xFCFB04FF, 0xFA020302);
	r2 = D(r2, s0_1_0, 0xFCF9FA02, 0x1804F9EE, 0xFC030504, 0xF50100FC);
	r3 = D(r3, s0_1_0, 0xEC060A07, 0xFFF7110B, 0xFFFEFDFE, 0xFAFF030A);
	r4 = D(r4, s0_1_0, 0x04FB02FB, 0x04FCF9FA, 0x0201FD00, 0x1912E6F2);
	r5 = D(r5, s0_1_0, 0x0EFF1301, 0xF908FE01, 0x0CFBE6F8, 0x02F6F105);
	r6 = D(r6, s0_1_0, 0x0D120EF4, 0xFE0302FF, 0x021006DE, 0x1305F2F7);
	r7 = D(r7, s0_1_0, 0xE702F312, 0xF7010902, 0x0E02F3F9, 0x0207E4FB);
	r0 = D(r0, s0_1_1, 0x0FF8EFF1, 0xEF020511, 0x011A01FE, 0xF00C1011);
	r1 = D(r1, s0_1_1, 0xFB011B0F, 0xE31214F6, 0x06FB0003, 0xF700E80A);
	r2 = D(r2, s0_1_1, 0x0403F803, 0x07060902, 0xF50809FB, 0xFF02F9F4);
	r3 = D(r3, s0_1_1, 0x08FCED06, 0x02040EF7, 0x010202FD, 0xF30805FA);
	r4 = D(r4, s0_1_1, 0x020C14FE, 0x0005F6F8, 0x0001FEFE, 0x0F05E0EC);
	r5 = D(r5, s0_1_1, 0xFDF22904, 0x0B05F905, 0x09F2EF00, 0xF900040E);
	r6 = D(r6, s0_1_1, 0x990BFDDF, 0xFA0500FE, 0xFC03DFFE, 0x06FB0303);
	r7 = D(r7, s0_1_1, 0xDA0A0FD7, 0xFBFFE4F7, 0x01FE0002, 0xF903FBFE);
	r0 = D(r0, s0_1_2, 0xFF0802F9, 0xFEFC0EED, 0x0A1FF9F9, 0x0900C9FC);
	r1 = D(r1, s0_1_2, 0x00050B01, 0x0D09FEFB, 0xEFFE0910, 0xF0FC0D17);
	r2 = D(r2, s0_1_2, 0xF7050D05, 0xF9181102, 0x000207F7, 0x00FA0408);
	r3 = D(r3, s0_1_2, 0xFA0CF6FF, 0x0CFB03F8, 0xFB0107FE, 0xFF01F803);
	r4 = D(r4, s0_1_2, 0x0600EE00, 0xF9090EFC, 0x0202FE00, 0x0A0307FB);
	r5 = D(r5, s0_1_2, 0x34DFDB03, 0x09FF0C01, 0x03F90704, 0x01FBF500);
	r6 = D(r6, s0_1_2, 0xE7FF05F2, 0x0203FCFF, 0xEEE4D4FD, 0x02F70706);
	r7 = D(r7, s0_1_2, 0xECF6FA07, 0xF1030305, 0xFDFD02F9, 0xF0F910FF);
	r0 = D(r0, s0_2_0, 0xFD0B0003, 0xFA001104, 0xFA1200FD, 0x02070AF3);
	r1 = D(r1, s0_2_0, 0x81815881, 0x09F2E7FD, 0x01F407FF, 0xF8FF0809);
	r2 = D(r2, s0_2_0, 0xFB000106, 0xFE3AF5FC, 0x0004FDFF, 0x040300FB);
	r3 = D(r3, s0_2_0, 0xF8041207, 0xF8FD0309, 0x01FE00FE, 0x0205FEFC);
	r4 = D(r4, s0_2_0, 0xFE000603, 0xFCF70BFE, 0x0105FDFF, 0x0013FAEC);
	r5 = D(r5, s0_2_0, 0xFBF5E80F, 0xFF000409, 0xF8FD0508, 0x00FAFA01);
	r6 = D(r6, s0_2_0, 0xB5DDFE12, 0x030501FE, 0x06F618FB, 0xF9ECFC0B);
	r7 = D(r7, s0_2_0, 0x1A00FEEA, 0x020001FD, 0xF8F9FB0A, 0xF902F709);
	r0 = D(r0, s0_2_1, 0xF405F908, 0xC10F0830, 0x0522FD01, 0x02091507);
	r1 = D(r1, s0_2_1, 0x030309E9, 0xE1EE9522, 0x08FB01FE, 0xF504EE02);
	r2 = D(r2, s0_2_1, 0x040501F9, 0xF62DF701, 0xFF0201FF, 0x04FAF901);
	r3 = D(r3, s0_2_1, 0xFAF9F404, 0xFFFA0D05, 0xFAFF0504, 0xFD050C02);
	r4 = D(r4, s0_2_1, 0x04FDF008, 0x05FDFDFB, 0xFE04FE00, 0xF608EAF6);
	r5 = D(r5, s0_2_1, 0xE2FB1313, 0x0BF4F2FF, 0x0103E5FC, 0xFF010008);
	r6 = D(r6, s0_2_1, 0xC3E2F907, 0xFB040003, 0xF9FE0D1B, 0xFDFCF101);
	r7 = D(r7, s0_2_1, 0x090819E8, 0x040007FD, 0xFAFBF006, 0xFFFA0503);
	r0 = D(r0, s0_2_2, 0x05FF07FF, 0x0EF30BEF, 0x0117FAF8, 0x0DEC08F2);
	r1 = D(r1, s0_2_2, 0x0AFC09FF, 0xCF08F41B, 0x00FD0407, 0xEC08F213);
	r2 = D(r2, s0_2_2, 0x070306FE, 0x0238E507, 0x01FF00FE, 0x07FCFAFA);
	r3 = D(r3, s0_2_2, 0x0604F9FA, 0x09F70002, 0x01FE06FD, 0xFCFE0008);
	r4 = D(r4, s0_2_2, 0xF40300FB, 0xFE01FF01, 0xFF04FE00, 0x1101F2F9);
	r5 = D(r5, s0_2_2, 0xF3F6E912, 0xFF0003FE, 0xFE01F302, 0x0AF80100);
	r6 = D(r6, s0_2_2, 0xA4F9F314, 0xFB040000, 0x0BFDCC12, 0x02F30BFE);
	r7 = D(r7, s0_2_2, 0x1D05FA06, 0x0700F700, 0xF701F8F7, 0xF3F21005);
	r0 = D(r0, s1_0_0, 0x11F7F8FB, 0x09EA2914, 0xFDFEFBFF, 0x02FC03FD);
	r1 = D(r1, s1_0_0, 0x18F20401, 0xEFFCEEFE, 0x0003090D, 0x08010622);
	r2 = D(r2, s1_0_0, 0xFA020411, 0xFC0D0CFB, 0xFB0CDCF3, 0xFEFF030E);
	r3 = D(r3, s1_0_0, 0x0BFDFCF5, 0x03FE01F9, 0x000007E9, 0x040003F9);
	r4 = D(r4, s1_0_0, 0x02F5F8F4, 0xFC0BFACF, 0x02FF0102, 0x10F0FCFD);
	r5 = D(r5, s1_0_0, 0x13050A00, 0x0CF80115, 0x0000FE05, 0x0008F507);
	r6 = D(r6, s1_0_0, 0x08EBD0FE, 0x01FEFA05, 0x09010A23, 0x0AEDF519);
	r7 = D(r7, s1_0_0, 0x01FEE013, 0xFCFBF407, 0x04F7FC0A, 0x10FEE4F3);
	r0 = D(r0, s1_0_1, 0xF0010EFA, 0xFDFBFAEB, 0xFCFD090A, 0x04020C1A);
	r1 = D(r1, s1_0_1, 0x02F5070A, 0x17F3120A, 0x01001414, 0x070F14FD);
	r2 = D(r2, s1_0_1, 0x0700FCE6, 0xF8FF1008, 0xFFFB27BC, 0xFBFDFC03);
	r3 = D(r3, s1_0_1, 0x09F9F916, 0xF603F90B, 0x02030605, 0x04040910);
	r4 = D(r4, s1_0_1, 0x09000E11, 0x0706FF1B, 0xFBFF0519, 0xF8F0050F);
	r5 = D(r5, s1_0_1, 0x0C16DF06, 0xFBF8E3FE, 0x0C110E03, 0xFD09F4DF);
	r6 = D(r6, s1_0_1, 0x06E310F4, 0xFB0000FA, 0x0404FCF9, 0xFEF9030C);
	r7 = D(r7, s1_0_1, 0xEAF230DE, 0x0301F0E2, 0xFCF8FCDE, 0xF912F9FD);
	r0 = D(r0, s1_0_2, 0x0902F7E5, 0x0200FAF1, 0x0D10FFFD, 0xFFF701F7);
	r1 = D(r1, s1_0_2, 0xFDF80A0C, 0xDC0C21F1, 0xFE06FFFC, 0x0E02F5FF);
	r2 = D(r2, s1_0_2, 0x0402FC02, 0x071B10F1, 0x020200FB, 0xFE0608F4);
	r3 = D(r3, s1_0_2, 0x04F9EE09, 0x04FFF4FD, 0xFDFF02FF, 0x05FEFF03);
	r4 = D(r4, s1_0_2, 0xFE0206F9, 0xF40C08FA, 0xFF02FF02, 0xF8051CF7);
	r5 = D(r5, s1_0_2, 0xFF121604, 0x11FF031B, 0x000AFCEC, 0x07FFFC08);
	r6 = D(r6, s1_0_2, 0xFCFFF216, 0x0403F8FB, 0xEF0E050B, 0xF7F60900);
	r7 = D(r7, s1_0_2, 0x01130618, 0x050401F1, 0xF70A01F7, 0xFE02F7F1);
	r0 = D(r0, s1_1_0, 0xF7F7220C, 0x0CF10EE0, 0xE5F70705, 0x01F80217);
	r1 = D(r1, s1_1_0, 0xFDF1FCFA, 0xF9F30502, 0x020AE7F0, 0xF2FE10F3);
	r2 = D(r2, s1_1_0, 0x0C08F014, 0xEDD9EFED, 0xF802F408, 0xFA05FBE6);
	r3 = D(r3, s1_1_0, 0x170BFFF2, 0xECFA1600, 0xFDFD09E0, 0x0E031FEA);
	r4 = D(r4, s1_1_0, 0x080C0603, 0x02F4F5FE, 0x09FBFA12, 0x0D070F10);
	r5 = D(r5, s1_1_0, 0xF211FB0F, 0x13000A04, 0xF1042407, 0x07FC0D10);
	r6 = D(r6, s1_1_0, 0x2902FE0D, 0xF9FB0008, 0x0F0DF301, 0xFDECED1B);
	r7 = D(r7, s1_1_0, 0x10020011, 0xFD01FF08, 0x03F5030B, 0x11060826);
	r0 = D(r0, s1_1_1, 0xEE0502F8, 0xF400171D, 0xECFE19F5, 0xF702FFF8);
	r1 = D(r1, s1_1_1, 0xE801F639, 0xECFBBCEB, 0x25071DE7, 0x1FF901D5);
	r2 = D(r2, s1_1_1, 0xEDFD04EB, 0x06F6E60A, 0x17FC1523, 0xE8FF1E42);
	r3 = D(r3, s1_1_1, 0xD20204F7, 0xF604E248, 0x0BFC2E06, 0xEFFC0725);
	r4 = D(r4, s1_1_1, 0x3109F4D1, 0x380EFE1E, 0x24FF0BCC, 0xF1F400CD);
	r5 = D(r5, s1_1_1, 0xDFE4B506, 0xBBE2F9F2, 0xDB0E0037, 0xED00F627);
	r6 = D(r6, s1_1_1, 0xE0010E0E, 0xFC020042, 0xDB04CB23, 0xF720FCE4);
	r7 = D(r7, s1_1_1, 0xC0FB2007, 0xF1011A35, 0x090B03F9, 0xED111BEE);
	r0 = D(r0, s1_1_2, 0xF1EE0FF9, 0xFF040808, 0x04090104, 0x0CE50EE4);
	r1 = D(r1, s1_1_2, 0xF404FDEF, 0x2E1D0789, 0x04060607, 0xDC1327FF);
	r2 = D(r2, s1_1_2, 0xF00401FE, 0xF108FD0C, 0xFB0601FA, 0xFCFE000A);
	r3 = D(r3, s1_1_2, 0x04FDF3FA, 0x03F6F804, 0x0304F610, 0xFF010507);
	r4 = D(r4, s1_1_2, 0x1409F0FF, 0x1609F5FA, 0x0B01FA01, 0xF2F816F4);
	r5 = D(r5, s1_1_2, 0x03FEFAF8, 0xF9F811ED, 0x020BFC08, 0xFAFCF80B);
	r6 = D(r6, s1_1_2, 0xFE0C1301, 0x0303FFFC, 0xFAE6EC0B, 0x1111ED09);
	r7 = D(r7, s1_1_2, 0x05F50503, 0xFCFCFE19, 0xFE00000D, 0x08FA0207);
	r0 = D(r0, s1_2_0, 0x04FD0F14, 0xD50F06E8, 0xFAFFF3EA, 0xFAFEFE0A);
	r1 = D(r1, s1_2_0, 0xDCB58181, 0x1A08DAF9, 0xE3F306F5, 0x02FCFB06);
	r2 = D(r2, s1_2_0, 0x0C060E02, 0xE80D07FA, 0xFF03FF00, 0xEFFD0604);
	r3 = D(r3, s1_2_0, 0x06F7FC0D, 0x0704FDFB, 0x04FEFEF8, 0x0301FD08);
	r4 = D(r4, s1_2_0, 0xFC03FF03, 0x0EFE0001, 0x07FF0104, 0xFFF9FEF9);
	r5 = D(r5, s1_2_0, 0x020E08FF, 0x01F50E03, 0xF10203F4, 0x0B00F5FA);
	r6 = D(r6, s1_2_0, 0xF3030CE9, 0xFD0202F6, 0x19F00205, 0x060D0A02);
	r7 = D(r7, s1_2_0, 0x0303FF0B, 0xF1FBFCF8, 0x0607FFFD, 0xFC0D0607);
	r0 = D(r0, s1_2_1, 0xEEFAEEF0, 0x06F92512, 0x0AF90013, 0x0AF8F204);
	r1 = D(r1, s1_2_1, 0x090C28CD, 0xFF1104FE, 0xE60E04E5, 0xEFFD0AF6);
	r2 = D(r2, s1_2_1, 0x00FCFD09, 0xF4F9F70D, 0xFC0409FB, 0x12FB0010);
	r3 = D(r3, s1_2_1, 0x06F10A00, 0x17010303, 0xF9FF0311, 0x0301FA02);
	r4 = D(r4, s1_2_1, 0xFE040C04, 0x10F80502, 0x0C00030C, 0xDFFE17F8);
	r5 = D(r5, s1_2_1, 0x03F61C01, 0xFD050EF0, 0x0D061AE7, 0xF504FCFF);
	r6 = D(r6, s1_2_1, 0xDD081603, 0xFE02F9FF, 0x0F07FFFF, 0xEC0A0FF6);
	r7 = D(r7, s1_2_1, 0xE80001E8, 0xEE02F7FE, 0xFCFCF600, 0xF4FFFA12);
	r0 = D(r0, s1_2_2, 0xF6F9F502, 0xFC05FCF2, 0x0313F7EC, 0xF6FC03F8);
	r1 = D(r1, s1_2_2, 0x14FCF9FB, 0x1DFD070F, 0xF709F408, 0xF2FF0805);
	r2 = D(r2, s1_2_2, 0x010502FB, 0x0919FAF6, 0xF60305FC, 0x0B0408F9);
	r3 = D(r3, s1_2_2, 0xFE04090D, 0x0BFF02F8, 0xF0FE02FD, 0xF50101FD);
	r4 = D(r4, s1_2_2, 0x03FAFFFC, 0xFEFF02FA, 0x020200FE, 0x120103FB);
	r5 = D(r5, s1_2_2, 0xFBF90AFF, 0xF703F9F4, 0xFE0C04F6, 0xF6FC02F8);
	r6 = D(r6, s1_2_2, 0x14E611FC, 0x010200FD, 0xFCFC04DB, 0x06F30302);
	r7 = D(r7, s1_2_2, 0xF8F40401, 0xFE0203FF, 0xF8FDF606, 0xFEF8FAFD);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.575e-02, -1.074e-02, -2.525e-02, -1.571e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(6.879e-03, -3.004e-02, -8.105e-03, -2.345e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.865e-02, -4.088e-02, -2.517e-02, -1.533e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-6.516e-03, -2.529e-02, -2.385e-03, 6.748e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.733e-02, -1.856e-02, 3.760e-03, -1.229e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.893e-03, 2.086e-02, -1.783e-02, -1.273e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.594e-04, 3.213e-03, -2.007e-02, -8.505e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-3.070e-03, -5.479e-03, -2.321e-04, 7.198e-05);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv7
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFF3070D, 0x080D0E0F, 0x01020504, 0x02FD01FE);
	r1 = D(r1, s0_0_0, 0x05F6FE02, 0x04060502, 0xF7F60908, 0xFD010402);
	r2 = D(r2, s0_0_0, 0xFAFC0AF7, 0x03F9F800, 0x02FB04FE, 0x1002FF09);
	r3 = D(r3, s0_0_0, 0x0800FBF8, 0xEC020C06, 0x03FF0A09, 0x02F50407);
	r4 = D(r4, s0_0_0, 0x17C8EDFB, 0xFC0505F4, 0x0904FC03, 0x080AFAFB);
	r5 = D(r5, s0_0_0, 0x08E10C06, 0x01FC1102, 0x01FDFEFE, 0x01020007);
	r6 = D(r6, s0_0_0, 0x020AFDFE, 0x10EF0EF7, 0xFE010108, 0x04F70105);
	r7 = D(r7, s0_0_0, 0x00010303, 0x040102F9, 0xEE09FEFC, 0x0ADB0FFE);
	r0 = D(r0, s0_0_1, 0x1328F9CF, 0xFFFEE7E7, 0x08FDFEFE, 0x00FEFDFF);
	r1 = D(r1, s0_0_1, 0xFD0AFCE8, 0xFBFADFFE, 0xC40312E6, 0xFBF60306);
	r2 = D(r2, s0_0_1, 0x1513D9EB, 0xFF06FAF1, 0x01F9FEFA, 0x05FFF2FC);
	r3 = D(r3, s0_0_1, 0x080216FC, 0x0105FCF5, 0x0C01F6EF, 0x01091401);
	r4 = D(r4, s0_0_1, 0x10FB120E, 0x05FB05EB, 0x0A0019F9, 0xFDFA04FE);
	r5 = D(r5, s0_0_1, 0x09DDFE0A, 0xF914F5F7, 0xFD02FA00, 0xFE060C11);
	r6 = D(r6, s0_0_1, 0xFAF90B09, 0x1DE11917, 0xFE01EFFB, 0x271C1201);
	r7 = D(r7, s0_0_1, 0x15091D17, 0xF8FCF7F6, 0xF30107F7, 0xF8E803EE);
	r0 = D(r0, s0_0_2, 0x01F6F9F2, 0x080A02FF, 0x020D03FD, 0x01FE0AFF);
	r1 = D(r1, s0_0_2, 0x0200FFFC, 0x030712DC, 0xFC0324E1, 0xFCF7F405);
	r2 = D(r2, s0_0_2, 0x09F60B00, 0x00FC0202, 0x00FD0207, 0x02030EFC);
	r3 = D(r3, s0_0_2, 0x0101E604, 0xFEF911FF, 0xFA040502, 0xFFF50207);
	r4 = D(r4, s0_0_2, 0x16BF1700, 0x05111102, 0x0509E4FD, 0x04070901);
	r5 = D(r5, s0_0_2, 0x0CCE04FE, 0x030400F9, 0x01040600, 0x00FEF6F1);
	r6 = D(r6, s0_0_2, 0xF507EDFC, 0x0FE8E0FF, 0x0303130B, 0x070E0B03);
	r7 = D(r7, s0_0_2, 0x0413B9F8, 0x0103F4FF, 0xF3E201F9, 0x0CE50DF1);
	r0 = D(r0, s0_1_0, 0xF0F8FDFA, 0xECFA0DFA, 0x02FC0802, 0xFFFE01FD);
	r1 = D(r1, s0_1_0, 0x0C09FA02, 0xEB020A07, 0x001303EF, 0x04FF04FF);
	r2 = D(r2, s0_1_0, 0x0C0CF4F7, 0x0B0200FF, 0xF10606FF, 0x01F9090F);
	r3 = D(r3, s0_1_0, 0xF4FB0800, 0xF50C09FB, 0x000DFDFB, 0x04FFFCF9);
	r4 = D(r4, s0_1_0, 0xD7FEE7F8, 0xE5E11310, 0xFAFD07FA, 0xF9FFFAF8);
	r5 = D(r5, s0_1_0, 0xFDF8EFFE, 0xFBFE16E3, 0xFFFFFF01, 0x0701FD00);
	r6 = D(r6, s0_1_0, 0xF9FC0303, 0x13EAF30E, 0x0608FB05, 0x0505FC00);
	r7 = D(r7, s0_1_0, 0x0901FD08, 0xFC03FF01, 0xEEF0F9FB, 0x12F00803);
	r0 = D(r0, s0_1_1, 0x1C0E12FD, 0x0714ED02, 0x131709F9, 0x110107FC);
	r1 = D(r1, s0_1_1, 0xFCFA11FF, 0xF60C04FC, 0x040DFBE1, 0xFE01F111);
	r2 = D(r2, s0_1_1, 0xF3EB16E2, 0xEBF60AED, 0xF1FEEBFD, 0x0019FD05);
	r3 = D(r3, s0_1_1, 0xF507DAE4, 0xF60E05F7, 0xF404F1F1, 0x02001614);
	r4 = D(r4, s0_1_1, 0x113427EB, 0x091BFF0B, 0x0F1C04E9, 0x000B03F8);
	r5 = D(r5, s0_1_1, 0x342011F0, 0xEF09DDBD, 0x0CFE04FB, 0x0D050713);
	r6 = D(r6, s0_1_1, 0x0D0911FC, 0x1A151B14, 0x010316FF, 0x19FC16F4);
	r7 = D(r7, s0_1_1, 0x0E05FEFB, 0x02FBFDF9, 0x050308CE, 0x0116F4F5);
	r0 = D(r0, s0_1_2, 0xE9FFF605, 0x04F5F7FE, 0xFBFFE8FB, 0xFA01FD04);
	r1 = D(r1, s0_1_2, 0x0105FCFF, 0x01F90EFF, 0xED09D502, 0x07FCF0FC);
	r2 = D(r2, s0_1_2, 0xF01AD2EE, 0x02020BFE, 0x01F70403, 0xF6F80104);
	r3 = D(r3, s0_1_2, 0x0703FE02, 0x0510FE00, 0x04FA0502, 0xF700E202);
	r4 = D(r4, s0_1_2, 0x0FE921F8, 0xF40AFC07, 0x07F5F8F6, 0x0003EE02);
	r5 = D(r5, s0_1_2, 0x13E820FA, 0x0D091602, 0xFD01FD04, 0x0912EBF4);
	r6 = D(r6, s0_1_2, 0xFEFEDF08, 0x0BE10200, 0xFAFDF1FB, 0xF209EDFE);
	r7 = D(r7, s0_1_2, 0x0B0AE1ED, 0x0301F9FD, 0x0C1CE7E6, 0x0F020AED);
	r0 = D(r0, s0_2_0, 0x0202FE05, 0x0300FE09, 0x0401FF00, 0x00FDFFFE);
	r1 = D(r1, s0_2_0, 0x02FDFE04, 0xFA04FFFA, 0x04FC0206, 0x00060201);
	r2 = D(r2, s0_2_0, 0x01F4FF02, 0x05FAFB02, 0xFC01FDFF, 0x000604FE);
	r3 = D(r3, s0_2_0, 0x0606FBF5, 0xFCFF00FD, 0x050405F4, 0xFEFF05FC);
	r4 = D(r4, s0_2_0, 0xFCFF070E, 0xEE060904, 0xFE000300, 0xFFF80504);
	r5 = D(r5, s0_2_0, 0x09E90101, 0x060301FC, 0xFFFEFEFF, 0x02FB00FE);
	r6 = D(r6, s0_2_0, 0x0706FCFC, 0x0CEA0008, 0xF8FF00FB, 0x07FB0702);
	r7 = D(r7, s0_2_0, 0x01FF00FC, 0x01FE0500, 0xFAE40EFD, 0x10DF0303);
	r0 = D(r0, s0_2_1, 0x02F80508, 0x04FB0901, 0x03F80304, 0xFFFDFDFF);
	r1 = D(r1, s0_2_1, 0x030106FF, 0xFA08FB03, 0x08FA0906, 0xFCFDFA04);
	r2 = D(r2, s0_2_1, 0x0608F7F7, 0xFD0208FB, 0xFD02EF0A, 0xFE06FFF9);
	r3 = D(r3, s0_2_1, 0xF9FDFAF7, 0x0007000C, 0xF801F2FF, 0xFD0C0803);
	r4 = D(r4, s0_2_1, 0x0C180301, 0x0B1E05E2, 0x0FFEF9FC, 0x02FBFAFC);
	r5 = D(r5, s0_2_1, 0x0FF20C03, 0x12EA1002, 0xFFFD03FE, 0x05FFFF01);
	r6 = D(r6, s0_2_1, 0xFCFCF602, 0x0E041AEF, 0x00FB00FE, 0x001303F6);
	r7 = D(r7, s0_2_1, 0x0D0405FC, 0x0207F8FE, 0x042900EF, 0x05EDFAFD);
	r0 = D(r0, s0_2_2, 0x0303FB05, 0x010903FA, 0x0609ED04, 0x02FCFF00);
	r1 = D(r1, s0_2_2, 0x03FA01FD, 0x03FC0D0E, 0x0402FE05, 0xFE0701FF);
	r2 = D(r2, s0_2_2, 0x0103F2FA, 0x0200F8FD, 0x02FE04FC, 0xFF06FD03);
	r3 = D(r3, s0_2_2, 0x020E0604, 0x04F80004, 0x03031BF6, 0x03030100);
	r4 = D(r4, s0_2_2, 0x02D30A0E, 0x03020205, 0x05FF0011, 0x02030300);
	r5 = D(r5, s0_2_2, 0x0CE40FF8, 0x0AFE120E, 0x02FCFFFE, 0x08F80107);
	r6 = D(r6, s0_2_2, 0x080AF407, 0x10F3F0FB, 0x02FFF2F7, 0xFEF8FAFE);
	r7 = D(r7, s0_2_2, 0x0304FBF8, 0x0003FDFE, 0xF5DBFDD3, 0x06F70C00);
	r0 = D(r0, s1_0_0, 0xD7FC120B, 0x0807F0FE, 0x0400F5FA, 0x010503FE);
	r1 = D(r1, s1_0_0, 0xFE050802, 0xF3080904, 0xE5F9070F, 0xFFFE0202);
	r2 = D(r2, s1_0_0, 0x0C010C08, 0xFFFF0E02, 0x0106FD08, 0x1005FDF9);
	r3 = D(r3, s1_0_0, 0x01030A01, 0xF704F0FF, 0xFB0A03F5, 0xF2FE0900);
	r4 = D(r4, s1_0_0, 0xF8F8DF0F, 0x0DFDDB01, 0xF50AF702, 0x0203FF03);
	r5 = D(r5, s1_0_0, 0x00FB0707, 0x0B13CAFD, 0x040200FD, 0x05FCF7FD);
	r6 = D(r6, s1_0_0, 0x14F2EB03, 0x0C0A0013, 0x0D060702, 0xFA01F20E);
	r7 = D(r7, s1_0_0, 0xFE04EFF9, 0x0406FC03, 0xF9FEF609, 0x031101F2);
	r0 = D(r0, s1_0_1, 0xEFD4F8FD, 0xECF0F110, 0xFC080BE1, 0xFBFF040B);
	r1 = D(r1, s1_0_1, 0x05EEFF03, 0xF3E60908, 0xD1F8F4F4, 0x14FB0B33);
	r2 = D(r2, s1_0_1, 0xFB06110D, 0xFCFB02F2, 0xF601FB09, 0xFCF4F7F0);
	r3 = D(r3, s1_0_1, 0x13050827, 0xE9FAFD4E, 0xEBEF0011, 0x090303F3);
	r4 = D(r4, s1_0_1, 0xE4EEE98B, 0xFBC4F014, 0x0223E208, 0xF5FCF607);
	r5 = D(r5, s1_0_1, 0xFDFB0B04, 0xEB0BE013, 0xFAFEFDFA, 0x0AFC03F6);
	r6 = D(r6, s1_0_1, 0x111FEF0E, 0xE5E80D7F, 0xEBF503EA, 0xF712F325);
	r7 = D(r7, s1_0_1, 0x0F14E209, 0x1008012F, 0x1C0A8905, 0xF8F70107);
	r0 = D(r0, s1_0_2, 0xEDF2FD6C, 0xF501F4D8, 0xF7FC07A5, 0x040502DD);
	r1 = D(r1, s1_0_2, 0x080507EA, 0xFEFB0E81, 0xD6CD01FD, 0x050704C5);
	r2 = D(r2, s1_0_2, 0x0CF9020F, 0x0001FF4E, 0xFE0100CF, 0x0704FE16);
	r3 = D(r3, s1_0_2, 0x00FB0181, 0xFB05054E, 0x00FD009D, 0x03070335);
	r4 = D(r4, s1_0_2, 0x120517B9, 0xF109F07F, 0xF200FE52, 0x05FF04F7);
	r5 = D(r5, s1_0_2, 0x10FCFFFA, 0xFC0DED7F, 0x010001ED, 0x0103025D);
	r6 = D(r6, s1_0_2, 0x0EFEFB7F, 0x19E70271, 0x0A06FC81, 0x09FF0417);
	r7 = D(r7, s1_0_2, 0x0C04E87F, 0x0BFE07C7, 0x1EF9FD1A, 0x10F9EB25);
	r0 = D(r0, s1_1_0, 0xDFF18901, 0xF804FE05, 0xE6FA1408, 0xFE000001);
	r1 = D(r1, s1_1_0, 0xF8FDFBF9, 0xF6F5CB05, 0xF70D0400, 0xFC010302);
	r2 = D(r2, s1_1_0, 0xFF040E03, 0x0CF0FDF8, 0xF80100F9, 0x05F7F7F1);
	r3 = D(r3, s1_1_0, 0x070AEA0E, 0x03030002, 0xEAFEDF06, 0x02FC0C08);
	r4 = D(r4, s1_1_0, 0xFFE4FDF5, 0xF50DA40B, 0x09FC0604, 0x07F7EEFB);
	r5 = D(r5, s1_1_0, 0xF9FB06FC, 0xDC011704, 0x07FF0303, 0x13030200);
	r6 = D(r6, s1_1_0, 0x1DF4F60A, 0xF5EA0A0C, 0x01080208, 0x0603FEF4);
	r7 = D(r7, s1_1_0, 0x0B000A05, 0x10020302, 0x05041204, 0xF5FFF60B);
	r0 = D(r0, s1_1_1, 0xF3EDD316, 0xFAFBFC1D, 0xDE811330, 0xF4FBF71C);
	r1 = D(r1, s1_1_1, 0x0E1FF5D5, 0xEB01CE0E, 0x07120510, 0x05EB0926);
	r2 = D(r2, s1_1_1, 0xF60108EC, 0x141EFAD0, 0x08D0FB2F, 0x03F70BCD);
	r3 = D(r3, s1_1_1, 0xFFE5E60C, 0x03EA0370, 0xE318E105, 0xF800F411);
	r4 = D(r4, s1_1_1, 0x1F070135, 0xD4DEFB0D, 0xE507121B, 0x0BE40403);
	r5 = D(r5, s1_1_1, 0x0BFF03F7, 0x0C110228, 0xF301050F, 0xFF0404E7);
	r6 = D(r6, s1_1_1, 0x05DB0123, 0xFE0AECB3, 0x05090012, 0xF91D0EFE);
	r7 = D(r7, s1_1_1, 0x0FFE0305, 0x062507ED, 0x09EE0E01, 0x0BE407FD);
	r0 = D(r0, s1_1_2, 0x061AF5F1, 0xEC05F5DD, 0xEEFDF820, 0xF6FCFD0F);
	r1 = D(r1, s1_1_2, 0x0208FECD, 0xE5F6B31E, 0xE10E20D7, 0x00F006D2);
	r2 = D(r2, s1_1_2, 0xFEFCF403, 0xFE0D1722, 0x03070104, 0x01FC0A15);
	r3 = D(r3, s1_1_2, 0xFBFA0A2D, 0x0803F8F3, 0x0107D320, 0xF008FC2B);
	r4 = D(r4, s1_1_2, 0xFFEE030A, 0x010CFEEF, 0xFF2B2130, 0xF9FFFE1A);
	r5 = D(r5, s1_1_2, 0xEFF8FC05, 0xF9FE1F14, 0xFBFF0220, 0xDD09F720);
	r6 = D(r6, s1_1_2, 0x0A0AF111, 0x03FFF8F6, 0x12F0FE38, 0x010A10F2);
	r7 = D(r7, s1_1_2, 0x04190D07, 0xF1F9FCF7, 0xF2E5B52D, 0xF0FBFF0A);
	r0 = D(r0, s1_2_0, 0xEB000B00, 0xF60AFEFF, 0xFB0AFCFC, 0xFE010002);
	r1 = D(r1, s1_2_0, 0xFEFE00FF, 0x05FC07FF, 0xF9FFF601, 0xFF010700);
	r2 = D(r2, s1_2_0, 0xEDFF04FF, 0xFEFD0C01, 0x02010600, 0x0DF7FB02);
	r3 = D(r3, s1_2_0, 0x120003FA, 0x060AF9FC, 0x0506FDFF, 0xF905F801);
	r4 = D(r4, s1_2_0, 0xFB060912, 0xECFBD101, 0xF6FEFD00, 0xFB00FEFF);
	r5 = D(r5, s1_2_0, 0x0A02F407, 0xD614C000, 0xF2070203, 0x03FDF6FD);
	r6 = D(r6, s1_2_0, 0x0901FE00, 0x06E9F000, 0x0301FA04, 0xF309FD05);
	r7 = D(r7, s1_2_0, 0x0F00FFFF, 0xFBFF02FF, 0xEE0210E7, 0xF105FA03);
	r0 = D(r0, s1_2_1, 0xDB0903FF, 0xF4FFFF01, 0xE611FFFD, 0x000202FE);
	r1 = D(r1, s1_2_1, 0x11FB08FB, 0xF10205FB, 0x0FF5F6FD, 0xFFFB03FF);
	r2 = D(r2, s1_2_1, 0x1A10F80E, 0xFD0508FC, 0xFE0004FF, 0x05F700F3);
	r3 = D(r3, s1_2_1, 0x00120AFF, 0x0709F302, 0x090F0F06, 0xE9FAFF08);
	r4 = D(r4, s1_2_1, 0xF30103EF, 0x0B1AFAFA, 0x0208F0FF, 0x0C03FAFE);
	r5 = D(r5, s1_2_1, 0xEAFEF205, 0xE712D715, 0x0F020002, 0x13F2FBFD);
	r6 = D(r6, s1_2_1, 0x15090D08, 0x00EDE903, 0x1A05F212, 0x110D0301);
	r7 = D(r7, s1_2_1, 0x0F02F802, 0x04FB0306, 0x1A11B910, 0x00FDFFFA);
	r0 = D(r0, s1_2_2, 0x19FDEE05, 0x0203FDFD, 0x0501EA00, 0x0504FF00);
	r1 = D(r1, s1_2_2, 0x02FBFEFF, 0xEB050C09, 0xFD03EEF3, 0x08FD09FF);
	r2 = D(r2, s1_2_2, 0xEDEA01F2, 0xFDFFFD0E, 0xF603FF02, 0x0C0505FD);
	r3 = D(r3, s1_2_2, 0x060D1303, 0xF90201FF, 0xF2010F00, 0xFCF30807);
	r4 = D(r4, s1_2_2, 0xE9F9F415, 0x09F6C805, 0xF317EB05, 0xFB00EE03);
	r5 = D(r5, s1_2_2, 0xF6FF0204, 0xE80CCEEF, 0x0305FCFF, 0x120AF502);
	r6 = D(r6, s1_2_2, 0x0E080403, 0x07F9F3FB, 0xED100300, 0x0D01F3EE);
	r7 = D(r7, s1_2_2, 0x0608FC00, 0x100200FD, 0x13FDFC17, 0xF0090E05);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF904F8FF, 0xFD01FA01, 0xFCFCFD01, 0x04FF01FD);
	r1 = D(r1, s0_0_0, 0xFE03FFFC, 0x01FFFDFF, 0x01FCFAF6, 0x050001FD);
	r2 = D(r2, s0_0_0, 0x00040101, 0xED00FEFE, 0x04FD03FF, 0xF504FF05);
	r3 = D(r3, s0_0_0, 0x04FC00FE, 0x0E08FCFE, 0xFB02FAF4, 0xF2FCFE01);
	r4 = D(r4, s0_0_0, 0xFDF3AB0A, 0x07F809FC, 0x0EFEFF0A, 0x0E02FE03);
	r5 = D(r5, s0_0_0, 0xFFFEB6FE, 0x0DFA0405, 0x020001FE, 0x01FD0007);
	r6 = D(r6, s0_0_0, 0x08F8FF06, 0x01FAC004, 0x0706FBFE, 0xFAFD0403);
	r7 = D(r7, s0_0_0, 0x0AFDFD0A, 0x06050201, 0x110808F5, 0x02FCB9FA);
	r0 = D(r0, s0_0_1, 0x2803FDF7, 0x17FCFA12, 0x11FDFE02, 0x02FE0101);
	r1 = D(r1, s0_0_1, 0x07FD00FA, 0xFEF901F7, 0x01F0FA02, 0x17FC07F4);
	r2 = D(r2, s0_0_1, 0x160BFFFC, 0x00070202, 0xFDFD0604, 0xF906FBFF);
	r3 = D(r3, s0_0_1, 0x05040607, 0x09090303, 0xFC0203F8, 0x0B0206FB);
	r4 = D(r4, s0_0_1, 0xFF11DB11, 0xEB0BF82B, 0xF4FAFB10, 0x0101F905);
	r5 = D(r5, s0_0_1, 0x020AC0FA, 0xFDFBF6FA, 0xF602FF01, 0xFA04FE02);
	r6 = D(r6, s0_0_1, 0xEA02FB0E, 0x1309E0FE, 0x02FE01FD, 0xED07F805);
	r7 = D(r7, s0_0_1, 0xE5FCFA0B, 0x0CFD02FF, 0xF706F906, 0xFA09D8F9);
	r0 = D(r0, s0_0_2, 0x0EF8FD1B, 0x03FFFEFB, 0x03FEFD06, 0x02FF0100);
	r1 = D(r1, s0_0_2, 0xFD01FEFF, 0x14F90405, 0x03FFFFF9, 0xFEFC05F8);
	r2 = D(r2, s0_0_2, 0xEEF704F3, 0xF5FC04FA, 0xFF020102, 0xF5FEFFFD);
	r3 = D(r3, s0_0_2, 0x06FEFAFC, 0xFCFD0000, 0xFB040000, 0xFF0002FE);
	r4 = D(r4, s0_0_2, 0x0B03B7EC, 0xFA0FFAFC, 0xF7FD0103, 0x0003FEF8);
	r5 = D(r5, s0_0_2, 0x0800C3FF, 0xF806F70A, 0x0001FE04, 0xFEFDFE08);
	r6 = D(r6, s0_0_2, 0xFD04FEFA, 0xFB02E205, 0x0205FE03, 0x0100F20F);
	r7 = D(r7, s0_0_2, 0xF700F018, 0xFEFFFFF7, 0x07F1F827, 0xFDFBC3F9);
	r0 = D(r0, s0_1_0, 0x08060803, 0x0DF60308, 0xF6FF06FE, 0x07FD00FE);
	r1 = D(r1, s0_1_0, 0xF90001FF, 0x0D01F9FB, 0xF70501FF, 0xFC06FDFB);
	r2 = D(r2, s0_1_0, 0x11090203, 0xF70007FE, 0xFCFFFD01, 0x05FBFFF6);
	r3 = D(r3, s0_1_0, 0xF00EFBFF, 0xFD09FDF6, 0xEC01FAF9, 0xFEFB06FA);
	r4 = D(r4, s0_1_0, 0x17F6D01C, 0x0BFF0306, 0xFAF8FE0B, 0x0C020310);
	r5 = D(r5, s0_1_0, 0x1700CFFB, 0xDE070806, 0x06FB0100, 0x02F90107);
	r6 = D(r6, s0_1_0, 0xFE0DFD0D, 0x0DEEC7F9, 0x0CF8FCFF, 0x140500FF);
	r7 = D(r7, s0_1_0, 0x0300FF07, 0x0905FDFF, 0x25070819, 0x00FAD7FF);
	r0 = D(r0, s0_1_1, 0x111700F2, 0x0A15FDEC, 0x1C08F9F3, 0xFE070103);
	r1 = D(r1, s0_1_1, 0xFBF6FDFD, 0xF4150303, 0x0AFBFBEF, 0xFFF700F0);
	r2 = D(r2, s0_1_1, 0x1F0200F4, 0xE0060001, 0x1003FAF8, 0x1417FDE1);
	r3 = D(r3, s0_1_1, 0x00F8FB19, 0xF4EBF5FA, 0xDF00F810, 0xDEFDFBFF);
	r4 = D(r4, s0_1_1, 0xFD1FDE05, 0xF9270018, 0xE9F7FDF7, 0x0611FFFE);
	r5 = D(r5, s0_1_1, 0x0B01D305, 0x02EBFBF6, 0x05080204, 0x03F4FAFB);
	r6 = D(r6, s0_1_1, 0xFCF30218, 0xECF3FCFB, 0xEFF90411, 0x040CF70B);
	r7 = D(r7, s0_1_1, 0x0CF4FD12, 0xFF06FEF5, 0xEC0BF6FA, 0x192EE701);
	r0 = D(r0, s0_1_2, 0x03F1FA21, 0x02FD0003, 0x09F9F903, 0x04FF0012);
	r1 = D(r1, s0_1_2, 0x04FAFF05, 0x05EDFA0C, 0x0DCCF706, 0xFD0302E3);
	r2 = D(r2, s0_1_2, 0x0F01FB29, 0xFC0602FD, 0xF20206F9, 0x01F9FF0C);
	r3 = D(r3, s0_1_2, 0xFE030007, 0x0205FD07, 0x000C08FF, 0xFC0000F6);
	r4 = D(r4, s0_1_2, 0x0712BBD9, 0x04F5EFFA, 0x01FAFF21, 0x0FF70009);
	r5 = D(r5, s0_1_2, 0x0001CEF1, 0xF7FCFE14, 0x03FFFD05, 0x0A08F7E2);
	r6 = D(r6, s0_1_2, 0xFA0EFDE4, 0x091DCED2, 0xFEFF0606, 0xFC08FF07);
	r7 = D(r7, s0_1_2, 0x0312FD13, 0x09FF0008, 0xDF1211CA, 0xF7F7DEFC);
	r0 = D(r0, s0_2_0, 0x090B0107, 0x0002FFFD, 0x0A0BFD0B, 0x01050003);
	r1 = D(r1, s0_2_0, 0x05F50004, 0x090AFD0A, 0xFFF9FB02, 0xFB0CFFFF);
	r2 = D(r2, s0_2_0, 0x0E0EFFFD, 0xFD010104, 0xFE0200FF, 0xF9FCFFF6);
	r3 = D(r3, s0_2_0, 0xDE200306, 0x01090002, 0xFA1300FD, 0x04FC0008);
	r4 = D(r4, s0_2_0, 0xFA05AFFD, 0x03FAFBF7, 0xFC08FE01, 0x0204FDFE);
	r5 = D(r5, s0_2_0, 0x06F8B70B, 0xE11AFAF9, 0x02FD0002, 0x09020301);
	r6 = D(r6, s0_2_0, 0x0705FEFE, 0x00EFB108, 0xF7060000, 0x0406FF03);
	r7 = D(r7, s0_2_0, 0xFF010001, 0x030700FA, 0x13FEF501, 0xF0FEB103);
	r0 = D(r0, s0_2_1, 0xFED2FDFF, 0x03ECFEF5, 0x21F802EC, 0x000202FF);
	r1 = D(r1, s0_2_1, 0xEF020509, 0x00E0FB03, 0xF1040314, 0x0DEBFCF0);
	r2 = D(r2, s0_2_1, 0xEBF20500, 0xF4FDFFFA, 0x05E7FEF9, 0x05F4FDE4);
	r3 = D(r3, s0_2_1, 0x0ABDFEFD, 0xF8F6FB03, 0xFAFF010D, 0x0801F301);
	r4 = D(r4, s0_2_1, 0x03DBB9F9, 0xEFD7FCFA, 0xF20CFC04, 0xFBDB02FB);
	r5 = D(r5, s0_2_1, 0xFA0EC20A, 0xE6E109FE, 0x020F01FF, 0x0013FC10);
	r6 = D(r6, s0_2_1, 0x05F60505, 0xF014DAFB, 0xFA15FEF7, 0xF21B01FD);
	r7 = D(r7, s0_2_1, 0x041AFEF4, 0x020C01FD, 0xE2E11200, 0x0EFBBDF2);
	r0 = D(r0, s0_2_2, 0xFC0503FE, 0xFF00FFFE, 0xF4F6FE05, 0xFFFE0108);
	r1 = D(r1, s0_2_2, 0x02FE00F6, 0xFAEBFE1A, 0xFBF90407, 0x020700FE);
	r2 = D(r2, s0_2_2, 0x0AEFFBFF, 0xFF00FCF8, 0xFC050100, 0x02F6FEFF);
	r3 = D(r3, s0_2_2, 0xFC04F60A, 0xFF0BFFFF, 0xFA050314, 0xF7080102);
	r4 = D(r4, s0_2_2, 0x06FFC80E, 0x14FCFCFA, 0x031104FB, 0x03020105);
	r5 = D(r5, s0_2_2, 0x0D10BAF0, 0x120101FE, 0xFCFE0409, 0x08EC0412);
	r6 = D(r6, s0_2_2, 0x0A14FA02, 0x0B03D3F5, 0xFFF8FE09, 0x040200F7);
	r7 = D(r7, s0_2_2, 0x07FEF9EE, 0x0003FEFD, 0x0EC5F0FF, 0x0E01C0F1);
	r0 = D(r0, s1_0_0, 0x0BF5F005, 0x0101FCF3, 0xFA010101, 0xFE020202);
	r1 = D(r1, s1_0_0, 0x02F6FD05, 0x05FBFE00, 0xF801FE0B, 0xFA05FE01);
	r2 = D(r2, s1_0_0, 0xFC05EE0C, 0x0802FC03, 0x03FF0302, 0x0001FCFF);
	r3 = D(r3, s1_0_0, 0x0AFBFF05, 0xF2080102, 0xFDF9EC00, 0xFA010301);
	r4 = D(r4, s1_0_0, 0x1BF20C0B, 0x061406FF, 0xFEFBF703, 0x000201FE);
	r5 = D(r5, s1_0_0, 0x07FB0008, 0xF410E3F1, 0xFF020402, 0xF501FF00);
	r6 = D(r6, s1_0_0, 0xFEFE02FE, 0x15F5FA10, 0xF800EF02, 0xF909FC08);
	r7 = D(r7, s1_0_0, 0xF50B06FC, 0xFA090001, 0x0313F606, 0x0302F001);
	r0 = D(r0, s1_0_1, 0x06FE0E0D, 0x01FFE7F8, 0x010EFBFF, 0x01FA09FD);
	r1 = D(r1, s1_0_1, 0x030F0403, 0x08FFFE07, 0xEC1B05F5, 0x01050D01);
	r2 = D(r2, s1_0_1, 0x05FEF60B, 0x01FC110C, 0x02030F06, 0x0CFD0600);
	r3 = D(r3, s1_0_1, 0xEDFC1105, 0xFE030F00, 0x1A0C1002, 0xFB0505F9);
	r4 = D(r4, s1_0_1, 0x1EE3FDFF, 0xEC2CF5EF, 0x06EFED00, 0x08F2F905);
	r5 = D(r5, s1_0_1, 0xFFF00807, 0x1CFAF302, 0xFF05FDFC, 0xECFAF7FE);
	r6 = D(r6, s1_0_1, 0xE616E3FA, 0x07F1FEF7, 0x120F0EFA, 0x0402DB07);
	r7 = D(r7, s1_0_1, 0xFDE7CCF7, 0x00F904FF, 0x1BED01F2, 0x0FFB07FE);
	r0 = D(r0, s1_0_2, 0x0FEAFCF8, 0xFA06F8F9, 0x08FE03FC, 0xFBF70903);
	r1 = D(r1, s1_0_2, 0xFFF7FD00, 0x06F4080B, 0xF807FFFA, 0x0608F9FD);
	r2 = D(r2, s1_0_2, 0xF2FFFC01, 0xFF02F900, 0xFD010300, 0x08FBFFFF);
	r3 = D(r3, s1_0_2, 0x09F9F8F7, 0xF400FE02, 0x0BF603F7, 0x01F4FE02);
	r4 = D(r4, s1_0_2, 0xF20EFA15, 0x02FFFDF1, 0xF500F4EE, 0xFA090601);
	r5 = D(r5, s1_0_2, 0x09050309, 0x0BFBF0F1, 0xFD05FE03, 0x0411F1FB);
	r6 = D(r6, s1_0_2, 0xFC05F9FD, 0x1814F1FB, 0xF5FF0AFF, 0xFAFC02FF);
	r7 = D(r7, s1_0_2, 0x1BFCC4F7, 0xF60804F9, 0xC72C0F05, 0x0203010F);
	r0 = D(r0, s1_1_0, 0xF2060408, 0xEC03FA07, 0x05FCF201, 0xFC060300);
	r1 = D(r1, s1_1_0, 0xFE0801FF, 0xFFF6F0F9, 0xF9FC0EFD, 0xF511FF01);
	r2 = D(r2, s1_1_0, 0x0DEF08F9, 0x030A03FF, 0xFF05F9FE, 0xF6FBF905);
	r3 = D(r3, s1_1_0, 0x030209FC, 0xF900FC07, 0xFD1100FA, 0xF70D0805);
	r4 = D(r4, s1_1_0, 0x0D0AFC07, 0x02E3F9FF, 0x02FAF70C, 0x06FCF6FE);
	r5 = D(r5, s1_1_0, 0x12F3FD03, 0xFCE9001E, 0xFCFE0103, 0xF4090501);
	r6 = D(r6, s1_1_0, 0x07010601, 0x16DD19FB, 0x0AE7F604, 0xF7080A01);
	r7 = D(r7, s1_1_0, 0xFDF70906, 0xFF05FDFA, 0x03E7E101, 0xFDF006FF);
	r0 = D(r0, s1_1_1, 0x0DF5EBDF, 0x030904F9, 0x0CE70503, 0xFDFD07FE);
	r1 = D(r1, s1_1_1, 0xF5F0F8F1, 0x0DF308ED, 0xE1F70BF0, 0x19E503FE);
	r2 = D(r2, s1_1_1, 0xEDF2F90B, 0xF90EFCFD, 0x1E280601, 0xFA0A0FFB);
	r3 = D(r3, s1_1_1, 0x1C0EE7F4, 0x11FAC1EA, 0x051403DF, 0xE2F4DFF3);
	r4 = D(r4, s1_1_1, 0xE7FC0609, 0xF21402F4, 0x14EFE70B, 0xF401F201);
	r5 = D(r5, s1_1_1, 0xFB15EB0C, 0xDD21B203, 0xF40A0406, 0x1ADEF4FA);
	r6 = D(r6, s1_1_1, 0x05E9E00D, 0xFFFCF80E, 0x20E2EA0A, 0x0CE8EA03);
	r7 = D(r7, s1_1_1, 0xFC04FC0E, 0xF70007F8, 0x1B050D24, 0x0F04F4F7);
	r0 = D(r0, s1_1_2, 0x18F001CB, 0xFDF50604, 0x1AEBF2F7, 0x09EF07FC);
	r1 = D(r1, s1_1_2, 0xFE0CFF00, 0x0BF4F2E6, 0xDEF0E6EC, 0xEAF90608);
	r2 = D(r2, s1_1_2, 0x1509E1ED, 0x1608FFFC, 0x0DFD0102, 0x24F2F9FD);
	r3 = D(r3, s1_1_2, 0xF00BFC05, 0x14F4F8F9, 0xFE1000FC, 0xE5FEF50A);
	r4 = D(r4, s1_1_2, 0x04E20DFD, 0x12E003F4, 0xEAF80D0A, 0x1CE602FB);
	r5 = D(r5, s1_1_2, 0xFC000B00, 0xE40DF8FD, 0x0912FEFD, 0x032EEEFA);
	r6 = D(r6, s1_1_2, 0xE7070205, 0xFF15F10A, 0xFD03FA01, 0x0306F8E7);
	r7 = D(r7, s1_1_2, 0xDC1DEEF4, 0xF706020F, 0x050EDEBF, 0xFE0D0AF7);
	r0 = D(r0, s1_2_0, 0x06F806FF, 0xFCFE03FB, 0xF10A1403, 0xFE000200);
	r1 = D(r1, s1_2_0, 0x01F9F902, 0xFF03F909, 0xFD0506F6, 0x04F8FFFF);
	r2 = D(r2, s1_2_0, 0xF90401FF, 0x0101FA01, 0x0EF5FBFF, 0xFE03F907);
	r3 = D(r3, s1_2_0, 0x04080803, 0x030A06FB, 0x12FAFB04, 0xF40C01FF);
	r4 = D(r4, s1_2_0, 0xF90509F4, 0xFBF2FE03, 0xFD0C0301, 0xFF04FF07);
	r5 = D(r5, s1_2_0, 0x07FE0202, 0x011218E7, 0xFC09FF00, 0xFF02FB00);
	r6 = D(r6, s1_2_0, 0xF6040404, 0x0304F107, 0x0208FF07, 0xF8040400);
	r7 = D(r7, s1_2_0, 0x00030405, 0xF7020100, 0xF90B1302, 0x02FFFF02);
	r0 = D(r0, s1_2_1, 0x10F4FDFD, 0xFD010105, 0xFADEE7E9, 0x00FA07FE);
	r1 = D(r1, s1_2_1, 0x140CFF06, 0x0DF409FF, 0x05040803, 0xFFFFFB06);
	r2 = D(r2, s1_2_1, 0x040501FB, 0x07F2010B, 0x041706FC, 0xF3000622);
	r3 = D(r3, s1_2_1, 0x01FDFEFD, 0x0103FFF3, 0x000C04F5, 0xD6090103);
	r4 = D(r4, s1_2_1, 0x0EF2F7FC, 0x13081107, 0x0B0608EE, 0x020A0507);
	r5 = D(r5, s1_2_1, 0x06F803FE, 0xFFFE04EC, 0xF5050502, 0xFCFE0001);
	r6 = D(r6, s1_2_1, 0x02FAFDFD, 0xF61AE50A, 0x00090901, 0xFC09FA01);
	r7 = D(r7, s1_2_1, 0xFC0201FA, 0x04FAF903, 0x24FCED01, 0x080A0703);
	r0 = D(r0, s1_2_2, 0x0B0203E9, 0x080204FB, 0x0D0603EC, 0x01FC00F9);
	r1 = D(r1, s1_2_2, 0xF4040106, 0x00F8F9F1, 0x11110201, 0x08F70109);
	r2 = D(r2, s1_2_2, 0xFEF0EF14, 0x0BFF01F7, 0xFEFC02FC, 0x0DFFFEF9);
	r3 = D(r3, s1_2_2, 0x070003F3, 0x010002F8, 0x05FCFBF5, 0xF902FBFD);
	r4 = D(r4, s1_2_2, 0x140415F6, 0x1EFFFAEA, 0x07FBFADE, 0x0F0300F2);
	r5 = D(r5, s1_2_2, 0xF5F80DFE, 0xF0000DFB, 0x0002FDFE, 0x1D04F8F0);
	r6 = D(r6, s1_2_2, 0xF5FEFA07, 0xFFF6F819, 0x0F0FFCFE, 0xE7FD0607);
	r7 = D(r7, s1_2_2, 0x0807F8FC, 0xF402010A, 0xF80720F2, 0xFCFF09F9);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9ED080C, 0xFCFB0CFF, 0x04FD0403, 0x01010101);
	r1 = D(r1, s0_0_0, 0xF902FF0A, 0xF8030803, 0x04060905, 0xF91100F7);
	r2 = D(r2, s0_0_0, 0x0309F5F8, 0xFCFA010A, 0x0002FC00, 0xFE05FC03);
	r3 = D(r3, s0_0_0, 0xFD030705, 0xFFFAFA09, 0xFF00FD01, 0xF7FC0204);
	r4 = D(r4, s0_0_0, 0x04FA0AEC, 0x0216FBE9, 0x03F80801, 0x0DF403FF);
	r5 = D(r5, s0_0_0, 0x08FA0909, 0x00F8FBFA, 0x02010100, 0x02F90205);
	r6 = D(r6, s0_0_0, 0x050BFAFB, 0x0512FEFC, 0x0201F900, 0x07FCFB0E);
	r7 = D(r7, s0_0_0, 0x08F90300, 0x000BFDFC, 0x11EE07FF, 0x010C0CF7);
	r0 = D(r0, s0_0_1, 0x0AF809ED, 0x051BFEFF, 0x01F5FA00, 0xFBFC02FC);
	r1 = D(r1, s0_0_1, 0xFDFE0102, 0x1ADAF81D, 0x09C5F632, 0x0301FF02);
	r2 = D(r2, s0_0_1, 0x07F9F9F8, 0x01FF0006, 0x0D0B03FE, 0x050706F9);
	r3 = D(r3, s0_0_1, 0x03E4F80E, 0xF4FCF500, 0x0AF20113, 0x04F20109);
	r4 = D(r4, s0_0_1, 0xFD2912FA, 0xEE0104FF, 0xFE0D04F6, 0x001404FD);
	r5 = D(r5, s0_0_1, 0xFEF8FB03, 0x090B00FE, 0xFD03FD02, 0xFEFE0108);
	r6 = D(r6, s0_0_1, 0x040102FD, 0xFFFFFE0D, 0x1DF80A09, 0xE613FAEE);
	r7 = D(r7, s0_0_1, 0xE61303EB, 0xFEFEFF00, 0xD22EFFE7, 0x0C060DFB);
	r0 = D(r0, s0_0_2, 0x080E0B0A, 0xFCF5FF06, 0xFF020404, 0x03050302);
	r1 = D(r1, s0_0_2, 0xF7FBFF03, 0xFB06FEFE, 0xF1DC07E0, 0xFEFDFB04);
	r2 = D(r2, s0_0_2, 0xEB04FC00, 0xF9F205FC, 0xFCF9FEFF, 0x0CF60604);
	r3 = D(r3, s0_0_2, 0x0306FEFD, 0xF8FE05FD, 0xEDFEF505, 0xF0FF01FF);
	r4 = D(r4, s0_0_2, 0xD6F7FA05, 0xCDE41302, 0x01E70202, 0x12F60303);
	r5 = D(r5, s0_0_2, 0xFB0BF9F9, 0xFBF80BFA, 0xFFFE0000, 0x03F606FA);
	r6 = D(r6, s0_0_2, 0xE90400FF, 0xF3EF01FB, 0xF2FDFFF9, 0x02F80B10);
	r7 = D(r7, s0_0_2, 0xFCFF0807, 0x00F70102, 0x81D9EE04, 0xF40FFDFD);
	r0 = D(r0, s0_1_0, 0x1C06EFE6, 0xFB030FFE, 0xFA00000B, 0xFEFF06FD);
	r1 = D(r1, s0_1_0, 0x0AFF0105, 0xFD06FEF3, 0x0614F8FE, 0xF71109F3);
	r2 = D(r2, s0_1_0, 0xFE01F406, 0x1905FCE6, 0xFB0908F1, 0xF905FC0E);
	r3 = D(r3, s0_1_0, 0xF11502D9, 0x151800F8, 0xFF05F5F7, 0x1609FEFB);
	r4 = D(r4, s0_1_0, 0xE6E81725, 0x000608EC, 0x00F70809, 0xF902FDF6);
	r5 = D(r5, s0_1_0, 0x06F605FF, 0xFF090218, 0x06F605FD, 0x01EFFF10);
	r6 = D(r6, s0_1_0, 0xFDF8091F, 0xE1121010, 0xFCFEFA01, 0x07010302);
	r7 = D(r7, s0_1_0, 0xF6FA020C, 0xEE0E0111, 0x17F20A0D, 0xF90C2904);
	r0 = D(r0, s0_1_1, 0xDB1607BA, 0xEAE6F2F8, 0xF7ED0FCB, 0xF8EE0AFA);
	r1 = D(r1, s0_1_1, 0xEB59060A, 0x02D4FDDD, 0xF63A0006, 0xE9D7FC04);
	r2 = D(r2, s0_1_1, 0x082CF4E8, 0x00490CE2, 0x092305E9, 0xFFB8FDF7);
	r3 = D(r3, s0_1_1, 0xED31FEF9, 0xEC3C23EA, 0xFB310309, 0xDA4B0BFF);
	r4 = D(r4, s0_1_1, 0xF9EC0104, 0x0CD904F4, 0xE5D50126, 0xCBFDF4EC);
	r5 = D(r5, s0_1_1, 0x072E0215, 0xD304EB07, 0xFC16F600, 0xE9010B12);
	r6 = D(r6, s0_1_1, 0x03CAFBFB, 0x1E070118, 0x03F9ED15, 0x1511F315);
	r7 = D(r7, s0_1_1, 0x13C70F1A, 0xFF400807, 0x01440617, 0x05F7EEFE);
	r0 = D(r0, s0_1_2, 0xFD0EF002, 0xFC060806, 0x061A000C, 0xF83603FC);
	r1 = D(r1, s0_1_2, 0x03030404, 0xF9451B08, 0xFF2D07FD, 0xFBF8090A);
	r2 = D(r2, s0_1_2, 0xF80BFDE8, 0xEEFCF90A, 0x04EF0202, 0xF92B09F9);
	r3 = D(r3, s0_1_2, 0xF2E404FB, 0x0AFBFF06, 0x03E50C10, 0x07090908);
	r4 = D(r4, s0_1_2, 0x0A06F203, 0xE91DF2F0, 0x02FFF510, 0xEE11F7F9);
	r5 = D(r5, s0_1_2, 0xF6E40200, 0x13E6FC0A, 0x00F2FF02, 0xFAE7F40E);
	r6 = D(r6, s0_1_2, 0xE5EC0EEF, 0xF8F1FDEB, 0xF8FEFCFB, 0xED06FBF7);
	r7 = D(r7, s0_1_2, 0xDFB1F006, 0x02FE0505, 0x529BF481, 0x0DE40607);
	r0 = D(r0, s0_2_0, 0xE5EC0609, 0xF705ED11, 0x0AFEFEF4, 0x0201FF01);
	r1 = D(r1, s0_2_0, 0xF7E80201, 0x0FFFFC08, 0x00FAF4FC, 0x0B01F801);
	r2 = D(r2, s0_2_0, 0x0BFF09F3, 0xFCEE05F9, 0xFFFCFF02, 0x08F30AF7);
	r3 = D(r3, s0_2_0, 0x1DF6F4E5, 0xFE0DF60C, 0x070AE801, 0xE8090204);
	r4 = D(r4, s0_2_0, 0xDEF70C07, 0xFD0BFEE2, 0x001206FB, 0xFAFF1000);
	r5 = D(r5, s0_2_0, 0xEDEF1FFB, 0x0423E2E0, 0xF9FC0400, 0xFA03FF08);
	r6 = D(r6, s0_2_0, 0xFF0100FB, 0x24E7F8F1, 0xEB0609F4, 0xFDFEFBFB);
	r7 = D(r7, s0_2_0, 0xFC0700FD, 0x08070402, 0xFB051201, 0xFDEB090F);
	r0 = D(r0, s0_2_1, 0x280FDEE8, 0x1BFDF1F7, 0x0E35DAF5, 0x0C0FF904);
	r1 = D(r1, s0_2_1, 0x01D4FFFE, 0xF70F0118, 0x0EEAF3F9, 0x060104FD);
	r2 = D(r2, s0_2_1, 0xFC0002ED, 0x0C0B06F0, 0xF10A0104, 0xF6F905F4);
	r3 = D(r3, s0_2_1, 0xF0190CF8, 0xF512E00B, 0xDDFFFC01, 0xF81C0910);
	r4 = D(r4, s0_2_1, 0x13F5F60D, 0x0FC4C515, 0x2111F1F9, 0xEDFBE2FE);
	r5 = D(r5, s0_2_1, 0x06E921F2, 0xD422FBF7, 0x05F9FC05, 0x19F702FE);
	r6 = D(r6, s0_2_1, 0xF40C1E0A, 0xEFC82CE0, 0xFDFDF70D, 0x15E308D1);
	r7 = D(r7, s0_2_1, 0x04F50202, 0xF4ED0010, 0x1AD5DFF1, 0xFAF70B16);
	r0 = D(r0, s0_2_2, 0xF1FDF510, 0xF7FEFE03, 0xF5ECFF00, 0xFFF7FDFA);
	r1 = D(r1, s0_2_2, 0x03FF04FB, 0xFFFDEEF4, 0xE4FD0803, 0xFC0AFEF9);
	r2 = D(r2, s0_2_2, 0x1C081304, 0x04020A09, 0xFF03FEFF, 0xFAFBFD00);
	r3 = D(r3, s0_2_2, 0x1C010D06, 0x0B030BFC, 0x1800FD06, 0xEBF60B06);
	r4 = D(r4, s0_2_2, 0xEF16F200, 0xEA22F1FE, 0xEC0F04FC, 0xFBF9F809);
	r5 = D(r5, s0_2_2, 0x1501FB05, 0x22FE1C12, 0xFEF20501, 0xFE01060F);
	r6 = D(r6, s0_2_2, 0xFBF3FCFC, 0xFA070402, 0x04EA0410, 0x04020102);
	r7 = D(r7, s0_2_2, 0x020002FF, 0xFFFEFFFB, 0x0E1815FF, 0x1504FFFF);
	r0 = D(r0, s1_0_0, 0xFF05F6F2, 0x03F8FF07, 0x0006FE03, 0x02000001);
	r1 = D(r1, s1_0_0, 0xFC04F903, 0xFFFD06F4, 0x0AFD0FED, 0x030207FB);
	r2 = D(r2, s1_0_0, 0x02F40601, 0x03FFFFFF, 0xFD0103FA, 0x01010205);
	r3 = D(r3, s1_0_0, 0xF7FFFEFD, 0xFD050F06, 0xFF040007, 0xFF000001);
	r4 = D(r4, s1_0_0, 0xF2F2030D, 0xE20105F7, 0x02FF010F, 0x00000907);
	r5 = D(r5, s1_0_0, 0x08FFFCFF, 0xFAFDFB07, 0x00000002, 0x01FB0008);
	r6 = D(r6, s1_0_0, 0xF7FFFFFD, 0x13EBF602, 0xFEF90803, 0x0210FB12);
	r7 = D(r7, s1_0_0, 0xFF02000F, 0x08FE0101, 0x08080BEA, 0x0702FD03);
	r0 = D(r0, s1_0_1, 0xF9021EFE, 0xFFDB0100, 0x0805F3FD, 0xFCFDFFFB);
	r1 = D(r1, s1_0_1, 0x08FDFF01, 0xF610EEF8, 0xE20507FC, 0x05FEFBFE);
	r2 = D(r2, s1_0_1, 0x04F40707, 0xFE01FF07, 0xFF030101, 0xFE0400FD);
	r3 = D(r3, s1_0_1, 0xFA00FA04, 0x0CFA07F4, 0xFD0002FB, 0x0BFAFE04);
	r4 = D(r4, s1_0_1, 0x1F000902, 0x06E61603, 0xF6F3FD04, 0xFDFBFFFC);
	r5 = D(r5, s1_0_1, 0xFCFCFF04, 0x06F7F3FD, 0x0100FFFF, 0x0408FA08);
	r6 = D(r6, s1_0_1, 0xF80C0605, 0x0AF4F405, 0x0702FCFB, 0xFDF40002);
	r7 = D(r7, s1_0_1, 0xFBEA02F9, 0xFBF6F801, 0xF4E808EE, 0x16F106F5);
	r0 = D(r0, s1_0_2, 0x09DFF8F8, 0x0DFCFDFA, 0x0AFE01FA, 0x000001FF);
	r1 = D(r1, s1_0_2, 0xFD02FE06, 0x02FC1504, 0x04010D0A, 0xF90801FD);
	r2 = D(r2, s1_0_2, 0xFC0DFD03, 0xF7FC0105, 0xFC05FF01, 0x0D060004);
	r3 = D(r3, s1_0_2, 0xFDFDF705, 0x01FF0B03, 0xEA010505, 0xFA030102);
	r4 = D(r4, s1_0_2, 0x18FA070F, 0x1906F7FE, 0x10EDFC05, 0x0BFFFF05);
	r5 = D(r5, s1_0_2, 0xEF01FF07, 0x1005FA02, 0x05000100, 0x02F4FA01);
	r6 = D(r6, s1_0_2, 0x080202F9, 0xEBF6FF08, 0xF2F80802, 0x14050405);
	r7 = D(r7, s1_0_2, 0x1CE302FF, 0xFF01FF01, 0x08030204, 0xF6FC0707);
	r0 = D(r0, s1_1_0, 0xF709009E, 0x02F802D3, 0x0E09FB0A, 0x02FE00FE);
	r1 = D(r1, s1_1_0, 0xFB01FF10, 0x0C0005E0, 0xF2FAF603, 0x0E060604);
	r2 = D(r2, s1_1_0, 0xF2040704, 0xFB03FE02, 0x07F907FE, 0xFC10F502);
	r3 = D(r3, s1_1_0, 0xF6EC03FB, 0xFAFFFFFD, 0xFAF010E7, 0xF300FE03);
	r4 = D(r4, s1_1_0, 0x07EA11D4, 0xFD0109E8, 0xF4FFFA1C, 0xF80902F1);
	r5 = D(r5, s1_1_0, 0xF0FB05F3, 0xDEF500E8, 0xFAFF0104, 0xF904FE1E);
	r6 = D(r6, s1_1_0, 0xF90AFE15, 0x04F3FFFF, 0x00040CF9, 0xFD02010F);
	r7 = D(r7, s1_1_0, 0x00FCFE15, 0x0601010A, 0x06FC0604, 0x09FB0217);
	r0 = D(r0, s1_1_1, 0x0ADE0218, 0xE005EAF9, 0xF6F9F9F6, 0x0FFB06FE);
	r1 = D(r1, s1_1_1, 0x15EBFE0B, 0xD91106DF, 0x18E2E408, 0x082500F6);
	r2 = D(r2, s1_1_1, 0xFDE50405, 0x0CE802FE, 0xF8F6FF02, 0x1A23F30B);
	r3 = D(r3, s1_1_1, 0xFAD100FA, 0x07DDFEF9, 0xF9C305F4, 0xFEF80906);
	r4 = D(r4, s1_1_1, 0xEDDF0BEF, 0x2FFCFB0B, 0xFAD9FDFC, 0x1ADDF80D);
	r5 = D(r5, s1_1_1, 0x01100F07, 0xDDC1EF01, 0x08F50108, 0x15ECF805);
	r6 = D(r6, s1_1_1, 0xF5160A0E, 0xD221FF02, 0x11DDF80D, 0xF401FC12);
	r7 = D(r7, s1_1_1, 0xF9F1F315, 0xF4F707F0, 0x1DDEFDEE, 0xFBE90E16);
	r0 = D(r0, s1_1_2, 0xA2D90C08, 0x0B01FE04, 0xEFFA02F6, 0x07F40001);
	r1 = D(r1, s1_1_2, 0x03F8FE04, 0xF4A702FB, 0x08E8EB11, 0x020701FD);
	r2 = D(r2, s1_1_2, 0x0DF0F9F2, 0x00F10307, 0x0C000000, 0xE6F30306);
	r3 = D(r3, s1_1_2, 0x1702FA05, 0xF106FD05, 0x17FD060A, 0x19F604F8);
	r4 = D(r4, s1_1_2, 0xEBE80603, 0xE3E10FFF, 0xEFDBFE09, 0xE7F20601);
	r5 = D(r5, s1_1_2, 0x14EF030F, 0xE60F08FF, 0xF6FB0100, 0xF3EDFA00);
	r6 = D(r6, s1_1_2, 0xFD040508, 0x09FE140E, 0xFFEC0D01, 0xFCFD040F);
	r7 = D(r7, s1_1_2, 0xC0F3FA0F, 0x0A04FC01, 0x16EBD6DD, 0xFFE8F510);
	r0 = D(r0, s1_2_0, 0xF7F912FF, 0xF9FD040B, 0xF9FF01E8, 0xFEFEFD08);
	r1 = D(r1, s1_2_0, 0xFA000205, 0x07F9010F, 0xFF0AFE0D, 0x0103FC00);
	r2 = D(r2, s1_2_0, 0xFDF806F1, 0x020606FF, 0x06FFFCF7, 0x05070B09);
	r3 = D(r3, s1_2_0, 0xF7080000, 0xF50403F4, 0x070DF90F, 0xFEFCFF10);
	r4 = D(r4, s1_2_0, 0xFEFCEDEA, 0x03030BE8, 0xFE0801F1, 0xFC00FFFB);
	r5 = D(r5, s1_2_0, 0xFE000818, 0xEA0F00D3, 0xFEFD01FC, 0x040008FC);
	r6 = D(r6, s1_2_0, 0xF8FE06F1, 0x09FE1208, 0xFBFB06F5, 0xFEFD00F6);
	r7 = D(r7, s1_2_0, 0xFFFC06FE, 0x04FFFBF9, 0xFDFF10EE, 0xFBFE090E);
	r0 = D(r0, s1_2_1, 0xE603BF05, 0x0303FA05, 0x0BECF206, 0x0CFFFD02);
	r1 = D(r1, s1_2_1, 0xF00108FE, 0xF0FFE2F9, 0xF402FFFB, 0x02030609);
	r2 = D(r2, s1_2_1, 0xFB011605, 0xFCFEF300, 0x03060402, 0xF00F0FFE);
	r3 = D(r3, s1_2_1, 0x0EFCE104, 0x01F5FF01, 0xF70100FB, 0xFAF7EE0A);
	r4 = D(r4, s1_2_1, 0x10EA0001, 0xFE01F206, 0xF908F7FE, 0x000B04F0);
	r5 = D(r5, s1_2_1, 0x0E010612, 0x1814F7D9, 0x14FAFAFC, 0xFBF7FD05);
	r6 = D(r6, s1_2_1, 0x13060206, 0xE2102C0D, 0x1DF700FE, 0x05F509F6);
	r7 = D(r7, s1_2_1, 0xF9F70103, 0x0AFE02FC, 0xEF08F2E4, 0x0AF8FE13);
	r0 = D(r0, s1_2_2, 0xF0011EFB, 0xEDFF0B06, 0xC9000AFE, 0x01020000);
	r1 = D(r1, s1_2_2, 0x0E020501, 0xE3FFFFF7, 0x13FE08F7, 0xF80507FE);
	r2 = D(r2, s1_2_2, 0x150CE208, 0x1302F6FF, 0x02FD05FB, 0xF7020101);
	r3 = D(r3, s1_2_2, 0x0902EC07, 0xF0FE0703, 0xFB08FA15, 0xF502F901);
	r4 = D(r4, s1_2_2, 0xEFDE0B0B, 0xF0F001EA, 0x1003FC0B, 0x0C03F500);
	r5 = D(r5, s1_2_2, 0x18F8000D, 0x11FCEAF1, 0x07FEFF00, 0xEC03F004);
	r6 = D(r6, s1_2_2, 0xEFFE03F8, 0x05F60504, 0xF8F9F0FB, 0x000103FB);
	r7 = D(r7, s1_2_2, 0xECFC0208, 0x05FBFC01, 0xF8E7F690, 0x03F6F712);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0CF9F40D, 0xFF06E9F4, 0xFF00F805, 0x02010400);
	r1 = D(r1, s0_0_0, 0x0103FDFF, 0xFAFD050A, 0xFA0E08EC, 0x02FC0A03);
	r2 = D(r2, s0_0_0, 0x060400F4, 0x00FFFB09, 0xF9FE0301, 0x0200F308);
	r3 = D(r3, s0_0_0, 0x07FF1003, 0x0403FE0D, 0xF5030AFC, 0xF9080003);
	r4 = D(r4, s0_0_0, 0x02EDF200, 0x0A05E114, 0x01000AFD, 0x08FA0402);
	r5 = D(r5, s0_0_0, 0x14030000, 0xF90108FC, 0x00000101, 0x02FF00FB);
	r6 = D(r6, s0_0_0, 0xFEF905F9, 0x08FD0815, 0x000001F8, 0x04FDFC02);
	r7 = D(r7, s0_0_0, 0x01FCFFF9, 0xFFFB0103, 0x13EF0FFB, 0x0903EDF3);
	r0 = D(r0, s0_0_1, 0x17E91C03, 0xF6EBD9F5, 0xFCFF01FC, 0xFE0109FF);
	r1 = D(r1, s0_0_1, 0x0DF40EFD, 0x02FC04FF, 0x0EF71C02, 0xFFFFFF0D);
	r2 = D(r2, s0_0_1, 0x15EF13F3, 0x0DF507EF, 0x0000F507, 0xFC0404FC);
	r3 = D(r3, s0_0_1, 0x0FF105FB, 0x0C0000FB, 0x16F8F7FE, 0x10F907FD);
	r4 = D(r4, s0_0_1, 0x0004BAEB, 0x04FE13E4, 0x01FE02EE, 0xF606EF03);
	r5 = D(r5, s0_0_1, 0x1D0208FD, 0xF417F7FC, 0xFD01FE02, 0x08F900FD);
	r6 = D(r6, s0_0_1, 0xF210FEF3, 0x2405FE09, 0x0004F921, 0xFCFEFBF4);
	r7 = D(r7, s0_0_1, 0x00FDFAE3, 0xFDFE09F9, 0x0003FC03, 0x0FFBF1EF);
	r0 = D(r0, s0_0_2, 0xF207E816, 0x03FCFEFA, 0x08FAF407, 0xFE0105FE);
	r1 = D(r1, s0_0_2, 0x02FD0102, 0x16E8070F, 0x24F1FBEB, 0x04040305);
	r2 = D(r2, s0_0_2, 0x00F60407, 0x03010D02, 0x0000FE08, 0x0902F207);
	r3 = D(r3, s0_0_2, 0x00FF0803, 0x0201FAFE, 0xFBFC0407, 0xFFFB08FE);
	r4 = D(r4, s0_0_2, 0x08F3EEE0, 0x06F3F5F3, 0xF907FDF6, 0x0904F805);
	r5 = D(r5, s0_0_2, 0x05FF0AFD, 0xFB13F1E6, 0x0001FEF7, 0xFBF810F3);
	r6 = D(r6, s0_0_2, 0x0703F8FF, 0x0C0210FB, 0x020706F8, 0x07FCFFF8);
	r7 = D(r7, s0_0_2, 0xF20AD606, 0x02FF04FD, 0xF6CAF7D8, 0xFAF8FDF2);
	r0 = D(r0, s0_1_0, 0x01F80800, 0x0AF30E09, 0x0301FE01, 0x01FC0200);
	r1 = D(r1, s0_1_0, 0xF50802FC, 0x07060C04, 0xF1090711, 0x060209FF);
	r2 = D(r2, s0_1_0, 0x04060218, 0xF601F201, 0xFEF901F7, 0x09F7F611);
	r3 = D(r3, s0_1_0, 0xFA0E040E, 0x0FF909FF, 0xFF0812F9, 0xF5FDFD03);
	r4 = D(r4, s0_1_0, 0xFA030BF0, 0x0FF8F4EA, 0xFFFC06F4, 0x08FB01FE);
	r5 = D(r5, s0_1_0, 0x0A020208, 0x0BFF1610, 0xFB030501, 0xF8FF0308);
	r6 = D(r6, s0_1_0, 0xFEF90F03, 0xF7F1FD1D, 0x0DFB08DD, 0xFCFE08F7);
	r7 = D(r7, s0_1_0, 0x03FDFBF5, 0x01FBF20F, 0xF915F405, 0x1105FA08);
	r0 = D(r0, s0_1_1, 0xFEF21A04, 0xFE07210D, 0xFDFB1EFE, 0xF9FB2901);
	r1 = D(r1, s0_1_1, 0xFC0FDAFD, 0xD1231E08, 0x0A06DF07, 0xEC0F1E10);
	r2 = D(r2, s0_1_1, 0x09DBC8EE, 0xFD0AF8EF, 0xF2F9ED0C, 0x20F63B06);
	r3 = D(r3, s0_1_1, 0xF90FEA00, 0xF7F5F70C, 0xD9FFE709, 0xE413CEF9);
	r4 = D(r4, s0_1_1, 0x30FBFDFF, 0xFDD33D18, 0x15E80AF1, 0x1CE91A00);
	r5 = D(r5, s0_1_1, 0x0700D4F0, 0x09E3110F, 0x09FBFAF9, 0x0EF7F3F5);
	r6 = D(r6, s0_1_1, 0x1FFFF1F4, 0x111FCCF2, 0xFAFECDFC, 0x0CF1C6EE);
	r7 = D(r7, s0_1_1, 0x00F73DF5, 0x0602D90E, 0x0A04430B, 0xFD04230A);
	r0 = D(r0, s0_1_2, 0x04030A1B, 0xFD03F30C, 0xF8F8F716, 0xFA02F705);
	r1 = D(r1, s0_1_2, 0x0803FEF7, 0xF507F71A, 0x05ECE516, 0x0104FFFA);
	r2 = D(r2, s0_1_2, 0xF60701D7, 0x0BFDFC10, 0xFC05FBFD, 0x04030918);
	r3 = D(r3, s0_1_2, 0x0BFFF1FA, 0xFFFE060D, 0x05FDF7F5, 0xFEF7F8FC);
	r4 = D(r4, s0_1_2, 0x0CFC14F4, 0xFF050CFF, 0x19F8D702, 0x0304FC09);
	r5 = D(r5, s0_1_2, 0x0DFC0EF8, 0x08E22002, 0xFBFF0501, 0xF9EB05F4);
	r6 = D(r6, s0_1_2, 0xF50630FD, 0x0604F5EA, 0x0D03FEEF, 0xFD0103FD);
	r7 = D(r7, s0_1_2, 0x17FE1B07, 0xFA07FEF3, 0x12BEF881, 0x0BF40E0A);
	r0 = D(r0, s0_2_0, 0x1FFBEEF3, 0xFBFD1001, 0xF8FEF8FF, 0xFD0001FF);
	r1 = D(r1, s0_2_0, 0x02FF02EA, 0x01FCFD06, 0xF6FD00F2, 0x08FE000C);
	r2 = D(r2, s0_2_0, 0xFBFAF700, 0x0403F512, 0x0DFAFC06, 0xFA01EB03);
	r3 = D(r3, s0_2_0, 0xF1051112, 0x08090E09, 0x01F70407, 0xFA06F304);
	r4 = D(r4, s0_2_0, 0x180BED11, 0xFA191FFA, 0x0403FBEE, 0x04FE01FD);
	r5 = D(r5, s0_2_0, 0x020AF4FD, 0xF8122AEC, 0xFDFF0900, 0x0FFFECF5);
	r6 = D(r6, s0_2_0, 0x08030310, 0x1CFDFF13, 0xFB0818EA, 0x06FAFC0A);
	r7 = D(r7, s0_2_0, 0x00FD10F2, 0xFC03FA00, 0x0DF8FFE4, 0x090909FF);
	r0 = D(r0, s0_2_1, 0xE8F31C10, 0x07FF070B, 0x08F0EC0F, 0xFAFA0303);
	r1 = D(r1, s0_2_1, 0xFAFF10EE, 0xF9F20506, 0xEF0313F2, 0x0604E70E);
	r2 = D(r2, s0_2_1, 0x0708FBF5, 0x0A030EFA, 0x0D01F707, 0xF3F5EEF6);
	r3 = D(r3, s0_2_1, 0x1BF7F50E, 0x0A070D0E, 0xFAFD0E09, 0x13021402);
	r4 = D(r4, s0_2_1, 0x0C07F919, 0xF30203F4, 0xF80B1CE4, 0xFC0713F3);
	r5 = D(r5, s0_2_1, 0xF30AEEF0, 0xFC111BF5, 0xF2FD1901, 0xED0308EE);
	r6 = D(r6, s0_2_1, 0x02FD0703, 0xF30B10CF, 0xF90531FF, 0xF3FCFADE);
	r7 = D(r7, s0_2_1, 0x03040AE3, 0xF6FD0801, 0xF4EA24FB, 0x0B0AFD0B);
	r0 = D(r0, s0_2_2, 0xF60504FD, 0x0606FEFF, 0x09020F05, 0x00FF0002);
	r1 = D(r1, s0_2_2, 0xF8FFFBF4, 0xF4FE100C, 0xF80604EE, 0x0901F70F);
	r2 = D(r2, s0_2_2, 0x06FCEAF8, 0xFEFB0014, 0x01FA01F6, 0x0CFF0809);
	r3 = D(r3, s0_2_2, 0x04FDF717, 0xFF060309, 0xEAF91C00, 0xFF050D08);
	r4 = D(r4, s0_2_2, 0x0D0CFC14, 0xF804FA04, 0x0001ED02, 0x09FDFA03);
	r5 = D(r5, s0_2_2, 0x0FFCF201, 0x030DE9FA, 0xF9FF03FE, 0xFDF91404);
	r6 = D(r6, s0_2_2, 0xFCFC020C, 0xFDF505E2, 0xFDFB0EEF, 0xF7FF02DE);
	r7 = D(r7, s0_2_2, 0xFBFE0FE3, 0xFC02FCF9, 0x20DEFF0C, 0x1BFAE10C);
	r0 = D(r0, s1_0_0, 0xFA061001, 0xF8051A02, 0x00000304, 0x0202FE00);
	r1 = D(r1, s1_0_0, 0xFE0303FE, 0x01FDFC00, 0x06F1EA0A, 0x0305F501);
	r2 = D(r2, s1_0_0, 0x0AEA01FE, 0x01FD06FF, 0x04FE08FC, 0xFF020BFD);
	r3 = D(r3, s1_0_0, 0x00F8FFFB, 0xFCFEF401, 0xF5F9F8FE, 0xFF04FD05);
	r4 = D(r4, s1_0_0, 0xEE1C2E06, 0x02EF2A09, 0xFD02F802, 0xFE00F304);
	r5 = D(r5, s1_0_0, 0xFB020005, 0xFFFEFE04, 0x020101FF, 0xFC00FA02);
	r6 = D(r6, s1_0_0, 0x05020403, 0xFE0C000A, 0xFFF9F9F2, 0xFFFBFE06);
	r7 = D(r7, s1_0_0, 0x04FC0404, 0x0302FA00, 0xFF04E4FF, 0x020A0E0D);
	r0 = D(r0, s1_0_1, 0xF811EAFE, 0xF9F9060B, 0xFE01FDFC, 0xFC010000);
	r1 = D(r1, s1_0_1, 0x05FCF601, 0xF8F908FF, 0xF7F8EF07, 0x01FA0602);
	r2 = D(r2, s1_0_1, 0xFBFFE8F7, 0xF9FEF400, 0x02FAFE04, 0x0AF904FE);
	r3 = D(r3, s1_0_1, 0xFBFDF300, 0xFDF4F7FF, 0xF3070305, 0xFF03F001);
	r4 = D(r4, s1_0_1, 0xF8F71F09, 0x07F3D5F4, 0x0204FF04, 0x04FA1706);
	r5 = D(r5, s1_0_1, 0xF40804FB, 0xF907020B, 0xFA02FD00, 0x0005FDF5);
	r6 = D(r6, s1_0_1, 0x100207FD, 0xFAEB01F7, 0xF101F811, 0xFB0B0803);
	r7 = D(r7, s1_0_1, 0x070718F8, 0xFFFE0204, 0xFBE70710, 0xEDF3F20B);
	r0 = D(r0, s1_0_2, 0xFB0B0514, 0x0206FF03, 0xFB02FF08, 0x0403FF00);
	r1 = D(r1, s1_0_2, 0x000301FE, 0x0503FBFD, 0xE507F1F6, 0x08F705FD);
	r2 = D(r2, s1_0_2, 0xFE0D0206, 0xFE0DFFFC, 0x020104FE, 0x0207FD0A);
	r3 = D(r3, s1_0_2, 0x04000501, 0x06FE04FF, 0x00FD11FA, 0xFF00FB00);
	r4 = D(r4, s1_0_2, 0xF900F802, 0xF000FBFC, 0xF7FDEF0A, 0xF80BF803);
	r5 = D(r5, s1_0_2, 0xFFFE0500, 0x04FA0106, 0x0103FF00, 0xFCFDF507);
	r6 = D(r6, s1_0_2, 0x05FD04FF, 0x01F60404, 0x03FC07FB, 0xFAFFFC02);
	r7 = D(r7, s1_0_2, 0x00FCF910, 0x0104F7FC, 0xEFDBD7F8, 0x0B040807);
	r0 = D(r0, s1_1_0, 0xF50811FB, 0x00FA05FB, 0xFBFDEF02, 0x0701FE02);
	r1 = D(r1, s1_1_0, 0xFF030B07, 0x05F7FB00, 0x0EED1409, 0x03FE01F2);
	r2 = D(r2, s1_1_0, 0xF5F40EDF, 0xF6051109, 0xFFFFF203, 0xFBF8F0FE);
	r3 = D(r3, s1_1_0, 0x06F505FE, 0xFB050EFA, 0xF903F502, 0x05FA180A);
	r4 = D(r4, s1_1_0, 0xEFDDF0F0, 0x0CF1CF06, 0xF3F5FF02, 0xFEF70402);
	r5 = D(r5, s1_1_0, 0x00FC0416, 0xF6F90BCF, 0x0101FF04, 0xF7FE0603);
	r6 = D(r6, s1_1_0, 0x11FCDE03, 0x02FE020F, 0xFA00F1ED, 0x05F1EA0E);
	r7 = D(r7, s1_1_0, 0xF6010503, 0x08000BFA, 0xF7FF0206, 0xFEFF0505);
	r0 = D(r0, s1_1_1, 0x0EF8E2F6, 0x10031204, 0xEC0C0BFC, 0xFFFFF800);
	r1 = D(r1, s1_1_1, 0x09022306, 0xF1EFFA09, 0x1DEFFB13, 0xF0F11104);
	r2 = D(r2, s1_1_1, 0x23F51B06, 0x15F5F907, 0x03040A0B, 0x00FDF9F1);
	r3 = D(r3, s1_1_1, 0x0AC71312, 0x19F622FB, 0x02FD0213, 0x08EE3407);
	r4 = D(r4, s1_1_1, 0xE9190601, 0x0906D5B6, 0xFDFDCDFA, 0xFF06E8E4);
	r5 = D(r5, s1_1_1, 0x04F2F10F, 0x1D0B040D, 0x040BF1FC, 0xFF01D0FF);
	r6 = D(r6, s1_1_1, 0x030A9FE4, 0xF8FE06EE, 0xFA190206, 0x0E1AADF1);
	r7 = D(r7, s1_1_1, 0xFB0CD3D1, 0xF5F7210B, 0x0C06C003, 0x00FAFAFD);
	r0 = D(r0, s1_1_2, 0x07080F05, 0x07FB0704, 0x0EFC0705, 0x0308FDFF);
	r1 = D(r1, s1_1_2, 0xF8FDF607, 0x1B07060C, 0x13F3130E, 0x10FC01FA);
	r2 = D(r2, s1_1_2, 0x0EB51302, 0xFCFA04FC, 0x0204FEFB, 0x08041409);
	r3 = D(r3, s1_1_2, 0xFEFFF7FE, 0xF704F4F9, 0xF90D0C01, 0x09FDF906);
	r4 = D(r4, s1_1_2, 0xFEF50500, 0x00F61C0B, 0x0100030C, 0x07FF100A);
	r5 = D(r5, s1_1_2, 0x000BFAFC, 0xF4F804F6, 0xFB0105FE, 0xFD0D0402);
	r6 = D(r6, s1_1_2, 0x0508EBF6, 0x000207F5, 0xFDFEF3FC, 0xFAEB1B03);
	r7 = D(r7, s1_1_2, 0xFFFA07FF, 0x0707F6FC, 0xFBCB12D9, 0x02FD0103);
	r0 = D(r0, s1_2_0, 0x01ECFA06, 0x00F9EE07, 0xF2F504FC, 0x04030101);
	r1 = D(r1, s1_2_0, 0x0202F70A, 0x00F905F1, 0xFDFAFB18, 0xFE05FDF8);
	r2 = D(r2, s1_2_0, 0xF7FDF417, 0xFAF9F407, 0x06FD0AF1, 0xEF02EDFA);
	r3 = D(r3, s1_2_0, 0xF90B09D6, 0xFCFD08FB, 0x010605D4, 0x03F90803);
	r4 = D(r4, s1_2_0, 0x16F50616, 0xF9EFD7E8, 0xFEFE020E, 0xF9F8E30B);
	r5 = D(r5, s1_2_0, 0x0CFEFF12, 0xFCE4E41E, 0x03020400, 0xF1F9040C);
	r6 = D(r6, s1_2_0, 0xFE04EDFB, 0x05F2DE04, 0x04FF0DFB, 0x0806FD0F);
	r7 = D(r7, s1_2_0, 0x03FFFF0A, 0x0107FFFB, 0x03FAF610, 0x04FDF500);
	r0 = D(r0, s1_2_1, 0x0D0803FF, 0xFD04F4F8, 0x12091C01, 0x00020D05);
	r1 = D(r1, s1_2_1, 0xF2FFEF06, 0x0605150C, 0xFBF6FD18, 0xFD0506F2);
	r2 = D(r2, s1_2_1, 0xF2EC0BF8, 0xFC01F9F5, 0xFAFCF008, 0xF7F1EB04);
	r3 = D(r3, s1_2_1, 0xFFEE11F7, 0xF1F0F3FF, 0x13EFE311, 0x03F72402);
	r4 = D(r4, s1_2_1, 0x29F324F6, 0x10F3F8BF, 0x0BF1130F, 0xFFDDFBFF);
	r5 = D(r5, s1_2_1, 0x0DEC061B, 0xF7CCF60B, 0xFD062905, 0xF90B2AFE);
	r6 = D(r6, s1_2_1, 0x14FF19DF, 0x00EBF3EC, 0x02E715F8, 0xF708F1E6);
	r7 = D(r7, s1_2_1, 0x04F702F8, 0x030DEF04, 0xF80216F5, 0x100DFCFD);
	r0 = D(r0, s1_2_2, 0xFFF0FE05, 0xFEFEFD0A, 0xFBF7FC08, 0xFF02FB00);
	r1 = D(r1, s1_2_2, 0xFD01FC01, 0x04FB0E03, 0x07F5F111, 0xFF040105);
	r2 = D(r2, s1_2_2, 0xEE0A11ED, 0x09060001, 0xFF050700, 0x0608010B);
	r3 = D(r3, s1_2_2, 0xFB0609F1, 0xFE0201FC, 0xFCF909F0, 0x0602FCF9);
	r4 = D(r4, s1_2_2, 0xFAFC0D06, 0xFCE70116, 0x08E80C0B, 0x04FB0008);
	r5 = D(r5, s1_2_2, 0x150807FC, 0x01F90002, 0x00FF07FE, 0x08F4F500);
	r6 = D(r6, s1_2_2, 0x0104F6FE, 0x18080804, 0x0201F405, 0xFDF0F9FD);
	r7 = D(r7, s1_2_2, 0x0AFBF9F9, 0xFA04FFFC, 0x03B0C9CD, 0x060209FF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.912e-02, -1.480e-02, -1.717e-02, 3.091e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.721e-02, -4.969e-03, -1.575e-02, -4.856e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.570e-02, -1.358e-02, -2.032e-02, -1.404e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.726e-02, -7.604e-02, -3.674e-02, -1.001e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.060e-02, -1.885e-02, -9.064e-03, -1.730e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-8.224e-03, -4.553e-02, -1.308e-03, -1.317e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.298e-04, -1.550e-02, -1.750e-03, -4.216e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(6.150e-03, 4.406e-03, -2.533e-02, -1.723e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -conv8
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04F8FA0F, 0x04F00004, 0xE908FB08, 0xFD000102);
	r1 = D(r1, s0_0_0, 0x08FFFDFC, 0xF10A0209, 0xFA0AFDFF, 0xFA070502);
	r2 = D(r2, s0_0_0, 0xFE0001FF, 0xF1F9FB09, 0xFCFD01FE, 0xFE02FFFD);
	r3 = D(r3, s0_0_0, 0x07FB0100, 0xF3EA0006, 0x01F9000D, 0xFC00FD04);
	r4 = D(r4, s0_0_0, 0x05F00303, 0x04F60C01, 0x1506EEF0, 0x02F40205);
	r5 = D(r5, s0_0_0, 0xF2040106, 0xFE02FD00, 0x0007FF01, 0xF702FF04);
	r6 = D(r6, s0_0_0, 0x0EDA0002, 0xFEFD0101, 0x00FB00FF, 0x0702FEFB);
	r7 = D(r7, s0_0_0, 0x070704F0, 0xF7000704, 0x130000FC, 0xFD010003);
	r0 = D(r0, s0_0_1, 0xF7F104FE, 0xFE070408, 0xF5010106, 0x140C0200);
	r1 = D(r1, s0_0_1, 0xE6FD0D1B, 0xF216FCFA, 0xF2EC02FE, 0xF119FAF2);
	r2 = D(r2, s0_0_1, 0xFAF3FF02, 0x070BF6FD, 0x0606FE05, 0x03E2FF03);
	r3 = D(r3, s0_0_1, 0xE60A0309, 0xF73613FF, 0x06D8F9FB, 0x12ECFA01);
	r4 = D(r4, s0_0_1, 0xEEFC0310, 0xEDDF05FA, 0xD6DB2C3C, 0xF6030305);
	r5 = D(r5, s0_0_1, 0x03F0FC06, 0x010500FB, 0xFD09FE02, 0x190FFCF0);
	r6 = D(r6, s0_0_1, 0xF7FEF902, 0xFA0200FE, 0xF60B0103, 0xFFFB0105);
	r7 = D(r7, s0_0_1, 0xE5CA1F32, 0x1702FC0A, 0xDC0DF913, 0x020BFEFF);
	r0 = D(r0, s0_0_2, 0xFE0400FE, 0xFE230003, 0xFDFDFD01, 0xFEFF0002);
	r1 = D(r1, s0_0_2, 0xFF0D09FF, 0xFD040008, 0xFB10FE06, 0x03F71705);
	r2 = D(r2, s0_0_2, 0x04FD04FF, 0xFD0B0F01, 0xFFFF0603, 0x010E05FE);
	r3 = D(r3, s0_0_2, 0xFCFEFCFB, 0xF601FE04, 0xF40FFF03, 0xF707FBFE);
	r4 = D(r4, s0_0_2, 0xF408000A, 0x10D905FA, 0x0AC9FC07, 0xFD010005);
	r5 = D(r5, s0_0_2, 0xFFFEFFFE, 0x02FA0101, 0xFE0506FF, 0x03FD0304);
	r6 = D(r6, s0_0_2, 0x010602FF, 0xFFFD0000, 0xFD0104FE, 0xFFFAFE00);
	r7 = D(r7, s0_0_2, 0xF7ACF805, 0xFCFBF5FD, 0x08000608, 0x01290101);
	r0 = D(r0, s0_1_0, 0x280B0A0C, 0x2AF604F7, 0x0AFFF102, 0x14F1FBFD);
	r1 = D(r1, s0_1_0, 0xEC030607, 0x0F1FFCE6, 0x040202FC, 0xF70A08F5);
	r2 = D(r2, s0_1_0, 0x02FE0002, 0x13EDFB0B, 0xF7FB0A11, 0xF604F9FF);
	r3 = D(r3, s0_1_0, 0xEB000A02, 0xE8F6F31F, 0x0FF703F4, 0xF90502FF);
	r4 = D(r4, s0_1_0, 0xF6080FFB, 0x2225130C, 0x17DB0AEC, 0x07F50BF3);
	r5 = D(r5, s0_1_0, 0x10F8FFEB, 0x08020106, 0xF7040000, 0x0E04FCF7);
	r6 = D(r6, s0_1_0, 0x30F803F6, 0xE9FDF503, 0xF1FD0108, 0x08F701F9);
	r7 = D(r7, s0_1_0, 0x0CF3F803, 0xFBFEF608, 0x03FD07F9, 0x03FB0001);
	r0 = D(r0, s0_1_1, 0xE9FEFFFC, 0xD8E614FC, 0x0C1602DD, 0x1C01020A);
	r1 = D(r1, s0_1_1, 0x130519FC, 0x16C62E08, 0x2A0C0C03, 0x0CEB2611);
	r2 = D(r2, s0_1_1, 0xEEF9030E, 0xFB00FFFC, 0x09111C06, 0xFDFD1F14);
	r3 = D(r3, s0_1_1, 0x0BF513FF, 0x0D0CDDFB, 0x07FE0CF6, 0xFC011AEF);
	r4 = D(r4, s0_1_1, 0x1B19FBFF, 0x02B8EC31, 0x09D24E12, 0x1323F9F7);
	r5 = D(r5, s0_1_1, 0x29030317, 0x0BECF0FB, 0x050809FB, 0xF6090A00);
	r6 = D(r6, s0_1_1, 0xFDFA14FA, 0x0F211809, 0xF60C05F9, 0x2B06FE0F);
	r7 = D(r7, s0_1_1, 0x11DD1C1D, 0xF70A2C06, 0xDE0FFC00, 0xEEF9F7F4);
	r0 = D(r0, s0_1_2, 0xFF02FF02, 0xFF00FB04, 0xFBEB1D07, 0xFE040203);
	r1 = D(r1, s0_1_2, 0xFD0000F7, 0xFC0CFAF9, 0xFAFC08E9, 0xFF070AFB);
	r2 = D(r2, s0_1_2, 0x0605F503, 0x03F8F5FF, 0xFD03ECF8, 0x06FDFA00);
	r3 = D(r3, s0_1_2, 0xFCFA0801, 0x1421DFF4, 0xF2BA0C23, 0x0B0411FE);
	r4 = D(r4, s0_1_2, 0x10EC2102, 0xE9070CFE, 0x02030C0B, 0xFFF015F9);
	r5 = D(r5, s0_1_2, 0x00FD03FE, 0x02FAF805, 0x03FF06FB, 0xF50315FB);
	r6 = D(r6, s0_1_2, 0x00F8FC00, 0xFF0504FF, 0x05F90BFE, 0xF9FE0601);
	r7 = D(r7, s0_1_2, 0x04D102FE, 0x0103F4FC, 0x02FEE102, 0x12F927FF);
	r0 = D(r0, s0_2_0, 0x1CF9FB1B, 0x1A03100A, 0xFBFAFCFE, 0x180307FF);
	r1 = D(r1, s0_2_0, 0xFB000202, 0xF5FF0E0D, 0xFE020A04, 0xF9FF0606);
	r2 = D(r2, s0_2_0, 0x0300FEFF, 0xFC00FFFF, 0x0402F700, 0x0001FF05);
	r3 = D(r3, s0_2_0, 0x00FE0204, 0x02FFFEFE, 0xDF040317, 0x0100FE03);
	r4 = D(r4, s0_2_0, 0xF7FDF625, 0xF9CD4613, 0xF9190DDA, 0xF4011EF9);
	r5 = D(r5, s0_2_0, 0x04020002, 0x01FDF40E, 0xFF0305FE, 0xFE020001);
	r6 = D(r6, s0_2_0, 0xFD090CF2, 0xFD000906, 0xF900FD07, 0xFB0406F8);
	r7 = D(r7, s0_2_0, 0xFF1602F1, 0x04FF01FE, 0x0203FEFD, 0xFC02FE00);
	r0 = D(r0, s0_2_1, 0xF5FE190B, 0xFAFA1E02, 0x0AFCCC0E, 0xF5041CF8);
	r1 = D(r1, s0_2_1, 0xF8010805, 0xF70211F7, 0xE70916EF, 0xFA0204F6);
	r2 = D(r2, s0_2_1, 0xFEFF0204, 0xFFFC0A02, 0xFB041005, 0x05FEF70E);
	r3 = D(r3, s0_2_1, 0x000201F6, 0xF604E1F4, 0xF90204FA, 0x03FDFE01);
	r4 = D(r4, s0_2_1, 0xEB15EBF5, 0xDA36F4D9, 0xCDC1F330, 0xF902E9FC);
	r5 = D(r5, s0_2_1, 0x03FEFD07, 0x01010AF8, 0x0201EF04, 0xF8FFEF04);
	r6 = D(r6, s0_2_1, 0x0502F6FD, 0x04FBF100, 0x10FDEE0B, 0x0DFBF202);
	r7 = D(r7, s0_2_1, 0xB3F3F221, 0xFF02F903, 0xFB030205, 0xFE080709);
	r0 = D(r0, s0_2_2, 0xFF00FA02, 0xFF02FAFE, 0xFF05EF01, 0xF801FC02);
	r1 = D(r1, s0_2_2, 0xFC030F00, 0xFA00FDFF, 0xF8F8080C, 0xFC01FE00);
	r2 = D(r2, s0_2_2, 0x0100FAFF, 0x01030100, 0x030208FE, 0x0000FD02);
	r3 = D(r3, s0_2_2, 0x02FC0603, 0xE5F1F312, 0x0F0808EE, 0xFA020103);
	r4 = D(r4, s0_2_2, 0xF4212AF5, 0x1F25C403, 0xF702F2FE, 0xF9FE08FE);
	r5 = D(r5, s0_2_2, 0xFFFFFA01, 0xFE00FE02, 0x0004F9FD, 0x00FE00FF);
	r6 = D(r6, s0_2_2, 0xFD0005FF, 0x00000100, 0x03FFFBFD, 0x00000000);
	r7 = D(r7, s0_2_2, 0xED0507FE, 0x020007FF, 0xFDFEFF03, 0xF507FB01);
	r0 = D(r0, s1_0_0, 0x050300FD, 0xFE0007FF, 0xFFFB0400, 0xFF0605FC);
	r1 = D(r1, s1_0_0, 0xFFFC0803, 0x04000300, 0x01FE0400, 0xFA070EFC);
	r2 = D(r2, s1_0_0, 0x0001FE02, 0x01FBF1FE, 0xFFFF0004, 0x0001FD02);
	r3 = D(r3, s1_0_0, 0xFBFB0A03, 0xFEF11506, 0x030AFC03, 0x0406FFFD);
	r4 = D(r4, s1_0_0, 0x0701FFFB, 0x03111602, 0x081915DC, 0x000007FB);
	r5 = D(r5, s1_0_0, 0x0403FDFF, 0xFF00FCFE, 0x010104FD, 0x0307FD02);
	r6 = D(r6, s1_0_0, 0xFDFD07FD, 0x01FFFF01, 0x01FD0200, 0xFE0001FD);
	r7 = D(r7, s1_0_0, 0xFD18F5E6, 0x0102FD08, 0xFB05FAFE, 0x01FEFF02);
	r0 = D(r0, s1_0_1, 0xFA050702, 0xFD0AF800, 0x00FC0801, 0xF800FBFF);
	r1 = D(r1, s1_0_1, 0x071411FB, 0x0305FF08, 0x00050402, 0x0A0D12FC);
	r2 = D(r2, s1_0_1, 0x0103FCFF, 0x080FF912, 0x040BFF0B, 0xFF000007);
	r3 = D(r3, s1_0_1, 0x03F80EFD, 0xFDFA0BF5, 0x01FAFC00, 0xFE02FD06);
	r4 = D(r4, s1_0_1, 0xFE050DFE, 0xFF01FFE8, 0xEDFAD106, 0xFE0000FE);
	r5 = D(r5, s1_0_1, 0xFE02010A, 0x01010000, 0xFF02FFFC, 0xFCFE0907);
	r6 = D(r6, s1_0_1, 0xFD030105, 0x01FFFF00, 0x020001FF, 0x020100FF);
	r7 = D(r7, s1_0_1, 0xF3011D06, 0xEE0801FA, 0xEAFB14F7, 0xFC0AFDFF);
	r0 = D(r0, s1_0_2, 0x02040102, 0x0500FA01, 0x06FB0505, 0xFD01FFFD);
	r1 = D(r1, s1_0_2, 0xF4FB07EE, 0x03000500, 0x07010304, 0xFDF604F6);
	r2 = D(r2, s1_0_2, 0x01FFFE02, 0xFD01FEFD, 0x03020003, 0x0201FE01);
	r3 = D(r3, s1_0_2, 0xFF010604, 0x07FD0F00, 0x0A0CF502, 0x02FF0206);
	r4 = D(r4, s1_0_2, 0x04080205, 0x02EA0508, 0x1D15071A, 0x02000208);
	r5 = D(r5, s1_0_2, 0xFEFE0304, 0xFE0100FD, 0xFF000002, 0xFEFF06FA);
	r6 = D(r6, s1_0_2, 0x00000000, 0xFFFF0200, 0x01FDFF01, 0xFD01FF02);
	r7 = D(r7, s1_0_2, 0xF01210F5, 0x02020104, 0x1306FC0D, 0x0501FE03);
	r0 = D(r0, s1_1_0, 0xEC0DF3F9, 0xF90608F9, 0x060FED05, 0xF4F90201);
	r1 = D(r1, s1_1_0, 0x04FA08F6, 0xF5EA0E00, 0xFFFB05FF, 0x06FB09EB);
	r2 = D(r2, s1_1_0, 0xFDFF0207, 0xFC09EF11, 0x00FF0307, 0x03F9040C);
	r3 = D(r3, s1_1_0, 0x041A05F4, 0x1728D3DC, 0x06FC0AFD, 0x01F9FC04);
	r4 = D(r4, s1_1_0, 0xF00304F5, 0xFA0BE8F3, 0xEBF60B15, 0xF50FFFE0);
	r5 = D(r5, s1_1_0, 0x02E80FFF, 0xFE0512FE, 0x060DFBFF, 0x010A0A02);
	r6 = D(r6, s1_1_0, 0x03080407, 0xFC0008FF, 0x070A06FD, 0x00000000);
	r7 = D(r7, s1_1_0, 0x04000405, 0x04F7FB00, 0xF80D0303, 0xFD090700);
	r0 = D(r0, s1_1_1, 0xFC060914, 0xE2081206, 0xE30FEEFD, 0x0304F2E8);
	r1 = D(r1, s1_1_1, 0x0D09F7F0, 0xFA0209D8, 0xECF00EE1, 0x1604F916);
	r2 = D(r2, s1_1_1, 0xEDFB07F9, 0xED07F90B, 0xD5F803E3, 0xEDF904EC);
	r3 = D(r3, s1_1_1, 0x0E0903F4, 0x0435DDED, 0xD708EDE1, 0xFAFA05EE);
	r4 = D(r4, s1_1_1, 0xEEE7FBEC, 0xE0FE1DF1, 0xAB3C02E1, 0xFB030206);
	r5 = D(r5, s1_1_1, 0xF5FCFDE8, 0x0807F801, 0xFC0B042B, 0xE818F518);
	r6 = D(r6, s1_1_1, 0xF3070101, 0x09FCFDFC, 0xE2FF03F7, 0xF50AF402);
	r7 = D(r7, s1_1_1, 0xDD423F0A, 0xFC06060D, 0xE6050C04, 0x05E6190A);
	r0 = D(r0, s1_1_2, 0x03FFFBFC, 0x0805FDF9, 0x050C02FA, 0xFB01FE03);
	r1 = D(r1, s1_1_2, 0x1003041E, 0xF3070611, 0xF5090C07, 0x00010306);
	r2 = D(r2, s1_1_2, 0x10F9FC04, 0xFA08FCF8, 0x06060208, 0x0401FE07);
	r3 = D(r3, s1_1_2, 0x040802F0, 0x0B17EFF0, 0xECFE28F8, 0xFB09F2FA);
	r4 = D(r4, s1_1_2, 0x09F105E3, 0x0FF916F2, 0xF9FF0DF2, 0x04FC040C);
	r5 = D(r5, s1_1_2, 0x03030109, 0x00FF0201, 0x04FE00F8, 0x03040514);
	r6 = D(r6, s1_1_2, 0x00FA02FF, 0xFEFA0101, 0x0702FEFD, 0xFD030304);
	r7 = D(r7, s1_1_2, 0x85D615AC, 0x0A01FC03, 0x1009FE03, 0xFD0EF205);
	r0 = D(r0, s1_2_0, 0xFDF7D808, 0xF6E900FA, 0x0D160E01, 0xFA0204F2);
	r1 = D(r1, s1_2_0, 0x03FB0005, 0x0BF4040F, 0xFF020503, 0x01EF0609);
	r2 = D(r2, s1_2_0, 0x01FE0103, 0x02060400, 0x05FAF701, 0x00F2FE06);
	r3 = D(r3, s1_2_0, 0x01FBFE03, 0x0215F701, 0x0618F20B, 0x01080102);
	r4 = D(r4, s1_2_0, 0xF9BCF809, 0x0E14F01B, 0x051309C3, 0xFFFD0103);
	r5 = D(r5, s1_2_0, 0xFFFCFD0E, 0x03F5F507, 0x0404FCFC, 0x04E80401);
	r6 = D(r6, s1_2_0, 0xF8010A0A, 0x0005050A, 0x02FA06FE, 0xFF020001);
	r7 = D(r7, s1_2_0, 0x040BEFF0, 0x0102FAFE, 0xFB030000, 0xFD040100);
	r0 = D(r0, s1_2_1, 0xFB090807, 0xFF020EFD, 0x12FE05F7, 0xF6F90908);
	r1 = D(r1, s1_2_1, 0x01F10505, 0x05F702FB, 0x09F20C07, 0xFDFF02FD);
	r2 = D(r2, s1_2_1, 0x02F3F907, 0x07F90100, 0x0DF40216, 0x00F4FA11);
	r3 = D(r3, s1_2_1, 0x01F60004, 0xF104F71B, 0x050CEAED, 0x05F0FA0E);
	r4 = D(r4, s1_2_1, 0xE4010EC9, 0xBF38EB81, 0x81C1240A, 0x00F403F5);
	r5 = D(r5, s1_2_1, 0xFFEDF916, 0xF1ECFE1E, 0x0600010B, 0x061305F5);
	r6 = D(r6, s1_2_1, 0xFFF4FFF8, 0x09010000, 0x0E0AFCF3, 0x05FAF8FE);
	r7 = D(r7, s1_2_1, 0xFCB730F2, 0x01FB0105, 0x010501FB, 0xFDF205FF);
	r0 = D(r0, s1_2_2, 0x0300FEFE, 0x07010004, 0x08FCFB00, 0xFC0204FD);
	r1 = D(r1, s1_2_2, 0xFE010204, 0x05060206, 0x0A0104FD, 0xFF000203);
	r2 = D(r2, s1_2_2, 0x02FC0009, 0x04FFFE03, 0x0704FD02, 0x03FFFF05);
	r3 = D(r3, s1_2_2, 0xFFFE0303, 0xFD040E02, 0xFD1AFF0E, 0x07FA0102);
	r4 = D(r4, s1_2_2, 0xD7F307EA, 0x004ED8FE, 0x0C230EE9, 0x040802FD);
	r5 = D(r5, s1_2_2, 0xFC010000, 0x04FE0101, 0x06FEFF00, 0x07FD0202);
	r6 = D(r6, s1_2_2, 0xFF010303, 0xFC000000, 0x04000104, 0xFEFF0001);
	r7 = D(r7, s1_2_2, 0xF2360BE1, 0x0000FE00, 0x05000305, 0x01F8070C);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0202FFFE, 0x08FDF4F9, 0xFE0001F0, 0x0002F8FD);
	r1 = D(r1, s0_0_0, 0xFE0003F4, 0xF908FD05, 0xFF0202FE, 0xFBFDFBF6);
	r2 = D(r2, s0_0_0, 0x000102FB, 0xFDFD10F0, 0x01FE07F0, 0xFF0206FE);
	r3 = D(r3, s0_0_0, 0xFCFBF920, 0x02FC0F0C, 0x02FAF007, 0x02FD03EF);
	r4 = D(r4, s0_0_0, 0x02F7030C, 0xF3F7FAE8, 0x09001D1F, 0xFDFBFD07);
	r5 = D(r5, s0_0_0, 0x02F9F302, 0x00FF00FE, 0x02FAFFFF, 0x02FBF6FB);
	r6 = D(r6, s0_0_0, 0xF9F60CF7, 0xFD04FF00, 0xFCFF0105, 0x04FD0104);
	r7 = D(r7, s0_0_0, 0x12F81328, 0x0302FE07, 0x0804EB11, 0xFF0101FB);
	r0 = D(r0, s0_0_1, 0x0505FE01, 0xE513F700, 0x030403FD, 0xFDFDFF06);
	r1 = D(r1, s0_0_1, 0xF2E8EA0D, 0x0604FE03, 0x04FEEE04, 0xEBEEDE04);
	r2 = D(r2, s0_0_1, 0xFB080204, 0x02060005, 0xF80CEF06, 0xFF13F902);
	r3 = D(r3, s0_0_1, 0xEEFB04EF, 0x03EB05F0, 0x0807FB06, 0x01F4FD0E);
	r4 = D(r4, s0_0_1, 0xFB03EEF5, 0xEAD91B1F, 0xF6FE11E6, 0xFF01F504);
	r5 = D(r5, s0_0_1, 0xF9F702FF, 0xFCFFFCFE, 0xFB000301, 0xFA020002);
	r6 = D(r6, s0_0_1, 0x0408F7FF, 0x0205FDFC, 0xFC0AFBFF, 0xFB0005FB);
	r7 = D(r7, s0_0_1, 0xFE03FC34, 0xFD16EE07, 0xFEE41CF6, 0x05FDFB02);
	r0 = D(r0, s0_0_2, 0x00FB0500, 0xFEF905FA, 0x0000FFFF, 0xFF03FBFF);
	r1 = D(r1, s0_0_2, 0xF502F404, 0xFE02FD01, 0x00FF0901, 0xF7000209);
	r2 = D(r2, s0_0_2, 0xFEFC05FE, 0x030002FE, 0x0001FDFD, 0x00FC03FF);
	r3 = D(r3, s0_0_2, 0xFF04FC01, 0xFBFA0402, 0x06FC08F9, 0x0503F5F7);
	r4 = D(r4, s0_0_2, 0xFEF00903, 0xFA0402EA, 0xE715EA03, 0x010004FC);
	r5 = D(r5, s0_0_2, 0x0101FA01, 0xFD02FF00, 0x0200FFFF, 0xFD02FD01);
	r6 = D(r6, s0_0_2, 0x01FE01FF, 0x0003FD01, 0x0201FF00, 0x0102FE02);
	r7 = D(r7, s0_0_2, 0xFE0EF4F9, 0x0600FBFD, 0xF8090E08, 0xFC0201F9);
	r0 = D(r0, s0_1_0, 0xBB0A14EE, 0x1F05FAE6, 0x01F0F901, 0x140BF7FD);
	r1 = D(r1, s0_1_0, 0x01FE060A, 0xFAF0F604, 0x06F8F604, 0xFCF7080C);
	r2 = D(r2, s0_1_0, 0x0102FC00, 0x09FEF807, 0x0507F725, 0xFF010D0B);
	r3 = D(r3, s0_1_0, 0x05F90609, 0x03F007EF, 0x05FA1D20, 0x03FCFD08);
	r4 = D(r4, s0_1_0, 0xF7101C07, 0x01194E1A, 0x07F112AA, 0x18F309E5);
	r5 = D(r5, s0_1_0, 0x05000904, 0xEFF407FE, 0x02FFFB01, 0x03FBFDEE);
	r6 = D(r6, s0_1_0, 0x0CF604EF, 0x040A01E9, 0x03FF03F6, 0x080101FA);
	r7 = D(r7, s0_1_0, 0x0703FE07, 0x03FF01F4, 0x060AFE04, 0x040501FA);
	r0 = D(r0, s0_1_1, 0x0306FA05, 0xBD32E703, 0xCA17FC17, 0xF30DFD04);
	r1 = D(r1, s0_1_1, 0x04F2070F, 0xF5FFE5F1, 0xCEFAFDFC, 0x0EF50702);
	r2 = D(r2, s0_1_1, 0xF90E19F7, 0xF9FE080C, 0x080F0BEB, 0x072AFCF4);
	r3 = D(r3, s0_1_1, 0x12E8F6F5, 0xD4EB0304, 0xCFD4E9DB, 0x01FC1405);
	r4 = D(r4, s0_1_1, 0x0C1693C1, 0xC848C7B5, 0xC01FF7F7, 0xCF170813);
	r5 = D(r5, s0_1_1, 0xEC1C02F2, 0x111804FB, 0x0008F8FB, 0xF6F9F9FF);
	r6 = D(r6, s0_1_1, 0xF00DFB02, 0xF80EF707, 0xFA27EA0B, 0xF7080C06);
	r7 = D(r7, s0_1_1, 0xED120FEB, 0x00010A0A, 0x060908F9, 0x06FB0922);
	r0 = D(r0, s0_1_2, 0x01FB02FC, 0x02FC0200, 0xF9F60303, 0xFC030100);
	r1 = D(r1, s0_1_2, 0xFC060106, 0x02FDEDFF, 0xF805E3FD, 0xF902020B);
	r2 = D(r2, s0_1_2, 0xFF16F9FE, 0xFB0101FF, 0x0100FE09, 0xFF03FD02);
	r3 = D(r3, s0_1_2, 0x00F2FB04, 0xF6F51204, 0xD6F7FDFA, 0x05FE03FE);
	r4 = D(r4, s0_1_2, 0xF323F329, 0xF718DEF5, 0xE0150307, 0xFC00F9F9);
	r5 = D(r5, s0_1_2, 0x0206FB02, 0xF8050000, 0xFFFAFB03, 0xFA01FF00);
	r6 = D(r6, s0_1_2, 0xFC0000FF, 0x00FDFE00, 0xFFFA0002, 0x0205FCFE);
	r7 = D(r7, s0_1_2, 0xDED5EF81, 0x05FDFBF3, 0xFE0403F5, 0xFD0E05F4);
	r0 = D(r0, s0_2_0, 0x03FE03DA, 0x06FD0600, 0xFBFEFB08, 0x01FD0701);
	r1 = D(r1, s0_2_0, 0x0000FBF9, 0x05F8F0EC, 0x00FEF406, 0x0302FCFD);
	r2 = D(r2, s0_2_0, 0xFE000204, 0x01FF0005, 0x01FC0107, 0xFE0302F7);
	r3 = D(r3, s0_2_0, 0xFE00FFFB, 0x080104FF, 0x09F9DCF9, 0xFF00FB0C);
	r4 = D(r4, s0_2_0, 0xEAF8EFD6, 0x81C6F687, 0xFFF4FF1E, 0x0004F606);
	r5 = D(r5, s0_2_0, 0x02FDFAF9, 0x00FBFBF4, 0xFFFE02FD, 0xFFFF0008);
	r6 = D(r6, s0_2_0, 0xFFFFFEF8, 0x03040508, 0xFC020508, 0x000103FF);
	r7 = D(r7, s0_2_0, 0xFAF50701, 0x00000105, 0x00FC0008, 0x0200FE07);
	r0 = D(r0, s0_2_1, 0xFD01F509, 0xF2F5F9FC, 0x07F5ED1F, 0xF9FFFA09);
	r1 = D(r1, s0_2_1, 0xFDFFFE01, 0xF5FAFF0C, 0xFCFDFCEE, 0xFDFDFE03);
	r2 = D(r2, s0_2_1, 0x01030200, 0x01FE0003, 0x01060004, 0x02040A05);
	r3 = D(r3, s0_2_1, 0xF70301F2, 0x0FFEFF0B, 0xECFE08DB, 0xFD03F8F6);
	r4 = D(r4, s0_2_1, 0xDFED09C4, 0x88B3031E, 0xEDDA1017, 0x0DEF07F5);
	r5 = D(r5, s0_2_1, 0xFE01FFF9, 0x0006FAFB, 0xFFFDFF06, 0x04FB0308);
	r6 = D(r6, s0_2_1, 0x01F7FFF9, 0xFC02FF01, 0xFF02F506, 0x020003FD);
	r7 = D(r7, s0_2_1, 0x00F82401, 0x010501FB, 0x060002FA, 0x060307F9);
	r0 = D(r0, s0_2_2, 0x01FDFDFD, 0x00FAFDFA, 0x09FEF204, 0x03FE01FA);
	r1 = D(r1, s0_2_2, 0xFCFD00F7, 0xFFFE030C, 0xFAFA0702, 0xFF02FF00);
	r2 = D(r2, s0_2_2, 0x00050303, 0x03FEFFFC, 0xFFF8F908, 0x00030304);
	r3 = D(r3, s0_2_2, 0xF701010C, 0x09F8FD17, 0xFD1007F9, 0xFFFD0505);
	r4 = D(r4, s0_2_2, 0xEBF3FE02, 0x05102EF2, 0xFEE6F1F2, 0x03F8F9FE);
	r5 = D(r5, s0_2_2, 0xFF040309, 0xFB040104, 0x01FDFD03, 0x03FAFD00);
	r6 = D(r6, s0_2_2, 0xFF0002FE, 0x0201FF00, 0x03FE00F8, 0xFF0000FF);
	r7 = D(r7, s0_2_2, 0xF7EEEE1F, 0xFDFC0004, 0xFBFDFBF9, 0x01FCFC07);
	r0 = D(r0, s1_0_0, 0xF0FAFF04, 0xFB05FEF8, 0x0AF4FE03, 0x04FE02FC);
	r1 = D(r1, s1_0_0, 0x02FC0002, 0x030400F6, 0xFE010101, 0x0E03FA02);
	r2 = D(r2, s1_0_0, 0x00000000, 0xFCF90308, 0xF9FD0104, 0xFD0000FD);
	r3 = D(r3, s1_0_0, 0x0604FF02, 0x0DF60111, 0x110D01FE, 0xF6FF0102);
	r4 = D(r4, s1_0_0, 0xF2070507, 0x09011604, 0xFAFC1906, 0xFE0105FD);
	r5 = D(r5, s1_0_0, 0x050402FF, 0xFF000001, 0x03FD0204, 0xFD040202);
	r6 = D(r6, s1_0_0, 0xFD06FE06, 0x0006FEFE, 0x02FF02FF, 0x04030201);
	r7 = D(r7, s1_0_0, 0xF9FF0D03, 0x02FDFFFD, 0xF90A0107, 0x05FE0000);
	r0 = D(r0, s1_0_1, 0x0BFEFDFD, 0xFA0306F8, 0x08FE0604, 0xF8FDFE02);
	r1 = D(r1, s1_0_1, 0x1A0DFAED, 0xFAF106F9, 0x02FE07F6, 0xF8FB0EEE);
	r2 = D(r2, s1_0_1, 0xF909FE02, 0xFAEDFAFC, 0xEC050308, 0xF804FDFE);
	r3 = D(r3, s1_0_1, 0x13FD060F, 0xFD0A060A, 0x05FC1008, 0xF0F90308);
	r4 = D(r4, s1_0_1, 0x040909F2, 0xFD010BFB, 0x08FAF8DD, 0xFA0803FE);
	r5 = D(r5, s1_0_1, 0xFCF80302, 0x07FE0104, 0x0AF90009, 0x0402FCFC);
	r6 = D(r6, s1_0_1, 0x01FC06FF, 0x05FC0401, 0x0905FF01, 0xFC01FF02);
	r7 = D(r7, s1_0_1, 0x120105ED, 0xC814061B, 0x01FE12F6, 0xF4060206);
	r0 = D(r0, s1_0_2, 0xFB00FE05, 0x04FD0308, 0x00FD00FE, 0x02FC05FF);
	r1 = D(r1, s1_0_2, 0xF6CC18D7, 0xFE01FC04, 0xFDF800FD, 0x03E70AE3);
	r2 = D(r2, s1_0_2, 0xFB00FF00, 0xFC00FE06, 0xFC02FF06, 0xFC00FE03);
	r3 = D(r3, s1_0_2, 0x03020208, 0xFA00080A, 0xFBEF1517, 0x00020B0A);
	r4 = D(r4, s1_0_2, 0xEAE8040A, 0x01F215FE, 0xF2F0221A, 0x03FE0008);
	r5 = D(r5, s1_0_2, 0xFFFFFE02, 0xFF0000FF, 0xFDFD0304, 0x01FD01FA);
	r6 = D(r6, s1_0_2, 0xFE020103, 0x0201FF01, 0x01FF0001, 0xFDFEFE00);
	r7 = D(r7, s1_0_2, 0xB3053306, 0xFB050206, 0xECF5FAF2, 0xECF60502);
	r0 = D(r0, s1_1_0, 0xE9FA09F9, 0xDF08FDFC, 0xEDFF0001, 0xEB0301FF);
	r1 = D(r1, s1_1_0, 0x03FFFCFD, 0xFC0AFD06, 0xF305FE06, 0xFF0203F9);
	r2 = D(r2, s1_1_0, 0x00FF00FE, 0xFD040307, 0x040202FD, 0xFEF901F8);
	r3 = D(r3, s1_1_0, 0x0003FE00, 0xFFFB0104, 0x0215FE18, 0xFB010106);
	r4 = D(r4, s1_1_0, 0x14F2FEFD, 0x01FFE3FC, 0xC6090BF7, 0xE406FD16);
	r5 = D(r5, s1_1_0, 0x0EFEFEFF, 0x00FA0102, 0xFF01F900, 0x000401FE);
	r6 = D(r6, s1_1_0, 0xE60D0803, 0xF20D0409, 0x0300FEF7, 0xF80102FD);
	r7 = D(r7, s1_1_0, 0xF306FF0B, 0xFDFE0304, 0xFFFAFE04, 0x0103FF00);
	r0 = D(r0, s1_1_1, 0x0DFEFF0D, 0xF7F21512, 0xF9EC15FD, 0x03FB02FF);
	r1 = D(r1, s1_1_1, 0x00080204, 0x10F42520, 0x1803060B, 0xFF040001);
	r2 = D(r2, s1_1_1, 0xFB0E0AFC, 0xFE0812FD, 0xE6120D09, 0x00FE0A1B);
	r3 = D(r3, s1_1_1, 0xFD0B0510, 0x1FCE0E09, 0x16031418, 0x07030A09);
	r4 = D(r4, s1_1_1, 0x8103FE2A, 0x31061D01, 0x07F844D3, 0xE1BB1504);
	r5 = D(r5, s1_1_1, 0x16F00D08, 0x0C00140E, 0xFCF80601, 0x03FE12EB);
	r6 = D(r6, s1_1_1, 0xF7FD0107, 0x02E203EC, 0xF6F60EF7, 0xF6FE03FD);
	r7 = D(r7, s1_1_1, 0x0D13F2EE, 0xFF0B03FA, 0xF003FBE5, 0xEAFE07EE);
	r0 = D(r0, s1_1_2, 0xFC0401FC, 0x04040100, 0x09FEFAFB, 0xFF040604);
	r1 = D(r1, s1_1_2, 0xF306FF03, 0xF10B0601, 0xF600130B, 0xF8040205);
	r2 = D(r2, s1_1_2, 0x01F2FF03, 0x06FF0A06, 0xFA0400F9, 0xFD0007FB);
	r3 = D(r3, s1_1_2, 0x0008FB13, 0xF6CF1D09, 0x18150530, 0xF6FB0606);
	r4 = D(r4, s1_1_2, 0x12012AF6, 0x0A1A0DFD, 0xC3DE100D, 0x040AFFFD);
	r5 = D(r5, s1_1_2, 0x03000AFC, 0xFFFE01FF, 0xFC010200, 0xFB010BFC);
	r6 = D(r6, s1_1_2, 0x03FFFFFD, 0x00000602, 0xFEFE06F4, 0xFE00FDFE);
	r7 = D(r7, s1_1_2, 0x81EF470D, 0x02020300, 0xFC050202, 0xF7EF0B0D);
	r0 = D(r0, s1_2_0, 0xF7FD0FFD, 0x0005FFFC, 0x04040302, 0x0404FFFA);
	r1 = D(r1, s1_2_0, 0xFFFF0101, 0xFAFA0405, 0x02FF04FF, 0x02FEFE00);
	r2 = D(r2, s1_2_0, 0x02FF00FF, 0xFEFD0300, 0x02FD0201, 0xFE000002);
	r3 = D(r3, s1_2_0, 0x02FD0001, 0x00090105, 0xF3EF060A, 0x03000000);
	r4 = D(r4, s1_2_0, 0xFBFF0507, 0x10E629F6, 0xF0250DEE, 0xFFFE0301);
	r5 = D(r5, s1_2_0, 0xFDFDFF02, 0xFDFD0102, 0xFCFE0001, 0x000100FE);
	r6 = D(r6, s1_2_0, 0x00FC02FE, 0x010300F9, 0x0200FEFD, 0x00FFFFFE);
	r7 = D(r7, s1_2_0, 0x010BFB03, 0x02FEFFFF, 0x03FA0106, 0x01FD0103);
	r0 = D(r0, s1_2_1, 0x0203F70E, 0xF9FC07FF, 0x0601FB0B, 0xF7FF01FB);
	r1 = D(r1, s1_2_1, 0x010301FF, 0xFB030BFA, 0xF5F603F6, 0xFC040100);
	r2 = D(r2, s1_2_1, 0xFF04FFFD, 0x01FCFF04, 0xFF03FF00, 0x010200F6);
	r3 = D(r3, s1_2_1, 0xFFFA02FF, 0xFC010EF5, 0x04E10309, 0xFFFC0006);
	r4 = D(r4, s1_2_1, 0x0FDD10D6, 0xFD814B33, 0xFDE74EC3, 0xFD0A090C);
	r5 = D(r5, s1_2_1, 0x00FF03FE, 0xFF00FEFC, 0x0404FDFF, 0xFF020207);
	r6 = D(r6, s1_2_1, 0x0104FC02, 0x00010B08, 0x09020001, 0x01FE0103);
	r7 = D(r7, s1_2_1, 0x01F120FE, 0x020100FD, 0x0307FAFB, 0x01040100);
	r0 = D(r0, s1_2_2, 0xFF010200, 0x02FBFF03, 0xFD09FA09, 0x02FFFD01);
	r1 = D(r1, s1_2_2, 0xFE0103FB, 0x02FC0301, 0x020309FF, 0x010004FD);
	r2 = D(r2, s1_2_2, 0x0102FF00, 0xFEFE0706, 0xFE010508, 0x03FCFFFF);
	r3 = D(r3, s1_2_2, 0x01FD04FD, 0x080806FE, 0xFCF521EF, 0x00FD0703);
	r4 = D(r4, s1_2_2, 0xFDFAF90B, 0xE79644DB, 0xE90D2904, 0xF9000700);
	r5 = D(r5, s1_2_2, 0x02FD03FE, 0x000001FD, 0x0104FF00, 0x00010306);
	r6 = D(r6, s1_2_2, 0xFFFDFE02, 0x0100FEFE, 0x010002FE, 0x01010001);
	r7 = D(r7, s1_2_2, 0xF338FB12, 0xFDFF0102, 0xFC000304, 0xFB010001);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00FF010E, 0x070606FF, 0xF6FC0209, 0x020402FE);
	r1 = D(r1, s0_0_0, 0x0B050605, 0x0BFF0D04, 0x0A030100, 0x17F60701);
	r2 = D(r2, s0_0_0, 0x03FE01FD, 0x01FBFA01, 0x05F80206, 0x04010304);
	r3 = D(r3, s0_0_0, 0xFB030410, 0x04070902, 0xFBF80703, 0x04FDFE06);
	r4 = D(r4, s0_0_0, 0xFFF7FAFC, 0x3803DD06, 0x4205DD0C, 0x12040500);
	r5 = D(r5, s0_0_0, 0xFE05FDF9, 0x02FB0100, 0x08FDFDFD, 0x01FA0204);
	r6 = D(r6, s0_0_0, 0x12020606, 0xFE020604, 0x03000005, 0x01FFFDFD);
	r7 = D(r7, s0_0_0, 0x0F13FBF5, 0x0AE70A01, 0xF900F4F9, 0x01FC0400);
	r0 = D(r0, s0_0_1, 0x01FE02FE, 0xF308F912, 0x0AFA0402, 0xFFFFFD05);
	r1 = D(r1, s0_0_1, 0x1FDB1201, 0x05FEF600, 0x16FD03F9, 0x1AE6F20F);
	r2 = D(r2, s0_0_1, 0xFF030007, 0x0A0E0011, 0x06100704, 0x0D0107FD);
	r3 = D(r3, s0_0_1, 0xE3040103, 0x0004FAF0, 0x0300FFF9, 0x0EFCFC0D);
	r4 = D(r4, s0_0_1, 0x09040AF4, 0x2BF51411, 0xD3FD100A, 0x0C0403FA);
	r5 = D(r5, s0_0_1, 0xFF03F8F3, 0x02FCFE05, 0xFE03F8F8, 0x0504F50C);
	r6 = D(r6, s0_0_1, 0x070406FC, 0x00FFFFFE, 0xFEFE08FE, 0xFB02FF00);
	r7 = D(r7, s0_0_1, 0x01C81B12, 0x2F090AF5, 0x0DF7FF1B, 0x04000502);
	r0 = D(r0, s0_0_2, 0x01FF01FF, 0x05FFFC08, 0x0200FF0B, 0x0001FEFC);
	r1 = D(r1, s0_0_2, 0x0F03F818, 0x04FD070C, 0x06010A12, 0x1100FD09);
	r2 = D(r2, s0_0_2, 0xFA04FB05, 0xF7000208, 0x01FC0100, 0xFBFF00FE);
	r3 = D(r3, s0_0_2, 0x03030307, 0x0807FE04, 0xF3FA15F9, 0x0504FA01);
	r4 = D(r4, s0_0_2, 0x11FCFC03, 0x2DF3F812, 0xFBFA08EA, 0xFF00020E);
	r5 = D(r5, s0_0_2, 0xFA02FDFB, 0xFF02FE0C, 0x0000F90A, 0xFA03FF0C);
	r6 = D(r6, s0_0_2, 0xFF02FE00, 0x020000FF, 0xFF03FCFB, 0x0402FE00);
	r7 = D(r7, s0_0_2, 0xEB2BF5DD, 0xFFFF0206, 0x0900FE0C, 0x0002FC0E);
	r0 = D(r0, s0_1_0, 0x0D031F03, 0xE8F6FAFA, 0xFDD8FB09, 0xEAFFFAFC);
	r1 = D(r1, s0_1_0, 0x0801FF03, 0x0EC4F20F, 0x02E2F705, 0x06010A06);
	r2 = D(r2, s0_1_0, 0x02FDFEFF, 0x00F306FE, 0x0BD507FE, 0x0DF604FE);
	r3 = D(r3, s0_1_0, 0xF9E90100, 0xF8CE0905, 0xF5FE0008, 0x04F20301);
	r4 = D(r4, s0_1_0, 0x02F8FA02, 0xDDE2A305, 0xF4C2B1FC, 0x08CEF3F7);
	r5 = D(r5, s0_1_0, 0xF6F4F602, 0x0DF70EF8, 0x01FD0000, 0xFCF9F501);
	r6 = D(r6, s0_1_0, 0xE1E8FBE3, 0x15F30000, 0x08E901FE, 0xF9FCF9FF);
	r7 = D(r7, s0_1_0, 0xF61BEEF8, 0xFF04FDFE, 0xFD0602FF, 0xFF02FBFD);
	r0 = D(r0, s0_1_1, 0x04FB0DED, 0xF606F014, 0x0EFAD706, 0xDCF9F009);
	r1 = D(r1, s0_1_1, 0xF3F9FFEF, 0x0A0B0AE5, 0xFBEAF60D, 0xF708F5CD);
	r2 = D(r2, s0_1_1, 0x1AF20B03, 0x1FF1F203, 0x13D7FCF5, 0x0EE0FEFA);
	r3 = D(r3, s0_1_1, 0xE5EB02E4, 0x38D0070B, 0xE2FCCEE7, 0x05FAEAFA);
	r4 = D(r4, s0_1_1, 0x042AFDF4, 0xBE00B5F8, 0xC9041BFA, 0x1612E30E);
	r5 = D(r5, s0_1_1, 0x12F3F9FF, 0xE9F8F9FA, 0xF8EE0509, 0x1BF70800);
	r6 = D(r6, s0_1_1, 0x1505F605, 0x1904FAFE, 0x09FDF204, 0x33FE1202);
	r7 = D(r7, s0_1_1, 0x14D525EE, 0x0DEEF102, 0xF8CF1A04, 0x1BE7FC06);
	r0 = D(r0, s0_1_2, 0x08010204, 0x1BFFEF09, 0xF9F707FC, 0xF402FBFD);
	r1 = D(r1, s0_1_2, 0x0D062FF8, 0xFE04FC10, 0xF8F803ED, 0x06FD0E08);
	r2 = D(r2, s0_1_2, 0x050312FB, 0x0BFEF5F9, 0x0603F90B, 0x0B00FE04);
	r3 = D(r3, s0_1_2, 0x0CFCFBFC, 0xE003ED11, 0xEF08C6F3, 0x1FFBF5F6);
	r4 = D(r4, s0_1_2, 0xFDF90AFE, 0xE0FCEDE2, 0xF600F70F, 0x12FB07F1);
	r5 = D(r5, s0_1_2, 0x02FFF503, 0x04FF0306, 0xFA05F606, 0xF804FD04);
	r6 = D(r6, s0_1_2, 0x09FF02FF, 0x00010302, 0xFF06FBFC, 0xFE000004);
	r7 = D(r7, s0_1_2, 0xD307CFE7, 0x15FEF805, 0x06FF16F8, 0x3AFAF9F5);
	r0 = D(r0, s0_2_0, 0xFE0015EE, 0xF7FCF8FD, 0x0CF9FDF9, 0xF8FFFCF9);
	r1 = D(r1, s0_2_0, 0x07060200, 0x090FFCF9, 0x0703F102, 0x0906FE03);
	r2 = D(r2, s0_2_0, 0x03FD0000, 0x02010001, 0x0209FCFF, 0x0004FF00);
	r3 = D(r3, s0_2_0, 0x010004FC, 0x09FA04FD, 0x02010FFE, 0x03FFFFFD);
	r4 = D(r4, s0_2_0, 0x1BDB0DFA, 0x15812D1F, 0x1181CB11, 0x06ED0B07);
	r5 = D(r5, s0_2_0, 0xFFFB0102, 0x02000C00, 0x02FC00FE, 0x0401FDFC);
	r6 = D(r6, s0_2_0, 0x08FBEF06, 0x06FAF3FF, 0x02040304, 0x02FD0503);
	r7 = D(r7, s0_2_0, 0xF70403FB, 0x00FBFF00, 0x02FF01FE, 0x01000003);
	r0 = D(r0, s0_2_1, 0xFB00D20C, 0xFCFF020F, 0xF30003FC, 0xFEFDFB12);
	r1 = D(r1, s0_2_1, 0x0B070000, 0x1AFCFA05, 0x19090D06, 0x0B0503FF);
	r2 = D(r2, s0_2_1, 0xFFFE0000, 0xFC0506FA, 0x0D08FEFC, 0x06FCF207);
	r3 = D(r3, s0_2_1, 0x0AFFFA0D, 0x0404B31D, 0x08FA110C, 0x01FB07FD);
	r4 = D(r4, s0_2_1, 0x0DE4ACF1, 0xBAAFDE01, 0x02E50007, 0x0CFAFBFA);
	r5 = D(r5, s0_2_1, 0x00FBFC04, 0x04FDF2F0, 0xFEFBF700, 0xFC01FDFA);
	r6 = D(r6, s0_2_1, 0x05041406, 0x050005FD, 0xEAF7F2FD, 0xFA0103FF);
	r7 = D(r7, s0_2_1, 0x05F007FD, 0xFD050300, 0xF9F8FC0A, 0xF6070000);
	r0 = D(r0, s0_2_2, 0x0CFBFF09, 0x070029F8, 0x06010701, 0x0000F1F7);
	r1 = D(r1, s0_2_2, 0x0C02EF00, 0x0503FAFA, 0x12FED5F7, 0x0200F401);
	r2 = D(r2, s0_2_2, 0x07010104, 0x0403FEFE, 0x03FE0A05, 0x050203FC);
	r3 = D(r3, s0_2_2, 0xF6FC0404, 0xDE06FEF1, 0x0700B214, 0x0A00F608);
	r4 = D(r4, s0_2_2, 0xCAE7E6F6, 0xC5079802, 0x12FBF3ED, 0x1107F304);
	r5 = D(r5, s0_2_2, 0x0002F703, 0xFF00FFFE, 0x0003FFFF, 0xFA010AF9);
	r6 = D(r6, s0_2_2, 0x03FE02FB, 0x0200F7FF, 0xFD020300, 0x0500FF02);
	r7 = D(r7, s0_2_2, 0x091BC228, 0x00000706, 0x080200FE, 0x0F0506FA);
	r0 = D(r0, s1_0_0, 0x01F709FD, 0xFDF90601, 0xFE04F904, 0x0601FFFF);
	r1 = D(r1, s1_0_0, 0xFF020302, 0x0CFFFF06, 0xFA07FA02, 0x00F50307);
	r2 = D(r2, s1_0_0, 0x0102FF00, 0x03F70500, 0xFE00FE03, 0x05000103);
	r3 = D(r3, s1_0_0, 0xF9FE0303, 0x04ECF213, 0x0B0C08FD, 0xFE020201);
	r4 = D(r4, s1_0_0, 0xFF070703, 0x02EB0712, 0xFBFEFA02, 0xFDFF0204);
	r5 = D(r5, s1_0_0, 0x0904FE03, 0xFDF90200, 0x060F02FD, 0x00070400);
	r6 = D(r6, s1_0_0, 0x01FB00FD, 0x0701FF03, 0xFD04FF02, 0xFEFDFEFE);
	r7 = D(r7, s1_0_0, 0xFD07ED08, 0x0B05FC0A, 0x09000203, 0x02FD0201);
	r0 = D(r0, s1_0_1, 0x04FD020C, 0x0307FCFF, 0x0409F503, 0x05F20500);
	r1 = D(r1, s1_0_1, 0x0F0D0412, 0xF4FE01FE, 0x02F90108, 0xD71F0D10);
	r2 = D(r2, s1_0_1, 0x0006FF03, 0xF2F204EE, 0xF9FF01FB, 0xFD05FD02);
	r3 = D(r3, s1_0_1, 0xF71F0216, 0x0B01FF0F, 0xFCF80101, 0xEDFF08F7);
	r4 = D(r4, s1_0_1, 0x19FBF919, 0x08F60F05, 0xFCE60DEB, 0x0006F909);
	r5 = D(r5, s1_0_1, 0x04F900F9, 0x00FA0201, 0xFC2A050A, 0x02F905F6);
	r6 = D(r6, s1_0_1, 0xFDFC0203, 0xFEFFFC03, 0x0211FE03, 0x0102FD03);
	r7 = D(r7, s1_0_1, 0x1D0EFA07, 0xF5F207ED, 0xFF16FB14, 0x09F90203);
	r0 = D(r0, s1_0_2, 0x02FE01FF, 0x02FFFF02, 0x07F8FE03, 0xFEFF0004);
	r1 = D(r1, s1_0_2, 0xF2F707F0, 0xF8090804, 0xFD0108F8, 0x00F302F2);
	r2 = D(r2, s1_0_2, 0x00F702FF, 0x010002FF, 0x01FB0202, 0xFC000001);
	r3 = D(r3, s1_0_2, 0x00030507, 0x06FE00FE, 0xEF0B060B, 0x07FC0112);
	r4 = D(r4, s1_0_2, 0xF7E6F405, 0xFDF4FC02, 0xFC1FFA00, 0x05FFFC01);
	r5 = D(r5, s1_0_2, 0x01010200, 0x000300FE, 0xFD060001, 0xFBFB0402);
	r6 = D(r6, s1_0_2, 0x0202FFFE, 0xFF050002, 0x0004FA03, 0xFFFB00FF);
	r7 = D(r7, s1_0_2, 0xA108F0F8, 0x09F2020A, 0x0DEC01F1, 0x01F00401);
	r0 = D(r0, s1_1_0, 0xEF10E6EE, 0xC7ED00F6, 0xCF110AF6, 0x06F0FFF6);
	r1 = D(r1, s1_1_0, 0x0304FE03, 0xF2F40B02, 0x03F90704, 0xFBFAF9FE);
	r2 = D(r2, s1_1_0, 0x09010201, 0xFBFEFFFD, 0x2504FB0D, 0x0A12030A);
	r3 = D(r3, s1_1_0, 0xF408FA03, 0x16071802, 0xF9FEF100, 0x06000002);
	r4 = D(r4, s1_1_0, 0x04EEF1FA, 0xEDF9DBF0, 0xF1FBE7F3, 0xFCDB0403);
	r5 = D(r5, s1_1_0, 0xFAEF02FC, 0x0C05FB03, 0xFD080305, 0x020107FF);
	r6 = D(r6, s1_1_0, 0x14DCFCEC, 0xF81F0708, 0x221A0505, 0xF5FA0000);
	r7 = D(r7, s1_1_0, 0xF60F10FC, 0x1F040505, 0x12FC04FE, 0x00040202);
	r0 = D(r0, s1_1_1, 0x05FF0307, 0x090EFB12, 0xFF1C03FB, 0xF318000C);
	r1 = D(r1, s1_1_1, 0xFCED00EE, 0xF901C4F6, 0xEBFAF2EE, 0x0706FAFD);
	r2 = D(r2, s1_1_1, 0xE90A080B, 0xEDF90512, 0x09D814ED, 0x02EEF3FC);
	r3 = D(r3, s1_1_1, 0x05EFF1E7, 0xD9141CDA, 0xD0F8F203, 0xE1F6FE02);
	r4 = D(r4, s1_1_1, 0xF31111EF, 0xF805EF0E, 0xFAF6C806, 0x010113F8);
	r5 = D(r5, s1_1_1, 0x08F2F9FB, 0xF9190020, 0x00EF00EB, 0xFA01000A);
	r6 = D(r6, s1_1_1, 0xF720FB0B, 0xFD0103EF, 0xF51907F8, 0x0508FDF9);
	r7 = D(r7, s1_1_1, 0xF91BE105, 0x09F30C01, 0x00120906, 0xF415000E);
	r0 = D(r0, s1_1_2, 0x03FAFC05, 0x010002FE, 0xF50F0A01, 0x02FDFFFD);
	r1 = D(r1, s1_1_2, 0xFCFF0C11, 0x03F3FD09, 0x03F3F211, 0x01F80C09);
	r2 = D(r2, s1_1_2, 0x05F5F6EF, 0xFFFE0106, 0x02FEEF08, 0x0301F9FD);
	r3 = D(r3, s1_1_2, 0xFC03E9FC, 0xF6181905, 0xF206CEFA, 0xFDFCE7EC);
	r4 = D(r4, s1_1_2, 0xF00CFF0C, 0x1123C5F0, 0xFA1CF315, 0x01FB0008);
	r5 = D(r5, s1_1_2, 0xFE030000, 0x02F70201, 0xFF0A03FE, 0x0003FE00);
	r6 = D(r6, s1_1_2, 0x01F90500, 0x01FF0106, 0xFD0A00FB, 0xFD08FE05);
	r7 = D(r7, s1_1_2, 0xDDEED8EE, 0xFD02F4FC, 0x00FCFAFC, 0x06FCCEEE);
	r0 = D(r0, s1_2_0, 0xF404E402, 0xE8F5FBFC, 0xF8FA0008, 0xF6F5FBFC);
	r1 = D(r1, s1_2_0, 0x02010002, 0x07030706, 0x02000504, 0x06000404);
	r2 = D(r2, s1_2_0, 0x04FF0001, 0x0500FF03, 0x09010005, 0xFF060100);
	r3 = D(r3, s1_2_0, 0x08FE0302, 0x06FD010B, 0x24F9110E, 0x03FEFF03);
	r4 = D(r4, s1_2_0, 0xFEFBF824, 0x81B63CE6, 0x2C0718FD, 0x060FFF04);
	r5 = D(r5, s1_2_0, 0x000202FF, 0x040500FD, 0x0702FD00, 0x0301FF03);
	r6 = D(r6, s1_2_0, 0xFBFC0400, 0xF704FD02, 0xF609FAFF, 0xFB02FF01);
	r7 = D(r7, s1_2_0, 0x03FF080A, 0x0202FD03, 0x07FB03FF, 0x06FD0003);
	r0 = D(r0, s1_2_1, 0x0300080B, 0x02060504, 0x07F8FAFC, 0xFD0A060B);
	r1 = D(r1, s1_2_1, 0x04FD0307, 0x0A050706, 0x0C000B0E, 0x05FE0007);
	r2 = D(r2, s1_2_1, 0xFD060001, 0xFF02FFFD, 0xFCFF0506, 0xFFFF0601);
	r3 = D(r3, s1_2_1, 0x02FF0603, 0xFCFF0C09, 0x0EF2FEF7, 0x08FF0605);
	r4 = D(r4, s1_2_1, 0xEB12F1E6, 0x90DCCFF5, 0xF412D108, 0x06E70505);
	r5 = D(r5, s1_2_1, 0xFF03FF06, 0xFB040204, 0xFEFAFF07, 0x02FDFBFB);
	r6 = D(r6, s1_2_1, 0xFE01FB01, 0x01FEF803, 0x04F705F6, 0x00FDFDFB);
	r7 = D(r7, s1_2_1, 0x1E131619, 0x00FB0101, 0xFE040005, 0x030400FC);
	r0 = D(r0, s1_2_2, 0x00FF01FE, 0xFF010507, 0x02FAFD01, 0xFFFF0002);
	r1 = D(r1, s1_2_2, 0xFF030302, 0xFE010002, 0xF90900FD, 0xFE020201);
	r2 = D(r2, s1_2_2, 0x00FE0500, 0x01FE0201, 0x000106FE, 0x00FF0102);
	r3 = D(r3, s1_2_2, 0x02FF0104, 0xFCFCFD10, 0x07F00004, 0xFCFE0508);
	r4 = D(r4, s1_2_2, 0x00FC1517, 0xD42535E7, 0x050507FB, 0x00000301);
	r5 = D(r5, s1_2_2, 0x02FD0001, 0xFE00FFFF, 0x00FE00FE, 0xFE030003);
	r6 = D(r6, s1_2_2, 0xFE020102, 0xFE010301, 0x0001FD06, 0xFFFEFC02);
	r7 = D(r7, s1_2_2, 0x0AECFBFA, 0x00020200, 0x00FF0208, 0xFFF80D0F);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FCF7FE, 0xFFFEFCF9, 0x0414FCFF, 0x01FD00FD);
	r1 = D(r1, s0_0_0, 0x0006FE01, 0x03FA0003, 0x00FE01FE, 0x060AFD01);
	r2 = D(r2, s0_0_0, 0x01FF0101, 0x0705FCF9, 0x0203FFFB, 0x0300FFFF);
	r3 = D(r3, s0_0_0, 0x000AFFFD, 0x0820F703, 0xFCFDFBFD, 0x0100FFFC);
	r4 = D(r4, s0_0_0, 0xFC040300, 0xFE14EE0C, 0x021BFDE2, 0x0302FB05);
	r5 = D(r5, s0_0_0, 0xFEF5FF00, 0x0004FFFF, 0xFFFE00FF, 0x00F50101);
	r6 = D(r6, s0_0_0, 0xFE01FEFC, 0x00FDFF00, 0x0101FE00, 0x0106FFFE);
	r7 = D(r7, s0_0_0, 0xFB090A01, 0x000202FB, 0xFD0002FC, 0x0201FF02);
	r0 = D(r0, s0_0_1, 0xFF0509FF, 0x010103FF, 0x0009FDFF, 0x00FF0500);
	r1 = D(r1, s0_0_1, 0xFDE1FD02, 0xFA0701FF, 0x0202FF03, 0xE1CAF8F4);
	r2 = D(r2, s0_0_1, 0xFDFDFFFC, 0xFB04F505, 0xF80AF205, 0xFB02FEFD);
	r3 = D(r3, s0_0_1, 0x010BF901, 0x000201F8, 0x0602FC00, 0xFB05FAFC);
	r4 = D(r4, s0_0_1, 0x000AFDF4, 0x0E05F3FC, 0xF1EEE302, 0x01FF06FA);
	r5 = D(r5, s0_0_1, 0xFDFE0304, 0x0400F7FF, 0xFC07FE00, 0xF80007FF);
	r6 = D(r6, s0_0_1, 0x02010000, 0x0101FD00, 0x0101FEFF, 0x000900FE);
	r7 = D(r7, s0_0_1, 0x05C6FE07, 0xEB07F3EC, 0xF70CEFFC, 0x0401F8F6);
	r0 = D(r0, s0_0_2, 0xFF030302, 0xFDFE0F00, 0x0105FE01, 0x02FCFFFE);
	r1 = D(r1, s0_0_2, 0xE8E202F0, 0x0701FFFF, 0xFD06F403, 0xF3F3EBFF);
	r2 = D(r2, s0_0_2, 0x0107FC01, 0x01030900, 0x03FF02FF, 0x020300FF);
	r3 = D(r3, s0_0_2, 0xFD07F8FB, 0x010802FC, 0x050DF402, 0x020E0700);
	r4 = D(r4, s0_0_2, 0x011402F2, 0x052000F2, 0xF514C9FB, 0x03FF0000);
	r5 = D(r5, s0_0_2, 0xFE00FFFF, 0x02FDF8FF, 0xFE05FCFD, 0x0302FBFB);
	r6 = D(r6, s0_0_2, 0x000106FF, 0x0100FFFF, 0x010001FC, 0x0101FBFE);
	r7 = D(r7, s0_0_2, 0xC964C79F, 0x090CF202, 0xFEFFE7FF, 0x070AF503);
	r0 = D(r0, s0_1_0, 0xEFDA0002, 0xFDFA03FB, 0xF0F304EF, 0xFDF801FB);
	r1 = D(r1, s0_1_0, 0x01FCFFFA, 0xFCEEFEE1, 0x00FEFBFF, 0x070100F9);
	r2 = D(r2, s0_1_0, 0x01FCFE00, 0xFAFD06FA, 0x03FB03F8, 0x01FBFEFC);
	r3 = D(r3, s0_1_0, 0xFCFAFFF9, 0xFCEDF7F3, 0x050308F1, 0x02FDFFFC);
	r4 = D(r4, s0_1_0, 0x04FD04FA, 0x200305EB, 0xDA1FFE08, 0xEB12E8F1);
	r5 = D(r5, s0_1_0, 0xF80504FF, 0xFAFFFEF8, 0xF801FFFD, 0xFFFC00F9);
	r6 = D(r6, s0_1_0, 0xF2020300, 0xFAF6FDF8, 0x01F9FBFB, 0xFE0402FC);
	r7 = D(r7, s0_1_0, 0xF80AF7FC, 0x0000FD01, 0x000306FE, 0xFC030500);
	r0 = D(r0, s0_1_1, 0xFDFD10FD, 0x0702F503, 0xFBF60AFA, 0xFBF70101);
	r1 = D(r1, s0_1_1, 0xEE0DF9E8, 0xE8F9DBEA, 0xEFEA01DF, 0xD7FEE0E5);
	r2 = D(r2, s0_1_1, 0xFBFFFFFA, 0xF5F804EB, 0xD90AF3E5, 0xF403FBEE);
	r3 = D(r3, s0_1_1, 0xBF0DF2E9, 0xCBEBF4EF, 0xA6F0EBBD, 0xF109FAF6);
	r4 = D(r4, s0_1_1, 0xB128E4C6, 0xF916FFD3, 0xC4C41404, 0xE81FD10D);
	r5 = D(r5, s0_1_1, 0xF40003F0, 0xF706EEFC, 0xEEFF02FD, 0xEDFDFCF5);
	r6 = D(r6, s0_1_1, 0x0305F604, 0xFEF6F8FD, 0xF3E801F7, 0xF3F806F9);
	r7 = D(r7, s0_1_1, 0xFDF60507, 0xE909FCF9, 0xF5FFF0F6, 0xEFFFF9F1);
	r0 = D(r0, s0_1_2, 0x010505FE, 0x01010700, 0x02FDF9F6, 0xFE0101FF);
	r1 = D(r1, s0_1_2, 0xFFFDEAEE, 0xFD02FEFF, 0xFF06F2F8, 0x0A0708F6);
	r2 = D(r2, s0_1_2, 0xFE04F9FA, 0xFCFBF4F9, 0x09FFDAFE, 0xFFFFFF01);
	r3 = D(r3, s0_1_2, 0x0601F8F8, 0xFDFFF3FA, 0xCFE8BFDA, 0xEA00DDF6);
	r4 = D(r4, s0_1_2, 0x0AF0E601, 0xF5FF0700, 0x120D27FA, 0xFFFEFDFC);
	r5 = D(r5, s0_1_2, 0x04FBF6FD, 0xFE05F5FE, 0xFDFD0202, 0xFFF7FD00);
	r6 = D(r6, s0_1_2, 0xFC00FFFE, 0x03FF0101, 0xFEF603FD, 0x0104FA02);
	r7 = D(r7, s0_1_2, 0x82381CD4, 0x03F9F1F9, 0x0B03DCEA, 0xEBF4F1EA);
	r0 = D(r0, s0_2_0, 0xF7FDF3FC, 0xFF0600F3, 0xFF0407FA, 0xFF04FFFA);
	r1 = D(r1, s0_2_0, 0xFBFF0200, 0xF4FDF8FD, 0x00FCFFFD, 0xFC0002FE);
	r2 = D(r2, s0_2_0, 0x00000000, 0xFE0104FF, 0xFC00FD01, 0x0600FEFF);
	r3 = D(r3, s0_2_0, 0x01FC03FF, 0x0D040BF7, 0xFAFFF706, 0xFE000300);
	r4 = D(r4, s0_2_0, 0xF20604E8, 0x812B2601, 0xEBFDEA00, 0x08F513EE);
	r5 = D(r5, s0_2_0, 0x02FD01FE, 0x03FDFEFC, 0xFB0000FD, 0xFD0000FD);
	r6 = D(r6, s0_2_0, 0xF20302FF, 0xF8FFFAFC, 0x04FDFBFD, 0xFF010101);
	r7 = D(r7, s0_2_0, 0xFAFD0602, 0xFFFF00FF, 0x03040200, 0xFF0201FE);
	r0 = D(r0, s0_2_1, 0x05FE1701, 0x04030403, 0xF703FBFE, 0x08FE0701);
	r1 = D(r1, s0_2_1, 0xFC0008FD, 0xFEFF0EFB, 0xF40301F6, 0xFCFE06FF);
	r2 = D(r2, s0_2_1, 0x0300FEF9, 0xFDFEFCFF, 0xFDFDF2F2, 0xFCFFFCFA);
	r3 = D(r3, s0_2_1, 0x06010FFD, 0xFAFD02DB, 0x0A1315F6, 0x090001FE);
	r4 = D(r4, s0_2_1, 0xDFD0DED3, 0x8122F0EE, 0x9CF2FE22, 0xF212E8E8);
	r5 = D(r5, s0_2_1, 0x06FEFEF9, 0x05FFEE00, 0xF10001FD, 0xFB0400FB);
	r6 = D(r6, s0_2_1, 0x030200FE, 0xFBFDFDFB, 0xF3FDFCF4, 0xFE0200FB);
	r7 = D(r7, s0_2_1, 0x01F90409, 0x0202F6FE, 0x0100FEFD, 0xFD01F7FF);
	r0 = D(r0, s0_2_2, 0xFF0204FD, 0x020018FD, 0x000704FC, 0xFD0106FE);
	r1 = D(r1, s0_2_2, 0xF8FC0A01, 0xFAFD0100, 0xFBFD0D04, 0xFB000600);
	r2 = D(r2, s0_2_2, 0x03FEFBFD, 0x03FF08FC, 0xFFFC0AF9, 0x02FFF9FE);
	r3 = D(r3, s0_2_2, 0x02FE0C01, 0xF5FEBED7, 0x110D01F6, 0x02FF0AF6);
	r4 = D(r4, s0_2_2, 0xF21D0EF6, 0xCFD23DCE, 0xFF0CBCEF, 0x0007F900);
	r5 = D(r5, s0_2_2, 0x03FFF8FE, 0xFF01FA00, 0xFF0005FD, 0xFFFD09FE);
	r6 = D(r6, s0_2_2, 0x000004FF, 0xFFFF06FF, 0x03FC07FF, 0x0102F8FF);
	r7 = D(r7, s0_2_2, 0xBB1CA49B, 0xFF0006FD, 0x0A00FDFB, 0x0605F8F4);
	r0 = D(r0, s1_0_0, 0x06FD0204, 0x0C28FCFA, 0xFBF60402, 0x0AF702FD);
	r1 = D(r1, s1_0_0, 0x02F9FBFB, 0xFC0C0301, 0x01FF0101, 0xFDDBFD03);
	r2 = D(r2, s1_0_0, 0x020E00FD, 0x02EB02FE, 0x0111FF05, 0xFEF200FF);
	r3 = D(r3, s1_0_0, 0xFF09F7FB, 0xFDFDFFFA, 0xF80EF101, 0xFBF40304);
	r4 = D(r4, s1_0_0, 0x10F10006, 0x0A10FC10, 0x20F90E02, 0x001B04FB);
	r5 = D(r5, s1_0_0, 0x01F70002, 0x00FDFF06, 0xFEF2FF04, 0xFEEDFCFF);
	r6 = D(r6, s1_0_0, 0x07FFFFFE, 0x000FFF01, 0x01000000, 0x0308FE00);
	r7 = D(r7, s1_0_0, 0x0981FC03, 0x0223F90B, 0x08E2FFFF, 0xFF0FFE03);
	r0 = D(r0, s1_0_1, 0xFAF90301, 0xF600FBFD, 0x01FC06FE, 0xF901F901);
	r1 = D(r1, s1_0_1, 0xF914FE0D, 0x04F7FD06, 0x04EE0303, 0x0408FE0D);
	r2 = D(r2, s1_0_1, 0x02F6FDFD, 0xFE03F502, 0x050B01FF, 0x0009FC01);
	r3 = D(r3, s1_0_1, 0xF30801FE, 0x05F50904, 0x0A10EB04, 0xFD10FB04);
	r4 = D(r4, s1_0_1, 0x0A0405FC, 0xF901EE00, 0xD0FAD417, 0xFDF8FE00);
	r5 = D(r5, s1_0_1, 0x0505F602, 0x01FEFF02, 0xFF050703, 0x0000F5F9);
	r6 = D(r6, s1_0_1, 0x0202F901, 0xFEFCFEFF, 0xFB040101, 0xFEFD0003);
	r7 = D(r7, s1_0_1, 0xE9E3F414, 0x0A110103, 0x0B1204FE, 0x02FEFF02);
	r0 = D(r0, s1_0_2, 0xFB00FAFF, 0x00FDFA01, 0xFF01FFFE, 0x02FE0202);
	r1 = D(r1, s1_0_2, 0x07010B0C, 0xFFFC0401, 0xFCFD0003, 0x00030A06);
	r2 = D(r2, s1_0_2, 0x00FF02FF, 0x01FDF7FD, 0xFCFDFDFF, 0xFFFE0101);
	r3 = D(r3, s1_0_2, 0xFA03FDFE, 0x00FDFCFB, 0xFD09F900, 0xFBFDFCF9);
	r4 = D(r4, s1_0_2, 0x0404FC06, 0xFBD10311, 0x0C0AF703, 0xFEFBF902);
	r5 = D(r5, s1_0_2, 0x01FF00FE, 0x01FF0100, 0xFB01FC01, 0x02020200);
	r6 = D(r6, s1_0_2, 0xFF00FEFE, 0x000100FE, 0xFD0101FF, 0x00000100);
	r7 = D(r7, s1_0_2, 0x1800FD0E, 0xFDF801FC, 0xF005FB02, 0xFBF502FD);
	r0 = D(r0, s1_1_0, 0xFEFBE908, 0x15F4F5FB, 0x01EEFB14, 0x10E7EEF7);
	r1 = D(r1, s1_1_0, 0x0819FC00, 0x09F900FB, 0x03810104, 0x0FF0FBF0);
	r2 = D(r2, s1_1_0, 0x00FE0001, 0xF7000601, 0xFB03FCFA, 0xFE100500);
	r3 = D(r3, s1_1_0, 0x11E9FE01, 0x07E80914, 0xFC81F7EF, 0x06FE0203);
	r4 = D(r4, s1_1_0, 0xFC3A0802, 0xF87FE612, 0x0E8101F6, 0x09ED0A02);
	r5 = D(r5, s1_1_0, 0x0414FCF1, 0xF8F80D13, 0x0CFEF500, 0x04F80303);
	r6 = D(r6, s1_1_0, 0x07FCEBFF, 0x040104FF, 0xFB040208, 0x0308FA03);
	r7 = D(r7, s1_1_0, 0x0BFA00FC, 0x02EE01D9, 0xFE13F7FF, 0xFDF2FF01);
	r0 = D(r0, s1_1_1, 0xFAF2F6FE, 0xF8E403F9, 0x000EFF0B, 0xF312040A);
	r1 = D(r1, s1_1_1, 0x0421F8E3, 0xF70108FC, 0x0307FCEF, 0xE5FE00D9);
	r2 = D(r2, s1_1_1, 0xF8EA12F5, 0x00FC1CE3, 0x13FA0DF2, 0x010605F2);
	r3 = D(r3, s1_1_1, 0x0AFFECFC, 0xFB1FDA18, 0x04F2FF0A, 0x0EF513EE);
	r4 = D(r4, s1_1_1, 0x10FA1306, 0xEF1F0E14, 0xE94DA2F6, 0xF41508FA);
	r5 = D(r5, s1_1_1, 0x00080A04, 0xFD07040A, 0x0F0203FF, 0xFD141AFC);
	r6 = D(r6, s1_1_1, 0x0CF7FFFF, 0x0008F801, 0x0404FF02, 0xFC0CF406);
	r7 = D(r7, s1_1_1, 0xD5E0EDD2, 0x070C03BC, 0x0F2308F3, 0x122606D6);
	r0 = D(r0, s1_1_2, 0xFBFFFE01, 0xF302FC01, 0x01FDF508, 0xFE0205FF);
	r1 = D(r1, s1_1_2, 0xE80B06EE, 0xFA03FF00, 0xF7010A02, 0xFDFF0002);
	r2 = D(r2, s1_1_2, 0x01FFF5FD, 0xF9040502, 0xF8FFF503, 0xFB04FB02);
	r3 = D(r3, s1_1_2, 0x0902F806, 0x0010E505, 0xFCF0F90F, 0x0712F901);
	r4 = D(r4, s1_1_2, 0xFA05F606, 0x140F0216, 0xFA03FA03, 0xFF03F900);
	r5 = D(r5, s1_1_2, 0x0302FA02, 0xFE020601, 0x04000003, 0x010000FD);
	r6 = D(r6, s1_1_2, 0xFC0500FF, 0x01FFFEFE, 0x0402FC01, 0x0301FE00);
	r7 = D(r7, s1_1_2, 0x16320C81, 0xFB0AF404, 0xFCFCEF01, 0xF31FEC07);
	r0 = D(r0, s1_2_0, 0x05EBE6F1, 0xFFFBFCF6, 0xFFF3FF04, 0x000103FF);
	r1 = D(r1, s1_2_0, 0x00EF05F6, 0xF5EE05DF, 0xFEF106F4, 0xFFFD01F4);
	r2 = D(r2, s1_2_0, 0x0006FF02, 0x0A01FA01, 0x0AFEFDF3, 0xFAF3FEF4);
	r3 = D(r3, s1_2_0, 0xF80301F4, 0xF0D6F6DB, 0x01F308E3, 0x06FBFEFE);
	r4 = D(r4, s1_2_0, 0xF7A9F906, 0xDD81B5CA, 0x0A811C8A, 0xFA12FFC2);
	r5 = D(r5, s1_2_0, 0xFAFE0101, 0x05F401FA, 0xFEFC020C, 0x0C04FE01);
	r6 = D(r6, s1_2_0, 0x0A07F800, 0xFE0406FA, 0x02FB03FA, 0x00040001);
	r7 = D(r7, s1_2_0, 0x02D60904, 0x0205FF04, 0xFB03FDFE, 0x0106FE01);
	r0 = D(r0, s1_2_1, 0xF8F7FFFB, 0xFEFEF206, 0x04F8FA02, 0xF8FDFF03);
	r1 = D(r1, s1_2_1, 0x00F701FC, 0x0C050AFA, 0xFE1607E1, 0x090E0B00);
	r2 = D(r2, s1_2_1, 0xFBF2FBF5, 0xFE07FD00, 0xF117F9E6, 0x010906FC);
	r3 = D(r3, s1_2_1, 0xF70705F7, 0x05FBFD81, 0xEF2803C4, 0xF704F8F1);
	r4 = D(r4, s1_2_1, 0xDE1BD4F2, 0x0F12B803, 0xEE2881F3, 0x0AFB0600);
	r5 = D(r5, s1_2_1, 0xFC050A01, 0x0101FE01, 0xF8FD0903, 0x05FE0002);
	r6 = D(r6, s1_2_1, 0x0000FA02, 0xFD0406FA, 0x0003FEFA, 0x0505F8FF);
	r7 = D(r7, s1_2_1, 0xF3AAD2C6, 0xF707FBFB, 0x06FFFFFD, 0xFFF902E3);
	r0 = D(r0, s1_2_2, 0xFE04FF01, 0xFDF9F7FA, 0xFD040200, 0xFE0100FF);
	r1 = D(r1, s1_2_2, 0x04FA0300, 0xFC00FA00, 0x00FBFF07, 0xFB00FEFF);
	r2 = D(r2, s1_2_2, 0x010507FE, 0x0400FEFF, 0x04FFFC01, 0xFE000000);
	r3 = D(r3, s1_2_2, 0x0100FD02, 0xFBEE0904, 0x0312EA03, 0x01F40407);
	r4 = D(r4, s1_2_2, 0x07F21002, 0x0A12B207, 0x0E0DFF03, 0xFE010601);
	r5 = D(r5, s1_2_2, 0xFD000500, 0x04FF0402, 0x00FFFEFD, 0x0100FC00);
	r6 = D(r6, s1_2_2, 0x03FCFE01, 0xFE020001, 0x03FCFDFE, 0x01FF0003);
	r7 = D(r7, s1_2_2, 0x121A1AD1, 0x03F90100, 0x0AF9FE01, 0x07F80501);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.716e-02, -1.646e-02, -1.181e-02, -1.729e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-8.143e-03, -6.919e-03, -1.156e-02, -1.016e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.509e-03, -2.402e-03, -5.669e-03, -2.307e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.086e-02, -9.400e-03, -1.724e-03, -6.300e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.323e-02, -3.404e-02, -7.608e-03, -1.108e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-7.496e-03, -9.125e-03, -4.441e-03, -4.510e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-4.992e-03, -2.082e-03, -4.593e-03, -7.650e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.503e-02, -4.058e-03, -1.062e-02, -6.061e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC [CuNNy_8x32_vk] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv8_pt;
			V4 sr0 = V4(conv8_gather(p, 0));
			V4 sg0 = V4(conv8_gather(p, 1));
			V4 sb0 = V4(conv8_gather(p, 2));
			V4 sa0 = V4(conv8_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv8_pt;
			V4 sr1 = V4(conv8_gather(p, 0));
			V4 sg1 = V4(conv8_gather(p, 1));
			V4 sb1 = V4(conv8_gather(p, 2));
			V4 sa1 = V4(conv8_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-3.001e-03, 1.110e-04, -1.471e-03, 3.346e-05, -6.234e-03, -1.001e-04, -4.883e-04, 3.363e-04, -6.619e-03, 2.615e-03, 1.779e-03, 2.424e-04, 6.354e-03, -3.309e-04, -3.888e-03, 1.374e-04) * s0_0_0;
	r0 += M4(1.802e-03, -9.111e-03, 4.876e-03, -3.293e-03, 1.426e-02, -1.032e-02, -5.655e-03, 1.880e-03, -1.427e-02, -1.518e-02, 1.106e-02, 5.444e-03, 6.958e-02, 3.357e-02, 1.297e-02, -4.254e-03) * s0_0_1;
	r0 += M4(-9.008e-02, 9.366e-02, -5.695e-03, 3.658e-04, -2.529e-03, -3.155e-03, 3.487e-04, 3.638e-03, -1.217e-03, -2.099e-02, 3.020e-03, 5.582e-03, -9.526e-03, -2.660e-02, -7.109e-03, 3.499e-03) * s0_0_2;
	r0 += M4(-3.992e-03, -2.426e-05, -4.530e-03, -3.235e-04, -1.035e-02, 2.406e-03, -8.243e-03, 2.282e-03, -8.048e-03, -3.239e-04, 5.485e-03, 2.347e-03, 2.518e-02, -4.469e-03, 2.154e-02, -3.802e-03) * s0_1_0;
	r0 += M4(-1.098e-02, -1.032e-02, -1.654e-02, -1.193e-02, 1.652e-01, -7.011e-02, 1.408e-01, -6.669e-02, 1.694e-01, 3.794e-02, -1.266e-01, -1.400e-02, -7.787e-02, 1.008e-01, 4.191e-02, 1.056e-01) * s0_1_1;
	r0 += M4(-1.149e-01, 8.569e-02, -1.733e-01, 2.009e-01, -2.067e-03, -5.482e-02, -6.188e-03, -4.963e-02, 8.487e-03, 9.473e-02, -1.381e-02, -1.121e-01, -1.534e-03, -6.219e-02, -9.126e-03, -1.132e-01) * s0_1_2;
	r0 += M4(-1.000e-03, -1.882e-04, -2.313e-03, 1.163e-04, -4.871e-03, -5.198e-06, -1.155e-02, 7.107e-04, -9.658e-04, 1.070e-03, -2.079e-03, -2.055e-03, 4.893e-03, 1.685e-04, 1.581e-02, -1.130e-03) * s0_2_0;
	r0 += M4(2.814e-04, -1.227e-04, -5.549e-04, -4.410e-03, -5.283e-03, 6.043e-04, 3.698e-02, -1.922e-02, -7.904e-03, -3.404e-03, 1.031e-02, 2.588e-04, 1.256e-02, -2.817e-03, -2.605e-02, 1.947e-02) * s0_2_1;
	r0 += M4(5.210e-03, -7.780e-04, -1.581e-02, 3.160e-03, -7.785e-04, 6.346e-03, 1.722e-03, -1.281e-02, -1.774e-03, -7.429e-03, 3.700e-03, 6.242e-03, 7.146e-05, -3.109e-03, -1.210e-03, -1.125e-02) * s0_2_2;
	r0 += M4(4.793e-03, 4.655e-03, -7.831e-04, 3.470e-04, 1.765e-03, -2.879e-03, -1.394e-03, 6.636e-05, -2.777e-02, -4.057e-03, 4.708e-03, -1.558e-04, 8.590e-04, 3.068e-04, 3.488e-04, -3.562e-05) * s1_0_0;
	r0 += M4(-2.300e-03, 1.049e-02, 1.529e-03, -1.764e-03, -1.431e-02, -2.076e-03, 1.014e-04, 1.485e-03, 3.605e-02, -1.587e-02, -1.083e-02, -8.092e-03, 6.207e-03, -9.712e-04, -2.613e-04, 1.403e-05) * s1_0_1;
	r0 += M4(1.752e-03, -9.525e-04, 1.393e-03, -1.938e-06, 4.900e-03, 3.358e-03, -2.442e-04, 2.554e-04, -3.236e-03, 5.172e-03, -3.754e-03, -6.152e-03, 1.829e-04, -1.112e-03, -1.595e-03, 1.433e-03) * s1_0_2;
	r0 += M4(1.779e-02, 1.943e-02, 2.336e-02, 1.524e-03, 4.215e-03, 1.045e-03, -2.529e-03, -1.216e-03, 9.189e-02, -1.924e-03, 2.679e-02, -1.167e-02, 3.286e-02, -7.995e-03, -8.482e-03, -1.556e-03) * s1_1_0;
	r0 += M4(2.047e-02, -9.416e-02, 1.485e-02, 1.880e-02, -2.646e-01, 6.860e-02, 1.831e-01, 3.821e-03, -5.906e-02, -1.931e-01, -2.657e-02, 2.246e-01, -4.363e-02, 1.004e-01, -6.438e-03, 3.429e-03) * s1_1_1;
	r0 += M4(-2.284e-03, 6.608e-03, -7.138e-04, 5.636e-03, 2.358e-02, -3.546e-02, -5.443e-04, 1.338e-02, 6.714e-03, 9.064e-03, -4.688e-04, -2.204e-02, -2.828e-03, -7.359e-03, 3.476e-03, -4.118e-03) * s1_1_2;
	r0 += M4(1.447e-01, 1.670e-02, -2.484e-01, 1.584e-02, -4.777e-04, -9.395e-05, -4.408e-03, -6.064e-04, 5.466e-03, 9.309e-03, -3.408e-02, -9.020e-03, 1.325e-02, -3.763e-03, 1.103e-02, 1.724e-03) * s1_2_0;
	r0 += M4(-8.582e-03, 2.421e-02, 3.811e-04, 6.812e-02, 7.656e-03, -1.047e-02, 3.438e-02, -5.863e-03, -4.375e-03, 1.096e-02, 1.655e-02, -3.158e-02, 1.419e-02, 1.276e-01, 6.992e-02, -3.043e-01) * s1_2_1;
	r0 += M4(-3.714e-05, 1.292e-03, 1.513e-03, -5.545e-03, -3.043e-03, -9.430e-03, -5.206e-03, 2.643e-02, -4.208e-04, 1.649e-03, 2.187e-03, -3.088e-03, -5.810e-04, -4.819e-03, -3.921e-03, 1.922e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(-2.580e-03, -4.661e-03, -4.018e-03, -1.215e-03, 3.679e-03, 1.769e-03, 2.289e-04, -5.723e-05, -2.629e-03, 1.432e-03, -4.600e-04, 1.776e-03, 1.383e-02, -1.969e-03, -7.456e-04, 1.639e-05) * s0_0_0;
	r0 += M4(-3.067e-03, 1.463e-02, -9.580e-04, 1.725e-03, -1.011e-03, 2.045e-03, -1.276e-04, -7.890e-06, -1.054e-03, 2.553e-04, -4.697e-03, -5.458e-04, 2.411e-02, 3.298e-02, 3.302e-03, -1.540e-03) * s0_0_1;
	r0 += M4(-5.237e-04, -2.770e-04, -1.504e-04, -4.779e-04, -1.834e-03, -1.615e-03, -8.423e-05, 4.980e-05, -1.340e-03, 6.940e-03, 5.964e-05, -3.871e-03, -7.055e-04, 3.294e-03, -1.788e-04, -3.398e-04) * s0_0_2;
	r0 += M4(-2.180e-01, 3.777e-03, 1.826e-02, -2.499e-02, 1.715e-02, 2.908e-03, 9.923e-03, 3.925e-03, 6.372e-02, 4.213e-03, -1.507e-02, 2.485e-05, -2.008e-02, 2.828e-03, -1.576e-02, -4.399e-03) * s0_1_0;
	r0 += M4(2.644e-02, 5.232e-02, 7.996e-03, 9.235e-02, 1.110e-01, 6.813e-02, -9.539e-03, 5.966e-03, 1.421e-01, -3.067e-01, 2.174e-02, 6.903e-02, 8.178e-02, -2.176e-01, 8.273e-02, -1.270e-02) * s0_1_1;
	r0 += M4(1.231e-03, 8.087e-03, 3.425e-04, 1.310e-03, -3.615e-03, 3.368e-02, -9.388e-04, -6.548e-03, 2.165e-03, 1.375e-03, 2.486e-04, 7.056e-03, -2.215e-03, 5.091e-02, 1.159e-04, 2.862e-02) * s0_1_2;
	r0 += M4(-8.214e-04, 2.605e-03, -7.788e-02, -3.423e-03, 7.598e-03, 4.023e-03, -4.337e-02, -2.548e-03, -2.402e-03, 9.453e-05, -4.897e-03, -2.697e-03, 5.219e-04, -2.786e-04, -1.138e-02, 3.088e-04) * s0_2_0;
	r0 += M4(2.077e-03, -2.497e-03, 5.784e-03, -2.826e-02, 6.476e-05, 9.578e-03, -6.648e-02, -1.918e-01, -9.971e-03, -1.445e-02, 1.318e-02, 2.441e-02, -2.701e-03, 4.323e-03, 3.914e-03, -4.636e-02) * s0_2_1;
	r0 += M4(4.422e-05, 4.709e-04, 2.291e-04, 1.974e-03, -7.207e-03, -1.021e-02, 6.682e-04, 2.724e-02, 4.486e-04, 1.927e-03, -2.730e-04, -1.568e-03, 1.405e-04, -4.256e-03, 3.782e-04, 1.019e-02) * s0_2_2;
	r0 += M4(4.987e-03, 1.279e-04, 1.901e-06, 1.005e-03, 1.857e-02, -1.917e-03, 7.435e-04, 4.336e-03, 1.122e-02, 7.084e-03, -4.404e-03, -3.159e-03, 1.144e-02, 1.366e-02, -4.456e-04, -6.836e-04) * s1_0_0;
	r0 += M4(1.323e-02, 9.558e-03, -1.350e-03, -2.932e-03, 1.309e-02, 2.921e-02, -2.033e-03, -5.628e-03, 3.234e-03, 2.729e-03, -1.866e-03, -1.676e-04, -4.381e-03, -3.725e-04, -1.268e-03, 1.185e-03) * s1_0_1;
	r0 += M4(2.367e-03, 6.581e-03, 7.668e-04, -9.865e-05, -3.684e-03, 9.714e-04, -5.712e-04, 2.050e-03, 3.247e-03, 8.301e-03, -2.975e-04, -1.264e-03, -1.208e-03, 1.421e-03, 5.576e-05, -2.002e-04) * s1_0_2;
	r0 += M4(-5.376e-02, 4.365e-03, 1.380e-02, -2.498e-03, 7.579e-02, 2.385e-02, -1.100e-01, -1.300e-02, -1.702e-01, -8.094e-02, 1.438e-01, 6.812e-02, -1.811e-01, 4.090e-02, 4.667e-02, -3.656e-02) * s1_1_0;
	r0 += M4(-1.241e-01, -1.873e-01, 4.315e-02, 6.189e-02, 6.275e-02, 1.259e-01, -5.939e-02, -1.654e-01, -9.594e-02, -1.738e-01, 9.985e-02, 1.669e-01, 1.932e-02, -1.469e-01, 1.613e-04, 8.715e-02) * s1_1_1;
	r0 += M4(-8.881e-05, -4.777e-03, 2.164e-03, 8.192e-05, -2.224e-03, -1.094e-03, -2.683e-03, 4.942e-03, -1.043e-02, -2.650e-02, 1.000e-02, 3.015e-02, -1.065e-03, 7.087e-03, -1.287e-03, -2.350e-03) * s1_1_2;
	r0 += M4(-6.395e-03, 2.465e-03, 4.333e-02, -4.186e-03, -1.727e-03, -1.335e-03, 1.016e-03, 3.509e-03, 4.237e-03, 4.539e-03, -2.314e-03, 6.095e-04, 1.053e-02, -7.859e-03, 1.085e-01, 5.105e-02) * s1_2_0;
	r0 += M4(-2.531e-02, -2.700e-02, 1.244e-01, 1.374e-01, -5.921e-03, -6.804e-03, 1.120e-02, -3.027e-03, 4.677e-03, 3.991e-04, 2.471e-04, 1.117e-02, 1.973e-02, 3.845e-02, -3.039e-02, 3.565e-03) * s1_2_1;
	r0 += M4(-1.195e-04, -4.279e-03, 1.050e-03, 3.442e-02, 3.356e-04, -3.145e-04, -3.397e-03, 7.845e-03, 2.001e-03, 2.832e-03, -5.698e-03, -1.063e-02, -9.293e-04, 2.550e-03, 1.068e-03, 2.967e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(5.678e-02, -1.440e-02, 5.892e-04, -1.314e-02, 1.683e-01, 1.255e-01, -1.741e-01, -1.369e-01, 1.537e-04, -7.351e-03, 1.644e-03, -2.432e-03, 6.463e-03, -1.434e-04, -1.710e-04, -3.742e-03) * s0_0_0;
	r0 += M4(-1.041e-01, -2.130e-02, -1.033e-01, 9.250e-02, 2.045e-01, 1.791e-01, -2.251e-01, -1.816e-01, -2.028e-01, 2.065e-01, -1.247e-01, 1.235e-01, 2.058e-02, -3.499e-02, 6.409e-03, 3.187e-03) * s0_0_1;
	r0 += M4(-1.705e-02, 6.871e-02, 4.222e-03, 4.675e-02, 1.616e-01, 2.332e-01, -1.722e-01, -2.491e-01, 7.671e-03, 1.124e-03, 3.602e-03, -5.012e-03, -8.153e-04, 3.057e-02, 8.384e-04, -1.119e-02) * s0_0_2;
	r0 += M4(-6.206e-04, 4.472e-03, 5.706e-02, 3.674e-03, -2.034e-03, -9.649e-04, -5.611e-03, -5.760e-03, -3.801e-03, -3.639e-03, -4.626e-03, -6.907e-03, -1.334e-02, -7.659e-04, 3.854e-03, -7.310e-03) * s0_1_0;
	r0 += M4(5.237e-02, -3.088e-03, 1.039e-01, -2.494e-01, -2.023e-02, -1.948e-02, 6.433e-02, 2.788e-02, -1.548e-01, 1.614e-01, -1.971e-01, 1.895e-01, 1.271e-01, 6.198e-03, -2.416e-01, 1.198e-01) * s0_1_1;
	r0 += M4(-2.900e-03, -5.754e-03, -1.238e-02, 2.541e-02, -3.621e-03, -1.762e-03, 1.041e-03, 3.055e-02, 5.532e-03, -2.405e-03, 9.113e-03, 2.407e-03, -1.510e-02, -5.367e-02, 1.594e-02, 4.823e-02) * s0_1_2;
	r0 += M4(-1.087e-03, 1.582e-03, -4.650e-03, -2.106e-03, -1.667e-04, 3.738e-04, 4.307e-05, -2.296e-04, 2.329e-03, -2.041e-03, 2.959e-03, -1.790e-03, -6.563e-04, 7.459e-04, -2.645e-04, 1.467e-05) * s0_2_0;
	r0 += M4(6.504e-04, -8.734e-04, -8.230e-03, 2.664e-03, 1.014e-03, 1.195e-04, 5.563e-03, 2.360e-03, -4.295e-02, 4.739e-02, -8.366e-02, 9.473e-02, -1.894e-03, 4.389e-03, 5.962e-03, -1.195e-02) * s0_2_1;
	r0 += M4(-2.137e-04, -1.457e-03, -9.360e-04, -6.179e-03, 1.188e-04, 1.691e-04, -1.104e-03, -8.908e-04, 6.761e-04, 4.392e-04, 5.079e-04, 1.576e-04, -8.641e-03, -1.670e-03, 1.119e-03, 2.672e-02) * s0_2_2;
	r0 += M4(8.977e-03, -2.624e-03, -1.195e-04, -1.127e-04, 5.536e-03, -1.080e-05, 5.726e-05, 5.016e-05, -7.164e-03, -4.398e-04, 3.118e-04, -1.576e-04, -7.935e-03, -2.017e-03, -1.142e-04, 3.681e-05) * s1_0_0;
	r0 += M4(2.865e-02, 3.516e-02, 9.857e-04, 1.739e-03, 3.622e-02, 2.887e-02, -4.892e-04, -1.921e-04, -1.097e-02, -1.530e-02, -2.304e-04, -6.395e-05, -8.576e-03, -1.152e-02, -1.753e-05, 4.991e-05) * s1_0_1;
	r0 += M4(1.998e-03, 4.683e-03, 8.251e-04, 1.475e-03, -3.244e-04, 9.979e-03, 6.061e-04, -1.642e-04, -6.989e-04, -2.865e-03, -3.401e-04, 3.963e-05, -6.408e-04, -2.788e-03, 1.083e-05, 1.010e-05) * s1_0_2;
	r0 += M4(6.891e-03, -6.560e-03, 1.899e-02, -4.247e-03, 1.010e-02, -4.521e-04, 1.505e-02, 3.876e-04, -2.971e-02, -9.306e-04, -2.313e-02, -1.961e-03, 5.212e-02, -1.071e-02, -1.984e-02, -4.818e-03) * s1_1_0;
	r0 += M4(-1.381e-01, -4.392e-02, 1.680e-02, 5.746e-02, 5.215e-02, 4.511e-02, 9.150e-02, 6.376e-02, -9.020e-02, -9.116e-02, -5.701e-02, -6.945e-02, 7.974e-02, 1.664e-01, -1.833e-03, -1.442e-02) * s1_1_1;
	r0 += M4(-8.687e-04, -5.606e-02, -2.305e-03, -1.509e-02, -1.171e-03, 1.474e-02, -2.595e-03, 2.752e-02, -3.604e-03, -2.777e-02, -4.100e-03, -2.045e-02, 3.254e-03, -4.991e-03, -2.114e-03, -5.124e-03) * s1_1_2;
	r0 += M4(1.672e-03, -3.923e-04, -9.339e-03, -3.483e-03, 2.455e-05, 6.470e-04, -6.055e-06, -3.373e-04, 5.808e-03, -2.948e-04, 2.044e-02, 8.313e-03, -1.868e-02, -5.803e-03, 3.845e-02, -4.669e-03) * s1_2_0;
	r0 += M4(7.945e-04, 1.292e-04, -7.215e-02, -4.892e-02, -1.195e-03, -1.749e-03, 5.638e-06, 1.928e-03, 1.717e-02, 1.935e-02, 4.667e-02, 7.570e-02, -8.002e-03, -4.675e-02, -7.934e-02, -2.501e-02) * s1_2_1;
	r0 += M4(4.019e-04, -4.147e-05, -5.105e-04, -2.741e-02, 7.422e-05, 3.342e-05, -5.156e-07, -1.515e-03, -1.991e-03, 1.184e-03, -5.532e-04, -1.893e-03, 2.744e-03, 4.070e-03, -1.317e-03, -3.160e-02) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-1.424e-03, 2.099e-04, 2.104e-03, -1.296e-03, -8.967e-04, 5.538e-04, -1.703e-03, -6.105e-05, -1.176e-02, 1.013e-03, 6.363e-03, -1.179e-03, 8.252e-03, 1.110e-03, -2.056e-04, -1.059e-04) * s0_0_0;
	r0 += M4(-2.272e-02, -4.094e-04, 4.174e-03, 1.313e-03, -7.001e-03, 9.139e-03, 5.611e-03, 5.552e-03, -4.968e-02, -6.665e-02, 3.379e-03, 1.535e-02, -5.188e-02, -1.521e-02, 2.053e-03, -8.322e-04) * s0_0_1;
	r0 += M4(2.356e-03, -2.228e-02, -4.938e-04, 1.593e-03, 1.319e-02, 4.334e-03, -1.592e-03, 7.078e-03, 1.097e-03, 1.617e-02, 6.589e-04, 6.486e-03, 6.275e-04, -1.764e-02, 1.342e-03, -1.968e-03) * s0_0_2;
	r0 += M4(-4.271e-03, 1.997e-04, -4.289e-03, -4.048e-04, 2.984e-03, -6.019e-04, 6.394e-03, 4.693e-04, -1.763e-02, 1.965e-04, -1.890e-02, 4.321e-03, 8.716e-02, -5.442e-03, 7.349e-02, -8.686e-04) * s0_1_0;
	r0 += M4(8.812e-02, 1.193e-02, 9.220e-03, 2.825e-02, -1.653e-02, -1.135e-02, -2.881e-01, 1.154e-02, 1.106e-01, 5.310e-02, 3.454e-02, -1.883e-01, -6.113e-02, 1.679e-01, -1.884e-01, 4.783e-02) * s0_1_1;
	r0 += M4(-1.690e-02, -1.168e-01, 3.426e-03, -1.096e-01, 1.637e-03, 4.389e-02, 2.895e-02, 4.665e-03, 1.455e-04, 4.136e-02, -6.334e-04, 5.383e-02, 2.324e-03, -3.568e-02, -2.125e-03, -4.428e-02) * s0_1_2;
	r0 += M4(-1.934e-04, 5.430e-04, -2.107e-03, 5.098e-04, 5.846e-05, 3.462e-04, -9.399e-04, -1.886e-04, -2.141e-03, 5.110e-05, 6.647e-03, 3.561e-03, -5.267e-03, -3.643e-03, 2.191e-02, -4.093e-03) * s0_2_0;
	r0 += M4(2.773e-03, -1.796e-03, 3.953e-02, -7.825e-04, -4.281e-03, -1.472e-03, 3.794e-02, 9.446e-03, -7.617e-03, -7.614e-03, 3.406e-02, 3.772e-02, -2.417e-03, -9.251e-03, 3.235e-02, 5.788e-02) * s0_2_1;
	r0 += M4(-1.548e-03, -3.564e-03, -1.278e-02, -6.751e-03, 1.073e-03, 3.379e-03, -1.523e-03, 2.333e-02, 4.202e-04, -2.788e-03, 6.476e-04, 1.201e-02, 4.073e-04, 3.892e-04, 5.056e-03, -4.164e-03) * s0_2_2;
	r0 += M4(5.414e-02, -6.563e-02, 2.210e-02, -1.866e-02, -1.988e-03, 3.426e-04, 4.642e-05, 1.839e-04, 1.184e-03, -1.052e-03, -1.095e-03, -2.933e-04, 7.340e-03, 2.720e-03, 2.658e-03, -8.245e-05) * s1_0_0;
	r0 += M4(-4.336e-04, 3.702e-03, 1.477e-03, 3.890e-03, 1.600e-03, -1.020e-03, -1.466e-04, -1.980e-04, 5.306e-04, 4.835e-03, 7.749e-04, 1.859e-03, -9.448e-04, -1.083e-02, 8.776e-04, 2.360e-04) * s1_0_1;
	r0 += M4(-9.929e-06, -6.691e-04, 3.612e-05, -4.658e-04, 1.473e-03, 6.460e-04, 2.065e-05, 3.369e-04, -3.087e-06, -3.200e-04, -4.363e-05, 1.688e-04, 4.847e-04, -2.127e-03, 1.139e-05, 2.501e-04) * s1_0_2;
	r0 += M4(1.654e-01, -1.554e-01, 1.333e-01, -1.314e-01, -2.875e-03, -5.661e-03, 7.558e-03, 2.011e-03, -6.999e-02, 9.505e-03, -1.019e-02, -4.637e-03, -2.382e-01, 1.179e-01, 2.871e-02, 4.477e-02) * s1_1_0;
	r0 += M4(-6.337e-03, -6.505e-05, -4.101e-03, -3.939e-03, 7.660e-03, 1.714e-02, -9.309e-03, -6.855e-03, -2.169e-02, 8.649e-02, 9.133e-04, 4.302e-03, -1.705e-02, 1.066e-01, -1.125e-02, -2.340e-02) * s1_1_1;
	r0 += M4(8.545e-05, -1.596e-03, 2.160e-05, -1.441e-03, -1.277e-03, 5.015e-04, 5.334e-04, 5.298e-03, -4.107e-04, -4.644e-03, 5.185e-05, -1.544e-03, 7.436e-04, -1.065e-02, 3.006e-05, -4.465e-03) * s1_1_2;
	r0 += M4(4.179e-02, -5.207e-02, 1.120e-01, -1.130e-01, 2.131e-03, -1.681e-03, 5.066e-02, 6.487e-03, -2.360e-02, 4.693e-03, -1.626e-01, 3.259e-02, 1.655e-02, -6.526e-04, 1.957e-02, 2.970e-02) * s1_2_0;
	r0 += M4(-2.210e-04, 2.387e-03, -2.205e-03, -1.591e-04, 3.274e-02, 4.726e-02, 1.433e-01, -3.701e-01, -9.858e-03, 4.866e-02, -3.271e-02, 1.738e-01, 1.246e-03, -7.040e-03, 2.054e-03, 4.598e-03) * s1_2_1;
	r0 += M4(1.439e-05, -1.002e-03, 5.201e-05, -1.655e-03, -4.077e-03, 8.329e-03, -6.714e-03, 1.010e-02, -3.997e-04, -8.865e-04, -1.676e-04, -1.936e-03, 5.534e-06, -6.068e-04, -8.491e-05, -1.842e-03) * s1_2_2;
	r0 += V4(-3.493e-09, -8.431e-09, -6.077e-09, -3.988e-09);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
