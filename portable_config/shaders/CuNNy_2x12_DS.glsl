// CuNNy 2x12 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC [CuNNy_2x12_DS] -in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-4.177e-03, 2.782e-04, -2.407e-01, 5.976e-02) * s0_0_0;
	r1 += V4(-1.885e-03, -1.588e-02, -4.580e-01, -2.081e-02) * s0_0_0;
	r2 += V4(5.112e-01, 2.276e-02, -4.680e-02, 2.362e-02) * s0_0_0;
	r0 += V4(1.241e-02, -6.005e-03, -4.364e-02, -6.332e-02) * s0_0_1;
	r1 += V4(-8.210e-01, -1.373e-01, -3.218e-01, 1.565e-01) * s0_0_1;
	r2 += V4(-2.744e-01, -1.848e-01, 3.640e-02, 2.210e-02) * s0_0_1;
	r0 += V4(-2.245e-03, -5.563e-04, 2.946e-01, -6.569e-01) * s0_0_2;
	r1 += V4(-4.590e-03, 7.832e-01, 2.223e-01, 3.038e-01) * s0_0_2;
	r2 += V4(1.100e-01, 3.972e-02, 2.216e-02, 1.633e-02) * s0_0_2;
	r0 += V4(8.565e-01, -3.760e-02, 1.630e-01, 2.534e-01) * s0_1_0;
	r1 += V4(-2.714e-03, 3.209e-02, -1.131e-01, 7.788e-02) * s0_1_0;
	r2 += V4(2.490e-02, -1.270e-01, 8.581e-02, -5.557e-02) * s0_1_0;
	r0 += V4(-8.265e-01, -8.192e-01, -6.582e-01, 8.388e-02) * s0_1_1;
	r1 += V4(8.135e-01, -6.080e-01, 6.434e-01, -9.108e-01) * s0_1_1;
	r2 += V4(2.657e-02, 1.027e+00, 5.506e-01, 1.372e-01) * s0_1_1;
	r0 += V4(-3.223e-02, -2.191e-02, 2.053e-03, 5.784e-02) * s0_1_2;
	r1 += V4(9.607e-03, -2.484e-02, 2.621e-02, 1.653e-01) * s0_1_2;
	r2 += V4(-3.385e-02, -6.021e-02, 1.759e-01, 4.241e-02) * s0_1_2;
	r0 += V4(2.386e-02, 2.085e-02, 4.605e-01, -9.923e-02) * s0_2_0;
	r1 += V4(3.670e-03, -2.370e-02, 2.310e-01, -2.618e-02) * s0_2_0;
	r2 += V4(-3.505e-02, 2.398e-02, 1.376e-02, 3.955e-01) * s0_2_0;
	r0 += V4(-4.407e-02, 8.336e-01, 3.135e-01, 2.568e-01) * s0_2_1;
	r1 += V4(1.303e-02, 5.560e-03, 1.205e-01, 3.549e-02) * s0_2_1;
	r2 += V4(3.098e-02, -1.732e-01, -5.879e-01, -8.847e-01) * s0_2_1;
	r0 += V4(2.196e-02, 3.825e-02, -2.929e-01, 9.124e-02) * s0_2_2;
	r1 += V4(-6.298e-03, -7.447e-03, -3.445e-01, 1.131e-01) * s0_2_2;
	r2 += V4(-1.203e-02, 3.067e-02, -2.369e-01, 2.718e-01) * s0_2_2;
	r0 += V4(-1.256e-03, 1.807e-02, -3.174e-03, -5.903e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.361e-03, -7.450e-04, -2.947e-03, 5.171e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.346e-02, 3.407e-02, 1.632e-02, 3.905e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12_DS] -conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.266e-01, -1.056e-01, -2.932e-02, 1.581e-03, 1.018e-01, -2.703e-01, -3.919e-02, -1.162e-01, -3.349e-01, 7.798e-03, 2.627e-02, -6.338e-02, -1.619e-01, 2.230e-02, -2.587e-02, -1.913e-01) * s0_0_0;
	r1 += M4(-2.317e-02, 1.071e-02, 3.031e-03, 1.285e-01, -1.651e-01, -2.579e-02, -1.148e-01, 1.171e-01, 4.835e-02, 1.526e-01, 3.338e-01, 3.754e-02, 2.150e-02, -4.226e-02, 1.862e-01, 1.140e-01) * s0_0_0;
	r2 += M4(-1.902e-02, -2.249e-02, -1.048e-02, -7.406e-02, 2.521e-01, 1.909e-01, 4.296e-01, 3.543e-01, 1.795e-01, 1.127e-01, 6.696e-02, -1.265e-01, 2.166e-02, -2.054e-02, 4.230e-02, 5.685e-02) * s0_0_0;
	r0 += M4(-3.881e-01, -2.160e-02, 6.553e-03, 4.504e-01, -2.170e-01, -7.858e-02, 7.437e-01, 6.069e-01, -1.636e-01, -8.034e-03, -4.180e-02, -1.684e-02, -1.888e-01, 9.194e-02, -4.800e-02, -2.591e-01) * s0_0_1;
	r1 += M4(1.753e-01, 3.663e-02, -1.056e-01, -2.062e-01, -7.538e-02, -2.847e-02, 1.818e-03, -7.481e-01, 3.852e-02, 1.540e-01, 4.106e-01, 4.742e-01, -2.251e-01, 7.391e-02, 8.190e-02, 4.329e-01) * s0_0_1;
	r2 += M4(-3.623e-03, -7.443e-02, -4.397e-01, -1.224e-01, -9.091e-01, -6.165e-01, -8.439e-01, -7.878e-01, 3.120e-02, 1.766e-01, 1.618e-01, -1.434e-01, 6.768e-02, 1.513e-01, 2.549e-01, -4.806e-02) * s0_0_1;
	r0 += M4(5.859e-02, -4.362e-02, 1.028e-01, 2.988e-01, 2.214e-01, -1.421e-01, -3.094e-01, -3.206e-02, -3.684e-01, -7.671e-03, -1.105e-01, 1.834e-01, -8.717e-02, 4.880e-02, -4.009e-03, 3.440e-02) * s0_0_2;
	r1 += M4(1.528e-01, -1.797e-01, 9.036e-05, -9.508e-01, 1.463e-01, -1.782e-01, -1.128e-01, 3.016e-01, 1.587e-01, 2.297e-01, 4.347e-01, 1.274e-01, 7.335e-02, 1.817e-02, 3.630e-02, -1.038e-01) * s0_0_2;
	r2 += M4(-4.211e-01, -1.861e-01, 1.943e-02, 4.548e-03, 6.309e-03, 7.461e-02, 5.539e-01, 5.205e-01, 1.943e-01, 1.500e-01, -1.304e-01, -3.089e-01, 6.871e-02, 2.502e-02, -2.445e-02, -9.688e-03) * s0_0_2;
	r0 += M4(-8.607e-02, 7.905e-03, -8.979e-02, 2.762e-01, 4.424e-01, 4.182e-01, 3.644e-02, -1.573e-01, -3.548e-01, -1.213e-01, 4.468e-04, -4.492e-01, 5.339e-02, 1.913e-01, 1.076e-02, -6.175e-01) * s0_1_0;
	r1 += M4(-5.652e-01, -7.158e-02, 5.763e-02, 1.328e-01, 2.082e-01, 2.354e-01, 2.576e-01, 1.991e-01, -1.386e-01, 2.080e-01, 1.107e-01, 1.383e-01, -3.992e-02, 4.711e-02, -2.821e-02, -2.222e-03) * s0_1_0;
	r2 += M4(-2.001e-01, -3.726e-02, -9.507e-02, -1.015e-01, 3.746e-01, 1.013e-01, -1.352e-01, -2.656e-01, 7.513e-02, 1.121e-01, 1.247e-01, -1.278e-02, 9.564e-02, 2.690e-02, 3.039e-01, 2.465e-02) * s0_1_0;
	r0 += M4(-8.272e-02, -5.409e-02, 3.811e-01, -5.288e-01, -1.000e+00, 9.025e-02, -3.789e-01, -1.000e+00, -6.961e-01, -1.103e-01, -5.570e-02, -1.363e-01, -1.428e-01, 8.864e-02, -1.224e-01, 5.090e-01) * s0_1_1;
	r1 += M4(-1.000e+00, 2.420e-01, -3.686e-01, 4.386e-01, -2.742e-02, 4.771e-01, 4.137e-01, 1.585e-01, -8.272e-02, 2.940e-01, 4.411e-01, -1.606e-01, 5.315e-02, -1.356e-01, 2.564e-01, 8.069e-02) * s0_1_1;
	r2 += M4(4.830e-01, 3.822e-01, -1.079e-01, 3.233e-01, -8.257e-01, 7.381e-01, 1.274e-01, -7.751e-01, 2.084e-01, -7.173e-02, -2.459e-01, -4.293e-01, -1.325e-01, -2.242e-01, 3.031e-01, -3.146e-01) * s0_1_1;
	r0 += M4(-2.143e-01, 4.412e-01, 3.090e-01, -9.666e-01, 4.207e-01, 4.377e-01, 2.277e-01, 2.009e-01, -5.992e-01, -1.267e-01, -1.563e-01, -4.347e-02, -1.082e-01, -6.899e-02, 1.615e-02, -9.939e-02) * s0_1_2;
	r1 += M4(-1.757e-01, 2.336e-01, -5.314e-01, -6.580e-01, -9.232e-02, -6.481e-02, -2.350e-01, 2.154e-01, 8.935e-02, 4.150e-01, 5.644e-01, 7.089e-01, 7.269e-03, 1.269e-01, 1.698e-01, 2.585e-01) * s0_1_2;
	r2 += M4(4.912e-02, 1.000e+00, 1.844e-01, 4.643e-01, 4.988e-01, -4.927e-01, -6.281e-02, 1.470e-01, 2.251e-01, 2.127e-01, 2.973e-02, -2.773e-01, 1.178e-01, 5.883e-02, 6.093e-02, -1.060e-01) * s0_1_2;
	r0 += M4(4.648e-02, 2.310e-01, -4.355e-02, 1.842e-01, 1.303e-01, 6.144e-01, 6.078e-02, -1.811e-02, -3.596e-01, -2.192e-01, -1.197e-02, 8.223e-02, 2.529e-01, -3.395e-01, -1.924e-01, 7.947e-01) * s0_2_0;
	r1 += M4(-5.619e-03, -2.283e-01, -9.497e-02, -2.171e-01, -2.083e-02, -2.183e-01, -8.670e-02, -2.814e-01, 1.714e-02, 2.007e-01, 1.480e-01, 1.736e-01, 4.239e-01, -4.733e-02, 2.185e-01, -1.648e-01) * s0_2_0;
	r2 += M4(-7.017e-02, -1.343e-01, -6.908e-02, 1.469e-01, -4.426e-03, 5.427e-03, 4.508e-02, 2.534e-01, -2.888e-02, 3.012e-02, -4.111e-02, -1.821e-01, -1.188e-01, -3.798e-02, -2.358e-01, -2.252e-01) * s0_2_0;
	r0 += M4(2.689e-01, 7.297e-02, 5.330e-02, -7.664e-01, 2.642e-01, 6.069e-04, 7.038e-02, 1.082e-01, -5.735e-01, -4.237e-01, 4.986e-03, -3.024e-01, -1.899e-01, -3.866e-02, 2.808e-02, -4.248e-01) * s0_2_1;
	r1 += M4(1.505e-01, -2.900e-01, -2.491e-01, -9.851e-02, 1.880e-01, 2.069e-03, -1.646e-01, 6.633e-02, -1.645e-01, 2.203e-01, 2.131e-01, 1.697e-01, -1.780e-01, -8.599e-02, 1.902e-01, -2.557e-01) * s0_2_1;
	r2 += M4(3.713e-02, -2.822e-01, 5.579e-02, 4.150e-01, 2.972e-02, -1.173e-02, -9.156e-02, 1.324e-01, -5.886e-02, 7.248e-02, -1.396e-02, -2.855e-01, -3.823e-02, -2.212e-01, -1.850e-01, -1.440e-01) * s0_2_1;
	r0 += M4(4.918e-02, -2.016e-01, -1.470e-01, -1.636e-02, 1.710e-01, -1.136e-01, 2.138e-03, 2.830e-02, -4.337e-01, -1.604e-01, -3.727e-02, -1.346e-01, 8.191e-02, -2.138e-02, -1.078e-01, 1.252e-01) * s0_2_2;
	r1 += M4(8.953e-02, -3.811e-01, -3.650e-01, 1.126e-01, 3.424e-02, -1.225e-01, -1.343e-01, 3.862e-02, -2.966e-03, 1.544e-01, 3.608e-01, 1.422e-01, -3.349e-02, -1.161e-02, 1.381e-01, 4.951e-02) * s0_2_2;
	r2 += M4(1.163e-01, -1.161e-01, 2.193e-01, 8.273e-02, 6.342e-02, -7.668e-02, 1.376e-02, -6.733e-02, -4.785e-02, 9.097e-02, 5.107e-02, -5.916e-02, -9.334e-02, 6.827e-03, 4.695e-02, 6.624e-02) * s0_2_2;
	r0 += M4(-2.091e-01, -9.023e-02, 8.081e-02, 5.356e-02, -1.106e-01, -8.483e-03, 6.269e-02, 7.189e-02, 2.686e-01, 3.902e-02, 4.379e-03, 2.920e-01, 1.021e-01, 3.098e-02, -1.324e-01, 2.279e-02) * s1_0_0;
	r1 += M4(3.613e-02, 1.822e-01, 3.282e-01, 4.998e-02, -1.133e-01, -1.159e-02, -6.616e-02, -1.559e-02, 3.014e-03, -4.195e-02, -1.658e-01, -1.438e-01, 1.646e-01, -6.276e-02, -9.749e-02, 1.811e-01) * s1_0_0;
	r2 += M4(-3.215e-02, 3.031e-02, -1.336e-01, -1.110e-01, -2.184e-01, -1.181e-01, 8.526e-02, -9.095e-02, -1.788e-02, -6.470e-02, -9.109e-02, 2.392e-02, 3.589e-01, 1.069e-01, 2.319e-01, -1.135e-01) * s1_0_0;
	r0 += M4(-3.857e-01, -9.522e-02, -6.002e-02, 2.602e-01, -1.872e-01, 1.341e-02, 6.796e-02, 1.507e-01, 4.721e-01, 7.703e-02, 5.071e-02, -3.040e-02, 4.934e-01, -6.290e-04, -5.086e-02, -1.409e-01) * s1_0_1;
	r1 += M4(8.385e-02, 8.632e-02, 2.226e-01, -3.818e-01, 1.135e-01, 4.759e-02, 2.428e-01, -4.795e-01, 2.134e-02, -2.177e-01, -3.819e-01, 7.188e-03, -9.059e-02, -3.553e-02, -2.436e-01, 8.277e-01) * s1_0_1;
	r2 += M4(-1.792e-01, 5.120e-02, -1.942e-01, -8.909e-02, -9.839e-02, -1.333e-01, -2.301e-01, -3.835e-03, 3.094e-02, -1.451e-01, 1.030e-02, 3.618e-01, 3.085e-01, 1.610e-01, 2.705e-01, -1.254e-01) * s1_0_1;
	r0 += M4(1.556e-01, -2.204e-01, 1.243e-01, 2.789e-01, 4.189e-01, -7.543e-02, -3.706e-02, 7.107e-02, 2.811e-01, 2.627e-01, 6.291e-02, -2.529e-01, -5.953e-01, 2.217e-02, 9.518e-02, -2.861e-01) * s1_0_2;
	r1 += M4(5.957e-02, 8.471e-02, 7.419e-02, 3.436e-02, 2.374e-02, -4.009e-02, 3.465e-02, 6.786e-02, -2.135e-03, -2.250e-01, -3.789e-01, -1.553e-01, -8.040e-02, 8.518e-03, -6.805e-02, -1.799e-01) * s1_0_2;
	r2 += M4(-1.791e-02, -5.910e-03, -1.488e-01, 1.024e-01, -1.101e-01, -3.389e-02, 5.607e-02, 2.595e-03, -1.559e-02, -1.077e-01, 1.435e-01, 2.011e-01, 1.870e-01, -2.401e-02, -4.575e-02, 4.495e-02) * s1_0_2;
	r0 += M4(-6.245e-01, -5.561e-02, 9.274e-02, 5.681e-01, -2.900e-01, -3.470e-01, -4.678e-02, 2.276e-01, 3.411e-01, 3.501e-02, 7.417e-02, -1.477e-01, 1.972e-02, 1.433e-01, -7.546e-03, -2.239e-01) * s1_1_0;
	r1 += M4(-6.044e-01, 1.758e-01, 1.850e-01, 5.151e-01, -3.162e-01, 1.587e-01, 3.771e-01, 1.479e-01, 1.830e-02, -6.488e-02, -9.300e-02, -1.880e-01, -4.255e-01, -2.745e-01, -1.793e-01, -1.228e-01) * s1_1_0;
	r2 += M4(-5.605e-01, -1.777e-01, -4.697e-01, -8.450e-01, 3.187e-02, -2.269e-02, -9.452e-02, -2.258e-01, 3.093e-02, 1.073e-01, -1.340e-02, 2.276e-01, 6.205e-02, -1.987e-01, 1.694e-01, 3.666e-01) * s1_1_0;
	r0 += M4(-5.724e-01, 1.226e-02, -4.440e-01, -6.098e-01, 2.737e-01, 1.157e-01, 6.268e-01, -6.787e-01, 4.378e-01, -6.855e-02, 1.263e-01, 3.716e-01, -1.073e-01, -2.920e-01, -4.471e-01, 1.985e-01) * s1_1_1;
	r1 += M4(-4.863e-01, 5.138e-01, -1.975e-01, -6.802e-02, -2.587e-01, 4.119e-01, 2.404e-01, 5.936e-01, 2.882e-01, -1.831e-01, -7.459e-01, -3.375e-01, 4.541e-01, -3.079e-01, 2.784e-01, -5.264e-01) * s1_1_1;
	r2 += M4(7.659e-01, 8.767e-01, 2.040e-01, 1.000e+00, 2.358e-01, 3.711e-01, -1.859e-01, 4.946e-01, -4.272e-01, -1.415e-01, -1.230e-01, 3.844e-01, -1.421e-01, -3.386e-01, -4.572e-01, -7.468e-01) * s1_1_1;
	r0 += M4(8.272e-01, 8.874e-02, 2.998e-01, -1.119e-01, 1.914e-01, 5.804e-02, -1.587e-01, -4.273e-02, 4.255e-01, 2.042e-01, 8.894e-02, -5.983e-03, 1.234e-01, -4.740e-03, 1.579e-01, 1.923e-01) * s1_1_2;
	r1 += M4(4.529e-02, 1.058e-01, 2.511e-02, -1.000e+00, 1.282e-01, -6.284e-02, 1.647e-01, -4.247e-01, 5.124e-02, -1.988e-01, -4.602e-01, -4.814e-01, -1.479e-01, -1.173e-01, -2.189e-01, 7.218e-01) * s1_1_2;
	r2 += M4(8.178e-02, -2.222e-01, -6.901e-01, -4.443e-01, 4.819e-02, 1.219e-01, -8.696e-02, -1.025e-01, -3.334e-02, -2.081e-01, -3.627e-02, 1.685e-02, 3.660e-03, -2.465e-01, -1.733e-01, -2.154e-01) * s1_1_2;
	r0 += M4(-2.239e-01, 1.413e-01, -2.260e-02, 3.674e-01, -5.241e-01, 6.392e-01, -5.669e-03, -3.186e-01, 2.515e-01, 1.163e-01, 5.357e-03, -4.005e-02, -6.797e-02, -4.561e-01, 9.096e-02, 3.010e-01) * s1_2_0;
	r1 += M4(-6.842e-01, -3.455e-01, -2.846e-01, 3.935e-02, -3.818e-01, -4.536e-01, -3.958e-02, -4.773e-02, 1.626e-01, -9.005e-02, -3.039e-01, 2.724e-02, 1.788e-03, 2.920e-01, 3.204e-01, 1.107e-01) * s1_2_0;
	r2 += M4(-3.707e-01, -1.183e-01, 6.324e-02, 1.552e-01, -1.870e-01, 1.463e-01, 2.529e-01, -7.789e-02, 6.487e-02, -1.935e-02, 1.017e-01, 1.502e-01, 7.244e-02, 8.384e-02, 1.636e-01, 1.179e-01) * s1_2_0;
	r0 += M4(5.955e-01, 7.152e-01, 6.303e-01, -1.000e+00, -2.102e-01, 2.008e-01, 3.057e-01, -1.000e+00, 5.523e-01, 3.797e-02, 5.040e-02, 3.666e-01, -8.796e-02, -2.330e-01, 1.382e-01, -2.789e-01) * s1_2_1;
	r1 += M4(-8.895e-01, -7.589e-02, -9.235e-01, 1.850e-01, 3.135e-01, 2.249e-01, 1.577e-02, -7.919e-02, 7.834e-02, -2.705e-01, -5.613e-01, -1.551e-01, -1.499e-01, 3.512e-01, 1.655e-01, 8.445e-02) * s1_2_1;
	r2 += M4(1.000e+00, -4.560e-01, 4.808e-01, 1.000e+00, 9.737e-02, 3.315e-01, 5.051e-01, -2.688e-02, 1.112e-02, 1.116e-02, 6.621e-02, -1.441e-01, -2.383e-01, 2.862e-01, -1.077e-01, 1.998e-01) * s1_2_1;
	r0 += M4(-4.033e-01, -2.083e-01, -1.598e-01, -3.437e-01, -3.140e-01, 9.435e-03, -5.234e-02, -9.696e-02, 5.335e-01, -1.013e-01, 5.549e-02, 1.494e-01, -7.399e-03, -4.892e-02, 1.538e-01, 2.805e-01) * s1_2_2;
	r1 += M4(3.095e-01, 2.143e-01, -9.000e-02, -4.787e-01, 8.519e-02, -5.230e-02, 7.281e-02, -2.741e-02, 1.495e-01, -2.127e-01, -6.257e-01, -1.675e-01, -3.685e-02, 8.699e-02, -6.676e-02, -2.839e-02) * s1_2_2;
	r2 += M4(-5.467e-01, 8.731e-01, 2.222e-01, -4.231e-01, 4.047e-02, -2.082e-02, -1.640e-02, -2.036e-01, -1.442e-02, -1.216e-01, -3.682e-02, 8.459e-02, -9.417e-02, 2.987e-02, 1.247e-02, 5.093e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(7.030e-02, 8.626e-02, 5.735e-02, 1.020e-01, -2.373e-01, -6.055e-02, -1.725e-01, -1.189e-03, 5.684e-01, -6.212e-02, -5.695e-02, 4.962e-02, -3.033e-03, 1.344e-01, 9.469e-02, -3.965e-01) * s0_0_0;
	r1 += M4(6.392e-02, 5.953e-03, -2.089e-02, -8.429e-02, -4.062e-01, -7.333e-02, -4.678e-01, 7.374e-02, 9.043e-02, -7.041e-03, -5.565e-02, -2.828e-01, 1.000e+00, 1.188e-02, -1.162e-02, 1.064e-03) * s0_0_0;
	r2 += M4(6.573e-02, -2.115e-02, -4.271e-02, 5.456e-02, -7.192e-02, 4.731e-02, 2.459e-01, -1.392e-01, -7.813e-02, -6.737e-03, -1.638e-01, 4.002e-01, 4.424e-01, 2.472e-02, 2.512e-01, -1.108e-01) * s0_0_0;
	r0 += M4(6.031e-02, -1.019e-01, 7.544e-02, 2.738e-01, 3.489e-01, 1.333e-01, 5.141e-02, -3.857e-01, 2.911e-01, 2.052e-01, -1.375e-01, 4.172e-01, -3.834e-01, 3.988e-02, -1.081e-01, 1.197e-01) * s0_0_1;
	r1 += M4(-1.219e-01, 1.176e-01, 6.596e-02, 1.038e-01, -3.794e-01, 4.831e-01, -5.679e-01, 1.935e-01, -5.329e-02, 2.110e-01, 1.271e-01, 1.031e-01, 2.784e-01, -2.255e-01, 5.221e-01, -5.176e-01) * s0_0_1;
	r2 += M4(-1.481e-01, -4.623e-02, -7.071e-02, 5.616e-02, 9.180e-01, 2.079e-01, -5.940e-01, 1.608e-01, 1.000e+00, 1.248e-01, 1.487e-01, 8.367e-03, -3.791e-01, -2.381e-01, 2.853e-01, -6.082e-01) * s0_0_1;
	r0 += M4(-2.535e-01, -1.740e-02, 2.744e-02, 3.070e-02, 1.179e-01, 1.462e-01, -2.059e-01, -2.664e-02, -1.000e+00, -1.309e-01, 2.105e-01, 4.269e-01, -2.824e-01, 8.066e-02, 1.020e-01, -1.230e-01) * s0_0_2;
	r1 += M4(-1.939e-02, 1.046e-01, 1.086e-01, -4.252e-01, 1.890e-01, -6.697e-02, 1.558e-01, -6.364e-01, -2.223e-01, 1.435e-01, -1.107e-01, -3.626e-02, -3.290e-02, 5.745e-02, -1.349e-01, -2.752e-01) * s0_0_2;
	r2 += M4(3.567e-02, 4.352e-02, -3.493e-01, 3.314e-01, -6.927e-02, -2.407e-01, 9.595e-02, -4.688e-01, -4.481e-01, 2.255e-02, 1.058e-01, 2.455e-01, -1.204e-01, 1.171e-01, 3.458e-01, 5.535e-01) * s0_0_2;
	r0 += M4(3.821e-01, 1.999e-01, 2.125e-02, -3.811e-02, 2.451e-01, -1.899e-01, -5.552e-02, -7.257e-02, 6.468e-02, 1.282e-02, -6.620e-02, -1.278e-01, 2.495e-01, -7.903e-01, 7.527e-02, -1.749e-01) * s0_1_0;
	r1 += M4(-1.874e-01, -9.537e-02, -1.613e-01, -2.098e-01, 7.400e-01, -1.614e-01, -4.597e-01, -2.893e-01, 5.215e-01, 2.949e-01, 5.450e-02, -2.127e-01, -3.709e-01, 6.980e-02, 9.381e-02, 2.163e-01) * s0_1_0;
	r2 += M4(6.062e-02, 1.149e-01, 6.357e-02, 1.071e-01, -7.937e-02, -3.143e-01, -9.038e-02, 2.278e-01, -3.330e-01, 1.460e-01, -5.501e-04, 1.977e-01, 1.353e-01, 7.053e-02, 8.012e-02, -2.531e-01) * s0_1_0;
	r0 += M4(6.320e-04, -5.953e-02, 2.819e-01, -1.564e-01, -8.913e-01, -6.013e-01, -5.524e-01, -3.002e-01, 4.817e-01, -2.000e-01, 2.348e-01, 7.989e-01, -1.756e-01, 1.953e-01, 2.358e-01, 1.811e-01) * s0_1_1;
	r1 += M4(-2.642e-01, 1.188e-01, 1.540e-01, 2.366e-01, 2.244e-01, -4.705e-01, 1.000e+00, -1.409e-01, 2.044e-01, -3.832e-01, 1.186e-01, -1.411e-01, -3.863e-01, 2.979e-01, 2.884e-01, 9.196e-02) * s0_1_1;
	r2 += M4(3.026e-01, -1.414e-01, -4.335e-01, -3.304e-01, -4.450e-01, 1.812e-01, 1.000e+00, -4.147e-01, 5.536e-02, -3.877e-01, -3.169e-01, 5.332e-01, 7.370e-02, 4.241e-01, -4.856e-02, -2.483e-01) * s0_1_1;
	r0 += M4(-1.768e-01, 9.595e-02, -1.488e-02, -4.061e-01, 8.284e-02, 1.687e-01, 3.591e-01, -1.636e-01, -3.036e-01, -7.012e-02, 7.830e-02, 3.030e-02, 4.551e-02, -1.380e-01, -1.453e-01, -2.357e-01) * s0_1_2;
	r1 += M4(-8.395e-02, -2.885e-02, 7.816e-03, 1.000e+00, -3.757e-01, -9.553e-02, -2.471e-01, 4.433e-01, -2.109e-01, 2.209e-01, 9.449e-02, 2.603e-01, -5.687e-02, 1.597e-01, 1.194e-02, 8.478e-02) * s0_1_2;
	r2 += M4(1.391e-01, 1.583e-01, 4.137e-01, -2.113e-01, -8.711e-02, -1.859e-01, 3.158e-02, -2.199e-01, 4.522e-02, 3.032e-01, -7.415e-02, 1.113e-01, 6.915e-02, 2.036e-01, -7.509e-02, -2.476e-01) * s0_1_2;
	r0 += M4(2.646e-01, 6.701e-03, -4.897e-02, 9.137e-02, 1.073e-01, 3.082e-02, 1.037e-01, 4.717e-01, 2.610e-02, -1.806e-02, -3.034e-02, 1.606e-01, -8.858e-03, -6.309e-02, 2.936e-03, -5.144e-02) * s0_2_0;
	r1 += M4(2.582e-01, -1.315e-01, -3.743e-01, -1.436e-01, 7.602e-02, 1.022e-01, 4.177e-01, -8.325e-02, 8.068e-02, -6.721e-02, -2.281e-01, 9.789e-02, 9.348e-02, -9.790e-02, -3.447e-02, -7.009e-02) * s0_2_0;
	r2 += M4(-1.718e-01, -4.674e-02, 1.003e-01, 1.491e-01, -1.927e-01, 2.426e-01, 5.466e-02, 1.025e-01, 9.839e-02, -2.299e-02, -3.556e-02, -1.675e-01, -2.573e-02, -7.595e-02, -9.643e-02, 1.169e-01) * s0_2_0;
	r0 += M4(1.951e-01, -4.187e-02, -1.180e-01, -6.032e-01, -6.582e-02, 4.935e-01, 6.230e-01, 4.454e-01, 2.424e-01, -8.177e-02, -6.350e-03, -3.584e-01, 3.556e-02, -1.491e-01, 2.017e-02, -6.456e-02) * s0_2_1;
	r1 += M4(-2.432e-02, -2.279e-01, -2.111e-01, 4.266e-01, 1.816e-01, 5.445e-01, 3.039e-01, -6.701e-02, -2.456e-01, -1.957e-03, -1.460e-03, -2.091e-01, 1.408e-01, -1.032e-01, -5.456e-02, 1.263e-01) * s0_2_1;
	r2 += M4(-2.045e-02, 3.073e-02, -3.340e-02, 2.114e-01, -5.836e-02, 1.509e-01, -4.748e-01, 4.404e-02, -5.246e-02, -1.360e-02, 5.037e-02, -7.283e-02, 1.608e-01, -2.882e-02, -3.286e-02, 3.389e-02) * s0_2_1;
	r0 += M4(2.338e-02, 1.711e-01, -7.508e-01, 5.461e-01, -7.863e-02, -3.680e-01, 1.153e-01, 9.690e-02, -2.602e-01, 1.732e-01, -5.717e-02, 5.473e-02, 5.183e-02, -1.801e-02, -5.897e-02, 1.871e-01) * s0_2_2;
	r1 += M4(1.760e-01, -2.069e-01, 6.942e-01, -1.589e-01, -7.858e-02, -2.976e-02, -1.850e-01, 8.157e-02, 7.302e-02, 2.388e-02, 1.135e-01, 1.175e-01, 9.735e-02, 5.324e-02, 2.620e-02, 1.057e-02) * s0_2_2;
	r2 += M4(-1.342e-01, -1.150e-01, 4.185e-01, -1.653e-02, 5.489e-02, -5.192e-02, -2.422e-01, 4.325e-01, -3.695e-02, -3.934e-02, 6.714e-02, 9.917e-02, 4.821e-02, 7.007e-02, 5.380e-03, -1.184e-01) * s0_2_2;
	r0 += V4(1.946e-02, -1.492e-03, -1.172e-02, 2.164e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.839e-02, -2.168e-02, -3.579e-02, 2.007e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-8.042e-03, -2.441e-02, -3.813e-02, -3.926e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12_DS] -conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-4.422e-02, -2.414e-02, -6.948e-03, -1.753e-01, -3.861e-02, 2.468e-02, 2.482e-02, 1.804e-02, 1.027e-01, 3.430e-03, 1.116e-02, 9.793e-02, -7.888e-02, -1.128e-02, -1.778e-03, 1.596e-03) * s0_0_0;
	r1 += M4(3.544e-02, -1.130e-01, -2.416e-02, 4.021e-02, -6.855e-02, 3.916e-02, 3.869e-02, -5.439e-02, 1.100e-01, 1.155e-01, 3.506e-02, 1.207e-01, -5.354e-03, 3.361e-03, 6.260e-02, -2.206e-03) * s0_0_0;
	r2 += M4(-7.401e-02, -2.975e-01, 9.535e-02, 3.681e-02, -1.947e-02, -1.970e-01, 2.716e-02, 3.140e-02, 1.758e-02, 3.834e-01, -3.588e-02, 7.414e-03, -1.278e-01, -3.592e-01, -6.948e-03, 9.966e-03) * s0_0_0;
	r0 += M4(-7.862e-02, -2.327e-02, -3.515e-03, -2.343e-01, -6.093e-02, -8.960e-02, 9.547e-02, 1.784e-01, -5.310e-02, 5.719e-02, 1.239e-02, -4.659e-02, -1.327e-01, -9.129e-02, -5.747e-02, -9.904e-02) * s0_0_1;
	r1 += M4(-5.936e-05, 8.574e-02, 1.013e-02, 1.948e-02, 6.599e-02, 2.321e-01, 1.653e-01, -4.228e-02, -9.955e-02, -1.719e-01, -4.754e-02, -1.765e-02, -1.495e-01, -2.495e-01, -1.201e-01, -1.058e-01) * s0_0_1;
	r2 += M4(-1.646e-01, -6.569e-03, 1.084e-01, 1.032e-01, -2.080e-01, 1.494e-01, -7.203e-02, 9.980e-04, 8.087e-02, -2.632e-01, -7.714e-02, 2.553e-02, -1.606e-01, -7.580e-02, -1.259e-01, -1.501e-02) * s0_0_1;
	r0 += M4(-1.681e-02, -3.176e-02, -1.490e-02, -1.425e-01, -1.477e-01, 2.242e-01, 1.649e-01, 1.646e-01, 6.898e-02, 5.216e-04, -2.282e-02, -2.383e-02, 2.612e-02, -8.296e-02, -1.458e-02, -1.085e-01) * s0_0_2;
	r1 += M4(5.480e-02, -1.843e-01, 6.841e-02, -1.385e-02, -4.245e-03, -2.791e-01, -6.673e-02, -9.248e-03, 1.333e-01, 2.018e-01, 1.169e-01, 4.752e-02, -3.214e-01, -4.942e-01, -1.168e-01, -1.255e-01) * s0_0_2;
	r2 += M4(-1.640e-01, -6.238e-02, -5.757e-02, -3.049e-03, 5.047e-02, -8.873e-02, -3.544e-02, -1.444e-01, 4.252e-02, 7.544e-02, -1.883e-03, 5.506e-03, 1.681e-02, -3.651e-02, -3.560e-02, -5.614e-02) * s0_0_2;
	r0 += M4(-8.393e-02, -1.053e-03, 3.784e-02, -8.570e-02, -9.650e-02, 7.788e-02, 3.495e-02, -5.980e-02, 3.577e-02, 7.106e-02, 3.642e-02, 7.963e-02, -3.296e-01, -1.211e-01, -9.408e-02, -2.109e-01) * s0_1_0;
	r1 += M4(-6.558e-02, -2.273e-01, -1.792e-01, 1.918e-02, -1.896e-02, 2.977e-02, -5.122e-02, -1.676e-02, -2.174e-02, -3.416e-02, 8.422e-02, -1.263e-01, -8.462e-02, -1.329e-01, -9.779e-02, -1.021e-01) * s0_1_0;
	r2 += M4(8.498e-02, -3.071e-01, -3.218e-01, -2.764e-01, -1.431e-02, -3.383e-01, 1.343e-01, 2.854e-01, 1.590e-01, 8.324e-01, 3.045e-02, -2.875e-01, -3.322e-01, -3.619e-01, -7.938e-02, -6.114e-02) * s0_1_0;
	r0 += M4(6.910e-02, 7.944e-02, -2.776e-02, 1.353e-01, -1.003e-01, 7.424e-02, 1.175e-01, 3.575e-02, 2.930e-01, 6.129e-01, -5.527e-02, 6.043e-02, -3.293e-01, -2.702e-01, -3.158e-01, -2.784e-01) * s0_1_1;
	r1 += M4(4.962e-01, 3.366e-01, 4.217e-01, 1.301e-01, -5.259e-02, 4.984e-02, 6.146e-02, -2.125e-02, 4.507e-02, 3.816e-01, -2.790e-01, 4.341e-01, -8.338e-01, -8.769e-01, -3.232e-01, -2.542e-01) * s0_1_1;
	r2 += M4(-2.048e-01, 2.486e-01, -3.115e-01, -3.310e-01, -2.861e-01, 1.418e-01, 4.989e-01, 5.898e-01, 5.506e-01, -3.776e-01, 1.529e-01, -1.685e-01, -3.687e-01, 1.232e-01, -1.702e-01, -1.820e-01) * s0_1_1;
	r0 += M4(-5.980e-02, 2.298e-03, -2.242e-02, -3.626e-02, 4.739e-02, 1.212e-01, -1.286e-02, 2.354e-01, -2.287e-02, -4.811e-02, 5.218e-02, 4.951e-02, -2.788e-01, 1.268e-02, 3.279e-02, -1.161e-01) * s0_1_2;
	r1 += M4(-7.926e-02, -1.627e-01, -2.172e-02, -4.408e-03, -5.941e-02, -2.151e-01, 2.060e-02, -1.285e-02, -1.015e-01, -8.158e-02, 6.211e-02, -8.617e-02, -3.453e-02, -4.600e-01, -3.604e-01, -1.265e-01) * s0_1_2;
	r2 += M4(-1.089e-01, -7.254e-02, -7.643e-02, -9.360e-02, -5.014e-02, 3.394e-02, 3.862e-01, 3.758e-01, -9.155e-02, -6.524e-02, 4.522e-02, 3.088e-02, -2.163e-01, 1.595e-02, -3.232e-01, -1.771e-01) * s0_1_2;
	r0 += M4(-9.393e-02, 7.251e-02, 7.486e-03, -9.576e-02, -3.046e-02, -2.057e-02, -1.106e-02, 1.229e-02, 4.010e-02, 4.383e-02, -6.465e-02, -5.737e-02, 1.255e-01, 2.101e-02, -1.560e-02, 1.311e-01) * s0_2_0;
	r1 += M4(1.577e-01, -2.004e-01, 2.092e-01, 1.863e-02, -1.039e-02, 1.533e-02, 1.344e-02, 1.651e-02, 1.502e-02, -9.848e-02, -8.285e-02, -6.747e-02, -8.242e-02, 7.964e-03, -2.385e-01, -1.411e-01) * s0_2_0;
	r2 += M4(-1.915e-02, -1.567e-01, 2.328e-01, 2.536e-01, 2.045e-02, -9.775e-02, 1.251e-02, -4.836e-02, -6.624e-03, -2.868e-01, -1.363e-01, 8.267e-02, -6.047e-02, -3.037e-03, -1.008e-01, -6.155e-01) * s0_2_0;
	r0 += M4(1.061e-01, -9.692e-02, 1.693e-01, -1.047e-01, 2.650e-02, -2.916e-02, 9.033e-02, 5.070e-02, -3.693e-01, -2.005e-01, -1.632e-01, -2.995e-01, -2.729e-01, -2.514e-02, 1.323e-01, 2.933e-02) * s0_2_1;
	r1 += M4(-1.616e-01, 7.403e-02, -1.144e-01, -8.588e-02, -7.552e-02, -3.904e-02, -9.970e-02, -2.542e-02, -1.013e-01, 2.536e-02, 1.713e-01, -1.857e-02, -6.678e-02, -2.410e-01, -1.689e-01, -2.707e-02) * s0_2_1;
	r2 += M4(1.237e-01, 7.886e-02, 1.294e-01, 2.686e-01, -7.897e-02, 1.143e-01, -2.187e-01, -2.705e-01, 2.551e-02, 1.582e-02, -2.482e-01, -1.373e-01, -1.287e-01, 1.264e-01, -1.635e-01, -5.531e-01) * s0_2_1;
	r0 += M4(-5.977e-02, 1.344e-02, -2.883e-02, -7.220e-05, 2.759e-03, 8.130e-02, -3.600e-02, 9.080e-02, 2.173e-02, -2.281e-02, -3.515e-02, 1.811e-03, -1.795e-01, 1.370e-01, 8.722e-02, 2.271e-02) * s0_2_2;
	r1 += M4(-8.279e-03, -1.241e-01, 4.174e-02, 5.512e-04, 1.452e-02, 3.392e-02, -2.227e-02, 2.651e-02, 3.807e-02, 1.502e-01, -1.411e-01, 1.336e-02, 4.237e-02, 4.104e-02, 1.733e-01, 7.583e-02) * s0_2_2;
	r2 += M4(-1.164e-01, -4.534e-02, 1.546e-01, 1.230e-01, -7.652e-02, -4.197e-02, -2.129e-02, -1.593e-01, 2.252e-02, 1.122e-01, -1.183e-01, -9.697e-02, -9.255e-02, 3.335e-03, 5.552e-02, -3.718e-02) * s0_2_2;
	r0 += M4(1.443e-02, 1.949e-01, 9.177e-02, 1.575e-01, -7.202e-02, -3.649e-05, 6.373e-02, -1.276e-02, 1.134e-02, -7.204e-02, 2.289e-02, -1.898e-02, 3.025e-02, 5.327e-02, -1.253e-01, 8.691e-03) * s1_0_0;
	r1 += M4(1.048e-01, 3.133e-01, -9.840e-02, 7.617e-02, -7.808e-02, -3.306e-01, -9.613e-02, -9.984e-02, 8.162e-03, 2.336e-01, 1.236e-01, -1.499e-02, 2.749e-02, 3.824e-02, -2.895e-02, -1.050e-01) * s1_0_0;
	r2 += M4(5.295e-02, -1.000e+00, 1.607e-01, 2.027e-01, 1.742e-01, -5.360e-01, 2.414e-01, 1.734e-01, -6.994e-03, -7.903e-02, 9.595e-02, -8.959e-02, -1.699e-03, 2.537e-01, -7.887e-02, -8.444e-02) * s1_0_0;
	r0 += M4(-2.086e-01, -8.633e-02, 1.743e-01, -1.861e-01, 6.628e-02, -6.982e-02, 7.283e-02, 2.168e-01, -1.325e-02, 8.926e-02, -3.582e-02, -3.247e-03, 7.364e-02, -1.592e-02, -1.619e-01, 7.160e-02) * s1_0_1;
	r1 += M4(-5.350e-01, -3.866e-01, -3.616e-02, -1.042e-01, 2.003e-01, 2.098e-01, -5.366e-02, -3.859e-02, -7.632e-02, -2.289e-01, -5.510e-02, 1.344e-02, 2.407e-01, -4.838e-02, -2.498e-01, -8.944e-03) * s1_0_1;
	r2 += M4(-6.675e-02, -5.393e-01, 8.102e-02, 1.437e-01, -4.863e-02, 4.734e-01, 4.043e-01, 7.354e-02, 1.613e-02, 2.701e-02, -1.288e-01, -3.474e-02, 1.114e-02, 1.036e-01, -2.001e-01, 9.602e-03) * s1_0_1;
	r0 += M4(8.583e-02, -1.082e-01, 3.630e-02, -1.208e-01, 1.021e-01, 3.944e-02, -1.602e-02, -2.944e-02, -3.777e-02, 1.983e-02, -8.913e-03, 9.399e-02, 8.063e-02, -5.990e-02, -1.839e-01, -1.477e-01) * s1_0_2;
	r1 += M4(-3.660e-01, -8.866e-02, -4.075e-01, -8.622e-02, -3.671e-02, -3.074e-02, 1.438e-02, -2.165e-02, 8.665e-02, 3.787e-02, -6.505e-03, 1.942e-02, -6.938e-02, 7.184e-02, -7.562e-02, 5.405e-03) * s1_0_2;
	r2 += M4(1.208e-01, 8.674e-02, 1.061e-01, 2.101e-02, 1.186e-01, -3.067e-02, 1.616e-01, 4.561e-02, -7.537e-02, 1.820e-02, -6.500e-02, -3.190e-03, 1.253e-01, -1.865e-02, 9.024e-02, 1.571e-02) * s1_0_2;
	r0 += M4(2.209e-01, -2.929e-02, 4.172e-02, 2.171e-01, -3.622e-02, 1.934e-01, 5.836e-02, -8.611e-02, 1.815e-02, -2.097e-02, -6.375e-02, 5.404e-02, -3.758e-02, -1.208e-01, -1.358e-01, -8.291e-02) * s1_1_0;
	r1 += M4(2.515e-01, 3.304e-01, 4.487e-01, -1.335e-02, -1.209e-01, -2.456e-01, -1.854e-01, -1.050e-02, 9.463e-02, 1.581e-01, 8.344e-03, -6.863e-02, -7.900e-03, 1.854e-01, -5.684e-02, 2.343e-02) * s1_1_0;
	r2 += M4(-2.305e-01, -1.000e+00, -2.856e-01, -1.357e-01, 2.230e-01, -3.873e-01, 1.574e-01, 1.704e-01, 9.759e-02, -4.150e-01, -1.499e-01, 1.252e-02, -1.767e-01, -4.167e-01, -3.552e-02, 2.435e-01) * s1_1_0;
	r0 += M4(-5.030e-01, -1.285e-01, -4.773e-01, -7.016e-01, 3.359e-01, -1.610e-01, -4.818e-01, 1.159e-01, -3.139e-01, -1.836e-01, -2.664e-01, -5.180e-01, -1.802e-01, -9.107e-02, -5.872e-02, -3.333e-01) * s1_1_1;
	r1 += M4(-9.082e-01, -8.302e-01, -1.000e+00, -1.713e-01, 1.941e-01, 6.369e-02, 1.375e-01, -1.675e-01, -1.230e-01, -4.482e-01, -2.412e-01, -5.181e-02, -1.000e+00, -8.390e-01, -5.020e-01, -8.229e-02) * s1_1_1;
	r2 += M4(-3.782e-01, -3.242e-01, -7.188e-01, -7.362e-01, -4.636e-01, 1.320e-02, -8.818e-02, -6.155e-02, -1.811e-01, 1.494e-01, -1.529e-01, 3.159e-01, 1.443e-01, -2.106e-01, 7.400e-02, 9.198e-02) * s1_1_1;
	r0 += M4(-4.018e-01, -2.784e-01, -3.000e-01, -4.380e-01, -2.959e-01, 7.190e-02, -5.749e-02, 1.815e-01, 1.475e-01, -5.645e-02, 1.082e-02, -6.325e-02, 1.590e-01, -2.343e-02, 2.025e-02, 1.710e-01) * s1_1_2;
	r1 += M4(-5.527e-01, -7.058e-01, -3.452e-01, -3.718e-01, -1.305e-01, -1.003e-01, -1.531e-01, 2.656e-02, -1.534e-01, 6.156e-02, -4.142e-01, 1.016e-02, 4.111e-01, 9.773e-02, 3.161e-01, -6.012e-02) * s1_1_2;
	r2 += M4(-3.778e-01, 7.640e-02, -5.309e-01, -1.424e-01, -4.823e-02, -4.389e-02, -6.606e-02, -4.384e-02, 8.364e-02, -5.008e-02, 1.395e-01, 2.755e-02, 4.652e-02, 6.969e-02, 1.866e-01, 1.287e-01) * s1_1_2;
	r0 += M4(1.495e-01, -2.495e-02, -3.794e-03, 2.061e-01, -5.366e-04, -5.709e-03, -1.630e-01, -7.081e-02, -1.686e-02, -1.752e-02, 1.809e-02, -1.075e-02, -7.637e-02, -1.233e-01, -1.329e-01, -1.782e-01) * s1_2_0;
	r1 += M4(2.216e-02, 2.883e-01, 1.370e-01, 2.863e-02, 6.083e-02, -2.475e-02, 2.433e-02, -3.861e-02, -3.357e-02, 5.680e-02, -7.961e-03, 3.837e-03, -1.116e-01, -9.109e-02, 1.376e-02, -6.567e-02) * s1_2_0;
	r2 += M4(2.290e-01, -3.938e-01, -5.602e-02, -3.493e-01, -8.290e-03, 2.678e-02, 1.861e-01, 2.142e-01, 1.222e-01, -3.135e-01, -4.190e-02, -1.212e-01, -4.760e-03, -2.319e-01, 2.176e-03, -3.987e-01) * s1_2_0;
	r0 += M4(-5.887e-02, -1.652e-01, -1.066e-01, -2.826e-02, -3.026e-02, -1.155e-01, 1.745e-01, -1.558e-01, 1.143e-01, 1.757e-02, 1.230e-02, 1.508e-01, 5.971e-02, -2.279e-01, -4.971e-01, -1.370e-01) * s1_2_1;
	r1 += M4(1.343e-01, -7.525e-01, -2.200e-01, -2.765e-01, -1.150e-01, 4.919e-02, -9.388e-02, -3.371e-03, 4.616e-02, -1.876e-01, -1.711e-01, -1.337e-01, 9.416e-02, -6.307e-01, -2.839e-01, -2.201e-01) * s1_2_1;
	r2 += M4(-1.164e-01, -1.452e-01, -8.619e-01, -1.000e+00, 1.159e-01, 1.066e-02, 3.132e-01, 5.728e-01, -1.136e-01, 2.931e-01, -3.096e-01, -7.376e-01, -3.869e-01, 1.635e-01, -5.098e-01, -4.619e-01) * s1_2_1;
	r0 += M4(-3.833e-01, 3.478e-02, -1.259e-01, -7.737e-02, 2.338e-02, -1.653e-02, 1.770e-01, -4.087e-02, -1.371e-01, 1.086e-01, -1.488e-01, -2.849e-02, 1.378e-01, -1.258e-01, -1.114e-01, 1.338e-01) * s1_2_2;
	r1 += M4(2.276e-02, -1.496e-01, 2.570e-02, -4.234e-02, 4.765e-02, -4.157e-01, 1.121e-01, -8.905e-02, 3.213e-02, 9.645e-02, 1.573e-01, 1.489e-01, -2.113e-02, 3.126e-01, 6.457e-02, 5.137e-02) * s1_2_2;
	r2 += M4(-2.940e-01, 8.227e-02, -4.530e-01, -6.793e-01, 2.362e-02, -1.280e-02, 3.154e-01, 3.028e-01, -4.973e-03, -6.500e-02, -2.711e-01, -2.107e-01, 1.345e-01, 4.047e-03, -1.433e-01, 1.987e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(2.597e-02, 1.850e-02, 2.205e-02, 6.140e-02, 9.302e-02, -6.342e-02, -1.446e-02, 1.478e-01, -7.686e-03, 7.819e-02, 7.544e-02, 5.760e-02, -6.192e-02, -2.837e-02, 4.237e-02, -5.832e-02) * s0_0_0;
	r1 += M4(2.448e-02, 1.540e-01, 3.083e-02, 4.264e-02, 1.136e-01, 2.456e-01, -4.127e-02, 1.933e-01, -3.544e-02, -2.867e-02, -2.685e-02, -1.777e-02, -1.207e-01, -1.372e-01, 1.793e-01, -9.106e-02) * s0_0_0;
	r2 += M4(-1.838e-02, 3.118e-01, -3.282e-02, -7.418e-02, -1.392e-01, -1.072e-01, -2.974e-01, -5.171e-02, 7.630e-02, 1.553e-01, 2.007e-01, -1.702e-02, -5.709e-02, -5.364e-02, 1.941e-02, 9.500e-02) * s0_0_0;
	r0 += M4(3.166e-02, 8.265e-02, -6.072e-03, -1.097e-02, -1.495e-01, -1.159e-01, -1.645e-02, -1.059e-01, 1.986e-01, -2.243e-02, 2.982e-02, -5.141e-02, -1.214e-01, 8.418e-02, -3.793e-02, 1.841e-01) * s0_0_1;
	r1 += M4(2.107e-02, -1.995e-02, 6.891e-02, 3.259e-02, -2.459e-01, -1.142e-01, -5.621e-03, -1.473e-02, 1.897e-01, 1.239e-01, 1.125e-01, 2.810e-02, 1.645e-01, 1.596e-01, -9.110e-02, 2.071e-02) * s0_0_1;
	r2 += M4(2.705e-02, -2.247e-01, -1.814e-01, -5.917e-02, -1.243e-01, -1.295e-01, -2.323e-01, 8.930e-03, 1.294e-01, 7.603e-02, 1.820e-01, -4.632e-02, -1.353e-01, 1.819e-01, -1.234e-01, -1.066e-01) * s0_0_1;
	r0 += M4(-5.401e-02, -3.677e-02, 1.960e-02, -1.593e-02, -3.530e-03, -4.896e-02, -2.127e-02, 2.973e-02, -7.953e-02, 3.892e-02, 7.529e-02, 1.105e-01, 3.086e-02, 9.061e-02, -3.795e-02, -6.600e-02) * s0_0_2;
	r1 += M4(-2.189e-02, 3.441e-03, 1.367e-02, 8.273e-03, 7.612e-02, 4.430e-02, 6.988e-02, 5.498e-03, -2.042e-02, 9.547e-02, 4.334e-02, 8.935e-03, -4.954e-02, -1.168e-01, 6.341e-02, 5.076e-02) * s0_0_2;
	r2 += M4(-7.849e-02, 2.211e-02, -8.520e-02, -2.410e-02, -6.927e-02, 3.639e-03, -5.615e-02, -3.506e-02, 4.837e-02, 9.183e-02, 1.217e-01, 2.566e-02, 4.340e-02, -1.223e-01, -8.854e-02, -3.560e-02) * s0_0_2;
	r0 += M4(2.238e-02, 3.180e-02, -4.352e-02, -3.105e-02, 7.343e-02, -2.088e-01, 2.163e-01, 2.844e-01, 7.417e-02, -7.008e-02, 3.346e-02, 9.319e-03, -2.222e-01, 2.425e-02, -4.983e-02, -1.538e-01) * s0_1_0;
	r1 += M4(2.661e-02, 4.381e-02, -2.153e-02, -9.671e-03, 5.672e-02, 1.268e-01, 1.961e-01, 2.302e-01, 9.558e-03, 1.875e-02, 4.740e-02, 1.318e-01, -1.127e-01, -3.508e-01, -2.717e-01, 1.012e-01) * s0_1_0;
	r2 += M4(8.321e-02, 1.449e-01, 1.252e-01, 2.646e-02, -3.704e-01, 5.709e-01, 2.641e-02, -2.236e-01, -6.323e-02, -2.132e-01, -1.833e-01, 8.207e-02, 4.493e-02, -5.996e-01, 2.076e-01, 1.811e-01) * s0_1_0;
	r0 += M4(-2.922e-02, -8.597e-02, 1.210e-01, -2.092e-01, 1.969e-01, 2.368e-01, 3.037e-01, 3.456e-01, -4.248e-01, -2.822e-01, -2.658e-01, -3.740e-01, 1.535e-01, -1.687e-01, 2.407e-01, -2.456e-02) * s0_1_1;
	r1 += M4(-4.491e-02, -1.116e-01, -9.715e-03, 2.593e-02, 3.046e-01, 2.289e-01, 1.265e-01, 1.375e-02, -4.773e-01, -5.625e-01, -4.801e-01, -1.368e-01, 3.218e-01, 2.160e-01, 5.591e-01, -1.250e-02) * s0_1_1;
	r2 += M4(2.764e-01, -3.037e-01, 1.881e-01, 1.049e-01, 5.214e-01, -7.243e-02, 1.016e-02, -3.268e-01, -5.509e-01, -6.936e-02, -7.039e-01, 6.754e-03, -1.025e-01, 3.417e-01, 5.727e-01, 4.345e-01) * s0_1_1;
	r0 += M4(1.074e-02, -9.037e-02, 9.149e-02, -1.353e-01, 5.067e-02, -9.221e-02, 3.739e-02, -1.108e-01, 1.410e-01, 5.677e-02, -8.537e-02, -1.003e-01, -7.538e-02, 2.013e-02, -4.637e-02, -2.607e-01) * s0_1_2;
	r1 += M4(-6.659e-02, -2.948e-02, -2.473e-02, -3.747e-02, -1.984e-02, -1.531e-01, -9.226e-02, -1.448e-01, 1.514e-01, 4.736e-01, 3.602e-01, 2.327e-01, -8.373e-02, -1.291e-01, -2.186e-01, 1.944e-02) * s0_1_2;
	r2 += M4(-1.166e-01, 9.455e-02, -9.779e-04, 1.768e-02, 9.708e-03, -8.262e-02, -1.673e-02, -2.037e-03, 4.505e-02, 1.880e-01, -1.428e-01, 6.469e-02, -2.751e-02, -6.188e-02, -2.852e-03, 2.290e-02) * s0_1_2;
	r0 += M4(-2.606e-02, 4.418e-02, 1.606e-01, 8.668e-03, -4.073e-02, -4.821e-02, 1.561e-01, 4.329e-03, -5.281e-02, -2.193e-02, -2.762e-02, -9.265e-03, -5.643e-04, 3.905e-02, -4.719e-02, 3.285e-03) * s0_2_0;
	r1 += M4(-2.652e-02, 3.430e-02, -2.471e-02, 1.760e-02, -1.687e-02, 1.851e-02, -1.172e-01, 7.446e-02, 2.308e-02, -3.091e-02, 6.412e-02, -3.925e-02, -1.978e-02, -2.126e-01, 4.452e-02, 1.650e-02) * s0_2_0;
	r2 += M4(4.049e-02, 2.469e-01, 6.468e-02, 5.602e-02, -5.501e-02, 2.444e-01, -2.002e-01, -1.302e-01, -7.591e-02, -8.069e-02, 8.665e-02, 2.524e-02, -9.721e-02, -1.066e-01, -3.408e-01, -2.242e-01) * s0_2_0;
	r0 += M4(2.234e-02, 1.919e-01, 3.250e-01, 1.773e-01, 2.703e-01, 2.680e-01, -1.347e-01, 3.740e-01, -2.555e-01, -6.714e-02, -7.270e-02, -1.499e-01, -6.256e-02, 4.634e-02, -3.655e-02, -2.414e-02) * s0_2_1;
	r1 += M4(-1.365e-02, 7.044e-03, 2.135e-01, -6.236e-03, 1.309e-01, 2.903e-01, 2.081e-01, 1.302e-01, -1.121e-01, -2.814e-01, 7.353e-03, -8.958e-02, -1.046e-01, 1.675e-01, -1.764e-01, -4.070e-02) * s0_2_1;
	r2 += M4(3.660e-01, -4.004e-01, 2.581e-01, 6.695e-02, 9.027e-02, -1.867e-02, 3.907e-02, -1.736e-02, -1.154e-01, 3.080e-03, 1.607e-01, 3.320e-02, -1.684e-01, -1.359e-02, -1.912e-01, -1.926e-01) * s0_2_1;
	r0 += M4(2.587e-02, -1.704e-01, 9.375e-02, -6.200e-02, 3.645e-03, 1.809e-02, -8.221e-02, 1.103e-01, -3.697e-02, 1.577e-04, 7.755e-02, -2.125e-02, -1.567e-01, 1.830e-03, 2.996e-02, -1.898e-02) * s0_2_2;
	r1 += M4(2.107e-02, -1.443e-02, -2.144e-01, -1.101e-01, -2.171e-02, -1.166e-01, -3.748e-02, -3.742e-02, -6.445e-02, 2.581e-01, -2.245e-01, 5.110e-02, 3.673e-02, -8.001e-02, 1.987e-01, 1.722e-02) * s0_2_2;
	r2 += M4(-8.700e-03, 1.479e-01, -1.027e-01, -1.502e-01, -5.192e-03, -1.558e-01, -4.058e-02, -7.599e-02, 1.120e-01, 1.421e-01, 2.023e-01, 1.704e-01, -4.945e-02, 1.009e-02, -9.532e-02, -8.881e-02) * s0_2_2;
	r0 += V4(-1.226e-02, -1.230e-02, -1.547e-02, -1.048e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.952e-02, -1.997e-02, -1.887e-02, -1.102e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.738e-02, -2.521e-02, -1.523e-02, -1.496e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC [CuNNy_2x12_DS] -out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.976e-01, 3.183e-02, 1.491e-02, 3.430e-02, 4.460e-02, -5.657e-03, -6.718e-03, 1.800e-03, -9.155e-02, 1.607e-02, 1.117e-02, 2.250e-03, 2.154e-02, 4.441e-03, -1.703e-02, -5.727e-03) * s0_0_0;
	r0 += M4(1.392e-01, 5.282e-02, -2.977e-02, 3.310e-02, 1.285e-01, 1.624e-01, 2.128e-02, 5.896e-03, -7.017e-02, -2.339e-01, -8.119e-02, -3.919e-02, 5.261e-02, 8.612e-02, -1.322e-02, -1.315e-02) * s0_0_1;
	r0 += M4(3.895e-04, 3.633e-03, -1.893e-03, -1.812e-02, 6.945e-03, -2.003e-02, 1.149e-02, -8.524e-03, 4.090e-03, 4.626e-02, -1.578e-02, -3.519e-02, 4.287e-05, 1.083e-02, -7.046e-04, 2.792e-03) * s0_0_2;
	r0 += M4(1.602e-01, -4.041e-02, -3.792e-02, 5.041e-02, 4.554e-02, 3.148e-03, 1.284e-01, -7.857e-03, 3.674e-02, 1.500e-02, -1.026e-01, 9.123e-03, -1.724e-01, 1.722e-02, -9.936e-02, 9.213e-04) * s0_1_0;
	r0 += M4(-1.440e-01, 1.163e-01, 1.467e-01, -4.424e-01, -3.372e-01, -5.579e-02, -5.197e-02, 2.378e-01, 1.018e-01, 8.179e-02, 1.948e-01, -3.798e-02, 6.169e-02, -2.627e-01, 2.358e-01, 5.954e-02) * s0_1_1;
	r0 += M4(-8.471e-03, 4.000e-02, -1.973e-02, 8.667e-02, 3.206e-02, -1.421e-01, -1.922e-02, -1.799e-01, -3.232e-03, 2.632e-02, 1.051e-02, 9.739e-02, -7.267e-03, 7.385e-02, -1.963e-03, 8.911e-02) * s0_1_2;
	r0 += M4(-1.157e-03, -7.035e-03, -6.194e-03, -2.084e-02, 3.997e-02, 1.059e-02, -1.254e-02, 3.771e-03, -2.653e-03, -5.918e-03, 1.359e-02, 1.090e-02, -6.839e-03, 8.522e-04, -8.705e-03, 1.666e-02) * s0_2_0;
	r0 += M4(6.930e-03, 2.296e-03, 3.624e-02, 6.897e-02, 2.925e-02, 2.412e-02, -2.839e-02, -6.323e-02, -5.117e-03, -4.710e-03, 1.278e-03, 7.695e-03, 1.420e-02, 9.126e-03, -7.018e-02, -9.399e-02) * s0_2_1;
	r0 += M4(1.412e-02, 6.925e-04, -2.013e-02, 3.919e-02, -9.299e-03, 4.852e-03, 2.522e-03, 5.535e-03, 1.780e-03, 3.345e-03, 3.076e-04, 7.774e-03, 9.443e-04, 5.994e-03, -2.007e-03, -8.878e-03) * s0_2_2;
	r0 += M4(-4.857e-02, 1.702e-02, 2.582e-02, -7.983e-03, 3.297e-02, 1.015e-02, 6.833e-03, 1.419e-02, 8.271e-02, -2.732e-02, -4.132e-02, 2.056e-03, 3.918e-02, -1.214e-02, -1.347e-02, 4.390e-03) * s1_0_0;
	r0 += M4(-3.071e-02, 2.210e-02, 8.251e-03, 9.103e-03, 8.375e-02, -1.626e-01, -1.725e-02, -1.123e-02, -2.797e-02, 7.202e-02, 1.564e-02, 1.916e-02, -9.149e-02, 4.387e-02, 3.163e-02, -8.259e-05) * s1_0_1;
	r0 += M4(-5.463e-03, 1.059e-03, 6.161e-03, -5.237e-03, -1.404e-02, 5.662e-04, -9.542e-03, -3.638e-03, -6.181e-03, -1.005e-02, -1.424e-03, 2.929e-02, 2.475e-02, 2.763e-02, 1.499e-02, 8.258e-03) * s1_0_2;
	r0 += M4(9.974e-02, 2.275e-02, -6.646e-02, -2.021e-02, 7.007e-02, 9.665e-03, 8.325e-02, -1.715e-04, -2.017e-01, 2.870e-02, 8.693e-02, 3.700e-02, 5.230e-02, 5.015e-04, 1.333e-01, -8.899e-03) * s1_1_0;
	r0 += M4(2.549e-01, -3.535e-01, -7.451e-02, 2.437e-01, 1.323e-01, -1.467e-01, 2.901e-01, -2.822e-01, 1.649e-01, 7.690e-02, 1.450e-01, -4.152e-01, -9.848e-02, -9.011e-02, -4.128e-01, -6.401e-02) * s1_1_1;
	r0 += M4(-1.181e-02, 2.528e-03, 1.437e-02, -8.180e-02, -5.696e-03, -3.333e-02, -1.998e-02, -2.780e-02, -6.467e-03, -1.974e-02, -1.346e-02, 5.576e-02, -1.570e-02, 2.216e-01, 3.650e-02, 2.299e-01) * s1_1_2;
	r0 += M4(-2.351e-02, 2.984e-02, -1.412e-02, -3.235e-02, -1.937e-02, 3.925e-03, -1.563e-02, 8.869e-03, 7.946e-03, 3.521e-03, -4.724e-02, 2.396e-02, 1.047e-02, 8.982e-03, -1.551e-02, 4.865e-03) * s1_2_0;
	r0 += M4(-3.431e-02, -5.109e-03, -3.642e-02, 1.092e-01, 2.862e-03, -1.038e-03, -7.449e-03, -9.175e-03, 1.478e-03, -2.054e-03, 2.596e-02, 5.043e-02, -4.147e-02, -1.406e-02, 3.190e-02, -5.364e-02) * s1_2_1;
	r0 += M4(-1.363e-02, 6.817e-03, 6.493e-03, -4.896e-02, -1.005e-02, 7.987e-03, -2.542e-03, 4.084e-03, -1.163e-03, -8.925e-03, -3.510e-03, -5.056e-03, 3.045e-02, -1.628e-03, -4.946e-03, 1.050e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.991e-02, 2.305e-03, 9.795e-03, 2.615e-03, -4.099e-03, 1.958e-03, -4.758e-03, 1.062e-03, 1.179e-02, -9.771e-03, 1.581e-02, 4.361e-03, 5.212e-02, 1.733e-02, 3.882e-04, -8.455e-03) * s0_0_0;
	r0 += M4(-1.410e-01, -1.153e-01, 3.699e-02, -2.507e-02, 8.615e-03, -4.595e-03, 5.060e-03, -1.708e-03, 5.264e-02, 8.075e-02, 2.089e-02, 3.465e-02, -3.812e-01, -1.533e-01, 2.088e-01, 8.669e-02) * s0_0_1;
	r0 += M4(5.815e-03, -1.732e-02, 7.743e-04, 2.195e-02, -4.004e-02, 1.052e-03, 1.047e-02, 1.548e-03, 9.496e-04, 8.863e-03, 6.785e-03, 1.116e-02, 3.378e-02, -1.363e-01, -1.522e-02, 1.150e-01) * s0_0_2;
	r0 += M4(5.726e-02, -3.317e-03, 1.303e-01, 9.720e-03, 5.670e-04, -1.175e-03, 1.176e-03, 1.071e-03, 4.990e-02, -1.801e-02, -5.984e-02, -1.064e-02, -8.537e-03, 1.023e-02, 3.885e-03, -6.505e-03) * s0_1_0;
	r0 += M4(2.459e-02, 2.046e-01, -2.998e-01, 8.959e-02, 3.705e-03, -1.688e-02, -1.676e-02, -2.015e-02, 2.244e-01, 1.909e-01, -3.740e-01, -3.014e-01, -9.338e-02, -7.023e-02, 2.527e-01, 1.243e-01) * s0_1_1;
	r0 += M4(5.603e-03, -8.179e-02, 1.079e-02, -1.086e-01, -2.853e-01, 3.525e-01, -1.529e-01, 1.579e-01, -9.571e-03, 7.300e-02, 9.913e-03, -1.215e-01, -1.223e-02, -4.988e-02, -1.324e-02, 1.548e-01) * s0_1_2;
	r0 += M4(-5.892e-04, 3.789e-03, 9.247e-03, -1.008e-03, -2.931e-03, 1.056e-03, -2.370e-03, -4.931e-04, -1.886e-02, -4.641e-03, 2.606e-02, 8.426e-03, -1.217e-03, -1.450e-03, -1.390e-03, 1.381e-03) * s0_2_0;
	r0 += M4(-4.315e-03, -5.095e-03, 7.495e-02, 5.674e-02, 2.270e-03, -1.922e-02, 7.582e-03, -1.931e-02, -2.167e-02, -2.312e-02, 5.109e-02, 5.896e-02, 1.570e-02, 9.058e-03, -3.505e-02, -2.764e-02) * s0_2_1;
	r0 += M4(-2.119e-03, -1.400e-02, 1.764e-02, -3.043e-03, -1.401e-02, 1.288e-02, -1.548e-01, 1.880e-01, -4.971e-03, -9.489e-03, 1.249e-02, 3.308e-02, 3.935e-04, 6.321e-03, -3.738e-03, -2.250e-02) * s0_2_2;
	r0 += V4(-3.742e-05, -4.748e-05, -5.385e-05, -6.337e-05);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
